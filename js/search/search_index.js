var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddRoleCommand.html",[0,0.257,1,3.558]],["body/classes/AddRoleCommand.html",[0,0.295,1,5.345,2,0.848,3,0.099,4,0.088,5,0.088,6,6.527,7,4.48,8,0.286,9,0.861,10,1.603,11,6.636,12,1.192,13,2.432,14,2.919,15,4.092,16,2.251,17,0.374,18,5.075,19,0.815,20,0.009,21,0.656,22,0.325,23,0.688,24,5.075,25,4.176,26,0.89,27,3.325,28,5.075,29,2.984,30,0.641,31,0.158,32,3.18,33,2.445,34,2.808,35,0.911,36,1.002,37,1.492,38,0.421,39,0.933,40,1.687,41,4.088,42,1.821,43,5.075,44,4.48,45,2.605,46,2.925,47,2.605,48,1.86,49,0.11,50,1.654,51,2.282,52,5.075,53,5.075,54,3.795,55,2.605,56,4.48,57,4.48,58,1.026,59,5.075,60,0.933,61,4.403,62,1.265,63,4.48,64,4.403,65,1.373,66,4.657,67,1.905,68,5.345,69,5.075,70,2.956,71,5.075,72,1.775,73,0.73,74,2.515,75,5.075,76,2.029,77,1.492,78,4.48,79,0.007,80,0.007]],["title/controllers/AppController.html",[81,1.506,82,3.303]],["body/controllers/AppController.html",[0,0.394,3,0.132,4,0.117,5,0.117,20,0.009,31,0.164,38,0.562,49,0.146,79,0.008,80,0.008,81,2.705,82,5.936,83,2.495,84,5.979,85,3.246,86,3.477,87,5.456,88,3.748,89,5.936,90,2.563,91,3.903]],["title/modules/AppModule.html",[92,1.545,93,3.303]],["body/modules/AppModule.html",[0,0.24,3,0.08,4,0.071,5,0.071,14,2.322,16,2.252,20,0.009,31,0.174,35,0.739,36,1.137,37,1.209,38,0.341,39,0.757,48,1.153,49,0.089,77,2.115,79,0.006,80,0.006,82,4.966,83,2.121,92,2.874,93,6.675,94,1.908,95,1.908,96,2.039,97,2.039,98,1.908,99,3.183,100,1.908,101,3.631,102,3.631,103,3.631,104,5.506,105,5.652,106,5.506,107,5.506,108,5.506,109,5.506,110,2.853,111,2.039,112,1.515,113,4.113,114,3.536,115,5.756,116,5.048,117,2.729,118,4.113,119,4.113,120,4.113,121,4.113,122,4.113,123,2.19,124,4.113,125,5.756,126,4.113,127,4.113,128,4.113,129,3.313,130,3.819,131,4.113,132,3.819,133,5.756,134,1.971,135,3.631,136,3.819,137,4.113,138,4.113,139,2.276,140,2.276,141,3.819,142,2.039,143,3.631,144,4.113,145,4.113,146,3.631,147,4.113,148,4.113,149,4.113,150,4.113,151,4.113,152,4.113,153,3.631,154,4.113,155,4.113,156,4.113,157,4.113,158,4.113,159,4.113,160,4.113,161,4.113,162,4.113,163,4.113,164,4.113,165,4.113,166,4.113,167,4.113,168,5.756,169,4.113,170,4.113,171,4.113,172,4.113,173,4.113,174,4.113,175,4.113,176,4.113,177,4.113,178,4.113,179,4.113,180,4.113,181,4.113,182,4.113,183,4.113,184,4.113,185,3.631,186,4.113,187,4.113,188,4.113,189,4.113,190,4.113,191,4.113,192,6.926,193,3.631,194,4.113,195,3.631,196,1.1,197,2.476,198,4.113]],["title/injectables/AppService.html",[109,3.1,199,1.027]],["body/injectables/AppService.html",[0,0.345,3,0.115,4,0.103,5,0.103,8,0.335,9,0.95,12,1.316,17,0.449,19,0.9,20,0.009,21,0.65,22,0.291,23,0.759,26,1.04,30,0.748,31,0.155,37,1.743,38,0.492,49,0.128,50,1.478,79,0.007,80,0.007,109,5.141,139,3.281,140,3.281,199,1.703,200,2.438,201,5.233,202,1.588,203,2.76,204,7.326,205,5.928,206,5.237,207,7.326,208,4.619,209,7.326,210,7.018,211,5.928,212,4.16,213,2.751,214,2.585,215,2.37,216,1.826,217,7.326,218,3.511,219,5.928,220,2.51,221,3.933,222,1.702,223,5.928]],["title/controllers/AuditLogController.html",[81,1.506,224,3.303]],["body/controllers/AuditLogController.html",[0,0.295,3,0.099,4,0.088,5,0.088,8,0.286,9,0.861,10,1.603,12,0.911,17,0.286,19,0.624,20,0.009,21,0.45,22,0.249,23,0.526,26,0.89,30,0.641,31,0.171,37,1.492,38,0.421,42,1.821,49,0.11,50,1.265,58,1.026,65,1.373,73,1.064,79,0.007,80,0.007,81,2.262,83,1.87,85,2.432,86,2.605,88,2.808,91,2.925,220,2.148,222,1.457,224,4.963,225,4.48,226,7.394,227,5.075,228,4.34,229,5.504,230,4.72,231,2.996,232,6.923,233,5.075,234,2.321,235,2.029,236,7.394,237,4.48,238,3.2,239,4.48,240,4.48,241,4.906,242,4.48,243,3.795,244,5.075,245,5.075,246,3.054,247,3.795,248,3.795,249,4.262,250,4.663,251,4.088,252,2.605,253,3.054,254,3.054,255,3.2,256,3.367,257,3.994,258,3.054,259,2.029,260,3.561,261,5.075,262,5.075,263,3.2,264,5.075,265,5.075,266,5.075,267,5.075,268,4.48,269,5.075,270,4.48,271,5.075,272,1.973,273,5.075,274,5.075,275,5.075,276,3.054,277,5.075,278,3.561,279,5.075,280,2.148,281,5.075,282,3.795,283,5.075,284,5.075]],["title/classes/AuditLogFilterDto.html",[0,0.257,229,3.1]],["body/classes/AuditLogFilterDto.html",[0,0.399,2,0.892,3,0.104,4,0.092,5,0.092,8,0.301,17,0.451,20,0.009,22,0.427,23,0.903,26,1.402,31,0.147,49,0.115,73,1.294,79,0.007,80,0.007,90,2.02,202,1.486,220,3.5,229,4.812,249,4.877,250,5.336,251,4.299,285,7.299,286,4.711,287,7.575,288,7.575,289,7.057,290,4.811,291,5.337,292,5.337,293,5.61,294,4.104,295,6.856,296,5.337,297,5.337,298,5.337,299,5.337,300,3.541,301,4.575,302,3.63,303,2.4,304,5.803,305,4.549,306,4.812,307,3.52,308,5.337,309,5.337]],["title/modules/AuditLogModule.html",[92,1.545,136,2.93]],["body/modules/AuditLogModule.html",[0,0.341,3,0.114,4,0.101,5,0.101,16,2.488,20,0.009,31,0.168,35,1.052,36,1.157,38,0.486,40,1.947,49,0.126,79,0.007,80,0.007,83,2.679,92,2.765,94,2.718,95,2.718,96,2.904,97,2.904,98,2.718,99,3.79,100,3.669,110,3.605,111,2.904,112,2.159,114,3.12,123,3.12,136,6.011,224,5.914,241,6.039,242,5.172,310,5.172,311,5.172,312,5.172,313,6.981,314,5.859,315,5.859,316,5.859,317,3.242]],["title/injectables/AuditLogService.html",[199,1.027,241,2.93]],["body/injectables/AuditLogService.html",[0,0.277,3,0.093,4,0.082,5,0.082,8,0.269,9,0.825,10,1.778,12,0.855,16,2.354,17,0.404,19,0.88,20,0.009,21,0.635,22,0.391,23,0.742,30,0.803,31,0.149,37,1.4,38,0.395,40,1.582,49,0.103,50,1.186,58,1.286,60,0.876,62,1.585,65,1.582,73,1.031,77,2.462,79,0.006,80,0.006,199,1.479,200,1.958,216,1.585,220,2.015,228,3.964,229,5.367,230,2.865,231,2.283,232,4.202,239,4.202,240,4.202,241,4.22,249,4.129,250,4.518,268,4.202,270,4.202,272,2.474,276,4.603,278,4.464,280,2.693,282,4.757,318,4.202,319,3.666,320,6.324,321,4.76,322,4.76,323,6.361,324,5.367,325,4.76,326,4.76,327,2.774,328,7.164,329,5.615,330,4.76,331,4.76,332,4.76,333,4.76,334,4.76,335,4.76,336,4.76,337,4.76,338,4.76,339,4.76,340,5.615,341,4.76,342,2.634,343,4.76,344,6.361,345,6.361,346,3.835,347,4.76,348,2.864,349,4.76,350,4.76,351,4.76,352,4.76,353,4.202,354,4.76,355,3.341,356,4.202,357,4.202,358,4.76,359,4.76,360,2.693,361,4.202,362,4.76]],["title/interfaces/BotEvent.html",[363,2.546,364,3.1]],["body/interfaces/BotEvent.html",[3,0.128,4,0.114,5,0.114,8,0.37,9,1.011,17,0.37,19,0.807,20,0.009,21,0.582,22,0.322,23,0.68,30,0.829,31,0.128,39,1.208,49,0.142,79,0.008,80,0.008,214,2.863,234,2.725,363,3.784,364,5.469,365,4.607,366,6.879,367,5.795,368,7.336,369,6.565,370,7.588,371,6.565,372,7.793,373,6.565]],["title/modules/BotModule.html",[92,1.545,104,3.1]],["body/modules/BotModule.html",[0,0.293,3,0.128,4,0.087,5,0.087,16,2.39,20,0.009,31,0.177,35,0.902,36,0.992,38,0.417,40,1.67,49,0.108,79,0.006,80,0.006,92,2.573,94,2.331,95,2.331,96,2.49,97,2.49,98,2.331,99,3.526,100,3.059,104,6.253,110,3.268,111,2.49,112,1.851,114,2.675,123,3.51,134,2.408,317,2.78,374,4.435,375,4.435,376,4.607,377,4.274,378,3.99,379,5.024,380,4.93,381,5.024,382,2.191,383,2.78,384,4.93,385,5.024,386,4.626,387,4.626,388,5.024,389,5.024,390,3.799,391,2.675,392,3.168,393,4.93,394,5.024,395,5.024,396,4.93,397,5.024,398,5.024,399,4.93,400,6.592,401,6.592,402,4.93,403,3.526,404,3.757,405,1.513,406,4.93,407,5.024,408,5.024,409,3.526,410,4.93,411,5.024,412,4.93,413,5.024,414,5.024,415,4.93,416,5.024,417,5.024]],["title/classes/Channel.html",[0,0.257,418,1.432]],["body/classes/Channel.html",[0,0.351,2,0.476,3,0.055,4,0.049,5,0.049,8,0.161,17,0.467,20,0.009,21,0.635,22,0.451,23,0.849,26,1.452,31,0.104,39,0.524,48,2.358,49,0.061,65,1.109,72,2.835,73,1.299,79,0.004,80,0.004,90,1.077,196,1.174,202,0.952,216,0.71,230,2.642,231,3.106,259,3.31,280,1.205,290,1.713,300,1.889,301,4.537,302,3.886,303,1.28,342,3.6,348,2.748,360,2.549,405,1.814,418,2.857,419,2.129,420,3.379,421,4.565,422,4.316,423,2.568,424,5.77,425,4.316,426,4.007,427,4.007,428,3.555,429,4.316,430,5.77,431,6.022,432,2.912,433,2.53,434,5.063,435,3.536,436,2.847,437,2.847,438,5.316,439,0.908,440,2.912,441,2.847,442,3.536,443,2.847,444,4.39,445,3.081,446,3.536,447,2.847,448,4.39,449,3.803,450,4.503,451,2.847,452,3.536,453,2.847,454,2.91,455,2.847,456,2.642,457,2.847,458,4.007,459,3.536,460,2.847,461,4.226,462,2.847,463,3.555,464,3.536,465,2.847,466,2.847,467,3.081,468,3.081,469,3.536,470,3.379,471,2.847,472,3.536,473,3.081,474,2.53,475,2.847,476,3.536,477,2.847,478,2.847,479,2.847,480,4.181,481,4.316,482,3.379,483,2.293,484,2.293,485,4.517,486,2.642,487,3.536,488,4.316,489,1.974,490,2.293,491,2.293,492,2.912,493,1.28,494,2.293,495,2.129,496,1.713,497,2.293,498,1.889,499,2.293,500,2.293,501,1.998,502,2.293]],["title/classes/ChannelCleaned.html",[0,0.257,503,2.93]],["body/classes/ChannelCleaned.html",[0,0.403,2,0.742,3,0.086,4,0.077,5,0.077,8,0.251,9,0.787,12,1.242,17,0.464,19,0.746,20,0.009,21,0.538,22,0.403,23,0.629,30,0.561,31,0.118,38,0.369,49,0.149,65,1.794,67,2.361,73,1.313,79,0.006,80,0.006,196,1.188,202,1.316,203,2.734,213,3.449,218,3.73,220,1.881,231,3.137,423,2.129,439,1.431,454,3.147,470,3.828,498,4.932,503,4.589,504,3.322,505,2.294,506,5.772,507,4.518,508,6.625,509,3.233,510,3.654,511,6.071,512,4.443,513,4.443,514,4.443,515,4.443,516,3.958,517,4.443,518,2.281,519,4.028,520,6.151,521,4.446,522,6.472,523,4.89,524,4.89,525,3.827,526,4.028,527,3.322,528,4.89,529,3.579,530,3.499,531,3.322]],["title/controllers/ChannelController.html",[81,1.506,532,3.303]],["body/controllers/ChannelController.html",[0,0.173,3,0.058,4,0.052,5,0.052,8,0.168,9,0.589,10,1.81,12,0.535,14,1.926,17,0.375,19,0.816,20,0.009,21,0.589,22,0.413,23,0.688,26,1.164,30,0.838,31,0.159,33,1.674,35,0.535,36,0.588,37,0.875,38,0.247,39,0.548,42,1.068,48,0.834,49,0.064,50,1.132,58,1.113,60,1.38,62,1.988,65,1.728,67,1.905,73,1.281,77,0.875,79,0.004,80,0.004,81,1.015,83,1.097,85,1.427,86,1.528,88,1.647,90,1.127,91,1.716,139,1.647,140,1.647,196,0.796,202,0.645,203,1.51,206,2.865,208,1.877,216,1.654,221,1.975,222,1.304,231,1.977,234,2.743,235,1.19,252,1.528,253,1.792,254,1.792,255,1.877,256,1.975,257,2.734,258,1.792,259,1.19,260,2.089,263,4.186,329,5.441,348,2.464,360,2.332,403,3.866,418,2.822,423,2.177,427,2.226,439,1.712,470,3.474,486,1.792,489,1.4,492,4.09,496,1.792,503,1.975,506,5.107,507,4.38,519,1.975,520,2.226,526,1.975,527,2.226,532,3.397,533,2.628,534,1.716,535,5.509,536,5.509,537,5.509,538,5.509,539,5.509,540,2.977,541,2.977,542,3.659,543,2.977,544,2.977,545,2.977,546,5.509,547,2.977,548,4.543,549,2.977,550,2.977,551,2.977,552,3.659,553,4.965,554,4.965,555,4.965,556,2.977,557,2.977,558,2.398,559,6.176,560,2.977,561,2.977,562,2.977,563,2.977,564,4.326,565,1.975,566,2.226,567,4.543,568,5.636,569,4.437,570,2.398,571,4.01,572,2.977,573,3.014,574,2.977,575,3.188,576,2.089,577,2.398,578,2.977,579,2.089,580,2.226,581,2.089,582,2.089,583,1.716,584,2.977,585,2.977,586,2.226,587,2.977,588,5.347,589,3.397,590,4.186,591,4.61,592,2.514,593,4.543,594,2.977,595,2.977,596,6.164,597,2.977,598,2.977,599,5.509,600,2.977,601,2.977,602,2.977,603,3.826,604,3.659,605,2.977,606,2.977,607,2.977,608,2.977,609,2.977,610,2.089,611,1.792,612,2.977,613,2.398,614,2.226,615,2.226,616,2.977,617,2.977,618,2.977,619,2.398,620,1.528,621,2.977,622,2.977,623,2.977]],["title/classes/ChannelNotTextBasedException.html",[0,0.257,579,3.1]],["body/classes/ChannelNotTextBasedException.html",[0,0.419,2,0.962,3,0.112,4,0.1,5,0.1,12,1.034,17,0.325,19,0.707,20,0.009,21,0.511,22,0.282,23,0.597,31,0.14,38,0.478,49,0.155,60,1.323,70,2.876,72,2.516,73,1.129,76,2.302,79,0.007,80,0.007,228,3.186,418,2.332,489,1.308,505,1.777,579,5.506,580,5.38,581,5.506,582,5.506,583,4.522,592,3.981,624,3.631,625,4.948,626,5.38,627,3.566,628,6.35,629,4.638,630,6.35,631,4.536,632,4.536,633,3.82,634,4.948,635,3.186,636,5.082,637,2.759,638,4.04,639,4.33,640,2.854,641,5.082,642,4.306,643,3.82,644,3.631,645,3.631,646,3.82,647,3.82,648,3.82,649,3.82,650,5.082]],["title/classes/ChannelNotTextBasedExceptionFilter.html",[0,0.257,642,3.303]],["body/classes/ChannelNotTextBasedExceptionFilter.html",[0,0.412,2,0.939,3,0.109,4,0.097,5,0.097,8,0.317,9,0.919,17,0.317,19,0.69,20,0.009,21,0.498,22,0.275,23,0.582,30,0.709,31,0.138,38,0.466,49,0.153,60,1.303,70,2.246,72,1.964,73,0.808,76,3.102,79,0.007,80,0.007,228,3.92,418,1.821,489,1.276,505,2.186,579,5.717,580,5.297,581,5.444,582,5.444,583,4.695,592,3.108,624,3.542,625,4.892,626,4.201,627,2.784,628,4.959,630,4.959,631,4.892,632,5.137,633,3.727,634,5.137,635,3.108,636,4.959,637,3.395,638,4.971,639,4.903,640,3.511,641,4.959,642,5.297,643,4.699,644,4.892,645,3.542,646,3.727,647,3.727,648,3.727,649,3.727,650,4.959,651,5.617]],["title/classes/CleanWfpMember.html",[0,0.257,406,3.303]],["body/classes/CleanWfpMember.html",[0,0.284,2,0.816,3,0.095,4,0.085,5,0.085,8,0.276,9,0.839,10,1.573,12,0.877,17,0.365,19,0.795,20,0.009,21,0.747,22,0.317,23,0.67,25,4.114,26,0.857,27,3.263,29,2.91,30,0.617,31,0.15,32,3.101,34,2.703,35,0.877,36,0.964,37,1.436,38,0.405,39,0.898,45,2.507,46,2.815,47,2.507,48,1.814,49,0.105,50,1.217,55,3.322,60,1.19,62,1.809,77,1.903,79,0.006,80,0.006,215,3.089,216,1.217,360,2.74,377,4.24,406,4.839,409,3.428,474,2.815,489,1.109,493,2.196,542,3.935,652,6.406,653,4.312,654,6.471,655,4.312,656,4.885,657,4.885,658,4.885,659,3.428,660,4.081,661,2.94,662,5.712,663,5.422,664,5.333,665,4.312,666,3.653,667,4.312,668,3.428,669,3.935,670,4.885,671,4.885,672,2.815,673,3.446,674,4.885,675,4.885,676,3.08,677,4.885,678,4.839,679,4.885,680,4.885,681,4.885,682,3.935,683,3.241,684,4.453,685,4.885,686,4.885,687,4.885,688,3.935,689,4.885,690,3.428,691,4.839,692,4.885,693,5.213,694,4.885,695,5.712,696,5.712,697,5.213,698,5.712,699,4.312,700,4.312,701,3.08,702,3.08]],["title/classes/CommandValidationFilter.html",[0,0.257,703,3.1]],["body/classes/CommandValidationFilter.html",[0,0.336,2,0.964,3,0.112,4,0.1,5,0.1,8,0.326,9,0.934,10,1.702,17,0.326,19,0.709,20,0.009,21,0.639,22,0.283,23,0.598,29,2.594,30,0.728,31,0.153,35,1.036,38,0.598,39,1.061,49,0.125,60,1.325,62,1.438,76,3.288,77,1.696,79,0.007,80,0.007,215,2.306,216,1.438,234,2.519,505,2.223,631,4.952,632,5.186,644,4.952,659,4.048,660,4.542,673,3.072,690,4.048,702,4.542,703,5.054,704,6.358,705,5.092,706,5.769,707,8.225,708,5.769,709,7.202,710,5.769,711,5.769,712,5.769,713,5.769,714,4.647,715,5.769,716,5.769,717,2.594,718,5.769,719,5.769,720,4.048,721,5.769,722,5.769,723,3.827]],["title/classes/CommunityQuestionCommand.html",[0,0.257,393,3.303]],["body/classes/CommunityQuestionCommand.html",[0,0.2,2,0.574,3,0.067,4,0.06,5,0.06,8,0.194,9,0.656,10,1.733,12,0.909,13,1.648,14,2.582,16,2.192,17,0.374,19,0.814,20,0.009,21,0.695,22,0.325,23,0.686,25,3.527,26,1.053,27,2.7,29,2.7,30,0.758,31,0.152,32,2.426,33,1.865,34,2.8,35,0.909,36,0.679,37,1.011,38,0.42,39,0.632,40,1.143,45,1.765,46,1.982,47,1.765,48,0.964,49,0.074,50,1.261,51,1.546,58,1.339,60,1.55,62,2.027,65,0.711,72,2.316,77,1.766,79,0.005,80,0.005,85,1.648,215,2.023,216,1.993,222,1.453,238,3.191,272,2.335,276,2.069,294,1.765,355,2.413,370,5.302,393,3.785,489,0.781,573,3.358,592,1.903,660,3.191,666,3.785,673,2.695,676,2.168,690,2.413,702,2.168,723,3.358,724,6.233,725,3.035,726,5.061,727,6.006,728,5.302,729,3.438,730,5.061,731,5.848,732,4.215,733,3.438,734,3.438,735,7.503,736,4.954,737,3.438,738,3.438,739,4.954,740,6.624,741,3.438,742,3.438,743,2.168,744,5.061,745,2.069,746,3.358,747,3.035,748,2.571,749,3.785,750,4.491,751,2.571,752,3.438,753,3.438,754,3.438,755,2.281,756,2.571,757,3.438,758,3.987,759,3.438,760,3.438,761,3.438,762,3.035,763,2.571,764,2.281,765,6.624,766,3.438,767,3.438,768,2.571,769,5.061,770,3.438,771,5.061,772,2.77,773,3.035,774,4.468,775,3.438,776,2.281,777,2.878,778,5.061,779,3.035,780,3.438,781,2.571,782,5.061,783,6.624,784,2.77,785,3.035,786,2.571,787,3.438,788,5.061,789,5.061,790,3.438,791,3.438,792,3.438,793,3.785,794,3.438,795,3.438,796,5.061,797,3.438,798,2.571,799,3.438,800,5.061,801,3.552,802,3.438,803,2.77,804,3.438,805,3.438,806,3.438,807,3.438,808,3.438,809,4.468,810,3.438,811,3.438,812,3.438,813,3.438,814,3.438,815,3.438,816,3.438,817,2.281,818,3.438,819,6.006,820,3.438,821,3.438,822,3.438,823,1.648,824,3.035,825,3.035,826,3.035,827,3.035,828,2.413,829,3.438,830,3.035,831,1.546,832,5.061,833,2.77,834,2.77,835,3.438,836,3.438]],["title/classes/CommunityQuestionDto.html",[0,0.257,736,3.303]],["body/classes/CommunityQuestionDto.html",[0,0.422,2,0.973,3,0.113,4,0.101,5,0.101,8,0.329,17,0.409,20,0.009,22,0.424,26,1.271,31,0.141,35,1.046,36,1.15,49,0.126,73,1.188,77,2.13,79,0.007,80,0.007,202,1.571,235,3.153,259,3.299,302,3.78,303,2.619,348,2.897,489,1.993,581,5.085,714,5.837,735,7.747,736,5.419,758,4.361,762,6.396,763,5.419,837,6.963,838,5.142,839,5.085,840,6.396,841,6.396,842,7.246,843,6.396,844,5.825,845,5.085,846,5.825,847,4.088,848,5.837]],["title/classes/CommunityQuestionFormDto.html",[0,0.257,739,3.303]],["body/classes/CommunityQuestionFormDto.html",[0,0.386,2,1.107,3,0.129,4,0.115,5,0.115,8,0.374,17,0.374,20,0.009,22,0.325,26,1.161,31,0.152,35,1.19,36,1.308,39,1.218,49,0.143,79,0.008,80,0.008,202,1.698,739,5.858,809,7.363,849,6.915,850,5.847,851,8.341,852,7.833,853,6.623,854,5.847]],["title/interfaces/DiscordExecutionContext.html",[363,2.546,855,3.303]],["body/interfaces/DiscordExecutionContext.html",[0,0.347,3,0.116,4,0.103,5,0.103,8,0.336,9,0.952,10,1.29,12,1.069,17,0.336,20,0.009,30,0.751,31,0.155,37,1.75,38,0.494,39,1.095,48,1.668,49,0.128,50,1.483,58,1.484,60,1.095,62,1.483,79,0.007,80,0.007,134,2.853,199,1.707,222,1.709,234,2.081,363,3.43,365,4.177,378,3.52,382,1.978,383,3.294,405,2.682,505,1.837,627,3.64,855,5.956,856,5.492,857,4.794,858,4.793,859,7.341,860,5.952,861,4.42,862,4.177,863,4.451,864,4.177,865,3.582,866,3.753,867,3.753,868,4.177,869,5.254,870,5.254]],["title/classes/DiscordGuildMember.html",[0,0.257,871,3.303]],["body/classes/DiscordGuildMember.html",[0,0.387,2,0.849,3,0.099,4,0.088,5,0.088,8,0.287,17,0.48,20,0.009,22,0.442,23,0.688,26,1.492,31,0.144,49,0.11,65,1.531,67,2.124,73,1.326,79,0.007,80,0.007,90,1.924,196,1.359,202,1.44,293,4.662,294,3.41,301,3.676,302,4.003,303,2.286,304,4.662,307,3.41,454,3.322,480,4.078,482,4.189,831,3.327,871,4.968,872,7.618,873,4.487,874,4.265,875,6.533,876,6.533,877,5.193,878,4.901,879,5.083,880,4.095,881,5.083,882,5.083,883,5.083,884,5.083,885,5.083,886,6.643,887,5.083,888,5.083,889,5.864,890,3.059]],["title/classes/DiscordUser.html",[0,0.257,890,2.658]],["body/classes/DiscordUser.html",[0,0.292,2,0.568,3,0.066,4,0.059,5,0.059,8,0.192,17,0.47,20,0.009,22,0.448,26,1.459,31,0.098,48,1.847,49,0.073,60,0.923,72,2.572,73,1.311,77,1.476,79,0.005,80,0.005,90,1.286,196,2.395,202,1.293,231,3.068,302,3.742,303,1.528,360,3.306,420,4.154,421,5.161,432,3.329,433,2.892,434,5.017,449,1.881,454,3.433,456,3.965,480,4.03,482,3.762,485,4.154,489,2.023,611,2.046,828,5.161,831,3.307,874,3.797,877,5.161,878,4.578,880,4.043,890,3.591,891,2.738,892,5.815,893,5.815,894,6.492,895,5.815,896,5.815,897,4.879,898,4.806,899,6.588,900,4.927,901,3.399,902,6.588,903,3.399,904,5.019,905,3.399,906,3.399,907,3.399,908,5.019,909,4.43,910,5.019,911,5.019,912,3.399,913,4.43,914,3.399,915,3.399,916,5.019,917,5.019,918,3.399,919,3.753,920,3.399,921,3.399,922,5.019,923,5.019,924,3.399,925,4.462,926,3.753,927,2.542]],["title/injectables/DmMessageHandler.html",[199,1.027,928,3.1]],["body/injectables/DmMessageHandler.html",[0,0.316,3,0.105,4,0.094,5,0.094,8,0.306,9,0.898,10,1.655,17,0.391,19,0.666,20,0.009,21,0.481,22,0.266,23,0.562,26,0.951,30,0.685,31,0.162,35,0.974,36,1.071,38,0.45,39,0.998,49,0.117,62,1.352,74,2.688,76,2.168,79,0.007,80,0.007,85,2.6,199,1.61,200,2.231,202,1.502,203,2.673,214,2.365,215,2.168,216,1.902,234,2.423,327,2.365,405,2.503,745,3.264,746,3.598,768,4.056,776,3.598,777,2.6,831,2.439,928,4.862,929,6.149,930,6.149,931,4.369,932,6.928,933,6.928,934,5.424,935,5.424,936,6.928,937,5.424,938,5.424,939,4.056,940,3.598,941,5.424,942,3.806,943,3.42,944,4.056,945,4.788,946,5.424,947,5.424,948,6.928,949,5.424,950,5.424,951,5.424,952,3.806,953,4.788,954,6.928,955,5.424,956,5.424,957,5.424,958,5.424,959,5.424,960,5.424,961,5.424,962,4.369,963,4.369,964,5.424,965,4.788,966,5.424,967,5.424,968,4.369,969,3.42,970,5.424,971,5.424]],["title/classes/EditRoleData.html",[0,0.257,972,3.1]],["body/classes/EditRoleData.html",[0,0.299,2,0.444,3,0.052,4,0.046,5,0.046,8,0.15,17,0.419,20,0.009,21,0.659,22,0.444,23,0.854,26,1.304,31,0.1,39,0.766,48,2.433,49,0.057,60,0.766,61,1.765,72,2.03,73,1.289,77,1.224,79,0.004,80,0.004,90,1.007,100,1.234,202,1.112,214,1.816,216,1.802,231,2.866,259,3.348,272,1.034,280,2.172,290,1.601,300,1.765,301,4.001,302,3.714,303,1.196,342,4.208,348,2.52,360,3.061,420,3.236,428,3.404,432,1.765,433,1.533,434,5.12,439,1.304,440,2.763,449,2.304,454,3.519,456,3.793,463,2.763,473,4.691,480,4.127,482,4.215,485,3.974,489,2.013,493,3.965,610,2.922,611,1.601,659,3.601,669,2.143,828,1.867,878,1.601,900,5.56,919,4.342,927,1.989,972,3.601,973,1.989,974,5.384,975,5.988,976,5.988,977,5.217,978,5.988,979,4.53,980,2.66,981,3.676,982,3.676,983,2.66,984,3.676,985,4.53,986,2.66,987,4.53,988,4.53,989,4.133,990,3.676,991,3.676,992,3.676,993,2.66,994,2.66,995,2.66,996,4.53,997,2.66,998,4.677,999,2.66,1000,2.348,1001,3.676,1002,2.626,1003,3.676,1004,2.922,1005,2.66,1006,2.66,1007,2.66,1008,3.676,1009,2.143,1010,2.922,1011,1.765,1012,2.348,1013,3.354,1014,2.506,1015,4.677,1016,2.348,1017,4.677,1018,2.348,1019,3.354,1020,2.348,1021,2.348,1022,2.348,1023,2.348,1024,2.348,1025,2.348,1026,2.143,1027,2.348,1028,3.601,1029,2.348,1030,2.922,1031,1.989,1032,2.143,1033,2.143,1034,2.348,1035,1.989]],["title/interfaces/EventToLog.html",[218,2.117,363,2.546]],["body/interfaces/EventToLog.html",[3,0.114,4,0.102,5,0.102,8,0.332,9,0.945,17,0.332,19,0.723,20,0.009,21,0.522,22,0.288,23,0.609,30,0.743,31,0.114,38,0.488,49,0.127,79,0.007,80,0.007,203,2.953,213,3.382,218,3.494,220,3.506,235,2.351,363,3.39,365,4.128,489,1.656,509,3.882,516,3.882,518,3.742,625,5.222,637,3.969,1036,5.192,1037,8.675,1038,6.671,1039,8.281,1040,8.281,1041,6.435,1042,5.882,1043,4.836,1044,6.435,1045,6.671,1046,7.29,1047,5.872]],["title/classes/Explorer.html",[0,0.257,1048,3.558]],["body/classes/Explorer.html",[0,0.298,2,0.855,3,0.099,4,0.089,5,0.089,8,0.289,9,0.865,12,1.199,13,2.453,14,2.926,17,0.444,19,0.967,20,0.009,21,0.698,22,0.386,23,0.815,27,3.338,30,0.937,31,0.153,33,2.459,35,0.919,36,1.318,39,0.941,49,0.11,50,2.154,58,1.349,60,1.366,70,2.046,79,0.007,80,0.007,99,3.198,213,3.096,216,1.276,222,1.916,364,3.592,454,2.825,620,2.627,1038,4.123,1043,3.396,1048,5.375,1049,4.518,1050,6.673,1051,6.554,1052,6.673,1053,6.673,1054,8.522,1055,5.118,1056,6.673,1057,5.118,1058,8.368,1059,6.673,1060,5.118,1061,6.673,1062,5.118,1063,4.123,1064,5.375,1065,5.118,1066,5.118,1067,5.375,1068,5.118,1069,5.118,1070,5.118,1071,5.118,1072,5.118,1073,5.118,1074,5.118,1075,5.118,1076,5.118,1077,4.518,1078,5.118]],["title/classes/Guild.html",[0,0.257,439,0.914]],["body/classes/Guild.html",[0,0.42,2,0.968,3,0.113,4,0.1,5,0.1,8,0.327,17,0.444,20,0.009,21,0.73,22,0.441,26,1.379,31,0.14,42,2.078,49,0.156,65,1.628,67,1.662,73,1.322,79,0.007,80,0.007,90,2.191,202,1.565,304,5.067,439,1.704,480,4.201,874,3.337,1079,4.665,1080,6.337,1081,5.816,1082,5.883,1083,5.791,1084,5.791,1085,5.791,1086,2.973,1087,3.337,1088,4.665,1089,3.337]],["title/controllers/GuildAutoDeleteChannelController.html",[81,1.506,1090,3.303]],["body/controllers/GuildAutoDeleteChannelController.html",[0,0.361,3,0.089,4,0.079,5,0.079,8,0.258,9,0.804,10,1.853,12,0.822,17,0.396,19,0.863,20,0.009,21,0.623,22,0.344,23,0.728,26,1.232,30,0.887,31,0.146,37,1.346,38,0.38,49,0.099,50,1.141,58,1.42,60,1.292,62,1.751,65,1.745,73,1.23,79,0.006,80,0.006,81,1.561,83,1.687,216,1.876,222,1.314,235,1.83,246,2.756,263,3.908,327,3.063,382,2.502,391,4.008,392,2.887,418,2.687,439,0.947,534,2.639,564,4.93,565,4.66,566,5.253,620,3.864,1090,4.634,1091,5.67,1092,4.781,1093,3.688,1094,7.544,1095,7.024,1096,6.197,1097,7.024,1098,4.578,1099,5.818,1100,4.578,1101,4.578,1102,4.578,1103,4.578,1104,4.578,1105,6.197,1106,6.063,1107,4.66,1108,4.042,1109,4.042,1110,3.424,1111,4.578,1112,4.578,1113,4.578,1114,5.253,1115,4.578,1116,7.024,1117,4.578,1118,4.042,1119,3.688,1120,4.578,1121,6.197]],["title/classes/GuildAutoDeleteChannelDto.html",[0,0.257,1099,3.1]],["body/classes/GuildAutoDeleteChannelDto.html",[0,0.422,2,0.975,3,0.113,4,0.101,5,0.101,8,0.329,17,0.409,20,0.009,22,0.405,26,1.272,31,0.153,42,2.094,49,0.126,73,1.277,79,0.007,80,0.007,90,2.208,202,1.573,302,3.784,303,2.624,382,2.624,405,2.185,480,3.784,505,2.239,507,4.052,878,3.512,1091,5.237,1092,4.791,1099,5.091,1114,4.364,1122,6.969,1123,4.701,1124,4.366,1125,7.894,1126,5.836,1127,5.836,1128,7.255,1129,7.255,1130,7.255,1131,6.404,1132,5.836,1133,5.836,1134,5.836,1135,5.836,1136,5.836]],["title/modules/GuildAutoDeleteChannelModule.html",[92,1.545,1137,3.1]],["body/modules/GuildAutoDeleteChannelModule.html",[0,0.297,3,0.099,4,0.088,5,0.088,16,2.4,20,0.009,31,0.171,35,0.916,36,1.007,38,0.423,40,1.695,49,0.11,79,0.007,80,0.007,83,2.453,92,2.592,94,2.367,95,2.367,96,2.528,97,2.528,98,2.367,99,3.553,100,3.439,110,3.3,111,2.528,112,1.879,114,2.716,123,2.716,134,2.445,142,2.528,317,2.823,376,4.626,377,4.291,378,4.007,382,1.695,383,2.823,390,3.837,391,3.545,392,4.199,439,1.687,1090,5.543,1091,5.213,1092,4.348,1107,5.925,1137,6.429,1138,4.503,1139,4.503,1140,4.503,1141,4.144,1142,5.272,1143,4.503,1144,4.503,1145,4.503,1146,4.109,1147,2.94]],["title/injectables/GuildAutoDeleteChannelService.html",[199,1.027,1107,2.93]],["body/injectables/GuildAutoDeleteChannelService.html",[0,0.245,3,0.082,4,0.073,5,0.073,8,0.237,9,0.758,10,1.842,12,1.05,13,2.016,14,2.763,15,3.718,16,2.085,17,0.431,19,0.826,20,0.009,21,0.596,22,0.329,23,0.696,30,0.848,31,0.154,33,2.154,35,0.755,36,0.83,37,1.237,38,0.349,39,0.774,40,1.398,49,0.091,50,1.675,51,1.891,58,1.182,60,1.491,62,1.969,65,1.71,73,1.137,77,1.237,79,0.006,80,0.006,199,1.359,200,1.73,202,1.267,203,2.414,214,1.834,215,1.681,216,1.457,222,1.207,319,2.424,327,2.55,355,2.951,382,2.626,391,4.207,418,1.895,439,1.21,507,3.918,571,5.161,590,2.652,591,3.145,1089,2.424,1091,5.746,1092,4.829,1094,6.737,1099,5.097,1107,3.878,1108,3.713,1109,3.713,1114,3.145,1142,5.11,1145,3.713,1148,3.388,1149,7.263,1150,4.709,1151,5.846,1152,4.206,1153,5.846,1154,4.206,1155,5.161,1156,3.713,1157,5.846,1158,4.206,1159,4.206,1160,4.206,1161,4.206,1162,2.652,1163,4.206,1164,4.206,1165,4.206,1166,4.206,1167,4.206,1168,4.206,1169,4.206,1170,4.206,1171,4.206,1172,3.388,1173,3.388,1174,4.206,1175,4.206,1176,4.206,1177,3.145,1178,4.206,1179,4.206,1180,4.206,1181,3.713,1182,3.713]],["title/classes/GuildChannelEditOptions.html",[0,0.257,492,2.93]],["body/classes/GuildChannelEditOptions.html",[0,0.376,2,0.544,3,0.063,4,0.056,5,0.056,8,0.184,17,0.423,20,0.009,21,0.666,22,0.445,23,0.872,26,1.316,31,0.113,39,0.599,48,2.438,49,0.07,65,0.674,72,2.624,73,1.296,79,0.005,80,0.005,90,1.233,196,0.871,202,1.054,216,1.212,230,1.961,231,3.021,259,3.459,280,2.464,290,1.961,300,2.162,301,4.658,302,3.997,303,1.465,342,4.152,348,1.944,360,2.059,405,1.465,418,2.865,419,2.437,420,2.055,421,3.413,422,2.625,423,1.562,424,6.044,425,2.625,426,2.437,427,2.437,428,2.162,429,2.625,430,6.044,432,2.162,433,1.878,434,4.806,435,2.625,439,0.674,440,2.162,442,2.625,445,2.287,446,2.625,449,3.22,450,3.637,452,2.625,454,3.066,456,1.961,458,4.826,459,2.625,461,4.084,463,3.227,464,2.625,467,2.287,468,2.287,469,2.625,470,3.669,472,2.625,473,2.287,474,1.878,476,2.625,480,4.25,481,4.687,482,3.669,483,2.625,484,2.625,485,4.732,486,3.502,487,4.687,488,4.687,489,2.044,490,2.625,491,2.625,492,3.861,493,2.187,494,2.625,495,3.637,496,2.927,497,3.918,498,3.227,499,4.687,500,2.625,501,3.413,502,3.918,878,1.961,984,2.877,989,3.918,1000,2.877,1183,3.259,1184,3.259,1185,3.259,1186,3.259,1187,3.259,1188,3.259,1189,3.259,1190,3.259,1191,3.259,1192,3.259]],["title/controllers/GuildController.html",[81,1.506,1193,3.303]],["body/controllers/GuildController.html",[0,0.293,3,0.098,4,0.087,5,0.087,8,0.284,9,0.856,10,1.806,12,0.904,14,2.575,17,0.372,19,0.811,20,0.009,21,0.653,22,0.324,23,0.684,26,1.157,30,0.833,31,0.158,33,2.432,35,0.904,36,0.994,37,1.48,38,0.418,39,0.926,49,0.109,50,1.645,58,1.334,60,1.532,62,1.948,65,1.617,73,1.199,79,0.006,80,0.006,81,2.25,83,1.854,85,2.412,86,2.583,88,2.785,91,2.9,235,2.012,253,3.029,272,2.566,327,2.878,377,3.78,418,2.139,445,5.486,468,5.486,534,2.9,720,3.531,1146,4.054,1193,4.935,1194,4.442,1195,6.6,1196,6.6,1197,5.032,1198,7.817,1199,7.817,1200,5.032,1201,5.032,1202,5.316,1203,5.032,1204,4.054,1205,5.032,1206,5.032,1207,7.817,1208,7.817,1209,6.6,1210,5.032,1211,5.032,1212,5.032,1213,5.032,1214,5.032,1215,5.032,1216,5.032]],["title/classes/GuildDoesNotExistException.html",[0,0.257,1217,3.1]],["body/classes/GuildDoesNotExistException.html",[0,0.417,2,0.956,3,0.111,4,0.099,5,0.099,12,1.028,17,0.323,19,0.703,20,0.009,21,0.508,22,0.281,23,0.593,31,0.139,38,0.475,49,0.155,60,1.318,65,1.483,70,2.866,72,2.737,73,1.126,76,2.289,79,0.007,80,0.007,228,3.168,439,1.619,489,1.3,505,1.767,510,4.314,583,4.51,592,3.966,624,3.61,625,4.935,626,5.36,627,3.553,629,4.611,631,4.52,632,4.52,633,3.798,634,4.935,635,3.168,637,2.744,638,4.017,639,4.314,640,2.837,643,3.798,644,3.61,645,3.61,646,3.798,647,3.798,648,3.798,649,3.798,897,3.798,1217,5.492,1218,5.774,1219,5.492,1220,3.798,1221,3.61,1222,5.053,1223,5.053,1224,4.281,1225,5.053]],["title/classes/GuildDoesNotExistExceptionFilter.html",[0,0.257,1224,3.303]],["body/classes/GuildDoesNotExistExceptionFilter.html",[0,0.411,2,0.933,3,0.109,4,0.097,5,0.097,8,0.315,9,0.915,17,0.315,19,0.686,20,0.009,21,0.495,22,0.274,23,0.579,30,0.705,31,0.137,38,0.464,49,0.152,60,1.298,65,1.156,70,2.233,72,2.468,73,0.804,76,3.094,79,0.007,80,0.007,228,3.906,439,1.46,489,1.269,505,2.178,510,3.362,583,4.685,592,3.091,624,3.522,625,4.88,626,4.177,627,2.769,631,4.88,632,5.126,633,3.706,634,5.126,635,3.091,637,3.383,638,4.953,639,4.893,640,3.499,643,4.683,644,4.88,645,3.522,646,3.706,647,3.706,648,3.706,649,3.706,897,3.706,1217,5.705,1218,5.686,1219,5.43,1220,3.706,1221,3.522,1222,4.931,1223,4.931,1224,5.278,1225,4.931,1226,4.931]],["title/injectables/GuildMemberEvents.html",[199,1.027,1227,3.1]],["body/injectables/GuildMemberEvents.html",[0,0.163,3,0.054,4,0.048,5,0.048,8,0.157,9,0.561,10,1.842,12,0.776,13,1.338,14,2.384,15,3.297,16,1.711,17,0.415,19,0.838,20,0.009,21,0.631,22,0.349,23,0.706,26,1.196,30,0.861,31,0.155,33,1.593,35,0.501,36,0.551,37,0.821,38,0.232,39,0.513,40,0.928,42,1.002,48,0.782,49,0.06,50,1.607,51,1.255,55,3.059,58,1.485,60,1.388,61,3.511,62,2.215,63,2.464,64,3.511,65,1.095,66,3.034,67,1.519,72,0.976,73,0.762,74,2.954,76,2.382,77,0.821,78,2.464,79,0.004,80,0.004,85,2.536,134,1.338,142,1.383,196,2.098,199,1.005,200,1.148,202,0.937,203,1.98,214,1.217,215,1.116,216,1.319,222,1.711,234,1.512,252,2.716,348,1.728,377,3.651,378,2.856,382,1.437,383,1.544,405,1.302,409,1.959,418,0.905,439,0.578,493,2.379,506,1.959,573,2.868,591,2.087,620,1.433,717,1.255,863,2.087,864,3.713,890,1.68,897,1.852,909,2.464,969,3.758,1014,1.68,1035,2.087,1141,3.525,1147,1.609,1204,2.248,1227,3.034,1228,6.66,1229,2.464,1230,3.816,1231,4.323,1232,4.8,1233,4.323,1234,4.323,1235,4.323,1236,4.323,1237,4.323,1238,6.503,1239,4.323,1240,2.791,1241,4.323,1242,5.729,1243,4.323,1244,2.791,1245,3.482,1246,4.323,1247,2.791,1248,4.323,1249,4.323,1250,2.791,1251,4.323,1252,3.957,1253,2.791,1254,4.323,1255,5.292,1256,4.323,1257,2.791,1258,2.791,1259,4.323,1260,2.248,1261,2.602,1262,2.791,1263,2.248,1264,3.482,1265,2.791,1266,4.262,1267,2.791,1268,4.323,1269,2.464,1270,1.852,1271,2.248,1272,2.791,1273,2.464,1274,2.464,1275,3.233,1276,2.791,1277,2.464,1278,2.791,1279,2.791,1280,2.464,1281,2.791,1282,2.791,1283,2.464,1284,2.464,1285,2.464,1286,2.464,1287,2.791,1288,2.791,1289,2.248,1290,2.464,1291,2.791,1292,2.248,1293,2.791,1294,2.791,1295,2.791,1296,2.464,1297,2.248,1298,2.791,1299,4.323,1300,3.816,1301,2.791,1302,4.323,1303,2.791,1304,3.816,1305,3.816,1306,4.671,1307,2.464,1308,2.791,1309,6.819,1310,2.248,1311,2.791,1312,2.248,1313,2.791,1314,2.791,1315,2.791,1316,2.464,1317,2.791,1318,2.791,1319,2.791,1320,2.791,1321,2.791,1322,2.791,1323,2.791,1324,2.791,1325,2.248,1326,2.464,1327,2.464,1328,2.248,1329,2.791,1330,2.464,1331,2.791,1332,2.791,1333,2.248,1334,2.248,1335,2.087,1336,2.791,1337,2.791,1338,2.791,1339,2.791,1340,2.464,1341,2.791,1342,2.464,1343,2.791,1344,1.959,1345,4.323,1346,5.292,1347,2.791,1348,5.959,1349,2.791,1350,2.791,1351,2.791,1352,2.791,1353,2.791,1354,3.816,1355,2.464,1356,4.671,1357,2.248,1358,2.791,1359,2.791,1360,2.791,1361,4.323,1362,2.791,1363,2.791,1364,2.791,1365,2.791,1366,2.791,1367,2.791]],["title/injectables/GuildMessageHandler.html",[199,1.027,1368,3.1]],["body/injectables/GuildMessageHandler.html",[0,0.256,3,0.085,4,0.076,5,0.076,8,0.248,9,0.782,10,1.778,12,1.083,17,0.388,19,0.845,20,0.009,21,0.61,22,0.38,23,0.713,26,1.057,30,0.761,31,0.159,35,0.79,36,0.868,37,1.293,38,0.365,39,0.809,49,0.095,50,1.096,58,1.39,60,1.361,62,1.503,65,0.91,67,1.262,79,0.006,80,0.006,85,2.107,142,2.179,199,1.401,200,1.808,214,1.918,216,1.096,222,1.262,234,2.588,276,2.646,360,1.861,382,1.461,405,2.582,418,1.425,507,2.257,573,3.999,691,3.288,828,3.086,856,3.288,862,4.828,929,5.962,931,3.542,940,2.917,945,6.073,1086,2.257,1141,3.97,1147,2.534,1270,2.917,1307,3.881,1368,4.231,1369,5.962,1370,4.856,1371,6.028,1372,4.397,1373,4.397,1374,6.028,1375,6.028,1376,4.397,1377,6.028,1378,4.397,1379,6.247,1380,3.288,1381,4.397,1382,4.397,1383,3.542,1384,3.542,1385,3.542,1386,6.879,1387,4.397,1388,6.534,1389,5.535,1390,7.402,1391,3.881,1392,6.073,1393,4.397,1394,4.397,1395,4.397,1396,4.397,1397,6.028,1398,4.397,1399,4.397,1400,4.397,1401,4.397,1402,4.397,1403,4.397,1404,4.397,1405,6.028,1406,4.397,1407,4.397,1408,4.397,1409,4.397,1410,4.397,1411,4.397,1412,4.397,1413,4.397,1414,4.397]],["title/modules/GuildModule.html",[92,1.545,105,3.1]],["body/modules/GuildModule.html",[0,0.267,3,0.089,4,0.079,5,0.079,16,2.328,20,0.009,31,0.174,35,0.824,36,0.905,38,0.381,40,1.524,49,0.099,79,0.006,80,0.006,83,2.285,92,2.458,94,2.127,95,2.127,96,2.273,97,2.273,98,2.127,99,3.369,100,3.262,105,6.465,110,3.075,111,2.273,112,1.689,114,3.303,123,2.442,130,5.381,132,5.381,134,2.198,135,4.048,141,5.381,142,2.273,143,4.048,317,2.537,376,4.488,377,4.51,390,4.341,391,3.743,392,2.892,405,1.868,439,1.628,664,3.042,928,5.692,930,3.694,1091,4.115,1092,3.433,1137,5.692,1146,3.694,1193,5.257,1227,5.692,1368,5.692,1369,3.694,1415,4.048,1416,4.048,1417,4.048,1418,4.048,1419,5.692,1420,4.585,1421,4.585,1422,4.585,1423,6.203,1424,6.203,1425,4.639,1426,4.585,1427,3.694,1428,2.643,1429,4.048,1430,4.585]],["title/controllers/GuildRestrictedChannelController.html",[81,1.506,1431,3.303]],["body/controllers/GuildRestrictedChannelController.html",[0,0.398,3,0.133,4,0.118,5,0.118,20,0.009,31,0.133,38,0.567,49,0.148,79,0.008,80,0.008,81,2.33,83,2.518,382,2.272,390,5.019,391,3.639,418,2.587,439,1.414,534,3.939,1093,5.505,1431,5.967,1432,6.835]],["title/modules/GuildRestrictedChannelModule.html",[92,1.545,1419,3.1]],["body/modules/GuildRestrictedChannelModule.html",[0,0.343,3,0.115,4,0.102,5,0.102,16,2.491,20,0.009,31,0.166,35,1.059,36,1.164,38,0.489,40,1.959,49,0.127,79,0.007,80,0.007,83,2.689,92,2.773,94,2.734,95,2.734,96,2.921,97,2.921,98,2.734,99,3.8,100,3.679,110,3.618,111,2.921,112,2.171,114,3.138,123,3.138,317,3.261,376,5.041,382,1.959,390,4.776,391,3.138,392,3.716,439,1.51,1143,5.202,1144,5.202,1419,6.289,1431,5.93,1433,5.202,1434,5.202,1435,5.893]],["title/injectables/GuildRestrictedChannelService.html",[199,1.027,376,2.444]],["body/injectables/GuildRestrictedChannelService.html",[0,0.261,3,0.087,4,0.077,5,0.077,8,0.253,9,0.791,10,1.897,12,1.096,13,2.145,14,2.816,15,3.842,16,2.141,17,0.44,19,0.959,20,0.009,21,0.692,22,0.383,23,0.808,30,0.941,31,0.152,33,2.248,35,0.804,36,0.884,37,1.316,38,0.371,39,0.823,40,1.488,42,1.606,49,0.097,50,1.521,51,2.012,58,1.507,65,1.811,73,1.282,79,0.006,80,0.006,196,1.197,199,1.418,200,1.841,222,1.285,272,3.034,319,2.58,327,3.252,376,3.377,382,2.676,390,5.044,391,4.288,418,2.251,507,4.523,1086,3.828,1124,4.179,1148,3.605,1150,5.593,1155,3.951,1156,3.951,1162,2.822,1436,6.102,1437,6.102,1438,6.102,1439,4.476,1440,6.102,1441,4.476,1442,6.102,1443,4.476,1444,5.387,1445,6.007,1446,4.476,1447,4.476,1448,4.476,1449,4.476,1450,4.476,1451,4.476]],["title/injectables/GuildService.html",[199,1.027,377,2.267]],["body/injectables/GuildService.html",[0,0.129,3,0.043,4,0.038,5,0.038,8,0.125,9,0.465,10,1.824,12,0.644,14,2.268,15,2.889,16,1.499,17,0.394,19,0.831,20,0.009,21,0.62,22,0.331,23,0.7,26,0.387,27,1.613,30,0.977,31,0.12,33,1.322,35,0.396,36,0.436,37,0.649,38,0.183,39,0.406,40,0.734,42,0.792,48,1.464,49,0.048,50,1.742,51,0.992,54,1.651,55,1.842,58,1.413,60,1.499,62,1.832,65,1.64,67,1.03,72,2.268,73,1.222,74,1.778,76,1.434,77,1.907,79,0.004,80,0.004,195,1.948,196,0.59,197,2.159,199,0.834,200,0.908,212,3.664,214,0.963,215,0.882,216,1.301,234,2.153,235,0.882,272,2.234,276,3.705,294,2.327,319,2.068,327,0.963,346,2.89,355,4.552,356,1.948,357,4.609,360,2.21,376,2.889,377,1.842,390,2.068,391,1.175,392,1.392,405,2.036,418,2.103,423,2.753,433,2.068,439,1.189,445,3.664,449,1.985,454,1.919,468,4.32,489,0.501,507,3.588,590,1.392,662,1.948,664,3.464,666,1.651,667,1.948,684,1.272,691,3.905,803,1.778,831,2.038,969,2.263,1002,1.392,1086,2.68,1089,2.613,1114,1.651,1118,3.167,1119,2.89,1124,2.729,1162,1.392,1202,5.63,1219,2.518,1232,4.206,1238,1.778,1274,3.167,1283,4.002,1285,1.948,1289,1.778,1292,1.778,1389,3.39,1444,1.948,1445,1.778,1452,1.948,1453,4.533,1454,4.533,1455,4.533,1456,4.533,1457,4.002,1458,3.588,1459,3.588,1460,1.778,1461,4.533,1462,2.207,1463,2.207,1464,6.155,1465,2.207,1466,4.206,1467,2.207,1468,2.207,1469,2.207,1470,2.207,1471,6.155,1472,4.603,1473,5.862,1474,3.905,1475,2.38,1476,4.533,1477,6.989,1478,6.155,1479,4.533,1480,5.434,1481,4.533,1482,6.76,1483,4.533,1484,4.002,1485,4.533,1486,6.155,1487,6.155,1488,4.533,1489,6.155,1490,4.533,1491,4.533,1492,4.533,1493,4.002,1494,2.89,1495,2.683,1496,2.683,1497,2.207,1498,2.207,1499,2.207,1500,5.221,1501,2.207,1502,3.167,1503,2.207,1504,3.588,1505,3.588,1506,3.588,1507,3.167,1508,3.588,1509,2.89,1510,3.588,1511,2.207,1512,3.588,1513,2.207,1514,1.948,1515,3.652,1516,2.207,1517,2.207,1518,3.588,1519,1.778,1520,1.948,1521,1.948,1522,1.948,1523,2.207,1524,2.207,1525,2.207,1526,2.207,1527,2.207,1528,2.207,1529,2.207,1530,2.207,1531,2.207,1532,2.207,1533,3.588,1534,5.221,1535,2.207,1536,1.948,1537,2.207,1538,4.609,1539,3.167,1540,3.588,1541,3.588,1542,4.533,1543,5.221,1544,2.89,1545,2.207,1546,3.588,1547,2.207,1548,2.207,1549,3.588,1550,3.588,1551,2.207,1552,4.533,1553,3.588,1554,2.207,1555,2.207,1556,2.207,1557,3.588,1558,2.207,1559,2.207,1560,2.207,1561,2.207,1562,2.207,1563,3.588,1564,2.207,1565,2.207,1566,2.207,1567,2.207,1568,2.207,1569,2.207,1570,3.588,1571,2.207,1572,3.588,1573,2.207,1574,2.207,1575,2.207,1576,2.207,1577,1.948,1578,2.207]],["title/controllers/GuildSettingsController.html",[81,1.506,1579,3.303]],["body/controllers/GuildSettingsController.html",[0,0.305,3,0.102,4,0.091,5,0.091,8,0.295,9,0.878,10,1.825,17,0.382,19,0.832,20,0.009,21,0.601,22,0.332,23,0.702,26,1.187,30,0.855,31,0.171,38,0.434,42,1.878,49,0.113,58,1.058,60,0.963,62,1.688,65,1.642,73,1.212,79,0.007,80,0.007,81,2.308,83,1.929,85,2.509,86,2.687,87,4.216,88,2.896,91,3.017,134,3.597,197,4.075,222,1.503,234,2.368,235,2.093,246,3.15,247,3.914,248,3.914,252,2.687,254,3.15,255,3.301,256,3.473,257,4.075,258,3.15,259,2.093,260,3.673,263,3.301,378,3.245,382,2.495,383,2.896,439,1.083,564,5.908,566,5.064,586,3.914,864,3.673,1579,5.064,1580,4.621,1581,5.977,1582,7.505,1583,4.621,1584,5.234,1585,5.234,1586,5.935,1587,5.234,1588,5.234,1589,5.234,1590,5.234,1591,5.234,1592,4.216,1593,4.216,1594,5.234,1595,5.234,1596,5.234,1597,5.234,1598,5.234]],["title/modules/GuildSettingsModule.html",[92,1.545,132,2.93]],["body/modules/GuildSettingsModule.html",[0,0.351,3,0.117,4,0.104,5,0.104,16,2.506,20,0.009,31,0.162,38,0.501,40,2.006,49,0.13,79,0.007,80,0.007,83,2.729,92,2.802,94,2.8,95,2.8,96,2.992,97,2.992,98,2.8,99,3.841,100,3.718,110,3.672,111,2.992,112,2.224,132,5.969,134,2.893,378,4.379,382,2.006,383,3.34,439,1.533,1579,5.993,1599,5.328,1600,6.036,1601,5.328,1602,6.036,1603,6.036]],["title/injectables/GuildSettingsService.html",[199,1.027,378,2.117]],["body/injectables/GuildSettingsService.html",[0,0.192,3,0.064,4,0.057,5,0.057,8,0.187,9,0.637,10,1.965,12,0.883,15,2.72,16,1.865,17,0.467,19,1.017,20,0.009,21,0.734,22,0.406,23,0.857,30,1.032,31,0.151,37,0.972,38,0.274,39,0.608,40,1.099,42,1.186,49,0.071,50,1.225,51,1.486,58,1.628,60,1.079,62,1.62,65,1.746,72,1.156,73,1.3,79,0.005,80,0.005,134,4.008,139,1.829,140,1.829,196,0.884,197,4.763,199,1.143,200,1.359,206,4.098,208,3.701,216,1.225,221,2.193,234,1.719,272,1.285,327,3.451,378,2.356,382,2.779,405,2.333,493,1.486,583,1.905,604,2.663,620,1.697,661,1.989,697,2.663,720,3.45,777,1.584,877,2.32,1124,1.989,1217,2.32,1219,2.32,1221,2.084,1460,2.663,1581,4.339,1583,4.339,1604,2.918,1605,5.869,1606,4.916,1607,4.916,1608,4.916,1609,4.916,1610,4.916,1611,4.916,1612,4.916,1613,4.916,1614,4.916,1615,3.305,1616,3.305,1617,5.869,1618,3.305,1619,4.916,1620,3.305,1621,4.916,1622,3.305,1623,4.916,1624,3.305,1625,4.916,1626,3.305,1627,4.916,1628,3.305,1629,3.305,1630,4.916,1631,3.305,1632,4.916,1633,3.305,1634,4.916,1635,3.305,1636,4.916,1637,3.305,1638,3.305,1639,2.918,1640,2.918,1641,2.32,1642,3.305,1643,2.918,1644,3.305,1645,3.305,1646,3.305,1647,3.305,1648,3.305,1649,3.305,1650,2.918,1651,3.305,1652,3.305,1653,3.305,1654,3.305,1655,3.305,1656,7.745,1657,3.305,1658,3.305,1659,3.305,1660,3.305,1661,3.305,1662,3.305,1663,3.305,1664,3.305,1665,6.498,1666,2.663,1667,3.305,1668,3.305,1669,2.663,1670,3.305,1671,3.305,1672,3.305,1673,3.305,1674,3.305,1675,3.305,1676,3.305,1677,3.305,1678,3.305]],["title/controllers/GuildUserController.html",[81,1.506,1679,3.303]],["body/controllers/GuildUserController.html",[0,0.393,3,0.101,4,0.09,5,0.09,8,0.294,9,0.875,10,1.623,12,0.935,14,2.618,17,0.294,19,0.64,20,0.009,21,0.702,22,0.255,23,0.539,26,0.913,30,0.657,31,0.169,33,2.486,35,0.935,36,1.028,37,1.531,38,0.432,39,0.958,49,0.112,50,1.682,58,1.053,60,0.958,62,1.298,65,1.698,67,2.149,73,1.21,79,0.007,80,0.007,81,2.3,83,1.918,85,2.496,86,2.673,88,2.881,91,3.001,142,3.345,222,1.937,234,2.36,235,2.082,246,3.134,252,3.464,253,3.134,263,3.284,382,2.488,439,1.077,874,4.315,1087,3.001,1110,3.894,1141,3.345,1147,3.001,1177,3.894,1270,3.455,1679,5.047,1680,4.597,1681,6.609,1682,4.597,1683,6.748,1684,5.207,1685,5.207,1686,5.047,1687,4.194,1688,4.597,1689,4.597,1690,7.487,1691,5.207,1692,5.207,1693,5.207,1694,6.748,1695,5.207,1696,5.207,1697,4.597,1698,4.597,1699,5.207,1700,5.207,1701,4.597]],["title/modules/GuildUserModule.html",[92,1.545,141,2.93]],["body/modules/GuildUserModule.html",[0,0.336,3,0.112,4,0.1,5,0.1,16,2.478,20,0.009,31,0.168,35,1.036,36,1.139,38,0.479,40,1.917,49,0.125,79,0.007,80,0.007,83,2.654,92,2.746,94,2.676,95,2.676,96,2.859,97,2.859,98,2.676,99,3.764,100,3.644,110,3.57,111,2.859,112,2.125,114,3.072,123,3.072,134,2.765,141,5.998,142,2.859,317,3.192,378,4.137,382,1.917,383,3.192,439,1.625,1141,4.503,1147,3.325,1679,5.873,1702,5.092,1703,5.092,1704,5.769,1705,5.769,1706,5.769]],["title/injectables/GuildUserService.html",[199,1.027,1141,2.189]],["body/injectables/GuildUserService.html",[0,0.13,3,0.043,4,0.039,5,0.039,8,0.126,9,0.469,10,1.936,12,0.649,14,2.278,15,2.001,16,1.507,17,0.448,19,0.965,20,0.009,21,0.697,22,0.385,23,0.814,26,0.634,30,0.992,31,0.132,33,1.332,35,0.4,36,0.44,37,0.655,38,0.185,39,0.41,40,0.741,42,0.8,49,0.048,50,1.874,51,1.002,54,1.667,55,2.343,58,1.568,60,1.248,62,2.166,64,3.83,65,1.821,66,3.685,67,2.501,68,1.795,72,0.779,73,1.311,77,0.655,79,0.004,80,0.004,134,1.068,139,1.233,140,1.233,142,3.978,197,2.747,199,0.841,200,0.916,210,1.967,214,0.972,215,0.891,216,1.137,234,2.877,252,2.964,272,3.121,276,1.341,294,1.144,319,2.084,327,0.972,346,1.795,348,2.881,378,2.517,382,2.668,383,1.233,423,2.517,439,1.087,493,1.002,590,1.405,664,1.478,817,1.478,863,1.667,1014,1.341,1067,4.23,1086,1.144,1089,1.284,1124,4.524,1141,1.792,1150,3.676,1162,2.28,1230,4.028,1232,4.23,1238,4.65,1245,1.795,1261,1.341,1289,1.795,1297,1.795,1300,1.967,1355,3.192,1379,1.795,1460,1.795,1466,4.981,1473,2.704,1480,3.192,1502,3.192,1514,1.967,1538,3.192,1539,1.967,1577,1.967,1641,3.685,1643,1.967,1707,1.795,1708,4.563,1709,4.563,1710,3.616,1711,3.616,1712,3.616,1713,4.563,1714,4.028,1715,3.616,1716,4.563,1717,3.616,1718,3.616,1719,4.563,1720,2.228,1721,2.228,1722,7.013,1723,2.228,1724,2.228,1725,2.228,1726,3.616,1727,2.228,1728,2.228,1729,2.228,1730,3.616,1731,2.228,1732,3.616,1733,2.228,1734,2.228,1735,2.228,1736,2.228,1737,2.228,1738,3.616,1739,2.228,1740,2.228,1741,5.251,1742,5.251,1743,4.635,1744,2.228,1745,3.616,1746,2.228,1747,3.616,1748,3.616,1749,2.228,1750,1.667,1751,2.228,1752,2.228,1753,2.228,1754,2.228,1755,2.228,1756,1.795,1757,2.228,1758,2.228,1759,2.228,1760,2.228,1761,2.228,1762,2.228,1763,3.927,1764,3.616,1765,2.228,1766,2.228,1767,2.228,1768,2.228,1769,2.228,1770,3.616,1771,2.228,1772,1.795,1773,2.228,1774,2.228,1775,2.228,1776,1.967,1777,2.228,1778,2.228,1779,2.228,1780,2.228,1781,2.228,1782,4.563,1783,3.616,1784,2.228,1785,2.228,1786,2.228,1787,2.228,1788,2.228]],["title/guards/HasRequiredRank.html",[257,2.658,1789,2.546]],["body/guards/HasRequiredRank.html",[0,0.257,3,0.086,4,0.076,5,0.076,8,0.249,9,0.783,10,1.494,12,1.085,16,2.356,17,0.341,19,0.742,20,0.009,21,0.536,22,0.296,23,0.626,30,0.763,31,0.156,36,0.871,37,1.297,38,0.366,40,1.466,42,1.583,49,0.095,50,1.847,51,1.983,55,4.214,58,1.221,60,1.475,62,1.099,64,2.926,65,0.912,67,1.978,77,1.297,79,0.006,80,0.006,196,1.981,199,1.404,202,0.956,203,2.29,216,1.847,222,1.734,235,1.763,249,3.481,252,3.985,254,3.636,256,2.926,257,3.636,258,4.147,259,3.103,327,1.923,360,1.867,454,2.557,489,1.372,505,1.361,620,3.101,635,2.44,637,2.895,640,3.415,858,4.825,861,4.46,865,3.636,1014,3.636,1043,4.008,1047,4.866,1261,4.46,1310,3.552,1344,4.239,1428,2.542,1475,2.926,1494,3.552,1544,3.552,1772,3.552,1789,4.271,1790,2.781,1791,3.552,1792,6.041,1793,5.332,1794,4.866,1795,6.041,1796,4.41,1797,8.017,1798,4.41,1799,4.41,1800,6.542,1801,6.041,1802,4.517,1803,5.332,1804,6.041,1805,5.332,1806,4.866,1807,4.41,1808,4.41,1809,4.41,1810,4.41,1811,4.41,1812,4.41,1813,3.552,1814,3.893,1815,3.893,1816,4.41,1817,3.893,1818,4.41,1819,4.41,1820,4.41,1821,4.41,1822,5.332,1823,3.893,1824,3.552,1825,3.893,1826,3.552,1827,3.893,1828,3.552]],["title/guards/IsModalInteractionGuard.html",[756,3.303,1789,2.546]],["body/guards/IsModalInteractionGuard.html",[0,0.368,3,0.123,4,0.109,5,0.109,8,0.356,9,0.987,17,0.356,19,0.776,20,0.009,21,0.56,22,0.31,23,0.654,29,2.84,30,0.797,31,0.148,38,0.524,39,1.162,49,0.136,58,1.277,60,1.162,79,0.007,80,0.007,454,3.224,505,2.35,640,3.131,756,5.694,758,4.583,858,5.108,861,5.228,865,4.583,866,3.983,1790,3.983,1829,6.722,1830,5.575,1831,6.316,1832,6.316,1833,6.316,1834,6.316]],["title/guards/IsUserUnlockedGuard.html",[862,3.1,1789,2.546]],["body/guards/IsUserUnlockedGuard.html",[0,0.333,3,0.111,4,0.099,5,0.099,8,0.322,9,0.928,10,1.695,12,1.286,17,0.404,19,0.88,20,0.009,21,0.635,22,0.351,23,0.742,30,0.721,31,0.152,37,1.68,38,0.474,39,1.051,48,1.602,49,0.123,50,1.424,58,1.447,60,1.051,62,1.424,79,0.007,80,0.007,134,2.738,199,1.664,222,1.64,234,2.504,363,3.293,378,3.928,382,1.899,383,3.162,405,2.632,505,1.763,627,2.832,640,2.832,855,6.13,856,5.847,857,4.602,858,4.309,859,5.044,861,4.933,862,5.024,863,4.273,864,5.024,865,4.309,866,3.603,867,3.603,868,4.01,869,5.044,870,5.044,1790,3.603,1835,5.044,1836,5.714,1837,5.714]],["title/controllers/JwtAuthController.html",[81,1.506,1838,3.303]],["body/controllers/JwtAuthController.html",[0,0.307,3,0.103,4,0.091,5,0.091,8,0.298,9,0.883,10,1.829,12,0.948,17,0.384,19,0.837,20,0.009,21,0.668,22,0.259,23,0.705,26,1.194,30,0.86,31,0.164,38,0.438,49,0.114,50,1.985,58,1.376,73,1.085,79,0.007,80,0.007,81,1.8,83,1.946,85,2.531,88,2.922,89,5.092,90,1.998,116,5.289,117,3.503,203,2.263,216,1.697,222,1.516,237,4.661,327,2.97,489,1.546,534,3.043,565,3.503,570,4.254,620,2.711,639,3.178,1666,4.254,1813,6.071,1838,5.092,1839,5.289,1840,4.661,1841,5.281,1842,6.011,1843,6.011,1844,5.281,1845,6.81,1846,5.281,1847,5.954,1848,5.281,1849,5.281,1850,6.81,1851,6.81,1852,5.281,1853,5.281,1854,4.518,1855,3.503,1856,4.661,1857,3.949,1858,5.281,1859,6.81,1860,6.011,1861,3.949,1862,5.281,1863,5.281,1864,5.281,1865,5.281,1866,5.281,1867,5.281,1868,5.281,1869,5.281,1870,5.281,1871,5.281,1872,5.281]],["title/injectables/JwtAuthGuard.html",[86,2.267,199,1.027]],["body/injectables/JwtAuthGuard.html",[0,0.398,3,0.133,4,0.118,5,0.118,20,0.009,31,0.155,38,0.567,49,0.148,79,0.008,80,0.008,86,4.096,199,1.855,200,2.811,253,4.113,627,3.955,1873,5.505,1874,7.044,1875,6.033,1876,4.534]],["title/modules/JwtAuthModule.html",[92,1.545,106,3.1]],["body/modules/JwtAuthModule.html",[0,0.304,3,0.101,4,0.09,5,0.09,16,2.414,20,0.009,31,0.173,35,0.937,36,1.03,38,0.433,40,1.734,49,0.113,79,0.007,80,0.007,83,2.489,92,2.62,94,2.42,95,2.42,96,2.586,97,2.586,98,2.42,99,3.591,100,3.476,106,6.371,110,3.349,111,2.586,112,1.922,114,2.777,123,2.777,317,2.886,1838,5.603,1839,3.661,1854,5.944,1855,4.971,1856,4.605,1861,3.901,1876,3.461,1877,4.605,1878,4.605,1879,4.605,1880,5.902,1881,5.902,1882,5.062,1883,5.216,1884,5.216,1885,5.216,1886,4.202,1887,6.756,1888,5.216,1889,4.202,1890,5.216,1891,6.756,1892,4.605,1893,5.216,1894,4.605,1895,5.216,1896,5.216,1897,4.605,1898,5.216]],["title/injectables/JwtAuthService.html",[199,1.027,1854,2.93]],["body/injectables/JwtAuthService.html",[0,0.219,3,0.073,4,0.065,5,0.065,8,0.212,9,0.7,10,1.84,12,0.97,17,0.43,19,0.899,20,0.009,21,0.649,22,0.373,23,0.758,30,0.872,31,0.156,35,0.675,38,0.312,39,0.691,49,0.081,50,1.956,55,1.929,58,1.396,60,1.346,62,1.575,67,2.186,70,1.502,73,1.222,79,0.005,80,0.005,116,5.506,117,2.493,153,3.317,196,1.847,199,1.255,200,1.545,202,1.17,203,2.296,214,1.639,215,1.502,216,1.823,220,1.591,222,1.983,234,2.415,272,1.461,327,2.354,439,0.777,565,2.493,620,3.243,634,2.369,639,3.803,717,1.689,777,1.801,1466,3.027,1592,3.027,1639,4.765,1750,4.037,1805,5.577,1839,5.506,1842,4.765,1843,5.577,1847,4.725,1854,3.581,1860,6.097,1861,2.81,1882,4.157,1886,3.027,1892,3.317,1894,4.765,1897,3.317,1899,3.317,1900,5.398,1901,5.398,1902,3.757,1903,7.616,1904,6.318,1905,5.398,1906,5.398,1907,3.757,1908,5.398,1909,3.757,1910,5.398,1911,3.757,1912,5.398,1913,3.757,1914,5.398,1915,6.318,1916,3.757,1917,6.318,1918,3.757,1919,3.317,1920,5.398,1921,5.398,1922,6.318,1923,3.757,1924,4.765,1925,5.398,1926,5.398,1927,5.398,1928,3.757,1929,3.757,1930,3.757,1931,3.027,1932,5.398,1933,3.757,1934,3.757,1935,3.757,1936,3.757,1937,3.757,1938,3.757,1939,3.757,1940,3.757,1941,3.757,1942,3.757,1943,3.317,1944,3.757,1945,5.398,1946,3.757,1947,3.757,1948,3.317,1949,3.757,1950,5.398,1951,5.398,1952,3.757,1953,3.757,1954,3.757,1955,3.757,1956,3.757,1957,3.757,1958,3.757,1959,3.317,1960,3.757,1961,3.757,1962,3.757,1963,3.757]],["title/injectables/JwtAuthStrategy.html",[199,1.027,1880,3.1]],["body/injectables/JwtAuthStrategy.html",[0,0.345,3,0.115,4,0.102,5,0.102,8,0.334,9,0.949,10,1.722,12,1.063,17,0.413,19,0.899,20,0.009,21,0.649,22,0.359,23,0.758,30,0.747,31,0.161,38,0.491,48,1.658,49,0.128,58,1.196,79,0.007,80,0.007,116,6.096,117,3.925,199,1.701,200,2.433,222,1.698,327,2.58,627,3.627,1220,3.925,1593,4.766,1750,4.425,1839,5.574,1855,3.925,1876,3.925,1880,5.135,1924,5.223,1964,5.223,1965,7.317,1966,5.894,1967,5.223,1968,5.917,1969,6.459,1970,5.917,1971,5.223,1972,5.223,1973,4.766,1974,5.223,1975,5.223,1976,5.917,1977,5.223,1978,5.223,1979,5.917,1980,5.917,1981,5.223]],["title/classes/LogEntry.html",[0,0.257,324,3.1]],["body/classes/LogEntry.html",[0,0.313,2,0.624,3,0.073,4,0.065,5,0.065,8,0.211,17,0.452,20,0.009,22,0.436,23,0.557,26,1.405,31,0.104,48,1.506,49,0.158,60,1.267,65,1.303,70,2.149,72,3.108,73,1.295,79,0.005,80,0.005,90,1.413,196,1.951,202,1.165,212,5.496,214,1.628,216,1.339,249,4.886,250,4.792,259,2.149,272,2.09,276,3.789,278,4.418,280,3.089,282,4.708,294,3.901,301,2.974,302,3.841,303,1.679,305,3.565,306,2.62,324,3.771,340,5.558,405,1.896,418,2.041,439,1.51,480,3.912,489,1.993,493,2.831,611,4.824,663,2.62,720,3.771,878,4.574,953,4.744,989,3.008,1077,4.744,1162,3.389,1495,5.15,1847,4.019,1982,2.792,1983,4.744,1984,5.374,1985,5.374,1986,3.734,1987,3.734,1988,6.887,1989,3.734,1990,5.374,1991,5.374,1992,4.744,1993,5.374,1994,3.734,1995,3.734,1996,5.374,1997,3.734,1998,4.744,1999,5.374,2000,3.734,2001,6.079,2002,4.329,2003,5.558,2004,5.374,2005,3.734,2006,5.374,2007,3.734,2008,5.374,2009,3.008,2010,3.296,2011,3.296,2012,4.744,2013,3.296,2014,3.296,2015,3.296,2016,3.296,2017,3.296,2018,4.744,2019,3.296,2020,3.296,2021,3.296,2022,3.008,2023,3.296,2024,3.296,2025,3.296,2026,3.296,2027,3.296,2028,3.296,2029,3.296,2030,3.296,2031,3.296,2032,2.62,2033,3.008,2034,3.734,2035,2.792,2036,3.296,2037,3.734]],["title/classes/LogEntryDto.html",[0,0.257,243,3.303]],["body/classes/LogEntryDto.html",[0,0.307,2,0.882,3,0.103,4,0.091,5,0.091,8,0.298,17,0.476,20,0.009,22,0.44,26,1.48,31,0.132,49,0.114,73,1.32,79,0.007,80,0.007,90,1.998,202,1.476,243,5.092,249,4.863,250,5.321,251,4.254,276,4.536,278,5.289,280,3.191,282,5.636,290,4.792,293,4.779,294,4.087,305,5,306,5.289,307,3.496,324,3.706,480,4.115,505,2.101,1082,6.311,1124,4.098,2038,7.578,2039,4.661,2040,5.281,2041,5.281,2042,5.281,2043,5.281,2044,5.281,2045,5.281]],["title/guards/MessageFromUserGuard.html",[1380,3.303,1789,2.546]],["body/guards/MessageFromUserGuard.html",[0,0.363,3,0.121,4,0.108,5,0.108,8,0.352,9,0.98,17,0.352,19,0.766,20,0.009,21,0.553,22,0.306,23,0.646,30,0.787,31,0.147,38,0.518,39,1.147,48,1.748,49,0.135,58,1.527,60,1.147,79,0.007,80,0.007,405,2.607,454,3.199,505,2.332,640,3.091,858,5.086,861,5.209,865,4.548,866,3.933,867,3.933,868,4.377,940,5.013,1380,5.651,1790,3.933,2046,5.506,2047,6.237,2048,5.506]],["title/guards/MessageIsDmGuard.html",[939,3.303,1789,2.546]],["body/guards/MessageIsDmGuard.html",[0,0.36,3,0.12,4,0.107,5,0.107,8,0.349,9,0.975,17,0.349,19,0.76,20,0.009,21,0.549,22,0.303,23,0.641,30,0.781,31,0.146,38,0.513,39,1.138,48,1.734,49,0.133,58,1.52,60,1.138,77,1.819,79,0.007,80,0.007,199,1.748,405,2.601,454,3.183,505,1.909,640,3.066,858,5.072,861,5.072,865,4.525,866,3.9,867,3.9,868,4.341,939,5.623,940,4.988,1790,3.9,2048,5.46,2049,5.46,2050,6.185]],["title/classes/ModAnnouncementDto.html",[0,0.257,2051,3.1]],["body/classes/ModAnnouncementDto.html",[0,0.417,2,0.956,3,0.111,4,0.099,5,0.099,8,0.323,17,0.404,20,0.009,21,0.508,22,0.422,26,1.257,31,0.139,35,1.028,36,1.13,48,1.605,49,0.124,72,2.507,73,1.18,77,1.683,79,0.007,80,0.007,202,1.554,235,3.129,259,3.279,301,3.966,302,3.751,303,2.574,348,3.129,405,2.662,489,1.777,683,4.755,688,4.611,823,3.751,831,3.223,839,4.017,843,5.053,847,4.017,848,5.774,2051,5.03,2052,6.908,2053,5.053,2054,7.826,2055,5.03,2056,5.725,2057,5.725,2058,7.168,2059,7.168,2060,5.725,2061,5.725,2062,4.017,2063,4.017,2064,4.611,2065,5.725,2066,5.053]],["title/classes/ModRequestFlow.html",[0,0.257,1425,3.303]],["body/classes/ModRequestFlow.html",[0,0.156,2,0.448,3,0.052,4,0.046,5,0.046,8,0.151,9,0.544,10,1.818,12,0.753,13,1.286,14,2.346,16,2.012,17,0.409,19,0.861,20,0.009,21,0.676,22,0.356,23,0.726,26,1.023,29,3.152,30,0.847,31,0.136,33,1.545,35,0.482,36,0.53,37,0.789,38,0.223,39,0.494,40,0.892,49,0.058,50,1.045,51,1.207,58,1.57,60,1.505,62,2.128,65,1.31,67,0.77,72,1.805,73,0.743,74,2.078,76,1.676,77,1.861,79,0.004,80,0.004,142,1.33,185,2.369,202,0.909,203,1.939,214,1.17,215,2.063,216,1.936,222,1.481,228,1.485,272,1.631,280,1.136,307,1.378,327,1.829,360,1.136,382,0.892,418,1.359,426,2.007,433,1.547,439,0.555,458,2.007,486,1.615,496,1.615,590,1.692,660,2.644,661,1.615,668,1.883,672,2.417,673,3.106,676,3.254,682,2.162,690,1.883,702,1.692,723,1.78,731,7.064,732,5.09,745,1.615,746,2.782,747,2.369,748,2.007,749,3.136,750,3.136,751,2.007,758,2.524,773,2.369,776,3.424,777,2.796,779,3.702,781,3.136,793,2.007,798,2.007,801,4.094,817,3.424,833,2.162,834,2.162,943,1.692,944,2.007,969,2.644,1009,2.162,1089,3.648,1141,3.474,1147,1.547,1162,1.692,1261,2.524,1270,1.78,1306,3.702,1340,2.369,1357,2.162,1425,3.136,1427,6.005,1428,4.296,1515,3.378,2067,6.581,2068,2.369,2069,5.161,2070,4.193,2071,4.193,2072,4.193,2073,4.193,2074,3.702,2075,4.193,2076,4.193,2077,2.684,2078,2.684,2079,4.193,2080,2.684,2081,4.193,2082,2.684,2083,4.193,2084,2.684,2085,4.193,2086,5.834,2087,2.684,2088,3.378,2089,4.699,2090,2.684,2091,4.193,2092,2.684,2093,2.684,2094,2.369,2095,4.193,2096,2.162,2097,3.378,2098,3.378,2099,2.162,2100,2.162,2101,2.684,2102,5.161,2103,2.684,2104,5.404,2105,2.684,2106,2.684,2107,2.684,2108,2.684,2109,2.684,2110,2.684,2111,2.684,2112,2.684,2113,4.193,2114,2.684,2115,2.684,2116,5.161,2117,4.556,2118,4.193,2119,4.193,2120,4.193,2121,4.193,2122,2.684,2123,2.684,2124,2.684,2125,5.15,2126,2.162,2127,4.193,2128,6.329,2129,2.684,2130,4.193,2131,2.684,2132,2.684,2133,2.369,2134,2.684,2135,2.684,2136,2.684,2137,2.684,2138,4.193,2139,2.684,2140,2.684,2141,2.684,2142,2.684,2143,3.702,2144,2.684,2145,4.193,2146,2.684,2147,2.684,2148,2.684,2149,2.162,2150,2.162,2151,2.162,2152,2.684,2153,2.684,2154,2.684,2155,2.684,2156,2.684,2157,2.684,2158,2.684,2159,2.684,2160,4.193,2161,2.369,2162,2.369,2163,2.684,2164,2.684,2165,2.684,2166,2.684,2167,2.684,2168,2.684,2169,2.684,2170,2.684,2171,2.369,2172,2.684,2173,2.684,2174,2.684,2175,3.702,2176,2.684,2177,3.378,2178,4.193,2179,2.007,2180,4.193,2181,4.193,2182,4.193,2183,2.369,2184,2.684,2185,1.78,2186,2.684,2187,2.684,2188,2.684,2189,2.684,2190,2.684,2191,2.684,2192,2.369,2193,2.162,2194,2.162,2195,2.684]],["title/modules/ModerationModule.html",[92,1.545,130,2.93]],["body/modules/ModerationModule.html",[0,0.344,3,0.115,4,0.102,5,0.102,16,2.493,20,0.009,31,0.171,35,1.061,36,1.166,38,0.49,40,1.963,49,0.127,79,0.007,80,0.007,83,2.692,92,2.775,94,2.74,95,2.74,96,2.927,97,2.927,98,2.74,99,3.804,100,3.391,110,3.622,111,2.927,112,2.176,114,3.891,123,3.144,130,5.899,136,5.761,317,3.268,532,5.935,2196,5.905,2197,5.905,2198,5.905,2199,5.905,2200,5.935,2201,5.935,2202,5.905,2203,5.905,2204,5.905,2205,5.905]],["title/classes/MumVoiceCommandChatInput.html",[0,0.257,386,3.1]],["body/classes/MumVoiceCommandChatInput.html",[0,0.342,2,0.709,3,0.082,4,0.073,5,0.073,8,0.239,9,0.763,10,1.66,17,0.239,19,0.521,20,0.009,21,0.599,22,0.331,23,0.439,25,3.881,26,0.744,27,3.277,29,3.035,30,0.535,31,0.142,32,3.235,34,3.735,35,1.056,36,0.837,38,0.352,39,0.78,45,3.019,46,3.389,47,2.177,48,1.189,49,0.127,58,1.189,60,1.242,62,1.974,70,2.351,74,3.346,76,2.699,77,2.388,79,0.006,80,0.006,216,1.682,234,2.36,238,3.708,348,1.696,386,4.127,387,2.976,405,2.306,418,1.906,474,2.444,489,0.963,672,2.444,673,4.076,683,2.814,701,3.708,717,3.035,723,3.901,732,2.976,743,2.675,745,2.553,748,3.172,749,4.398,750,4.398,751,3.172,755,2.814,758,3.539,764,2.814,777,3.893,781,3.172,793,3.172,798,3.172,801,2.976,823,2.818,831,1.907,962,3.417,1221,2.675,1370,5.871,1389,4.398,2051,5.115,2064,4.737,2088,3.417,2089,4.737,2100,3.417,2149,3.417,2150,3.417,2151,3.417,2206,4.737,2207,3.417,2208,3.744,2209,4.478,2210,4.241,2211,3.172,2212,5.191,2213,3.744,2214,3.744,2215,5.191,2216,3.417,2217,3.744,2218,5.959,2219,5.437,2220,5.959,2221,5.191,2222,5.191,2223,5.191,2224,3.172,2225,6.381,2226,5.191,2227,3.417,2228,3.744,2229,3.744,2230,3.744,2231,3.744,2232,3.744,2233,3.744,2234,3.744,2235,3.417,2236,3.744,2237,3.744,2238,2.675,2239,3.744,2240,3.744,2241,3.172,2242,3.744,2243,3.744,2244,3.417,2245,3.744,2246,5.959,2247,3.744,2248,3.744]],["title/classes/MumVoiceCommandUi.html",[0,0.257,387,3.1]],["body/classes/MumVoiceCommandUi.html",[0,0.337,2,0.692,3,0.081,4,0.072,5,0.072,8,0.234,9,0.75,10,1.749,17,0.326,19,0.711,20,0.009,21,0.64,22,0.354,23,0.599,25,3.08,26,1.014,27,3.244,29,3.244,30,0.73,31,0.14,32,3.194,34,3.688,35,1.039,36,0.818,38,0.344,39,0.762,45,2.969,46,3.333,47,2.126,48,1.161,49,0.125,58,1.169,60,1.226,62,1.96,70,2.312,74,3.304,76,2.665,77,2.373,79,0.006,80,0.006,216,1.661,234,2.331,238,3.647,348,1.656,386,2.907,387,4.059,405,2.286,418,1.875,474,2.387,489,0.941,672,2.387,673,4.041,683,2.748,701,3.647,717,2.997,723,3.837,732,4.059,743,2.612,745,2.493,748,3.097,749,4.325,750,4.325,751,3.097,755,2.748,758,3.481,764,2.748,777,3.868,781,3.097,793,3.097,798,3.097,801,2.907,823,2.772,831,1.862,962,3.336,1221,2.612,1370,5.811,1389,4.325,2051,4.059,2064,4.659,2074,5.106,2088,4.659,2089,5.811,2100,3.336,2149,3.336,2150,3.336,2151,3.336,2206,5.369,2207,3.336,2208,3.656,2209,2.748,2211,3.097,2212,6.369,2213,3.656,2214,3.656,2215,5.106,2216,3.336,2217,3.656,2218,5.884,2219,5.369,2220,5.884,2221,5.106,2222,5.106,2223,5.106,2224,3.097,2225,6.333,2226,5.106,2227,3.336,2228,3.656,2229,3.656,2230,3.656,2231,3.656,2232,3.656,2233,3.656,2234,3.656,2235,3.336,2236,3.656,2237,3.656,2238,2.612,2239,3.656,2240,3.656,2241,3.097,2242,3.656,2243,3.656,2244,3.336,2245,3.656,2246,5.884,2247,3.656,2248,3.656,2249,4.142,2250,4.142]],["title/classes/PermissionOverwrite.html",[0,0.257,461,3.1]],["body/classes/PermissionOverwrite.html",[0,0.403,2,0.629,3,0.073,4,0.065,5,0.065,8,0.213,17,0.213,20,0.009,21,0.613,22,0.444,26,0.661,31,0.123,39,0.693,48,2.38,49,0.081,65,0.779,72,2.903,73,1.299,79,0.005,80,0.005,90,1.425,196,1.007,202,1.172,216,0.939,230,2.267,231,3.047,259,3.36,280,1.595,290,2.267,300,2.499,301,4.777,302,4.106,303,1.694,342,4.052,360,2.29,405,1.629,418,2.848,419,2.817,420,2.375,421,3.795,422,3.034,423,1.805,424,5.57,425,3.034,426,2.817,427,2.817,428,2.499,429,3.034,430,5.57,432,2.499,433,2.171,434,4.937,435,3.034,438,3.325,439,0.779,440,2.499,442,3.034,445,2.643,446,3.034,449,3.501,450,4.044,452,3.034,454,2.927,456,2.267,458,4.044,459,3.034,461,4.853,463,4.198,464,3.034,467,2.643,468,2.643,469,3.034,470,3.41,472,3.034,473,2.643,474,2.171,476,3.034,480,4.316,481,5.097,482,3.99,483,3.034,484,3.034,485,4.951,486,3.255,487,4.356,488,5.097,489,2.04,490,4.356,491,3.034,492,3.588,493,1.694,494,3.034,495,2.817,496,2.267,497,3.034,498,2.499,499,3.034,500,3.034,501,2.643,502,3.034,2251,3.767]],["title/classes/PingCommand.html",[0,0.257,380,3.303]],["body/classes/PingCommand.html",[0,0.354,2,1.017,3,0.118,4,0.105,5,0.105,8,0.343,9,0.965,12,1.337,13,2.916,14,3.059,17,0.42,19,0.748,20,0.009,21,0.66,22,0.298,23,0.63,26,1.067,27,3.616,30,0.768,31,0.145,32,3.568,33,2.743,35,1.093,36,1.201,39,1.119,45,3.124,47,3.124,48,1.706,49,0.131,50,1.517,58,1.23,73,1.071,79,0.007,80,0.007,222,1.747,380,5.567,489,1.382,1275,4.551,2252,5.372,2253,7.397,2254,6.085,2255,6.085,2256,8.043,2257,6.085,2258,6.085,2259,4.902,2260,6.085,2261,6.085]],["title/injectables/PrismaService.html",[16,1.268,199,1.027]],["body/injectables/PrismaService.html",[0,0.355,3,0.119,4,0.106,5,0.106,8,0.344,9,0.967,10,1.921,16,2.14,17,0.421,19,0.749,20,0.009,21,0.541,22,0.299,23,0.632,30,0.941,31,0.145,38,0.506,42,2.188,49,0.132,62,1.858,79,0.007,80,0.007,199,1.732,200,2.508,505,1.882,627,3.694,1045,4.912,2262,5.382,2263,8.05,2264,7.453,2265,8.751,2266,7.453,2267,8.386,2268,6.097,2269,6.097,2270,6.097,2271,6.097,2272,6.097,2273,6.097]],["title/classes/PurgeCommand.html",[0,0.257,415,3.303]],["body/classes/PurgeCommand.html",[0,0.267,2,0.767,3,0.089,4,0.08,5,0.08,8,0.259,9,0.805,10,1.525,12,1.115,13,2.201,14,2.838,17,0.397,19,0.763,20,0.009,21,0.624,22,0.304,23,0.643,25,4.013,26,0.805,27,3.163,29,2.792,30,0.58,31,0.158,32,2.976,33,2.288,34,3.436,35,1.115,36,0.907,38,0.515,39,0.845,45,2.357,47,2.357,48,1.741,49,0.099,50,1.145,58,0.928,60,1.142,62,1.962,67,2.329,74,2.276,76,1.836,79,0.006,80,0.006,196,2.17,202,1.346,203,2.505,214,2.003,215,1.836,216,1.878,222,1.318,230,2.764,234,2.171,238,3.916,348,1.836,405,1.383,415,4.644,418,2.443,423,2.201,439,1.456,467,3.223,486,2.764,489,1.043,496,2.764,575,4.358,576,3.223,577,3.699,592,2.541,613,5.667,614,3.434,615,3.434,619,3.699,620,2.357,672,2.647,676,2.896,717,2.065,743,2.896,755,3.047,764,3.047,1092,2.541,1106,3.699,1173,3.699,1325,3.699,1333,3.699,1334,3.699,1335,3.434,2126,5.002,2209,4.668,2253,6.211,2259,3.699,2274,6.653,2275,4.054,2276,6.21,2277,6.21,2278,4.592,2279,5.636,2280,4.592,2281,4.592,2282,4.592,2283,4.592,2284,4.592,2285,5.482,2286,4.054,2287,4.054,2288,4.054,2289,4.054,2290,4.054,2291,4.054,2292,4.054,2293,4.054,2294,4.592]],["title/guards/ReactedMemberIsModOrHigherGuard.html",[1252,3.303,1789,2.546]],["body/guards/ReactedMemberIsModOrHigherGuard.html",[0,0.322,3,0.107,4,0.096,5,0.096,8,0.312,9,0.909,10,1.669,12,1.259,17,0.395,19,0.861,20,0.009,21,0.622,22,0.344,23,0.726,30,0.697,31,0.15,37,1.624,38,0.458,39,1.016,48,2.158,49,0.119,50,1.377,58,1.637,60,1.416,62,1.919,77,1.624,79,0.007,80,0.007,142,2.738,196,2.058,199,1.629,222,1.586,234,2.451,382,1.836,405,2.111,505,1.705,640,2.738,858,4.873,861,4.873,864,4.918,865,4.218,866,3.483,867,3.483,890,3.325,1014,3.325,1141,4.013,1147,3.184,1242,5.646,1252,5.241,1260,6.201,1261,4.873,1270,3.665,1790,3.483,1835,4.876,2295,4.876,2296,5.524,2297,5.524,2298,5.524,2299,5.524,2300,5.524,2301,5.524,2302,5.524,2303,5.524,2304,5.524,2305,4.876,2306,5.524,2307,5.524]],["title/injectables/RefreshJwtGuard.html",[199,1.027,1857,3.303]],["body/injectables/RefreshJwtGuard.html",[0,0.396,3,0.132,4,0.118,5,0.118,20,0.009,31,0.155,38,0.565,49,0.147,79,0.008,80,0.008,199,1.85,200,2.798,627,3.945,1857,5.951,1873,5.48,1874,7.025,1875,6.006,1876,4.514,1889,6.41,2308,6.006]],["title/injectables/RefreshJwtStrategy.html",[199,1.027,1881,3.1]],["body/injectables/RefreshJwtStrategy.html",[0,0.338,3,0.113,4,0.101,5,0.101,8,0.328,9,0.939,10,1.708,12,1.044,17,0.408,19,0.889,20,0.009,21,0.642,22,0.355,23,0.75,30,0.734,31,0.16,38,0.482,48,1.63,49,0.125,58,1.175,79,0.007,80,0.007,116,6.07,117,3.857,196,1.554,199,1.682,200,2.391,222,1.669,327,2.535,627,3.587,1220,3.857,1593,4.683,1750,4.347,1855,5.228,1876,3.857,1881,5.079,1889,5.83,1966,5.83,1967,5.132,1969,6.389,1971,5.132,1972,6.957,1973,4.683,1974,6.957,1975,5.132,1977,5.132,1978,5.132,1981,5.132,2309,6.957,2310,5.132,2311,5.813,2312,5.813,2313,5.813,2314,5.813]],["title/classes/RestrictedChannelDto.html",[0,0.257,2315,3.558]],["body/classes/RestrictedChannelDto.html",[0,0.435,2,1.023,3,0.119,4,0.106,5,0.106,8,0.345,17,0.422,20,0.009,22,0.412,26,1.31,31,0.157,42,2.197,49,0.132,73,1.209,79,0.007,80,0.007,90,2.317,202,1.62,231,3.014,302,3.581,303,2.753,382,2.68,480,3.865,485,4.712,505,2.306,507,4.14,878,3.685,898,4.932,1123,4.932,1124,4.497,1445,4.932,2315,6.019,2316,7.119,2317,8.064,2318,6.122,2319,6.122]],["title/controllers/RoleController.html",[81,1.506,2200,3.303]],["body/controllers/RoleController.html",[0,0.193,3,0.065,4,0.057,5,0.057,8,0.187,9,0.64,10,1.795,12,0.596,14,2.058,17,0.367,19,0.8,20,0.009,21,0.578,22,0.406,23,0.675,26,1.142,30,0.822,31,0.157,33,1.817,35,0.596,36,0.656,37,0.976,38,0.276,39,0.611,42,1.191,49,0.072,50,1.229,58,1.189,60,1.427,61,5.009,62,1.933,65,1.714,73,1.249,79,0.005,80,0.005,81,1.132,83,1.223,85,1.591,86,1.704,88,1.837,89,3.688,90,1.256,91,1.913,139,1.837,140,1.837,203,1.639,206,3.11,208,2.094,216,0.828,221,2.203,222,1.416,234,2.712,235,1.327,252,1.704,253,1.998,254,1.998,255,2.094,256,2.203,257,2.968,258,1.998,259,1.327,260,2.33,263,3.71,319,2.842,348,1.327,433,3.391,439,1.714,489,1.947,493,4.037,531,4.4,534,1.913,552,5.246,553,6.247,554,6.906,555,4.74,558,2.674,564,4.129,565,3.272,566,2.483,568,5.605,569,6.383,570,2.674,586,2.483,588,5.246,589,5.8,590,4.107,610,5.117,972,5.298,998,4.74,1010,5.443,1028,4.883,1030,4.129,1092,3.256,1162,3.11,1335,5.8,2200,3.688,2320,2.674,2321,5.884,2322,5.884,2323,4.932,2324,5.884,2325,3.32,2326,7.292,2327,3.32,2328,3.32,2329,3.32,2330,3.32,2331,6.437,2332,3.32,2333,3.32,2334,3.32,2335,3.32,2336,3.32,2337,3.32,2338,3.32,2339,3.32,2340,3.32,2341,3.32,2342,3.32,2343,2.931,2344,3.32,2345,3.32,2346,3.32,2347,3.32,2348,3.32,2349,3.32,2350,3.32,2351,3.32,2352,5.884,2353,3.32,2354,4.932,2355,4.932,2356,3.32,2357,3.32,2358,3.32,2359,3.32,2360,3.32]],["title/classes/RoleResponse.html",[0,0.257,1010,3.1]],["body/classes/RoleResponse.html",[0,0.295,2,0.435,3,0.051,4,0.045,5,0.045,8,0.147,17,0.448,20,0.009,21,0.655,22,0.445,26,1.393,31,0.098,39,0.753,48,2.369,49,0.056,60,0.753,61,1.728,72,2.424,73,1.298,77,0.766,79,0.004,80,0.004,90,0.986,100,1.208,202,1.097,214,1.136,216,1.43,231,2.971,259,2.953,272,1.013,280,1.103,290,1.567,300,1.728,301,3.973,302,3.694,303,1.171,342,3.973,348,1.041,360,3.263,420,3.935,428,4.14,432,2.717,433,2.36,434,5.207,439,1.485,440,2.717,449,2.266,454,3.556,456,4.171,463,1.728,473,4.028,480,4.114,482,4.178,485,3.935,489,2.026,493,3.986,610,2.874,611,1.567,659,2.874,669,2.098,828,1.828,878,3.987,880,4.078,898,4.078,900,5.523,919,4.955,927,1.948,972,2.874,973,1.948,974,5.337,975,5.949,976,5.949,977,5.183,978,5.949,979,3.616,981,2.299,982,2.299,985,4.469,987,3.616,988,3.616,990,2.299,991,2.299,992,2.299,996,3.616,998,3.299,1001,2.299,1002,1.642,1003,2.299,1004,1.828,1008,3.616,1009,2.098,1010,3.552,1011,2.717,1012,3.616,1013,4.078,1014,3.047,1015,5.583,1016,3.616,1017,5.583,1018,3.616,1019,4.078,1020,2.299,1021,2.299,1022,2.299,1023,2.299,1024,2.299,1025,2.299,1026,2.098,1027,2.299,1028,3.552,1029,2.299,1030,2.874,1031,1.948,1032,2.098,1033,2.098,1034,2.299,1035,1.948,2361,2.604,2362,2.604,2363,2.604,2364,2.604,2365,2.604,2366,2.604,2367,2.604,2368,2.604,2369,2.604,2370,2.604,2371,2.604,2372,2.604,2373,2.604,2374,2.604]],["title/controllers/SelfController.html",[81,1.506,2375,3.303]],["body/controllers/SelfController.html",[0,0.306,3,0.102,4,0.091,5,0.091,8,0.296,9,0.88,10,1.63,17,0.296,19,0.645,20,0.009,21,0.466,22,0.258,23,0.544,26,0.921,30,0.857,31,0.16,35,1.427,37,1.544,38,0.436,49,0.113,50,1.309,58,1.062,67,2.158,72,2.779,73,1.082,79,0.007,80,0.007,81,2.563,83,1.935,85,2.517,86,2.696,87,4.231,88,2.907,91,3.027,196,2.398,222,1.508,234,2.373,235,2.1,272,2.639,489,1.541,534,3.027,1011,4.502,1087,3.027,1275,5.075,1428,3.911,1681,5.991,1682,4.637,1686,3.928,1688,4.637,1800,7.015,1802,5.075,1882,4.525,2375,5.075,2376,4.637,2377,7.518,2378,7.946,2379,5.467,2380,6.786,2381,6.401,2382,8.427,2383,5.253,2384,5.991,2385,5.991,2386,6.786,2387,4.637,2388,5.253,2389,4.637,2390,5.253,2391,5.253,2392,5.253,2393,5.253]],["title/classes/SelfDto.html",[0,0.257,1087,2.546]],["body/classes/SelfDto.html",[0,0.415,2,0.947,3,0.11,4,0.098,5,0.098,8,0.32,17,0.461,20,0.009,21,0.725,22,0.442,26,1.433,31,0.138,42,2.035,49,0.154,65,1.173,67,2.237,73,1.319,79,0.007,80,0.007,90,2.146,202,1.545,289,5.006,304,5,348,2.267,439,1.691,480,4.181,874,4.491,1079,4.568,1080,4.568,1081,4.568,1082,5.827,1086,2.911,1087,4.107,1088,5.74,1089,4.491,2394,5.67,2395,5.67,2396,5.67,2397,5.67]],["title/classes/SelfDto-1.html",[0,0.214,817,2.441,1087,2.121]],["body/classes/SelfDto-1.html",[0,0.331,2,0.949,3,0.11,4,0.098,5,0.098,8,0.321,17,0.475,20,0.009,21,0.692,22,0.44,26,1.478,31,0.139,42,2.039,49,0.123,65,1.614,67,2.239,73,1.315,79,0.007,80,0.007,90,2.15,202,1.546,252,4.003,382,2.858,480,4.122,874,4.495,1081,5.746,1082,6.302,1086,2.916,1087,4.111,1088,5.746,2398,5.015,2399,5.681,2400,5.681,2401,5.681,2402,7.134,2403,5.681,2404,5.681]],["title/injectables/SelfService.html",[199,1.027,1882,2.658]],["body/injectables/SelfService.html",[0,0.246,3,0.082,4,0.073,5,0.073,8,0.238,9,0.76,10,1.714,12,1.052,14,2.543,15,4.024,16,2.087,17,0.38,19,0.827,20,0.009,21,0.678,22,0.33,23,0.697,30,1.044,31,0.158,33,2.158,35,1.543,36,0.833,37,1.24,38,0.35,39,0.776,41,5.421,42,1.514,49,0.091,50,1.904,51,1.896,58,1.184,60,0.776,62,1.051,65,0.873,67,2.328,72,2.543,79,0.006,80,0.006,146,3.723,196,2.447,199,1.362,200,1.735,222,1.681,234,2.543,235,2.342,246,2.538,247,3.154,248,3.154,272,2.827,439,1.581,450,4.38,489,1.528,637,2.807,874,2.431,890,2.538,1080,3.397,1087,2.431,1089,4.191,1177,4.38,1292,3.397,1697,5.171,1698,5.171,1701,3.723,1882,3.525,2035,4.38,2209,3.886,2305,3.723,2381,4.718,2385,5.171,2387,3.723,2405,3.723,2406,4.718,2407,5.171,2408,5.858,2409,5.858,2410,4.217,2411,4.217,2412,5.858,2413,4.217,2414,7.908,2415,5.858,2416,5.858,2417,5.171,2418,5.858,2419,4.217,2420,5.171,2421,5.858,2422,5.171,2423,5.858,2424,4.217,2425,4.217,2426,4.217,2427,4.217,2428,4.217,2429,4.217,2430,4.217,2431,4.217,2432,4.217,2433,4.217,2434,4.217,2435,4.217]],["title/classes/SendDirectMessageToUserException.html",[0,0.257,2436,3.1]],["body/classes/SendDirectMessageToUserException.html",[0,0.41,2,0.928,3,0.108,4,0.096,5,0.096,12,0.998,17,0.313,19,0.683,20,0.009,21,0.493,22,0.272,23,0.575,31,0.137,38,0.461,49,0.152,60,1.294,65,1.455,67,2.329,70,3.086,73,1.231,76,2.221,79,0.007,80,0.007,196,2.238,228,3.074,405,2.325,439,1.149,489,1.261,505,1.714,510,4.233,583,4.448,624,3.503,625,4.435,627,3.486,629,4.474,631,4.435,632,4.435,633,3.685,634,4.867,635,3.074,637,2.662,639,4.233,640,2.753,643,3.685,644,3.503,645,3.503,646,3.685,647,3.685,648,3.685,649,3.685,717,2.497,823,2.662,831,3.162,1011,3.685,1220,3.685,1428,3.201,2436,5.416,2437,5.26,2438,5.772,2439,6.209,2440,4.053,2441,5.665,2442,4.903,2443,4.903,2444,4.903,2445,4.154,2446,4.903]],["title/classes/SendDirectMessageToUserExceptionFilter.html",[0,0.257,2445,3.303]],["body/classes/SendDirectMessageToUserExceptionFilter.html",[0,0.404,2,0.91,3,0.106,4,0.094,5,0.094,8,0.307,9,0.9,17,0.307,19,0.669,20,0.009,21,0.483,22,0.267,23,0.564,30,0.687,31,0.135,38,0.452,49,0.15,60,1.277,65,1.126,67,1.993,70,3.057,73,0.999,76,3.057,79,0.007,80,0.007,196,2.153,228,3.842,405,2.303,439,1.126,489,1.236,505,2.143,510,3.276,583,4.641,624,3.433,625,3.433,627,2.698,631,4.821,632,5.078,633,3.611,634,5.078,635,3.012,637,3.328,639,4.847,640,3.442,643,4.607,644,4.821,645,3.433,646,3.611,647,3.611,648,3.611,649,3.611,717,2.448,823,2.609,831,2.448,1011,4.607,1220,3.611,1226,4.805,1428,4.002,2436,5.652,2437,5.193,2438,5.718,2439,4.805,2440,3.137,2441,4.385,2442,6.13,2443,6.13,2444,4.805,2445,5.193,2446,4.805]],["title/classes/SetFirstMessageUICommand.html",[0,0.257,402,3.303]],["body/classes/SetFirstMessageUICommand.html",[0,0.306,2,0.878,3,0.102,4,0.091,5,0.091,8,0.296,9,0.88,10,1.63,12,1.219,13,2.517,14,2.947,16,2.461,17,0.383,19,0.834,20,0.009,21,0.667,22,0.369,23,0.703,26,0.921,27,3.38,29,2.362,30,0.663,31,0.154,32,3.252,33,2.5,35,0.943,36,1.037,37,1.544,38,0.436,39,0.966,40,1.746,45,2.696,46,3.027,49,0.113,50,1.691,51,2.362,58,1.062,60,0.966,62,1.874,64,3.485,65,1.087,67,1.508,77,1.995,79,0.007,80,0.007,222,1.508,272,2.043,402,5.075,403,5.774,404,6.153,405,2.538,661,4.084,672,3.027,673,3.614,701,3.312,777,2.517,1312,4.231,1388,5.991,1392,4.637,2211,3.928,2227,4.231,2447,6.056,2448,4.231,2449,5.991,2450,5.253,2451,5.991,2452,7.015,2453,5.253,2454,4.637,2455,5.253,2456,5.991,2457,5.253]],["title/classes/SettingsChanged.html",[0,0.257,1641,3.1]],["body/classes/SettingsChanged.html",[0,0.301,2,0.863,3,0.1,4,0.089,5,0.089,8,0.291,9,0.87,12,1.205,17,0.462,19,0.825,20,0.009,21,0.595,22,0.387,23,0.695,30,0.652,31,0.145,38,0.428,42,1.853,49,0.111,65,1.735,72,2.933,73,1.271,79,0.007,80,0.007,197,4.487,202,1.455,203,2.72,213,3.113,215,3.414,218,3.573,220,2.185,231,2.937,382,2.788,454,3.464,493,3.771,505,2.071,509,3.573,510,3.107,516,3.573,518,2.65,521,2.857,1641,4.709,1650,5.924,1756,6.756,2458,4.557,2459,8.54,2460,6.71,2461,5.162,2462,5.162,2463,5.162,2464,6.71,2465,6.71,2466,5.162,2467,5.162]],["title/classes/SettingsDto.html",[0,0.257,1586,3.303]],["body/classes/SettingsDto.html",[0,0.356,2,0.749,3,0.087,4,0.078,5,0.078,8,0.253,17,0.49,20,0.009,22,0.447,26,1.523,31,0.135,42,1.609,49,0.097,73,1.345,79,0.006,80,0.006,90,1.696,197,2.698,202,1.324,301,4.844,302,4.196,303,2.015,304,6.144,382,2.91,505,1.885,534,4.005,1124,3.676,1586,4.568,2468,3.957,2469,6.134,2470,6.134,2471,6.134,2472,6.948,2473,6.134,2474,6.134,2475,6.134,2476,6.134,2477,6.134,2478,6.948,2479,8.686,2480,4.483,2481,4.483,2482,4.483,2483,4.483,2484,4.483,2485,4.483,2486,4.483,2487,4.483,2488,4.483,2489,4.483,2490,4.483]],["title/classes/SlowmodeDisabled.html",[0,0.257,526,2.93]],["body/classes/SlowmodeDisabled.html",[0,0.41,2,0.767,3,0.089,4,0.08,5,0.08,8,0.259,9,0.805,12,1.264,17,0.444,19,0.763,20,0.009,21,0.551,22,0.386,23,0.643,30,0.58,31,0.121,38,0.381,49,0.152,65,1.805,67,2.02,73,1.308,79,0.006,80,0.006,196,1.228,202,1.346,203,2.757,213,3.497,218,3.773,220,1.944,231,2.912,423,2.201,439,1.456,454,3.512,470,3.916,498,5,503,4.12,504,3.434,505,2.326,506,4.937,507,4.541,508,5.667,509,3.306,510,3.737,516,4.013,518,2.357,519,4.12,520,6.523,521,4.49,522,6.536,523,5.002,524,5.002,525,3.893,526,4.668,527,3.434,528,5.002,529,3.699,530,3.579,531,3.434,2491,6.21,2492,4.592,2493,4.592,2494,4.592]],["title/classes/SlowmodeEnabled.html",[0,0.257,519,2.93]],["body/classes/SlowmodeEnabled.html",[0,0.406,2,0.755,3,0.088,4,0.078,5,0.078,8,0.255,9,0.796,12,1.253,17,0.456,19,0.754,20,0.009,21,0.545,22,0.396,23,0.636,30,0.57,31,0.119,38,0.375,49,0.151,65,1.8,67,2.002,73,1.306,79,0.006,80,0.006,196,1.208,202,1.331,203,2.745,213,3.473,218,3.752,220,1.912,231,3.058,423,2.165,439,1.443,454,3.497,470,3.872,498,5.577,503,4.073,504,3.377,505,2.31,506,4.895,507,4.529,508,5.619,509,3.269,510,3.695,516,3.985,518,2.318,519,4.628,520,6.504,521,4.468,522,6.504,523,4.946,524,4.946,525,3.86,526,4.073,527,3.377,528,4.946,529,3.638,530,3.538,531,3.377,2495,6.14,2496,4.516,2497,4.516,2498,4.516,2499,4.516]],["title/classes/SpecialCommand.html",[0,0.257,410,3.303]],["body/classes/SpecialCommand.html",[0,0.235,2,0.675,3,0.079,4,0.07,5,0.07,8,0.228,9,0.737,10,1.426,17,0.424,19,0.699,20,0.009,21,0.583,22,0.369,23,0.589,25,3.8,26,0.709,27,2.957,29,2.556,30,0.718,31,0.152,32,2.725,34,3.146,35,1.021,36,0.798,38,0.472,39,0.743,47,2.074,48,1.133,49,0.087,58,1.52,60,0.743,62,1.007,73,1.197,79,0.006,80,0.006,196,1.08,202,1.232,214,3.113,215,2.629,234,1.988,238,3.585,410,4.252,474,4.113,489,0.918,501,3.99,661,2.432,703,2.836,743,2.548,755,2.681,764,2.681,817,3.772,952,3.99,2117,3.567,2179,4.252,2185,4.735,2209,4.364,2500,3.567,2501,6.577,2502,6.577,2503,6.577,2504,6.577,2505,5.685,2506,5.685,2507,5.685,2508,5.685,2509,5.685,2510,4.58,2511,4.041,2512,5.685,2513,5.685,2514,5.685,2515,5.685,2516,5.685,2517,5.685,2518,4.58,2519,5.685,2520,5.685,2521,5.685,2522,5.685,2523,4.041,2524,8.182,2525,5.685,2526,7.222,2527,7.801,2528,5.685,2529,5.685,2530,5.685,2531,7.137,2532,5.749,2533,5.685,2534,4.041,2535,4.041,2536,5.337,2537,4.041,2538,5.685,2539,6.577,2540,6.577,2541,4.041,2542,3.255,2543,4.041,2544,3.567,2545,3.567,2546,3.567,2547,3.255,2548,3.022,2549,4.58,2550,4.58,2551,4.041,2552,4.58,2553,3.567,2554,4.041,2555,3.567,2556,4.041,2557,4.041,2558,3.567,2559,5.749,2560,4.041,2561,7.137,2562,7.137,2563,7.137,2564,7.137,2565,5.685,2566,4.041,2567,4.041,2568,4.041,2569,4.041,2570,4.041,2571,4.041,2572,4.041,2573,3.567]],["title/classes/TargetUser.html",[0,0.257,2279,3.303]],["body/classes/TargetUser.html",[0,0.358,2,1.027,3,0.119,4,0.106,5,0.106,8,0.347,17,0.347,20,0.009,22,0.396,26,1.078,31,0.146,35,1.104,36,1.214,39,1.131,49,0.133,77,2.202,79,0.007,80,0.007,196,2.413,202,1.624,235,2.995,259,2.995,348,2.995,423,2.946,489,1.396,833,4.952,839,4.314,845,5.257,847,4.314,1092,3.402,2055,5.257,2062,4.314,2063,4.314,2238,3.876,2241,4.597,2279,5.602,2548,5.602,2574,5.427,2575,6.612,2576,6.147,2577,4.952,2578,5.427,2579,6.147,2580,6.147,2581,6.147,2582,4.952]],["title/modules/TasksModule.html",[92,1.545,107,3.1]],["body/modules/TasksModule.html",[0,0.311,3,0.104,4,0.093,5,0.093,16,2.43,20,0.009,31,0.17,35,0.96,36,1.056,38,0.444,40,1.777,49,0.115,79,0.007,80,0.007,92,2.893,94,2.481,95,2.481,96,2.65,97,2.65,98,2.481,99,3.634,100,2.481,107,6.409,110,3.402,111,2.65,112,1.97,114,2.847,123,2.847,134,2.562,142,2.65,317,2.959,376,4.685,377,4.346,378,4.058,382,2.52,383,2.959,390,3.956,391,2.847,392,3.371,409,3.752,489,1.214,1141,4.196,1142,5.339,1147,3.081,2583,5.347,2584,5.347,2585,5.347,2586,6.059,2587,6.864,2588,6.864,2589,6.864,2590,5.133,2591,6.059,2592,5.347]],["title/injectables/TasksService.html",[199,1.027,1142,2.785]],["body/injectables/TasksService.html",[0,0.172,3,0.057,4,0.051,5,0.051,8,0.166,9,0.585,10,1.771,12,0.81,14,2.536,16,2.082,17,0.393,19,0.856,20,0.009,21,0.706,22,0.221,23,0.467,26,1.075,30,0.88,31,0.155,33,1.661,35,0.529,36,0.582,37,0.867,38,0.245,39,0.542,40,0.98,42,1.058,49,0.064,50,1.647,51,1.325,55,3.148,58,1.24,60,1.128,62,1.911,74,2.714,76,1.803,77,0.867,79,0.004,80,0.004,112,1.086,129,2.374,139,1.631,140,1.631,142,1.461,196,1.464,199,1.048,200,1.212,203,1.499,206,3.867,208,3.453,215,1.803,216,1.808,221,1.956,222,1.572,235,1.178,252,2.314,272,1.146,294,1.513,307,2.314,319,3.534,342,1.631,360,2.798,377,3.578,382,0.98,409,2.069,418,1.462,423,2.161,439,1.269,489,1.024,525,1.631,559,3.98,573,2.991,655,2.602,659,2.069,660,1.859,661,1.774,663,3.164,664,4.384,665,2.602,668,2.069,678,2.204,691,4.095,693,2.374,695,2.602,696,3.98,697,3.632,698,3.98,699,2.602,700,2.602,702,1.859,831,2.757,969,2.843,977,3.164,1043,2.991,1086,2.811,1089,2.598,1131,3.98,1141,3.04,1142,2.843,1147,1.699,1172,3.632,1181,6.402,1182,6.402,1202,3.632,1204,2.374,1270,1.956,1271,5.323,1290,3.98,1310,2.374,1354,2.602,1357,2.374,1457,5.414,1472,3.372,1474,2.204,1475,2.991,1496,3.372,1509,4.94,1515,2.374,1519,2.374,1520,2.602,1521,2.602,1522,2.602,1689,4.833,1763,3.372,1794,3.632,1931,2.374,2104,2.374,2125,2.602,2133,2.602,2161,2.602,2162,2.602,2171,2.602,2194,3.632,2379,3.632,2406,3.632,2420,3.98,2586,5.414,2590,3.372,2591,3.98,2593,2.374,2594,4.509,2595,4.509,2596,4.509,2597,3.632,2598,6.969,2599,6.133,2600,6.969,2601,4.509,2602,2.948,2603,6.609,2604,2.948,2605,4.509,2606,4.509,2607,3.632,2608,2.948,2609,3.98,2610,5.475,2611,3.98,2612,2.948,2613,2.948,2614,2.948,2615,2.948,2616,2.948,2617,2.948,2618,2.948,2619,4.509,2620,6.133,2621,2.948,2622,3.98,2623,4.509,2624,4.509,2625,7.48,2626,4.509,2627,3.98,2628,4.509,2629,4.509,2630,1.57,2631,2.602,2632,2.602,2633,2.948,2634,2.948,2635,2.948,2636,2.948,2637,2.948,2638,4.509,2639,2.948,2640,2.602,2641,2.948,2642,2.948,2643,2.948,2644,2.948,2645,6.133,2646,2.374,2647,2.948,2648,1.774,2649,2.204,2650,2.602,2651,2.948,2652,2.948,2653,2.948,2654,2.948,2655,2.948,2656,2.948,2657,2.602,2658,2.948,2659,2.948,2660,2.948,2661,2.948,2662,4.509]],["title/classes/TicketSystemSetupCommand.html",[0,0.257,412,3.303]],["body/classes/TicketSystemSetupCommand.html",[0,0.31,2,0.89,3,0.104,4,0.092,5,0.092,8,0.301,9,0.888,10,1.641,12,1.23,13,2.553,14,2.958,17,0.386,19,0.842,20,0.009,21,0.671,22,0.336,23,0.71,25,4.254,26,0.934,27,3.403,29,3.079,30,0.673,31,0.147,32,3.282,33,2.523,34,3.79,35,0.957,36,1.052,39,0.98,45,2.735,47,2.735,48,1.493,49,0.115,50,1.328,62,1.707,74,2.641,76,2.13,77,2.014,79,0.007,80,0.007,216,1.328,222,1.529,319,3.07,405,2.063,412,5.121,418,1.727,489,1.21,673,3.647,723,4.543,745,3.206,746,3.534,768,3.984,776,3.534,777,3.627,786,3.984,823,2.553,942,3.739,943,3.359,944,3.984,952,4.806,963,4.291,968,4.291,2104,5.517,2216,4.291,2219,4.291,2224,3.984,2238,4.319,2259,4.291,2663,6.681,2664,4.703,2665,7.569,2666,5.328,2667,5.328,2668,5.328,2669,5.328,2670,4.703,2671,5.328,2672,4.291,2673,5.328,2674,5.328,2675,4.703,2676,5.328,2677,4.703,2678,5.328,2679,5.328]],["title/classes/TimeOutCommand.html",[0,0.257,384,3.303]],["body/classes/TimeOutCommand.html",[0,0.234,2,0.672,3,0.078,4,0.07,5,0.07,8,0.227,9,0.735,10,1.423,12,1.018,13,1.929,14,2.724,17,0.32,19,0.697,20,0.009,21,0.666,22,0.278,23,0.587,25,3.794,26,0.706,27,2.549,29,2.549,30,0.508,31,0.162,32,2.717,33,2.089,34,3.137,35,1.018,36,0.795,38,0.47,39,0.74,45,2.066,46,2.32,47,2.066,48,1.128,49,0.087,50,1.413,58,1.146,60,1.31,62,1.872,70,2.266,74,2.81,76,2.266,77,1.667,79,0.006,80,0.006,139,2.227,140,2.227,196,2.083,206,4.493,208,4.138,215,1.609,216,2.099,222,1.627,238,3.575,294,3.999,360,1.704,384,4.24,449,2.227,489,0.914,620,2.066,660,3.575,661,2.422,672,2.32,673,3.019,676,4.138,678,4.24,682,3.242,683,2.67,701,2.538,702,2.538,703,2.825,717,2.549,743,2.538,745,2.422,746,2.67,755,2.67,764,2.67,776,2.67,777,1.929,786,3.01,824,3.553,825,3.553,826,3.553,827,3.553,834,3.242,867,2.538,942,2.825,943,2.538,944,3.01,968,3.242,969,2.538,1002,2.538,1004,2.825,1344,2.825,1356,3.553,2032,5,2055,2.825,2062,2.825,2063,2.825,2185,2.67,2209,4.354,2225,5.739,2238,2.538,2440,3.267,2542,3.242,2544,3.553,2545,3.553,2546,3.553,2553,3.553,2555,3.553,2607,4.567,2611,3.553,2630,2.143,2631,3.553,2646,3.242,2649,4.24,2650,5.004,2672,3.242,2680,3.553,2681,6.563,2682,4.025,2683,4.025,2684,5.328,2685,4.025,2686,4.025,2687,4.025,2688,2.32,2689,3.267,2690,4.025,2691,4.025,2692,4.025,2693,7.124,2694,5.669,2695,6.563,2696,4.025,2697,6.563,2698,4.025,2699,3.553,2700,4.025,2701,3.553,2702,6.563,2703,4.025,2704,3.553,2705,3.553,2706,3.553,2707,3.553,2708,3.553,2709,4.025,2710,4.025,2711,4.025,2712,4.025,2713,5.669,2714,3.553,2715,3.553,2716,4.025,2717,4.025,2718,4.025,2719,4.025,2720,3.553,2721,4.025]],["title/classes/UnverifyByRoleCommand.html",[0,0.257,2722,3.558]],["body/classes/UnverifyByRoleCommand.html",[0,0.298,2,0.855,3,0.099,4,0.089,5,0.089,8,0.289,9,0.865,10,1.11,12,1.199,13,2.453,14,2.926,15,4.109,16,2.259,17,0.377,19,0.82,20,0.009,21,0.659,22,0.327,23,0.691,25,4.19,26,0.897,27,3.338,30,0.646,31,0.159,32,3.198,33,2.459,35,0.919,36,1.011,37,1.505,38,0.425,39,0.941,40,1.701,41,4.123,42,1.837,44,4.518,47,2.627,48,1.435,49,0.11,50,1.663,51,2.301,54,3.828,55,2.627,56,4.518,57,4.518,58,1.035,60,0.941,61,4.427,62,1.851,65,1.059,66,3.592,67,1.469,68,5.375,72,2.333,73,0.737,79,0.007,80,0.007,213,2.375,272,2.595,319,2.95,493,2.301,743,3.227,1316,4.518,2722,5.375,2723,6.554,2724,4.518,2725,6.673,2726,5.118,2727,5.118,2728,5.118,2729,6.673,2730,5.118,2731,5.118,2732,5.118,2733,5.118,2734,5.118,2735,5.118,2736,5.118,2737,5.118,2738,5.118,2739,5.118,2740,5.118,2741,5.118,2742,5.118,2743,5.118,2744,5.118]],["title/classes/UserBanEvent.html",[0,0.257,2745,2.546]],["body/classes/UserBanEvent.html",[0,0.448,2,0.646,3,0.075,4,0.067,5,0.067,8,0.218,9,0.714,12,1.153,17,0.417,19,0.677,20,0.009,21,0.488,22,0.363,23,0.571,30,0.488,31,0.107,38,0.321,49,0.166,65,1.858,67,2.531,70,3.411,73,1.334,79,0.005,80,0.005,112,2.029,202,1.194,203,2.775,213,3.671,218,3.876,220,1.636,231,2.51,280,3.764,307,1.983,439,1.591,505,2.441,509,2.933,516,4.213,518,1.983,521,4.721,525,3.048,530,4.917,603,4.431,684,2.227,717,2.476,823,1.852,2440,2.227,2630,2.933,2648,2.326,2688,3.174,2689,3.174,2745,3.174,2746,2.437,2747,4.906,2748,5.508,2749,3.864,2750,3.864,2751,3.864,2752,4.906,2753,2.563,2754,2.437,2755,2.227,2756,2.563,2757,3.654,2758,3.654,2759,3.654,2760,3.654,2761,3.174,2762,2.437]],["title/controllers/UserController.html",[81,1.506,2201,3.303]],["body/controllers/UserController.html",[0,0.146,3,0.049,4,0.043,5,0.043,8,0.142,9,0.516,10,1.796,12,0.451,14,1.727,17,0.368,19,0.801,20,0.009,21,0.578,22,0.358,23,0.675,26,1.143,30,0.823,31,0.158,33,1.465,35,0.451,36,0.495,37,0.737,38,0.208,39,0.461,42,0.9,48,0.703,49,0.054,50,0.991,55,3.145,58,0.804,60,1.342,62,2.08,65,1.738,66,1.76,67,2.439,73,1.261,74,1.243,76,1.59,79,0.004,80,0.004,81,0.855,83,0.924,85,1.202,86,1.288,88,1.388,89,2.973,90,0.949,91,1.446,112,0.924,139,1.388,140,1.388,196,2.342,203,1.322,206,2.507,208,1.582,216,1.901,221,1.664,222,1.141,230,1.51,234,2.714,235,1.003,246,1.51,247,1.876,248,1.876,252,1.288,253,1.51,254,1.51,255,1.582,256,1.664,257,2.393,258,1.51,259,1.003,260,1.76,263,3.864,294,1.288,348,1.59,405,0.755,418,1.822,439,1.738,467,1.76,486,1.51,489,1.762,496,1.51,534,1.446,552,4.936,553,6.251,554,6.251,555,4.528,558,3.203,565,1.664,568,5.503,569,5.503,575,2.79,576,1.76,577,2.021,583,1.446,586,1.876,588,5.252,589,4.875,590,3.864,591,2.973,592,2.2,603,3.531,604,4.528,610,3.944,613,3.979,614,1.876,615,1.876,619,2.021,620,2.041,635,1.388,663,2.79,664,2.638,683,1.664,684,2.292,717,1.128,786,1.876,823,1.202,831,1.128,871,3.694,874,1.446,875,2.214,876,2.214,877,1.76,890,2.973,925,3.694,926,3.694,1086,2.041,1106,2.021,1173,2.021,1296,3.51,1297,2.021,1325,2.021,1333,2.021,1334,2.021,1335,1.876,1428,3.239,1519,2.021,1714,4.36,1763,4.203,1776,2.214,1813,3.203,2032,3.467,2033,3.203,2126,3.203,2185,1.664,2201,2.973,2238,1.582,2285,3.51,2286,2.214,2287,2.214,2288,2.214,2289,2.214,2290,2.214,2291,2.214,2292,2.214,2293,4.36,2436,1.76,2437,1.876,2438,1.876,2542,2.021,2630,2.117,2648,2.973,2672,2.021,2701,2.214,2704,2.214,2705,2.214,2706,2.214,2707,2.214,2720,2.214,2745,1.446,2754,2.507,2755,1.446,2761,1.446,2762,2.507,2763,2.214,2764,4.94,2765,4.94,2766,4.94,2767,4.94,2768,4.94,2769,2.508,2770,2.508,2771,2.508,2772,2.508,2773,2.508,2774,2.508,2775,2.508,2776,2.508,2777,2.508,2778,2.508,2779,2.508,2780,2.508,2781,3.976,2782,3.976,2783,3.203,2784,2.508,2785,2.508,2786,2.508,2787,2.508,2788,3.976,2789,2.508,2790,2.508,2791,2.508,2792,2.508,2793,2.508,2794,2.508,2795,2.508,2796,2.508,2797,2.508,2798,2.508,2799,2.508,2800,2.508,2801,2.508,2802,2.508,2803,2.508,2804,2.508,2805,2.508,2806,2.508,2807,2.508,2808,5.621,2809,2.508,2810,2.508,2811,2.508,2812,2.508,2813,5.621,2814,5.621,2815,2.508,2816,2.508,2817,2.508,2818,2.508,2819,2.508,2820,2.508,2821,2.508,2822,2.508,2823,2.508,2824,3.976,2825,2.214,2826,2.508,2827,2.508,2828,2.508,2829,2.508,2830,2.508,2831,2.508]],["title/classes/UserInfoUiCommand.html",[0,0.257,399,3.303]],["body/classes/UserInfoUiCommand.html",[0,0.246,2,0.706,3,0.158,4,0.073,5,0.073,8,0.238,9,0.76,10,1.715,12,1.053,13,2.024,14,2.766,15,3.244,16,2.329,17,0.38,19,0.828,20,0.009,21,0.72,22,0.357,23,0.698,26,0.741,27,3.028,29,1.899,30,0.74,31,0.141,32,2.81,33,2.16,35,0.759,36,0.834,37,1.242,38,0.351,39,0.777,40,1.404,45,2.168,46,2.434,49,0.091,50,1.461,51,1.899,58,1.599,60,1.455,62,2.062,64,2.802,65,1.637,67,1.683,73,1.139,74,2.093,76,1.688,77,1.98,79,0.006,80,0.006,196,1.568,215,2.693,216,1.053,222,1.212,231,1.516,249,2.434,278,2.964,327,2.557,342,3.244,353,3.728,399,4.385,405,2.53,418,1.369,423,2.024,439,0.874,592,3.244,660,3.697,661,2.542,672,2.434,673,3.586,676,4.588,678,4.385,690,2.964,701,3.697,702,2.663,777,2.024,1086,3.01,1312,3.402,1328,3.402,1743,3.728,1817,3.728,2022,3.402,2211,3.158,2244,3.402,2447,5.861,2448,3.402,2449,5.176,2451,5.176,2452,6.423,2454,3.728,2456,5.945,2714,3.728,2832,5.863,2833,4.223,2834,5.863,2835,4.223,2836,5.863,2837,4.223,2838,4.223,2839,4.223,2840,4.223,2841,4.223,2842,4.223,2843,4.223,2844,4.223,2845,4.223,2846,4.223,2847,3.728,2848,4.223,2849,4.223,2850,4.223,2851,4.223,2852,4.223,2853,4.223,2854,4.223,2855,4.223,2856,4.223]],["title/classes/UserKickEvent.html",[0,0.257,2755,2.546]],["body/classes/UserKickEvent.html",[0,0.448,2,0.646,3,0.075,4,0.067,5,0.067,8,0.218,9,0.714,12,1.153,17,0.417,19,0.677,20,0.009,21,0.488,22,0.363,23,0.571,30,0.488,31,0.107,38,0.321,49,0.166,65,1.858,67,2.531,70,3.411,73,1.334,79,0.005,80,0.005,112,2.029,202,1.194,203,2.775,213,3.671,218,3.876,220,1.636,231,2.51,280,3.764,307,1.983,439,1.591,505,2.441,509,2.933,516,4.213,518,1.983,521,4.721,525,3.048,530,4.917,603,4.431,684,2.227,717,2.476,823,1.852,2440,2.227,2630,2.933,2648,2.326,2688,3.174,2689,3.174,2745,2.227,2746,2.437,2747,4.906,2752,4.906,2753,2.563,2754,2.437,2755,3.174,2756,2.563,2757,3.654,2758,3.654,2759,3.654,2760,3.654,2761,3.174,2762,2.437,2857,5.508,2858,3.864,2859,3.864,2860,3.864]],["title/modules/UserModule.html",[92,1.545,108,3.1]],["body/modules/UserModule.html",[0,0.323,3,0.15,4,0.096,5,0.096,16,2.453,20,0.009,31,0.163,35,1.385,36,1.095,38,0.46,40,1.843,49,0.12,79,0.007,80,0.007,83,2.588,92,3.036,94,2.572,95,2.572,96,2.748,97,2.748,98,2.572,99,3.696,100,3.578,108,6.223,110,3.482,111,2.748,112,2.043,114,2.952,123,2.952,196,2.285,317,3.068,489,1.259,637,3.367,831,3.159,1002,4.43,1086,3.606,1707,5.659,1802,5.254,1882,5.438,2375,5.767,2389,4.894,2861,4.894,2862,4.894,2863,5.544,2864,5.544,2865,7.025,2866,7.025,2867,6.201,2868,7.025,2869,5.544]],["title/classes/UserPurgeEvent.html",[0,0.257,2761,2.546]],["body/classes/UserPurgeEvent.html",[0,0.448,2,0.646,3,0.075,4,0.067,5,0.067,8,0.218,9,0.714,12,1.153,17,0.417,19,0.677,20,0.009,21,0.488,22,0.363,23,0.571,30,0.488,31,0.107,38,0.321,49,0.166,65,1.858,67,2.531,70,3.411,73,1.334,79,0.005,80,0.005,112,2.029,202,1.194,203,2.775,213,3.671,218,3.876,220,1.636,231,2.51,280,3.764,307,1.983,439,1.591,505,2.441,509,2.933,516,4.213,518,1.983,521,4.721,525,3.048,530,4.917,603,4.431,684,2.227,717,2.476,823,1.852,2440,2.227,2630,2.933,2648,2.326,2688,3.174,2689,3.174,2745,2.227,2746,2.437,2747,4.906,2752,4.906,2753,2.563,2754,2.437,2755,2.227,2756,2.563,2757,3.654,2758,3.654,2759,3.654,2760,3.654,2761,3.699,2762,2.437,2870,5.508,2871,3.864,2872,3.864,2873,3.864]],["title/classes/UserSendDMFailedEvent.html",[0,0.257,2688,2.546]],["body/classes/UserSendDMFailedEvent.html",[0,0.448,2,0.646,3,0.075,4,0.067,5,0.067,8,0.218,9,0.714,12,1.153,17,0.417,19,0.677,20,0.009,21,0.488,22,0.363,23,0.571,30,0.488,31,0.107,38,0.321,49,0.166,65,1.858,67,2.531,70,3.555,73,1.33,79,0.005,80,0.005,112,2.029,202,1.194,203,2.775,213,3.671,218,3.876,220,1.636,231,2.51,280,3.693,307,1.983,439,1.591,505,2.441,509,2.933,516,4.213,518,1.983,521,4.721,525,3.048,530,4.917,603,4.431,684,2.227,717,2.476,823,1.852,2440,2.227,2630,2.933,2648,2.326,2688,3.699,2689,3.174,2745,2.227,2746,2.437,2747,4.906,2752,4.906,2753,2.563,2754,2.437,2755,2.227,2756,2.563,2757,3.654,2758,3.654,2759,3.654,2760,3.654,2761,3.174,2762,2.437,2874,5.508,2875,3.864,2876,3.864,2877,3.864]],["title/classes/UserTimeOutDto.html",[0,0.257,2684,3.303]],["body/classes/UserTimeOutDto.html",[0,0.395,2,0.716,3,0.083,4,0.074,5,0.074,8,0.242,17,0.383,20,0.009,22,0.413,26,1.19,31,0.142,35,0.769,36,0.846,39,0.788,49,0.092,58,1.197,60,1.248,73,1.106,77,2.259,79,0.006,80,0.006,196,2.253,202,1.284,214,1.868,215,2.713,216,1.068,231,2.125,235,2.927,259,3.177,280,3.364,293,4.155,294,2.199,303,1.926,342,2.37,348,3.177,360,3.364,405,1.783,489,1.541,603,4.579,688,3.451,714,4.77,839,4.762,847,3.006,848,4.77,889,5.227,963,3.451,1110,3.204,1474,4.428,1966,3.451,2002,3.451,2032,5.986,2055,5.576,2062,4.762,2063,4.762,2066,3.782,2192,3.782,2193,4.77,2526,5.227,2578,3.782,2582,3.451,2597,3.451,2607,3.451,2609,5.227,2646,3.451,2684,4.428,2708,3.782,2825,3.782,2878,5.474,2879,3.782,2880,7.32,2881,4.284,2882,5.921,2883,5.921,2884,5.921,2885,5.921,2886,5.921,2887,5.921,2888,5.921,2889,4.284,2890,4.284,2891,4.284,2892,4.284,2893,4.284,2894,4.284,2895,4.284,2896,3.782,2897,4.284,2898,3.782,2899,4.284,2900,4.284,2901,5.921,2902,5.921,2903,5.921,2904,4.284,2905,4.284,2906,4.284,2907,4.284,2908,4.284,2909,4.284,2910,4.284,2911,4.284,2912,4.284,2913,4.284,2914,5.921,2915,4.284,2916,4.284,2917,4.284,2918,4.284,2919,4.284]],["title/classes/UserTimeOutEvent.html",[0,0.257,2630,2.352]],["body/classes/UserTimeOutEvent.html",[0,0.446,2,0.637,3,0.074,4,0.066,5,0.066,8,0.215,9,0.707,12,1.144,17,0.432,19,0.67,20,0.009,21,0.484,22,0.375,23,0.565,30,0.481,31,0.106,38,0.316,49,0.165,65,1.855,67,2.526,70,3.402,73,1.332,79,0.005,80,0.005,112,2.009,202,1.182,203,2.766,213,3.655,218,3.862,220,1.613,231,2.827,280,3.758,307,1.956,439,1.583,505,2.431,509,2.903,516,4.195,518,1.956,521,4.709,525,3.017,530,4.904,603,4.797,684,2.196,717,2.451,823,1.826,2440,2.196,2630,3.391,2648,2.293,2688,3.142,2689,3.142,2745,2.196,2746,2.402,2747,4.88,2752,4.88,2753,2.528,2754,2.402,2755,2.196,2756,2.528,2757,3.617,2758,3.617,2759,3.617,2760,3.617,2761,3.142,2762,2.402,2920,5.452,2921,3.81,2922,3.81,2923,3.81,2924,3.81]],["title/classes/UserTimeOutFailedEvent.html",[0,0.257,2689,2.546]],["body/classes/UserTimeOutFailedEvent.html",[0,0.443,2,0.628,3,0.073,4,0.065,5,0.065,8,0.212,9,0.7,12,1.135,17,0.443,19,0.663,20,0.009,21,0.479,22,0.385,23,0.559,30,0.474,31,0.105,38,0.312,49,0.164,65,1.853,67,2.521,70,3.543,73,1.331,79,0.005,80,0.005,112,1.989,202,1.17,203,2.758,213,3.64,218,3.848,220,1.591,231,2.816,280,3.751,307,1.929,439,1.576,505,2.421,509,2.874,516,4.178,518,1.929,521,4.697,525,2.987,530,4.892,603,4.782,684,2.165,717,2.427,823,1.801,2440,2.165,2630,2.874,2648,2.261,2688,3.111,2689,3.641,2745,2.165,2746,2.369,2747,4.853,2752,4.853,2753,2.493,2754,2.369,2755,2.165,2756,2.493,2757,3.581,2758,3.581,2759,3.581,2760,3.581,2761,3.111,2762,2.369,2925,5.398,2926,3.757,2927,3.757,2928,3.757,2929,3.757,2930,3.757]],["title/classes/UserToUser.html",[0,0.257,2536,3.303]],["body/classes/UserToUser.html",[0,0.314,2,0.901,3,0.105,4,0.093,5,0.093,8,0.304,17,0.39,20,0.009,22,0.393,26,1.211,31,0.148,35,1.24,36,1.065,39,0.992,49,0.116,60,0.992,73,0.994,77,2.36,79,0.007,80,0.007,196,2.359,202,1.497,235,3.044,259,3.209,348,2.76,489,1.568,501,5.343,772,6.836,839,3.786,845,5.343,847,3.786,952,3.786,2055,4.845,2062,3.786,2063,3.786,2177,4.346,2179,4.034,2185,4.58,2238,4.801,2241,4.034,2510,4.346,2518,4.346,2532,5.561,2536,5.163,2548,5.694,2549,4.346,2550,4.346,2552,4.346,2575,6.721,2577,6.95,2582,4.346,2677,6.094,2878,5.694,2931,4.346,2932,5.395,2933,7.323,2934,5.395,2935,5.395,2936,5.395,2937,6.094,2938,5.395,2939,4.346,2940,4.762,2941,5.395,2942,5.395,2943,5.395]],["title/coverage.html",[2944,4.522]],["body/coverage.html",[0,0.527,1,1.809,3,0.044,5,0.039,6,1.982,7,1.982,16,0.644,20,0.009,22,0.225,72,0.785,79,0.004,80,0.004,81,2.568,82,1.679,84,1.982,86,1.153,98,1.042,109,1.576,134,1.744,142,1.803,196,0.973,199,1.901,201,1.982,203,1.753,216,0.56,218,1.076,220,0.95,224,1.679,225,1.982,229,1.576,241,1.49,243,1.679,246,1.351,249,1.294,250,1.416,253,1.351,254,1.351,255,2.294,257,1.351,258,2.19,259,1.454,285,1.982,286,1.982,305,1.49,306,1.576,313,1.809,318,1.982,324,1.576,360,3.933,363,2.643,364,2.553,366,1.982,367,1.982,376,1.242,377,1.153,378,1.076,380,1.679,382,2.545,384,1.679,386,1.576,387,1.576,390,3.04,391,2.808,393,1.679,396,1.679,399,1.679,402,1.679,403,1.576,404,1.679,405,1.381,406,1.679,410,1.679,412,1.679,415,1.679,418,0.728,419,3.43,439,0.949,461,1.576,492,1.49,493,1.009,503,1.49,504,3.43,518,1.153,519,1.49,526,1.49,532,1.679,533,1.982,575,1.576,576,1.576,579,1.576,580,2.721,581,2.553,582,2.553,624,3.912,642,1.679,652,1.982,653,1.982,703,1.576,704,1.982,705,1.982,724,1.982,725,1.982,736,1.679,739,1.679,756,1.679,758,1.351,837,1.982,838,1.982,849,1.982,850,1.982,855,1.679,856,2.721,857,2.931,862,1.576,871,1.679,872,1.982,873,1.982,890,1.351,891,3.695,925,1.679,926,1.679,928,1.576,929,2.931,930,1.809,931,2.931,939,1.679,940,3.043,942,1.576,943,3.655,972,1.576,973,3.944,1010,1.576,1028,1.576,1030,1.576,1036,1.982,1043,4.514,1048,1.809,1049,1.982,1063,1.809,1064,1.809,1079,2.931,1087,2.097,1090,1.679,1091,3.845,1092,3.433,1093,2.931,1099,1.576,1107,1.49,1122,1.982,1123,2.931,1141,1.113,1142,1.416,1148,2.931,1193,1.679,1194,1.982,1217,1.576,1218,2.931,1219,2.553,1224,1.679,1227,1.576,1228,1.982,1229,1.982,1252,1.679,1260,1.809,1261,1.351,1263,1.809,1264,2.931,1266,1.809,1368,1.576,1369,1.809,1380,1.679,1383,1.809,1384,1.809,1385,1.809,1425,1.679,1427,1.809,1428,1.294,1431,1.679,1452,1.982,1473,1.679,1579,1.679,1580,1.982,1586,1.679,1604,1.982,1641,1.576,1679,1.679,1680,1.982,1686,1.679,1687,4.249,1707,1.809,1756,1.809,1789,3.576,1791,2.931,1803,1.982,1806,1.809,1828,1.809,1829,1.982,1830,1.982,1838,1.679,1839,3.219,1840,1.982,1854,1.49,1857,1.679,1873,2.931,1880,1.576,1881,1.576,1882,1.351,1899,1.982,1964,1.982,1982,4.334,2038,1.982,2039,1.982,2046,1.982,2049,1.982,2051,1.576,2052,1.982,2053,1.982,2067,1.982,2068,1.982,2096,1.809,2097,1.809,2098,1.809,2099,1.809,2200,1.679,2201,1.679,2206,2.931,2207,2.931,2252,1.982,2262,1.982,2274,1.982,2275,1.982,2279,1.679,2295,1.982,2308,1.982,2309,1.982,2310,1.982,2315,1.809,2316,1.982,2320,2.931,2375,1.679,2376,1.982,2398,1.982,2405,1.982,2436,1.576,2437,2.721,2438,2.721,2445,1.679,2447,2.931,2448,2.931,2458,1.982,2468,1.982,2500,1.982,2536,1.679,2574,1.982,2593,2.931,2630,1.195,2663,1.982,2664,1.982,2680,1.982,2684,1.679,2688,1.294,2689,1.294,2722,1.809,2723,1.982,2724,1.982,2745,1.294,2746,3.912,2755,1.294,2761,1.294,2763,1.982,2878,3.43,2879,1.982,2931,2.931,2939,1.809,2944,1.679,2945,2.245,2946,2.245,2947,8.476,2948,7.031,2949,7.533,2950,2.245,2951,2.245,2952,5.796,2953,5.796,2954,8.345,2955,1.982,2956,1.982,2957,7.389,2958,4.049,2959,4.049,2960,8.436,2961,3.212,2962,1.982,2963,1.982,2964,3.638,2965,2.245,2966,3.638,2967,2.245,2968,2.245,2969,2.245,2970,5.274,2971,2.245,2972,2.245,2973,1.982,2974,2.245,2975,2.245,2976,7.87,2977,3.638,2978,2.245,2979,2.245,2980,1.982,2981,1.982,2982,1.982,2983,4.656,2984,1.982,2985,7.659,2986,3.212,2987,1.982,2988,2.245,2989,3.638,2990,6.534,2991,6.204,2992,1.982,2993,1.982,2994,4.668,2995,1.982,2996,1.982,2997,2.245,2998,2.245,2999,2.245]],["title/dependencies.html",[95,2.467,3000,3.248]],["body/dependencies.html",[0,0.429,20,0.009,22,0.294,35,1.324,36,1.455,38,0.612,39,1.101,42,2.149,79,0.007,80,0.007,90,2.266,95,2.778,117,3.972,129,4.823,139,3.313,140,3.313,303,2.692,635,3.313,1067,4.823,1110,4.478,1269,5.286,1592,4.823,1640,5.286,1855,3.972,1861,4.478,1876,3.972,1886,4.823,1919,5.286,1973,6.433,3001,5.988,3002,5.988,3003,7.371,3004,7.986,3005,5.988,3006,5.988,3007,5.988,3008,5.988,3009,5.988,3010,5.988,3011,5.988,3012,5.988,3013,5.988,3014,5.988,3015,5.988,3016,5.988,3017,5.988,3018,5.988,3019,5.286,3020,5.988,3021,5.988,3022,5.988,3023,5.988,3024,5.988,3025,5.988,3026,5.988,3027,5.988,3028,5.988]],["title/miscellaneous/functions.html",[3029,2.32,3030,4.694]],["body/miscellaneous/functions.html",[0,0.355,8,0.252,12,1.246,14,2.727,19,0.989,20,0.009,21,0.714,22,0.434,23,0.834,30,1.096,35,0.803,39,1.276,48,1.253,58,0.903,73,1.158,79,0.006,80,0.006,98,3.219,112,1.647,203,2.592,215,2.437,220,2.581,228,2.473,234,1.563,246,3.669,290,2.69,405,1.346,418,2.249,423,3.325,439,0.925,449,2.473,489,1.771,542,3.6,573,4.603,575,4.278,576,3.136,611,4.694,637,3.858,746,4.044,768,3.342,777,2.142,854,3.945,942,4.869,943,2.818,965,3.945,1043,5.174,1089,2.576,1092,2.473,1172,3.6,1275,3.342,1286,3.945,1344,4.869,1379,3.6,1383,4.91,1384,3.6,1385,4.91,1475,4.603,1495,3.342,1496,3.342,1826,3.6,2001,3.945,2094,6.578,2096,4.91,2099,4.91,2183,3.945,2622,6.885,2649,3.342,2973,3.945,2980,3.945,2981,5.381,2982,5.381,2992,5.381,2993,5.381,2994,6.003,2995,3.945,2996,5.381,3029,2.818,3030,3.945,3031,4.469,3032,4.469,3033,4.469,3034,4.469,3035,6.124,3036,4.469,3037,4.469,3038,6.938,3039,6.938,3040,4.469,3041,4.469,3042,6.096,3043,3.945,3044,4.469,3045,4.469,3046,4.469,3047,4.469,3048,4.469,3049,6.096,3050,4.469,3051,6.096,3052,4.469,3053,6.096,3054,4.469,3055,4.469,3056,6.096,3057,6.124,3058,4.469,3059,4.469,3060,4.469,3061,3.945,3062,4.469,3063,4.469,3064,7.452,3065,6.096,3066,4.469,3067,6.938,3068,6.096,3069,4.469]],["title/index.html",[8,0.208,3070,3.248,3071,3.248]],["body/index.html",[4,0.102,20,0.009,79,0.007,80,0.007,434,4.574,489,1.341,668,4.144,784,4.757,1002,3.724,1035,4.416,1045,4.757,1284,5.213,1484,5.213,2590,6.493,2675,6.451,2944,4.416,3072,5.905,3073,5.905,3074,7.308,3075,5.905,3076,5.905,3077,5.905,3078,5.905,3079,5.905,3080,7.936,3081,5.213,3082,5.905,3083,5.905,3084,5.213,3085,8.801,3086,5.905,3087,5.905,3088,5.213,3089,5.905,3090,6.451,3091,5.905,3092,5.905,3093,5.905,3094,5.905,3095,7.308,3096,7.308,3097,5.905,3098,5.905,3099,5.905,3100,6.451,3101,5.213,3102,5.905,3103,5.905,3104,5.905,3105,4.757,3106,5.905,3107,5.905,3108,5.905,3109,5.905,3110,5.905,3111,5.905,3112,4.757,3113,5.905,3114,5.905,3115,5.905,3116,5.905,3117,5.905,3118,5.905,3119,4.416]],["title/classes/initGuildCommand.html",[0,0.257,396,3.303]],["body/classes/initGuildCommand.html",[0,0.178,2,0.511,3,0.059,4,0.053,5,0.053,8,0.173,9,0.601,10,1.533,12,0.833,16,1.794,17,0.316,19,0.688,20,0.009,21,0.687,22,0.275,23,0.58,25,3.328,26,0.813,27,2.519,29,2.811,30,0.586,31,0.122,32,2.223,34,1.693,35,0.549,36,0.604,37,0.899,38,0.254,39,0.563,40,1.017,45,1.57,46,1.763,47,1.57,48,0.857,49,0.066,50,0.762,51,1.375,55,2.381,58,0.618,60,1.543,62,2.169,65,1.783,77,2.079,79,0.005,80,0.005,197,3.762,216,1.969,222,0.878,272,2.942,348,1.223,355,5.31,396,3.468,418,2.178,486,1.841,489,0.695,493,3.021,496,3.762,507,3.449,614,4.675,615,4.675,672,2.673,673,3.765,676,3.532,701,3.942,728,4.945,732,3.255,745,1.841,758,1.841,774,4.094,776,3.077,777,2.996,801,3.255,831,2.085,1004,3.255,1014,1.841,1177,2.288,1261,2.791,1330,2.7,2143,4.945,2224,3.468,2235,6.095,2331,5.931,2469,4.094,2470,4.094,2471,2.7,2473,4.094,2474,4.094,2475,4.094,2476,4.094,2477,4.094,2558,4.094,2559,6.095,2573,6.68,2670,7.564,2955,5.518,2956,2.7,3029,1.929,3101,2.7,3120,4.638,3121,3.059,3122,3.059,3123,4.638,3124,3.059,3125,3.059,3126,3.059,3127,6.251,3128,6.251,3129,3.059,3130,6.718,3131,3.059,3132,6.718,3133,3.059,3134,3.059,3135,3.059,3136,3.059,3137,4.638,3138,3.059,3139,6.251,3140,7.567,3141,7.567,3142,3.059,3143,4.638,3144,4.638,3145,3.059,3146,3.059,3147,4.638,3148,3.059,3149,3.059,3150,4.638,3151,3.059,3152,3.059,3153,4.638,3154,3.059,3155,3.059,3156,4.638,3157,3.059,3158,3.059,3159,4.638,3160,3.059,3161,3.059,3162,3.059,3163,4.638,3164,3.059,3165,3.059,3166,4.638,3167,4.638,3168,4.638,3169,4.638,3170,3.059,3171,3.059,3172,3.059,3173,4.638,3174,7.567,3175,3.059,3176,3.059]],["title/license.html",[3070,3.248,3071,3.248,3119,2.752]],["body/license.html",[0,0.052,4,0.14,5,0.028,9,0.115,17,0.05,20,0.004,29,1.012,31,0.017,50,0.222,58,0.18,79,0.002,80,0.002,112,0.328,196,1.551,212,0.624,213,0.413,216,1.075,230,0.98,231,0.584,259,1.113,272,0.875,280,0.377,293,0.624,294,0.457,305,0.59,307,1.429,320,1.437,361,0.785,363,2.305,365,1.579,404,0.665,434,3.153,456,1.675,463,3.215,474,2.305,495,2.081,564,0.624,582,2.558,589,0.665,592,0.492,611,3.936,635,0.901,637,2.531,638,1.142,640,0.441,666,2.425,668,3.561,693,1.311,720,0.624,763,1.217,777,0.426,785,0.785,803,2.242,817,2.152,840,0.785,841,1.987,845,1.142,897,2.152,913,1.987,969,1.026,977,3.401,1002,2.299,1004,0.624,1026,0.716,1031,1.217,1038,0.716,1041,0.785,1044,1.437,1051,6.381,1119,0.716,1221,1.755,1271,0.716,1277,0.785,1280,0.785,1326,4.662,1327,1.987,1328,1.813,1429,0.785,1472,2.081,1473,0.665,1474,1.217,1475,1.493,1493,1.437,1495,1.217,1496,3.624,1509,0.716,1536,1.437,1666,4.407,1763,3.795,1793,0.785,1794,2.242,1802,2.081,1824,0.716,1847,5.701,1943,0.785,1948,4.48,1959,0.785,1983,0.785,1992,0.785,1998,3.218,2002,2.936,2009,0.716,2035,1.217,2177,0.716,2193,0.716,2194,0.716,2379,0.716,2384,0.785,2406,1.311,2417,4.48,2422,1.437,2441,0.716,2547,1.311,2548,2.425,2559,2.242,2590,2.991,2597,3.221,2627,5.586,2640,0.785,2649,0.665,2657,1.987,2699,1.987,2715,3.808,2783,5.268,2847,1.437,2867,1.437,2896,0.785,2898,1.987,2944,1.217,2987,1.437,3019,0.785,3043,2.457,3057,1.437,3061,1.437,3084,2.457,3088,0.785,3090,0.785,3100,1.987,3105,1.813,3112,1.311,3119,6.552,3177,6.085,3178,5.949,3179,6.726,3180,6.614,3181,0.785,3182,0.889,3183,2.251,3184,7.168,3185,3.243,3186,5.949,3187,6.81,3188,3.243,3189,0.889,3190,0.889,3191,3.243,3192,6.89,3193,2.251,3194,2.251,3195,5.282,3196,2.251,3197,0.889,3198,2.251,3199,0.889,3200,0.889,3201,1.628,3202,5.282,3203,3.243,3204,3.999,3205,2.783,3206,1.628,3207,5.644,3208,4.313,3209,0.889,3210,0.889,3211,3.645,3212,1.628,3213,0.889,3214,0.889,3215,0.889,3216,5.075,3217,7.809,3218,2.251,3219,0.889,3220,0.889,3221,2.783,3222,4.594,3223,0.889,3224,4.594,3225,0.889,3226,3.243,3227,0.889,3228,2.783,3229,0.889,3230,5.803,3231,0.889,3232,0.889,3233,0.889,3234,4.847,3235,2.251,3236,5.075,3237,3.243,3238,5.282,3239,0.889,3240,1.628,3241,0.889,3242,0.889,3243,2.251,3244,0.889,3245,0.889,3246,0.889,3247,5.075,3248,0.889,3249,1.628,3250,0.889,3251,0.889,3252,2.783,3253,0.889,3254,1.628,3255,0.889,3256,2.251,3257,4.594,3258,6.085,3259,0.889,3260,3.808,3261,4.313,3262,0.889,3263,2.251,3264,0.889,3265,0.889,3266,0.889,3267,3.645,3268,2.783,3269,2.251,3270,1.628,3271,0.889,3272,2.783,3273,0.889,3274,2.251,3275,0.889,3276,1.628,3277,1.628,3278,2.251,3279,7.842,3280,0.889,3281,7.287,3282,5.471,3283,3.243,3284,3.243,3285,3.645,3286,2.251,3287,0.889,3288,2.251,3289,6.328,3290,1.628,3291,5.282,3292,0.889,3293,0.889,3294,0.889,3295,8.699,3296,0.889,3297,0.889,3298,1.628,3299,3.645,3300,0.889,3301,1.628,3302,0.889,3303,4.847,3304,0.889,3305,2.783,3306,0.889,3307,1.628,3308,7.775,3309,2.251,3310,4.594,3311,2.783,3312,0.889,3313,1.628,3314,2.251,3315,4.594,3316,4.847,3317,2.783,3318,0.889,3319,2.783,3320,1.628,3321,2.783,3322,2.783,3323,0.889,3324,2.251,3325,6.966,3326,1.628,3327,0.889,3328,4.313,3329,0.889,3330,3.645,3331,5.803,3332,2.251,3333,1.628,3334,3.999,3335,5.075,3336,3.645,3337,0.889,3338,1.628,3339,0.889,3340,0.889,3341,3.999,3342,0.889,3343,5.471,3344,1.628,3345,0.889,3346,0.889,3347,2.251,3348,0.889,3349,0.889,3350,0.889,3351,0.889,3352,2.251,3353,4.313,3354,2.783,3355,0.889,3356,0.889,3357,0.889,3358,1.628,3359,4.847,3360,0.889,3361,1.628,3362,0.889,3363,0.889,3364,2.251,3365,2.251,3366,3.999,3367,2.251,3368,2.251,3369,0.889,3370,0.889,3371,3.243,3372,3.243,3373,3.645,3374,0.889,3375,0.889,3376,1.628,3377,2.251,3378,0.889,3379,0.889,3380,0.889,3381,0.889,3382,0.889,3383,7.037,3384,2.251,3385,4.313,3386,0.889,3387,3.645,3388,1.628,3389,2.783,3390,0.889,3391,0.889,3392,1.628,3393,1.628,3394,2.783,3395,0.889,3396,0.889,3397,0.889,3398,0.889,3399,1.628,3400,3.243,3401,0.889,3402,1.628,3403,0.889,3404,0.889,3405,3.243,3406,2.783,3407,0.889,3408,2.783,3409,2.783,3410,0.889,3411,3.999,3412,2.783,3413,0.889,3414,3.243,3415,0.889,3416,1.628,3417,0.889,3418,0.889,3419,1.628,3420,0.889,3421,0.889,3422,0.889,3423,2.251,3424,2.251,3425,3.645,3426,0.889,3427,1.628,3428,0.889,3429,1.628,3430,1.628,3431,1.628,3432,0.889,3433,5.471,3434,1.628,3435,0.889,3436,0.889,3437,0.889,3438,0.889,3439,0.889,3440,0.889,3441,0.889,3442,2.251,3443,0.889,3444,5.803,3445,2.251,3446,0.889,3447,0.889,3448,0.889,3449,0.889,3450,3.243,3451,3.645,3452,0.889,3453,0.889,3454,2.251,3455,0.889,3456,0.889,3457,2.783,3458,0.889,3459,0.889,3460,0.889,3461,0.889,3462,0.889,3463,0.889,3464,0.889,3465,1.628,3466,0.889,3467,2.251,3468,0.889,3469,0.889,3470,1.628,3471,0.889,3472,0.889,3473,0.889,3474,0.889,3475,0.889,3476,1.628,3477,1.628,3478,1.628,3479,4.594,3480,0.889,3481,3.645,3482,0.889,3483,0.889,3484,1.628,3485,2.251,3486,2.251,3487,2.783,3488,2.783,3489,2.783,3490,0.889,3491,3.243,3492,0.889,3493,2.251,3494,2.251,3495,0.889,3496,1.628,3497,0.889,3498,1.628,3499,3.243,3500,1.628,3501,2.783,3502,2.783,3503,2.251,3504,5.644,3505,3.243,3506,0.889,3507,0.889,3508,2.251,3509,3.999,3510,1.628,3511,0.889,3512,0.889,3513,0.889,3514,0.889,3515,2.251,3516,0.889,3517,0.889,3518,0.889,3519,2.251,3520,0.889,3521,0.889,3522,1.628,3523,0.889,3524,0.889,3525,1.628,3526,0.889,3527,2.251,3528,0.889,3529,0.889,3530,2.251,3531,1.628,3532,3.645,3533,6.54,3534,2.251,3535,1.628,3536,1.628,3537,1.628,3538,1.628,3539,2.783,3540,1.628,3541,0.889,3542,0.889,3543,0.889,3544,0.889,3545,0.889,3546,3.645,3547,1.628,3548,0.889,3549,0.889,3550,0.889,3551,0.889,3552,1.628,3553,0.889,3554,1.628,3555,0.889,3556,3.243,3557,0.889,3558,4.313,3559,0.889,3560,5.075,3561,1.628,3562,0.889,3563,0.889,3564,0.889,3565,0.889,3566,0.889,3567,0.889,3568,1.628,3569,0.889,3570,2.251,3571,3.243,3572,2.783,3573,1.628,3574,0.889,3575,0.889,3576,0.889,3577,0.889,3578,0.889,3579,1.628,3580,0.889,3581,0.889,3582,0.889,3583,2.783,3584,0.889,3585,1.628,3586,0.889,3587,1.628,3588,0.889,3589,0.889,3590,2.251,3591,0.889,3592,0.889,3593,0.889,3594,0.889,3595,0.889,3596,0.889,3597,0.889,3598,0.889,3599,0.889,3600,0.889,3601,2.251,3602,0.889,3603,0.889,3604,0.889,3605,0.889,3606,0.889,3607,3.243,3608,0.889,3609,0.889,3610,0.889,3611,0.889,3612,0.889,3613,0.889,3614,0.889,3615,0.889,3616,0.889,3617,0.889,3618,0.889,3619,3.999,3620,2.251,3621,0.889,3622,2.783,3623,0.889,3624,0.889,3625,2.251,3626,0.889,3627,0.889,3628,2.251,3629,0.889,3630,1.628,3631,0.889,3632,0.889,3633,0.889,3634,0.889,3635,0.889,3636,0.889,3637,0.889,3638,0.889,3639,0.889,3640,0.889,3641,0.889,3642,0.889,3643,1.628,3644,1.628,3645,0.889,3646,0.889,3647,2.783,3648,0.889,3649,2.251,3650,1.628,3651,0.889,3652,1.628,3653,2.251,3654,2.251,3655,0.889,3656,1.628,3657,0.889,3658,2.251,3659,3.999,3660,0.889,3661,1.628,3662,1.628,3663,0.889,3664,0.889,3665,0.889,3666,0.889,3667,0.889,3668,0.889,3669,1.628,3670,0.889,3671,2.783,3672,2.251,3673,0.889,3674,3.243,3675,0.889,3676,0.889,3677,0.889,3678,0.889,3679,0.889,3680,0.889,3681,1.628,3682,1.628,3683,1.628,3684,2.251,3685,0.889,3686,1.628,3687,2.251,3688,0.889,3689,1.628,3690,0.889,3691,1.628,3692,0.889,3693,0.889,3694,1.628,3695,6.726,3696,2.251,3697,0.889,3698,3.243,3699,4.847,3700,2.251,3701,0.889,3702,0.889,3703,0.889,3704,2.783,3705,0.889,3706,2.251,3707,0.889,3708,0.889,3709,0.889,3710,0.889,3711,0.889,3712,0.889,3713,0.889,3714,2.783,3715,1.628,3716,0.889,3717,0.889,3718,2.251,3719,0.889,3720,1.628,3721,2.251,3722,1.628,3723,0.889,3724,0.889,3725,0.889,3726,0.889,3727,1.628,3728,2.251,3729,0.889,3730,0.889,3731,1.628,3732,0.889,3733,1.628,3734,0.889,3735,0.889,3736,0.889,3737,0.889,3738,0.889,3739,0.889,3740,2.251,3741,1.628,3742,0.889,3743,0.889,3744,0.889,3745,2.783,3746,0.889,3747,2.251,3748,0.889,3749,0.889,3750,0.889,3751,1.628,3752,0.889,3753,0.889,3754,0.889,3755,2.251,3756,1.628,3757,1.628,3758,0.889,3759,1.628,3760,3.999,3761,1.628,3762,2.251,3763,2.783,3764,0.889,3765,0.889,3766,1.628,3767,0.889,3768,2.251,3769,0.889,3770,1.628,3771,0.889,3772,0.889,3773,0.889,3774,0.889,3775,2.783,3776,0.889,3777,2.251,3778,1.628,3779,0.889,3780,1.628,3781,0.889,3782,0.889,3783,0.889,3784,1.628,3785,1.628,3786,0.889,3787,1.628,3788,0.889,3789,0.889,3790,0.889,3791,0.889,3792,0.889,3793,2.251,3794,0.889,3795,0.889,3796,0.889,3797,1.628,3798,2.783,3799,1.628,3800,2.251,3801,0.889,3802,0.889,3803,0.889,3804,0.889,3805,1.628,3806,0.889,3807,0.889,3808,0.889,3809,0.889,3810,0.889,3811,0.889,3812,0.889,3813,0.889,3814,0.889,3815,0.889,3816,0.889,3817,0.889,3818,0.889,3819,0.889,3820,2.783,3821,0.889,3822,0.889,3823,1.628,3824,0.889,3825,0.889,3826,0.889,3827,0.889,3828,0.889,3829,0.889,3830,0.889,3831,0.889,3832,0.889,3833,0.889,3834,0.889,3835,0.889,3836,1.628,3837,0.889,3838,0.889,3839,0.889,3840,0.889,3841,0.889,3842,0.889,3843,1.628,3844,0.889,3845,0.889,3846,0.889,3847,0.889,3848,0.889,3849,0.889,3850,0.889,3851,0.889,3852,1.628,3853,1.628,3854,3.243,3855,0.889,3856,0.889,3857,0.889,3858,0.889,3859,0.889,3860,0.889,3861,0.889,3862,2.251,3863,1.628,3864,0.889,3865,1.628,3866,1.628,3867,1.628,3868,0.889,3869,0.889,3870,0.889,3871,0.889,3872,0.889,3873,0.889,3874,1.628,3875,0.889,3876,0.889,3877,0.889,3878,1.628,3879,0.889,3880,2.251,3881,0.889,3882,0.889,3883,0.889,3884,0.889,3885,0.889,3886,0.889,3887,0.889,3888,0.889,3889,0.889,3890,0.889,3891,0.889,3892,1.628,3893,0.889,3894,0.889,3895,0.889,3896,0.889,3897,0.889,3898,0.889,3899,0.889,3900,0.889,3901,0.889,3902,0.889,3903,0.889,3904,0.889,3905,0.889,3906,0.889,3907,0.889,3908,0.889,3909,0.889,3910,0.889,3911,0.889,3912,1.628,3913,1.628,3914,0.889,3915,0.889,3916,0.889,3917,0.889,3918,0.889,3919,0.889,3920,0.889,3921,0.889,3922,0.889,3923,0.889,3924,0.889,3925,0.889,3926,0.889,3927,0.889,3928,0.889,3929,0.889,3930,0.889,3931,0.889,3932,0.889,3933,0.889,3934,0.889,3935,0.889,3936,0.889,3937,0.889,3938,0.889,3939,0.889,3940,0.785,3941,0.889]],["title/modules.html",[94,2.806]],["body/modules.html",[20,0.007,79,0.007,80,0.007,93,4.733,94,2.937,104,4.442,105,4.442,106,4.442,107,4.442,108,4.442,130,4.199,132,4.199,136,4.199,141,4.199,1137,4.442,1419,4.442,3105,7.403,3942,9.191,3943,9.191,3944,9.191]],["title/overview.html",[3945,5.338]],["body/overview.html",[2,0.638,16,2.484,20,0.009,79,0.005,80,0.005,83,1.407,92,1.336,93,6.55,94,1.772,95,1.772,96,1.893,97,1.893,98,1.772,99,1.831,100,1.772,101,3.372,102,3.372,103,3.372,104,5.915,105,6.357,106,6.072,107,6.111,108,5.659,109,4.475,110,2.708,111,1.893,112,1.407,130,5.231,132,5.35,136,5.525,141,5.525,200,1.571,241,5.231,310,3.372,311,3.372,312,3.372,313,5.136,365,2.68,374,3.372,375,3.372,376,4.664,377,4.275,378,4.039,474,2.201,928,4.475,1107,5.231,1137,6.206,1138,3.372,1139,3.372,1140,3.372,1141,4.069,1142,4.388,1227,4.475,1368,4.475,1415,3.372,1416,3.372,1417,3.372,1418,3.372,1419,5.659,1433,3.372,1434,3.372,1599,3.372,1601,3.372,1702,3.372,1703,3.372,1790,2.409,1854,5.231,1877,3.372,1878,3.372,1879,3.372,1880,4.475,1881,4.475,1882,4.853,2861,3.372,2862,3.372,3181,3.372,3945,3.372,3946,5.462,3947,3.82,3948,3.82]],["title/properties.html",[202,1.153,3000,3.248]],["body/properties.html",[20,0.009,21,0.594,35,1.203,79,0.008,80,0.008,202,1.452,489,1.521,637,3.779,763,5.008,830,5.912,831,3.545,1011,4.443,1047,5.395,1221,4.223,1273,5.912,1472,5.008,2381,5.395,2407,5.912,2547,5.395,3081,5.912,3112,5.395,3119,5.008,3180,5.912,3940,5.912,3949,6.697,3950,6.697,3951,6.697,3952,6.697,3953,6.697,3954,6.697,3955,6.697,3956,6.697]],["title/miscellaneous/typealiases.html",[3029,2.32,3957,5.317]],["body/miscellaneous/typealiases.html",[8,0.399,20,0.008,22,0.347,79,0.008,80,0.008,249,4.692,250,5.134,1982,5.292,3029,4.463,3958,7.077,3959,7.187]],["title/miscellaneous/variables.html",[1669,4.283,3029,2.32]],["body/miscellaneous/variables.html",[0,0.283,8,0.138,10,0.847,20,0.009,21,0.346,22,0.438,30,0.493,48,2.031,55,3.476,58,1.532,60,1.419,62,0.611,67,1.853,70,1.562,72,1.702,73,1.218,77,0.721,79,0.004,80,0.004,81,0.836,192,2.165,193,2.165,196,1.726,202,0.847,203,2.336,212,3.416,214,3.728,215,3.418,216,1.688,231,2.317,235,1.562,252,3.476,254,2.929,255,1.547,258,1.476,259,1.946,272,1.519,305,3.229,306,2.741,327,1.703,342,3.071,360,2.733,364,2.741,368,2.165,403,2.741,405,1.825,418,0.795,420,3.069,421,1.721,428,2.591,434,4.574,439,1.336,440,2.591,449,2.693,454,2.733,456,2.351,493,1.103,505,1.502,507,2.849,611,3.886,620,2.005,637,1.176,645,3.069,663,1.721,772,3.921,784,3.146,831,1.103,845,2.741,858,3.648,861,2.929,865,2.929,866,3.069,867,3.069,868,2.741,874,1.414,877,1.721,891,1.976,892,2.165,893,2.165,894,2.165,895,2.165,896,2.165,897,1.627,900,2.921,919,2.921,925,3.64,926,2.921,927,2.921,940,1.627,943,1.547,952,1.721,973,1.834,974,3.146,975,3.146,976,3.146,977,2.741,978,3.146,1013,1.976,1014,2.929,1015,3.146,1017,3.146,1019,1.976,1028,3.416,1030,2.741,1031,1.834,1032,1.976,1033,1.976,1063,3.146,1064,3.146,1086,1.259,1242,1.976,1245,3.921,1261,3.34,1263,3.146,1264,3.146,1266,3.146,1304,2.165,1305,2.165,1342,2.165,1344,2.741,1391,3.448,1428,3.199,1475,1.627,1494,1.976,1507,2.165,1544,1.976,1669,1.976,1686,3.64,1687,3.146,1772,1.976,1789,3.721,1791,3.146,1806,3.146,1814,2.165,1815,2.165,1822,3.448,1823,2.165,1824,1.976,1825,2.165,1826,1.976,1827,2.165,1828,3.146,1855,2.591,1931,1.976,1982,1.834,2003,2.165,2009,1.976,2010,2.165,2011,2.165,2012,3.448,2013,2.165,2014,2.165,2015,2.165,2016,2.165,2017,2.165,2018,3.448,2019,2.165,2020,2.165,2021,2.165,2022,1.976,2023,2.165,2024,2.165,2025,2.165,2026,2.165,2027,2.165,2028,2.165,2029,2.165,2030,2.165,2031,2.165,2032,1.721,2033,1.976,2035,1.834,2036,2.165,2097,3.146,2098,3.146,2175,2.165,2179,1.834,2185,2.591,2320,1.976,2343,2.165,2510,1.976,2518,1.976,2532,3.146,2549,1.976,2550,1.976,2552,1.976,2577,4.471,2593,1.976,2632,2.165,2783,3.146,2878,1.834,2931,3.146,2933,4.297,2937,2.165,2939,3.146,2940,2.165,2958,2.165,2959,4.9,2961,4.9,2962,3.448,2963,3.448,2983,5.699,2984,4.297,2986,4.297,2994,3.921,3029,1.547,3035,3.448,3260,3.448,3959,3.448,3960,4.867,3961,2.453,3962,2.453,3963,2.453,3964,2.453,3965,5.55,3966,2.453,3967,3.906,3968,3.906,3969,3.906,3970,3.906,3971,2.453,3972,2.453,3973,3.906,3974,5.55,3975,3.906,3976,2.453,3977,3.906,3978,2.453,3979,3.906,3980,3.906,3981,3.906,3982,6.061,3983,5.55,3984,2.453,3985,2.453,3986,3.906,3987,4.867,3988,5.55,3989,2.453,3990,2.453,3991,2.453,3992,2.453,3993,2.453,3994,2.453,3995,2.453,3996,2.453,3997,2.453,3998,2.453,3999,2.453,4000,2.453,4001,2.453]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":360,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":3949,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":3015,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3026,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":3014,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":3021,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2947,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2971,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2965,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2966,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2972,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2969,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2967,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2949,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":2951,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2954,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2948,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2952,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2957,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2953,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2970,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2964,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":917,"title":{},"body":{"classes/DiscordUser.html":{}}}],["00:00:00",{"_index":2605,"title":{},"body":{"injectables/TasksService.html":{}}}],["1",{"_index":817,"title":{"classes/SelfDto-1.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"license.html":{}}}],["1.11.0",{"_index":3013,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":3023,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2985,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2991,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":2988,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":3445,"title":{},"body":{"license.html":{}}}],["10.3.1",{"_index":3024,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":2976,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":2192,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/UserTimeOutDto.html":{}}}],["1011511871297302608",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"classes/ModRequestFlow.html":{}}}],["1011513775054143632",{"_index":2123,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["1011529685357838376",{"_index":1406,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["1011532621412577350",{"_index":2114,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["1042351896",{"_index":1332,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["1051979218164125826",{"_index":1407,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["1056592866660581456",{"_index":442,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["1080070968900333578",{"_index":446,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["11",{"_index":2987,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["11.0.0",{"_index":3007,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3008,"title":{},"body":{"dependencies.html":{}}}],["11.1.5",{"_index":3004,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3011,"title":{},"body":{"dependencies.html":{}}}],["1132244079242133555",{"_index":1408,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["12",{"_index":3946,"title":{},"body":{"overview.html":{}}}],["123",{"_index":1488,"title":{},"body":{"injectables/GuildService.html":{}}}],["1234",{"_index":910,"title":{},"body":{"classes/DiscordUser.html":{}}}],["123456789012345678",{"_index":919,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["128",{"_index":1698,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["13",{"_index":3935,"title":{},"body":{"license.html":{}}}],["14",{"_index":1522,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["14.18.0",{"_index":3016,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":3661,"title":{},"body":{"license.html":{}}}],["1567081521233",{"_index":1033,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":3662,"title":{},"body":{"license.html":{}}}],["1600000000000",{"_index":1019,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["1671981769958",{"_index":435,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["19",{"_index":3181,"title":{},"body":{"license.html":{},"overview.html":{}}}],["1996",{"_index":3464,"title":{},"body":{"license.html":{}}}],["2",{"_index":666,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["2/2",{"_index":2977,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":2997,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3462,"title":{},"body":{"license.html":{}}}],["200",{"_index":553,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["2007",{"_index":3183,"title":{},"body":{"license.html":{}}}],["24",{"_index":2917,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["28",{"_index":3816,"title":{},"body":{"license.html":{}}}],["3",{"_index":474,"title":{},"body":{"classes/Channel.html":{},"classes/CleanWfpMember.html":{},"classes/GuildChannelEditOptions.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/SpecialCommand.html":{},"license.html":{},"overview.html":{}}}],["3.0",{"_index":3955,"title":{},"body":{"properties.html":{}}}],["3.0.1",{"_index":3006,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":2968,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2979,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1473,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"coverage.html":{},"license.html":{}}}],["322822954796974080",{"_index":1787,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["4",{"_index":3494,"title":{},"body":{"license.html":{}}}],["4.0.0",{"_index":3020,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":3003,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3005,"title":{},"body":{"dependencies.html":{}}}],["4.41.0",{"_index":3028,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":2194,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["5,7",{"_index":1129,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["5.3.2",{"_index":3001,"title":{},"body":{"dependencies.html":{}}}],["5.5.1",{"_index":3002,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":2975,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2990,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":1335,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["500ms",{"_index":1325,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["55",{"_index":3947,"title":{},"body":{"overview.html":{}}}],["559623534870528",{"_index":1032,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":3948,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":3010,"title":{},"body":{"dependencies.html":{}}}],["6.12.0",{"_index":3012,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2193,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["616609333832187924",{"_index":440,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["63",{"_index":2112,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["6b",{"_index":3553,"title":{},"body":{"license.html":{}}}],["6d",{"_index":3577,"title":{},"body":{"license.html":{}}}],["7",{"_index":2657,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["7.8.2",{"_index":3027,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":2974,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":2978,"title":{},"body":{"coverage.html":{}}}],["832170662491062333",{"_index":459,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["89q12",{"_index":3956,"title":{},"body":{"properties.html":{}}}],["900s",{"_index":1898,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["__bot_event__",{"_index":3971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__bot_event_handler__",{"_index":368,"title":{},"body":{"interfaces/BotEvent.html":{},"miscellaneous/variables.html":{}}}],["__bot_event_handler__(...args",{"_index":369,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["__rank__",{"_index":3997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_addmembertochanneloverwrite",{"_index":1453,"title":{},"body":{"injectables/GuildService.html":{}}}],["_addmembertochanneloverwrite(user_id",{"_index":1463,"title":{},"body":{"injectables/GuildService.html":{}}}],["_count",{"_index":1542,"title":{},"body":{"injectables/GuildService.html":{}}}],["_days",{"_index":2901,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_fetchguilds",{"_index":2408,"title":{},"body":{"injectables/SelfService.html":{}}}],["_fetchguilds(userid",{"_index":2412,"title":{},"body":{"injectables/SelfService.html":{}}}],["_getguildidfromselectmenu",{"_index":2069,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["_getguildidfromselectmenu(interaction",{"_index":2077,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["_getmessage",{"_index":2832,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["_getmessage(msgid",{"_index":2834,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["_hours",{"_index":2902,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_ismemberadmin",{"_index":1708,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberadmin(user_id",{"_index":1721,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismembermod",{"_index":1709,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismembermod(user_id",{"_index":1724,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberverified",{"_index":1710,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberverified(user_id",{"_index":1726,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_minutes",{"_index":2903,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_removememberfromchanneloverwrite",{"_index":1454,"title":{},"body":{"injectables/GuildService.html":{}}}],["_removememberfromchanneloverwrite(user_id",{"_index":1467,"title":{},"body":{"injectables/GuildService.html":{}}}],["aber",{"_index":958,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["abgeschickt",{"_index":836,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["ability",{"_index":3627,"title":{},"body":{"license.html":{}}}],["above",{"_index":841,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"license.html":{}}}],["absence",{"_index":3490,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":3902,"title":{},"body":{"license.html":{}}}],["acc",{"_index":1552,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[channelid",{"_index":1550,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[channelid][userid",{"_index":1551,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[date",{"_index":1563,"title":{},"body":{"injectables/GuildService.html":{}}}],["accent",{"_index":899,"title":{},"body":{"classes/DiscordUser.html":{}}}],["accentcolor",{"_index":892,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["accept",{"_index":3715,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":3714,"title":{},"body":{"license.html":{}}}],["accepted",{"_index":1317,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["access",{"_index":3260,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":3270,"title":{},"body":{"license.html":{}}}],["accesstoken",{"_index":1921,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["accompanied",{"_index":3534,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":3906,"title":{},"body":{"license.html":{}}}],["accomplish",{"_index":3273,"title":{},"body":{"license.html":{}}}],["accord",{"_index":3489,"title":{},"body":{"license.html":{}}}],["according",{"_index":3897,"title":{},"body":{"license.html":{}}}],["account",{"_index":2892,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["accumulator",{"_index":1562,"title":{},"body":{"injectables/GuildService.html":{}}}],["achieve",{"_index":3911,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":3421,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":3766,"title":{},"body":{"license.html":{}}}],["action",{"_index":249,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["actionrowbuilder",{"_index":745,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["actionrowbuilder().addcomponents",{"_index":801,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/initGuildCommand.html":{}}}],["actionrowbuilder().addcomponents(button",{"_index":775,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["actionrowbuilder().addcomponents(needhelpbutton",{"_index":968,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{}}}],["actions",{"_index":305,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["actions)[number",{"_index":2034,"title":{},"body":{"classes/LogEntry.html":{}}}],["actions})@isoptional()@isstring()@isin(actions",{"_index":291,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["activities",{"_index":3324,"title":{},"body":{"license.html":{}}}],["activity",{"_index":2640,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["actual",{"_index":3791,"title":{},"body":{"license.html":{}}}],["actually",{"_index":3600,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":3302,"title":{},"body":{"license.html":{}}}],["add",{"_index":803,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["addchanneltypes",{"_index":3139,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["addcomponents",{"_index":2233,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["added",{"_index":1328,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["addfields",{"_index":690,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/UserInfoUiCommand.html":{}}}],["additional",{"_index":3504,"title":{},"body":{"license.html":{}}}],["addmember",{"_index":1230,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["addmember(member",{"_index":1237,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["addmember(userid",{"_index":1728,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addmembers",{"_index":1711,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addmembers(guildid",{"_index":1730,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addreactions",{"_index":1023,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["address",{"_index":3848,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":3297,"title":{},"body":{"license.html":{}}}],["addrolecommand",{"_index":1,"title":{"classes/AddRoleCommand.html":{}},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["admin",{"_index":1014,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RoleResponse.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["administrator",{"_index":2259,"title":{},"body":{"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["adminroleid",{"_index":2469,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["adopted",{"_index":3461,"title":{},"body":{"license.html":{}}}],["adversely",{"_index":3634,"title":{},"body":{"license.html":{}}}],["advised",{"_index":3893,"title":{},"body":{"license.html":{}}}],["affects",{"_index":3635,"title":{},"body":{"license.html":{}}}],["affero",{"_index":3178,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":3746,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":3417,"title":{},"body":{"license.html":{}}}],["against",{"_index":3478,"title":{},"body":{"license.html":{}}}],["agb",{"_index":1318,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["aggregate",{"_index":3519,"title":{},"body":{"license.html":{}}}],["agpl",{"_index":3940,"title":{},"body":{"license.html":{},"properties.html":{}}}],["agree",{"_index":3829,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3879,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3777,"title":{},"body":{"license.html":{}}}],["aka",{"_index":469,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["algorithm",{"_index":1926,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["alias",{"_index":2989,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3958,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alle",{"_index":2579,"title":{},"body":{"classes/TargetUser.html":{}}}],["alleging",{"_index":3754,"title":{},"body":{"license.html":{}}}],["allow",{"_index":2118,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["allowed",{"_index":3198,"title":{},"body":{"license.html":{}}}],["along",{"_index":3491,"title":{},"body":{"license.html":{}}}],["already",{"_index":1119,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["alternate",{"_index":3244,"title":{},"body":{"license.html":{}}}],["alternative",{"_index":3549,"title":{},"body":{"license.html":{}}}],["always",{"_index":909,"title":{},"body":{"classes/DiscordUser.html":{},"injectables/GuildMemberEvents.html":{}}}],["amazing",{"_index":3106,"title":{},"body":{"index.html":{}}}],["americano",{"_index":2512,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["ancillary",{"_index":3716,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":3237,"title":{},"body":{"license.html":{}}}],["anfrage",{"_index":2128,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["anliegen",{"_index":2673,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["annotation",{"_index":3981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anouncement.command",{"_index":389,"title":{},"body":{"modules/BotModule.html":{}}}],["anouncement.command.ts",{"_index":2207,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["anouncement.command.ts:31",{"_index":2210,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{}}}],["anouncement.command.ts:69",{"_index":2249,"title":{},"body":{"classes/MumVoiceCommandUi.html":{}}}],["anouncement.command.ts:97",{"_index":2250,"title":{},"body":{"classes/MumVoiceCommandUi.html":{}}}],["anouncement.dto",{"_index":2214,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["anouncement.dto.ts",{"_index":2053,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"coverage.html":{}}}],["anouncement.dto.ts:15",{"_index":2056,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["anouncement.dto.ts:25",{"_index":2061,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["ansage",{"_index":2242,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["answer",{"_index":809,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{}}}],["answer.value",{"_index":819,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answercomponentrow",{"_index":800,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answerinput",{"_index":796,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answers",{"_index":815,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["anti",{"_index":3449,"title":{},"body":{"license.html":{}}}],["antwort",{"_index":832,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["anyone",{"_index":3502,"title":{},"body":{"license.html":{}}}],["anything",{"_index":3311,"title":{},"body":{"license.html":{}}}],["apfelkuchen",{"_index":2507,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["api",{"_index":1011,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"properties.html":{}}}],["apibearerauth",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apibody",{"_index":567,"title":{},"body":{"controllers/ChannelController.html":{}}}],["apiheader",{"_index":1859,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["apioperation",{"_index":568,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":480,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["apiproperty({type",{"_index":1082,"title":{},"body":{"classes/Guild.html":{},"classes/LogEntryDto.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["apipropertyoptional",{"_index":304,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SettingsDto.html":{}}}],["apipropertyoptional({type",{"_index":289,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/SelfDto.html":{}}}],["apiresponse",{"_index":569,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":570,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{}}}],["apitags('/channel",{"_index":584,"title":{},"body":{"controllers/ChannelController.html":{}}}],["apitags('/role",{"_index":2344,"title":{},"body":{"controllers/RoleController.html":{}}}],["apitags('auth/jwt",{"_index":1863,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["app",{"_index":1045,"title":{},"body":{"interfaces/EventToLog.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":2273,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":82,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":3315,"title":{},"body":{"license.html":{}}}],["application",{"_index":1041,"title":{},"body":{"interfaces/EventToLog.html":{},"license.html":{}}}],["application/x",{"_index":1946,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["applicationcommandtype",{"_index":2211,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["applicationcommandtype.chatinput",{"_index":2217,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["applicationcommandtype.message",{"_index":2227,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["applicationcommandtype.user",{"_index":2838,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["applications",{"_index":3079,"title":{},"body":{"index.html":{}}}],["applies",{"_index":3855,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3291,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":93,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":3334,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":3483,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":3901,"title":{},"body":{"license.html":{}}}],["apps",{"_index":3045,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appservice",{"_index":109,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archive",{"_index":3932,"title":{},"body":{"license.html":{}}}],["args",{"_index":372,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["argumentshost",{"_index":632,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["arising",{"_index":3883,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":3787,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":3800,"title":{},"body":{"license.html":{}}}],["array",{"_index":449,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["article",{"_index":3458,"title":{},"body":{"license.html":{}}}],["ask",{"_index":762,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{}}}],["assert",{"_index":3233,"title":{},"body":{"license.html":{}}}],["assets",{"_index":3735,"title":{},"body":{"license.html":{}}}],["associated",{"_index":3395,"title":{},"body":{"license.html":{}}}],["assume",{"_index":3873,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":3905,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":3683,"title":{},"body":{"license.html":{}}}],["async",{"_index":10,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["at(unixtimestamp",{"_index":1018,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["attach",{"_index":3913,"title":{},"body":{"license.html":{}}}],["attaches",{"_index":2671,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["attachment",{"_index":1379,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"injectables/GuildUserService.html":{},"miscellaneous/functions.html":{}}}],["attachment.url",{"_index":1398,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["attachments",{"_index":1742,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["attachmenttype",{"_index":3051,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attachtment",{"_index":1385,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["attempt",{"_index":3693,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":3664,"title":{},"body":{"license.html":{}}}],["auditevents",{"_index":313,"title":{},"body":{"modules/AuditLogModule.html":{},"coverage.html":{},"overview.html":{}}}],["auditlog",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"injectables/GuildService.html":{}}}],["auditlog.controller",{"_index":315,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["auditlog.events",{"_index":316,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["auditlog.service",{"_index":242,"title":{},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{}}}],["auditlog/auditlog.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["auditlogcontroller",{"_index":224,"title":{"controllers/AuditLogController.html":{}},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"coverage.html":{}}}],["auditlogfilterdto",{"_index":229,"title":{"classes/AuditLogFilterDto.html":{}},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"coverage.html":{}}}],["auditlogmodule",{"_index":136,"title":{"modules/AuditLogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/ModerationModule.html":{},"modules.html":{},"overview.html":{}}}],["auditlogservice",{"_index":241,"title":{"injectables/AuditLogService.html":{}},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"coverage.html":{},"overview.html":{}}}],["auf",{"_index":962,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["aus",{"_index":2180,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["ausgewählte",{"_index":2232,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["auth",{"_index":1841,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.controller",{"_index":1888,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.controller.ts",{"_index":1840,"title":{},"body":{"controllers/JwtAuthController.html":{},"coverage.html":{}}}],["auth.controller.ts:35",{"_index":1852,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.controller.ts:40",{"_index":1846,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.guard",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":1873,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["auth.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.module.ts",{"_index":1883,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.service",{"_index":1856,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{}}}],["auth.service.ts",{"_index":1899,"title":{},"body":{"injectables/JwtAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:12",{"_index":1905,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:21",{"_index":1909,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:45",{"_index":1911,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:57",{"_index":1913,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:66",{"_index":1907,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.strategy",{"_index":1884,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.strategy.ts",{"_index":1964,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:17",{"_index":1970,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:7",{"_index":1968,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth/jwt/guards/jwt",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"controllers/GuildSettingsController.html":{},"controllers/SelfController.html":{}}}],["auth/jwt/jwt",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":1875,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{}}}],["authguard('jwt",{"_index":1874,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{}}}],["author",{"_index":3112,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["authorization",{"_index":1959,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["authorization_code",{"_index":1940,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["authorized",{"_index":3655,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":3761,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":3804,"title":{},"body":{"license.html":{}}}],["authors",{"_index":3672,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":1865,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auto",{"_index":1091,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["autodeletechannel",{"_index":1094,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["autodeletechannel.channelid",{"_index":1160,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["autodeletechannels",{"_index":1114,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{}}}],["automatic",{"_index":3725,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":3408,"title":{},"body":{"license.html":{}}}],["available",{"_index":3247,"title":{},"body":{"license.html":{}}}],["avatar",{"_index":902,"title":{},"body":{"classes/DiscordUser.html":{}}}],["avatarurl",{"_index":874,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/Guild.html":{},"controllers/GuildUserController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["average",{"_index":1471,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperchannellastmonth",{"_index":1455,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperchannellastmonth(guildid",{"_index":1469,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperdaylastmonth",{"_index":1456,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperdaylastmonth(guildid",{"_index":1497,"title":{},"body":{"injectables/GuildService.html":{}}}],["avg(subquery.messagecount",{"_index":1481,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecount",{"_index":1482,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecounts",{"_index":1553,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecounts[channelid",{"_index":1559,"title":{},"body":{"injectables/GuildService.html":{}}}],["avoid",{"_index":2291,"title":{},"body":{"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["await",{"_index":62,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":3210,"title":{},"body":{"license.html":{}}}],["axios",{"_index":1592,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":1915,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["b",{"_index":3373,"title":{},"body":{"license.html":{}}}],["b(\\d+d)(\\d+h)\\b|\\b(\\d+h)(\\d+m)\\b|\\b(\\d+d)(\\d+m)\\b|\\b(\\d+[dhm])\\b|\\b(\\d+d)(\\d+h)(\\d+m)/.test",{"_index":2899,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["b(\\d+d)(\\d+h)\\b|\\b(\\d+h)(\\d+m)\\b|\\b(\\d+d)(\\d+m)\\b|\\b(\\d+[dhm])\\b|\\b(\\d+d)(\\d+h)(\\d+m)/g",{"_index":2905,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["backers",{"_index":3107,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":1853,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["badrequestexception('no",{"_index":1870,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["ban",{"_index":2033,"title":{},"body":{"classes/LogEntry.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["banned",{"_index":2754,"title":{},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["banner",{"_index":904,"title":{},"body":{"classes/DiscordUser.html":{}}}],["bannerurl",{"_index":893,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["banuser",{"_index":2764,"title":{},"body":{"controllers/UserController.html":{}}}],["banuser(guildid",{"_index":2769,"title":{},"body":{"controllers/UserController.html":{}}}],["base64",{"_index":990,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["base64resolvable",{"_index":987,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["based",{"_index":582,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{},"license.html":{}}}],["baseguildtextchannel",{"_index":1515,"title":{},"body":{"injectables/GuildService.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["baseguildtextchannel).permissionoverwrites.delete",{"_index":2660,"title":{},"body":{"injectables/TasksService.html":{}}}],["baseinteraction",{"_index":2729,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["basic",{"_index":3410,"title":{},"body":{"license.html":{}}}],["bearbeiten",{"_index":792,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["bearer",{"_index":1960,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["become",{"_index":3246,"title":{},"body":{"license.html":{}}}],["becomes",{"_index":3264,"title":{},"body":{"license.html":{}}}],["before",{"_index":506,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"injectables/GuildMemberEvents.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["behalf",{"_index":3435,"title":{},"body":{"license.html":{}}}],["bei",{"_index":2704,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["being",{"_index":1536,"title":{},"body":{"injectables/GuildService.html":{},"license.html":{}}}],["bekommen",{"_index":967,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["believe",{"_index":3796,"title":{},"body":{"license.html":{}}}],["belongs",{"_index":1012,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["below",{"_index":1004,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["benefit",{"_index":3240,"title":{},"body":{"license.html":{}}}],["benötigt",{"_index":3060,"title":{},"body":{"miscellaneous/functions.html":{}}}],["besprechen",{"_index":2676,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["best",{"_index":3910,"title":{},"body":{"license.html":{}}}],["better",{"_index":3934,"title":{},"body":{"license.html":{}}}],["between",{"_index":3404,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":3521,"title":{},"body":{"license.html":{}}}],["bienenstich",{"_index":2508,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["bin",{"_index":949,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["binarytotextencoding",{"_index":2091,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["bis",{"_index":2701,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["bit",{"_index":1363,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["body",{"_index":564,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"license.html":{}}}],["boolean",{"_index":454,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bot",{"_index":831,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildService.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/initGuildCommand.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["bot/bot.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["bot_event_handler_name",{"_index":1064,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bot_event_key",{"_index":1063,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["botevent",{"_index":364,"title":{"interfaces/BotEvent.html":{}},"body":{"interfaces/BotEvent.html":{},"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["boteventdecorator",{"_index":1050,"title":{},"body":{"classes/Explorer.html":{}}}],["boteventdecorator(provider",{"_index":1056,"title":{},"body":{"classes/Explorer.html":{}}}],["both",{"_index":2896,"title":{},"body":{"classes/UserTimeOutDto.html":{},"license.html":{}}}],["botmodule",{"_index":104,"title":{"modules/BotModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BotModule.html":{},"modules.html":{},"overview.html":{}}}],["bots",{"_index":2415,"title":{},"body":{"injectables/SelfService.html":{}}}],["break",{"_index":2573,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{}}}],["browse",{"_index":3944,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3942,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":3058,"title":{},"body":{"miscellaneous/functions.html":{}}}],["building",{"_index":3075,"title":{},"body":{"index.html":{}}}],["business",{"_index":3808,"title":{},"body":{"license.html":{}}}],["button",{"_index":768,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"miscellaneous/functions.html":{}}}],["buttonbuilder",{"_index":746,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{}}}],["buttoninteraction",{"_index":731,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{}}}],["buttonstyle",{"_index":747,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{}}}],["bzw",{"_index":686,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["c",{"_index":3185,"title":{},"body":{"license.html":{}}}],["cake",{"_index":2550,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["cakes",{"_index":2501,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["call",{"_index":1953,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["callback",{"_index":3042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["called",{"_index":3043,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["canactivate",{"_index":861,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["canactivate(context",{"_index":865,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["cappuccino",{"_index":2513,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["cardinal",{"_index":1222,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["carry",{"_index":3496,"title":{},"body":{"license.html":{}}}],["case",{"_index":2559,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["cases",{"_index":3263,"title":{},"body":{"license.html":{}}}],["catch",{"_index":76,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"injectables/DmMessageHandler.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["catch(channelnottextbasedexception",{"_index":641,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["catch(exception",{"_index":643,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["catch(exceptionlist",{"_index":706,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["catch(guilddoesnotexistexception",{"_index":1223,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["catch(senddirectmessagetouserexception",{"_index":2444,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["catch(wrongargsexception",{"_index":710,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["catcherror",{"_index":1918,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["catcherror((error",{"_index":1950,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["category",{"_index":501,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SpecialCommand.html":{},"classes/UserToUser.html":{}}}],["categorychannel",{"_index":488,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["categorychannel'])@isoptional()@apiproperty({type",{"_index":1186,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["categorychannelresolvable",{"_index":487,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["categoryid",{"_index":2101,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["categoryid.replace('modrequest",{"_index":2131,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["cause",{"_index":3525,"title":{},"body":{"license.html":{}}}],["caution",{"_index":2829,"title":{},"body":{"controllers/UserController.html":{}}}],["caution'})@apiresponse({status",{"_index":2784,"title":{},"body":{"controllers/UserController.html":{}}}],["cease",{"_index":3697,"title":{},"body":{"license.html":{}}}],["certain",{"_index":3652,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":3707,"title":{},"body":{"license.html":{}}}],["change",{"_index":495,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"license.html":{}}}],["changed",{"_index":2467,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event",{"_index":1643,"title":{},"body":{"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{}}}],["changed.event.ts",{"_index":2458,"title":{},"body":{"classes/SettingsChanged.html":{},"coverage.html":{}}}],["changed.event.ts:20",{"_index":2463,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:6",{"_index":2461,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:7",{"_index":2462,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:8",{"_index":2460,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changing",{"_index":3197,"title":{},"body":{"license.html":{}}}],["channel",{"_index":418,"title":{"classes/Channel.html":{}},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildRestrictedChannelController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["channel'})@apibody({schema",{"_index":543,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.channelid",{"_index":1118,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildService.html":{}}}],["channel.clean",{"_index":622,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.clone",{"_index":1175,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.controller",{"_index":1144,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildRestrictedChannelModule.html":{}}}],["channel.controller.ts",{"_index":1093,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildRestrictedChannelController.html":{},"coverage.html":{}}}],["channel.controller.ts:24",{"_index":1102,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.controller.ts:34",{"_index":1100,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.controller.ts:54",{"_index":1104,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.delete",{"_index":1176,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.edit",{"_index":608,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.edit(channeldata",{"_index":600,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.guard",{"_index":1265,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["channel.guard.ts",{"_index":2961,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["channel.id",{"_index":2126,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["channel.istextbased",{"_index":2855,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["channel.lastmessage.fetch()).createdtimestamp",{"_index":2659,"title":{},"body":{"injectables/TasksService.html":{}}}],["channel.messages.fetch(msgid",{"_index":2856,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["channel.module",{"_index":1423,"title":{},"body":{"modules/GuildModule.html":{}}}],["channel.module.ts",{"_index":1143,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildRestrictedChannelModule.html":{}}}],["channel.parentid",{"_index":1405,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["channel.permissionoverwrites.delete('1011513775054143632",{"_index":2166,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["channel.permissionoverwrites.delete(ticket.userid",{"_index":2165,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["channel.requiredpoints",{"_index":1451,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.send",{"_index":1340,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/ModRequestFlow.html":{}}}],["channel.send(usermention(interaction.user.id",{"_index":2136,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["channel.service",{"_index":392,"title":{},"body":{"modules/BotModule.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{}}}],["channel.service.ts",{"_index":1148,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"coverage.html":{}}}],["channel.service.ts:10",{"_index":1151,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:14",{"_index":1443,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:17",{"_index":1154,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:22",{"_index":1156,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:40",{"_index":1152,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:44",{"_index":1441,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:52",{"_index":1446,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:8",{"_index":1439,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.setparent('1014456370860404756",{"_index":2167,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["channel.slowmode.${duration",{"_index":605,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.type",{"_index":613,"title":{},"body":{"controllers/ChannelController.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["channel/channel.controller",{"_index":2204,"title":{},"body":{"modules/ModerationModule.html":{}}}],["channel/dto/auto",{"_index":1122,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"coverage.html":{}}}],["channel/guild",{"_index":391,"title":{},"body":{"modules/BotModule.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["channel_created",{"_index":2027,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channel_deleted",{"_index":2028,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channel_id",{"_index":1464,"title":{},"body":{"injectables/GuildService.html":{}}}],["channel_updated",{"_index":2029,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channelcleaned",{"_index":503,"title":{"classes/ChannelCleaned.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["channelcleaned(guildid",{"_index":623,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelcontroller",{"_index":532,"title":{"controllers/ChannelController.html":{}},"body":{"controllers/ChannelController.html":{},"modules/ModerationModule.html":{},"coverage.html":{}}}],["channeldata",{"_index":546,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelid",{"_index":507,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/RestrictedChannelDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["channelidguard",{"_index":2962,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["channelidguardmixin",{"_index":3973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["channelname",{"_index":630,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["channelnottextbasedexception",{"_index":579,"title":{"classes/ChannelNotTextBasedException.html":{}},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["channelnottextbasedexception(channel.name",{"_index":621,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelnottextbasedexceptionfilter",{"_index":642,"title":{"classes/ChannelNotTextBasedExceptionFilter.html":{}},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["channelrows",{"_index":3168,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channels",{"_index":559,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/TasksService.html":{}}}],["channels.dto",{"_index":1109,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["channels.dto.ts",{"_index":1123,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["channels.dto.ts:10",{"_index":1126,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["channels.dto.ts:12",{"_index":2318,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["channels.dto.ts:16",{"_index":1133,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["channels.dto.ts:17",{"_index":2319,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["channels.fetch('1195024829544411168",{"_index":822,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["channels.fetch(ticket.ticketid",{"_index":2656,"title":{},"body":{"injectables/TasksService.html":{}}}],["channels.fetch(ticketid",{"_index":2164,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["channels.foreach((channel",{"_index":1565,"title":{},"body":{"injectables/GuildService.html":{}}}],["channelselectmenubuilder",{"_index":3130,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channelselectmenuinteraction",{"_index":3127,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channeltype",{"_index":486,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.guildannouncement",{"_index":497,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["channeltype.guildtext",{"_index":496,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.privatethread",{"_index":615,"title":{},"body":{"controllers/ChannelController.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.publicthread",{"_index":614,"title":{},"body":{"controllers/ChannelController.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["characterized",{"_index":3624,"title":{},"body":{"license.html":{}}}],["charge",{"_index":3222,"title":{},"body":{"license.html":{}}}],["check",{"_index":1344,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["checkactiveusers",{"_index":2598,"title":{},"body":{"injectables/TasksService.html":{}}}],["checked",{"_index":2617,"title":{},"body":{"injectables/TasksService.html":{}}}],["checkifpersonwasverifiedbefore",{"_index":1231,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["checkifpersonwasverifiedbefore(reaction",{"_index":1241,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["checklimits(message",{"_index":1410,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["checkproviders",{"_index":1052,"title":{},"body":{"classes/Explorer.html":{}}}],["checkproviders(providers",{"_index":1059,"title":{},"body":{"classes/Explorer.html":{}}}],["checks",{"_index":2420,"title":{},"body":{"injectables/SelfService.html":{},"injectables/TasksService.html":{}}}],["checktimeouts",{"_index":2599,"title":{},"body":{"injectables/TasksService.html":{}}}],["children",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["choice",{"_index":2936,"title":{},"body":{"classes/UserToUser.html":{}}}],["choice(commandtoexecute",{"_index":2943,"title":{},"body":{"classes/UserToUser.html":{}}}],["choice(commandtoexecute)@param({description",{"_index":2932,"title":{},"body":{"classes/UserToUser.html":{}}}],["choiceoptions",{"_index":2937,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["choose",{"_index":3061,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["chooserandomcoffee",{"_index":2504,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["chooserandomcoffee(interaction",{"_index":2535,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["choosing",{"_index":3861,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":3441,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":3450,"title":{},"body":{"license.html":{}}}],["civil",{"_index":3904,"title":{},"body":{"license.html":{}}}],["claim",{"_index":3751,"title":{},"body":{"license.html":{}}}],["claims",{"_index":3763,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddRoleCommand.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["classdecorator",{"_index":3047,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"overview.html":{}}}],["clean",{"_index":542,"title":{},"body":{"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"miscellaneous/functions.html":{}}}],["cleanchannel",{"_index":535,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleanchannel(guildid",{"_index":540,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleaning",{"_index":612,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleantextchannel",{"_index":575,"title":{},"body":{"controllers/ChannelController.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["cleantextchannel(channel",{"_index":3037,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cleanwfpmember",{"_index":406,"title":{"classes/CleanWfpMember.html":{}},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["cleanwfpmembers",{"_index":1457,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["cleanwfpmembers(guildid",{"_index":1499,"title":{},"body":{"injectables/GuildService.html":{}}}],["clear",{"_index":3563,"title":{},"body":{"license.html":{}}}],["click",{"_index":2849,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["client",{"_index":14,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{}}}],["client.setmaxlisteners(30",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["client_id",{"_index":1935,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["client_secret",{"_index":1937,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["clientevents",{"_index":370,"title":{},"body":{"interfaces/BotEvent.html":{},"classes/CommunityQuestionCommand.html":{}}}],["clientevents['interactioncreate",{"_index":810,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["clientevents[keyof",{"_index":373,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["closed",{"_index":2162,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["closely",{"_index":3900,"title":{},"body":{"license.html":{}}}],["closestaletickets",{"_index":2600,"title":{},"body":{"injectables/TasksService.html":{}}}],["cls",{"_index":3067,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule",{"_index":310,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule_exports",{"_index":312,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule_providers",{"_index":311,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_botmodule",{"_index":374,"title":{},"body":{"modules/BotModule.html":{},"overview.html":{}}}],["cluster_botmodule_providers",{"_index":375,"title":{},"body":{"modules/BotModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule",{"_index":1138,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule_exports",{"_index":1140,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule_providers",{"_index":1139,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildmodule",{"_index":1415,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_exports",{"_index":1417,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_imports",{"_index":1416,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_providers",{"_index":1418,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule",{"_index":1433,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule_exports",{"_index":1434,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule_providers",{"_index":1435,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{}}}],["cluster_guildsettingsmodule",{"_index":1599,"title":{},"body":{"modules/GuildSettingsModule.html":{},"overview.html":{}}}],["cluster_guildsettingsmodule_exports",{"_index":1601,"title":{},"body":{"modules/GuildSettingsModule.html":{},"overview.html":{}}}],["cluster_guildsettingsmodule_providers",{"_index":1600,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["cluster_guildusermodule",{"_index":1702,"title":{},"body":{"modules/GuildUserModule.html":{},"overview.html":{}}}],["cluster_guildusermodule_exports",{"_index":1703,"title":{},"body":{"modules/GuildUserModule.html":{},"overview.html":{}}}],["cluster_guildusermodule_providers",{"_index":1704,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["cluster_jwtauthmodule",{"_index":1877,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_jwtauthmodule_exports",{"_index":1879,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_jwtauthmodule_providers",{"_index":1878,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_moderationmodule",{"_index":2196,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_moderationmodule_imports",{"_index":2197,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_moderationmodule_providers",{"_index":2198,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_tasksmodule",{"_index":2583,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":2584,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_usermodule",{"_index":2861,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2862,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2863,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":1847,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"license.html":{}}}],["coffee",{"_index":2549,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["coffees",{"_index":2502,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["collect",{"_index":3831,"title":{},"body":{"license.html":{}}}],["color",{"_index":900,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["colorresolvable",{"_index":979,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["colors",{"_index":659,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{}}}],["combine",{"_index":3842,"title":{},"body":{"license.html":{}}}],["combined",{"_index":3515,"title":{},"body":{"license.html":{}}}],["come",{"_index":3255,"title":{},"body":{"license.html":{}}}],["comes",{"_index":2384,"title":{},"body":{"controllers/SelfController.html":{},"license.html":{}}}],["command",{"_index":32,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["commandinteraction",{"_index":25,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{}}}],["commands",{"_index":1793,"title":{},"body":{"guards/HasRequiredRank.html":{},"license.html":{}}}],["commands/clean",{"_index":407,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/community",{"_index":394,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/init",{"_index":397,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/mod",{"_index":388,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/ping.command",{"_index":381,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/purge",{"_index":416,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/special.command",{"_index":411,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/ticket",{"_index":413,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/timeout.command",{"_index":385,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/user",{"_index":400,"title":{},"body":{"modules/BotModule.html":{}}}],["commandtoexecute",{"_index":2939,"title":{},"body":{"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commandvalidationfilter",{"_index":703,"title":{"classes/CommandValidationFilter.html":{}},"body":{"classes/CommandValidationFilter.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["commercial",{"_index":3605,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":3778,"title":{},"body":{"license.html":{}}}],["common",{"_index":3599,"title":{},"body":{"license.html":{}}}],["communication",{"_index":3402,"title":{},"body":{"license.html":{}}}],["communicationdisableduntil",{"_index":875,"title":{},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{}}}],["community",{"_index":763,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"license.html":{},"properties.html":{}}}],["communityquestioncommand",{"_index":393,"title":{"classes/CommunityQuestionCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["communityquestiondto",{"_index":736,"title":{"classes/CommunityQuestionDto.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["communityquestionformdto",{"_index":739,"title":{"classes/CommunityQuestionFormDto.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["compilation",{"_index":3510,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":3520,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":3813,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":3381,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":3730,"title":{},"body":{"license.html":{}}}],["comply",{"_index":3432,"title":{},"body":{"license.html":{}}}],["component",{"_index":3372,"title":{},"body":{"license.html":{}}}],["components",{"_index":776,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["componenttype",{"_index":2095,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["componenttype.stringselect",{"_index":2189,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["computer",{"_index":3319,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":3850,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":3807,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":3282,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["configservice.get('jwt_access_secret",{"_index":1979,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('jwt_issuer",{"_index":1980,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":2314,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["configservice.get('token",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":3169,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["conflictexception",{"_index":1105,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["confused",{"_index":2865,"title":{},"body":{"modules/UserModule.html":{}}}],["connection",{"_index":3798,"title":{},"body":{"license.html":{}}}],["consequence",{"_index":3718,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":3882,"title":{},"body":{"license.html":{}}}],["considered",{"_index":3685,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3770,"title":{},"body":{"license.html":{}}}],["console.error(e",{"_index":1294,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["console.log(e",{"_index":2662,"title":{},"body":{"injectables/TasksService.html":{}}}],["console.log(outcome",{"_index":677,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["conspicuously",{"_index":3482,"title":{},"body":{"license.html":{}}}],["const",{"_index":60,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":3998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constitutes",{"_index":3420,"title":{},"body":{"license.html":{}}}],["constructchanneldeletejobs",{"_index":1149,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["constructed",{"_index":3066,"title":{},"body":{"miscellaneous/functions.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["constructor(@inject(guildservice",{"_index":670,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["constructor(@inject(prismaservice",{"_index":332,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["constructor(@inject(selfservice",{"_index":2391,"title":{},"body":{"controllers/SelfController.html":{}}}],["constructor(channelname",{"_index":628,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["constructor(client",{"_index":13,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["constructor(configservice",{"_index":1967,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["constructor(database",{"_index":1460,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{}}}],["constructor(discord",{"_index":2410,"title":{},"body":{"injectables/SelfService.html":{}}}],["constructor(eventemitter",{"_index":205,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(guildid",{"_index":510,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["constructor(guildservice",{"_index":655,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["constructor(guilduserservice",{"_index":1372,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["constructor(jwtservice",{"_index":1902,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["constructor(prismaserver",{"_index":3121,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["constructor(prismaservice",{"_index":321,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["constructor(private",{"_index":1593,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["constructor(reflector",{"_index":1796,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["constructor(settingsservice",{"_index":1835,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["constructor(userid",{"_index":2747,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["construed",{"_index":3818,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":3583,"title":{},"body":{"license.html":{}}}],["contact",{"_index":785,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"license.html":{}}}],["contain",{"_index":3814,"title":{},"body":{"license.html":{}}}],["containing",{"_index":3665,"title":{},"body":{"license.html":{}}}],["contains",{"_index":1495,"title":{},"body":{"injectables/GuildService.html":{},"classes/LogEntry.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["content",{"_index":777,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildSettingsService.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["contents",{"_index":3774,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":3049,"title":{},"body":{"miscellaneous/functions.html":{}}}],["context",{"_index":640,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"license.html":{}}}],["context.getargbyindex(0",{"_index":866,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getargbyindex(1",{"_index":2298,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["context.getclass",{"_index":1812,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["context.gethandler",{"_index":1811,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["contextmenucommandinteraction",{"_index":2452,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["continue",{"_index":3630,"title":{},"body":{"license.html":{}}}],["continued",{"_index":3614,"title":{},"body":{"license.html":{}}}],["contractual",{"_index":3682,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":3825,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":3213,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3760,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":3762,"title":{},"body":{"license.html":{}}}],["control",{"_index":3387,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3765,"title":{},"body":{"license.html":{}}}],["controller",{"_index":81,"title":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('/channel",{"_index":585,"title":{},"body":{"controllers/ChannelController.html":{}}}],["controller('/role",{"_index":2345,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller('/user",{"_index":2792,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('/user/self",{"_index":2390,"title":{},"body":{"controllers/SelfController.html":{}}}],["controller('auth",{"_index":1862,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["controller('autodeletechannel",{"_index":1111,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["controller('guild",{"_index":1432,"title":{},"body":{"controllers/GuildRestrictedChannelController.html":{}}}],["controllers",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convenient",{"_index":3337,"title":{},"body":{"license.html":{}}}],["convert",{"_index":1286,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/functions.html":{}}}],["convey",{"_index":3325,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":3802,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":3625,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":3331,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":3681,"title":{},"body":{"license.html":{}}}],["cooperation",{"_index":3206,"title":{},"body":{"license.html":{}}}],["copies",{"_index":3195,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3192,"title":{},"body":{"license.html":{}}}],["copying",{"_index":3283,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":3200,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3184,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":3294,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":3438,"title":{},"body":{"license.html":{}}}],["correction",{"_index":3877,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":3383,"title":{},"body":{"license.html":{}}}],["cost",{"_index":3547,"title":{},"body":{"license.html":{}}}],["couldn't",{"_index":698,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["count",{"_index":691,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["count(m.messageid",{"_index":1479,"title":{},"body":{"injectables/GuildService.html":{}}}],["count(messageid",{"_index":1485,"title":{},"body":{"injectables/GuildService.html":{}}}],["counterclaim",{"_index":3752,"title":{},"body":{"license.html":{}}}],["countries",{"_index":3323,"title":{},"body":{"license.html":{}}}],["country",{"_index":3793,"title":{},"body":{"license.html":{}}}],["court",{"_index":3824,"title":{},"body":{"license.html":{}}}],["courts",{"_index":3899,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":3782,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":2944,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["covered",{"_index":3308,"title":{},"body":{"license.html":{}}}],["craft",{"_index":2442,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["create",{"_index":319,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["create(entry",{"_index":323,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["create/dm",{"_index":930,"title":{},"body":{"injectables/DmMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["create/guild",{"_index":1369,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["create/mod",{"_index":1427,"title":{},"body":{"modules/GuildModule.html":{},"classes/ModRequestFlow.html":{},"coverage.html":{}}}],["createautodeletechannel",{"_index":1095,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["createautodeletechannel(guildid",{"_index":1098,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["created",{"_index":433,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{}}}],["created'})@apiresponse({status",{"_index":2328,"title":{},"body":{"controllers/RoleController.html":{}}}],["createdat",{"_index":276,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{}}}],["createdfrom",{"_index":287,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["createdtill",{"_index":288,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["createdtimestamp",{"_index":420,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["createdynamicscheduledjob",{"_index":2601,"title":{},"body":{"injectables/TasksService.html":{}}}],["createdynamicscheduledjob(joboptions",{"_index":2619,"title":{},"body":{"injectables/TasksService.html":{}}}],["createhash",{"_index":2092,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["createhash('sha256",{"_index":2105,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["createparamdecorator",{"_index":3977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrole",{"_index":2321,"title":{},"body":{"controllers/RoleController.html":{}}}],["createrole(guildid",{"_index":2325,"title":{},"body":{"controllers/RoleController.html":{}}}],["createticket",{"_index":3991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creation/execution",{"_index":2588,"title":{},"body":{"modules/TasksModule.html":{}}}],["criterion",{"_index":3350,"title":{},"body":{"license.html":{}}}],["cron",{"_index":1131,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"injectables/TasksService.html":{}}}],["cron('*/5",{"_index":2606,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron('0",{"_index":2603,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjob",{"_index":2625,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjobparams",{"_index":2620,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjobs",{"_index":2623,"title":{},"body":{"injectables/TasksService.html":{}}}],["crontime",{"_index":1167,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["cross",{"_index":3750,"title":{},"body":{"license.html":{}}}],["crypto",{"_index":2093,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["ctx",{"_index":645,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getresponse",{"_index":647,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cure",{"_index":3710,"title":{},"body":{"license.html":{}}}],["curr",{"_index":1546,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr._count?.messageid",{"_index":1549,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.channelid.tostring",{"_index":1547,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.createdat.toisostring().split('t')[0",{"_index":1561,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.userid.tostring",{"_index":1548,"title":{},"body":{"injectables/GuildService.html":{}}}],["current",{"_index":1800,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/SelfController.html":{}}}],["customarily",{"_index":3537,"title":{},"body":{"license.html":{}}}],["customary",{"_index":3839,"title":{},"body":{"license.html":{}}}],["customer",{"_index":3543,"title":{},"body":{"license.html":{}}}],["d",{"_index":2898,"title":{},"body":{"classes/UserTimeOutDto.html":{},"license.html":{}}}],["d+)|\\d",{"_index":1128,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["damages",{"_index":3880,"title":{},"body":{"license.html":{}}}],["dann",{"_index":2678,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["data",{"_index":272,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"classes/EditRoleData.html":{},"controllers/GuildController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["data.roles",{"_index":2740,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["database",{"_index":15,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/SelfService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["date",{"_index":294,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["date((await",{"_index":2658,"title":{},"body":{"injectables/TasksService.html":{}}}],["date().getdate",{"_index":1521,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["date().gettime",{"_index":2824,"title":{},"body":{"controllers/UserController.html":{}}}],["date().getutcdate",{"_index":2108,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["date().setdate(new",{"_index":1520,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["date(dto.duration).gettime",{"_index":2691,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["date(filter.createdfrom).toisostring",{"_index":347,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["date(filter.createdtill).toisostring",{"_index":350,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["date(member.joinedtimestamp",{"_index":1526,"title":{},"body":{"injectables/GuildService.html":{}}}],["date(message.createdtimestamp",{"_index":1393,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["date(new",{"_index":1519,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["date.now",{"_index":2646,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["date_sub(now",{"_index":1486,"title":{},"body":{"injectables/GuildService.html":{}}}],["dauer",{"_index":2918,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["day",{"_index":1202,"title":{},"body":{"controllers/GuildController.html":{},"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["days",{"_index":1474,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["dbuser",{"_index":1354,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["dbuser.guildid",{"_index":1361,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["dbuser.userid",{"_index":2647,"title":{},"body":{"injectables/TasksService.html":{}}}],["de",{"_index":2063,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TargetUser.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["dearv8protectmefromparameterswithnonevalue",{"_index":2982,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dearv8protectmefromparameterswithnonevalue(target",{"_index":3046,"title":{},"body":{"miscellaneous/functions.html":{}}}],["december",{"_index":3463,"title":{},"body":{"license.html":{}}}],["decide",{"_index":3858,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declining",{"_index":3673,"title":{},"body":{"license.html":{}}}],["decorator",{"_index":3987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":26,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsDto.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["decorators/bot",{"_index":1065,"title":{},"body":{"classes/Explorer.html":{}}}],["decorators/requires",{"_index":1807,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["deemed",{"_index":3452,"title":{},"body":{"license.html":{}}}],["default",{"_index":214,"title":{},"body":{"injectables/AppService.html":{},"interfaces/BotEvent.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/PurgeCommand.html":{},"classes/RoleResponse.html":{},"classes/SpecialCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["defaultmemberpermissions",{"_index":45,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["defective",{"_index":3872,"title":{},"body":{"license.html":{}}}],["defending",{"_index":3241,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":3821,"title":{},"body":{"license.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["definition",{"_index":3393,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3287,"title":{},"body":{"license.html":{}}}],["deine",{"_index":2138,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["delete",{"_index":1092,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"classes/TargetUser.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["delete(':roleid",{"_index":2358,"title":{},"body":{"controllers/RoleController.html":{}}}],["delete(':roleid')@apioperation({summary",{"_index":2332,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleteatcron",{"_index":1125,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["deletechannel.channelid",{"_index":1170,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deletechannel.deleteatcron",{"_index":1168,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deletechannel.guildid",{"_index":1171,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deleted",{"_index":531,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/RoleController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["deleted'})@apiresponse({status",{"_index":2333,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleteone",{"_index":1712,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["deleteone(userid",{"_index":1732,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["deleterole",{"_index":2322,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleterole(guildid",{"_index":2330,"title":{},"body":{"controllers/RoleController.html":{}}}],["deletes",{"_index":3040,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deleting",{"_index":1172,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["den",{"_index":963,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["denied",{"_index":3631,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":3779,"title":{},"body":{"license.html":{}}}],["deny",{"_index":2115,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["dependencies",{"_index":95,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":911,"title":{},"body":{"classes/DiscordUser.html":{}}}],["deprive",{"_index":3788,"title":{},"body":{"license.html":{}}}],["der",{"_index":2578,"title":{},"body":{"classes/TargetUser.html":{},"classes/UserTimeOutDto.html":{}}}],["des",{"_index":2919,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["desc",{"_index":357,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{}}}],["describe",{"_index":2006,"title":{},"body":{"classes/LogEntry.html":{}}}],["description",{"_index":489,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"properties.html":{}}}],["descriptionlocalizations",{"_index":2055,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TargetUser.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["designated",{"_index":3555,"title":{},"body":{"license.html":{}}}],["designed",{"_index":3204,"title":{},"body":{"license.html":{}}}],["detail",{"_index":3847,"title":{},"body":{"license.html":{}}}],["details",{"_index":3924,"title":{},"body":{"license.html":{}}}],["determined",{"_index":3041,"title":{},"body":{"miscellaneous/functions.html":{}}}],["determining",{"_index":3594,"title":{},"body":{"license.html":{}}}],["develop",{"_index":3908,"title":{},"body":{"license.html":{}}}],["developers",{"_index":3228,"title":{},"body":{"license.html":{}}}],["development",{"_index":3087,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":2245,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dich",{"_index":2707,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["die",{"_index":683,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["diese",{"_index":2239,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["differ",{"_index":3846,"title":{},"body":{"license.html":{}}}],["different",{"_index":1998,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["differently",{"_index":3660,"title":{},"body":{"license.html":{}}}],["digest('hex",{"_index":2110,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["diplomatenkaffee",{"_index":2514,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["dir",{"_index":959,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["direct",{"_index":2438,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["direction",{"_index":3436,"title":{},"body":{"license.html":{}}}],["directions",{"_index":3564,"title":{},"body":{"license.html":{}}}],["directly",{"_index":3057,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["disabled",{"_index":527,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["disclaim",{"_index":3474,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":3862,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":3657,"title":{},"body":{"license.html":{}}}],["discord",{"_index":35,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"injectables/DmMessageHandler.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"properties.html":{}}}],["discord.js",{"_index":39,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["discordapierror",{"_index":938,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["discordapierror).message",{"_index":971,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["discordclientoptions",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["discordexecutioncontext",{"_index":855,"title":{"interfaces/DiscordExecutionContext.html":{}},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["discordguildmember",{"_index":871,"title":{"classes/DiscordGuildMember.html":{}},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["discordjs",{"_index":1273,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"properties.html":{}}}],["discordmodule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["discordmodule.forfeature",{"_index":317,"title":{},"body":{"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["discordmodule.forrootasync",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["discorduser",{"_index":890,"title":{"classes/DiscordUser.html":{}},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["discorduser.avatarurl",{"_index":2426,"title":{},"body":{"injectables/SelfService.html":{}}}],["discorduser.fetch",{"_index":2300,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["discorduser.globalname",{"_index":2427,"title":{},"body":{"injectables/SelfService.html":{}}}],["discorduser.id",{"_index":2305,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/SelfService.html":{}}}],["discorduser.partial",{"_index":2299,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["discorduser.roles.add(role.id",{"_index":1366,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser.roles.cache.has('1121823930085285938",{"_index":1360,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser.roles.remove('1121823930085285938",{"_index":1367,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser['id",{"_index":886,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["discriminator",{"_index":894,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["discriminatory",{"_index":3805,"title":{},"body":{"license.html":{}}}],["display",{"_index":913,"title":{},"body":{"classes/DiscordUser.html":{},"license.html":{}}}],["displayavatarurl",{"_index":895,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["displayed",{"_index":840,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"license.html":{}}}],["displayname",{"_index":876,"title":{},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{}}}],["displays",{"_index":3333,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":3851,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":3193,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3921,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":3809,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3284,"title":{},"body":{"license.html":{}}}],["dm",{"_index":2440,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["dm.guard",{"_index":941,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dm.guard.ts",{"_index":2049,"title":{},"body":{"guards/MessageIsDmGuard.html":{},"coverage.html":{}}}],["dm.guard.ts:7",{"_index":2050,"title":{},"body":{"guards/MessageIsDmGuard.html":{}}}],["dmmessagehandler",{"_index":928,"title":{"injectables/DmMessageHandler.html":{}},"body":{"injectables/DmMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["dmmessagetomodteam",{"_index":932,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dmmessagetomodteam(message",{"_index":933,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dmpermission",{"_index":47,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{}}}],["docs",{"_index":1024,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["document",{"_index":3196,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":1803,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{}}}],["documented",{"_index":3639,"title":{},"body":{"license.html":{}}}],["doe",{"_index":923,"title":{},"body":{"classes/DiscordUser.html":{}}}],["done",{"_index":2224,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/initGuildCommand.html":{}}}],["dont",{"_index":1508,"title":{},"body":{"injectables/GuildService.html":{}}}],["doubtful",{"_index":3595,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":3727,"title":{},"body":{"license.html":{}}}],["dry",{"_index":1531,"title":{},"body":{"injectables/GuildService.html":{}}}],["dryrun",{"_index":1500,"title":{},"body":{"injectables/GuildService.html":{}}}],["dto",{"_index":2209,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"injectables/SelfService.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["dto.duration",{"_index":2702,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["dto.message",{"_index":2220,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dto.reason",{"_index":2693,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["dto.replytomessage",{"_index":2218,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dto/audit",{"_index":239,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["dto/auto",{"_index":1108,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["dto/channel",{"_index":574,"title":{},"body":{"controllers/ChannelController.html":{}}}],["dto/commmunity",{"_index":752,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["dto/community",{"_index":760,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["dto/guild",{"_index":2791,"title":{},"body":{"controllers/UserController.html":{}}}],["dto/log",{"_index":244,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["dto/mod",{"_index":2213,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dto/role",{"_index":2342,"title":{},"body":{"controllers/RoleController.html":{}}}],["dto/settings.dto",{"_index":1590,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["dto/user",{"_index":2542,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["dto/user.dto",{"_index":2281,"title":{},"body":{"classes/PurgeCommand.html":{}}}],["du",{"_index":2238,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TargetUser.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserToUser.html":{}}}],["durable",{"_index":3536,"title":{},"body":{"license.html":{}}}],["duration",{"_index":603,"title":{},"body":{"controllers/ChannelController.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["duration).getmilliseconds",{"_index":2827,"title":{},"body":{"controllers/UserController.html":{}}}],["dwelling",{"_index":3593,"title":{},"body":{"license.html":{}}}],["dynamically",{"_index":3397,"title":{},"body":{"license.html":{}}}],["e",{"_index":969,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"license.html":{}}}],["e.g",{"_index":1826,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["e.message",{"_index":2719,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["e.name",{"_index":2718,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["e2e",{"_index":3097,"title":{},"body":{"index.html":{}}}],["each",{"_index":1496,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["earlier",{"_index":3307,"title":{},"body":{"license.html":{}}}],["early",{"_index":1530,"title":{},"body":{"injectables/GuildService.html":{}}}],["edit",{"_index":548,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editchannel",{"_index":536,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editchannel(guildid",{"_index":545,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editroledata",{"_index":972,"title":{"classes/EditRoleData.html":{}},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{}}}],["editsettings",{"_index":1605,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["editsettings(guildid",{"_index":1616,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["effect",{"_index":3896,"title":{},"body":{"license.html":{}}}],["effected",{"_index":3471,"title":{},"body":{"license.html":{}}}],["effective",{"_index":3453,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":3915,"title":{},"body":{"license.html":{}}}],["efficient",{"_index":3076,"title":{},"body":{"index.html":{}}}],["efforts",{"_index":3744,"title":{},"body":{"license.html":{}}}],["ein",{"_index":952,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["eine",{"_index":2179,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einen",{"_index":2185,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einer",{"_index":2933,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einspänner",{"_index":2515,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["eiskaffee",{"_index":2516,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["electronic",{"_index":3925,"title":{},"body":{"license.html":{}}}],["embed",{"_index":678,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embed.addfields",{"_index":2716,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["embedbuilder",{"_index":660,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embeds",{"_index":702,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embodied",{"_index":3531,"title":{},"body":{"license.html":{}}}],["emitter",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["emoji",{"_index":1400,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["emojiresolvable",{"_index":988,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["emote.guard",{"_index":1267,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["emote.guard.ts",{"_index":2963,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["emotes",{"_index":3992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emotes.includes((reaction",{"_index":3994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["employer",{"_index":3936,"title":{},"body":{"license.html":{}}}],["en",{"_index":2062,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TargetUser.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["enable",{"_index":3375,"title":{},"body":{"license.html":{}}}],["enabled",{"_index":520,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["enables",{"_index":3327,"title":{},"body":{"license.html":{}}}],["enableshutdownhooks",{"_index":2264,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":2266,"title":{},"body":{"injectables/PrismaService.html":{}}}],["encoded",{"_index":991,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["encouraged",{"_index":3251,"title":{},"body":{"license.html":{}}}],["end",{"_index":3907,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":2378,"title":{},"body":{"controllers/SelfController.html":{}}}],["enforce",{"_index":3780,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":3477,"title":{},"body":{"license.html":{}}}],["ensure",{"_index":3205,"title":{},"body":{"license.html":{}}}],["enter",{"_index":2730,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["entered",{"_index":3815,"title":{},"body":{"license.html":{}}}],["entire",{"_index":3501,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":3833,"title":{},"body":{"license.html":{}}}],["entity",{"_index":3731,"title":{},"body":{"license.html":{}}}],["entry",{"_index":326,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.action",{"_index":334,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.createdat",{"_index":343,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.dto",{"_index":245,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["entry.dto.ts",{"_index":2039,"title":{},"body":{"classes/LogEntryDto.html":{},"coverage.html":{}}}],["entry.dto.ts:11",{"_index":2040,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:13",{"_index":2041,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:15",{"_index":2042,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:17",{"_index":2043,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:19",{"_index":2044,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:21",{"_index":2045,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.extrainfo",{"_index":341,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.guildid",{"_index":335,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.invokerid",{"_index":336,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.reason",{"_index":337,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.targetid",{"_index":338,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.targettype",{"_index":339,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["enum",{"_index":290,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/functions.html":{}}}],["ephemeral",{"_index":673,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["equivalent",{"_index":3423,"title":{},"body":{"license.html":{}}}],["erfolgreich",{"_index":2140,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["err",{"_index":2225,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TimeOutCommand.html":{}}}],["error",{"_index":70,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/Explorer.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["error('timeout",{"_index":2698,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.length",{"_index":2697,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.map((e",{"_index":2717,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.message",{"_index":1962,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["error.push(err",{"_index":2694,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.response.data.error",{"_index":1955,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["erstelle",{"_index":2679,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["espresso",{"_index":2517,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["essential",{"_index":3377,"title":{},"body":{"license.html":{}}}],["etc",{"_index":2629,"title":{},"body":{"injectables/TasksService.html":{}}}],["etwas",{"_index":2942,"title":{},"body":{"classes/UserToUser.html":{}}}],["europe/berlin",{"_index":1182,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{}}}],["even",{"_index":3892,"title":{},"body":{"license.html":{}}}],["event",{"_index":212,"title":{},"body":{"injectables/AppService.html":{},"injectables/GuildService.html":{},"classes/LogEntry.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["event.decorator",{"_index":1066,"title":{},"body":{"classes/Explorer.html":{}}}],["event.decorator.ts",{"_index":2959,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["event.interface.ts",{"_index":367,"title":{},"body":{"interfaces/BotEvent.html":{},"coverage.html":{}}}],["event.interface.ts:4",{"_index":371,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["event.toformattedlog(this.logger",{"_index":223,"title":{},"body":{"injectables/AppService.html":{}}}],["eventargs",{"_index":740,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["eventemitter",{"_index":208,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["eventemitter2",{"_index":206,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["eventemittermodule",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["eventparams",{"_index":744,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["events",{"_index":1037,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["events/channel.event",{"_index":578,"title":{},"body":{"controllers/ChannelController.html":{}}}],["events/guild",{"_index":1430,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/interaction",{"_index":1426,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/message",{"_index":1424,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/settings",{"_index":1642,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["events/user.events",{"_index":2790,"title":{},"body":{"controllers/UserController.html":{}}}],["eventtolog",{"_index":218,"title":{"interfaces/EventToLog.html":{}},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["eventtype",{"_index":2459,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["everyday",{"_index":2613,"title":{},"body":{"injectables/TasksService.html":{}}}],["everyone",{"_index":1031,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["exact",{"_index":3306,"title":{},"body":{"license.html":{}}}],["example",{"_index":434,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["examples",{"_index":982,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["except",{"_index":3317,"title":{},"body":{"license.html":{}}}],["exception",{"_index":583,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{}}}],["exception.constraints[key",{"_index":721,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exception.message",{"_index":649,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exception.property",{"_index":715,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exception.ts",{"_index":624,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"coverage.html":{}}}],["exception.ts:12",{"_index":629,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/GuildDoesNotExistException.html":{},"classes/SendDirectMessageToUserException.html":{}}}],["exception.ts:23",{"_index":651,"title":{},"body":{"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["exception.ts:25",{"_index":1226,"title":{},"body":{"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exceptionfilter",{"_index":631,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exceptionlist",{"_index":709,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exceptionlist.geterror().map((exception",{"_index":712,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exceptions",{"_index":3644,"title":{},"body":{"license.html":{}}}],["excluded",{"_index":3581,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":3819,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":3917,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3771,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":3430,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":3826,"title":{},"body":{"license.html":{}}}],["executable",{"_index":3365,"title":{},"body":{"license.html":{}}}],["execute",{"_index":3612,"title":{},"body":{"license.html":{}}}],["executing",{"_index":3318,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":858,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":3745,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3472,"title":{},"body":{"license.html":{}}}],["exist",{"_index":1219,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["exists",{"_index":1120,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["expected",{"_index":3603,"title":{},"body":{"license.html":{}}}],["expects",{"_index":3602,"title":{},"body":{"license.html":{}}}],["expensiveeeeee",{"_index":2782,"title":{},"body":{"controllers/UserController.html":{}}}],["expiresin",{"_index":1897,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["explicitly",{"_index":3416,"title":{},"body":{"license.html":{}}}],["explorer",{"_index":1048,"title":{"classes/Explorer.html":{}},"body":{"classes/Explorer.html":{},"coverage.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["exports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"classes/EditRoleData.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"classes/RoleResponse.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exposes",{"_index":2596,"title":{},"body":{"injectables/TasksService.html":{}}}],["express",{"_index":635,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":3864,"title":{},"body":{"license.html":{}}}],["expression",{"_index":1136,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["expression'})@apiproperty({type",{"_index":1132,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["expressly",{"_index":3692,"title":{},"body":{"license.html":{}}}],["extend",{"_index":3790,"title":{},"body":{"license.html":{}}}],["extended",{"_index":3019,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":627,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["extensions",{"_index":3514,"title":{},"body":{"license.html":{}}}],["extent",{"_index":3336,"title":{},"body":{"license.html":{}}}],["externalcontextcreator",{"_index":1054,"title":{},"body":{"classes/Explorer.html":{}}}],["externaldocs",{"_index":992,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["extractjwt",{"_index":1971,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1976,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["extractjwt.fromheader('refresh_token",{"_index":2313,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["extrainfo",{"_index":340,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/LogEntry.html":{}}}],["f",{"_index":3679,"title":{},"body":{"license.html":{}}}],["facilitating",{"_index":3840,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":3431,"title":{},"body":{"license.html":{}}}],["fail",{"_index":1277,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["failed",{"_index":717,"title":{},"body":{"classes/CommandValidationFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/JwtAuthService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["failifnotexists",{"_index":2223,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["failonlogin",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["fails",{"_index":2441,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"license.html":{}}}],["failure",{"_index":3890,"title":{},"body":{"license.html":{}}}],["fair",{"_index":3422,"title":{},"body":{"license.html":{}}}],["false",{"_index":48,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RoleResponse.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["false})@isoptional()@isstring",{"_index":2060,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["family",{"_index":3588,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":3304,"title":{},"body":{"license.html":{}}}],["favor",{"_index":3597,"title":{},"body":{"license.html":{}}}],["feature",{"_index":3340,"title":{},"body":{"license.html":{}}}],["features",{"_index":3953,"title":{},"body":{"properties.html":{}}}],["fed",{"_index":1282,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["fee",{"_index":3493,"title":{},"body":{"license.html":{}}}],["fest",{"_index":1269,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"dependencies.html":{}}}],["fetch",{"_index":2385,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{}}}],["fetch(guildid",{"_index":1693,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["fetched",{"_index":555,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["fetched'})@apiresponse({status",{"_index":2336,"title":{},"body":{"controllers/RoleController.html":{}}}],["fetches",{"_index":2414,"title":{},"body":{"injectables/SelfService.html":{}}}],["fetchself",{"_index":2409,"title":{},"body":{"injectables/SelfService.html":{}}}],["fetchself(userid",{"_index":2418,"title":{},"body":{"injectables/SelfService.html":{}}}],["field",{"_index":854,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"miscellaneous/functions.html":{}}}],["field('answer",{"_index":852,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["files",{"_index":3394,"title":{},"body":{"license.html":{}}}],["filter",{"_index":228,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/ModRequestFlow.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["filter.action",{"_index":351,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.createdfrom",{"_index":344,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.createdtill",{"_index":345,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.dto",{"_index":240,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["filter.dto.ts",{"_index":286,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:13",{"_index":296,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:16",{"_index":297,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:21",{"_index":299,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:26",{"_index":292,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.targettype",{"_index":352,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filtercb",{"_index":3039,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filters/command",{"_index":2545,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["finally",{"_index":3702,"title":{},"body":{"license.html":{}}}],["find",{"_index":320,"title":{},"body":{"injectables/AuditLogService.html":{},"license.html":{}}}],["find(guildid",{"_index":268,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["findall",{"_index":1713,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["findall(guildid",{"_index":1734,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["findmany",{"_index":2432,"title":{},"body":{"injectables/SelfService.html":{}}}],["fired",{"_index":1506,"title":{},"body":{"injectables/GuildService.html":{}}}],["first",{"_index":404,"title":{},"body":{"modules/BotModule.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{},"license.html":{}}}],["firstmessageid",{"_index":1312,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["firstvaluefrom",{"_index":1917,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["fitness",{"_index":3867,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":3535,"title":{},"body":{"license.html":{}}}],["flags",{"_index":421,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"miscellaneous/variables.html":{}}}],["flow",{"_index":3403,"title":{},"body":{"license.html":{}}}],["fly",{"_index":2624,"title":{},"body":{"injectables/TasksService.html":{}}}],["follow",{"_index":3286,"title":{},"body":{"license.html":{}}}],["following",{"_index":3775,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":3470,"title":{},"body":{"license.html":{}}}],["forbiddenexception",{"_index":1804,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["force",{"_index":3426,"title":{},"body":{"license.html":{}}}],["foreach((match",{"_index":2906,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["forguild",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["form",{"_index":1948,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["format",{"_index":293,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/LogEntryDto.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["forms",{"_index":3526,"title":{},"body":{"license.html":{}}}],["found",{"_index":592,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["foundation",{"_index":3188,"title":{},"body":{"license.html":{}}}],["frage",{"_index":788,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["fragen",{"_index":2705,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["framework",{"_index":3074,"title":{},"body":{"index.html":{}}}],["free",{"_index":3186,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":3211,"title":{},"body":{"license.html":{}}}],["fromuserid",{"_index":2539,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["frontend",{"_index":2381,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{},"properties.html":{}}}],["fucking",{"_index":1279,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["fulfilling",{"_index":3456,"title":{},"body":{"license.html":{}}}],["full",{"_index":3920,"title":{},"body":{"license.html":{}}}],["fun",{"_index":1532,"title":{},"body":{"injectables/GuildService.html":{}}}],["function",{"_index":1043,"title":{},"body":{"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function/object",{"_index":4000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functionality",{"_index":3055,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functioning",{"_index":3615,"title":{},"body":{"license.html":{}}}],["functions",{"_index":3030,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3558,"title":{},"body":{"license.html":{}}}],["future",{"_index":3859,"title":{},"body":{"license.html":{}}}],["führen",{"_index":957,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["für",{"_index":2894,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["ganzen",{"_index":2530,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["gateway",{"_index":2258,"title":{},"body":{"classes/PingCommand.html":{}}}],["gatewayintentbits",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.automoderationconfiguration",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.automoderationexecution",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessagereactions",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessages",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessagetyping",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildemojisandstickers",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildintegrations",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildinvites",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmembers",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessagereactions",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessages",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessagetyping",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmoderation",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildpresences",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guilds",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildvoicestates",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildwebhooks",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.messagecontent",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["geben",{"_index":772,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["gemutet",{"_index":2893,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["general",{"_index":3179,"title":{},"body":{"license.html":{}}}],["generally",{"_index":3391,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1026,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"license.html":{}}}],["generic",{"_index":3069,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geschlossen",{"_index":2160,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["gesendet",{"_index":2065,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["get('/')@apioperation({summary",{"_index":558,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["get(':channelid",{"_index":595,"title":{},"body":{"controllers/ChannelController.html":{}}}],["get(':channelid')@apioperation({summary",{"_index":551,"title":{},"body":{"controllers/ChannelController.html":{}}}],["get('https://discordapp.com/api/users/@me",{"_index":1958,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["get('login",{"_index":1845,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["get('messages",{"_index":1198,"title":{},"body":{"controllers/GuildController.html":{}}}],["get('self",{"_index":1683,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["get(dbuser.guildid",{"_index":1358,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["get(guild.id",{"_index":2643,"title":{},"body":{"injectables/TasksService.html":{}}}],["get(guildid",{"_index":1153,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["get(ticket.guildid",{"_index":2163,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["getadminroleid",{"_index":1606,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getadminroleid(guildid",{"_index":1619,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getall",{"_index":1436,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getall(guildid",{"_index":1440,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getattachmenttype",{"_index":1383,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getattachmenttype(attachment.contenttype",{"_index":1397,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["getattachmenttype(contenttype",{"_index":3048,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getauditlog",{"_index":226,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["getauditlog(guildid",{"_index":227,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["getautodeletechannel",{"_index":1096,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getautodeletechannel(@param('guildid",{"_index":1113,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getautodeletechannel(guildid",{"_index":1101,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getguildchannel",{"_index":537,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannel(guildid",{"_index":550,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannels",{"_index":538,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannels(guildid",{"_index":557,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildroles",{"_index":2323,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguildroles(@param('guildid",{"_index":2346,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguildroles(guildid",{"_index":2335,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguilduser",{"_index":1714,"title":{},"body":{"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["getguilduser(request",{"_index":2772,"title":{},"body":{"controllers/UserController.html":{}}}],["getguilduser(userid",{"_index":1736,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getguildusers",{"_index":2765,"title":{},"body":{"controllers/UserController.html":{}}}],["getguildusers(guildid",{"_index":2774,"title":{},"body":{"controllers/UserController.html":{}}}],["getintrochannelid",{"_index":1607,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getintrochannelid(guildid",{"_index":1621,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmessage",{"_index":859,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["getmodchannelid",{"_index":1608,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodchannelid(guildid",{"_index":1623,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodroleid",{"_index":1609,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodroleid(guildid",{"_index":1625,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getopenintrochannelid",{"_index":1610,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getopenintrochannelid(guildid",{"_index":1627,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getrank",{"_index":1715,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getrank(member",{"_index":1738,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getrequest",{"_index":1815,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["getrestrictedchannel",{"_index":1437,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getrestrictedchannel(guildid",{"_index":1442,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["gets",{"_index":1275,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/PingCommand.html":{},"controllers/SelfController.html":{},"miscellaneous/functions.html":{}}}],["getself",{"_index":1681,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["getself(@requestuser",{"_index":2392,"title":{},"body":{"controllers/SelfController.html":{}}}],["getself(userid",{"_index":1682,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["getsettings",{"_index":1581,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{}}}],["getsettings(@param('guildid",{"_index":1594,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["getsettings(guildid",{"_index":1583,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{}}}],["getting",{"_index":3070,"title":{"index.html":{},"license.html":{}},"body":{}}],["getunverifiedmemberroleid",{"_index":1611,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getunverifiedmemberroleid(guildid",{"_index":1630,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getuserfromcode",{"_index":1900,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["getuserfromcode(code",{"_index":1906,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["getverifiedmemberroleid",{"_index":1612,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getverifiedmemberroleid(guildid",{"_index":1632,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getwelcomemessageformat",{"_index":1613,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getwelcomemessageformat(guildid",{"_index":1634,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["gibt",{"_index":2531,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["give",{"_index":2548,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"classes/UserToUser.html":{},"license.html":{}}}],["given",{"_index":1475,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["gives",{"_index":3235,"title":{},"body":{"license.html":{}}}],["giving",{"_index":3497,"title":{},"body":{"license.html":{}}}],["gnu",{"_index":3177,"title":{},"body":{"license.html":{}}}],["goals",{"_index":3275,"title":{},"body":{"license.html":{}}}],["governed",{"_index":3647,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":3276,"title":{},"body":{"license.html":{}}}],["grant",{"_index":3674,"title":{},"body":{"license.html":{}}}],["grant_type",{"_index":1939,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["granted",{"_index":3411,"title":{},"body":{"license.html":{}}}],["grants",{"_index":3721,"title":{},"body":{"license.html":{}}}],["gratis",{"_index":3557,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":3909,"title":{},"body":{"license.html":{}}}],["group",{"_index":1489,"title":{},"body":{"injectables/GuildService.html":{}}}],["grow",{"_index":3102,"title":{},"body":{"index.html":{}}}],["grund",{"_index":2708,"title":{},"body":{"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["gte",{"_index":346,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guarantee",{"_index":3215,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1789,"title":{"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["guarded",{"_index":3982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":1790,"title":{},"body":{"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"overview.html":{}}}],["guards/is",{"_index":757,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["guards/refresh",{"_index":1858,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["guild",{"_index":439,"title":{"classes/Guild.html":{}},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["guild'})@apiresponse({status",{"_index":552,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["guild.autodeletechannels.foreach((deletechannel",{"_index":1165,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["guild.channels.cache.foreach(async",{"_index":2287,"title":{},"body":{"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["guild.channels.cache.get(channelid",{"_index":599,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.cache.size",{"_index":593,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.create",{"_index":2103,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["guild.channels.fetch",{"_index":1173,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["guild.channels.fetch()).foreach(async",{"_index":2854,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["guild.channels.fetch()).tojson",{"_index":594,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.fetch(channelid",{"_index":597,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.command",{"_index":398,"title":{},"body":{"modules/BotModule.html":{}}}],["guild.command.ts",{"_index":2956,"title":{},"body":{"coverage.html":{},"classes/initGuildCommand.html":{}}}],["guild.command.ts:156",{"_index":3129,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.command.ts:21",{"_index":3122,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.command.ts:26",{"_index":3125,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.controller",{"_index":1421,"title":{},"body":{"modules/GuildModule.html":{}}}],["guild.iconurl",{"_index":2430,"title":{},"body":{"injectables/SelfService.html":{}}}],["guild.id",{"_index":2429,"title":{},"body":{"injectables/SelfService.html":{}}}],["guild.members.ban(userid",{"_index":2809,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.fetch",{"_index":1776,"title":{},"body":{"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["guild.members.fetch().then((members",{"_index":2733,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["guild.members.fetch(request.user.userid",{"_index":2804,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.fetch(userid",{"_index":2822,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.kick(userid",{"_index":2816,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.name",{"_index":1292,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/SelfService.html":{}}}],["guild.ownerid",{"_index":2734,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["guild.roles.cache.get(roleid",{"_index":2355,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.cache.size",{"_index":2348,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.create(roledata",{"_index":2350,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.fetch()).tojson",{"_index":2349,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.service",{"_index":1146,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"modules/GuildModule.html":{}}}],["guild/:guildid",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["guild/guild",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["guild/guild.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["guild/moderation/moderation.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["guild_id",{"_index":1722,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["guild_updated",{"_index":2017,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["guildautodeletechannelcontroller",{"_index":1090,"title":{"controllers/GuildAutoDeleteChannelController.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"coverage.html":{}}}],["guildautodeletechanneldto",{"_index":1099,"title":{"classes/GuildAutoDeleteChannelDto.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"coverage.html":{}}}],["guildautodeletechannelmodule",{"_index":1137,"title":{"modules/GuildAutoDeleteChannelModule.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules.html":{},"overview.html":{}}}],["guildautodeletechannelservice",{"_index":1107,"title":{"injectables/GuildAutoDeleteChannelService.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"coverage.html":{},"overview.html":{}}}],["guildbasedchannel",{"_index":572,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guildchannel",{"_index":571,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["guildchanneleditoptions",{"_index":492,"title":{"classes/GuildChannelEditOptions.html":{}},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["guildcontroller",{"_index":1193,"title":{"controllers/GuildController.html":{}},"body":{"controllers/GuildController.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["guilddoesnotexistexception",{"_index":1217,"title":{"classes/GuildDoesNotExistException.html":{}},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["guilddoesnotexistexception(guildid",{"_index":1653,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["guilddoesnotexistexceptionfilter",{"_index":1224,"title":{"classes/GuildDoesNotExistExceptionFilter.html":{}},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"coverage.html":{}}}],["guildid",{"_index":65,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/initGuildCommand.html":{}}}],["guildid_userid",{"_index":64,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["guildids",{"_index":3062,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guildmember",{"_index":1238,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guildmemberevents",{"_index":1227,"title":{"injectables/GuildMemberEvents.html":{}},"body":{"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildmenu",{"_index":2182,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["guildmessagehandler",{"_index":1368,"title":{"injectables/GuildMessageHandler.html":{}},"body":{"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildmodule",{"_index":105,"title":{"modules/GuildModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules.html":{},"overview.html":{}}}],["guildname",{"_index":1690,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["guildquestionid",{"_index":820,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["guildrestrictedchannelcontroller",{"_index":1431,"title":{"controllers/GuildRestrictedChannelController.html":{}},"body":{"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"coverage.html":{}}}],["guildrestrictedchannelmodule",{"_index":1419,"title":{"modules/GuildRestrictedChannelModule.html":{}},"body":{"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules.html":{},"overview.html":{}}}],["guildrestrictedchannelservice",{"_index":376,"title":{"injectables/GuildRestrictedChannelService.html":{}},"body":{"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["guilds",{"_index":1089,"title":{},"body":{"classes/Guild.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["guilds.foreach((guild",{"_index":1164,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["guilds.foreach(async",{"_index":1577,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guilds.length",{"_index":2172,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["guilds.map((guild",{"_index":2428,"title":{},"body":{"injectables/SelfService.html":{}}}],["guilds/:guildid/roles/:roleid",{"_index":1027,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["guilds[0",{"_index":2174,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["guildservice",{"_index":377,"title":{"injectables/GuildService.html":{}},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["guildsettingscontroller",{"_index":1579,"title":{"controllers/GuildSettingsController.html":{}},"body":{"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"coverage.html":{}}}],["guildsettingsmodule",{"_index":132,"title":{"modules/GuildSettingsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/GuildSettingsModule.html":{},"modules.html":{},"overview.html":{}}}],["guildsettingsservice",{"_index":378,"title":{"injectables/GuildSettingsService.html":{}},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildtextbasedchannel",{"_index":573,"title":{},"body":{"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["guilduser",{"_index":1086,"title":{},"body":{"classes/Guild.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["guilduser.firstmessageid",{"_index":2839,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["guilduser['guildid",{"_index":1081,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["guilduser['rank",{"_index":2402,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["guilduser['userid",{"_index":1088,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["guildusercontroller",{"_index":1679,"title":{"controllers/GuildUserController.html":{}},"body":{"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"coverage.html":{}}}],["guildusermodule",{"_index":141,"title":{"modules/GuildUserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/GuildUserModule.html":{},"modules.html":{},"overview.html":{}}}],["guildusers.map((guilduser",{"_index":2434,"title":{},"body":{"injectables/SelfService.html":{}}}],["guilduserservice",{"_index":1141,"title":{"injectables/GuildUserService.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["hacky",{"_index":2895,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["handleevent",{"_index":204,"title":{},"body":{"injectables/AppService.html":{}}}],["handleevent(event",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["handler",{"_index":27,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["handler()@usefilters(commandvalidationfilter",{"_index":2685,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["hasattachments",{"_index":1411,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["hashandlermethod",{"_index":1053,"title":{},"body":{"classes/Explorer.html":{}}}],["hashandlermethod(provider",{"_index":1061,"title":{},"body":{"classes/Explorer.html":{}}}],["hasrequiredrank",{"_index":257,"title":{"guards/HasRequiredRank.html":{}},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["hast",{"_index":2672,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["haven't",{"_index":2616,"title":{},"body":{"injectables/TasksService.html":{}}}],["having",{"_index":3429,"title":{},"body":{"license.html":{}}}],["headers",{"_index":1945,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["headpat",{"_index":2532,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["heartened",{"_index":3250,"title":{},"body":{"license.html":{}}}],["helfen",{"_index":960,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["helper",{"_index":944,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{}}}],["helper.ts",{"_index":2994,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["hence",{"_index":3950,"title":{},"body":{"properties.html":{}}}],["here",{"_index":1035,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"classes/RoleResponse.html":{},"index.html":{}}}],["here](${message.url",{"_index":2850,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["hereafter",{"_index":3767,"title":{},"body":{"license.html":{}}}],["hex",{"_index":916,"title":{},"body":{"classes/DiscordUser.html":{}}}],["hexaccentcolor",{"_index":896,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["hier",{"_index":2149,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["higher",{"_index":1001,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["higher.guard",{"_index":1262,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["higher.guard.ts",{"_index":2295,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["higher.guard.ts:11",{"_index":2296,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["higher.guard.ts:16",{"_index":2297,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["hilfe",{"_index":965,"title":{},"body":{"injectables/DmMessageHandler.html":{},"miscellaneous/functions.html":{}}}],["hoist",{"_index":974,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["hoisted",{"_index":985,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["holder",{"_index":3699,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3656,"title":{},"body":{"license.html":{}}}],["hope",{"_index":3922,"title":{},"body":{"license.html":{}}}],["host",{"_index":644,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["host.getargbyindex(0",{"_index":711,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["host.switchtohttp",{"_index":646,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["hosts",{"_index":3567,"title":{},"body":{"license.html":{}}}],["hours",{"_index":2914,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["household",{"_index":3589,"title":{},"body":{"license.html":{}}}],["hs256",{"_index":1927,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["http",{"_index":639,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["httpcode",{"_index":1589,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["httpcode(httpstatuscode.accepted",{"_index":1597,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["httpmodule",{"_index":1891,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["https://cdn.discordapp.com/emojis/859111454677139476.webp",{"_index":1013,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["https://discordapp.com/api/oauth2/token",{"_index":1933,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["https://fsf.org",{"_index":3190,"title":{},"body":{"license.html":{}}}],["https://github.com/89q12/mega",{"_index":829,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["https://github.com/discordjs/discord.js/issues/4930#issuecomment",{"_index":1331,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["https://nestjs.com",{"_index":3116,"title":{},"body":{"index.html":{}}}],["https://old.discordjs.dev/#/docs/discord.js/main/class/role?scrollto=seticon",{"_index":1025,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["https://www.gnu.org/licenses",{"_index":3941,"title":{},"body":{"license.html":{}}}],["httpservice",{"_index":1860,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["httpstatus",{"_index":633,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["httpstatuscode",{"_index":1591,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["hug",{"_index":2552,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["i'm",{"_index":1281,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["i.customid",{"_index":2190,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["ia",{"_index":743,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["ia(modalfieldstransformpipe",{"_index":808,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["ia(slashcommandpipe",{"_index":764,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["ich",{"_index":948,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["icon",{"_index":975,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["iconurl",{"_index":826,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["id",{"_index":72,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/Channel.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SettingsChanged.html":{},"classes/UnverifyByRoleCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifiable",{"_index":3795,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":2945,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1944,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["idk",{"_index":1278,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ids",{"_index":450,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"injectables/SelfService.html":{}}}],["iffy",{"_index":1364,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ignoreenvvars",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":1977,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["image",{"_index":1080,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{}}}],["images",{"_index":452,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["implement",{"_index":1038,"title":{},"body":{"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"license.html":{}}}],["implementation",{"_index":3376,"title":{},"body":{"license.html":{}}}],["implemented",{"_index":2814,"title":{},"body":{"controllers/UserController.html":{}}}],["implements",{"_index":505,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RestrictedChannelDto.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["implied",{"_index":3820,"title":{},"body":{"license.html":{}}}],["import",{"_index":31,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["importing",{"_index":3758,"title":{},"body":{"license.html":{}}}],["imports",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["impose",{"_index":3684,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":3823,"title":{},"body":{"license.html":{}}}],["improvements",{"_index":3242,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3884,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":3887,"title":{},"body":{"license.html":{}}}],["inc",{"_index":3189,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3881,"title":{},"body":{"license.html":{}}}],["include",{"_index":3366,"title":{},"body":{"license.html":{}}}],["included",{"_index":3368,"title":{},"body":{"license.html":{}}}],["includes",{"_index":3322,"title":{},"body":{"license.html":{}}}],["including",{"_index":3385,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":3524,"title":{},"body":{"license.html":{}}}],["incorporate",{"_index":3248,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3841,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":3592,"title":{},"body":{"license.html":{}}}],["indemnification",{"_index":3680,"title":{},"body":{"license.html":{}}}],["independent",{"_index":3512,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":3724,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":3690,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3522,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":3300,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":3606,"title":{},"body":{"license.html":{}}}],["inestapplication",{"_index":2267,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["inform",{"_index":3574,"title":{},"body":{"license.html":{}}}],["information",{"_index":2715,"title":{},"body":{"classes/TimeOutCommand.html":{},"license.html":{}}}],["infringe",{"_index":3722,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3755,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3314,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":1823,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["inheritedranks",{"_index":1828,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inheritedranks[user.rank",{"_index":1820,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["initguildcommand",{"_index":396,"title":{"classes/initGuildCommand.html":{}},"body":{"modules/BotModule.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["initiate",{"_index":3748,"title":{},"body":{"license.html":{}}}],["initiatemodrequestflow",{"_index":2070,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["initiatemodrequestflow(interaction",{"_index":2079,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["inject",{"_index":37,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["inject(auditlogservice",{"_index":262,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["inject(eventemitter2",{"_index":221,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["inject(guildautodeletechannelservice",{"_index":1112,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["inject(guildrestrictedchannelservice",{"_index":1516,"title":{},"body":{"injectables/GuildService.html":{}}}],["inject(guildservice",{"_index":1204,"title":{},"body":{"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["inject(guildsettingsservice",{"_index":863,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["inject(guilduserservice",{"_index":1270,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/TasksService.html":{}}}],["inject(prismaservice",{"_index":51,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/ModRequestFlow.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["inject(reflector",{"_index":1809,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["inject(tasksservice",{"_index":1158,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["injectable",{"_index":199,"title":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageIsDmGuard.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":200,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectdiscordclient",{"_index":33,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["input",{"_index":714,"title":{},"body":{"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionDto.html":{},"classes/UserTimeOutDto.html":{}}}],["inputs",{"_index":804,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["insertmessage",{"_index":1716,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["insertmessage(data",{"_index":1740,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["install",{"_index":3384,"title":{},"body":{"license.html":{}}}],["installation",{"_index":3084,"title":{},"body":{"index.html":{},"license.html":{}}}],["installed",{"_index":3628,"title":{},"body":{"license.html":{}}}],["installrunning",{"_index":3086,"title":{},"body":{"index.html":{}}}],["instance",{"_index":248,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildSettingsController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{}}}],["instance.ts",{"_index":2996,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["instanceof",{"_index":867,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/variables.html":{}}}],["int",{"_index":842,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["intact",{"_index":3486,"title":{},"body":{"license.html":{}}}],["integration",{"_index":1016,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["intended",{"_index":3214,"title":{},"body":{"license.html":{}}}],["intention",{"_index":3475,"title":{},"body":{"license.html":{}}}],["intents",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["interact",{"_index":3928,"title":{},"body":{"license.html":{}}}],["interacting",{"_index":3835,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":29,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"guards/IsModalInteractionGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["interaction.channel.messages.fetch",{"_index":2455,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["interaction.channel.send",{"_index":2219,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["interaction.customid",{"_index":2143,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["interaction.customid.endswith",{"_index":3170,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.customid.includes('community",{"_index":780,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.customid.split",{"_index":781,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.customid.startswith('closeticket",{"_index":2154,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.deferreply",{"_index":672,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.deletereply",{"_index":2153,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.editreply",{"_index":2137,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.editreply(options",{"_index":2181,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.fields.gettextinputvalue('modmessage",{"_index":2247,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.fields.gettextinputvalue('modrequestmessage",{"_index":2129,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.followup",{"_index":701,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.followup(`purged",{"_index":2294,"title":{},"body":{"classes/PurgeCommand.html":{}}}],["interaction.guard",{"_index":759,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.guard.ts",{"_index":1830,"title":{},"body":{"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["interaction.guard.ts:5",{"_index":1831,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interaction.guild.channels.fetch(settings.introchannelid",{"_index":3146,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.leavechannelid",{"_index":3149,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.modchannelid)).name",{"_index":3152,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.openintrochannelid",{"_index":3142,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.members.fetch().then((members",{"_index":53,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["interaction.guild.members.fetch(dto.user",{"_index":2555,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["interaction.guild.members.fetch(dto.user)).id",{"_index":2283,"title":{},"body":{"classes/PurgeCommand.html":{}}}],["interaction.guild.roles.fetch(settings.adminroleid)).name",{"_index":3158,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.modroleid)).name",{"_index":3155,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.unverifiedmemberroleid",{"_index":3165,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.verifiedmemberroleid",{"_index":3161,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guildid",{"_index":676,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/PurgeCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.isanyselectmenu",{"_index":3171,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.isbutton",{"_index":779,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{}}}],["interaction.ischannelselectmenu",{"_index":3172,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.iscontextmenucommand",{"_index":2454,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["interaction.ismodalsubmit",{"_index":2100,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.isrepliable",{"_index":722,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["interaction.isroleselectmenu",{"_index":3176,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.isstringselectmenu",{"_index":2142,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.reply",{"_index":723,"title":{},"body":{"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["interaction.reply('das",{"_index":2157,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.reply('done",{"_index":2248,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.showmodal(modal",{"_index":806,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.showmodal(modannouncementmodal",{"_index":2243,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.showmodal(modrequestmodal",{"_index":2152,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.targetid",{"_index":2456,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["interaction.targetmessage.id",{"_index":2230,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.type",{"_index":1833,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interaction.user.displayname",{"_index":2107,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.user.id",{"_index":2117,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/SpecialCommand.html":{}}}],["interaction.values[0",{"_index":3173,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.values[0].split",{"_index":2145,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interactionevent",{"_index":34,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["interactiontype",{"_index":1832,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interactiontype.modalsubmit",{"_index":1834,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interactive",{"_index":3332,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":3538,"title":{},"body":{"license.html":{}}}],["interest",{"_index":3741,"title":{},"body":{"license.html":{}}}],["interface",{"_index":363,"title":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{}},"body":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{},"license.html":{}}}],["interfaces",{"_index":365,"title":{},"body":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{},"license.html":{},"overview.html":{}}}],["interfered",{"_index":3617,"title":{},"body":{"license.html":{}}}],["internalservererrorexception",{"_index":3986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interpretation",{"_index":3895,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":3382,"title":{},"body":{"license.html":{}}}],["interval",{"_index":1487,"title":{},"body":{"injectables/GuildService.html":{}}}],["intimate",{"_index":3401,"title":{},"body":{"license.html":{}}}],["intro",{"_index":3143,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["introchannelid",{"_index":2470,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["introduction",{"_index":2848,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["invalid",{"_index":1130,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["invalid_grant",{"_index":1956,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["invalid_request",{"_index":2018,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invalidate",{"_index":3507,"title":{},"body":{"license.html":{}}}],["invite",{"_index":2003,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invite_created",{"_index":2019,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invite_deleted",{"_index":2020,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invoker",{"_index":1996,"title":{},"body":{"classes/LogEntry.html":{}}}],["invokerid",{"_index":278,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/UserInfoUiCommand.html":{}}}],["involved",{"_index":1990,"title":{},"body":{"classes/LogEntry.html":{}}}],["irrevocable",{"_index":3413,"title":{},"body":{"license.html":{}}}],["isactive",{"_index":1717,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["isactive(userid",{"_index":1745,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["isarray",{"_index":481,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isarray()@isstring()@isoptional()@apiproperty({description",{"_index":448,"title":{},"body":{"classes/Channel.html":{}}}],["isavailable",{"_index":1568,"title":{},"body":{"injectables/GuildService.html":{}}}],["isboolean",{"_index":482,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["isboolean()@apiproperty({type",{"_index":880,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/RoleResponse.html":{}}}],["isboolean()@isoptional()@apiproperty({description",{"_index":455,"title":{},"body":{"classes/Channel.html":{}}}],["isboolean()@isoptional()@apiproperty({type",{"_index":984,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{}}}],["ischannelavailabletouser",{"_index":1438,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["ischannelavailabletouser(user",{"_index":1444,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{}}}],["isdate",{"_index":2008,"title":{},"body":{"classes/LogEntry.html":{}}}],["isdate()@apiproperty({type",{"_index":1987,"title":{},"body":{"classes/LogEntry.html":{}}}],["isdatestring",{"_index":889,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/UserTimeOutDto.html":{}}}],["isdatestring()@isoptional()@apipropertyoptional({type",{"_index":882,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["isenum",{"_index":483,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isenum(channeltype",{"_index":494,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isenum(channeltype)@isoptional()@apiproperty({enum",{"_index":1190,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["isglobal",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":300,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["isin(['string",{"_index":1185,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["isin([string",{"_index":500,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isin(actions",{"_index":309,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["isin(object.keys(colors",{"_index":1020,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isin(object.keys(permissionflagsbits",{"_index":1022,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isin(targettypes",{"_index":308,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["isin(undefined)@apiproperty({enum",{"_index":980,"title":{},"body":{"classes/EditRoleData.html":{}}}],["isin(undefined)@isoptional()@apiproperty({type",{"_index":997,"title":{},"body":{"classes/EditRoleData.html":{}}}],["isinstance",{"_index":484,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isinstance(permissionoverwrite",{"_index":491,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isinstance(permissionoverwrite)@isoptional()@apiproperty({description",{"_index":462,"title":{},"body":{"classes/Channel.html":{}}}],["ismodalinteractionguard",{"_index":756,"title":{"guards/IsModalInteractionGuard.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["isn't",{"_index":626,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["isnumber",{"_index":485,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isnumber()@apiproperty({description",{"_index":431,"title":{},"body":{"classes/Channel.html":{}}}],["isnumber()@apiproperty({type",{"_index":898,"title":{},"body":{"classes/DiscordUser.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isnumber()@isoptional()@apiproperty({description",{"_index":466,"title":{},"body":{"classes/Channel.html":{}}}],["isnumber()@isoptional()@apiproperty({type",{"_index":1000,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{}}}],["isoptional",{"_index":301,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{}}}],["isstring",{"_index":302,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{}}}],["isstring()@apiproperty({description",{"_index":438,"title":{},"body":{"classes/Channel.html":{},"classes/PermissionOverwrite.html":{}}}],["isstring()@apiproperty({type",{"_index":878,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isstring()@isoptional()@apiproperty({description",{"_index":444,"title":{},"body":{"classes/Channel.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":989,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{}}}],["isstring()@isoptional()@apipropertyoptional({type",{"_index":2479,"title":{},"body":{"classes/SettingsDto.html":{}}}],["isstring()@matches(/^(((\\d+,)+\\d+|(\\d",{"_index":1127,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["issuer",{"_index":1924,"title":{},"body":{"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["ist",{"_index":2158,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["isurl",{"_index":1008,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isurl()@apiproperty({type",{"_index":2365,"title":{},"body":{"classes/RoleResponse.html":{}}}],["isuserunlockedguard",{"_index":862,"title":{"guards/IsUserUnlockedGuard.html":{}},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMessageHandler.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["it.action",{"_index":275,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.adminroleid",{"_index":1660,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.avatarurl",{"_index":1696,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.createdat",{"_index":277,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.displayname",{"_index":1699,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.guild.name",{"_index":1700,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.introchannelid",{"_index":1663,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.invokerid",{"_index":279,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.members.fetch(userid",{"_index":1695,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.modchannelid",{"_index":1664,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.modroleid",{"_index":1659,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.openintrochannelid",{"_index":1662,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.reason",{"_index":281,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.targetid",{"_index":283,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.targettype",{"_index":284,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.unverifiedmemberroleid",{"_index":1658,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.verifiedmemberroleid",{"_index":1657,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.welcomemessageformat",{"_index":1661,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["item",{"_index":3348,"title":{},"body":{"license.html":{}}}],["items",{"_index":927,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["itself",{"_index":3632,"title":{},"body":{"license.html":{}}}],["jest",{"_index":3017,"title":{},"body":{"dependencies.html":{}}}],["joboptions",{"_index":2626,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.crontime",{"_index":2633,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.oncomplete",{"_index":2635,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.ontick",{"_index":2634,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.start",{"_index":2636,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.timezone",{"_index":2637,"title":{},"body":{"injectables/TasksService.html":{}}}],["jobs",{"_index":2589,"title":{},"body":{"modules/TasksModule.html":{}}}],["jobs/tasks",{"_index":2595,"title":{},"body":{"injectables/TasksService.html":{}}}],["john",{"_index":922,"title":{},"body":{"classes/DiscordUser.html":{}}}],["join",{"_index":1484,"title":{},"body":{"injectables/GuildService.html":{},"index.html":{}}}],["join('\\n",{"_index":697,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildSettingsService.html":{},"injectables/TasksService.html":{}}}],["json.stringify",{"_index":2106,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["json.stringify(error.response.data",{"_index":1954,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["jsonarray",{"_index":1268,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["jwt",{"_index":1855,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtauthcontroller",{"_index":1838,"title":{"controllers/JwtAuthController.html":{}},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"coverage.html":{}}}],["jwtauthguard",{"_index":86,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtauthguard.name",{"_index":3983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthmodule",{"_index":106,"title":{"modules/JwtAuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/JwtAuthModule.html":{},"modules.html":{},"overview.html":{}}}],["jwtauthservice",{"_index":1854,"title":{"injectables/JwtAuthService.html":{}},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"coverage.html":{},"overview.html":{}}}],["jwtauthstrategy",{"_index":1880,"title":{"injectables/JwtAuthStrategy.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtconstants.secret",{"_index":1895,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtfromrequest",{"_index":1975,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["jwtmodule",{"_index":1885,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtmodule.register",{"_index":1893,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtservice",{"_index":1903,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["kaffee",{"_index":2518,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["kamil",{"_index":3113,"title":{},"body":{"index.html":{}}}],["kann",{"_index":954,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kategorie",{"_index":2130,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["keep",{"_index":3485,"title":{},"body":{"license.html":{}}}],["kein",{"_index":955,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kernel",{"_index":3378,"title":{},"body":{"license.html":{}}}],["key",{"_index":720,"title":{},"body":{"classes/CommandValidationFilter.html":{},"controllers/GuildController.html":{},"injectables/GuildSettingsService.html":{},"classes/LogEntry.html":{},"license.html":{}}}],["key.endswith('roleid",{"_index":1646,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["keyof",{"_index":1650,"title":{},"body":{"injectables/GuildSettingsService.html":{},"classes/SettingsChanged.html":{}}}],["keys",{"_index":3611,"title":{},"body":{"license.html":{}}}],["kick",{"_index":663,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/LogEntry.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["kicked",{"_index":684,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["kickmembers",{"_index":669,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["kicks",{"_index":2615,"title":{},"body":{"injectables/TasksService.html":{}}}],["kickuser",{"_index":2766,"title":{},"body":{"controllers/UserController.html":{}}}],["kickuser(guildid",{"_index":2776,"title":{},"body":{"controllers/UserController.html":{}}}],["kind",{"_index":3326,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":3201,"title":{},"body":{"license.html":{}}}],["klicke",{"_index":961,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["know",{"_index":1280,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["knowingly",{"_index":3784,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":3792,"title":{},"body":{"license.html":{}}}],["konnten",{"_index":689,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["konsul",{"_index":2519,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["koverstionen",{"_index":956,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kuchen",{"_index":2510,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["käsekuchen",{"_index":2506,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["labels",{"_index":1207,"title":{},"body":{"controllers/GuildController.html":{}}}],["labels.push",{"_index":1211,"title":{},"body":{"controllers/GuildController.html":{}}}],["labels.push(key",{"_index":1216,"title":{},"body":{"controllers/GuildController.html":{}}}],["language",{"_index":3361,"title":{},"body":{"license.html":{}}}],["larger",{"_index":3516,"title":{},"body":{"license.html":{}}}],["last",{"_index":445,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{}}}],["lastmessageid",{"_index":422,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["later",{"_index":3854,"title":{},"body":{"license.html":{}}}],["latte",{"_index":2520,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["law",{"_index":3316,"title":{},"body":{"license.html":{}}}],["laws",{"_index":3290,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3753,"title":{},"body":{"license.html":{}}}],["leads",{"_index":3931,"title":{},"body":{"license.html":{}}}],["leavechannelid",{"_index":2471,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["leavemessageformat",{"_index":2472,"title":{},"body":{"classes/SettingsDto.html":{}}}],["legal",{"_index":3236,"title":{},"body":{"license.html":{}}}],["legend",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1394,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["letting",{"_index":3259,"title":{},"body":{"license.html":{}}}],["liability",{"_index":3659,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3313,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3364,"title":{},"body":{"license.html":{}}}],["library",{"_index":3582,"title":{},"body":{"license.html":{}}}],["license",{"_index":3119,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3100,"title":{},"body":{"index.html":{},"license.html":{}}}],["licensee",{"_index":3296,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":3298,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":3208,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":3726,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":3671,"title":{},"body":{"license.html":{}}}],["lift",{"_index":43,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["likewise",{"_index":3719,"title":{},"body":{"license.html":{}}}],["limit",{"_index":230,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{},"license.html":{}}}],["limitation",{"_index":3878,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3865,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":3658,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1517,"title":{},"body":{"injectables/GuildService.html":{}}}],["line",{"_index":3918,"title":{},"body":{"license.html":{}}}],["link",{"_index":2847,"title":{},"body":{"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["linked",{"_index":3398,"title":{},"body":{"license.html":{}}}],["list",{"_index":2035,"title":{},"body":{"classes/LogEntry.html":{},"injectables/SelfService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["listens",{"_index":1504,"title":{},"body":{"injectables/GuildService.html":{}}}],["literal",{"_index":329,"title":{},"body":{"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{}}}],["litigation",{"_index":3749,"title":{},"body":{"license.html":{}}}],["local",{"_index":2867,"title":{},"body":{"modules/UserModule.html":{},"license.html":{}}}],["lockdown",{"_index":44,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["log",{"_index":220,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"injectables/JwtAuthService.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["log.ts",{"_index":1036,"title":{},"body":{"interfaces/EventToLog.html":{},"coverage.html":{}}}],["log.ts:11",{"_index":1042,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["logchannel.send",{"_index":2651,"title":{},"body":{"injectables/TasksService.html":{}}}],["logentries",{"_index":1984,"title":{},"body":{"classes/LogEntry.html":{}}}],["logentry",{"_index":324,"title":{"classes/LogEntry.html":{}},"body":{"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{}}}],["logentrydto",{"_index":243,"title":{"classes/LogEntryDto.html":{}},"body":{"controllers/AuditLogController.html":{},"classes/LogEntryDto.html":{},"coverage.html":{}}}],["logged",{"_index":2382,"title":{},"body":{"controllers/SelfController.html":{}}}],["logger",{"_index":203,"title":{},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["logger('appservice",{"_index":217,"title":{},"body":{"injectables/AppService.html":{}}}],["logger('requestguilduser",{"_index":3976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('requestuser",{"_index":3989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('rolecontroller",{"_index":2343,"title":{},"body":{"controllers/RoleController.html":{},"miscellaneous/variables.html":{}}}],["logger('taskservice",{"_index":2632,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["logger(channelcontroller.name",{"_index":587,"title":{},"body":{"controllers/ChannelController.html":{}}}],["logger(dmmessagehandler.name",{"_index":936,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["logger(guildautodeletechannelservice.name",{"_index":1157,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["logger(guildmemberevents.name",{"_index":1259,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["logger(hasrequiredrank.name",{"_index":1808,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["logger(jwtauthcontroller.name",{"_index":1864,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["logger(jwtauthservice.name",{"_index":1914,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["logger(modrequestflow.name",{"_index":2076,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["logger(purgecommand.name",{"_index":2277,"title":{},"body":{"classes/PurgeCommand.html":{}}}],["logger(usercontroller.name",{"_index":2793,"title":{},"body":{"controllers/UserController.html":{}}}],["logger.error",{"_index":2759,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.error(`${ctx.gethandler().tostring",{"_index":3979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger.log",{"_index":525,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.log(`checking",{"_index":2639,"title":{},"body":{"injectables/TasksService.html":{}}}],["logger.log(`created",{"_index":2351,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`deleted",{"_index":2359,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`found",{"_index":2347,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`settingschanged",{"_index":2466,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["logger.log(`updated",{"_index":2357,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`userbanevent",{"_index":2753,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.log(`userkickevent",{"_index":2756,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logging",{"_index":1046,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["login",{"_index":1842,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["login(@query('code",{"_index":1869,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["login(code",{"_index":1844,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["login(userid",{"_index":1908,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["long",{"_index":3424,"title":{},"body":{"license.html":{}}}],["longer",{"_index":665,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["loss",{"_index":3885,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3888,"title":{},"body":{"license.html":{}}}],["lower",{"_index":1825,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["lowest",{"_index":1827,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["lte",{"_index":349,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["löschen",{"_index":2581,"title":{},"body":{"classes/TargetUser.html":{}}}],["m",{"_index":1483,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.channelid",{"_index":1477,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.createdat",{"_index":1492,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.userid",{"_index":1478,"title":{},"body":{"injectables/GuildService.html":{}}}],["macchiato",{"_index":2521,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["machine",{"_index":3528,"title":{},"body":{"license.html":{}}}],["made",{"_index":3243,"title":{},"body":{"license.html":{}}}],["mail",{"_index":3927,"title":{},"body":{"license.html":{}}}],["maintain",{"_index":3562,"title":{},"body":{"license.html":{}}}],["major",{"_index":3371,"title":{},"body":{"license.html":{}}}],["make",{"_index":1326,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["makes",{"_index":3446,"title":{},"body":{"license.html":{}}}],["making",{"_index":3257,"title":{},"body":{"license.html":{}}}],["manage",{"_index":2866,"title":{},"body":{"modules/UserModule.html":{}}}],["managed",{"_index":1015,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["manages",{"_index":2587,"title":{},"body":{"modules/TasksModule.html":{}}}],["managing",{"_index":2594,"title":{},"body":{"injectables/TasksService.html":{}}}],["manner",{"_index":3768,"title":{},"body":{"license.html":{}}}],["many",{"_index":3249,"title":{},"body":{"license.html":{}}}],["map",{"_index":1494,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["map((it",{"_index":1673,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["map((member",{"_index":695,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["map((row",{"_index":3167,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["map((user",{"_index":2170,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["march",{"_index":3817,"title":{},"body":{"license.html":{}}}],["marked",{"_index":3668,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3678,"title":{},"body":{"license.html":{}}}],["masks",{"_index":3293,"title":{},"body":{"license.html":{}}}],["match",{"_index":2904,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('d",{"_index":2907,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('h",{"_index":2909,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('m",{"_index":2911,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('d",{"_index":2908,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('h",{"_index":2910,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('m",{"_index":2912,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["matches",{"_index":1134,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["matches(/^(((\\d+,)+\\d+|(\\d",{"_index":1135,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["matching",{"_index":80,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":3433,"title":{},"body":{"license.html":{}}}],["materially",{"_index":3633,"title":{},"body":{"license.html":{}}}],["maybe",{"_index":2551,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["meaning",{"_index":1824,"title":{},"body":{"guards/HasRequiredRank.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":3289,"title":{},"body":{"license.html":{}}}],["measure",{"_index":3455,"title":{},"body":{"license.html":{}}}],["measures",{"_index":3467,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3481,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3495,"title":{},"body":{"license.html":{}}}],["meets",{"_index":3349,"title":{},"body":{"license.html":{}}}],["mega",{"_index":3951,"title":{},"body":{"properties.html":{}}}],["member",{"_index":55,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["member.communicationdisableduntiltimestamp",{"_index":2645,"title":{},"body":{"injectables/TasksService.html":{}}}],["member.displayavatarurl",{"_index":2798,"title":{},"body":{"controllers/UserController.html":{}}}],["member.displayname",{"_index":2801,"title":{},"body":{"controllers/UserController.html":{}}}],["member.guild.id",{"_index":66,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{}}}],["member.guild.ownerid",{"_index":1771,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["member.id",{"_index":68,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.kick",{"_index":1535,"title":{},"body":{"injectables/GuildService.html":{}}}],["member.roles.add",{"_index":2744,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.add('1014066383912439809",{"_index":1323,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.add('1121823930085285938",{"_index":2743,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.add(role.id",{"_index":75,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["member.roles.add(verifiedroleid",{"_index":1321,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.cache.foreach((role",{"_index":2735,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1011513775054143632",{"_index":57,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1011563978956226560",{"_index":56,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1070116538083975309",{"_index":1528,"title":{},"body":{"injectables/GuildService.html":{}}}],["member.roles.cache.has('1121823930085285938",{"_index":59,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["member.roles.cache.has('1226585753253843014",{"_index":1316,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.remove",{"_index":1336,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.remove(role.id",{"_index":2742,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.timeout(parseint(duration",{"_index":2823,"title":{},"body":{"controllers/UserController.html":{}}}],["member.ts",{"_index":873,"title":{},"body":{"classes/DiscordGuildMember.html":{},"coverage.html":{}}}],["member.ts:11",{"_index":885,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:15",{"_index":883,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:18",{"_index":884,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:21",{"_index":888,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:24",{"_index":879,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:27",{"_index":881,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:8",{"_index":887,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.user",{"_index":2806,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.bot",{"_index":1297,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["member.user.globalname",{"_index":2802,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.id",{"_index":2799,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.username",{"_index":1296,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["member?.communicationdisableduntil?.tojson",{"_index":2800,"title":{},"body":{"controllers/UserController.html":{}}}],["members",{"_index":664,"title":{},"body":{"classes/CleanWfpMember.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["members.fetch(dbuser.userid.tostring",{"_index":2644,"title":{},"body":{"injectables/TasksService.html":{}}}],["members.fetch(user.id",{"_index":1359,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members.fetch(user.userid",{"_index":1315,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members.foreach(async",{"_index":54,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["members.map((member",{"_index":2796,"title":{},"body":{"controllers/UserController.html":{}}}],["members.push(member",{"_index":1529,"title":{},"body":{"injectables/GuildService.html":{}}}],["members.size",{"_index":2795,"title":{},"body":{"controllers/UserController.html":{}}}],["members/index.ts",{"_index":1229,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{}}}],["members/index.ts:132",{"_index":1257,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:150",{"_index":1244,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:23",{"_index":1236,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:37",{"_index":1247,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:55",{"_index":1240,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:65",{"_index":1250,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:76",{"_index":1253,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["memberstokick",{"_index":1533,"title":{},"body":{"injectables/GuildService.html":{}}}],["membersunfiltered",{"_index":1523,"title":{},"body":{"injectables/GuildService.html":{}}}],["membersunfiltered.foreach(async",{"_index":1525,"title":{},"body":{"injectables/GuildService.html":{}}}],["mentionable",{"_index":976,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["menu",{"_index":1429,"title":{},"body":{"modules/GuildModule.html":{},"license.html":{}}}],["menu/index.ts",{"_index":2068,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{}}}],["menu/index.ts:131",{"_index":2087,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:157",{"_index":2082,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:192",{"_index":2084,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:201",{"_index":2080,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:227",{"_index":2078,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:33",{"_index":2075,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:43",{"_index":2090,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["merchantability",{"_index":3866,"title":{},"body":{"license.html":{}}}],["mere",{"_index":3329,"title":{},"body":{"license.html":{}}}],["merging",{"_index":3737,"title":{},"body":{"license.html":{}}}],["message",{"_index":405,"title":{},"body":{"modules/BotModule.html":{},"classes/Channel.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["message).inguild",{"_index":868,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"miscellaneous/variables.html":{}}}],["message.attachments.map",{"_index":1414,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.attachments.map((attachment",{"_index":1396,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.attachments.size",{"_index":1412,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.author.bot",{"_index":2048,"title":{},"body":{"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{}}}],["message.author.id",{"_index":1388,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["message.channel",{"_index":1404,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.channelid",{"_index":1391,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"miscellaneous/variables.html":{}}}],["message.content",{"_index":1671,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["message.content.length",{"_index":1395,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.fetch",{"_index":2302,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.guildid",{"_index":1392,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["message.id",{"_index":1390,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.member.roles.cache.has",{"_index":869,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["message.message",{"_index":3974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message.message.guildid",{"_index":2306,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.message.inguild",{"_index":2303,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.partial",{"_index":2301,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.react('1194715694948946030",{"_index":1409,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.reactions.cache.map((reaction",{"_index":1399,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.reply",{"_index":947,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts",{"_index":931,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"coverage.html":{}}}],["message/index.ts:10",{"_index":1373,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message/index.ts:14",{"_index":937,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts:17",{"_index":1376,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message/index.ts:18",{"_index":935,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts:53",{"_index":1378,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message_deleted",{"_index":2021,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["messageactionrowcomponentbuilder",{"_index":3131,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["messagecontextmenucommandinteraction",{"_index":2212,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["messagecount",{"_index":1480,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["messagecountbucket",{"_index":1770,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["messagecounts",{"_index":1543,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagefromuserguard",{"_index":1380,"title":{"guards/MessageFromUserGuard.html":{}},"body":{"injectables/GuildMessageHandler.html":{},"guards/MessageFromUserGuard.html":{},"coverage.html":{}}}],["messageid",{"_index":1389,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["messageisdmguard",{"_index":939,"title":{"guards/MessageIsDmGuard.html":{}},"body":{"injectables/DmMessageHandler.html":{},"guards/MessageIsDmGuard.html":{},"coverage.html":{}}}],["messagemetadata",{"_index":1741,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["messagereaction",{"_index":1242,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["messagereaction).emoji.name",{"_index":3995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagereference",{"_index":2222,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["messages",{"_index":423,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/TargetUser.html":{},"injectables/TasksService.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{}}}],["messages.last().createdtimestamp",{"_index":616,"title":{},"body":{"controllers/ChannelController.html":{}}}],["messagesdeleted",{"_index":508,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["messagesperchannellastmonth",{"_index":1195,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperchannellastmonth(@param('guildid",{"_index":1205,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperchannellastmonth(guildid",{"_index":1197,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth",{"_index":1196,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth(@param('guildid",{"_index":1213,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth(guildid",{"_index":1201,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagestats",{"_index":1540,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagestats.reduce",{"_index":1560,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagestats.reduce((acc",{"_index":1545,"title":{},"body":{"injectables/GuildService.html":{}}}],["met",{"_index":3415,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1067,"title":{},"body":{"classes/Explorer.html":{},"injectables/GuildUserService.html":{},"dependencies.html":{}}}],["method",{"_index":1071,"title":{},"body":{"classes/Explorer.html":{}}}],["methods",{"_index":9,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["midnight",{"_index":2614,"title":{},"body":{"injectables/TasksService.html":{}}}],["minutes",{"_index":2609,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{}}}],["miscchannelid",{"_index":3175,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["miscellaneous",{"_index":3029,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misrepresentation",{"_index":3666,"title":{},"body":{"license.html":{}}}],["mit",{"_index":2675,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"index.html":{}}}],["mixin(channelidguardmixin",{"_index":3975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mixin(reactionemote",{"_index":3996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mock",{"_index":3018,"title":{},"body":{"dependencies.html":{}}}],["mod",{"_index":1261,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["modal",{"_index":758,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"guards/IsModalInteractionGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["modal.addcomponents(questioncomponentrow",{"_index":805,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.customid.split",{"_index":813,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.customid.startswith('community",{"_index":812,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.ismodalsubmit",{"_index":811,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.reply",{"_index":835,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modalactionrowcomponentbuilder",{"_index":748,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["modalbuilder",{"_index":749,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["modalfieldstransformpipe",{"_index":754,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modalsubmitinteraction",{"_index":2089,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["modannouncementdto",{"_index":2051,"title":{"classes/ModAnnouncementDto.html":{}},"body":{"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["modannouncementmodal",{"_index":2228,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["modchannelid",{"_index":2473,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["mode",{"_index":3090,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":3544,"title":{},"body":{"license.html":{}}}],["moderatemembers",{"_index":46,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["moderation",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["moderation/moderation.module",{"_index":1422,"title":{},"body":{"modules/GuildModule.html":{}}}],["moderationmodule",{"_index":130,"title":{"modules/ModerationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/ModerationModule.html":{},"modules.html":{},"overview.html":{}}}],["modification",{"_index":3285,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":3352,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3258,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":3500,"title":{},"body":{"license.html":{}}}],["modify",{"_index":3238,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":3320,"title":{},"body":{"license.html":{}}}],["modmessage",{"_index":2246,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["modrequest",{"_index":3054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modrequestcategoryselect",{"_index":2096,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["modrequestcategoryselect(guildid",{"_index":2176,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["modrequestcategoryselect(suffix",{"_index":3052,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modrequestflow",{"_index":1425,"title":{"classes/ModRequestFlow.html":{}},"body":{"modules/GuildModule.html":{},"classes/ModRequestFlow.html":{},"coverage.html":{}}}],["modrequestmenu",{"_index":2175,"title":{},"body":{"classes/ModRequestFlow.html":{},"miscellaneous/variables.html":{}}}],["modrequestmenuid",{"_index":2097,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modrequestmodal",{"_index":2102,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["modrequestmodal.addcomponents",{"_index":2146,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["modroleid",{"_index":2474,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["mods",{"_index":786,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["module",{"_index":92,"title":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":94,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mokka",{"_index":2522,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["month",{"_index":1199,"title":{},"body":{"controllers/GuildController.html":{}}}],["more",{"_index":1002,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildService.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"modules/UserModule.html":{},"index.html":{},"license.html":{}}}],["moreover",{"_index":3708,"title":{},"body":{"license.html":{}}}],["ms",{"_index":2261,"title":{},"body":{"classes/PingCommand.html":{}}}],["msg",{"_index":2288,"title":{},"body":{"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["msg.author.id",{"_index":2289,"title":{},"body":{"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["msg.createdtimestamp",{"_index":618,"title":{},"body":{"controllers/ChannelController.html":{}}}],["msg.deletable",{"_index":617,"title":{},"body":{"controllers/ChannelController.html":{}}}],["msgid",{"_index":2836,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["mumvoice",{"_index":2215,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["mumvoicecommandchatinput",{"_index":386,"title":{"classes/MumVoiceCommandChatInput.html":{}},"body":{"modules/BotModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["mumvoicecommandui",{"_index":387,"title":{"classes/MumVoiceCommandUi.html":{}},"body":{"modules/BotModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["mumvoicen",{"_index":2240,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["mumvoiceui",{"_index":2226,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["muten",{"_index":2690,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["myśliwiec",{"_index":3114,"title":{},"body":{"index.html":{}}}],["möchtest",{"_index":2677,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/UserToUser.html":{}}}],["n\\n${quotedmessage",{"_index":1678,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["nachricht",{"_index":2064,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["nachrichten",{"_index":2580,"title":{},"body":{"classes/TargetUser.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":3059,"title":{},"body":{"miscellaneous/functions.html":{}}}],["names",{"_index":693,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["napi",{"_index":1288,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["nature",{"_index":3513,"title":{},"body":{"license.html":{}}}],["nchannel",{"_index":1174,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setname(channel.name",{"_index":1180,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setparent(channel.parentid",{"_index":1179,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setposition(channel.position",{"_index":1178,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["necessary",{"_index":3874,"title":{},"body":{"license.html":{}}}],["need",{"_index":3406,"title":{},"body":{"license.html":{}}}],["needed",{"_index":2422,"title":{},"body":{"injectables/SelfService.html":{},"license.html":{}}}],["needhelpbutton",{"_index":942,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["needhelpbuttonid",{"_index":2098,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":2407,"title":{},"body":{"injectables/SelfService.html":{},"properties.html":{}}}],["nest",{"_index":3080,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":3118,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1047,"title":{},"body":{"interfaces/EventToLog.html":{},"guards/HasRequiredRank.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":1861,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{}}}],["nestjs/config",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":36,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"injectables/DmMessageHandler.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{}}}],["nestjs/core/dist/decorators/option/choice/choice",{"_index":2938,"title":{},"body":{"classes/UserToUser.html":{}}}],["nestjs/event",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1886,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1876,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3009,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["network",{"_index":3207,"title":{},"body":{"license.html":{}}}],["never",{"_index":2272,"title":{},"body":{"injectables/PrismaService.html":{}}}],["new",{"_index":216,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newmember",{"_index":1255,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newmember.guild.id",{"_index":1352,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newmember.user.username",{"_index":1350,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newrank",{"_index":1348,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["next",{"_index":3565,"title":{},"body":{"license.html":{}}}],["nicht",{"_index":687,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["node.js",{"_index":3073,"title":{},"body":{"index.html":{}}}],["non",{"_index":3353,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":3551,"title":{},"body":{"license.html":{}}}],["normal",{"_index":3369,"title":{},"body":{"license.html":{}}}],["normally",{"_index":3587,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":1106,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["notfoundexception('guild",{"_index":2286,"title":{},"body":{"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["nothing",{"_index":3720,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3341,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3335,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":3709,"title":{},"body":{"license.html":{}}}],["notify",{"_index":3705,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":3653,"title":{},"body":{"license.html":{}}}],["november",{"_index":3182,"title":{},"body":{"license.html":{}}}],["now",{"_index":908,"title":{},"body":{"classes/DiscordUser.html":{}}}],["nsfw",{"_index":424,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["null",{"_index":342,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":231,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["numbered",{"_index":3853,"title":{},"body":{"license.html":{}}}],["nummessages",{"_index":2841,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["nummessages.tostring",{"_index":2851,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["numreactions",{"_index":2843,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["numreactions.tostring",{"_index":2852,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["nur",{"_index":951,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["nutzer:in",{"_index":834,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{}}}],["oauth",{"_index":1952,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["oauth2",{"_index":3022,"title":{},"body":{"dependencies.html":{}}}],["oautherrordata",{"_index":1916,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["object",{"_index":611,"title":{},"body":{"controllers/ChannelController.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/LogEntry.html":{},"classes/RoleResponse.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.keys(colors",{"_index":1021,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["object.keys(data).foreach((key",{"_index":1215,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.keys(data).foreach(async",{"_index":1210,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.keys(exception.constraints).map((key",{"_index":719,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["object.keys(settings).foreach(async",{"_index":1645,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["object.values(data",{"_index":1209,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.values(messagecounts[channelid",{"_index":1555,"title":{},"body":{"injectables/GuildService.html":{}}}],["obligate",{"_index":3830,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":3569,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":3457,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":3550,"title":{},"body":{"license.html":{}}}],["occur",{"_index":2010,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["occurred",{"_index":1988,"title":{},"body":{"classes/LogEntry.html":{}}}],["occurring",{"_index":3717,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":3618,"title":{},"body":{"license.html":{}}}],["offer",{"_index":3234,"title":{},"body":{"license.html":{}}}],["offered",{"_index":3576,"title":{},"body":{"license.html":{}}}],["offering",{"_index":3554,"title":{},"body":{"license.html":{}}}],["official",{"_index":3355,"title":{},"body":{"license.html":{}}}],["offset",{"_index":232,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["old",{"_index":1991,"title":{},"body":{"classes/LogEntry.html":{}}}],["old/new",{"_index":1993,"title":{},"body":{"classes/LogEntry.html":{}}}],["older",{"_index":3271,"title":{},"body":{"license.html":{}}}],["oldmember",{"_index":1258,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["oldrank",{"_index":1346,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["omit",{"_index":1124,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntryDto.html":{},"classes/RestrictedChannelDto.html":{},"classes/SettingsDto.html":{}}}],["omit(['guildid",{"_index":1655,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["on('guildmemberadd",{"_index":1239,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('guildmemberremove",{"_index":1249,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('guildmemberupdate",{"_index":1256,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('interactioncreate",{"_index":732,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/initGuildCommand.html":{}}}],["on('interactioncreate')@useguards(ismodalinteractionguard",{"_index":741,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["on('messagecreate",{"_index":945,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{}}}],["on('messagecreate')@useguards(messagefromuserguard",{"_index":1375,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["on('messagecreate')@useguards(messageisdmguard",{"_index":934,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["on('messagereactionadd",{"_index":1302,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('messagereactionadd')@useguards(undefined",{"_index":1243,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('ready",{"_index":1246,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["onadminroleidchanged",{"_index":1718,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["onadminroleidchanged(payload",{"_index":1747,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["onbuttoncloseticket",{"_index":2071,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onbuttoncloseticket(interaction",{"_index":2081,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onbuttonneedhelpbutton",{"_index":2072,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onbuttonneedhelpbutton(interaction",{"_index":2083,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onbuttonpress",{"_index":726,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["onbuttonpress(interaction",{"_index":730,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["once",{"_index":1514,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["once('ready",{"_index":1502,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["oncleanwfpmembers",{"_index":654,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncleanwfpmembers(@interactionevent",{"_index":671,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncleanwfpmembers(interaction",{"_index":657,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncommunityquestion",{"_index":727,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["oncommunityquestion(interaction",{"_index":734,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["oncomplete",{"_index":2628,"title":{},"body":{"injectables/TasksService.html":{}}}],["one",{"_index":2002,"title":{},"body":{"classes/LogEntry.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["onevent",{"_index":210,"title":{},"body":{"injectables/AppService.html":{},"injectables/GuildUserService.html":{}}}],["onevent('settings.role.*.changed",{"_index":1748,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["oninitguild",{"_index":3120,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninitguild(@interactionevent",{"_index":3135,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninitguild(interaction",{"_index":3124,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninteraction",{"_index":728,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/initGuildCommand.html":{}}}],["oninteraction(interaction",{"_index":3126,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninteraction(undefined",{"_index":738,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["onmenuselect",{"_index":2073,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onmenuselect(interaction",{"_index":2085,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onmessage",{"_index":1370,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["onmessage(interaction",{"_index":2208,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["onmessage(message",{"_index":1374,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["onmodalsubmit",{"_index":2074,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandUi.html":{}}}],["onmodalsubmit(interaction",{"_index":2088,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["onmoduleinit",{"_index":2265,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onplaycommand",{"_index":2253,"title":{},"body":{"classes/PingCommand.html":{},"classes/PurgeCommand.html":{}}}],["onplaycommand(interaction",{"_index":2278,"title":{},"body":{"classes/PurgeCommand.html":{}}}],["onready",{"_index":1232,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["onroleadd",{"_index":11,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onroleadd(@interactionevent",{"_index":52,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onroleadd(interaction",{"_index":24,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onshowinfo",{"_index":2449,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["onshowinfo(interaction",{"_index":2451,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["ontick",{"_index":1169,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["onticketsystemsetupcommand",{"_index":2665,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["onticketsystemsetupcommand(interaction",{"_index":2667,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["ontimeoutcommand",{"_index":2681,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["ontimeoutcommand(interaction",{"_index":2683,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["onunverifybyrole",{"_index":2725,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["onunverifybyrole(@ia",{"_index":2731,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["onunverifybyrole(baseinteraction",{"_index":2727,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["open",{"_index":3101,"title":{},"body":{"index.html":{},"classes/initGuildCommand.html":{}}}],["openintrochannelid",{"_index":2475,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["operate",{"_index":3891,"title":{},"body":{"license.html":{}}}],["operated",{"_index":3559,"title":{},"body":{"license.html":{}}}],["operating",{"_index":3380,"title":{},"body":{"license.html":{}}}],["operation",{"_index":3476,"title":{},"body":{"license.html":{}}}],["operator",{"_index":3266,"title":{},"body":{"license.html":{}}}],["opportunity",{"_index":3837,"title":{},"body":{"license.html":{}}}],["option",{"_index":3649,"title":{},"body":{"license.html":{}}}],["optional",{"_index":23,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["options",{"_index":2177,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/UserToUser.html":{},"license.html":{}}}],["order",{"_index":1493,"title":{},"body":{"injectables/GuildService.html":{},"license.html":{}}}],["orderby",{"_index":356,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{}}}],["organization",{"_index":3733,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":3301,"title":{},"body":{"license.html":{}}}],["origin",{"_index":3667,"title":{},"body":{"license.html":{}}}],["original",{"_index":3669,"title":{},"body":{"license.html":{}}}],["others",{"_index":3427,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":3425,"title":{},"body":{"license.html":{}}}],["out",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"license.html":{},"overview.html":{}}}],["outcome",{"_index":674,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['memberstokick",{"_index":694,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['memberstokick'].length.tostring",{"_index":692,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['unkickablemembers",{"_index":700,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["outcome['unkickablemembers'].length.tostring",{"_index":699,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["outed",{"_index":2788,"title":{},"body":{"controllers/UserController.html":{}}}],["output",{"_index":3419,"title":{},"body":{"license.html":{}}}],["outside",{"_index":3439,"title":{},"body":{"license.html":{}}}],["overview",{"_index":3945,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":490,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["overwrites",{"_index":464,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["owned",{"_index":3764,"title":{},"body":{"license.html":{}}}],["ownedranks",{"_index":1819,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["ownedranks.includes(requiredrank",{"_index":1821,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["owner",{"_index":1772,"title":{},"body":{"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["owner'].includes(user.rank",{"_index":2307,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["package",{"_index":3000,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packaged",{"_index":3506,"title":{},"body":{"license.html":{}}}],["packaging",{"_index":3370,"title":{},"body":{"license.html":{}}}],["pagination",{"_index":328,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["pagination.limit",{"_index":362,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["pagination.offset",{"_index":359,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["paper",{"_index":3926,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":3696,"title":{},"body":{"license.html":{}}}],["paragraphs",{"_index":3776,"title":{},"body":{"license.html":{}}}],["param",{"_index":235,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"interfaces/EventToLog.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"guards/HasRequiredRank.html":{},"classes/ModAnnouncementDto.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/TargetUser.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["param('channelid",{"_index":596,"title":{},"body":{"controllers/ChannelController.html":{}}}],["param('duration",{"_index":2821,"title":{},"body":{"controllers/UserController.html":{}}}],["param('guildid",{"_index":263,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["param('roleid",{"_index":2354,"title":{},"body":{"controllers/RoleController.html":{}}}],["param('userid",{"_index":2808,"title":{},"body":{"controllers/UserController.html":{}}}],["param({description",{"_index":839,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/TargetUser.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["param({name",{"_index":2057,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["parameter",{"_index":3980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["paramtype",{"_index":847,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/TargetUser.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["paramtype.string",{"_index":848,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["paramtype.user",{"_index":2582,"title":{},"body":{"classes/TargetUser.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["parent",{"_index":458,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{}}}],["parentid",{"_index":425,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["parseint(_days",{"_index":2913,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(_hours",{"_index":2915,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(_minutes",{"_index":2916,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(questionid",{"_index":783,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["parseintpipe",{"_index":236,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["part",{"_index":3303,"title":{},"body":{"license.html":{}}}],["partial",{"_index":1617,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["partials",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.channel",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.guildmember",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.guildscheduledevent",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.message",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.reaction",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.threadmember",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.user",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["particular",{"_index":3359,"title":{},"body":{"license.html":{}}}],["parties",{"_index":3328,"title":{},"body":{"license.html":{}}}],["parts",{"_index":3405,"title":{},"body":{"license.html":{}}}],["party",{"_index":3560,"title":{},"body":{"license.html":{}}}],["party's",{"_index":3739,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1973,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":1887,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["passportstrategy",{"_index":1974,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1965,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["password",{"_index":3640,"title":{},"body":{"license.html":{}}}],["patent",{"_index":3695,"title":{},"body":{"license.html":{}}}],["patents",{"_index":3759,"title":{},"body":{"license.html":{}}}],["path",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":1750,"title":{},"body":{"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["payload.sub",{"_index":1981,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["payment",{"_index":3810,"title":{},"body":{"license.html":{}}}],["peer",{"_index":3572,"title":{},"body":{"license.html":{}}}],["peers",{"_index":3575,"title":{},"body":{"license.html":{}}}],["per",{"_index":468,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{}}}],["perform",{"_index":1801,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["performance",{"_index":3870,"title":{},"body":{"license.html":{}}}],["performed",{"_index":1985,"title":{},"body":{"classes/LogEntry.html":{}}}],["performing",{"_index":3392,"title":{},"body":{"license.html":{}}}],["periodically",{"_index":2591,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["permanently",{"_index":3704,"title":{},"body":{"license.html":{}}}],["permission",{"_index":463,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"license.html":{}}}],["permissionflagsbits",{"_index":1009,"title":{},"body":{"classes/EditRoleData.html":{},"classes/ModRequestFlow.html":{},"classes/RoleResponse.html":{}}}],["permissionflagsbits.addreactions",{"_index":2121,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["permissionflagsbits.attachfiles",{"_index":2122,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["permissionflagsbits.readmessagehistory",{"_index":2120,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["permissionflagsbits.sendmessages",{"_index":2119,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["permissionflagsbits.viewchannel",{"_index":2116,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["permissionoverwrite",{"_index":461,"title":{"classes/PermissionOverwrite.html":{}},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["permissionoverwrites",{"_index":426,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{}}}],["permissionoverwrites.create(user_id",{"_index":1573,"title":{},"body":{"injectables/GuildService.html":{}}}],["permissionoverwrites.delete(user_id",{"_index":1576,"title":{},"body":{"injectables/GuildService.html":{}}}],["permissionresolvable",{"_index":996,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["permissions",{"_index":977,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["permissive",{"_index":3488,"title":{},"body":{"license.html":{}}}],["permit",{"_index":3523,"title":{},"body":{"license.html":{}}}],["permits",{"_index":3256,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":3191,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":3623,"title":{},"body":{"license.html":{}}}],["person",{"_index":2577,"title":{},"body":{"classes/TargetUser.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["personal",{"_index":3585,"title":{},"body":{"license.html":{}}}],["pertinent",{"_index":3828,"title":{},"body":{"license.html":{}}}],["physical",{"_index":3532,"title":{},"body":{"license.html":{}}}],["physically",{"_index":3548,"title":{},"body":{"license.html":{}}}],["pick",{"_index":3065,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pieces",{"_index":3225,"title":{},"body":{"license.html":{}}}],["ping",{"_index":2256,"title":{},"body":{"classes/PingCommand.html":{}}}],["pingcommand",{"_index":380,"title":{"classes/PingCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/PingCommand.html":{},"coverage.html":{}}}],["pipe",{"_index":1639,"title":{},"body":{"injectables/GuildSettingsService.html":{},"injectables/JwtAuthService.html":{}}}],["pipe(settings",{"_index":1654,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["place",{"_index":3556,"title":{},"body":{"license.html":{}}}],["plain",{"_index":3064,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintoinstance",{"_index":246,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["plaintoinstance(cls",{"_index":3063,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintoinstance(discordguildmember",{"_index":2797,"title":{},"body":{"controllers/UserController.html":{}}}],["plaintoinstance(guildautodeletechanneldto",{"_index":1116,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["plaintoinstance(logentrydto",{"_index":274,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["plaintoinstance(selfdto",{"_index":1701,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["plaintoinstance(settingsdto",{"_index":1596,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["please",{"_index":784,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["plus",{"_index":3743,"title":{},"body":{"license.html":{}}}],["pointer",{"_index":3919,"title":{},"body":{"license.html":{}}}],["portion",{"_index":3579,"title":{},"body":{"license.html":{}}}],["position",{"_index":473,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["possesses",{"_index":3545,"title":{},"body":{"license.html":{}}}],["possession",{"_index":3503,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":3894,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2009,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["possibleanswers",{"_index":2503,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["post",{"_index":565,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["post('/')@apioperation({summary",{"_index":2327,"title":{},"body":{"controllers/RoleController.html":{}}}],["post(':channelid/clean",{"_index":609,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/clean')@apioperation({summary",{"_index":541,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/slowmode",{"_index":602,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/slowmode')@apioperation({summary",{"_index":562,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':userid/ban",{"_index":2807,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/ban')@apioperation({summary",{"_index":2770,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/kick",{"_index":2815,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/kick')@apioperation({summary",{"_index":2777,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/purge",{"_index":2828,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/purge')@apioperation({summary",{"_index":2780,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/timeout/:duration",{"_index":2820,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/timeout/:duration')@apioperation({summary",{"_index":2787,"title":{},"body":{"controllers/UserController.html":{}}}],["post('refresh",{"_index":1851,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["power",{"_index":3469,"title":{},"body":{"license.html":{}}}],["practical",{"_index":3209,"title":{},"body":{"license.html":{}}}],["practice",{"_index":3781,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":3199,"title":{},"body":{"license.html":{}}}],["precise",{"_index":3280,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":3740,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":3351,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":534,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"classes/SettingsDto.html":{},"controllers/UserController.html":{}}}],["prefixed",{"_index":3985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["present",{"_index":3845,"title":{},"body":{"license.html":{}}}],["presents",{"_index":3346,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":3663,"title":{},"body":{"license.html":{}}}],["pretty",{"_index":1039,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["prevented",{"_index":3616,"title":{},"body":{"license.html":{}}}],["previous",{"_index":3742,"title":{},"body":{"license.html":{}}}],["price",{"_index":3221,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":3811,"title":{},"body":{"license.html":{}}}],["print",{"_index":1040,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["prior",{"_index":3706,"title":{},"body":{"license.html":{}}}],["prisma",{"_index":41,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/SelfService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["prisma.jsonarray",{"_index":69,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["prisma.jsonarray).foreach",{"_index":2741,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["prisma.service",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/SelfService.html":{}}}],["prisma/client",{"_index":42,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/PrismaService.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":2263,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaserver",{"_index":3123,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["prismaservice",{"_index":16,"title":{"injectables/PrismaService.html":{}},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"injectables/PrismaService.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"overview.html":{}}}],["private",{"_index":50,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["problems",{"_index":3849,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":3610,"title":{},"body":{"license.html":{}}}],["procuring",{"_index":3801,"title":{},"body":{"license.html":{}}}],["produce",{"_index":638,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"license.html":{}}}],["product",{"_index":3533,"title":{},"body":{"license.html":{}}}],["production",{"_index":3092,"title":{},"body":{"index.html":{}}}],["products",{"_index":3812,"title":{},"body":{"license.html":{}}}],["program",{"_index":3217,"title":{},"body":{"license.html":{}}}],["program's",{"_index":3480,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":3937,"title":{},"body":{"license.html":{}}}],["programming",{"_index":3360,"title":{},"body":{"license.html":{}}}],["programs",{"_index":3226,"title":{},"body":{"license.html":{}}}],["progressive",{"_index":3072,"title":{},"body":{"index.html":{}}}],["prohibit",{"_index":3437,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":3465,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":3806,"title":{},"body":{"license.html":{}}}],["project",{"_index":1284,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"index.html":{}}}],["prominent",{"_index":3347,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":3338,"title":{},"body":{"license.html":{}}}],["promise",{"_index":234,"title":{},"body":{"controllers/AuditLogController.html":{},"interfaces/BotEvent.html":{},"controllers/ChannelController.html":{},"classes/CommandValidationFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SpecialCommand.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1333,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["promise.all",{"_index":1177,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildUserController.html":{},"injectables/SelfService.html":{},"classes/initGuildCommand.html":{}}}],["promoted",{"_index":1345,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["propagate",{"_index":3310,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":3723,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":3321,"title":{},"body":{"license.html":{}}}],["properties",{"_index":202,"title":{"properties.html":{}},"body":{"injectables/AppService.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":3586,"title":{},"body":{"license.html":{}}}],["protect",{"_index":3229,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":3448,"title":{},"body":{"license.html":{}}}],["protection",{"_index":3492,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":3638,"title":{},"body":{"license.html":{}}}],["prove",{"_index":3871,"title":{},"body":{"license.html":{}}}],["provide",{"_index":3267,"title":{},"body":{"license.html":{}}}],["provided",{"_index":1666,"title":{},"body":{"injectables/GuildSettingsService.html":{},"controllers/JwtAuthController.html":{},"license.html":{}}}],["provider",{"_index":1058,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.name",{"_index":1070,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.prototype.handler",{"_index":1078,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.prototype.hasownproperty(bot_event_handler_name",{"_index":1076,"title":{},"body":{"classes/Explorer.html":{}}}],["provider[bot_event_handler_name",{"_index":1073,"title":{},"body":{"classes/Explorer.html":{}}}],["providers",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["provides",{"_index":3929,"title":{},"body":{"license.html":{}}}],["providing",{"_index":3838,"title":{},"body":{"license.html":{}}}],["provision",{"_index":3654,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":3701,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":3857,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":3860,"title":{},"body":{"license.html":{}}}],["public",{"_index":1051,"title":{},"body":{"classes/Explorer.html":{},"license.html":{}}}],["publicity",{"_index":3670,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":3269,"title":{},"body":{"license.html":{}}}],["publish",{"_index":3484,"title":{},"body":{"license.html":{}}}],["published",{"_index":3272,"title":{},"body":{"license.html":{}}}],["purge",{"_index":2293,"title":{},"body":{"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["purgecommand",{"_index":415,"title":{"classes/PurgeCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/PurgeCommand.html":{},"coverage.html":{}}}],["purged",{"_index":2762,"title":{},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["purgeuserfromguild",{"_index":2767,"title":{},"body":{"controllers/UserController.html":{}}}],["purgeuserfromguild(guildid",{"_index":2779,"title":{},"body":{"controllers/UserController.html":{}}}],["purguser",{"_index":2282,"title":{},"body":{"classes/PurgeCommand.html":{}}}],["purpose",{"_index":3389,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":3590,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":3797,"title":{},"body":{"license.html":{}}}],["put",{"_index":566,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{}}}],["put(':channelid",{"_index":598,"title":{},"body":{"controllers/ChannelController.html":{}}}],["put(':channelid')@apioperation({summary",{"_index":547,"title":{},"body":{"controllers/ChannelController.html":{}}}],["put(':roleid",{"_index":2353,"title":{},"body":{"controllers/RoleController.html":{}}}],["put(':roleid')@apioperation({summary",{"_index":2339,"title":{},"body":{"controllers/RoleController.html":{}}}],["put()@httpcode(httpstatuscode.accepted",{"_index":1587,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["putsettings",{"_index":1582,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["putsettings(guildid",{"_index":1585,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["qualify",{"_index":3713,"title":{},"body":{"license.html":{}}}],["quality",{"_index":3869,"title":{},"body":{"license.html":{}}}],["query",{"_index":237,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/JwtAuthController.html":{}}}],["query('limit",{"_index":265,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["query('offset",{"_index":266,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["query(validationpipe",{"_index":264,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["question",{"_index":735,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{}}}],["question.answers",{"_index":816,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command",{"_index":395,"title":{},"body":{"modules/BotModule.html":{}}}],["question.command.ts",{"_index":725,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["question.command.ts:120",{"_index":742,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:41",{"_index":729,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:48",{"_index":737,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:73",{"_index":733,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.description",{"_index":767,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.dto",{"_index":753,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.dto.ts",{"_index":838,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:11",{"_index":846,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["question.dto.ts:20",{"_index":844,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["question.form.dto",{"_index":761,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.form.dto.ts",{"_index":850,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["question.form.dto.ts:6",{"_index":853,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["question.question",{"_index":778,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questioncomponentrow",{"_index":802,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionfield",{"_index":789,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionid",{"_index":765,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionid.id",{"_index":770,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["quote",{"_index":1644,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["quote(it",{"_index":1674,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["quotedmessage",{"_index":1670,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["rambda",{"_index":1640,"title":{},"body":{"injectables/GuildSettingsService.html":{},"dependencies.html":{}}}],["rank",{"_index":252,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"classes/SelfDto-1.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["rank(s",{"_index":1795,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.decorator",{"_index":256,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rank.decorator.ts",{"_index":2986,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank.guard",{"_index":260,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rank.guard.ts",{"_index":1791,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank.guard.ts:21",{"_index":1798,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.guard.ts:33",{"_index":1799,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.new",{"_index":1299,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ranks",{"_index":1822,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["rate",{"_index":467,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["ratelimitperuser",{"_index":427,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["raw",{"_index":472,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["rawposition",{"_index":428,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["re)created",{"_index":1276,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["react",{"_index":3952,"title":{},"body":{"properties.html":{}}}],["reactedmemberismodorhigherguard",{"_index":1252,"title":{"guards/ReactedMemberIsModOrHigherGuard.html":{}},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["reaction",{"_index":1245,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"miscellaneous/variables.html":{}}}],["reaction.count",{"_index":1402,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["reaction.emoji.name",{"_index":1322,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.emoji.tostring",{"_index":1401,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["reaction.fetch",{"_index":1305,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.message",{"_index":1342,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.message.author.id",{"_index":1308,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.guild.channels.fetch",{"_index":1338,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.guildid",{"_index":1309,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.id",{"_index":1313,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.partial",{"_index":1304,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.remove",{"_index":1343,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction_added",{"_index":2022,"title":{},"body":{"classes/LogEntry.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/variables.html":{}}}],["reaction_removed",{"_index":2023,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["reactionchannelidguard",{"_index":1263,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reactionchannelidguard('1121822614374060175",{"_index":1303,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reactionchannelidguard('1226574989147508746",{"_index":1353,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reactionemote",{"_index":3993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reactionemoteguard",{"_index":1266,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reactions",{"_index":1743,"title":{},"body":{"injectables/GuildUserService.html":{},"classes/UserInfoUiCommand.html":{}}}],["read",{"_index":3109,"title":{},"body":{"index.html":{}}}],["readable",{"_index":3529,"title":{},"body":{"license.html":{}}}],["readily",{"_index":3786,"title":{},"body":{"license.html":{}}}],["reading",{"_index":3642,"title":{},"body":{"license.html":{}}}],["readmessagehistory",{"_index":1575,"title":{},"body":{"injectables/GuildService.html":{}}}],["readonly",{"_index":222,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["ready",{"_index":1505,"title":{},"body":{"injectables/GuildService.html":{}}}],["reason",{"_index":280,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["reasonable",{"_index":3546,"title":{},"body":{"license.html":{}}}],["receipt",{"_index":3711,"title":{},"body":{"license.html":{}}}],["receive",{"_index":3224,"title":{},"body":{"license.html":{}}}],["received",{"_index":3509,"title":{},"body":{"license.html":{}}}],["receives",{"_index":3728,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":3803,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":3622,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":3794,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":3299,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":3356,"title":{},"body":{"license.html":{}}}],["record",{"_index":1544,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["redirect_uri",{"_index":1941,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["redistribute",{"_index":3912,"title":{},"body":{"license.html":{}}}],["referring",{"_index":3220,"title":{},"body":{"license.html":{}}}],["refers",{"_index":3288,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":3025,"title":{},"body":{"dependencies.html":{}}}],["reflect.getmetadata(bot_event_key",{"_index":1075,"title":{},"body":{"classes/Explorer.html":{}}}],["reflector",{"_index":1797,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["refrain",{"_index":3832,"title":{},"body":{"license.html":{}}}],["refresh",{"_index":1889,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["refresh_token",{"_index":1850,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshjwtguard",{"_index":1857,"title":{"injectables/RefreshJwtGuard.html":{}},"body":{"controllers/JwtAuthController.html":{},"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["refreshjwtstrategy",{"_index":1881,"title":{"injectables/RefreshJwtStrategy.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/RefreshJwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtoken",{"_index":1843,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["refreshtoken(@req",{"_index":1867,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshtoken(req",{"_index":1848,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshtoken(userid",{"_index":1910,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["regard",{"_index":3648,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":3505,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":3407,"title":{},"body":{"license.html":{}}}],["registercommandoptions",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["rein",{"_index":2150,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["reinstated",{"_index":3700,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":3440,"title":{},"body":{"license.html":{}}}],["relative",{"_index":1003,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["released",{"_index":3277,"title":{},"body":{"license.html":{}}}],["releasing",{"_index":3262,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":3498,"title":{},"body":{"license.html":{}}}],["relicensing",{"_index":3278,"title":{},"body":{"license.html":{}}}],["relying",{"_index":3785,"title":{},"body":{"license.html":{}}}],["remain",{"_index":3568,"title":{},"body":{"license.html":{}}}],["remains",{"_index":3218,"title":{},"body":{"license.html":{}}}],["remote",{"_index":3834,"title":{},"body":{"license.html":{}}}],["remotely",{"_index":3836,"title":{},"body":{"license.html":{}}}],["removal",{"_index":3651,"title":{},"body":{"license.html":{}}}],["remove",{"_index":3650,"title":{},"body":{"license.html":{}}}],["removecommandsbefore",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["removemember",{"_index":1233,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["removemember(member",{"_index":1248,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["removing",{"_index":1329,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["rendered",{"_index":3886,"title":{},"body":{"license.html":{}}}],["repair",{"_index":3876,"title":{},"body":{"license.html":{}}}],["replace",{"_index":2565,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('x",{"_index":2563,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('y",{"_index":2561,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('{message",{"_index":1677,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["replace('{user",{"_index":1675,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["reply",{"_index":2221,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["reply(optional",{"_index":2059,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["replyto",{"_index":2058,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["replytomessage",{"_index":2054,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["report",{"_index":680,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["repository",{"_index":3083,"title":{},"body":{"index.html":{}}}],["represent",{"_index":3608,"title":{},"body":{"license.html":{}}}],["req",{"_index":1813,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"controllers/UserController.html":{}}}],["req.params.guildid",{"_index":1818,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["req.user.userid",{"_index":1816,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["request",{"_index":1428,"title":{},"body":{"modules/GuildModule.html":{},"guards/HasRequiredRank.html":{},"classes/ModRequestFlow.html":{},"controllers/SelfController.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.path",{"_index":3984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":3978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.guildid",{"_index":2805,"title":{},"body":{"controllers/UserController.html":{}}}],["requestguilduser",{"_index":2984,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["requestuser",{"_index":1686,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":3400,"title":{},"body":{"license.html":{}}}],["required",{"_index":259,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/TargetUser.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["required_rank_key",{"_index":1806,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredpoints",{"_index":2317,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["requiredrank",{"_index":254,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredrank(rank.member",{"_index":261,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["requiredrank(rank.mod",{"_index":586,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["requirement",{"_index":3499,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":3571,"title":{},"body":{"license.html":{}}}],["requires",{"_index":3265,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":3305,"title":{},"body":{"license.html":{}}}],["reset",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolved",{"_index":3596,"title":{},"body":{"license.html":{}}}],["respect",{"_index":3473,"title":{},"body":{"license.html":{}}}],["response",{"_index":634,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["response.data.access_token",{"_index":1961,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["response.sendstatus(httpstatus.bad_request",{"_index":650,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["response.sendstatus(httpstatus.forbidden",{"_index":1225,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["response.sendstatus(httpstatus.internal_server_error",{"_index":2446,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["response.statusmessage",{"_index":648,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["responsible",{"_index":2379,"title":{},"body":{"controllers/SelfController.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["restricted",{"_index":390,"title":{},"body":{"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["restrictedchanneldto",{"_index":2315,"title":{"classes/RestrictedChannelDto.html":{}},"body":{"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["restrictedchannels",{"_index":1445,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/RestrictedChannelDto.html":{}}}],["restrictedchannelservice",{"_index":1461,"title":{},"body":{"injectables/GuildService.html":{}}}],["restricting",{"_index":3466,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":3687,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":3686,"title":{},"body":{"license.html":{}}}],["result",{"_index":3254,"title":{},"body":{"license.html":{}}}],["result.data.map((it",{"_index":273,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["result.total",{"_index":271,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["resulting",{"_index":3252,"title":{},"body":{"license.html":{}}}],["results",{"_index":79,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":3626,"title":{},"body":{"license.html":{}}}],["retrieving",{"_index":1029,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["return",{"_index":58,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["reviewing",{"_index":3898,"title":{},"body":{"license.html":{}}}],["revised",{"_index":3843,"title":{},"body":{"license.html":{}}}],["right",{"_index":3620,"title":{},"body":{"license.html":{}}}],["rights",{"_index":3230,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3868,"title":{},"body":{"license.html":{}}}],["role",{"_index":493,"title":{},"body":{"classes/Channel.html":{},"classes/CleanWfpMember.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/UnverifyByRoleCommand.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["role.command.ts",{"_index":7,"title":{},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["role.command.ts:17",{"_index":18,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["role.command.ts:23",{"_index":28,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["role.conmand.ts",{"_index":2724,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["role.conmand.ts:16",{"_index":2726,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.conmand.ts:22",{"_index":2728,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.delete",{"_index":2360,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.edit(roledata",{"_index":2356,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.id",{"_index":2737,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.name",{"_index":2352,"title":{},"body":{"controllers/RoleController.html":{}}}],["role/role.controller",{"_index":2202,"title":{},"body":{"modules/ModerationModule.html":{}}}],["role_created",{"_index":2024,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["role_deleted",{"_index":2025,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["role_updated",{"_index":2026,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["rolecontroller",{"_index":2200,"title":{"controllers/RoleController.html":{}},"body":{"modules/ModerationModule.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["roledata",{"_index":2326,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleid",{"_index":2331,"title":{},"body":{"controllers/RoleController.html":{},"classes/initGuildCommand.html":{}}}],["roleresponse",{"_index":1010,"title":{"classes/RoleResponse.html":{}},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{}}}],["roleresponseschema",{"_index":1028,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolerows",{"_index":3166,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["roles",{"_index":61,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["roles.cache.has",{"_index":1783,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["roles.cache.has((await",{"_index":1785,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["roles.fetch('1121823930085285938",{"_index":1524,"title":{},"body":{"injectables/GuildService.html":{}}}],["roles.foreach",{"_index":1365,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["roles.foreach((role",{"_index":71,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["roles.push",{"_index":2736,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["roleselectmenubuilder",{"_index":3132,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["roleselectmenuinteraction",{"_index":3128,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["rolesresponseschema",{"_index":1030,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rom",{"_index":3629,"title":{},"body":{"license.html":{}}}],["route",{"_index":3988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routermodule",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule.register",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/controller(http",{"_index":1792,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["row",{"_index":774,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/initGuildCommand.html":{}}}],["royalty",{"_index":3747,"title":{},"body":{"license.html":{}}}],["rules",{"_index":3637,"title":{},"body":{"license.html":{}}}],["run",{"_index":2590,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"index.html":{},"license.html":{}}}],["running",{"_index":3268,"title":{},"body":{"license.html":{}}}],["runs",{"_index":1271,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["rust",{"_index":1287,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["rxjs",{"_index":1919,"title":{},"body":{"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["rüber",{"_index":2528,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["safest",{"_index":3914,"title":{},"body":{"license.html":{}}}],["sale",{"_index":3757,"title":{},"body":{"license.html":{}}}],["same",{"_index":3409,"title":{},"body":{"license.html":{}}}],["satisfy",{"_index":3570,"title":{},"body":{"license.html":{}}}],["saying",{"_index":3566,"title":{},"body":{"license.html":{}}}],["scalable",{"_index":3077,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["schema",{"_index":610,"title":{},"body":{"controllers/ChannelController.html":{},"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/UserController.html":{}}}],["schenkt",{"_index":2529,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["schiebt",{"_index":2525,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["schließen",{"_index":2135,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["schon",{"_index":2159,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["school",{"_index":3938,"title":{},"body":{"license.html":{}}}],["schreibe",{"_index":2236,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["scope",{"_index":1943,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["scripts",{"_index":3386,"title":{},"body":{"license.html":{}}}],["secondarily",{"_index":3312,"title":{},"body":{"license.html":{}}}],["secondary",{"_index":3239,"title":{},"body":{"license.html":{}}}],["seconds",{"_index":498,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["secret",{"_index":1894,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["secretorkey",{"_index":1978,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["section",{"_index":3444,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3527,"title":{},"body":{"license.html":{}}}],["see",{"_index":1802,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/SelfController.html":{},"modules/UserModule.html":{},"license.html":{}}}],["select",{"_index":355,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"classes/initGuildCommand.html":{}}}],["selectguild",{"_index":2191,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["selectguildmenu",{"_index":2099,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectguildmenu(guilds",{"_index":2183,"title":{},"body":{"classes/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["selection",{"_index":2187,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["selection.values[0",{"_index":2195,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["selectioninteraction",{"_index":2186,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["selectioninteraction.awaitmessagecomponent",{"_index":2188,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["selectmenu",{"_index":3053,"title":{},"body":{"miscellaneous/functions.html":{}}}],["self.controller",{"_index":2869,"title":{},"body":{"modules/UserModule.html":{}}}],["self.controller.ts",{"_index":2868,"title":{},"body":{"modules/UserModule.html":{}}}],["self.dto",{"_index":2387,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{}}}],["self.service",{"_index":2389,"title":{},"body":{"controllers/SelfController.html":{},"modules/UserModule.html":{}}}],["self.service.ts",{"_index":2386,"title":{},"body":{"controllers/SelfController.html":{}}}],["selfcontroller",{"_index":2375,"title":{"controllers/SelfController.html":{}},"body":{"controllers/SelfController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["selfdto",{"_index":1087,"title":{"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}},"body":{"classes/Guild.html":{},"controllers/GuildUserController.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"coverage.html":{}}}],["selfservice",{"_index":1882,"title":{"injectables/SelfService.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["sell",{"_index":3773,"title":{},"body":{"license.html":{}}}],["selling",{"_index":3756,"title":{},"body":{"license.html":{}}}],["semiconductor",{"_index":3292,"title":{},"body":{"license.html":{}}}],["send",{"_index":823,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["senddirectmessagetouserexception",{"_index":2436,"title":{"classes/SendDirectMessageToUserException.html":{}},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["senddirectmessagetouserexception(guildid",{"_index":2826,"title":{},"body":{"controllers/UserController.html":{}}}],["senddirectmessagetouserexceptionfilter",{"_index":2445,"title":{"classes/SendDirectMessageToUserExceptionFilter.html":{}},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"coverage.html":{}}}],["sends",{"_index":2216,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["sent",{"_index":2714,"title":{},"body":{"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["separable",{"_index":3578,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3511,"title":{},"body":{"license.html":{}}}],["separately",{"_index":3508,"title":{},"body":{"license.html":{}}}],["server",{"_index":668,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"index.html":{},"license.html":{}}}],["servers",{"_index":3253,"title":{},"body":{"license.html":{}}}],["serves",{"_index":3374,"title":{},"body":{"license.html":{}}}],["service",{"_index":2406,"title":{},"body":{"injectables/SelfService.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["servicing",{"_index":3875,"title":{},"body":{"license.html":{}}}],["set",{"_index":403,"title":{},"body":{"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["set/update",{"_index":3134,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setadminroleid",{"_index":3156,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setauthor",{"_index":824,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["setcolor(colors.blue",{"_index":681,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["setcolor(colors.red",{"_index":718,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["setcustomid",{"_index":2144,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["setcustomid('adminroleid",{"_index":3157,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('answer",{"_index":797,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid('introchannelid",{"_index":3145,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('miscchannelid",{"_index":3148,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('modchannelid",{"_index":3151,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('modmessage",{"_index":2234,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["setcustomid('modrequestmessage",{"_index":2147,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["setcustomid('modroleid",{"_index":3154,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('openintrochannelid",{"_index":3138,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('question",{"_index":790,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid('unverifiedmemberroleid",{"_index":3164,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('verifiedmemberroleid",{"_index":3160,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid(`closeticket",{"_index":2132,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["setcustomid(`community",{"_index":769,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid(`mumvoiceui",{"_index":2229,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["setdescription",{"_index":682,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{}}}],["setdescription(`for",{"_index":713,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["setdescription(`user",{"_index":2845,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["setfirstmessageuicommand",{"_index":402,"title":{"classes/SetFirstMessageUICommand.html":{}},"body":{"modules/BotModule.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{}}}],["setintrochannelid",{"_index":3144,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setlabel('antwort",{"_index":771,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setlabel('frage(nicht",{"_index":791,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setlabel('mod",{"_index":2151,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["setlabel('ticket",{"_index":2134,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["setmaxvalues(1",{"_index":3140,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmetadata(bot_event_key",{"_index":3972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(required_rank_key",{"_index":4001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setminvalues(0",{"_index":3141,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmiscchannelid",{"_index":3147,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmodchannelid",{"_index":3150,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmodroleid",{"_index":3153,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setopenintrochannelid",{"_index":3137,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setplaceholder",{"_index":2235,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/initGuildCommand.html":{}}}],["setplaceholder('antwort",{"_index":799,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setplaceholder('schreibe",{"_index":2148,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["setrequired(false",{"_index":795,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setrequired(true",{"_index":798,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["sets",{"_index":1507,"title":{},"body":{"injectables/GuildService.html":{},"miscellaneous/variables.html":{}}}],["setslowmode",{"_index":539,"title":{},"body":{"controllers/ChannelController.html":{}}}],["setslowmode(guildid",{"_index":561,"title":{},"body":{"controllers/ChannelController.html":{}}}],["setstyle(buttonstyle.primary",{"_index":773,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{}}}],["setstyle(textinputstyle.paragraph",{"_index":793,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["settimeout(resolve",{"_index":1334,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["settings",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["settings.controller",{"_index":1603,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["settings.controller.ts",{"_index":1580,"title":{},"body":{"controllers/GuildSettingsController.html":{},"coverage.html":{}}}],["settings.controller.ts:26",{"_index":1584,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["settings.controller.ts:33",{"_index":1588,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["settings.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{}}}],["settings.module.ts",{"_index":1602,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["settings.role.${key}.changed",{"_index":1647,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service",{"_index":383,"title":{},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{}}}],["settings.service.ts",{"_index":1604,"title":{},"body":{"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["settings.service.ts:11",{"_index":1615,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:16",{"_index":1618,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:31",{"_index":1629,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:41",{"_index":1633,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:45",{"_index":1631,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:49",{"_index":1626,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:53",{"_index":1620,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:57",{"_index":1635,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:61",{"_index":1628,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:65",{"_index":1622,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:68",{"_index":1624,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:71",{"_index":1637,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings/dto/restricted",{"_index":2316,"title":{},"body":{"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["settings/dto/settings.dto.ts",{"_index":2468,"title":{},"body":{"classes/SettingsDto.html":{},"coverage.html":{}}}],["settings/dto/settings.dto.ts:14",{"_index":2490,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:19",{"_index":2486,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:24",{"_index":2481,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:29",{"_index":2483,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:34",{"_index":2482,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:39",{"_index":2488,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:44",{"_index":2489,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:49",{"_index":2485,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:54",{"_index":2480,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:59",{"_index":2484,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:9",{"_index":2487,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/events/settings",{"_index":1756,"title":{},"body":{"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"coverage.html":{}}}],["settings/guild",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["settings[key",{"_index":1649,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settingschanged",{"_index":1641,"title":{"classes/SettingsChanged.html":{}},"body":{"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"coverage.html":{}}}],["settingschanged(guildid",{"_index":1648,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settingsdto",{"_index":1586,"title":{"classes/SettingsDto.html":{}},"body":{"controllers/GuildSettingsController.html":{},"classes/SettingsDto.html":{},"coverage.html":{}}}],["settingsservice",{"_index":864,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["settitle('community",{"_index":787,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["settitle('mod",{"_index":2127,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["settitle('nutze",{"_index":2231,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["settitle('user",{"_index":2844,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["settitle('validation",{"_index":716,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["settitle('wfp",{"_index":679,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["settitle(`timeout",{"_index":2711,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["setunverifiedroleid",{"_index":3163,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setup",{"_index":2670,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/initGuildCommand.html":{}}}],["setupclientfactory",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["setvalue(question.question",{"_index":794,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setverifiedmemberroleid",{"_index":3159,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["shall",{"_index":3451,"title":{},"body":{"license.html":{}}}],["share",{"_index":3212,"title":{},"body":{"license.html":{}}}],["shared",{"_index":3396,"title":{},"body":{"license.html":{}}}],["show",{"_index":2244,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/UserInfoUiCommand.html":{}}}],["shows",{"_index":3133,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["side",{"_index":3078,"title":{},"body":{"index.html":{}}}],["sign",{"_index":3939,"title":{},"body":{"license.html":{}}}],["significant",{"_index":3609,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":1896,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["similar",{"_index":3274,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":3827,"title":{},"body":{"license.html":{}}}],["single",{"_index":3799,"title":{},"body":{"license.html":{}}}],["size",{"_index":1697,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["skip",{"_index":358,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["slashcommandpipe",{"_index":755,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["sleep",{"_index":2290,"title":{},"body":{"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["slice(0",{"_index":2111,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["slowmode",{"_index":470,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["slowmodedisabled",{"_index":526,"title":{"classes/SlowmodeDisabled.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["slowmodedisabled(guildid",{"_index":607,"title":{},"body":{"controllers/ChannelController.html":{}}}],["slowmodeenabled",{"_index":519,"title":{"classes/SlowmodeEnabled.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["slowmodeenabled(guildid",{"_index":606,"title":{},"body":{"controllers/ChannelController.html":{}}}],["software",{"_index":3187,"title":{},"body":{"license.html":{}}}],["sold",{"_index":3591,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3428,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3442,"title":{},"body":{"license.html":{}}}],["soll",{"_index":2066,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["solutions",{"_index":3933,"title":{},"body":{"license.html":{}}}],["something",{"_index":2575,"title":{},"body":{"classes/TargetUser.html":{},"classes/UserToUser.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["spare",{"_index":3542,"title":{},"body":{"license.html":{}}}],["speak",{"_index":3219,"title":{},"body":{"license.html":{}}}],["special",{"_index":2547,"title":{},"body":{"classes/SpecialCommand.html":{},"license.html":{},"properties.html":{}}}],["specialcommand",{"_index":410,"title":{"classes/SpecialCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/SpecialCommand.html":{},"coverage.html":{}}}],["specific",{"_index":1794,"title":{},"body":{"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["specifically",{"_index":3203,"title":{},"body":{"license.html":{}}}],["specified",{"_index":3358,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":3852,"title":{},"body":{"license.html":{}}}],["specify",{"_index":3856,"title":{},"body":{"license.html":{}}}],["spirit",{"_index":3844,"title":{},"body":{"license.html":{}}}],["split('\\n",{"_index":1672,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["sponsors",{"_index":3104,"title":{},"body":{"index.html":{}}}],["sql",{"_index":1476,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/.../bot",{"_index":3960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../channel",{"_index":3032,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":3034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../has",{"_index":3963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../log.entry.dto.ts",{"_index":3959,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":3031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../menu",{"_index":3035,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../message",{"_index":3961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../parameter",{"_index":3033,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plain",{"_index":3036,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../reaction",{"_index":3967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request",{"_index":3965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../requires",{"_index":3968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.controller.ts",{"_index":3966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.ts",{"_index":3969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tasks.service.ts",{"_index":3964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":3962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.ts",{"_index":3970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":201,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:13",{"_index":211,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":207,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auditlog/auditlog.controller.ts",{"_index":225,"title":{},"body":{"controllers/AuditLogController.html":{},"coverage.html":{}}}],["src/auditlog/auditlog.controller.ts:30",{"_index":233,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["src/auditlog/auditlog.events.ts",{"_index":2950,"title":{},"body":{"coverage.html":{}}}],["src/auditlog/auditlog.module",{"_index":2205,"title":{},"body":{"modules/ModerationModule.html":{}}}],["src/auditlog/auditlog.module.ts",{"_index":314,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["src/auditlog/auditlog.service.ts",{"_index":318,"title":{},"body":{"injectables/AuditLogService.html":{},"coverage.html":{}}}],["src/auditlog/auditlog.service.ts:10",{"_index":325,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/auditlog.service.ts:25",{"_index":330,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/auditlog.service.ts:7",{"_index":322,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/dto/audit",{"_index":285,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"coverage.html":{}}}],["src/auditlog/dto/log",{"_index":2038,"title":{},"body":{"classes/LogEntryDto.html":{},"coverage.html":{}}}],["src/auth/jwt/guards/jwt",{"_index":253,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/jwt/guards/refresh",{"_index":2308,"title":{},"body":{"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["src/auth/jwt/jwt",{"_index":1839,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt/refresh",{"_index":2309,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{},"coverage.html":{}}}],["src/bot/bot.module.ts",{"_index":379,"title":{},"body":{"modules/BotModule.html":{}}}],["src/bot/commands/add",{"_index":6,"title":{},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["src/bot/commands/clean",{"_index":652,"title":{},"body":{"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["src/bot/commands/community",{"_index":724,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["src/bot/commands/init",{"_index":2955,"title":{},"body":{"coverage.html":{},"classes/initGuildCommand.html":{}}}],["src/bot/commands/mod",{"_index":2206,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["src/bot/commands/ping.command.ts",{"_index":2252,"title":{},"body":{"classes/PingCommand.html":{},"coverage.html":{}}}],["src/bot/commands/ping.command.ts:10",{"_index":2254,"title":{},"body":{"classes/PingCommand.html":{}}}],["src/bot/commands/ping.command.ts:16",{"_index":2255,"title":{},"body":{"classes/PingCommand.html":{}}}],["src/bot/commands/purge",{"_index":2274,"title":{},"body":{"classes/PurgeCommand.html":{},"coverage.html":{}}}],["src/bot/commands/special.command.ts",{"_index":2500,"title":{},"body":{"classes/SpecialCommand.html":{},"coverage.html":{}}}],["src/bot/commands/special.command.ts:16",{"_index":2523,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:27",{"_index":2534,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:33",{"_index":2511,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:41",{"_index":2537,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:50",{"_index":2541,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/ticket",{"_index":2663,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["src/bot/commands/timeout.command.ts",{"_index":2680,"title":{},"body":{"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["src/bot/commands/timeout.command.ts:38",{"_index":2682,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["src/bot/commands/timeout.command.ts:46",{"_index":2686,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["src/bot/commands/unverify",{"_index":2723,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["src/bot/commands/user",{"_index":2447,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["src/bot/decorators/bot",{"_index":2958,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/dto/commmunity",{"_index":837,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["src/bot/dto/community",{"_index":849,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["src/bot/dto/mod",{"_index":2052,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"coverage.html":{}}}],["src/bot/dto/user",{"_index":2878,"title":{},"body":{"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/dto/user.dto.ts",{"_index":2574,"title":{},"body":{"classes/TargetUser.html":{},"coverage.html":{}}}],["src/bot/dto/user.dto.ts:14",{"_index":2576,"title":{},"body":{"classes/TargetUser.html":{}}}],["src/bot/explorers/event.explorer.ts",{"_index":1049,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{}}}],["src/bot/explorers/event.explorer.ts:15",{"_index":1060,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:34",{"_index":1057,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:38",{"_index":1062,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:9",{"_index":1055,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/filters/command",{"_index":704,"title":{},"body":{"classes/CommandValidationFilter.html":{},"coverage.html":{}}}],["src/bot/guards/is",{"_index":1829,"title":{},"body":{"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["src/bot/guards/member",{"_index":1260,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["src/bot/guards/message",{"_index":940,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/guards/reaction",{"_index":1264,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/guards/user",{"_index":856,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMessageHandler.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["src/bot/interfaces/bot",{"_index":366,"title":{},"body":{"interfaces/BotEvent.html":{},"coverage.html":{}}}],["src/guild/events/guild",{"_index":1228,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{}}}],["src/guild/events/interaction",{"_index":2067,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{}}}],["src/guild/events/message",{"_index":929,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"coverage.html":{}}}],["src/guild/guild",{"_index":382,"title":{},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RestrictedChannelDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["src/guild/guild.controller.ts",{"_index":1194,"title":{},"body":{"controllers/GuildController.html":{},"coverage.html":{}}}],["src/guild/guild.controller.ts:16",{"_index":1200,"title":{},"body":{"controllers/GuildController.html":{}}}],["src/guild/guild.controller.ts:33",{"_index":1203,"title":{},"body":{"controllers/GuildController.html":{}}}],["src/guild/guild.module.ts",{"_index":1420,"title":{},"body":{"modules/GuildModule.html":{}}}],["src/guild/guild.service",{"_index":409,"title":{},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"injectables/GuildMemberEvents.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["src/guild/guild.service.ts",{"_index":1452,"title":{},"body":{"injectables/GuildService.html":{},"coverage.html":{}}}],["src/guild/guild.service.ts:112",{"_index":1470,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:17",{"_index":1513,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:170",{"_index":1498,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:203",{"_index":1511,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:223",{"_index":1465,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:234",{"_index":1468,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:247",{"_index":1503,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:46",{"_index":1501,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:9",{"_index":1462,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/moderation/channel/channel.controller.ts",{"_index":533,"title":{},"body":{"controllers/ChannelController.html":{},"coverage.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:133",{"_index":544,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:55",{"_index":560,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:72",{"_index":556,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:85",{"_index":549,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:99",{"_index":563,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/dto/channel.ts",{"_index":419,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["src/guild/moderation/dto/channel.ts:100",{"_index":453,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:108",{"_index":475,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:116",{"_index":460,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:125",{"_index":478,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:134",{"_index":447,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:143",{"_index":471,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:151",{"_index":436,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:162",{"_index":1183,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:171",{"_index":1191,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:180",{"_index":1189,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:189",{"_index":1184,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:198",{"_index":1192,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:207",{"_index":1187,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:21",{"_index":2251,"title":{},"body":{"classes/PermissionOverwrite.html":{}}}],["src/guild/moderation/dto/channel.ts:215",{"_index":1188,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:27",{"_index":479,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:35",{"_index":441,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:44",{"_index":465,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:55",{"_index":451,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:66",{"_index":477,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:76",{"_index":457,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:84",{"_index":437,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:92",{"_index":443,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/guild",{"_index":872,"title":{},"body":{"classes/DiscordGuildMember.html":{},"coverage.html":{}}}],["src/guild/moderation/dto/role.ts",{"_index":973,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/dto/role.ts:106",{"_index":2369,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:114",{"_index":2373,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:122",{"_index":2362,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:133",{"_index":995,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:143",{"_index":983,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:151",{"_index":1006,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:160",{"_index":986,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:170",{"_index":1005,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:181",{"_index":999,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:190",{"_index":994,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:203",{"_index":993,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:212",{"_index":1007,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:26",{"_index":2363,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:34",{"_index":2366,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:42",{"_index":2374,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:50",{"_index":2367,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:58",{"_index":2370,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:66",{"_index":2361,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:74",{"_index":2364,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:82",{"_index":2372,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:90",{"_index":2371,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:98",{"_index":2368,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/user.ts",{"_index":891,"title":{},"body":{"classes/DiscordUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/dto/user.ts:11",{"_index":920,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:19",{"_index":924,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:28",{"_index":912,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:35",{"_index":903,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:42",{"_index":914,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:49",{"_index":905,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:57",{"_index":906,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:65",{"_index":921,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:73",{"_index":915,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:81",{"_index":907,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:89",{"_index":901,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:97",{"_index":918,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/events/channel.event.ts",{"_index":504,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["src/guild/moderation/events/channel.event.ts:22",{"_index":2499,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:30",{"_index":2493,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:31",{"_index":2492,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:32",{"_index":2491,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:40",{"_index":2494,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:48",{"_index":514,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:49",{"_index":513,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:5",{"_index":2498,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:50",{"_index":515,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:51",{"_index":512,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:52",{"_index":511,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:6",{"_index":2496,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:68",{"_index":517,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:7",{"_index":2497,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:8",{"_index":2495,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/user.events",{"_index":2631,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["src/guild/moderation/events/user.events.ts",{"_index":2746,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["src/guild/moderation/events/user.events.ts:100",{"_index":2873,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:108",{"_index":2876,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:109",{"_index":2875,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:110",{"_index":2874,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:118",{"_index":2877,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:15",{"_index":2751,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:21",{"_index":2859,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:22",{"_index":2858,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:23",{"_index":2857,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:31",{"_index":2860,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:37",{"_index":2923,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:38",{"_index":2921,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:39",{"_index":2922,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:40",{"_index":2920,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:5",{"_index":2750,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:54",{"_index":2924,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:6",{"_index":2749,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:62",{"_index":2929,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:63",{"_index":2927,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:64",{"_index":2928,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:65",{"_index":2926,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:66",{"_index":2925,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:7",{"_index":2748,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:82",{"_index":2930,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:90",{"_index":2872,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:91",{"_index":2871,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:92",{"_index":2870,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/moderation.module.ts",{"_index":2199,"title":{},"body":{"modules/ModerationModule.html":{}}}],["src/guild/moderation/role/role.controller.ts",{"_index":2320,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/role/role.controller.ts:119",{"_index":2334,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:58",{"_index":2337,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:75",{"_index":2329,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:96",{"_index":2341,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/user/user.controller.ts",{"_index":2763,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/guild/moderation/user/user.controller.ts:103",{"_index":2771,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:122",{"_index":2778,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:141",{"_index":2789,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:180",{"_index":2785,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:58",{"_index":2775,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:86",{"_index":2773,"title":{},"body":{"controllers/UserController.html":{}}}],["src/main.ts",{"_index":2973,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma.service",{"_index":40,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/SetFirstMessageUICommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/initGuildCommand.html":{}}}],["src/prisma.service.ts",{"_index":2262,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:10",{"_index":2268,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:6",{"_index":2269,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/tasks/tasks.module.ts",{"_index":2585,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service",{"_index":1145,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["src/tasks/tasks.service.ts",{"_index":2593,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/tasks.service.ts:128",{"_index":2612,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:173",{"_index":2618,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:27",{"_index":2602,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:41",{"_index":2621,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:60",{"_index":2604,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:80",{"_index":2608,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/user/self.controller.ts",{"_index":2376,"title":{},"body":{"controllers/SelfController.html":{},"coverage.html":{}}}],["src/user/self.controller.ts:21",{"_index":2383,"title":{},"body":{"controllers/SelfController.html":{}}}],["src/user/self.dto.ts",{"_index":1079,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"coverage.html":{}}}],["src/user/self.dto.ts:11",{"_index":2397,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:12",{"_index":2394,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:13",{"_index":2396,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:14",{"_index":2395,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:5",{"_index":1083,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.dto.ts:6",{"_index":1085,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.dto.ts:7",{"_index":1084,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.service",{"_index":1892,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["src/user/self.service.ts",{"_index":2405,"title":{},"body":{"injectables/SelfService.html":{},"coverage.html":{}}}],["src/user/self.service.ts:13",{"_index":2411,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/self.service.ts:25",{"_index":2419,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/self.service.ts:48",{"_index":2413,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/user.module.ts",{"_index":2864,"title":{},"body":{"modules/UserModule.html":{}}}],["src/util/decorators/parameter",{"_index":2980,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/decorators/request",{"_index":1687,"title":{},"body":{"controllers/GuildUserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/decorators/requires",{"_index":255,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/dto/log.entry.dto",{"_index":331,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/util/dto/log.entry.dto.ts",{"_index":1982,"title":{},"body":{"classes/LogEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/util/dto/log.entry.dto.ts:106",{"_index":1994,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:61",{"_index":1995,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:64",{"_index":1997,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:67",{"_index":1986,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:74",{"_index":2000,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:77",{"_index":1989,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:91",{"_index":2005,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:97",{"_index":2007,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/exception/channel",{"_index":580,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["src/util/exception/guild",{"_index":1218,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"coverage.html":{}}}],["src/util/exception/send",{"_index":2437,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/util/functions/channel",{"_index":576,"title":{},"body":{"controllers/ChannelController.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/functions/get",{"_index":1384,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/functions/menu",{"_index":943,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/util/functions/plain",{"_index":2995,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/guards/has",{"_index":258,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/interfaces/event",{"_index":518,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["standalone",{"_index":3954,"title":{},"body":{"properties.html":{}}}],["standard",{"_index":3354,"title":{},"body":{"license.html":{}}}],["standards",{"_index":3357,"title":{},"body":{"license.html":{}}}],["start",{"_index":3088,"title":{},"body":{"index.html":{},"license.html":{}}}],["start:dev",{"_index":3091,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":3093,"title":{},"body":{"index.html":{}}}],["started",{"_index":3071,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":3082,"title":{},"body":{"index.html":{}}}],["state",{"_index":3916,"title":{},"body":{"license.html":{}}}],["stated",{"_index":3414,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3689,"title":{},"body":{"license.html":{}}}],["statements",{"_index":2946,"title":{},"body":{"coverage.html":{}}}],["stating",{"_index":3487,"title":{},"body":{"license.html":{}}}],["status",{"_index":589,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"license.html":{}}}],["stay",{"_index":3110,"title":{},"body":{"index.html":{}}}],["step",{"_index":2897,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["steps",{"_index":3232,"title":{},"body":{"license.html":{}}}],["still",{"_index":2610,"title":{},"body":{"injectables/TasksService.html":{}}}],["stop",{"_index":3044,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stopcb",{"_index":3038,"title":{},"body":{"miscellaneous/functions.html":{}}}],["storage",{"_index":3518,"title":{},"body":{"license.html":{}}}],["store",{"_index":3999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":1972,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["streuselkuchen",{"_index":2509,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["string",{"_index":73,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringselectmenubuilder",{"_index":2094,"title":{},"body":{"classes/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["stringselectmenuinteraction",{"_index":2086,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["sub",{"_index":1920,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["subdividing",{"_index":3736,"title":{},"body":{"license.html":{}}}],["subject",{"_index":3729,"title":{},"body":{"license.html":{}}}],["sublicenses",{"_index":3769,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":3443,"title":{},"body":{"license.html":{}}}],["subprograms",{"_index":3399,"title":{},"body":{"license.html":{}}}],["subquery",{"_index":1490,"title":{},"body":{"injectables/GuildService.html":{}}}],["subquery.channelid",{"_index":1491,"title":{},"body":{"injectables/GuildService.html":{}}}],["subsection",{"_index":3552,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":3604,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":3734,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":554,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["such",{"_index":2627,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["sue",{"_index":3783,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":3613,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":3056,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sum",{"_index":1557,"title":{},"body":{"injectables/GuildService.html":{}}}],["summary",{"_index":588,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":1220,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["super(`channel",{"_index":636,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["supplement",{"_index":3643,"title":{},"body":{"license.html":{}}}],["support",{"_index":3105,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["supports",{"_index":3561,"title":{},"body":{"license.html":{}}}],["sure",{"_index":1327,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["surrender",{"_index":3822,"title":{},"body":{"license.html":{}}}],["survive",{"_index":3688,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":3889,"title":{},"body":{"license.html":{}}}],["svg",{"_index":3943,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2558,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{}}}],["switchtohttp",{"_index":1814,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":897,"title":{},"body":{"classes/DiscordUser.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["system.command",{"_index":414,"title":{},"body":{"modules/BotModule.html":{}}}],["system.command.ts",{"_index":2664,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["system.command.ts:21",{"_index":2666,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["system.command.ts:28",{"_index":2668,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["t",{"_index":3068,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":2999,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2998,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":1017,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["take",{"_index":361,"title":{},"body":{"injectables/AuditLogService.html":{},"license.html":{}}}],["takes",{"_index":2416,"title":{},"body":{"injectables/SelfService.html":{}}}],["tangible",{"_index":3584,"title":{},"body":{"license.html":{}}}],["target",{"_index":2001,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/functions.html":{}}}],["targetid",{"_index":282,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{}}}],["targets",{"_index":2036,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["targettype",{"_index":250,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["targettypes",{"_index":306,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targettypes)[number",{"_index":2037,"title":{},"body":{"classes/LogEntry.html":{}}}],["targettypes})@isoptional()@isstring()@isin(targettypes",{"_index":298,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["targetuser",{"_index":2279,"title":{"classes/TargetUser.html":{}},"body":{"classes/PurgeCommand.html":{},"classes/TargetUser.html":{},"coverage.html":{}}}],["tasks",{"_index":2586,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["tasks.service",{"_index":2592,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["tasksmodule",{"_index":107,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":1142,"title":{"injectables/TasksService.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["technological",{"_index":3454,"title":{},"body":{"license.html":{}}}],["telling",{"_index":2380,"title":{},"body":{"controllers/SelfController.html":{}}}],["tells",{"_index":3342,"title":{},"body":{"license.html":{}}}],["template",{"_index":1665,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["templateanswer",{"_index":2505,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["templateanswer(category",{"_index":2538,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["templatemessage",{"_index":1614,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["templatemessage(message",{"_index":1636,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["term",{"_index":3412,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":3694,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":3712,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":3703,"title":{},"body":{"license.html":{}}}],["termination",{"_index":3691,"title":{},"body":{"license.html":{}}}],["terms",{"_index":3281,"title":{},"body":{"license.html":{}}}],["test",{"_index":3096,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":3099,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":3098,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3095,"title":{},"body":{"index.html":{}}}],["text",{"_index":581,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["textinputbuilder",{"_index":750,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["textinputmodaldata",{"_index":851,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["textinputstyle",{"_index":751,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["thanks",{"_index":3103,"title":{},"body":{"index.html":{}}}],["then((guildusers",{"_index":2433,"title":{},"body":{"injectables/SelfService.html":{}}}],["then((isavailable",{"_index":1567,"title":{},"body":{"injectables/GuildService.html":{}}}],["then((it",{"_index":1694,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["then((result",{"_index":269,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["then(async",{"_index":2739,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["therefore",{"_index":2699,"title":{},"body":{"classes/TimeOutCommand.html":{},"license.html":{}}}],["things",{"_index":3227,"title":{},"body":{"license.html":{}}}],["third",{"_index":3479,"title":{},"body":{"license.html":{}}}],["thirtydaysago",{"_index":1538,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["thirtydaysago.setdate(thirtydaysago.getdate",{"_index":1539,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["this.$connect",{"_index":2270,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":2271,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._addmembertochanneloverwrite",{"_index":1571,"title":{},"body":{"injectables/GuildService.html":{}}}],["this._fetchguilds(userid",{"_index":2425,"title":{},"body":{"injectables/SelfService.html":{}}}],["this._getguildidfromselectmenu(interaction",{"_index":2173,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this._getmessage(firstmessageid",{"_index":2840,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this._ismemberadmin(member.id",{"_index":1773,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._ismembermod(member.id",{"_index":1774,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._ismemberverified(member.id",{"_index":1775,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._removememberfromchanneloverwrite",{"_index":1569,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.addmember(member.id",{"_index":1778,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.addmembers(guild.id",{"_index":1757,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.addmembers(payload.guildid",{"_index":1781,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.auditlogservice",{"_index":267,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["this.authservice.getuserfromcode(code",{"_index":1872,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.authservice.login(await",{"_index":1871,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.authservice.refreshtoken(req.user",{"_index":1868,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.before",{"_index":529,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.boteventdecorator(provider",{"_index":1068,"title":{},"body":{"classes/Explorer.html":{}}}],["this.cakes.length",{"_index":2570,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.cakes[math.ceil(math.random",{"_index":2569,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.channelid",{"_index":522,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.client",{"_index":2184,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this.client.channels.fetch(channel_id",{"_index":1572,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.client.guilds",{"_index":1692,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["this.client.guilds.cache",{"_index":1357,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["this.client.guilds.cache.foreach(async",{"_index":1290,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["this.client.guilds.fetch",{"_index":1289,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["this.client.guilds.fetch(baseinteraction.guildid).then((guild",{"_index":2732,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["this.client.guilds.fetch(eventargs[0].guildid",{"_index":821,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.client.guilds.fetch(guild_id)).members.fetch(user_id",{"_index":1782,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.client.guilds.fetch(guildid",{"_index":590,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["this.client.guilds.fetch(guildid)).channels.fetch(key",{"_index":1212,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.client.guilds.fetch(guildid).then(async",{"_index":2853,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this.client.guilds.fetch(interaction.guildid",{"_index":2284,"title":{},"body":{"classes/PurgeCommand.html":{}}}],["this.client.guilds.fetch(reaction.message.guildid",{"_index":1314,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.client.guilds.fetch(request.user.guildid",{"_index":2803,"title":{},"body":{"controllers/UserController.html":{}}}],["this.client.guilds.fetch(ticket.guildid",{"_index":2655,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.client.on(metadata",{"_index":1074,"title":{},"body":{"classes/Explorer.html":{}}}],["this.client.user.avatarurl",{"_index":827,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["this.client.user.username",{"_index":825,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["this.client.ws.ping",{"_index":2260,"title":{},"body":{"classes/PingCommand.html":{}}}],["this.coffees.length",{"_index":2567,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.coffees[math.ceil(math.random",{"_index":2566,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.configservice.get('discord_callback_url",{"_index":1942,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('discord_oauth_client_id",{"_index":1936,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('discord_oauth_secret",{"_index":1938,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":1923,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_issuer",{"_index":1925,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_refresh_expiration",{"_index":1928,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":1929,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.database.attachment.createmany",{"_index":1760,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.autodeletechannels.findmany",{"_index":1159,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.autodeletechannels.upsert",{"_index":1161,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.guild.findmany",{"_index":1163,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.guild.upsert",{"_index":1285,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{}}}],["this.database.guilduser.delete",{"_index":1765,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.findmany",{"_index":1764,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.findunique",{"_index":1355,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["this.database.guilduser.update",{"_index":1769,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.upsert",{"_index":1758,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.lockdownrolebackup",{"_index":2738,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["this.database.lockdownrolebackup.delete",{"_index":78,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{}}}],["this.database.lockdownrolebackup.findunique",{"_index":63,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{}}}],["this.database.messagemetadata.create",{"_index":1759,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.count",{"_index":1768,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.create",{"_index":1762,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.groupby",{"_index":1541,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.database.reaction.createmany",{"_index":1761,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.restrictedchannels.findmany",{"_index":1449,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.restrictedchannels.findunique",{"_index":1447,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.restrictedchannels.upsert",{"_index":1448,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.settings.findunique",{"_index":1652,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.database.settings.update",{"_index":1651,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.database.user.delete",{"_index":1767,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.user.upsert",{"_index":1779,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.discord.guilds.fetch(guilduser.guildid",{"_index":2435,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.discord.users.fetch(userid",{"_index":2424,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.duration",{"_index":2757,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.enabled",{"_index":523,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.error",{"_index":2758,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.error.message",{"_index":2760,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.eventemitter.emit",{"_index":2695,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["this.eventemitter.emitasync",{"_index":604,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/UserController.html":{}}}],["this.eventtype",{"_index":2465,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["this.externalcontextcreator.create",{"_index":1072,"title":{},"body":{"classes/Explorer.html":{}}}],["this.getrank(member",{"_index":1777,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.getsettings(guildid).then((it",{"_index":1656,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.getwelcomemessageformat(message.guildid",{"_index":1667,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.guildautodeletechannelservice.get(guildid",{"_index":1115,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildautodeletechannelservice.get(guildid).then",{"_index":1117,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildautodeletechannelservice.upsert",{"_index":1121,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildid",{"_index":521,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.guildservice.averagemessagesperchannellastmonth(guildid",{"_index":1206,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.guildservice.averagemessagesperdaylastmonth(guildid",{"_index":1214,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.guildservice.cleanwfpmembers",{"_index":675,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["this.guildservice.updatechannelpermissions(user",{"_index":2642,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.guildservice.upsertguild(guild.id",{"_index":1291,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.addmember(member.id",{"_index":1298,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.addmembers(guild.id",{"_index":1293,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.deleteone(member.id",{"_index":1301,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.findall(undefined",{"_index":2169,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this.guilduserservice.getguilduser",{"_index":1307,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.getrank(newmember",{"_index":1349,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.getrank(oldmember",{"_index":1347,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.insertmessage",{"_index":1387,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.updatemessagecountbucket",{"_index":1403,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.upsert(newmember.id",{"_index":1351,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.upsert(user.userid",{"_index":1311,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.hashandlermethod(provider",{"_index":1069,"title":{},"body":{"classes/Explorer.html":{}}}],["this.http",{"_index":1932,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.initiatemodrequestflow(interaction",{"_index":2168,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this.jwtservice.sign(payload",{"_index":1922,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.logger",{"_index":619,"title":{},"body":{"controllers/ChannelController.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["this.logger.debug(`found",{"_index":2794,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.error",{"_index":2292,"title":{},"body":{"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["this.logger.error((e",{"_index":970,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["this.logger.error(e",{"_index":1306,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/ModRequestFlow.html":{}}}],["this.logger.log",{"_index":591,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["this.logger.log(`adding",{"_index":1295,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.logger.log(`banned",{"_index":2810,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.log(`edited",{"_index":601,"title":{},"body":{"controllers/ChannelController.html":{}}}],["this.logger.log(`kicked",{"_index":2817,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.log(`purging",{"_index":2285,"title":{},"body":{"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["this.logger.warn",{"_index":1951,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.messagesdeleted",{"_index":528,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.possibleanswers[0",{"_index":2560,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[1",{"_index":2568,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[2",{"_index":2571,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[3",{"_index":2572,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.prisma.guilduser",{"_index":2431,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.prismaserver.settings.findunique",{"_index":3136,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["this.prismaserver.settings.update",{"_index":3174,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["this.prismaservice.auditlog.count",{"_index":353,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.auditlog.create",{"_index":333,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["this.prismaservice.auditlog.findmany",{"_index":354,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["this.prismaservice.guildquestion.create",{"_index":766,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestion.findunique",{"_index":782,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestion.update",{"_index":814,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestionanswer.create",{"_index":818,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guilduser.findunique",{"_index":1817,"title":{},"body":{"guards/HasRequiredRank.html":{},"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.guilduser.update",{"_index":2457,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["this.prismaservice.messages.count",{"_index":2842,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.tickets.create",{"_index":2124,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this.prismaservice.tickets.findmany",{"_index":2653,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.tickets.findunique",{"_index":2155,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this.prismaservice.tickets.update",{"_index":2161,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["this.reason",{"_index":2752,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.reflector.getallandoverride",{"_index":1810,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["this.restrictedchannelservice",{"_index":1566,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.restrictedchannelservice.getall(user.guildid).then((channels",{"_index":1564,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.seconds",{"_index":524,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.selfservice.fetchself(userid",{"_index":2393,"title":{},"body":{"controllers/SelfController.html":{}}}],["this.settings.getadminroleid(guild_id)).tostring",{"_index":1788,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settings.getmodroleid(guild_id)).tostring",{"_index":1786,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settings.getverifiedmemberroleid(guild_id)).tostring",{"_index":1784,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settingsservice.editsettings(guildid",{"_index":1598,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["this.settingsservice.getguilduser",{"_index":2304,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["this.settingsservice.getopenintrochannelid",{"_index":1339,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getsettings(guildid",{"_index":1595,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["this.settingsservice.getunverifiedmemberroleid",{"_index":1337,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getverifiedmemberroleid",{"_index":1320,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getverifiedmemberroleid(message.guildid",{"_index":870,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["this.settingsservice.templatemessage",{"_index":1341,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.tasksservice.createdynamicscheduledjob",{"_index":1166,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.templateanswer(dto.category",{"_index":2556,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.upsert(userid",{"_index":1780,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.upsertguild(guild.id",{"_index":1578,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.userid",{"_index":530,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.userservice.findall(guild.id)).foreach",{"_index":2638,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.userservice.getguilduser(userid",{"_index":1691,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["this.userservice.updatemessagecountbucket(user.userid",{"_index":2641,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.usersservice.fetchself(userid",{"_index":1930,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.validateuser(data.id",{"_index":1963,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.value",{"_index":2464,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["those",{"_index":2417,"title":{},"body":{"injectables/SelfService.html":{},"license.html":{}}}],["though",{"_index":3646,"title":{},"body":{"license.html":{}}}],["thread",{"_index":476,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["threads",{"_index":429,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["three",{"_index":3540,"title":{},"body":{"license.html":{}}}],["through",{"_index":3330,"title":{},"body":{"license.html":{}}}],["throw",{"_index":620,"title":{},"body":{"controllers/ChannelController.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildSettingsService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/PurgeCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["thrown",{"_index":625,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/EventToLog.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["thus",{"_index":3434,"title":{},"body":{"license.html":{}}}],["ticket",{"_index":2104,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["ticket.closed",{"_index":2156,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["ticket.ticketid",{"_index":2133,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["ticket.userid",{"_index":2661,"title":{},"body":{"injectables/TasksService.html":{}}}],["ticketid",{"_index":2125,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["tickets",{"_index":2652,"title":{},"body":{"injectables/TasksService.html":{}}}],["tickets.foreach(async",{"_index":2654,"title":{},"body":{"injectables/TasksService.html":{}}}],["ticketsystem",{"_index":2669,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["ticketsystemsetupcommand",{"_index":412,"title":{"classes/TicketSystemSetupCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["time",{"_index":307,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/LogEntryDto.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["time'})@isoptional",{"_index":295,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["timed",{"_index":2648,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["timeout",{"_index":2032,"title":{},"body":{"classes/LogEntry.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["timeout.dto",{"_index":2687,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["timeout.dto.ts",{"_index":2879,"title":{},"body":{"classes/UserTimeOutDto.html":{},"coverage.html":{}}}],["timeout.dto.ts:16",{"_index":2891,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout.dto.ts:27",{"_index":2890,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout.dto.ts:72",{"_index":2889,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout_expired",{"_index":2031,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["timeoutcommand",{"_index":384,"title":{"classes/TimeOutCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["timeouted",{"_index":2611,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["timeouts",{"_index":2607,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["timeoutuser",{"_index":2768,"title":{},"body":{"controllers/UserController.html":{}}}],["timeoutuser(guildid",{"_index":2786,"title":{},"body":{"controllers/UserController.html":{}}}],["timestamp",{"_index":432,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["timezone",{"_index":1181,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{}}}],["todo",{"_index":2813,"title":{},"body":{"controllers/UserController.html":{}}}],["toformattedlog",{"_index":509,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["toformattedlog(logger",{"_index":516,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["toisostring",{"_index":2825,"title":{},"body":{"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{}}}],["token",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthService.html":{}}}],["token.strategy",{"_index":1890,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["token.strategy.ts",{"_index":2310,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:10",{"_index":2311,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["token.strategy.ts:19",{"_index":2312,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["tolocalestring",{"_index":2650,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["tonimsgstobird",{"_index":1371,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["tonimsgstobird(message",{"_index":1377,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["tools",{"_index":3390,"title":{},"body":{"license.html":{}}}],["topic",{"_index":430,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["tostring",{"_index":2703,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["total",{"_index":270,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["touch",{"_index":3111,"title":{},"body":{"index.html":{}}}],["touser",{"_index":2554,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["touser.id",{"_index":2557,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["touserid",{"_index":2540,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["trade",{"_index":3676,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3675,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3677,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":3619,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1983,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["transferred",{"_index":3621,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":3732,"title":{},"body":{"license.html":{}}}],["transform",{"_index":2880,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["transformer",{"_index":1110,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildUserController.html":{},"classes/UserTimeOutDto.html":{},"dependencies.html":{}}}],["transformers",{"_index":830,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"properties.html":{}}}],["transmission",{"_index":3573,"title":{},"body":{"license.html":{}}}],["treated",{"_index":3645,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":3460,"title":{},"body":{"license.html":{}}}],["tries",{"_index":2439,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["triggered",{"_index":2443,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["true",{"_index":77,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RoleResponse.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TargetUser.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["true})@isdatestring",{"_index":2881,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["true})@isstring",{"_index":843,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{}}}],["try",{"_index":74,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["trying",{"_index":1957,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["twitter",{"_index":3117,"title":{},"body":{"index.html":{}}}],["two",{"_index":3231,"title":{},"body":{"license.html":{}}}],["twoweekdate",{"_index":1518,"title":{},"body":{"injectables/GuildService.html":{}}}],["tyep",{"_index":1362,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["type",{"_index":22,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":2993,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typealiases",{"_index":3957,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1077,"title":{},"body":{"classes/Explorer.html":{},"classes/LogEntry.html":{}}}],["typeofattachments",{"_index":1413,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["typescript",{"_index":3081,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typical",{"_index":3598,"title":{},"body":{"license.html":{}}}],["ui.command",{"_index":401,"title":{},"body":{"modules/BotModule.html":{}}}],["ui.command.ts",{"_index":2448,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["ui.command.ts:16",{"_index":2450,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["ui.command.ts:18",{"_index":2833,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["ui.command.ts:24",{"_index":2453,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["ui.command.ts:26",{"_index":2837,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["ui.command.ts:80",{"_index":2835,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["um",{"_index":964,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["umarmen",{"_index":2940,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["umarmung",{"_index":2533,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["unauthorizedexception",{"_index":1805,"title":{},"body":{"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{}}}],["und",{"_index":953,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/LogEntry.html":{}}}],["undefined",{"_index":348,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/TargetUser.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["undefined.ts",{"_index":2981,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":3279,"title":{},"body":{"license.html":{}}}],["unicodeemoji",{"_index":978,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":3094,"title":{},"body":{"index.html":{}}}],["unkickablemembers",{"_index":1534,"title":{},"body":{"injectables/GuildService.html":{}}}],["unkickablemembers.push(member",{"_index":1537,"title":{},"body":{"injectables/GuildService.html":{}}}],["unknown",{"_index":327,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/ModRequestFlow.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":3607,"title":{},"body":{"license.html":{}}}],["unlimited",{"_index":3418,"title":{},"body":{"license.html":{}}}],["unlocked",{"_index":1300,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["unlocked.guard",{"_index":1382,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["unlocked.guard.ts",{"_index":857,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["unlocked.guard.ts:11",{"_index":860,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{}}}],["unlocked.guard.ts:14",{"_index":1836,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{}}}],["unlocked.guard.ts:19",{"_index":1837,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{}}}],["unlockuser",{"_index":1234,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["unlockuser(reaction",{"_index":1251,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["unmodified",{"_index":3309,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":3447,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":3641,"title":{},"body":{"license.html":{}}}],["until",{"_index":2649,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["unverified",{"_index":1330,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/initGuildCommand.html":{}}}],["unverifiedmemberroleid",{"_index":2476,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["unverifybyrolecommand",{"_index":2722,"title":{"classes/UnverifyByRoleCommand.html":{}},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["up",{"_index":1283,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{}}}],["update",{"_index":1162,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"controllers/RoleController.html":{}}}],["updateautodeletechannel",{"_index":1097,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["updateautodeletechannel(guildid",{"_index":1103,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["updatechannelpermissions",{"_index":1458,"title":{},"body":{"injectables/GuildService.html":{}}}],["updatechannelpermissions(user",{"_index":1510,"title":{},"body":{"injectables/GuildService.html":{}}}],["updated",{"_index":998,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{}}}],["updated'})@apiresponse({status",{"_index":2340,"title":{},"body":{"controllers/RoleController.html":{}}}],["updated/created",{"_index":502,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["updatemessagecountbucket",{"_index":1719,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["updatemessagecountbucket(userid",{"_index":1752,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["updaterank",{"_index":1235,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["updaterank(oldmember",{"_index":1254,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["updaterole",{"_index":2324,"title":{},"body":{"controllers/RoleController.html":{}}}],["updaterole(guildid",{"_index":2338,"title":{},"body":{"controllers/RoleController.html":{}}}],["updates",{"_index":1509,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["upsert",{"_index":1150,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildUserService.html":{}}}],["upsert(guildid",{"_index":1155,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{}}}],["upsert(userid",{"_index":1754,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["upsertguild",{"_index":1459,"title":{},"body":{"injectables/GuildService.html":{}}}],["upsertguild(guildid",{"_index":1512,"title":{},"body":{"injectables/GuildService.html":{}}}],["url",{"_index":828,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"injectables/GuildMessageHandler.html":{},"classes/RoleResponse.html":{}}}],["urlencoded",{"_index":1949,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["urlsearchparams",{"_index":1934,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["usable",{"_index":1668,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["use",{"_index":2783,"title":{},"body":{"controllers/UserController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":637,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/EventToLog.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"modules/UserModule.html":{},"miscellaneous/functions.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["usefilters",{"_index":2544,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["usefilters(commandvalidationfilter",{"_index":2553,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["useful",{"_index":3923,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["useguards(ismodalinteractionguard",{"_index":807,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["useguards(jwtauthguard",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["useguards(messagefromuserguard",{"_index":1386,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["useguards(messageisdmguard",{"_index":946,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["useguards(refreshjwtguard",{"_index":1866,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["useguards(refreshjwtguard)@apiheader({name",{"_index":1849,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["user",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/PermissionOverwrite.html":{},"classes/PurgeCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TargetUser.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user.ban",{"_index":2811,"title":{},"body":{"controllers/UserController.html":{}}}],["user.command",{"_index":417,"title":{},"body":{"modules/BotModule.html":{}}}],["user.command.ts",{"_index":2275,"title":{},"body":{"classes/PurgeCommand.html":{},"coverage.html":{}}}],["user.command.ts:21",{"_index":2276,"title":{},"body":{"classes/PurgeCommand.html":{}}}],["user.command.ts:28",{"_index":2280,"title":{},"body":{"classes/PurgeCommand.html":{}}}],["user.controller",{"_index":1706,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["user.controller.ts",{"_index":1680,"title":{},"body":{"controllers/GuildUserController.html":{},"coverage.html":{}}}],["user.controller.ts:19",{"_index":1684,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["user.decorator",{"_index":1688,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["user.decorator.ts",{"_index":2983,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":2543,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["user.dto.ts",{"_index":2931,"title":{},"body":{"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:21",{"_index":2935,"title":{},"body":{"classes/UserToUser.html":{}}}],["user.dto.ts:28",{"_index":2934,"title":{},"body":{"classes/UserToUser.html":{}}}],["user.guard",{"_index":1381,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["user.guard.ts",{"_index":2046,"title":{},"body":{"guards/MessageFromUserGuard.html":{},"coverage.html":{}}}],["user.guard.ts:5",{"_index":2047,"title":{},"body":{"guards/MessageFromUserGuard.html":{}}}],["user.guildid",{"_index":2171,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["user.id",{"_index":1356,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/TimeOutCommand.html":{}}}],["user.kick",{"_index":2818,"title":{},"body":{"controllers/UserController.html":{}}}],["user.messagecountbucket",{"_index":1450,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["user.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{}}}],["user.module.ts",{"_index":1705,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["user.purge",{"_index":2830,"title":{},"body":{"controllers/UserController.html":{}}}],["user.rank",{"_index":1310,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{}}}],["user.send",{"_index":2700,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.send.failed",{"_index":2709,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.service",{"_index":1147,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["user.service.ts",{"_index":1707,"title":{},"body":{"injectables/GuildUserService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["user.service.ts:100",{"_index":1753,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:122",{"_index":1746,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:137",{"_index":1739,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:150",{"_index":1731,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:163",{"_index":1729,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:177",{"_index":1749,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:18",{"_index":1720,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:181",{"_index":1727,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:189",{"_index":1725,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:197",{"_index":1723,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:26",{"_index":1751,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:33",{"_index":1737,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:42",{"_index":1755,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:54",{"_index":1744,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:78",{"_index":1733,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:89",{"_index":1735,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.timeout(date",{"_index":2692,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.timeout.created",{"_index":2720,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["user.timeout.failed",{"_index":2696,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.user.username",{"_index":2712,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.userid",{"_index":1931,"title":{},"body":{"injectables/JwtAuthService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["user.userid.tostring",{"_index":1570,"title":{},"body":{"injectables/GuildService.html":{}}}],["user/dto/self.dto",{"_index":1685,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["user/dto/self.dto.ts",{"_index":2398,"title":{},"body":{"classes/SelfDto-1.html":{},"coverage.html":{}}}],["user/dto/self.dto.ts:5",{"_index":2404,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:6",{"_index":2400,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:7",{"_index":2403,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:8",{"_index":2399,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:9",{"_index":2401,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/guild",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["user/self",{"_index":2377,"title":{},"body":{"controllers/SelfController.html":{}}}],["user/user.controller",{"_index":2203,"title":{},"body":{"modules/ModerationModule.html":{}}}],["user/user.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["user['userid",{"_index":2423,"title":{},"body":{"injectables/SelfService.html":{}}}],["user_banned",{"_index":2014,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_id",{"_index":1466,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{}}}],["user_joined",{"_index":2011,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_left",{"_index":2013,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_unbanned",{"_index":2015,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_updated",{"_index":2016,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["userbanevent",{"_index":2745,"title":{"classes/UserBanEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userbanevent(userid",{"_index":2812,"title":{},"body":{"controllers/UserController.html":{}}}],["usercontroller",{"_index":2201,"title":{"controllers/UserController.html":{}},"body":{"modules/ModerationModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["usercounts",{"_index":1554,"title":{},"body":{"injectables/GuildService.html":{}}}],["usercounts.length",{"_index":1558,"title":{},"body":{"injectables/GuildService.html":{}}}],["usercounts.reduce((sum",{"_index":1556,"title":{},"body":{"injectables/GuildService.html":{}}}],["userid",{"_index":67,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"classes/PurgeCommand.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["userinfouicommand",{"_index":399,"title":{"classes/UserInfoUiCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["userkickevent",{"_index":2755,"title":{"classes/UserKickEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userkickevent(userid",{"_index":2819,"title":{},"body":{"controllers/UserController.html":{}}}],["userlimit",{"_index":499,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["usermention",{"_index":661,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildSettingsService.html":{},"classes/ModRequestFlow.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["usermention(fromuserid",{"_index":2562,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["usermention(interaction.targetid",{"_index":2846,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["usermention(interaction.user.id",{"_index":2113,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["usermention(member.id",{"_index":696,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["usermention(message.author.id",{"_index":1676,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["usermention(touserid",{"_index":2564,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["usermention(user.id",{"_index":2713,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["usermodule",{"_index":108,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":877,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/GuildSettingsService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["userpurgeevent",{"_index":2761,"title":{"classes/UserPurgeEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userpurgeevent(userid",{"_index":2831,"title":{},"body":{"controllers/UserController.html":{}}}],["userresponseschema",{"_index":925,"title":{},"body":{"classes/DiscordUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":1763,"title":{},"body":{"injectables/GuildUserService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"license.html":{}}}],["users.length",{"_index":1766,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["usersenddmfailedevent",{"_index":2688,"title":{"classes/UserSendDMFailedEvent.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usersenddmfailedevent(user.id",{"_index":2710,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["userservice",{"_index":1689,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/TasksService.html":{}}}],["usersresponseschema",{"_index":926,"title":{},"body":{"classes/DiscordUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice",{"_index":1904,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["usertimeoutdto",{"_index":2684,"title":{"classes/UserTimeOutDto.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{}}}],["usertimeoutevent",{"_index":2630,"title":{"classes/UserTimeOutEvent.html":{}},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usertimeoutevent(user.id",{"_index":2721,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["usertimeoutfailedevent",{"_index":2689,"title":{"classes/UserTimeOutFailedEvent.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usertouser",{"_index":2536,"title":{"classes/UserToUser.html":{}},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"coverage.html":{}}}],["uses",{"_index":3601,"title":{},"body":{"license.html":{}}}],["using",{"_index":1221,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"license.html":{},"properties.html":{}}}],["utf8",{"_index":2109,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["util/decorators/request",{"_index":2388,"title":{},"body":{"controllers/SelfController.html":{}}}],["util/dto/log.entry.dto",{"_index":251,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"classes/LogEntryDto.html":{}}}],["util/exception/guild",{"_index":1638,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["util/functions/plain",{"_index":247,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildSettingsController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{}}}],["util/interfaces/event",{"_index":219,"title":{},"body":{"injectables/AppService.html":{}}}],["utility",{"_index":2622,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["utils",{"_index":577,"title":{},"body":{"controllers/ChannelController.html":{},"classes/PurgeCommand.html":{},"controllers/UserController.html":{}}}],["utils.ts",{"_index":2992,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["valid",{"_index":3539,"title":{},"body":{"license.html":{}}}],["validate",{"_index":1966,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/UserTimeOutDto.html":{}}}],["validate(payload",{"_index":1969,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["validateuser",{"_index":1901,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["validateuser(userid",{"_index":1912,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["validation",{"_index":2546,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["validation.ts",{"_index":705,"title":{},"body":{"classes/CommandValidationFilter.html":{},"coverage.html":{}}}],["validation.ts:7",{"_index":708,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["validationpipe",{"_index":238,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PurgeCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["validator",{"_index":303,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{},"classes/UserTimeOutDto.html":{},"dependencies.html":{}}}],["value",{"_index":215,"title":{},"body":{"injectables/AppService.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"classes/PurgeCommand.html":{},"classes/SettingsChanged.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.trim",{"_index":2900,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["values",{"_index":1208,"title":{},"body":{"controllers/GuildController.html":{}}}],["variable",{"_index":2960,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1669,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/GuildSettingsService.html":{},"miscellaneous/variables.html":{}}}],["verbatim",{"_index":3194,"title":{},"body":{"license.html":{}}}],["vereinsmitglied",{"_index":1527,"title":{},"body":{"injectables/GuildService.html":{}}}],["verified",{"_index":3162,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["verifiedmemberroleid",{"_index":2477,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["verifiedroleid",{"_index":1319,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["versendet",{"_index":2141,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["version",{"_index":3180,"title":{},"body":{"license.html":{},"properties.html":{}}}],["versions",{"_index":3216,"title":{},"body":{"license.html":{}}}],["very",{"_index":2781,"title":{},"body":{"controllers/UserController.html":{}}}],["via",{"_index":2421,"title":{},"body":{"injectables/SelfService.html":{}}}],["vide/mp4",{"_index":3050,"title":{},"body":{"miscellaneous/functions.html":{}}}],["view",{"_index":3345,"title":{},"body":{"license.html":{}}}],["viewchannel",{"_index":1574,"title":{},"body":{"injectables/GuildService.html":{}}}],["violates",{"_index":3636,"title":{},"body":{"license.html":{}}}],["violation",{"_index":3698,"title":{},"body":{"license.html":{}}}],["visible",{"_index":3339,"title":{},"body":{"license.html":{}}}],["void",{"_index":213,"title":{},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["volume",{"_index":3517,"title":{},"body":{"license.html":{}}}],["von",{"_index":833,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/TargetUser.html":{}}}],["wait",{"_index":1324,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["waive",{"_index":3468,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":3903,"title":{},"body":{"license.html":{}}}],["want",{"_index":845,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/TargetUser.html":{},"classes/UserToUser.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["warn",{"_index":2012,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":3344,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3343,"title":{},"body":{"license.html":{}}}],["warum",{"_index":2237,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["watch",{"_index":3089,"title":{},"body":{"index.html":{}}}],["way",{"_index":2597,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["ways",{"_index":3530,"title":{},"body":{"license.html":{}}}],["web",{"_index":3930,"title":{},"body":{"license.html":{}}}],["webhook",{"_index":2004,"title":{},"body":{"classes/LogEntry.html":{}}}],["webhooks_updated",{"_index":2030,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":3115,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":1274,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{}}}],["weeks",{"_index":667,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{}}}],["welcher",{"_index":2941,"title":{},"body":{"classes/UserToUser.html":{}}}],["welches",{"_index":2674,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["welcomemessageformat",{"_index":2478,"title":{},"body":{"classes/SettingsDto.html":{}}}],["well",{"_index":1992,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["wende",{"_index":2706,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["werden",{"_index":688,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["wfp",{"_index":662,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{}}}],["wfp.command",{"_index":408,"title":{},"body":{"modules/BotModule.html":{}}}],["wfp.command.ts",{"_index":653,"title":{},"body":{"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["wfp.command.ts:18",{"_index":656,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["wfp.command.ts:21",{"_index":658,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["whatever",{"_index":3738,"title":{},"body":{"license.html":{}}}],["whenever",{"_index":1272,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["whether",{"_index":456,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["white",{"_index":981,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["whole",{"_index":3367,"title":{},"body":{"license.html":{}}}],["whose",{"_index":3580,"title":{},"body":{"license.html":{}}}],["widely",{"_index":3362,"title":{},"body":{"license.html":{}}}],["widespread",{"_index":3245,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["willst",{"_index":2241,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TargetUser.html":{},"classes/UserToUser.html":{}}}],["window",{"_index":3379,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":3459,"title":{},"body":{"license.html":{}}}],["wish",{"_index":3223,"title":{},"body":{"license.html":{}}}],["within",{"_index":1044,"title":{},"body":{"interfaces/EventToLog.html":{},"license.html":{}}}],["without",{"_index":3261,"title":{},"body":{"license.html":{}}}],["wording",{"_index":1999,"title":{},"body":{"classes/LogEntry.html":{}}}],["work",{"_index":3295,"title":{},"body":{"license.html":{}}}],["work's",{"_index":3388,"title":{},"body":{"license.html":{}}}],["working",{"_index":3363,"title":{},"body":{"license.html":{}}}],["works",{"_index":3202,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3772,"title":{},"body":{"license.html":{}}}],["write",{"_index":1034,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["writing",{"_index":3863,"title":{},"body":{"license.html":{}}}],["written",{"_index":1472,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"license.html":{},"properties.html":{}}}],["wrongargsexception",{"_index":707,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["ws",{"_index":2257,"title":{},"body":{"classes/PingCommand.html":{}}}],["wurde",{"_index":2139,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["wurden",{"_index":685,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["www",{"_index":1947,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["wähle",{"_index":2178,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["x",{"_index":2526,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["xd",{"_index":2882,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxh",{"_index":2885,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxhxm",{"_index":2888,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxm",{"_index":2887,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xh",{"_index":2883,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xhxm",{"_index":2886,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xm",{"_index":2884,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["y",{"_index":2524,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["yarn",{"_index":3085,"title":{},"body":{"index.html":{}}}],["years",{"_index":3541,"title":{},"body":{"license.html":{}}}],["you'd",{"_index":3108,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":3789,"title":{},"body":{"license.html":{}}}],["z",{"_index":2527,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["zoom",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["zu",{"_index":966,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["zwar",{"_index":950,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddRoleCommand.html":{"url":"classes/AddRoleCommand.html","title":"class - AddRoleCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddRoleCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/add-role.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onRoleAdd\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/add-role.command.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onRoleAdd\n                        \n                    \n                \n            \n            \n                \n                        \n                    onRoleAdd(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/add-role.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport { Client, CommandInteraction } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { Prisma } from '@prisma/client';\n\n@Command({\n  name: 'lift-lockdown',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class AddRoleCommand {\n  constructor(\n    @InjectDiscordClient() private client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  @Handler()\n  async onRoleAdd(@InteractionEvent() interaction: CommandInteraction) {\n    interaction.guild.members.fetch().then((members) =>\n      members.forEach(async (member) => {\n        if (\n          member.roles.cache.has('1011563978956226560') ||\n          member.roles.cache.has('1011513775054143632')\n        )\n          return;\n        if (member.roles.cache.has('1121823930085285938')) {\n          const roles = (\n            await this.database.lockdownRoleBackup.findUnique({\n              where: {\n                guildId_userId: { guildId: member.guild.id, userId: member.id },\n              },\n            })\n          ).roles as Prisma.JsonArray;\n          let error = false;\n          roles.forEach((role: { id: string }) => {\n            try {\n              member.roles.add(role.id);\n            } catch {\n              error = true;\n            }\n          });\n          if (!error)\n            this.database.lockdownRoleBackup.delete({\n              where: {\n                guildId_userId: {\n                  guildId: member.guild.id,\n                  userId: member.id,\n                },\n              },\n            });\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt/guards/jwt-auth.guard';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller()\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class AppController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nBotModule\n\nBotModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBotModule->AppModule\n\n\n\n\n\nGuildModule\n\nGuildModule\n\nAppModule -->\n\nGuildModule->AppModule\n\n\n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nAppModule -->\n\nJwtAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BotModule\n                        \n                        \n                            GuildModule\n                        \n                        \n                            JwtAuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { JwtAuthModule } from './auth/jwt/jwt-auth.module';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { Client, GatewayIntentBits, Partials } from 'discord.js';\nimport { BotModule } from './bot/bot.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { ModerationModule } from './guild/moderation/moderation.module';\nimport { GuildSettingsModule } from './guild/guild-settings/guild-settings.module';\nimport { AuditLogModule } from './auditlog/auditlog.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { GuildUserModule } from './guild/guild-user/guild-user.module';\nimport { GuildModule } from './guild/guild.module';\nimport { RouterModule } from '@nestjs/core';\nimport { PrismaService } from './prisma.service';\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    ConfigModule.forRoot({\n      isGlobal: true,\n      ignoreEnvVars: false,\n    }),\n    DiscordModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        token: configService.get('TOKEN'),\n        discordClientOptions: {\n          intents: [\n            GatewayIntentBits.AutoModerationConfiguration,\n            GatewayIntentBits.AutoModerationExecution,\n            GatewayIntentBits.GuildPresences,\n            GatewayIntentBits.Guilds,\n            GatewayIntentBits.GuildMessages,\n            GatewayIntentBits.MessageContent,\n            GatewayIntentBits.GuildMembers,\n            GatewayIntentBits.GuildMessageReactions,\n            GatewayIntentBits.GuildModeration,\n            GatewayIntentBits.GuildInvites,\n            GatewayIntentBits.GuildVoiceStates,\n            GatewayIntentBits.GuildMessageTyping,\n            GatewayIntentBits.GuildWebhooks,\n            GatewayIntentBits.GuildIntegrations,\n            GatewayIntentBits.GuildMessageTyping,\n            GatewayIntentBits.GuildEmojisAndStickers,\n            GatewayIntentBits.DirectMessageTyping,\n            GatewayIntentBits.DirectMessages,\n            GatewayIntentBits.DirectMessageReactions,\n          ],\n          partials: [\n            Partials.GuildMember,\n            Partials.ThreadMember,\n            Partials.User,\n            Partials.Message,\n            Partials.Channel,\n            Partials.Reaction,\n            Partials.GuildScheduledEvent,\n          ],\n        },\n\n        registerCommandOptions: [\n          {\n            removeCommandsBefore: true,\n            forGuild: '1011511871297302608',\n          },\n        ],\n\n        failOnLogin: true,\n      }),\n      inject: [ConfigService],\n      setupClientFactory: (client: Client) => {\n        client.setMaxListeners(30);\n      },\n    }),\n    EventEmitterModule.forRoot({\n      wildcard: true,\n    }),\n    RouterModule.register([\n      {\n        path: 'guild/:guildId',\n        children: [\n          {\n            path: '/',\n            module: GuildModule,\n          },\n          {\n            path: '/auditlog',\n            module: AuditLogModule,\n          },\n          {\n            path: '/user',\n            module: GuildUserModule,\n          },\n          {\n            path: '/settings',\n            module: GuildSettingsModule,\n          },\n          {\n            path: '/moderation',\n            module: ModerationModule,\n          },\n        ],\n      },\n    ]),\n    UserModule,\n    JwtAuthModule,\n    GuildModule,\n    BotModule,\n    TasksModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, PrismaService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleEvent(event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('**')\n                \n            \n\n                    \n                        \n                            Defined in src/app.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('AppService')\n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { EventToLog } from './util/interfaces/event-to-log';\n\n@Injectable()\nexport class AppService {\n  logger = new Logger('AppService');\n  constructor(\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @OnEvent('**')\n  handleEvent(event: any & EventToLog) {\n    event.toFormattedLog(this.logger);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuditLogController.html":{"url":"controllers/AuditLogController.html","title":"controller - AuditLogController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuditLogController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/auditlog.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getAuditLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAuditLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuditLog(guildId: string, filter: AuditLogFilterDto, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auditlog/auditlog.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            AuditLogFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Param,\n  ParseIntPipe,\n  Query,\n  UseGuards,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuditLogFilterDto } from './dto/audit-log-filter.dto';\nimport { AuditLogService } from './auditlog.service';\nimport { LogEntryDto } from './dto/log-entry.dto';\nimport { plainToInstance } from '../util/functions/plain-to-instance';\nimport { Action, TargetType } from '../util/dto/log.entry.dto';\nimport { Rank } from '@prisma/client';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller()\n@RequiredRank(Rank.MEMBER)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class AuditLogController {\n  constructor(\n    @Inject(AuditLogService) private readonly auditLogService: AuditLogService,\n  ) {}\n\n  @Get()\n  async getAuditLog(\n    @Param('guildId') guildId: string,\n    @Query(ValidationPipe) filter: AuditLogFilterDto,\n    @Query('limit', ParseIntPipe) limit: number,\n    @Query('offset', ParseIntPipe) offset: number,\n  ): Promise {\n    return this.auditLogService\n      .find(guildId, filter, { offset, limit })\n      .then((result) => ({\n        total: result.total,\n        data: result.data.map((it) =>\n          plainToInstance(LogEntryDto, {\n            action: it.action as Action,\n            createdAt: it.createdAt,\n            invokerId: it.invokerId,\n            reason: it.reason,\n            targetId: it.targetId,\n            targetType: it.targetType as TargetType,\n          }),\n        ),\n      }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuditLogFilterDto.html":{"url":"classes/AuditLogFilterDto.html","title":"class - AuditLogFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuditLogFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/dto/audit-log-filter.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                action\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdFrom\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdTill\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', enum: actions})@IsOptional()@IsString()@IsIn(actions)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdFrom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', format: 'date-time'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdTill\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', format: 'date-time'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', enum: targetTypes})@IsOptional()@IsString()@IsIn(targetTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  Action,\n  actions,\n  TargetType,\n  targetTypes,\n} from '../../util/dto/log.entry.dto';\n\nexport class AuditLogFilterDto {\n  @ApiPropertyOptional({ type: 'string', format: 'date-time' })\n  @IsOptional()\n  createdFrom?: string;\n  @ApiPropertyOptional({ type: 'string', format: 'date-time' })\n  @IsOptional()\n  createdTill?: string;\n  @ApiPropertyOptional({ type: 'string', enum: targetTypes })\n  @IsOptional()\n  @IsString()\n  @IsIn(targetTypes)\n  targetType?: TargetType;\n  @ApiPropertyOptional({ type: 'string', enum: actions })\n  @IsOptional()\n  @IsString()\n  @IsIn(actions)\n  action?: Action;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuditLogModule.html":{"url":"modules/AuditLogModule.html","title":"module - AuditLogModule","body":"\n                   \n\n\n\n\n    Modules\n    AuditLogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuditLogModule\n\n\n\ncluster_AuditLogModule_providers\n\n\n\ncluster_AuditLogModule_exports\n\n\n\n\nAuditLogService \n\nAuditLogService \n\n\n\nAuditLogModule\n\nAuditLogModule\n\nAuditLogService  -->\n\nAuditLogModule->AuditLogService \n\n\n\n\n\nAuditEvents\n\nAuditEvents\n\nAuditLogModule -->\n\nAuditEvents->AuditLogModule\n\n\n\n\n\nAuditLogService\n\nAuditLogService\n\nAuditLogModule -->\n\nAuditLogService->AuditLogModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuditLogModule -->\n\nPrismaService->AuditLogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auditlog/auditlog.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuditEvents\n                        \n                        \n                            AuditLogService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuditLogController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuditLogService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuditLogController } from './auditlog.controller';\nimport { AuditLogService } from './auditlog.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\nimport AuditEvents from './auditlog.events';\n\n@Module({\n  controllers: [AuditLogController],\n  providers: [AuditLogService, PrismaService, AuditEvents],\n  imports: [DiscordModule.forFeature()],\n  exports: [AuditLogService],\n})\nexport class AuditLogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditLogService.html":{"url":"injectables/AuditLogService.html","title":"injectable - AuditLogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditLogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/auditlog.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auditlog/auditlog.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(entry: LogEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auditlog/auditlog.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            LogEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                        \n                    find(guildId: string, filter: AuditLogFilterDto, pagination: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auditlog/auditlog.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            AuditLogFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport LogEntry from 'src/util/dto/log.entry.dto';\nimport { PrismaService } from 'src/prisma.service';\nimport { AuditLogFilterDto } from './dto/audit-log-filter.dto';\n\n@Injectable()\nexport class AuditLogService {\n  constructor(@Inject(PrismaService) private prismaService: PrismaService) {}\n\n  async create(entry: LogEntry) {\n    return this.prismaService.auditLog.create({\n      data: {\n        action: entry.action,\n        guildId: entry.guildId,\n        invokerId: entry.invokerId,\n        reason: entry.reason,\n        targetId: entry.targetId,\n        targetType: entry.targetType,\n        extraInfo: entry.extraInfo || null,\n        createdAt: entry.createdAt,\n      },\n    });\n  }\n\n  async find(\n    guildId: string,\n    filter: AuditLogFilterDto,\n    pagination: { offset?: number; limit?: number },\n  ) {\n    const where = {\n      guildId,\n      createdAt:\n        filter.createdFrom || filter.createdTill\n          ? {\n              gte: filter.createdFrom\n                ? new Date(filter.createdFrom).toISOString()\n                : undefined,\n              lte: filter.createdTill\n                ? new Date(filter.createdTill).toISOString()\n                : undefined,\n            }\n          : undefined,\n      action: filter.action,\n      targetType: filter.targetType,\n    };\n\n    return {\n      total: await this.prismaService.auditLog.count({ where }),\n      data: await this.prismaService.auditLog.findMany({\n        select: {\n          action: true,\n          invokerId: true,\n          reason: true,\n          targetId: true,\n          targetType: true,\n          extraInfo: true,\n          createdAt: true,\n        },\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        skip: pagination.offset ?? 0,\n        take: pagination.limit ?? 0,\n      }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BotEvent.html":{"url":"interfaces/BotEvent.html","title":"interface - BotEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BotEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/interfaces/bot-event.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        __bot_event_handler__\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        __bot_event_handler__\n                        \n                    \n                \n            \n            \n                \n__bot_event_handler__(...args: ClientEvents)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/interfaces/bot-event.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ClientEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ClientEvents } from 'discord.js';\n\nexport default interface BotEvent {\n  __bot_event_handler__(\n    ...args: ClientEvents[keyof ClientEvents]\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BotModule.html":{"url":"modules/BotModule.html","title":"module - BotModule","body":"\n                   \n\n\n\n\n    Modules\n    BotModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BotModule\n\n\n\ncluster_BotModule_providers\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\n\n\nBotModule\n\nBotModule\n\nBotModule -->\n\nGuildRestrictedChannelService->BotModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nBotModule -->\n\nGuildService->BotModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nBotModule -->\n\nGuildSettingsService->BotModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nBotModule -->\n\nPrismaService->BotModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bot/bot.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { DiscordModule } from '@discord-nestjs/core';\nimport { Module } from '@nestjs/common';\nimport { PingCommand } from './commands/ping.command';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { TimeOutCommand } from './commands/timeout.command';\nimport {\n  MumVoiceCommandChatInput,\n  MumVoiceCommandUi,\n} from './commands/mod-anouncement.command';\nimport { GuildRestrictedChannelService } from 'src/guild/guild-restricted-channel/guild-restricted-channel.service';\nimport { CommunityQuestionCommand } from './commands/community-question.command';\nimport { initGuildCommand } from './commands/init-guild.command';\nimport { UserInfoUiCommand } from './commands/user-info-ui.command';\nimport { SetFirstMessageUICommand } from './commands/user-set-first-message-ui.command';\nimport { CleanWfpMember } from './commands/clean-wfp.command';\nimport { GuildService } from 'src/guild/guild.service';\nimport { SpecialCommand } from './commands/special.command';\nimport { TicketSystemSetupCommand } from './commands/ticket-system.command';\nimport { PurgeCommand } from './commands/purge-user.command';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [\n    PingCommand,\n    TimeOutCommand,\n    MumVoiceCommandChatInput,\n    CommunityQuestionCommand,\n    initGuildCommand,\n    PrismaService,\n    GuildSettingsService,\n    GuildRestrictedChannelService,\n    UserInfoUiCommand,\n    SetFirstMessageUICommand,\n    CleanWfpMember,\n    GuildService,\n    SpecialCommand,\n    TicketSystemSetupCommand,\n    MumVoiceCommandUi,\n    PurgeCommand,\n  ],\n  exports: [DiscordModule],\n})\nexport class BotModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Channel.html":{"url":"classes/Channel.html","title":"class - Channel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Channel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                flags\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastMessageId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                messages\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nsfw\n                            \n                            \n                                    \n                                    \n                                parentId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                permissionOverwrites\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                rateLimitPerUser\n                            \n                            \n                                    \n                                    \n                                rawPosition\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                threads\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                topic\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Timestamp when the channel was created', example: 1671981769958, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Flags for the channel', example: 0, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the guild', example: '616609333832187924', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the channel', example: '1056592866660581456', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastMessageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'ID of the last message', example: '1080070968900333578', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString()@IsOptional()@ApiProperty({description: 'Array of message IDs', type: undefined, example: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'Name of the channel', example: 'images', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nsfw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({description: 'Whether the channel is NSFW', example: false, type: Boolean, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the parent channel', example: '832170662491062333', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        permissionOverwrites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionOverwrite[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInstance(PermissionOverwrite)@IsOptional()@ApiProperty({description: 'Array of permission overwrites', type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        rateLimitPerUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({description: 'Rate limit per user aka slowmode', example: 0, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rawPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Raw position of the channel', example: 3, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        threads\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString()@IsOptional()@ApiProperty({description: 'Array of thread IDs', type: undefined, example: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'Topic of the channel', example: undefined, type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Type of the channel', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelCleaned.html":{"url":"classes/ChannelCleaned.html","title":"class - ChannelCleaned","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelCleaned\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                before\n                            \n                            \n                                channelId\n                            \n                            \n                                guildId\n                            \n                            \n                                messagesDeleted\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, messagesDeleted: number, before: number, userId: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesDeleted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        before\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        before\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messagesDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:52\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChannelController.html":{"url":"controllers/ChannelController.html","title":"controller - ChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/channel/channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /channel\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                cleanChannel\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editChannel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildChannel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildChannels\n                            \n                            \n                                    \n                                    \n                                    Async\n                                setSlowmode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        cleanChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanChannel(guildId: string, channelId: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channelId/clean')@ApiOperation({summary: 'Clean a channel'})@ApiBody({schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        editChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    editChannel(guildId: string, channelId: string, channelData: GuildChannelEditOptions)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':channelId')@ApiOperation({summary: 'Edit a channel for a guild'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelData\n                                            \n                                                            GuildChannelEditOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildChannel(guildId: string, channelId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':channelId')@ApiOperation({summary: 'Get a channel for a guild'})@ApiResponse({status: 200, type: Channel, description: 'Channel was successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildChannels\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildChannels(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all channels for a guild'})@ApiResponse({status: 200, type: undefined, description: 'Channels were successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        setSlowmode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSlowmode(guildId: string, channelId: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channelId/slowmode')@ApiOperation({summary: 'Set slowmode for a channel'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport {\n  Client,\n  GuildChannel,\n  GuildChannelEditOptions,\n  GuildBasedChannel,\n  ChannelType,\n  GuildTextBasedChannel,\n} from 'discord.js';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { Channel } from '../dto/channel';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  ChannelCleaned,\n  SlowmodeDisabled,\n  SlowmodeEnabled,\n} from '../events/channel.event';\nimport { ChannelNotTextBasedException } from 'src/util/exception/channel-not-text-based-exception';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { Rank } from '@prisma/client';\n\n@ApiTags('/channel')\n@Controller('/channel')\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class ChannelController {\n  logger = new Logger(ChannelController.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all channels for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: [Channel],\n    description: 'Channels were successfully fetched',\n  })\n  async getGuildChannels(\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(\n      `Found ${guild.channels.cache.size} channels in guild ${guildId}`,\n    );\n    return (await guild.channels.fetch()).toJSON();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get a channel for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: Channel,\n    description: 'Channel was successfully fetched',\n  })\n  async getGuildChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(\n      `Found ${guild.channels.cache.size} channels in guild ${guildId}`,\n    );\n    return await guild.channels.fetch(channelId);\n  }\n\n  @Put(':channelId')\n  @ApiOperation({ summary: 'Edit a channel for a guild' })\n  async editChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() channelData: GuildChannelEditOptions,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId);\n    await channel.edit(channelData);\n    this.logger.log(`Edited channel ${channelId} in guild ${guildId}`);\n    return channel;\n  }\n\n  @Post(':channelId/slowmode')\n  @ApiOperation({ summary: 'Set slowmode for a channel' })\n  async setSlowmode(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() { duration }: { duration: number },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId) as GuildChannel;\n    this.logger.log(\n      `Set slowmode for channel ${channelId} in guild ${guildId}`,\n    );\n    await this.eventEmitter.emitAsync(\n      `channel.slowmode.${duration > 0 ? 'enabled' : 'disabled'}`,\n      duration > 0\n        ? new SlowmodeEnabled(guildId, channelId, true, duration)\n        : new SlowmodeDisabled(guildId, channelId, false),\n    );\n    await channel.edit({ rateLimitPerUser: duration });\n  }\n\n  @Post(':channelId/clean')\n  @ApiOperation({ summary: 'Clean a channel' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        userId: {\n          type: 'string',\n        },\n        before: {\n          type: 'number',\n        },\n      },\n    },\n  })\n  async cleanChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() { userId, before }: { userId: string; before: number },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId);\n    this.logger.log(\n      `Cleaning channel ${channelId} in guild ${guildId} from messages before ${before} of user ${userId}`,\n    );\n    if (\n      channel.type in\n      [\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ]\n    ) {\n      cleanTextChannel(\n        channel as GuildTextBasedChannel,\n        (messages) => messages.last().createdTimestamp  msg.deletable && msg.createdTimestamp > before,\n        this.logger,\n      );\n    } else {\n      throw new ChannelNotTextBasedException(channel.name);\n    }\n    await this.eventEmitter.emitAsync(\n      'channel.clean',\n      new ChannelCleaned(guildId, channelId, 0, before, userId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelNotTextBasedException.html":{"url":"classes/ChannelNotTextBasedException.html","title":"class - ChannelNotTextBasedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelNotTextBasedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/channel-not-text-based-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when a channel isn't found by ID\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(channelName: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/channel-not-text-based-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        channelName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a channel isn't found by ID\n */\nexport class ChannelNotTextBasedException extends Error {\n  constructor(channelName: string) {\n    super(`Channel ${channelName} is not text based.`);\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(ChannelNotTextBasedException)\nexport class ChannelNotTextBasedExceptionFilter implements ExceptionFilter {\n  catch(exception: ChannelNotTextBasedException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelNotTextBasedExceptionFilter.html":{"url":"classes/ChannelNotTextBasedExceptionFilter.html","title":"class - ChannelNotTextBasedExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelNotTextBasedExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/channel-not-text-based-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to produce the http response when the exception is thrown in a http context\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: ChannelNotTextBasedException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/channel-not-text-based-exception.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            ChannelNotTextBasedException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a channel isn't found by ID\n */\nexport class ChannelNotTextBasedException extends Error {\n  constructor(channelName: string) {\n    super(`Channel ${channelName} is not text based.`);\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(ChannelNotTextBasedException)\nexport class ChannelNotTextBasedExceptionFilter implements ExceptionFilter {\n  catch(exception: ChannelNotTextBasedException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CleanWfpMember.html":{"url":"classes/CleanWfpMember.html","title":"class - CleanWfpMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CleanWfpMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/clean-wfp.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onCleanWfpMembers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildService: GuildService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/clean-wfp.command.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onCleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    onCleanWfpMembers(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/clean-wfp.command.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InteractionEvent } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  Colors,\n  CommandInteraction,\n  EmbedBuilder,\n  userMention,\n} from 'discord.js';\nimport { GuildService } from 'src/guild/guild.service';\n\n@Command({\n  name: 'clean-wfp',\n  description:\n    'Kick all members with the role `wfp` if they are longer than 2 weeks on the server.',\n  defaultMemberPermissions: ['ModerateMembers', 'KickMembers'],\n  dmPermission: false,\n})\nexport class CleanWfpMember {\n  constructor(@Inject(GuildService) private guildService: GuildService) {}\n  @Handler()\n  async onCleanWfpMembers(@InteractionEvent() interaction: CommandInteraction) {\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const outCome = await this.guildService.cleanWfpMembers(\n      interaction.guildId,\n      false,\n    );\n    console.log(outCome);\n    const embed = new EmbedBuilder()\n      .setTitle('wfp kick member report :3')\n      .setColor(Colors.Blue)\n      .setDescription(\n        'Member die kicked wurden bzw. nicht kicked werden konnten',\n      )\n      .addFields([\n        {\n          name: 'Kicked members count',\n          value: outCome['membersToKick'].length.toString() || '0',\n        },\n        {\n          name: 'Kicked members names',\n          value:\n            outCome['membersToKick']\n              .map((member) => userMention(member.id))\n              .join('\\n') || '',\n        },\n        {\n          name: \"Couldn't kick members count\",\n          value: outCome['unkickableMembers'].length.toString() || '0',\n        },\n        {\n          name: \"Couldn't kick members names\",\n          value:\n            outCome['unkickableMembers']\n              .map((member) => userMention(member.id))\n              .join('\\n') || '',\n        },\n      ]);\n    await interaction.followUp({\n      ephemeral: true,\n      embeds: [embed],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommandValidationFilter.html":{"url":"classes/CommandValidationFilter.html","title":"class - CommandValidationFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommandValidationFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/filters/command-validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(exceptionList: WrongArgsException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/filters/command-validation.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exceptionList\n                                            \n                                                        WrongArgsException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WrongArgsException } from '@discord-nestjs/common';\nimport { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { Colors, EmbedBuilder } from 'discord.js';\n\n@Catch(WrongArgsException)\nexport class CommandValidationFilter implements ExceptionFilter {\n  async catch(\n    exceptionList: WrongArgsException,\n    host: ArgumentsHost,\n  ): Promise {\n    const interaction = host.getArgByIndex(0);\n    const embeds = exceptionList.getError().map((exception) =>\n      new EmbedBuilder()\n        .setDescription(`For input: ${exception.property}`)\n        .setTitle('Validation failed')\n        .setColor(Colors.Red)\n        .addFields(\n          Object.keys(exception.constraints).map((key) => ({\n            name: key,\n            value: exception.constraints[key],\n          })),\n        ),\n    );\n\n    if (interaction.isRepliable())\n      await interaction.reply({ embeds, ephemeral: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionCommand.html":{"url":"classes/CommunityQuestionCommand.html","title":"class - CommunityQuestionCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/community-question.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onButtonPress\n                            \n                            \n                                    \n                                    Async\n                                onCommunityQuestion\n                            \n                            \n                                    \n                                    \n                                    Async\n                                onInteraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/community-question.command.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonPress\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonPress(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onCommunityQuestion\n                        \n                    \n                \n            \n            \n                \n                        \n                    onCommunityQuestion(interaction: CommandInteraction, question: CommunityQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                question\n                                            \n                                                            CommunityQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onInteraction\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInteraction(undefined: CommunityQuestionFormDto, eventArgs: ClientEvents)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')@UseGuards(IsModalInteractionGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CommunityQuestionFormDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventArgs\n                                            \n                                                        ClientEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n  IA,\n  On,\n  EventParams,\n} from '@discord-nestjs/core';\nimport { Inject, UseGuards, ValidationPipe } from '@nestjs/common';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  ButtonInteraction,\n  ButtonStyle,\n  Client,\n  ClientEvents,\n  CommandInteraction,\n  EmbedBuilder,\n  GuildTextBasedChannel,\n  ModalActionRowComponentBuilder,\n  ModalBuilder,\n  TextInputBuilder,\n  TextInputStyle,\n} from 'discord.js';\nimport { CommunityQuestionDto } from '../dto/commmunity-question.dto';\nimport {\n  ModalFieldsTransformPipe,\n  SlashCommandPipe,\n} from '@discord-nestjs/common';\nimport { IsModalInteractionGuard } from '../guards/is-modal-interaction.guard';\nimport { CommunityQuestionFormDto } from '../dto/community-question.form.dto';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'question',\n  description: 'Ask the community a question',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class CommunityQuestionCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private readonly prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onCommunityQuestion(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) question: CommunityQuestionDto,\n  ) {\n    const questionId = await this.prismaService.guildQuestion.create({\n      data: {\n        question: question.description,\n        guildId: interaction.guildId,\n      },\n      select: {\n        id: true,\n      },\n    });\n    const button = new ButtonBuilder()\n      .setCustomId(`community-question-${questionId.id}`)\n      .setLabel('Antwort geben')\n      .setStyle(ButtonStyle.Primary);\n\n    const row = new ActionRowBuilder().addComponents(button);\n    interaction.reply({\n      components: [row],\n      content: question.question,\n    });\n  }\n  @On('interactionCreate')\n  async onButtonPress(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (!interaction.customId.includes('community-question')) return;\n    const questionId = interaction.customId.split('-')[2];\n    const question = await this.prismaService.guildQuestion.findUnique({\n      where: {\n        id: parseInt(questionId),\n      },\n    });\n    if (!question) {\n      await interaction.reply({\n        content: 'Question not found, please contact the mods',\n        ephemeral: true,\n      });\n      return;\n    }\n    const modal = new ModalBuilder()\n      .setCustomId(`community-question-${questionId}`)\n      .setTitle('Community Frage');\n    const questionField = new TextInputBuilder()\n      .setCustomId('question')\n      .setLabel('Frage(Nicht bearbeiten)')\n      .setStyle(TextInputStyle.Paragraph)\n      .setValue(question.question)\n      .setRequired(false);\n    const answerInput = new TextInputBuilder()\n      .setCustomId('answer')\n      .setLabel('Antwort')\n      .setStyle(TextInputStyle.Paragraph)\n      .setRequired(true)\n      .setPlaceholder('Antwort');\n    const answerComponentRow =\n      new ActionRowBuilder().addComponents(\n        answerInput,\n      );\n    const questionComponentRow =\n      new ActionRowBuilder().addComponents(\n        questionField,\n      );\n\n    // Add inputs to the modal\n    modal.addComponents(questionComponentRow, answerComponentRow);\n    await interaction.showModal(modal);\n  }\n\n  @On('interactionCreate')\n  @UseGuards(IsModalInteractionGuard)\n  async onInteraction(\n    @IA(ModalFieldsTransformPipe) { answer }: CommunityQuestionFormDto,\n    @EventParams() eventArgs: ClientEvents['interactionCreate'],\n  ) {\n    const [modal] = eventArgs;\n    if (\n      !modal.isModalSubmit() ||\n      !modal.customId.startsWith('community-question')\n    )\n      return;\n    const questionId = modal.customId.split('-')[2];\n    const question = await this.prismaService.guildQuestion.findUnique({\n      where: {\n        id: parseInt(questionId),\n      },\n    });\n    await this.prismaService.guildQuestion.update({\n      where: {\n        id: parseInt(questionId),\n      },\n      data: {\n        answers: question.answers + 1,\n      },\n    });\n    await this.prismaService.guildQuestionAnswer.create({\n      data: {\n        answer: answer.value,\n        createdAt: new Date(),\n        guildQuestionId: parseInt(questionId),\n      },\n    });\n    if (answer.value != '')\n      (\n        (await (\n          await this.client.guilds.fetch(eventArgs[0].guildId)\n        ).channels.fetch('1195024829544411168')) as GuildTextBasedChannel\n      ).send({\n        embeds: [\n          new EmbedBuilder()\n            .setAuthor({\n              name: this.client.user.username,\n              iconURL: this.client.user.avatarURL(),\n              url: 'https://github.com/89Q12/Mega-Transformers-bot',\n            })\n            .addFields([\n              {\n                name: 'Antwort von nutzer:in',\n                value: answer.value,\n              },\n              {\n                name: 'Frage',\n                value: question.question,\n              },\n            ]),\n        ],\n      });\n    await modal.reply({ content: 'Antwort abgeschickt', ephemeral: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionDto.html":{"url":"classes/CommunityQuestionDto.html","title":"class - CommunityQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/commmunity-question.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'Description about the question displayed above the text input int the modal', type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/commmunity-question.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The question you want to ask the community', type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/commmunity-question.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { IsString } from 'class-validator';\n\nexport class CommunityQuestionDto {\n  @Param({\n    description: 'The question you want to ask the community',\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  question: string;\n\n  @Param({\n    description:\n      'Description about the question displayed above the text input int the modal',\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionFormDto.html":{"url":"classes/CommunityQuestionFormDto.html","title":"class - CommunityQuestionFormDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionFormDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/community-question.form.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                answer\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TextInputModalData\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field('answer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/community-question.form.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field } from '@discord-nestjs/core';\nimport { TextInputModalData } from 'discord.js';\n\nexport class CommunityQuestionFormDto {\n  @Field('answer')\n  answer: TextInputModalData;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiscordExecutionContext.html":{"url":"interfaces/DiscordExecutionContext.html","title":"interface - DiscordExecutionContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiscordExecutionContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/guards/user-is-unlocked.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ExecutionContext\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getMessage\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMessage\n                        \n                    \n                \n            \n            \n                \ngetMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/user-is-unlocked.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Message\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { Message } from 'discord.js';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\n\ninterface DiscordExecutionContext extends ExecutionContext {\n  getMessage(): Message;\n}\n@Injectable()\nexport class IsUserUnlockedGuard implements CanActivate {\n  constructor(\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n  ) {}\n  async canActivate(context: DiscordExecutionContext): Promise {\n    const message: Message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return message.member.roles.cache.has(\n      await this.settingsService.getVerifiedMemberRoleId(message.guildId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordGuildMember.html":{"url":"classes/DiscordGuildMember.html","title":"class - DiscordGuildMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordGuildMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/guild-member.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                    \n                                bot\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                communicationDisabledUntil\n                            \n                            \n                                    \n                                    \n                                displayName\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        communicationDisabledUntil\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()@IsOptional()@ApiPropertyOptional({type: String, format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiscordUser['id']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsDateString, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { DiscordUser } from './user';\n\nexport class DiscordGuildMember {\n  @IsString()\n  @ApiProperty({ type: String })\n  userId: DiscordUser['id'];\n  @IsString()\n  @ApiProperty({ type: String })\n  guildId: string;\n  @IsDateString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String, format: 'date-time' })\n  communicationDisabledUntil?: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  displayName: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  username: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  avatarUrl: string;\n  @IsBoolean()\n  @ApiProperty({ type: Boolean })\n  bot: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordUser.html":{"url":"classes/DiscordUser.html","title":"class - DiscordUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accentColor\n                            \n                            \n                                    \n                                    \n                                avatarURL\n                            \n                            \n                                    \n                                    \n                                bannerURL\n                            \n                            \n                                    \n                                    \n                                bot\n                            \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                discriminator\n                            \n                            \n                                    \n                                    \n                                displayAvatarURL\n                            \n                            \n                                    \n                                    \n                                flags\n                            \n                            \n                                    \n                                    \n                                hexAccentColor\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                system\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accentColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The accent color of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatarURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The avatar url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bannerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The banner url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the user is a bot', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The created timestamp of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        discriminator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The discriminator of the user but now ITS ALWAYS 0', example: '1234', deprecated: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        displayAvatarURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The display avatar url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The flags of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hexAccentColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The hex accent color of the user', example: '#000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the user', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        system\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the user is a system user', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The username of the user', example: 'John Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsNumber, IsString } from 'class-validator';\n\nclass DiscordUser {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the user',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The username of the user',\n    example: 'John Doe',\n  })\n  username: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The discriminator of the user but now ITS ALWAYS 0',\n    example: '1234',\n    deprecated: true,\n  })\n  discriminator: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The avatar url of the user',\n  })\n  avatarURL: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The display avatar url of the user',\n  })\n  displayAvatarURL: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The banner url of the user',\n  })\n  bannerURL: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the user is a bot',\n    example: false,\n  })\n  bot: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the user is a system user',\n    example: false,\n  })\n  system: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The flags of the user',\n    example: 0,\n  })\n  flags: number;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The created timestamp of the user',\n    example: 0,\n  })\n  createdTimestamp: number;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The accent color of the user',\n    example: 0,\n  })\n  accentColor: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The hex accent color of the user',\n    example: '#000000',\n  })\n  hexAccentColor: string;\n}\nconst userResponseSchema = {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    username: { type: 'string' },\n    discriminator: { type: 'string' },\n    avatarURL: { type: 'string' },\n    displayAvatarURL: { type: 'string' },\n    bannerURL: { type: 'string' },\n    bot: { type: 'boolean' },\n    system: { type: 'boolean' },\n    flags: { type: 'number' },\n    createdTimestamp: { type: 'number' },\n    accentColor: { type: 'number' },\n    hexAccentColor: { type: 'string' },\n  },\n};\nconst usersResponseSchema = {\n  type: 'array',\n  items: userResponseSchema,\n};\nexport { DiscordUser, userResponseSchema, usersResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DmMessageHandler.html":{"url":"injectables/DmMessageHandler.html","title":"injectable - DmMessageHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DmMessageHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/message-create/dm-message/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                dmMessageToModTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        dmMessageToModTeam\n                        \n                    \n                \n            \n            \n                \n                        \n                    dmMessageToModTeam(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageIsDmGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/dm-message/index.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DmMessageHandler.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/message-create/dm-message/index.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { On } from '@discord-nestjs/core';\nimport { Injectable, Logger, UseGuards } from '@nestjs/common';\nimport {\n  Message,\n  ActionRowBuilder,\n  ButtonBuilder,\n  DiscordAPIError,\n} from 'discord.js';\nimport { MessageIsDmGuard } from 'src/bot/guards/message-is-dm.guard';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Injectable()\nexport class DmMessageHandler {\n  logger = new Logger(DmMessageHandler.name);\n\n  @On('messageCreate')\n  @UseGuards(MessageIsDmGuard)\n  async dmMessageToModTeam(message: Message): Promise {\n    try {\n      await message.reply({\n        content:\n          'Ich bin zwar nur ein Bot und kann kein Koverstionen führen, aber ich kann dir helfen. Klicke auf den Button, um Hilfe zu bekommen.',\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n    } catch (e: unknown) {\n      this.logger.error((e as DiscordAPIError).message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditRoleData.html":{"url":"classes/EditRoleData.html","title":"class - EditRoleData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditRoleData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                color\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                hoist\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                icon\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                mentionable\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                permissions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                position\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                unicodeEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ColorResolvable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(undefined)@ApiProperty({enum: Colors, required: false, example: 'White', examples: undefined, description: 'New color of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        hoist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Whether or not the role should be hoisted'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:160\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Base64Resolvable | EmojiResolvable | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New Icon of the role, base64 encoded string', externalDocs: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:203\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        mentionable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Should the role be mentionable or not'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:190\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New name of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PermissionResolvable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(undefined)@IsOptional()@ApiProperty({type: undefined, required: false, description: 'Updated Permission', default: undefined, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({type: Number, required: false, description: 'The position of the role; Higher = more permissions relative to the role below'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, required: true, description: 'Why was the role updated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        unicodeEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'The new unicodeEmoji of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:212\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nimport {\n  Base64Resolvable,\n  ColorResolvable,\n  Colors,\n  EmojiResolvable,\n  PermissionFlagsBits,\n  PermissionResolvable,\n} from 'discord.js';\n\nclass RoleResponse {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild the api belongs to',\n    example: '123456789012345678',\n  })\n  guild: string;\n\n  @IsUrl()\n  @ApiProperty({\n    type: String,\n    description: 'The icon of the role',\n    example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n  })\n  icon: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The unicodeEmoji of the role',\n    example: '👑',\n  })\n  unicodeEmoji: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the role',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The name of the role',\n    example: 'Admin',\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The color of the role',\n    example: 0,\n  })\n  color: number;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is hoisted',\n    example: false,\n  })\n  hoist: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The position of the role',\n    example: 0,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The permissions of the role',\n    example: '0',\n  })\n  permissions: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is managed by an integration',\n    example: false,\n  })\n  managed: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is mentionable',\n    example: false,\n  })\n  mentionable: boolean;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The tags of the role',\n    example: null,\n  })\n  tags: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The timestamp the role was created at(Unixtimestamp)',\n    example: 1600000000000,\n  })\n  createdTimestamp: number;\n}\n\nclass EditRoleData {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsIn(Object.keys(Colors))\n  @ApiProperty({\n    enum: Colors,\n    required: false,\n    example: 'White',\n    examples: Object.keys(Colors),\n    description: 'New color of the role',\n  })\n  color?: ColorResolvable;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'Why was the role updated',\n  })\n  reason: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Whether or not the role should be hoisted',\n  })\n  hoist?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description:\n      'The position of the role; Higher = more permissions relative to the role below',\n  })\n  position?: number;\n\n  @IsIn(Object.keys(PermissionFlagsBits))\n  @IsOptional()\n  @ApiProperty({\n    type: Array,\n    required: false,\n    description: 'Updated Permission',\n    default: null,\n    example: ['AddReactions', 'KickMembers'],\n  })\n  permissions?: PermissionResolvable;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the role be mentionable or not',\n  })\n  mentionable?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New Icon of the role, base64 encoded string',\n    externalDocs: {\n      description: 'Discord.js docs',\n      url: 'https://old.discordjs.dev/#/docs/discord.js/main/class/Role?scrollTo=setIcon',\n    },\n  })\n  icon?: Base64Resolvable | EmojiResolvable | null;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'The new unicodeEmoji of the role',\n  })\n  unicodeEmoji?: string | null;\n}\n// Generate example schema for get /guilds/:guildId/roles/:roleId\nconst roleResponseSchema = {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n};\n// Schema for retrieving all roles from a guild with example data\nconst rolesResponseSchema = {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n};\n\n// Write exports here\nexport { RoleResponse, EditRoleData, roleResponseSchema, rolesResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventToLog.html":{"url":"interfaces/EventToLog.html","title":"interface - EventToLog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventToLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/interfaces/event-to-log.ts\n        \n\n\n            \n                Description\n            \n            \n                Thrown events that implement this can be used to pretty print into the application log\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toFormattedLog\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/interfaces/event-to-log.ts:11\n                        \n                    \n\n\n            \n                \n                        Pretty print function on thrown events within the app, not all events implement this!!\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Logger which is used for logging to the nestjs app log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\n\n/**\n * Thrown events that implement this can be used to pretty print into the application log\n */\nexport interface EventToLog {\n  /**\n   * Pretty print function on thrown events within the app, not all events implement this!!\n   * @param logger Logger which is used for logging to the nestjs app log\n   */\n  toFormattedLog(logger: Logger): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Explorer.html":{"url":"classes/Explorer.html","title":"class - Explorer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Explorer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/explorers/event.explorer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                botEventDecorator\n                            \n                            \n                                    Public\n                                checkProviders\n                            \n                            \n                                    Private\n                                hasHandlerMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, externalContextCreator: ExternalContextCreator)\n                    \n                \n                        \n                            \n                                Defined in src/bot/explorers/event.explorer.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        externalContextCreator\n                                                  \n                                                        \n                                                                    ExternalContextCreator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        botEventDecorator\n                        \n                    \n                \n            \n            \n                \n                        \n                    botEventDecorator(provider: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        checkProviders\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkProviders(providers: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                providers\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasHandlerMethod\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasHandlerMethod(provider: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\nimport {\n  BOT_EVENT_KEY,\n  BOT_EVENT_HANDLER_NAME,\n} from '../decorators/bot-event.decorator';\nimport { ExternalContextCreator } from '@nestjs/core';\n\nexport class Explorer {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    private readonly externalContextCreator: ExternalContextCreator,\n  ) {}\n  public checkProviders(providers: any[]): void {\n    for (const provider of providers) {\n      const metadata = this.botEventDecorator(provider);\n      if (metadata) {\n        if (!this.hasHandlerMethod(provider)) {\n          throw new Error(\n            `The provider ${provider.name} does not have a handler method, does it implement BotEvent?`,\n          );\n        }\n        const handler = this.externalContextCreator.create(\n          provider,\n          provider[BOT_EVENT_HANDLER_NAME],\n          BOT_EVENT_HANDLER_NAME,\n        );\n        this.client.on(metadata, handler);\n      }\n    }\n  }\n\n  private botEventDecorator(provider: any) {\n    return Reflect.getMetadata(BOT_EVENT_KEY, provider);\n  }\n\n  private hasHandlerMethod(provider: any): boolean {\n    return (\n      provider.prototype.hasOwnProperty(BOT_EVENT_HANDLER_NAME) &&\n      typeof provider.prototype.handler === 'function'\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Guild.html":{"url":"classes/Guild.html","title":"class - Guild","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Guild\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                guildId\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['guildId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { GuildUser } from '@prisma/client';\n\nexport class Guild {\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) name: string;\n  @ApiProperty({ type: String }) image: string;\n}\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n  @ApiPropertyOptional({ type: [Guild] }) guilds: Guild[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildAutoDeleteChannelController.html":{"url":"controllers/GuildAutoDeleteChannelController.html","title":"controller - GuildAutoDeleteChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildAutoDeleteChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                autodeletechannel\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createAutoDeleteChannel\n                            \n                            \n                                    \n                                    Async\n                                getAutoDeleteChannel\n                            \n                            \n                                    \n                                    Async\n                                updateAutoDeleteChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAutoDeleteChannel(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAutoDeleteChannel(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAutoDeleteChannel(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { GuildAutoDeleteChannelService } from './guild-auto-delete-channel.service';\nimport { GuildAutoDeleteChannelDto } from './dto/auto-delete-channels.dto';\nimport { plainToInstance } from 'class-transformer';\n\n@Controller('autodeletechannel')\nexport class GuildAutoDeleteChannelController {\n  constructor(\n    @Inject(GuildAutoDeleteChannelService)\n    private readonly guildAutoDeleteChannelService: GuildAutoDeleteChannelService,\n  ) {}\n\n  @Get()\n  async getAutoDeleteChannel(@Param('guildId') guildId: string) {\n    const autoDeleteChannels =\n      await this.guildAutoDeleteChannelService.get(guildId);\n    if (!autoDeleteChannels) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, autoDeleteChannels);\n  }\n\n  @Post()\n  async createAutoDeleteChannel(\n    @Param('guildId') guildId: string,\n    @Body() autoDeleteChannel: GuildAutoDeleteChannelDto,\n  ) {\n    this.guildAutoDeleteChannelService.get(guildId).then(() => {\n      throw new ConflictException(\n        `Channel ${channel.channelId} already exists`,\n      );\n    });\n    const channel = await this.guildAutoDeleteChannelService.upsert(\n      guildId,\n      autoDeleteChannel,\n    );\n    if (!channel) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, channel);\n  }\n\n  @Put()\n  async updateAutoDeleteChannel(\n    @Param('guildId') guildId: string,\n    @Body() autoDeleteChannel: GuildAutoDeleteChannelDto,\n  ) {\n    const channel = await this.guildAutoDeleteChannelService.upsert(\n      guildId,\n      autoDeleteChannel,\n    );\n    if (!channel) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, channel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildAutoDeleteChannelDto.html":{"url":"classes/GuildAutoDeleteChannelDto.html","title":"class - GuildAutoDeleteChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildAutoDeleteChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                    \n                                deleteAtCron\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deleteAtCron\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(/^(((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7}$/, {message: 'Invalid cron expression'})@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { AutoDeleteChannels } from '@prisma/client';\nimport { IsString, Matches } from 'class-validator';\n\nexport class GuildAutoDeleteChannelDto\n  implements Omit\n{\n  @IsString()\n  @ApiProperty({ type: String })\n  channelId: string;\n  @IsString()\n  @Matches(/^(((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7}$/, {\n    message: 'Invalid cron expression',\n  })\n  @ApiProperty({ type: String })\n  deleteAtCron: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildAutoDeleteChannelModule.html":{"url":"modules/GuildAutoDeleteChannelModule.html","title":"module - GuildAutoDeleteChannelModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildAutoDeleteChannelModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildAutoDeleteChannelModule\n\n\n\ncluster_GuildAutoDeleteChannelModule_providers\n\n\n\ncluster_GuildAutoDeleteChannelModule_exports\n\n\n\n\nGuildAutoDeleteChannelService \n\nGuildAutoDeleteChannelService \n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelService  -->\n\nGuildAutoDeleteChannelModule->GuildAutoDeleteChannelService \n\n\n\n\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildAutoDeleteChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildRestrictedChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nGuildAutoDeleteChannelModule -->\n\nGuildService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildAutoDeleteChannelModule -->\n\nGuildSettingsService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nGuildAutoDeleteChannelModule -->\n\nGuildUserService->GuildAutoDeleteChannelModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildAutoDeleteChannelModule -->\n\nPrismaService->GuildAutoDeleteChannelModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nGuildAutoDeleteChannelModule -->\n\nTasksService->GuildAutoDeleteChannelModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildAutoDeleteChannelService\n                        \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildAutoDeleteChannelController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildAutoDeleteChannelService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildAutoDeleteChannelService } from './guild-auto-delete-channel.service';\nimport { GuildAutoDeleteChannelController } from './guild-auto-delete-channel.controller';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\nimport { TasksService } from 'src/tasks/tasks.service';\nimport { GuildService } from '../guild.service';\nimport { GuildUserService } from '../guild-user/guild-user.service';\nimport { GuildRestrictedChannelService } from '../guild-restricted-channel/guild-restricted-channel.service';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [\n    GuildAutoDeleteChannelService,\n    PrismaService,\n    TasksService,\n    GuildService,\n    GuildUserService,\n    GuildRestrictedChannelService,\n    GuildSettingsService,\n  ],\n  controllers: [GuildAutoDeleteChannelController],\n  exports: [GuildAutoDeleteChannelService],\n})\nexport class GuildAutoDeleteChannelModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildAutoDeleteChannelService.html":{"url":"injectables/GuildAutoDeleteChannelService.html","title":"injectable - GuildAutoDeleteChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildAutoDeleteChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                constructChannelDeleteJobs\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService, tasksService: TasksService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tasksService\n                                                  \n                                                        \n                                                                        TasksService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        constructChannelDeleteJobs\n                        \n                    \n                \n            \n            \n                \n                        \n                    constructChannelDeleteJobs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GuildAutoDeleteChannelService.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Client, GuildChannel } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { TasksService } from 'src/tasks/tasks.service';\nimport { GuildAutoDeleteChannelDto } from './dto/auto-delete-channels.dto';\n\n@Injectable()\nexport class GuildAutoDeleteChannelService {\n  logger = new Logger(GuildAutoDeleteChannelService.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(TasksService) private tasksService: TasksService,\n  ) {}\n  async get(guildId: string) {\n    return await this.database.autoDeleteChannels.findMany({\n      where: { guildId },\n    });\n  }\n  async upsert(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto) {\n    const channelId = autoDeleteChannel.channelId;\n    return this.database.autoDeleteChannels.upsert({\n      where: {\n        channelId,\n        guildId,\n      },\n      create: {\n        ...autoDeleteChannel,\n        guildId,\n      },\n      update: {\n        ...autoDeleteChannel,\n        guildId,\n      },\n    });\n  }\n\n  async constructChannelDeleteJobs() {\n    const guilds = await this.database.guild.findMany({\n      select: {\n        AutoDeleteChannels: true,\n      },\n    });\n    guilds.forEach((guild) => {\n      guild.AutoDeleteChannels.forEach((deleteChannel) => {\n        this.tasksService.createDynamicScheduledJob({\n          cronTime: deleteChannel.deleteAtCron,\n          onTick: async () => {\n            const channelId = deleteChannel.channelId;\n            const guildId = deleteChannel.guildId;\n            this.logger.log(\n              `Deleting channel ${channelId} in guild ${guildId}`,\n            );\n            const guild = await this.client.guilds.fetch(guildId);\n            const channel = (await guild.channels.fetch(\n              channelId,\n            )) as GuildChannel;\n            const nChannel = await channel.clone();\n            await channel.delete();\n            Promise.all([\n              nChannel.setPosition(channel.position),\n              nChannel.setParent(channel.parentId),\n              nChannel.setName(channel.name),\n            ]);\n          },\n          timeZone: 'Europe/Berlin',\n        });\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildChannelEditOptions.html":{"url":"classes/GuildChannelEditOptions.html","title":"class - GuildChannelEditOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildChannelEditOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nsfw\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                parent\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                topic\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                userLimit\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New name of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nsfw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Should the channel be NSFW'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:189\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryChannelResolvable | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['String', 'undefined', 'CategoryChannel'])@IsOptional()@ApiProperty({type: undefined, required: false, description: 'Category of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, required: false, description: 'Why was the channel updated/created'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:215\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'Topic of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:180\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChannelType.GuildText | ChannelType.GuildAnnouncement\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ChannelType)@IsOptional()@ApiProperty({enum: ChannelType, required: false, description: 'Change the type of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        userLimit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({type: Number, required: false, description: 'Slowmode for the channel in seconds'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:198\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildController.html":{"url":"controllers/GuildController.html","title":"controller - GuildController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                messagesPerChannelLastMonth\n                            \n                            \n                                    \n                                    Async\n                                messagesPerDayLastMonth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        messagesPerChannelLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    messagesPerChannelLastMonth(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('messages-per-channel-last-month')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        messagesPerDayLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    messagesPerDayLastMonth(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('messages-per-day-last-month')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, Param, UseGuards } from '@nestjs/common';\nimport { GuildService } from './guild.service';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\n\n@Controller('/')\n@UseGuards(JwtAuthGuard)\nexport class GuildController {\n  constructor(\n    @Inject(GuildService) private guildService: GuildService,\n    @InjectDiscordClient() private client: Client,\n  ) {}\n\n  @Get('messages-per-channel-last-month')\n  async messagesPerChannelLastMonth(@Param('guildId') guildId: string) {\n    const data =\n      await this.guildService.averageMessagesPerChannelLastMonth(guildId);\n    const labels = [];\n    const values = Object.values(data);\n    Object.keys(data).forEach(async (key) => {\n      labels.push(\n        (await (await this.client.guilds.fetch(guildId)).channels.fetch(key))\n          .name,\n      );\n    });\n    return {\n      labels,\n      values,\n    };\n  }\n  @Get('messages-per-day-last-month')\n  async messagesPerDayLastMonth(@Param('guildId') guildId: string) {\n    const data =\n      await this.guildService.averageMessagesPerDayLastMonth(guildId);\n    const labels = [];\n    const values = Object.values(data);\n    Object.keys(data).forEach((key) => {\n      labels.push(key);\n    });\n    return {\n      labels,\n      values,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildDoesNotExistException.html":{"url":"classes/GuildDoesNotExistException.html","title":"class - GuildDoesNotExistException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildDoesNotExistException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/guild-does-not-exist-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when a Guild isn't found by ID\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/guild-does-not-exist-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a Guild isn't found by ID\n */\nexport class GuildDoesNotExistException extends Error {\n  constructor(guildId: string) {\n    super(\n      `Guild with the id ${guildId} does not exist or is not using Cardinal System.`,\n    );\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(GuildDoesNotExistException)\nexport class GuildDoesNotExistExceptionFilter implements ExceptionFilter {\n  catch(exception: GuildDoesNotExistException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildDoesNotExistExceptionFilter.html":{"url":"classes/GuildDoesNotExistExceptionFilter.html","title":"class - GuildDoesNotExistExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildDoesNotExistExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/guild-does-not-exist-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to produce the http response when the exception is thrown in a http context\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: GuildDoesNotExistException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/guild-does-not-exist-exception.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            GuildDoesNotExistException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a Guild isn't found by ID\n */\nexport class GuildDoesNotExistException extends Error {\n  constructor(guildId: string) {\n    super(\n      `Guild with the id ${guildId} does not exist or is not using Cardinal System.`,\n    );\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(GuildDoesNotExistException)\nexport class GuildDoesNotExistExceptionFilter implements ExceptionFilter {\n  catch(exception: GuildDoesNotExistException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildMemberEvents.html":{"url":"injectables/GuildMemberEvents.html","title":"injectable - GuildMemberEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildMemberEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/guild-members/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addMember\n                            \n                            \n                                    \n                                    \n                                    Async\n                                checkIfPersonWasVerifiedBefore\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    \n                                    Async\n                                removeMember\n                            \n                            \n                                    \n                                    \n                                    Async\n                                unlockUser\n                            \n                            \n                                    \n                                    Async\n                                updateRank\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, guildUserService: GuildUserService, settingsService: GuildSettingsService, guildService: GuildService, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/guild-members/index.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(member: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberAdd')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        checkIfPersonWasVerifiedBefore\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfPersonWasVerifiedBefore(reaction: MessageReaction, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageReactionAdd')@UseGuards(undefined, undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                        MessageReaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeMember(member: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberRemove')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        unlockUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unlockUser(reaction: MessageReaction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageReactionAdd')@UseGuards(undefined, undefined, ReactedMemberIsModOrHigherGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                        MessageReaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateRank\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRank(oldMember: GuildMember, newMember: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberUpdate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldMember\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newMember\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GuildMemberEvents.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/guild-members/index.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, On } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger, UseGuards } from '@nestjs/common';\nimport { Rank } from '@prisma/client';\nimport {\n  Client,\n  GuildMember,\n  MessageReaction,\n  GuildTextBasedChannel,\n  Message,\n  User,\n} from 'discord.js';\nimport { ReactedMemberIsModOrHigherGuard } from 'src/bot/guards/member-is-mod-or-higher.guard';\nimport { ReactionChannelIdGuard } from 'src/bot/guards/reaction-in-channel.guard';\nimport { ReactionEmoteGuard } from 'src/bot/guards/reaction-emote.guard';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { JsonArray } from 'type-fest';\n\n@Injectable()\nexport class GuildMemberEvents {\n  logger = new Logger(GuildMemberEvents.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n    @Inject(GuildService) private readonly guildService: GuildService,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n\n  // Runs whenever the discordjs websocket gets (re)created\n  @On('ready')\n  async onReady(): Promise {\n    // This will always fail, why? IDK FUCKING KNOW and I'm fed up with this project\n    // return await this.database.guild.upsert(\n    // Failed to convert rust `String` into napi `string`\n    try {\n      await this.client.guilds.fetch();\n      this.client.guilds.cache.forEach(async (guild) => {\n        await this.guildService.upsertGuild(guild.id, {\n          name: guild.name,\n        });\n        this.guildUserService.addMembers(guild.id);\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  @On('guildMemberAdd')\n  async addMember(member: GuildMember) {\n    this.logger.log(`Adding member ${member.user.username} to database.`);\n    if (member.user.bot) return;\n    await this.guildUserService.addMember(member.id, member.guild.id, {\n      rank: Rank.NEW,\n      unlocked: false,\n    });\n  }\n\n  @On('guildMemberRemove')\n  async removeMember(member: GuildMember) {\n    await this.guildUserService.deleteOne(member.id, member.guild.id);\n  }\n\n  @On('messageReactionAdd')\n  @UseGuards(\n    ReactionChannelIdGuard('1121822614374060175'),\n\n    ReactionEmoteGuard(['✅', '☑️']),\n    ReactedMemberIsModOrHigherGuard,\n  )\n  async unlockUser(reaction: MessageReaction) {\n    if (reaction.partial) {\n      try {\n        await reaction.fetch();\n      } catch (e) {\n        this.logger.error(e);\n        return;\n      }\n    }\n    const user = await this.guildUserService.getGuildUser(\n      reaction.message.author.id,\n      reaction.message.guildId,\n    );\n    if (!user && user.rank !== Rank.NEW) return;\n    await this.guildUserService.upsert(user.userId, reaction.message.guildId, {\n      unlocked: true,\n      firstMessageId: reaction.message.id,\n    });\n    const member = await (\n      await this.client.guilds.fetch(reaction.message.guildId)\n    ).members.fetch(user.userId);\n    try {\n      if (!member.roles.cache.has('1226585753253843014'))\n        throw 'Has not accepted AGB';\n      const verifiedRoleId = await this.settingsService.getVerifiedMemberRoleId(\n        reaction.message.guildId,\n      );\n      await member.roles.add(verifiedRoleId);\n      if (reaction.emoji.name === '☑️')\n        await member.roles.add('1014066383912439809');\n      // Wait 500ms to make sure the role is added before removing the unverified role\n      //https://github.com/discordjs/discord.js/issues/4930#issuecomment-1042351896\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      await member.roles.remove(\n        await this.settingsService.getUnverifiedMemberRoleId(\n          reaction.message.guildId,\n        ),\n      );\n    } catch (e) {\n      this.logger.error(e);\n      return;\n    }\n    const channel = (await reaction.message.guild.channels.fetch(\n      await this.settingsService.getOpenIntroChannelId(\n        reaction.message.guildId,\n      ),\n    )) as GuildTextBasedChannel;\n    await channel.send(\n      await this.settingsService.templateMessage(\n        reaction.message as Message,\n      ),\n    );\n    await reaction.remove();\n  }\n\n  @On('guildMemberUpdate')\n  async updateRank(oldMember: GuildMember, newMember: GuildMember) {\n    // check if user has been promoted to mod or admin\n    const oldRank = await this.guildUserService.getRank(oldMember);\n    const newRank = await this.guildUserService.getRank(newMember);\n    if (oldRank === newRank) return;\n    this.logger.log(\n      `User ${newMember.user.username} has been promoted from ${oldRank} to ${newRank}`,\n    );\n    await this.guildUserService.upsert(newMember.id, newMember.guild.id, {\n      rank: newRank,\n    });\n  }\n\n  @On('messageReactionAdd')\n  @UseGuards(\n    ReactionChannelIdGuard('1226574989147508746'),\n    ReactionEmoteGuard(['👍']),\n  )\n  async checkIfPersonWasVerifiedBefore(reaction: MessageReaction, user: User) {\n    if (reaction.partial) {\n      try {\n        await reaction.fetch();\n      } catch (e) {\n        this.logger.error(e);\n        return;\n      }\n    }\n    const dbUser = await this.database.guildUser.findUnique({\n      where: {\n        guildId_userId: { guildId: reaction.message.guildId, userId: user.id },\n      },\n    });\n    const discordUser = await this.client.guilds.cache\n      .get(dbUser.guildId)\n      .members.fetch(user.id);\n    if (!dbUser && discordUser.roles.cache.has('1121823930085285938')) {\n      const roles = (\n        await this.database.lockdownRoleBackup.findUnique({\n          where: {\n            guildId_userId: { guildId: dbUser.guildId, userId: user.id },\n          },\n        })\n      ).roles as JsonArray;\n      if (!roles) return;\n      // Tyep system gets a bit iffy here :/\n      roles.forEach(\n        async (role: { id: string }) => await discordUser.roles.add(role.id),\n      );\n      await discordUser.roles.remove('1121823930085285938');\n      await this.database.lockdownRoleBackup.delete({\n        where: { guildId_userId: { userId: user.id, guildId: dbUser.guildId } },\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildMessageHandler.html":{"url":"injectables/GuildMessageHandler.html","title":"injectable - GuildMessageHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildMessageHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/message-create/guild-message/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                onMessage\n                            \n                            \n                                    \n                                    \n                                    Async\n                                toniMsgsToBird\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildUserService: GuildUserService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/message-create/guild-message/index.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageFromUserGuard, IsUserUnlockedGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/guild-message/index.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        toniMsgsToBird\n                        \n                    \n                \n            \n            \n                \n                        \n                    toniMsgsToBird(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageFromUserGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/guild-message/index.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { On } from '@discord-nestjs/core';\nimport { Inject, Injectable, UseGuards } from '@nestjs/common';\nimport { Attachment, GuildTextBasedChannel, Message } from 'discord.js';\nimport { MessageFromUserGuard } from 'src/bot/guards/message-from-user.guard';\nimport { IsUserUnlockedGuard } from 'src/bot/guards/user-is-unlocked.guard';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport getAttachmentType from 'src/util/functions/get-attachtment-type';\n\n@Injectable()\nexport default class GuildMessageHandler {\n  constructor(\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n  ) {}\n  @On('messageCreate')\n  @UseGuards(MessageFromUserGuard, IsUserUnlockedGuard)\n  async onMessage(message: Message): Promise {\n    await this.guildUserService.insertMessage(\n      {\n        userId: message.author.id,\n        messageId: message.id,\n        channelId: message.channelId,\n        guildId: message.guildId,\n        createdAt: new Date(message.createdTimestamp),\n      },\n      {\n        messageId: message.id,\n        length: message.content.length,\n      },\n      message.attachments.map((attachment: Attachment) => {\n        return {\n          type: getAttachmentType(attachment.contentType),\n          url: attachment.url,\n          messageId: message.id,\n        };\n      }),\n      message.reactions.cache.map((reaction) => {\n        return {\n          messageId: message.id,\n          emoji: reaction.emoji.toString(),\n          count: reaction.count,\n        };\n      }),\n    );\n    await this.guildUserService.updateMessageCountBucket(\n      message.author.id,\n      message.guildId,\n    );\n  }\n\n  @On('messageCreate')\n  @UseGuards(MessageFromUserGuard)\n  async toniMsgsToBird(message: Message): Promise {\n    const channel = message.channel as GuildTextBasedChannel;\n    if (\n      channel.parentId !== '1011529685357838376' &&\n      channel.parentId !== '1051979218164125826'\n    ) {\n      if (message.author.id === '1132244079242133555')\n        message.react('1194715694948946030');\n    }\n  }\n\n  // @On('messageCreate')\n  // @UseGuards(MessageFromUserGuard)\n  // async checkLimits(message: Message) {\n  //   const guildUser = this.guildUserService.getGuildUser(\n  //     message.author.id,\n  //     message.guildId,\n  //   );\n  //   const hasAttachments = message.attachments.size > 0;\n  //   const typeOfAttachments = message.attachments.map(\n  //     (attachment: Attachment) => {\n  //       return ({}[getAttachmentType(attachment.contentType)] = attachment);\n  //     },\n  //   );\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildModule.html":{"url":"modules/GuildModule.html","title":"module - GuildModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildModule\n\n\n\ncluster_GuildModule_imports\n\n\n\ncluster_GuildModule_exports\n\n\n\ncluster_GuildModule_providers\n\n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\n\n\nGuildModule\n\nGuildModule\n\nGuildModule -->\n\nGuildAutoDeleteChannelModule->GuildModule\n\n\n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildModule -->\n\nGuildRestrictedChannelModule->GuildModule\n\n\n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildModule -->\n\nGuildSettingsModule->GuildModule\n\n\n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildModule -->\n\nGuildUserModule->GuildModule\n\n\n\n\n\nModerationModule\n\nModerationModule\n\nGuildModule -->\n\nModerationModule->GuildModule\n\n\n\n\n\nGuildService \n\nGuildService \n\nGuildService  -->\n\nGuildModule->GuildService \n\n\n\n\n\nDmMessageHandler\n\nDmMessageHandler\n\nGuildModule -->\n\nDmMessageHandler->GuildModule\n\n\n\n\n\nGuildMemberEvents\n\nGuildMemberEvents\n\nGuildModule -->\n\nGuildMemberEvents->GuildModule\n\n\n\n\n\nGuildMessageHandler\n\nGuildMessageHandler\n\nGuildModule -->\n\nGuildMessageHandler->GuildModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildModule -->\n\nGuildRestrictedChannelService->GuildModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nGuildModule -->\n\nGuildService->GuildModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildModule -->\n\nPrismaService->GuildModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DmMessageHandler\n                        \n                        \n                            GuildMemberEvents\n                        \n                        \n                            GuildMessageHandler\n                        \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GuildAutoDeleteChannelModule\n                        \n                        \n                            GuildRestrictedChannelModule\n                        \n                        \n                            GuildSettingsModule\n                        \n                        \n                            GuildUserModule\n                        \n                        \n                            ModerationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildController } from './guild.controller';\nimport { GuildService } from './guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildSettingsModule } from './guild-settings/guild-settings.module';\nimport { ModerationModule } from './moderation/moderation.module';\nimport { GuildUserModule } from './guild-user/guild-user.module';\nimport { GuildAutoDeleteChannelModule } from './guild-auto-delete-channel/guild-auto-delete-channel.module';\nimport { GuildRestrictedChannelModule } from './guild-restricted-channel/guild-restricted-channel.module';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel/guild-restricted-channel.service';\nimport GuildMessageHandler from './events/message-create/guild-message';\nimport { DmMessageHandler } from './events/message-create/dm-message';\nimport { ModRequestFlow } from './events/interaction-create/mod-request-menu';\nimport { GuildMemberEvents } from './events/guild-members';\n\n@Module({\n  imports: [\n    DiscordModule.forFeature(),\n    GuildUserModule,\n    GuildSettingsModule,\n    ModerationModule,\n    GuildAutoDeleteChannelModule,\n    GuildRestrictedChannelModule,\n  ],\n  controllers: [GuildController],\n  providers: [\n    GuildService,\n    PrismaService,\n    GuildRestrictedChannelService,\n    GuildMessageHandler,\n    DmMessageHandler,\n    ModRequestFlow,\n    GuildMemberEvents,\n  ],\n  exports: [GuildService],\n})\nexport class GuildModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildRestrictedChannelController.html":{"url":"controllers/GuildRestrictedChannelController.html","title":"controller - GuildRestrictedChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildRestrictedChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                guild-restricted-channel\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('guild-restricted-channel')\nexport class GuildRestrictedChannelController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildRestrictedChannelModule.html":{"url":"modules/GuildRestrictedChannelModule.html","title":"module - GuildRestrictedChannelModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildRestrictedChannelModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildRestrictedChannelModule\n\n\n\ncluster_GuildRestrictedChannelModule_exports\n\n\n\ncluster_GuildRestrictedChannelModule_providers\n\n\n\n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService \n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelService  -->\n\nGuildRestrictedChannelModule->GuildRestrictedChannelService \n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelModule -->\n\nGuildRestrictedChannelService->GuildRestrictedChannelModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildRestrictedChannelModule -->\n\nPrismaService->GuildRestrictedChannelModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildRestrictedChannelController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildRestrictedChannelController } from './guild-restricted-channel.controller';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  controllers: [GuildRestrictedChannelController],\n  providers: [GuildRestrictedChannelService, PrismaService],\n  exports: [GuildRestrictedChannelService],\n})\nexport class GuildRestrictedChannelModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildRestrictedChannelService.html":{"url":"injectables/GuildRestrictedChannelService.html","title":"injectable - GuildRestrictedChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildRestrictedChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getRestrictedChannel\n                            \n                            \n                                    Async\n                                isChannelAvailableToUser\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRestrictedChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRestrictedChannel(guildId: string, channelId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isChannelAvailableToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    isChannelAvailableToUser(user: GuildUser, channel: RestrictedChannels)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            GuildUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel\n                                            \n                                                            RestrictedChannels\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(guildId: string, channelId: string, data: Omit, guildId> | channelId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, guildId> | channelId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { GuildUser, RestrictedChannels } from '@prisma/client';\nimport { Client } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Injectable()\nexport class GuildRestrictedChannelService {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  async getRestrictedChannel(guildId: string, channelId: string) {\n    return this.database.restrictedChannels.findUnique({\n      where: {\n        guildId,\n        channelId,\n      },\n    });\n  }\n  async upsert(\n    guildId: string,\n    channelId: string,\n    data: Omit, 'guildId'>, 'channelId'>,\n  ) {\n    return this.database.restrictedChannels.upsert({\n      where: {\n        channelId,\n        guildId,\n      },\n      create: {\n        ...data,\n        channelId,\n        guildId,\n      },\n      update: {\n        ...data,\n        channelId,\n        guildId,\n      },\n    });\n  }\n  async getAll(guildId: string) {\n    return this.database.restrictedChannels.findMany({\n      where: {\n        guildId,\n      },\n    });\n  }\n\n  async isChannelAvailableToUser(user: GuildUser, channel: RestrictedChannels) {\n    return user.messageCountBucket >= channel.requiredPoints;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildService.html":{"url":"injectables/GuildService.html","title":"injectable - GuildService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _addMemberToChannelOverwrite\n                            \n                            \n                                    Private\n                                    Async\n                                _removeMemberFromChannelOverwrite\n                            \n                            \n                                    Async\n                                averageMessagesPerChannelLastMonth\n                            \n                            \n                                    Async\n                                averageMessagesPerDayLastMonth\n                            \n                            \n                                    Async\n                                cleanWfpMembers\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    Async\n                                updateChannelPermissions\n                            \n                            \n                                    Async\n                                upsertGuild\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, restrictedChannelService: GuildRestrictedChannelService, client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        restrictedChannelService\n                                                  \n                                                        \n                                                                        GuildRestrictedChannelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _addMemberToChannelOverwrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    _addMemberToChannelOverwrite(user_id: string, channel_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:223\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _removeMemberFromChannelOverwrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    _removeMemberFromChannelOverwrite(user_id: string, channel_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:234\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        averageMessagesPerChannelLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    averageMessagesPerChannelLastMonth(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:112\n                        \n                    \n\n\n            \n                \n                        Returns the average written messages per channel for last 30 days for the given guild.\nSQL:\n SELECT\n  m.channelId,\n  m.userId,\n  COUNT(m.messageId) AS messageCount,\n  AVG(subquery.messageCount) AS avgMessageCount\nFROM\n  Message m\nJOIN\n  (SELECT channelId, COUNT(messageId) / 30 AS messageCount\n  FROM Message\n  WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\n  GROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\nWHERE\n  m.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY\n  m.channelId, m.userId\nORDER BY\n avgMessageCount DESC;\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A map that contains each channel ID and the average written messages\nSQL:\nSELECT\nm.channelId,\nm.userId,\nCOUNT(m.messageId) AS messageCount,\nAVG(subquery.messageCount) AS avgMessageCount\nFROM\nMessage m\nJOIN\n(SELECT channelId, COUNT(messageId) / 30 AS messageCount\nFROM Message\nWHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\nGROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\nWHERE\nm.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY\nm.channelId, m.userId\nORDER BY\navgMessageCount DESC;\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        averageMessagesPerDayLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    averageMessagesPerDayLastMonth(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:170\n                        \n                    \n\n\n            \n                \n                        Returns the average written message per day in the last 30 days per channel\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanWfpMembers(guildID: string, dryRun: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                guildID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                dryRun\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Once('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:247\n                        \n                    \n\n\n            \n                \n                        Event handler that listens to the ready event which is fired when the bot websocket has been created.\nSets up all guilds in the database if they dont already exist there or updates them.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateChannelPermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateChannelPermissions(user: GuildUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:203\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            GuildUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsertGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsertGuild(guildId: string, data: Omit | id>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit | id>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, Once } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { Guild, GuildUser } from '@prisma/client';\nimport { Client, BaseGuildTextChannel, GuildMember } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel/guild-restricted-channel.service';\n\n@Injectable()\nexport class GuildService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(GuildRestrictedChannelService)\n    private restrictedChannelService: GuildRestrictedChannelService,\n    @InjectDiscordClient() private client: Client,\n  ) {}\n\n  async upsertGuild(guildId: string, data: Omit, 'id'>) {\n    try {\n      return await this.database.guild.upsert({\n        where: {\n          id: guildId,\n        },\n        select: {\n          AuditLog: true,\n          Settings: true,\n          AutoDeleteChannels: true,\n          RestrictedChannels: true,\n          Limits: true,\n        },\n        create: {\n          id: guildId,\n          Settings: {\n            create: {},\n          },\n          ...data,\n        },\n        update: {\n          ...data,\n        },\n      });\n    } catch (e) {\n      return e;\n    }\n  }\n\n  async cleanWfpMembers(\n    guildID: string,\n    dryRun: boolean = false,\n  ): Promise>> {\n    const twoWeekDate = new Date(new Date().setDate(new Date().getDate() - 14));\n    const membersUnfiltered = (\n      await (\n        await this.client.guilds.fetch(guildID)\n      ).roles.fetch('1121823930085285938')\n    ).members;\n    const members: Array = [];\n    membersUnfiltered.forEach(async (member) => {\n      if (\n        twoWeekDate > new Date(member.joinedTimestamp) &&\n        // Has not VereinsMitglied\n        !member.roles.cache.has('1070116538083975309')\n      ) {\n        members.push(member);\n      }\n    });\n    // Return early if we are in a dry fun\n    if (dryRun)\n      return {\n        membersToKick: members,\n        unkickableMembers: [],\n      };\n    const unkickableMembers: Array = [];\n    members.forEach(async (member) => {\n      try {\n        await member.kick(\n          'Kicked by the bot for being in wfp for more than 2 weeks',\n        );\n      } catch {\n        unkickableMembers.push(member);\n      }\n    });\n    return {\n      membersToKick: members,\n      unkickableMembers: unkickableMembers,\n    };\n  }\n\n  /**\n   * Returns the average written messages per channel for last 30 days for the given guild.\n   * @returns A map that contains each channel ID and the average written messages\n   *\n   * SQL:\n   *  SELECT\n   *   m.channelId,\n   *   m.userId,\n   *   COUNT(m.messageId) AS messageCount,\n   *   AVG(subquery.messageCount) AS avgMessageCount\n   * FROM\n   *   Message m\n   * JOIN\n   *   (SELECT channelId, COUNT(messageId) / 30 AS messageCount\n   *   FROM Message\n   *   WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\n   *   GROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\n   * WHERE\n   *   m.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\n   * GROUP BY\n   *   m.channelId, m.userId\n   * ORDER BY\n   *  avgMessageCount DESC;\n   */\n  async averageMessagesPerChannelLastMonth(\n    guildId: string,\n  ): Promise> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageStats = await this.database.messages.groupBy({\n      by: ['channelId', 'userId'],\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        AND: {\n          guildId: guildId,\n        },\n      },\n      _count: {\n        messageId: true,\n      },\n      orderBy: {\n        _count: {\n          messageId: 'desc',\n        },\n      },\n    });\n\n    const messageCounts: Record\n    > = messageStats.reduce((acc, curr) => {\n      const channelId = curr.channelId.toString();\n      const userId = curr.userId.toString();\n      const count = curr._count?.messageId ?? 0;\n\n      if (!acc[channelId]) {\n        acc[channelId] = {};\n      }\n\n      acc[channelId][userId] = count;\n\n      return acc;\n    }, {});\n\n    const avgMessageCounts = {};\n\n    for (const channelId in messageCounts) {\n      const userCounts = Object.values(messageCounts[channelId]);\n      const avgMessageCount =\n        userCounts.reduce((sum, count) => sum + count, 0) / userCounts.length;\n      avgMessageCounts[channelId] = avgMessageCount;\n    }\n\n    return avgMessageCounts;\n  }\n  /**\n   * Returns the average written message per day in the last 30 days per channel\n   * @param guildId string\n   * @returns\n   */\n  async averageMessagesPerDayLastMonth(\n    guildId: string,\n  ): Promise> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageStats = await this.database.messages.groupBy({\n      by: 'createdAt',\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        AND: {\n          guildId,\n        },\n      },\n      _count: {\n        messageId: true,\n      },\n    });\n    const messageCounts: Record = messageStats.reduce(\n      (acc, curr) => {\n        const date = curr.createdAt.toISOString().split('T')[0];\n        // sum up all the messages for that day and add it to the accumulator\n        acc[date] = (acc[date] ?? 0) + (curr._count?.messageId ?? 0);\n\n        return acc;\n      },\n      {},\n    );\n\n    return messageCounts;\n  }\n\n  async updateChannelPermissions(user: GuildUser) {\n    this.restrictedChannelService.getAll(user.guildId).then((channels) =>\n      channels.forEach((channel) =>\n        this.restrictedChannelService\n          .isChannelAvailableToUser(user, channel)\n          .then((isAvailable) => {\n            if (isAvailable)\n              this._removeMemberFromChannelOverwrite(\n                user.userId.toString(),\n                channel.channelId,\n              );\n            else\n              this._addMemberToChannelOverwrite(\n                user.userId.toString(),\n                channel.channelId,\n              );\n          }),\n      ),\n    );\n  }\n  private async _addMemberToChannelOverwrite(\n    user_id: string,\n    channel_id: string,\n  ) {\n    await (\n      (await this.client.channels.fetch(channel_id)) as BaseGuildTextChannel\n    ).permissionOverwrites.create(user_id, {\n      ViewChannel: false,\n      ReadMessageHistory: false,\n    });\n  }\n  private async _removeMemberFromChannelOverwrite(\n    user_id: string,\n    channel_id: string,\n  ) {\n    await (\n      (await this.client.channels.fetch(channel_id)) as BaseGuildTextChannel\n    ).permissionOverwrites.delete(user_id);\n  }\n  /**\n   * Event handler that listens to the ready event which is fired when the bot websocket has been created.\n   * Sets up all guilds in the database if they dont already exist there or updates them.\n   */\n  @Once('ready')\n  async onReady() {\n    const guilds = await this.client.guilds.fetch();\n    guilds.forEach(async (guild) => {\n      this.upsertGuild(guild.id, {\n        name: guild.name,\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildSettingsController.html":{"url":"controllers/GuildSettingsController.html","title":"controller - GuildSettingsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildSettingsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSettings\n                            \n                            \n                                    \n                                    \n                                    Async\n                                putSettings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSettings(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        putSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    putSettings(guildId: string, body: SettingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatusCode.Accepted)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            SettingsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Param,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../../auth/jwt/guards/jwt-auth.guard';\nimport { SettingsDto } from './dto/settings.dto';\nimport { GuildSettingsService } from './guild-settings.service';\nimport { plainToInstance } from '../../util/functions/plain-to-instance';\nimport { HttpStatusCode } from 'axios';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { Rank } from '@prisma/client';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller()\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class GuildSettingsController {\n  constructor(private readonly settingsService: GuildSettingsService) {}\n\n  @Get()\n  async getSettings(@Param('guildId') guildId: string): Promise {\n    const settings = await this.settingsService.getSettings(guildId);\n    return plainToInstance(SettingsDto, settings);\n  }\n\n  @Put()\n  @HttpCode(HttpStatusCode.Accepted)\n  async putSettings(\n    @Param('guildId') guildId: string,\n    @Body() body: SettingsDto,\n  ) {\n    await this.settingsService.editSettings(guildId, body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildSettingsModule.html":{"url":"modules/GuildSettingsModule.html","title":"module - GuildSettingsModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildSettingsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildSettingsModule\n\n\n\ncluster_GuildSettingsModule_providers\n\n\n\ncluster_GuildSettingsModule_exports\n\n\n\n\nGuildSettingsService \n\nGuildSettingsService \n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildSettingsService  -->\n\nGuildSettingsModule->GuildSettingsService \n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildSettingsModule -->\n\nGuildSettingsService->GuildSettingsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildSettingsModule -->\n\nPrismaService->GuildSettingsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildSettingsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildSettingsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildSettingsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildSettingsService } from './guild-settings.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsController } from './guild-settings.controller';\n\n@Module({\n  providers: [GuildSettingsService, PrismaService],\n  controllers: [GuildSettingsController],\n  exports: [GuildSettingsService],\n})\nexport class GuildSettingsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildSettingsService.html":{"url":"injectables/GuildSettingsService.html","title":"injectable - GuildSettingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildSettingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editSettings\n                            \n                            \n                                    Async\n                                getAdminRoleId\n                            \n                            \n                                    Async\n                                getIntroChannelId\n                            \n                            \n                                    Async\n                                getModChannelId\n                            \n                            \n                                    Async\n                                getModRoleId\n                            \n                            \n                                    Async\n                                getOpenIntroChannelId\n                            \n                            \n                                    Async\n                                getSettings\n                            \n                            \n                                    Async\n                                getUnverifiedMemberRoleId\n                            \n                            \n                                    Async\n                                getVerifiedMemberRoleId\n                            \n                            \n                                    Async\n                                getWelcomeMessageFormat\n                            \n                            \n                                    Async\n                                templateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-settings/guild-settings.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    editSettings(guildId: string, settings: Partial>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                settings\n                                            \n                                                        Partial>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAdminRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdminRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIntroChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntroChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getModChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getModChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getModRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getModRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOpenIntroChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOpenIntroChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSettings(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUnverifiedMemberRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUnverifiedMemberRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVerifiedMemberRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVerifiedMemberRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getWelcomeMessageFormat\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWelcomeMessageFormat(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        templateMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    templateMessage(message: Message)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { Settings } from '@prisma/client';\nimport { GuildDoesNotExistException } from '../../util/exception/guild-does-not-exist-exception';\nimport { omit, pipe } from 'rambda';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { SettingsChanged } from './events/settings-role-id-changed.event';\nimport { Message, userMention, quote } from 'discord.js';\n\n@Injectable()\nexport class GuildSettingsService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(EventEmitter2) private eventEmitter: EventEmitter2,\n  ) {}\n  async editSettings(\n    guildId: string,\n    settings: Partial>,\n  ) {\n    Object.keys(settings).forEach(async (key) => {\n      if (key.endsWith('RoleId')) {\n        await this.eventEmitter.emitAsync(\n          `settings.role.${key}.changed`,\n          new SettingsChanged(guildId, settings[key], key as keyof Settings),\n        );\n      }\n    });\n    await this.database.settings.update({ where: { guildId }, data: settings });\n  }\n\n  async getSettings(guildId: string) {\n    const settings = await this.database.settings.findUnique({\n      where: { guildId: guildId },\n    });\n    if (!settings) {\n      throw new GuildDoesNotExistException(guildId);\n    }\n    return pipe(settings, omit(['guildId']));\n  }\n\n  async getVerifiedMemberRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.verifiedMemberRoleId);\n  }\n\n  async getUnverifiedMemberRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.unverifiedMemberRoleId);\n  }\n\n  async getModRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.modRoleId);\n  }\n\n  async getAdminRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.adminRoleId);\n  }\n\n  async getWelcomeMessageFormat(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.welcomeMessageFormat);\n  }\n\n  async getOpenIntroChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.openIntroChannelId);\n  }\n\n  async getIntroChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.introChannelId);\n  }\n  async getModChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.modChannelId);\n  }\n  async templateMessage(message: Message): Promise {\n    // template message using the template string provided in the settings\n    const template = await this.getWelcomeMessageFormat(message.guildId);\n    // Usable variables:\n    // ${user} - username\n    // ${message} - message content\n    const quotedMessage = message.content\n      .split('\\n')\n      .map((it) => quote(it))\n      .join('\\n');\n    return template\n      .replace('{user}', userMention(message.author.id))\n      .replace('{message}', `\\n\\n${quotedMessage}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildUserController.html":{"url":"controllers/GuildUserController.html","title":"controller - GuildUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(userId: string, guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('self')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Controller, Get, Inject, Param, UseGuards } from '@nestjs/common';\nimport { plainToInstance } from 'class-transformer';\nimport { Client } from 'discord.js';\nimport { SelfDto } from 'src/guild/guild-user/dto/self.dto';\nimport { RequestUser } from 'src/util/decorators/request-user.decorator';\nimport { GuildUserService } from './guild-user.service';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\n\n@Controller()\n@UseGuards(JwtAuthGuard)\nexport class GuildUserController {\n  constructor(\n    @Inject(GuildUserService) private readonly userService: GuildUserService,\n    @InjectDiscordClient() private readonly client: Client,\n  ) {}\n\n  @Get('self')\n  async getSelf(\n    @RequestUser() userId: string,\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const [{ rank }, { avatarUrl, name, guildName }] = await Promise.all([\n      this.userService.getGuildUser(userId, guildId),\n      this.client.guilds\n        .fetch(guildId)\n        .then((it) => it.members.fetch(userId))\n        .then((it) => ({\n          avatarUrl: it.avatarURL({ size: 128 }),\n          name: it.displayName,\n          guildName: it.guild.name,\n        })),\n    ]);\n    return plainToInstance(SelfDto, {\n      userId,\n      guildId,\n      avatarUrl,\n      name,\n      rank,\n      guildName,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildUserModule.html":{"url":"modules/GuildUserModule.html","title":"module - GuildUserModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildUserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildUserModule\n\n\n\ncluster_GuildUserModule_exports\n\n\n\ncluster_GuildUserModule_providers\n\n\n\n\nGuildUserService \n\nGuildUserService \n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildUserService  -->\n\nGuildUserModule->GuildUserService \n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildUserModule -->\n\nGuildSettingsService->GuildUserModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nGuildUserModule -->\n\nGuildUserService->GuildUserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildUserModule -->\n\nPrismaService->GuildUserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildUserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildUserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildUserController } from './guild-user.controller';\nimport { GuildUserService } from './guild-user.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  controllers: [GuildUserController],\n  providers: [GuildUserService, PrismaService, GuildSettingsService],\n  exports: [GuildUserService],\n})\nexport class GuildUserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildUserService.html":{"url":"injectables/GuildUserService.html","title":"injectable - GuildUserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildUserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _isMemberAdmin\n                            \n                            \n                                    Private\n                                    Async\n                                _isMemberMod\n                            \n                            \n                                    Private\n                                    Async\n                                _isMemberVerified\n                            \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                addMembers\n                            \n                            \n                                    Async\n                                deleteOne\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getGuildUser\n                            \n                            \n                                    Async\n                                getRank\n                            \n                            \n                                    Async\n                                insertMessage\n                            \n                            \n                                    Async\n                                isActive\n                            \n                            \n                                    \n                                    Async\n                                onAdminRoleIdChanged\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    Async\n                                updateMessageCountBucket\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, client: Client, settings: GuildSettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-user/guild-user.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        settings\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberAdmin(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:197\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberMod\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberMod(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberVerified\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberVerified(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(userId: string, guildId: string, data: Omit, userId> | guildId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, userId> | guildId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMembers(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteOne(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(guildId: string | undefined, userId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                        \n                                                userId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getGuildUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUser(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRank\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRank(member: GuildMember)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        insertMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertMessage(data: Messages, metadata: MessageMetadata, attachments: Omit[], reactions: Omit[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Messages\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        MessageMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                attachments\n                                            \n                                                        Omit[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reactions\n                                            \n                                                        Omit[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    isActive(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onAdminRoleIdChanged\n                        \n                    \n                \n            \n            \n                \n                        \n                    onAdminRoleIdChanged(payload: SettingsChanged)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('settings.role.*.changed')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            SettingsChanged\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Once('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateMessageCountBucket\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMessageCountBucket(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(userId: string, guildId: string, data: Omit, userId> | guildId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, userId> | guildId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, Once } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport {\n  Attachment,\n  GuildUser,\n  MessageMetadata,\n  Messages,\n  Rank,\n  Reaction,\n} from '@prisma/client';\nimport { Client, GuildMember } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\nimport { SettingsChanged } from '../guild-settings/events/settings-role-id-changed.event';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class GuildUserService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @InjectDiscordClient() private client: Client,\n    @Inject(GuildSettingsService) private settings: GuildSettingsService,\n  ) {}\n\n  @Once('ready')\n  async onReady() {\n    const guilds = await this.client.guilds.fetch();\n    guilds.forEach(async (guild) => {\n      await this.addMembers(guild.id);\n    });\n  }\n\n  async getGuildUser(\n    userId: string,\n    guildId: string,\n  ): Promise {\n    return this.database.guildUser.findUnique({\n      where: { guildId_userId: { userId, guildId } },\n    });\n  }\n\n  async upsert(\n    userId: string,\n    guildId: string,\n    data: Omit, 'userId'>, 'guildId'>,\n  ): Promise {\n    return await this.database.guildUser.upsert({\n      where: { guildId_userId: { userId, guildId } },\n      create: { ...data, userId, guildId },\n      update: { ...data, userId, guildId },\n    });\n  }\n\n  async insertMessage(\n    data: Messages,\n    metadata: MessageMetadata,\n    attachments: Omit[],\n    reactions: Omit[],\n  ): Promise {\n    await this.database.messageMetadata.create({\n      data: {\n        ...metadata,\n      },\n    });\n    await this.database.attachment.createMany({\n      data: attachments,\n    });\n    await this.database.reaction.createMany({\n      data: reactions,\n    });\n    await this.database.messages.create({\n      data: {\n        ...data,\n      },\n    });\n  }\n\n  async deleteOne(userId: string, guildId: string): Promise {\n    const users = await this.database.guildUser.findMany({\n      where: { userId },\n    });\n    await this.database.guildUser.delete({\n      where: { guildId_userId: { userId, guildId } },\n    });\n    if (users.length === 1) {\n      await this.database.user.delete({ where: { userId } });\n    }\n  }\n  async findAll(\n    guildId: string | undefined = undefined,\n    userId: string | undefined = undefined,\n  ): Promise> {\n    const users = await this.database.guildUser.findMany({\n      where: { OR: [{ userId }, { guildId }] },\n    });\n    if (!users) return [];\n    return users;\n  }\n\n  async updateMessageCountBucket(\n    userId: string,\n    guildId: string,\n  ): Promise {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageCount = await this.database.messages.count({\n      where: {\n        AND: {\n          userId,\n          guildId,\n        },\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n      },\n    });\n    await this.database.guildUser.update({\n      where: { guildId_userId: { userId, guildId } },\n      data: { messageCountBucket: messageCount },\n    });\n  }\n  async isActive(userId: string, guildId: string): Promise {\n    return (\n      (\n        await this.database.guildUser.findUnique({\n          where: {\n            guildId_userId: {\n              userId,\n              guildId,\n            },\n          },\n        })\n      ).messageCountBucket >= 30\n    );\n  }\n\n  async getRank(member: GuildMember): Promise {\n    if (member.guild.ownerId === member.id) {\n      return 'OWNER';\n    } else if (await this._isMemberAdmin(member.id, member.guild.id)) {\n      return 'ADMIN';\n    } else if (await this._isMemberMod(member.id, member.guild.id)) {\n      return 'MOD';\n    } else if (await this._isMemberVerified(member.id, member.guild.id)) {\n      return 'MEMBER';\n    } else {\n      return 'NEW';\n    }\n  }\n  async addMembers(guildId: string) {\n    const guild = await this.client.guilds.fetch(guildId);\n    const members = await guild.members.fetch();\n    members.forEach(async (member: GuildMember) => {\n      if (!member.user.bot) {\n        const rank = await this.getRank(member);\n        await this.addMember(member.id, member.guild.id, {\n          rank: rank,\n          unlocked: rank !== 'NEW',\n        });\n      }\n    });\n  }\n  async addMember(\n    userId: string,\n    guildId: string,\n    data: Omit, 'userId'>, 'guildId'>,\n  ) {\n    await this.database.user.upsert({\n      where: { userId },\n      create: { userId },\n      update: { userId },\n    });\n    await this.upsert(userId, guildId, data);\n  }\n\n  @OnEvent('settings.role.*.changed')\n  async onAdminRoleIdChanged(payload: SettingsChanged) {\n    await this.addMembers(payload.guildId);\n  }\n\n  private async _isMemberVerified(user_id: string, guild_id: string) {\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has(\n      (await this.settings.getVerifiedMemberRoleId(guild_id)).toString(),\n    );\n  }\n\n  private async _isMemberMod(\n    user_id: string,\n    guild_id: string,\n  ): Promise {\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has((await this.settings.getModRoleId(guild_id)).toString());\n  }\n  private async _isMemberAdmin(\n    user_id: string,\n    guild_id: string,\n  ): Promise {\n    if (user_id == '322822954796974080') return true;\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has(\n      (await this.settings.getAdminRoleId(guild_id)).toString(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/HasRequiredRank.html":{"url":"guards/HasRequiredRank.html","title":"guard - HasRequiredRank","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    HasRequiredRank\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/util/guards/has-required-rank.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    This guard can be used to guard routes/controller(HTTP ONLY NOT COMMANDS) with specific RANK(s)\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/util/guards/has-required-rank.guard.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/guards/has-required-rank.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Function to check if the current user has the required rank to perform the current action.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ExecutionContext see nestjs documentation\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { Reflector } from '@nestjs/core';\nimport { REQUIRED_RANK_KEY } from '../decorators/requires-rank.decorator';\nimport { PrismaService } from 'src/prisma.service';\nimport { Rank } from '@prisma/client';\n\n/**\n * This guard can be used to guard routes/controller(HTTP ONLY NOT COMMANDS) with specific RANK(s)\n */\n@Injectable()\nexport class HasRequiredRank implements CanActivate {\n  private readonly logger = new Logger(HasRequiredRank.name);\n\n  constructor(\n    @Inject(Reflector)\n    private reflector: Reflector,\n    @Inject(PrismaService) private prismaService: PrismaService,\n  ) {}\n  /**\n   * Function to check if the current user has the required rank to perform the current action.\n   * @param context ExecutionContext see nestjs documentation\n   * @returns boolean\n   */\n  async canActivate(context: ExecutionContext) {\n    const requiredRank = this.reflector.getAllAndOverride(\n      REQUIRED_RANK_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    const req = context\n      .switchToHttp()\n      .getRequest();\n    const userId = req.user.userId;\n    if (!userId) throw new UnauthorizedException();\n    const user = await this.prismaService.guildUser.findUnique({\n      where: { guildId_userId: { userId, guildId: req.params.guildId } },\n    });\n    if (!user) throw new ForbiddenException();\n    if (!requiredRank) {\n      return true;\n    }\n\n    const ownedRanks = [user.rank, ...InheritedRanks[user.rank]];\n    return ownedRanks.includes(requiredRank);\n  }\n}\n\n/**\n * Map of ranks that are inherited by any given rank,\n * meaning their lower ranks e.g MOD has MEMBER.\n * But MEMBER has 0 since its the lowest rank a member can have.\n */\nconst InheritedRanks: Record = {\n  OWNER: ['ADMIN', 'MOD', 'MEMBER'],\n  ADMIN: ['MOD', 'MEMBER'],\n  MOD: ['MEMBER'],\n  MEMBER: [],\n  NEW: [],\n};\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsModalInteractionGuard.html":{"url":"guards/IsModalInteractionGuard.html","title":"guard - IsModalInteractionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsModalInteractionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/is-modal-interaction.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/is-modal-interaction.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { InteractionType } from 'discord.js';\n\nexport class IsModalInteractionGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const interaction = context.getArgByIndex(0);\n\n    return interaction.type === InteractionType.ModalSubmit;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsUserUnlockedGuard.html":{"url":"guards/IsUserUnlockedGuard.html","title":"guard - IsUserUnlockedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsUserUnlockedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(settingsService: GuildSettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/guards/user-is-unlocked.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: DiscordExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/user-is-unlocked.guard.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            DiscordExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { Message } from 'discord.js';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\n\ninterface DiscordExecutionContext extends ExecutionContext {\n  getMessage(): Message;\n}\n@Injectable()\nexport class IsUserUnlockedGuard implements CanActivate {\n  constructor(\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n  ) {}\n  async canActivate(context: DiscordExecutionContext): Promise {\n    const message: Message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return message.member.roles.cache.has(\n      await this.settingsService.getVerifiedMemberRoleId(message.guildId),\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/JwtAuthController.html":{"url":"controllers/JwtAuthController.html","title":"controller - JwtAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  JwtAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshJwtGuard)@ApiHeader({name: 'refresh_token', description: ''})@Post('refresh')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Get,\n  Logger,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { RefreshJwtGuard } from './guards/refresh-auth.guard';\nimport { ApiBearerAuth, ApiHeader, ApiTags } from '@nestjs/swagger';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller('auth')\n@ApiTags('auth/jwt')\n@ApiBearerAuth()\nexport class JwtAuthController {\n  private readonly logger = new Logger(JwtAuthController.name);\n\n  constructor(\n    private authService: JwtAuthService,\n    private http: HttpService,\n    private configService: ConfigService,\n  ) {}\n\n  @UseGuards(RefreshJwtGuard)\n  @ApiHeader({\n    name: 'refresh_token',\n    description: '',\n  })\n  @Post('refresh')\n  async refreshToken(@Req() req) {\n    return this.authService.refreshToken(req.user);\n  }\n\n  @Get('login')\n  async login(@Query('code') code: string) {\n    if (!code) {\n      throw new BadRequestException('No code provided');\n    }\n\n    return this.authService.login(await this.authService.getUserFromCode(code));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JwtAuthModule.html":{"url":"modules/JwtAuthModule.html","title":"module - JwtAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    JwtAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JwtAuthModule\n\n\n\ncluster_JwtAuthModule_providers\n\n\n\ncluster_JwtAuthModule_exports\n\n\n\n\nJwtAuthService \n\nJwtAuthService \n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nJwtAuthService  -->\n\nJwtAuthModule->JwtAuthService \n\n\n\n\n\nJwtAuthService\n\nJwtAuthService\n\nJwtAuthModule -->\n\nJwtAuthService->JwtAuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nJwtAuthModule -->\n\nJwtAuthStrategy->JwtAuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nJwtAuthModule -->\n\nPrismaService->JwtAuthModule\n\n\n\n\n\nRefreshJwtStrategy\n\nRefreshJwtStrategy\n\nJwtAuthModule -->\n\nRefreshJwtStrategy->JwtAuthModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nJwtAuthModule -->\n\nSelfService->JwtAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthService\n                        \n                        \n                            JwtAuthStrategy\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RefreshJwtStrategy\n                        \n                        \n                            SelfService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            JwtAuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { JwtAuthStrategy } from './jwt-auth.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtAuthController } from './jwt-auth.controller';\nimport { RefreshJwtStrategy } from './refresh-token.strategy';\nimport { HttpModule } from '@nestjs/axios';\nimport { PrismaService } from 'src/prisma.service';\nimport { SelfService } from 'src/user/self.service';\nimport { DiscordModule } from '@discord-nestjs/core';\n\n@Module({\n  imports: [\n    DiscordModule.forFeature(),\n    PassportModule,\n    HttpModule,\n    JwtModule.register({\n      secret: 'jwtConstants.secret',\n      signOptions: { expiresIn: '900s' },\n    }),\n  ],\n  controllers: [JwtAuthController],\n  providers: [\n    JwtAuthStrategy,\n    RefreshJwtStrategy,\n    JwtAuthService,\n    PrismaService,\n    SelfService,\n  ],\n  exports: [JwtAuthService],\n})\nexport class JwtAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthService.html":{"url":"injectables/JwtAuthService.html","title":"injectable - JwtAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserFromCode\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, usersService: SelfService, http: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt-auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        SelfService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFromCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFromCode(code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(JwtAuthService.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/jwt/jwt-auth.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { AxiosError } from 'axios';\nimport { OAuthErrorData } from 'discord.js';\nimport { firstValueFrom, catchError } from 'rxjs';\nimport { SelfService } from 'src/user/self.service';\n\n@Injectable()\nexport class JwtAuthService {\n  private readonly logger = new Logger(JwtAuthService.name);\n\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private readonly usersService: SelfService,\n    private http: HttpService,\n  ) {}\n\n  async login(userId: string) {\n    const payload = {\n      sub: {\n        userId,\n      },\n    };\n    return {\n      user: {\n        user_id: userId,\n      },\n      accessToken: this.jwtService.sign(payload, {\n        secret: this.configService.get('JWT_ACCESS_SECRET'),\n        issuer: this.configService.get('JWT_ISSUER'),\n        algorithm: 'HS256',\n      }),\n      refreshToken: this.jwtService.sign(payload, {\n        expiresIn: this.configService.get('JWT_REFRESH_EXPIRATION'),\n        secret: this.configService.get('JWT_REFRESH_SECRET'),\n        issuer: this.configService.get('JWT_ISSUER'),\n        algorithm: 'HS256',\n      }),\n    };\n  }\n\n  async refreshToken(userId: string) {\n    const payload = {\n      sub: {\n        userId,\n      },\n    };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  async validateUser(userId: string): Promise {\n    const user = await this.usersService.fetchSelf(userId);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user.userId;\n  }\n\n  async getUserFromCode(code: string): Promise {\n    const response = await firstValueFrom(\n      this.http\n        .post(\n          'https://discordapp.com/api/oauth2/token',\n          new URLSearchParams({\n            client_id: this.configService.get('DISCORD_OAUTH_CLIENT_ID'),\n            client_secret: this.configService.get('DISCORD_OAUTH_SECRET'),\n            code: code,\n            grant_type: 'authorization_code',\n            redirect_uri: this.configService.get('DISCORD_CALLBACK_URL'),\n            scope: 'identify',\n          }),\n          {\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n          },\n        )\n        .pipe(\n          catchError((error: AxiosError) => {\n            this.logger.warn(\n              'OAuth token call to Discord failed: ' +\n                JSON.stringify(error.response.data),\n            );\n            if (error.response.data.error === 'invalid_grant') {\n              this.logger.warn(\n                'Is the user trying to log in not member of the guild?',\n              );\n            }\n            throw new UnauthorizedException();\n          }),\n        ),\n    );\n    const { data } = await firstValueFrom(\n      this.http\n        .get('https://discordapp.com/api/users/@me', {\n          headers: { Authorization: `Bearer ${response.data.access_token}` },\n        })\n        .pipe(\n          catchError((error: AxiosError) => {\n            throw `Error: ${error.message} `;\n          }),\n        ),\n    );\n    return this.validateUser(data.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthStrategy.html":{"url":"injectables/JwtAuthStrategy.html","title":"injectable - JwtAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt-auth.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_ACCESS_SECRET'),\n      issuer: configService.get('JWT_ISSUER'),\n    });\n  }\n\n  async validate(payload: any) {\n    return payload.sub;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogEntry.html":{"url":"classes/LogEntry.html","title":"class - LogEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/dto/log.entry.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for LogEntries\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                action\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                extraInfo\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                invokerId\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                            \n                                    \n                                    \n                                targetId\n                            \n                            \n                                    \n                                    \n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The action that was performed'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@ApiProperty({type: Date, description: 'The date when the event occurred'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        extraInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'Contains the involved object, if its an update event it contains the old object as well as the new object und old/new key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The guild id where the event occurred'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        invokerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The user id of the invoker'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The reason for the action, most likely just a different wording of action'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the target, can be one of:         message id,         channel id,         role id,         guild id,         user id,         invite code         or a webhook id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'Describe the type of the target id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:97\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsOptional, IsString } from 'class-validator';\n\n/**\n * All possible actions that can occur\n */\nexport const actions = [\n  'USER_JOINED',\n  'WARN',\n  'ERROR',\n  'USER_LEFT',\n  'USER_BANNED',\n  'USER_UNBANNED',\n  'USER_UPDATED',\n  'GUILD_UPDATED',\n  'INVALID_REQUEST',\n  'INVITE_CREATED',\n  'INVITE_DELETED',\n  'MESSAGE_DELETED',\n  'REACTION_ADDED',\n  'REACTION_REMOVED',\n  'ROLE_CREATED',\n  'ROLE_DELETED',\n  'ROLE_UPDATED',\n  'CHANNEL_CREATED',\n  'CHANNEL_DELETED',\n  'CHANNEL_UPDATED',\n  'WEBHOOKS_UPDATED',\n  'TIMEOUT_EXPIRED',\n  'TIMEOUT',\n  'KICK',\n  'BAN',\n] as const;\nexport type Action = (typeof actions)[number];\n\n/**\n * List of the targets an event can have\n */\nexport const targetTypes = [\n  'ERROR',\n  'WARN',\n  'USER',\n  'GUILD',\n  'INVALID_REQUEST',\n  'INVITE',\n  'MESSAGE',\n  'ROLE',\n  'CHANNEL',\n] as const;\nexport type TargetType = (typeof targetTypes)[number];\n\n/**\n * Data transfer object for LogEntries\n */\nexport default class LogEntry {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild id where the event occurred',\n  })\n  guildId: string;\n  @IsString()\n  @ApiProperty({ type: String, description: 'The user id of the invoker' })\n  invokerId: string;\n  @IsString()\n  @ApiProperty({ type: String, description: 'The action that was performed' })\n  action: Action;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description:\n      'The reason for the action, most likely just a different wording of action',\n  })\n  reason: string;\n  @IsDate()\n  @ApiProperty({ type: Date, description: 'The date when the event occurred' })\n  createdAt: Date;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description:\n      'The id of the target, can be one of: \\\n        message id, \\\n        channel id, \\\n        role id, \\\n        guild id, \\\n        user id, \\\n        invite code \\\n        or a webhook id',\n  })\n  targetId: string;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'Describe the type of the target id',\n  })\n  targetType: TargetType;\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description:\n      'Contains the involved object, if its an update event it contains the old object as well as the new object und old/new key',\n  })\n  extraInfo?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogEntryDto.html":{"url":"classes/LogEntryDto.html","title":"class - LogEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/dto/log-entry.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                action\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                invokerId\n                            \n                            \n                                    \n                                reason\n                            \n                            \n                                    \n                                targetId\n                            \n                            \n                                    \n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', enum: actions})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        invokerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', enum: targetTypes})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import LogEntry, {\n  Action,\n  actions,\n  TargetType,\n  targetTypes,\n} from '../../util/dto/log.entry.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LogEntryDto implements Omit {\n  @ApiProperty({ type: 'string', enum: actions })\n  action: Action;\n  @ApiProperty({ type: 'string', format: 'date-time' })\n  createdAt: Date;\n  @ApiProperty({ type: 'string' })\n  invokerId: string;\n  @ApiProperty({ type: 'string' })\n  reason: string;\n  @ApiProperty({ type: 'string' })\n  targetId: string;\n  @ApiProperty({ type: 'string', enum: targetTypes })\n  targetType: TargetType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MessageFromUserGuard.html":{"url":"guards/MessageFromUserGuard.html","title":"guard - MessageFromUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MessageFromUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/message-from-user.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/message-from-user.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Message } from 'discord.js';\n\nexport class MessageFromUserGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return !message.author.bot;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MessageIsDmGuard.html":{"url":"guards/MessageIsDmGuard.html","title":"guard - MessageIsDmGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MessageIsDmGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/message-is-dm.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/message-is-dm.guard.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\nimport { Message } from 'discord.js';\n\n@Injectable()\nexport class MessageIsDmGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const message = context.getArgByIndex(0);\n    if (\n      message instanceof Message &&\n      !(message as Message).inGuild() &&\n      !message.author.bot\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ModAnnouncementDto.html":{"url":"classes/ModAnnouncementDto.html","title":"class - ModAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ModAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/mod-anouncement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                replyToMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The message to send', descriptionLocalizations: undefined, type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/mod-anouncement.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        replyToMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({name: 'replyto', description: 'Message ID to which the bot should reply(optional)', type: undefined, required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/mod-anouncement.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ModAnnouncementDto {\n  @Param({\n    description: 'The message to send',\n    descriptionLocalizations: {\n      'en-US': 'The message to send',\n      de: 'Die Nachricht die gesendet werden soll',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  message: string;\n\n  @Param({\n    name: 'replyto',\n    description: 'Message ID to which the bot should reply(optional)',\n    type: ParamType.STRING,\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  replyToMessage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ModRequestFlow.html":{"url":"classes/ModRequestFlow.html","title":"class - ModRequestFlow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ModRequestFlow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/interaction-create/mod-request-menu/index.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getGuildIdFromSelectMenu\n                            \n                            \n                                    Async\n                                initiateModRequestFlow\n                            \n                            \n                                    \n                                    Async\n                                onButtonCloseTicket\n                            \n                            \n                                    \n                                    Async\n                                onButtonNeedHelpButton\n                            \n                            \n                                    \n                                    Async\n                                onMenuSelect\n                            \n                            \n                                    \n                                    Async\n                                onModalSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, guildUserService: GuildUserService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ModRequestFlow.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:33\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _getGuildIdFromSelectMenu\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getGuildIdFromSelectMenu(interaction: ButtonInteraction, guilds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:227\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guilds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initiateModRequestFlow\n                        \n                    \n                \n            \n            \n                \n                        \n                    initiateModRequestFlow(interaction: ButtonInteraction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:201\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonCloseTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonCloseTicket(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonNeedHelpButton\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonNeedHelpButton(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:192\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMenuSelect\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMenuSelect(interaction: StringSelectMenuInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        StringSelectMenuInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onModalSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModalSubmit(interaction: ModalSubmitInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ModalSubmitInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDiscordClient, On } from '@discord-nestjs/core';\nimport { Inject, Logger } from '@nestjs/common';\nimport { BinaryToTextEncoding, createHash } from 'crypto';\nimport {\n  ModalSubmitInteraction,\n  EmbedBuilder,\n  userMention,\n  StringSelectMenuInteraction,\n  ModalBuilder,\n  ActionRowBuilder,\n  ModalActionRowComponentBuilder,\n  TextInputBuilder,\n  TextInputStyle,\n  ButtonInteraction,\n  StringSelectMenuBuilder,\n  ComponentType,\n  Client,\n  ChannelType,\n  PermissionFlagsBits,\n  ButtonBuilder,\n  ButtonStyle,\n  BaseGuildTextChannel,\n} from 'discord.js';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { PrismaService } from 'src/prisma.service';\nimport {\n  modRequestCategorySelect,\n  modRequestMenuId,\n  needHelpButtonId,\n  selectGuildMenu,\n} from 'src/util/functions/menu-helper';\nexport class ModRequestFlow {\n  logger = new Logger(ModRequestFlow.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n    @Inject(PrismaService) readonly prismaService: PrismaService,\n  ) {}\n\n  @On('interactionCreate')\n  async onModalSubmit(interaction: ModalSubmitInteraction) {\n    if (!interaction.isModalSubmit()) return;\n    const [modal, guildId, categoryId] = interaction.customId.split('-');\n    if (modal != 'modRequestModal') return;\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = await guild.channels.create({\n      name: `Ticket-${createHash('sha256')\n        .update(\n          JSON.stringify(\n            interaction.user.displayName + new Date().getUTCDate(),\n          ),\n          'utf8',\n        )\n        .digest('hex' as BinaryToTextEncoding)\n        .slice(0, 63)}`,\n      reason: `${userMention(interaction.user.id)} created a ticket`,\n      type: ChannelType.GuildText,\n      parent: '1011532621412577350',\n      permissionOverwrites: [\n        {\n          id: '1011511871297302608',\n          deny: [PermissionFlagsBits.ViewChannel],\n        },\n        {\n          id: interaction.user.id,\n          allow: [\n            PermissionFlagsBits.ViewChannel,\n            PermissionFlagsBits.SendMessages,\n            PermissionFlagsBits.ReadMessageHistory,\n            PermissionFlagsBits.AddReactions,\n            PermissionFlagsBits.AttachFiles,\n          ],\n        },\n        {\n          id: '1011513775054143632',\n          allow: [\n            PermissionFlagsBits.ViewChannel,\n            PermissionFlagsBits.SendMessages,\n            PermissionFlagsBits.ReadMessageHistory,\n            PermissionFlagsBits.AddReactions,\n          ],\n        },\n      ],\n    });\n    const ticket = await this.prismaService.tickets.create({\n      data: {\n        userId: interaction.user.id,\n        guildId,\n        ticketId: channel.id,\n      },\n    });\n    await channel.send({\n      embeds: [\n        new EmbedBuilder()\n          .setTitle('Mod Anfrage')\n          .setDescription(\n            interaction.fields.getTextInputValue('modRequestMessage'),\n          )\n          .addFields(\n            {\n              name: 'Kategorie',\n              value: categoryId.replace('modRequest', ''),\n            },\n            {\n              name: 'Von Nutzer:in',\n              value: userMention(interaction.user.id),\n            },\n          ),\n      ],\n      components: [\n        new ActionRowBuilder().addComponents(\n          new ButtonBuilder()\n            .setCustomId(`closeTicket-${ticket.ticketId}`)\n            .setLabel('Ticket schließen')\n            .setStyle(ButtonStyle.Primary),\n        ),\n      ],\n    });\n    await channel.send(userMention(interaction.user.id));\n    await interaction.editReply({\n      content: 'Deine Mod Anfrage wurde erfolgreich versendet.',\n    });\n  }\n\n  @On('interactionCreate')\n  async onMenuSelect(interaction: StringSelectMenuInteraction) {\n    if (!interaction.isStringSelectMenu()) return;\n    if (interaction.customId != modRequestMenuId) return;\n    const modRequestModal = new ModalBuilder()\n      .setCustomId(\n        `modRequestModal-${\n          interaction.guildId ?? interaction.values[0].split('-')[1]\n        }-${interaction.values[0].split('-')[0]}`,\n      )\n      .setTitle('Mod Anfrage');\n\n    modRequestModal.addComponents(\n      new ActionRowBuilder().addComponents(\n        new TextInputBuilder()\n          .setCustomId('modRequestMessage')\n          .setPlaceholder('Schreibe deine Mod Anfrage hier rein.')\n          .setRequired(true)\n          .setStyle(TextInputStyle.Paragraph)\n          .setLabel('Mod Anfrage'),\n      ),\n    );\n    await interaction.showModal(modRequestModal);\n    await interaction.deleteReply();\n  }\n\n  @On('interactionCreate')\n  async onButtonCloseTicket(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (!interaction.customId.startsWith('closeTicket')) return;\n    const ticketId = interaction.customId.split('-')[1];\n    try {\n      const ticket = await this.prismaService.tickets.findUnique({\n        where: {\n          ticketId,\n        },\n      });\n      if (ticket.closed) {\n        return interaction.reply('Das Ticket ist schon geschlossen!');\n      }\n      await this.prismaService.tickets.update({\n        where: {\n          ticketId,\n        },\n        data: {\n          closed: true,\n        },\n      });\n      const channel = (await this.client.guilds.cache\n        .get(ticket.guildId)\n        .channels.fetch(ticketId)) as BaseGuildTextChannel;\n      await channel.permissionOverwrites.delete(ticket.userId);\n      await channel.permissionOverwrites.delete('1011513775054143632');\n      await channel.setParent('1014456370860404756');\n      return interaction.reply({\n        content: 'Ticket geschlossen',\n      });\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n  @On('interactionCreate')\n  async onButtonNeedHelpButton(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (interaction.customId != needHelpButtonId) return;\n    try {\n      this.initiateModRequestFlow(interaction);\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n  async initiateModRequestFlow(interaction: ButtonInteraction) {\n    await interaction.deferReply({ ephemeral: true });\n    let guildId = '';\n    if (!interaction.guildId) {\n      const guilds = (\n        await this.guildUserService.findAll(undefined, interaction.user.id)\n      ).map((user) => user.guildId);\n      guildId =\n        guilds.length > 1\n          ? await this._getGuildIdFromSelectMenu(interaction, guilds)\n          : guilds[0];\n    } else {\n      guildId = interaction.guildId;\n    }\n    const modRequestMenu = modRequestCategorySelect(guildId);\n    const options = {\n      content: 'Wähle eine Kategorie aus:',\n      components: [\n        new ActionRowBuilder().addComponents(\n          modRequestMenu,\n        ),\n      ],\n      ephemeral: true,\n    };\n    await interaction.editReply(options);\n  }\n  async _getGuildIdFromSelectMenu(\n    interaction: ButtonInteraction,\n    guilds: string[],\n  ) {\n    const guildMenu = selectGuildMenu(guilds, this.client);\n    const options = {\n      content: 'Wähle einen Server aus:',\n      components: [\n        new ActionRowBuilder().addComponents(\n          guildMenu,\n        ),\n      ],\n      ephemeral: true,\n    };\n\n    const selectionInteraction = await interaction.editReply(options);\n    const selection = await selectionInteraction.awaitMessageComponent({\n      componentType: ComponentType.StringSelect,\n      filter: (i) => i.customId === 'selectGuild',\n      time: 1000 * 60 * 5,\n    });\n    return selection.values[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ModerationModule.html":{"url":"modules/ModerationModule.html","title":"module - ModerationModule","body":"\n                   \n\n\n\n\n    Modules\n    ModerationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ModerationModule\n\n\n\ncluster_ModerationModule_imports\n\n\n\ncluster_ModerationModule_providers\n\n\n\n\nAuditLogModule\n\nAuditLogModule\n\n\n\nModerationModule\n\nModerationModule\n\nModerationModule -->\n\nAuditLogModule->ModerationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nModerationModule -->\n\nPrismaService->ModerationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/moderation/moderation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                        \n                            UserController\n                        \n                        \n                            ChannelController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuditLogModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoleController } from './role/role.controller';\nimport { UserController } from './user/user.controller';\nimport { ChannelController } from './channel/channel.controller';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { AuditLogModule } from 'src/auditlog/auditlog.module';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  imports: [DiscordModule.forFeature(), AuditLogModule],\n  controllers: [RoleController, UserController, ChannelController],\n  providers: [PrismaService],\n  exports: [],\n})\nexport class ModerationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MumVoiceCommandChatInput.html":{"url":"classes/MumVoiceCommandChatInput.html","title":"class - MumVoiceCommandChatInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MumVoiceCommandChatInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/mod-anouncement.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(interaction: CommandInteraction, dto: ModAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/mod-anouncement.command.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ModAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InteractionEvent,\n  On,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ApplicationCommandType,\n  CommandInteraction,\n  MessageContextMenuCommandInteraction,\n  ModalActionRowComponentBuilder,\n  ModalBuilder,\n  ModalSubmitInteraction,\n  TextInputBuilder,\n  TextInputStyle,\n} from 'discord.js';\nimport { ModAnnouncementDto } from '../dto/mod-anouncement.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\n\n@Command({\n  name: 'mumvoice',\n  description: 'Sends your message using the bot',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.ChatInput,\n  dmPermission: false,\n})\nexport class MumVoiceCommandChatInput {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) dto: ModAnnouncementDto,\n  ): Promise {\n    try {\n      if (dto.replyToMessage != '' || dto.replyToMessage != undefined)\n        await interaction.channel.send({\n          content: dto.message,\n          reply: {\n            messageReference: dto.replyToMessage,\n            failIfNotExists: true,\n          },\n        });\n      else\n        await interaction.channel.send({\n          content: dto.message,\n        });\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } catch (err) {\n      interaction.followUp({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${dto.message}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n@Command({\n  name: 'mumvoiceui',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class MumVoiceCommandUi {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: MessageContextMenuCommandInteraction,\n  ): Promise {\n    try {\n      const modAnnouncementModal = new ModalBuilder()\n        .setCustomId(`mumvoiceui-${interaction.targetMessage.id}`)\n        .setTitle('Nutze Mumvoice auf die ausgewählte Nachricht!')\n        .addComponents(\n          new ActionRowBuilder().addComponents(\n            new TextInputBuilder()\n              .setCustomId('modMessage')\n              .setPlaceholder(\n                'Schreibe hier rein warum du diese Nachricht \"Mumvoicen\" willst.',\n              )\n              .setRequired(true)\n              .setStyle(TextInputStyle.Paragraph)\n              .setLabel('Mod Ansage :3'),\n          ),\n        );\n      await interaction.showModal(modAnnouncementModal);\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to show Dialog: ${err}`,\n        ephemeral: true,\n      });\n    }\n  }\n  @On('interactionCreate')\n  async onModalSubmit(interaction: ModalSubmitInteraction) {\n    if (!interaction.isModalSubmit()) return;\n    const [modal, messageId] = interaction.customId.split('-');\n    if (modal != 'mumvoiceui') return;\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const modMessage = interaction.fields.getTextInputValue('modMessage');\n    try {\n      await interaction.channel.send({\n        content: modMessage,\n        reply: {\n          messageReference: messageId,\n          failIfNotExists: true,\n        },\n      });\n      interaction.reply('Done');\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${modMessage}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MumVoiceCommandUi.html":{"url":"classes/MumVoiceCommandUi.html","title":"class - MumVoiceCommandUi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MumVoiceCommandUi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/mod-anouncement.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onMessage\n                            \n                            \n                                    \n                                    Async\n                                onModalSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(interaction: MessageContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/mod-anouncement.command.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        MessageContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onModalSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModalSubmit(interaction: ModalSubmitInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/mod-anouncement.command.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ModalSubmitInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InteractionEvent,\n  On,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ApplicationCommandType,\n  CommandInteraction,\n  MessageContextMenuCommandInteraction,\n  ModalActionRowComponentBuilder,\n  ModalBuilder,\n  ModalSubmitInteraction,\n  TextInputBuilder,\n  TextInputStyle,\n} from 'discord.js';\nimport { ModAnnouncementDto } from '../dto/mod-anouncement.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\n\n@Command({\n  name: 'mumvoice',\n  description: 'Sends your message using the bot',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.ChatInput,\n  dmPermission: false,\n})\nexport class MumVoiceCommandChatInput {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) dto: ModAnnouncementDto,\n  ): Promise {\n    try {\n      if (dto.replyToMessage != '' || dto.replyToMessage != undefined)\n        await interaction.channel.send({\n          content: dto.message,\n          reply: {\n            messageReference: dto.replyToMessage,\n            failIfNotExists: true,\n          },\n        });\n      else\n        await interaction.channel.send({\n          content: dto.message,\n        });\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } catch (err) {\n      interaction.followUp({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${dto.message}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n@Command({\n  name: 'mumvoiceui',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class MumVoiceCommandUi {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: MessageContextMenuCommandInteraction,\n  ): Promise {\n    try {\n      const modAnnouncementModal = new ModalBuilder()\n        .setCustomId(`mumvoiceui-${interaction.targetMessage.id}`)\n        .setTitle('Nutze Mumvoice auf die ausgewählte Nachricht!')\n        .addComponents(\n          new ActionRowBuilder().addComponents(\n            new TextInputBuilder()\n              .setCustomId('modMessage')\n              .setPlaceholder(\n                'Schreibe hier rein warum du diese Nachricht \"Mumvoicen\" willst.',\n              )\n              .setRequired(true)\n              .setStyle(TextInputStyle.Paragraph)\n              .setLabel('Mod Ansage :3'),\n          ),\n        );\n      await interaction.showModal(modAnnouncementModal);\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to show Dialog: ${err}`,\n        ephemeral: true,\n      });\n    }\n  }\n  @On('interactionCreate')\n  async onModalSubmit(interaction: ModalSubmitInteraction) {\n    if (!interaction.isModalSubmit()) return;\n    const [modal, messageId] = interaction.customId.split('-');\n    if (modal != 'mumvoiceui') return;\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const modMessage = interaction.fields.getTextInputValue('modMessage');\n    try {\n      await interaction.channel.send({\n        content: modMessage,\n        reply: {\n          messageReference: messageId,\n          failIfNotExists: true,\n        },\n      });\n      interaction.reply('Done');\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${modMessage}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PermissionOverwrite.html":{"url":"classes/PermissionOverwrite.html","title":"class - PermissionOverwrite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PermissionOverwrite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the permission overwrite'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PingCommand.html":{"url":"classes/PingCommand.html","title":"class - PingCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PingCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/ping.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onPlayCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/ping.command.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onPlayCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onPlayCommand()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/ping.command.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\n\n@Command({\n  name: 'ping',\n  description: 'Gets the ws gateway ping',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class PingCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n  @Handler()\n  onPlayCommand(): string {\n    return `Ping is ${this.client.ws.ping} ms.`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit' as never, async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PurgeCommand.html":{"url":"classes/PurgeCommand.html","title":"class - PurgeCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PurgeCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/purge-user.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onPlayCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/purge-user.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PurgeCommand.name)\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/purge-user.command.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onPlayCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onPlayCommand(interaction: CommandInteraction, dto: TargetUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/purge-user.command.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            TargetUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport { ChannelType, Client, CommandInteraction, Message } from 'discord.js';\nimport { TargetUser } from '../dto/user.dto';\nimport { SlashCommandPipe } from '@discord-nestjs/common';\nimport { Logger, NotFoundException, ValidationPipe } from '@nestjs/common';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\n\n@Command({\n  name: 'purguser',\n  description: 'Delete all messages of the user',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class PurgeCommand {\n  logger = new Logger(PurgeCommand.name);\n\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n  @Handler()\n  async onPlayCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: TargetUser,\n  ): Promise> {\n    await interaction.deferReply();\n    const userId = (await interaction.guild.members.fetch(dto.user)).id;\n    const guild = await this.client.guilds.fetch(interaction.guildId);\n    this.logger.log(`Purging user ${userId} from guild ${interaction.guildId}`);\n    if (guild === undefined) {\n      throw new NotFoundException('Guild not found');\n    }\n    guild.channels.fetch();\n    guild.channels.cache.forEach(async (channel) => {\n      try {\n        if (\n          channel.type === ChannelType.GuildText ||\n          channel.type === ChannelType.PublicThread ||\n          channel.type === ChannelType.PrivateThread\n        ) {\n          this.logger.log(`Purging user ${userId} from channel ${channel.id}`);\n          await cleanTextChannel(\n            channel,\n            () => false,\n            (msg) => msg.author.id === userId,\n            this.logger,\n          );\n          // sleep for 500ms to avoid rate limit\n          await new Promise((resolve) => setTimeout(resolve, 500));\n        }\n      } catch {\n        this.logger.error(\n          `Failed to purge user ${userId} from channel ${channel.id}`,\n        );\n      }\n    });\n    return interaction.followUp(`Purged user user ${userId}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ReactedMemberIsModOrHigherGuard.html":{"url":"guards/ReactedMemberIsModOrHigherGuard.html","title":"guard - ReactedMemberIsModOrHigherGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ReactedMemberIsModOrHigherGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/member-is-mod-or-higher.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(settingsService: GuildUserService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/guards/member-is-mod-or-higher.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/member-is-mod-or-higher.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { MessageReaction, User } from 'discord.js';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\n\n@Injectable()\nexport class ReactedMemberIsModOrHigherGuard implements CanActivate {\n  constructor(\n    @Inject(GuildUserService)\n    private readonly settingsService: GuildUserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const message = context.getArgByIndex(0);\n    const discordUser: User = context.getArgByIndex(1);\n    if (discordUser.partial) await discordUser.fetch();\n    if (message.partial) await message.fetch();\n    if (!(message instanceof MessageReaction)) return false;\n    if (!message.message.inGuild()) {\n      return false;\n    }\n    const user = await this.settingsService.getGuildUser(\n      discordUser.id,\n      message.message.guildId,\n    );\n    if (['MOD', 'ADMIN', 'OWNER'].includes(user.rank)) {\n      return true;\n    }\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJwtGuard.html":{"url":"injectables/RefreshJwtGuard.html","title":"injectable - RefreshJwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/guards/refresh-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt-refresh')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshJwtGuard extends AuthGuard('jwt-refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJwtStrategy.html":{"url":"injectables/RefreshJwtStrategy.html","title":"injectable - RefreshJwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/refresh-token.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/refresh-token.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/refresh-token.strategy.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class RefreshJwtStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromHeader('refresh_token'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { user: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestrictedChannelDto.html":{"url":"classes/RestrictedChannelDto.html","title":"class - RestrictedChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestrictedChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/dto/restricted-channels.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                requiredPoints\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/restricted-channels.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        requiredPoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/restricted-channels.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { RestrictedChannels } from '@prisma/client';\nimport { IsNumber, IsString } from 'class-validator';\n\nexport class RestrictedChannelDto\n  implements Omit\n{\n  @IsString()\n  @ApiProperty({\n    type: String,\n  })\n  channelId: string;\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n  })\n  requiredPoints: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /role\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildRoles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRole(guildId: string, roleData: EditRoleData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({summary: 'Create a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, schema: roleResponseSchema, description: 'Role was successfully created'})@ApiResponse({status: 500, description: 'Role could not be successfully created'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleData\n                                            \n                                                            EditRoleData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        deleteRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRole(guildId: string, roleId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':roleId')@ApiOperation({summary: 'Delete a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, description: 'Role was successfully deleted'})@ApiResponse({status: 500, description: 'Role could not be successfully deleted'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getGuildRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildRoles(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all roles for a guild'})@ApiResponse({status: 200, type: undefined, schema: rolesResponseSchema, description: 'Roles were successfully fetched'})@ApiResponse({status: 500, description: 'Roles could not be successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(guildId: string, roleId: string, roleData: EditRoleData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':roleId')@ApiOperation({summary: 'Update a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, schema: roleResponseSchema, description: 'Role was successfully updated'})@ApiResponse({status: 500, description: 'Role could not be successfully updated'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleData\n                                            \n                                                            EditRoleData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Inject,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Client, Role } from 'discord.js';\nimport {\n  RoleResponse,\n  rolesResponseSchema,\n  roleResponseSchema,\n  EditRoleData,\n} from '../dto/role';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { Rank } from '@prisma/client';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\nconst logger = new Logger('RoleController');\n@ApiTags('/role')\n@Controller('/role')\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\n@ApiBearerAuth()\nexport class RoleController {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all roles for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: [RoleResponse],\n    schema: rolesResponseSchema,\n    description: 'Roles were successfully fetched',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Roles could not be successfully fetched',\n  })\n  async getGuildRoles(@Param('guildId') guildId: string): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    logger.log(`Found ${guild.roles.cache.size} roles in guild ${guildId}`);\n    return (await guild.roles.fetch()).toJSON();\n  }\n  @Post('/')\n  @ApiOperation({ summary: 'Create a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    schema: roleResponseSchema,\n    description: 'Role was successfully created',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully created',\n  })\n  async createRole(\n    @Param('guildId') guildId: string,\n    @Body() roleData: EditRoleData,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = await guild.roles.create(roleData);\n    logger.log(`Created role ${role.name} in guild ${guildId}`);\n    return role;\n  }\n  @Put(':roleId')\n  @ApiOperation({ summary: 'Update a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    schema: roleResponseSchema,\n    description: 'Role was successfully updated',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully updated',\n  })\n  async updateRole(\n    @Param('guildId') guildId: string,\n    @Param('roleId') roleId: string,\n    @Body() roleData: EditRoleData,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = guild.roles.cache.get(roleId);\n    await role.edit(roleData);\n    logger.log(`Updated role ${role.name} in guild ${guildId}`);\n    return role;\n  }\n\n  @Delete(':roleId')\n  @ApiOperation({ summary: 'Delete a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    description: 'Role was successfully deleted',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully deleted',\n  })\n  async deleteRole(\n    @Param('guildId') guildId: string,\n    @Param('roleId') roleId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = guild.roles.cache.get(roleId);\n    logger.log(`Deleted role ${role.name} in guild ${guildId}`);\n    await role.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleResponse.html":{"url":"classes/RoleResponse.html","title":"class - RoleResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                color\n                            \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                guild\n                            \n                            \n                                    \n                                    \n                                hoist\n                            \n                            \n                                    \n                                    \n                                icon\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                managed\n                            \n                            \n                                    \n                                    \n                                mentionable\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                permissions\n                            \n                            \n                                    \n                                    \n                                rawPosition\n                            \n                            \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                unicodeEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The color of the role', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The timestamp the role was created at(Unixtimestamp)', example: 1600000000000})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guild\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The guild the api belongs to', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hoist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is hoisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@ApiProperty({type: String, description: 'The icon of the role', example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the role', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        managed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is managed by an integration', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        mentionable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is mentionable', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The name of the role', example: 'Admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The permissions of the role', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rawPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The position of the role', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The tags of the role', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        unicodeEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The unicodeEmoji of the role', example: '👑'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nimport {\n  Base64Resolvable,\n  ColorResolvable,\n  Colors,\n  EmojiResolvable,\n  PermissionFlagsBits,\n  PermissionResolvable,\n} from 'discord.js';\n\nclass RoleResponse {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild the api belongs to',\n    example: '123456789012345678',\n  })\n  guild: string;\n\n  @IsUrl()\n  @ApiProperty({\n    type: String,\n    description: 'The icon of the role',\n    example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n  })\n  icon: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The unicodeEmoji of the role',\n    example: '👑',\n  })\n  unicodeEmoji: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the role',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The name of the role',\n    example: 'Admin',\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The color of the role',\n    example: 0,\n  })\n  color: number;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is hoisted',\n    example: false,\n  })\n  hoist: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The position of the role',\n    example: 0,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The permissions of the role',\n    example: '0',\n  })\n  permissions: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is managed by an integration',\n    example: false,\n  })\n  managed: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is mentionable',\n    example: false,\n  })\n  mentionable: boolean;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The tags of the role',\n    example: null,\n  })\n  tags: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The timestamp the role was created at(Unixtimestamp)',\n    example: 1600000000000,\n  })\n  createdTimestamp: number;\n}\n\nclass EditRoleData {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsIn(Object.keys(Colors))\n  @ApiProperty({\n    enum: Colors,\n    required: false,\n    example: 'White',\n    examples: Object.keys(Colors),\n    description: 'New color of the role',\n  })\n  color?: ColorResolvable;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'Why was the role updated',\n  })\n  reason: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Whether or not the role should be hoisted',\n  })\n  hoist?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description:\n      'The position of the role; Higher = more permissions relative to the role below',\n  })\n  position?: number;\n\n  @IsIn(Object.keys(PermissionFlagsBits))\n  @IsOptional()\n  @ApiProperty({\n    type: Array,\n    required: false,\n    description: 'Updated Permission',\n    default: null,\n    example: ['AddReactions', 'KickMembers'],\n  })\n  permissions?: PermissionResolvable;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the role be mentionable or not',\n  })\n  mentionable?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New Icon of the role, base64 encoded string',\n    externalDocs: {\n      description: 'Discord.js docs',\n      url: 'https://old.discordjs.dev/#/docs/discord.js/main/class/Role?scrollTo=setIcon',\n    },\n  })\n  icon?: Base64Resolvable | EmojiResolvable | null;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'The new unicodeEmoji of the role',\n  })\n  unicodeEmoji?: string | null;\n}\n// Generate example schema for get /guilds/:guildId/roles/:roleId\nconst roleResponseSchema = {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n};\n// Schema for retrieving all roles from a guild with example data\nconst rolesResponseSchema = {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n};\n\n// Write exports here\nexport { RoleResponse, EditRoleData, roleResponseSchema, rolesResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SelfController.html":{"url":"controllers/SelfController.html","title":"controller - SelfController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SelfController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user/self\n            \n\n\n            \n                Description\n            \n            \n                The controller for the /user/self endpoint.\nThis endpoint is responsible for telling the frontend the current logged in user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/self.controller.ts:21\n                        \n                    \n\n\n            \n                \n                        Gets the current logged in user for the frontend.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the user ID, this is the discord user ID and it comes from the request if a user is logged in\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the user with data fetch from the discord api, see self.service.ts\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, UseGuards } from '@nestjs/common';\nimport { SelfDto } from './self.dto';\nimport { RequestUser } from '../util/decorators/request-user.decorator';\nimport { JwtAuthGuard } from '../auth/jwt/guards/jwt-auth.guard';\nimport { SelfService } from './self.service';\n\n/**\n * The controller for the /user/self endpoint.\n * This endpoint is responsible for telling the frontend the current logged in user.\n */\n@Controller('/user/self')\n@UseGuards(JwtAuthGuard)\nexport class SelfController {\n  constructor(@Inject(SelfService) private readonly selfService: SelfService) {}\n  /**\n   * Gets the current logged in user for the frontend.\n   * @param userId the user ID, this is the discord user ID and it comes from the request if a user is logged in\n   * @returns the user with data fetch from the discord api, see self.service.ts\n   */\n  @Get()\n  async getSelf(@RequestUser() userId: string): Promise {\n    return this.selfService.fetchSelf(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfDto.html":{"url":"classes/SelfDto.html","title":"class - SelfDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                guilds\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guilds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Guild[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['userId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { GuildUser } from '@prisma/client';\n\nexport class Guild {\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) name: string;\n  @ApiProperty({ type: String }) image: string;\n}\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n  @ApiPropertyOptional({ type: [Guild] }) guilds: Guild[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfDto-1.html":{"url":"classes/SelfDto-1.html","title":"class - SelfDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/dto/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                guildId\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                rank\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['guildId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['rank']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['userId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GuildUser } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) rank: GuildUser['rank'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SelfService.html":{"url":"injectables/SelfService.html","title":"injectable - SelfService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SelfService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service used to fetch the user data that the frontend needs.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _fetchGuilds\n                            \n                            \n                                    Async\n                                fetchSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discord: Client, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/self.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discord\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _fetchGuilds\n                        \n                    \n                \n            \n            \n                \n                        \n                    _fetchGuilds(userId: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/self.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Fetches the user from the bots database and\ntakes the guild ids and fetches those from discord, then returns them.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the discord user id of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                a list of guilds that the user is in\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        fetchSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchSelf(userId: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/self.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Fetches the user from discord and\nchecks the guild that the user is in via the database\nand returns the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the discord user id of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the user dto with all needed data\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client, Guild } from 'discord.js';\nimport { PrismaService } from '../prisma.service';\nimport { SelfDto } from './self.dto';\nimport { User } from '@prisma/client';\nimport { plainToInstance } from '../util/functions/plain-to-instance';\n\n/**\n * Service used to fetch the user data that the frontend needs.\n */\n@Injectable()\nexport class SelfService {\n  constructor(\n    @InjectDiscordClient() private readonly discord: Client,\n    @Inject(PrismaService) private readonly prisma: PrismaService,\n  ) {}\n  /**\n   * Fetches the user from discord and\n   * checks the guild that the user is in via the database\n   * and returns the user.\n   * @param userId the discord user id of the user\n   * @returns the user dto with all needed data\n   */\n  async fetchSelf(userId: User['userId']): Promise {\n    const [discordUser, guilds] = await Promise.all([\n      this.discord.users.fetch(userId),\n      this._fetchGuilds(userId),\n    ]);\n\n    return plainToInstance(SelfDto, {\n      userId: discordUser.id,\n      avatarUrl: discordUser.avatarURL({ size: 128 }),\n      name: discordUser.globalName,\n      guilds: guilds.map((guild) => ({\n        guildId: guild.id,\n        name: guild.name,\n        image: guild.iconURL({ size: 128 }),\n      })),\n    });\n  }\n  /**\n   * Fetches the user from the bots database and\n   * takes the guild ids and fetches those from discord, then returns them.\n   * @param userId the discord user id of the user\n   * @returns a list of guilds that the user is in\n   */\n  private async _fetchGuilds(userId: User['userId']): Promise {\n    return this.prisma.guildUser\n      .findMany({ where: { userId: userId } })\n      .then((guildUsers) =>\n        Promise.all(\n          guildUsers.map((guildUser) =>\n            this.discord.guilds.fetch(guildUser.guildId),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendDirectMessageToUserException.html":{"url":"classes/SendDirectMessageToUserException.html","title":"class - SendDirectMessageToUserException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendDirectMessageToUserException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/send-direct-message-to-user-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when the bot tries to DM a user but fails\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, userId: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/send-direct-message-to-user-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when the bot tries to DM a user but fails\n */\nexport class SendDirectMessageToUserException extends Error {\n  constructor(guildId: string, userId: string) {\n    super(\n      `Failed to send direct message to user ${userId} in guild ${guildId}.`,\n    );\n  }\n}\n\n/**\n * Filter used to craft the http api error response when the exception is triggered in a http request context.\n */\n@Catch(SendDirectMessageToUserException)\nexport class SendDirectMessageToUserExceptionFilter implements ExceptionFilter {\n  catch(exception: SendDirectMessageToUserException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendDirectMessageToUserExceptionFilter.html":{"url":"classes/SendDirectMessageToUserExceptionFilter.html","title":"class - SendDirectMessageToUserExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendDirectMessageToUserExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/send-direct-message-to-user-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to craft the http api error response when the exception is triggered in a http request context.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: SendDirectMessageToUserException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/send-direct-message-to-user-exception.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            SendDirectMessageToUserException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when the bot tries to DM a user but fails\n */\nexport class SendDirectMessageToUserException extends Error {\n  constructor(guildId: string, userId: string) {\n    super(\n      `Failed to send direct message to user ${userId} in guild ${guildId}.`,\n    );\n  }\n}\n\n/**\n * Filter used to craft the http api error response when the exception is triggered in a http request context.\n */\n@Catch(SendDirectMessageToUserException)\nexport class SendDirectMessageToUserExceptionFilter implements ExceptionFilter {\n  catch(exception: SendDirectMessageToUserException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetFirstMessageUICommand.html":{"url":"classes/SetFirstMessageUICommand.html","title":"class - SetFirstMessageUICommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetFirstMessageUICommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/user-set-first-message-ui.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onShowInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/user-set-first-message-ui.command.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onShowInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    onShowInfo(interaction: ContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/user-set-first-message-ui.command.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ApplicationCommandType,\n  Client,\n  ContextMenuCommandInteraction,\n  userMention,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'Set first message',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class SetFirstMessageUICommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService)\n    private prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onShowInfo(interaction: ContextMenuCommandInteraction) {\n    if (!interaction.isContextMenuCommand()) return;\n    await interaction.deferReply({ ephemeral: true });\n    const message = await interaction.channel.messages.fetch(\n      interaction.targetId,\n    );\n    await this.prismaService.guildUser.update({\n      where: {\n        guildId_userId: {\n          guildId: message.guildId,\n          userId: message.author.id,\n        },\n      },\n      data: {\n        firstMessageId: interaction.targetId,\n      },\n    });\n    interaction.followUp({\n      content: `First message for ${userMention(\n        message.author.id,\n      )} has been set.`,\n      ephemeral: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingsChanged.html":{"url":"classes/SettingsChanged.html","title":"class - SettingsChanged","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingsChanged\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/events/settings-role-id-changed.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventType\n                            \n                            \n                                guildId\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, value: string | number | boolean, eventType)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string | number | boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventType\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventType\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { Settings } from '@prisma/client';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SettingsChanged implements EventToLog {\n  guildId: string;\n  value: string | number | boolean;\n  eventType: keyof Settings;\n\n  constructor(\n    guildId: string,\n    value: string | number | boolean,\n    eventType: keyof Settings,\n  ) {\n    this.guildId = guildId;\n    this.value = value;\n    this.eventType = eventType;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`SettingsChanged: ${this.eventType} changed to ${this.value}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingsDto.html":{"url":"classes/SettingsDto.html","title":"class - SettingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/dto/settings.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                adminRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                introChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveMessageFormat\n                            \n                            \n                                    \n                                    \n                                    \n                                modChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                modRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                openIntroChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                prefix\n                            \n                            \n                                    \n                                    \n                                    \n                                unverifiedMemberRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                verifiedMemberRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                welcomeMessageFormat\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        adminRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        introChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveMessageFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        modChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        modRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        openIntroChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        unverifiedMemberRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        verifiedMemberRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        welcomeMessageFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Settings } from '@prisma/client';\nimport { IsOptional, IsString } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class SettingsDto implements Omit {\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  prefix: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  welcomeMessageFormat: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  openIntroChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  introChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  leaveMessageFormat: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  leaveChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  unverifiedMemberRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  verifiedMemberRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  modRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  adminRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  modChannelId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlowmodeDisabled.html":{"url":"classes/SlowmodeDisabled.html","title":"class - SlowmodeDisabled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlowmodeDisabled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                enabled\n                            \n                            \n                                guildId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, enabled: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        enabled\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlowmodeEnabled.html":{"url":"classes/SlowmodeEnabled.html","title":"class - SlowmodeEnabled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlowmodeEnabled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                enabled\n                            \n                            \n                                guildId\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, enabled: boolean, seconds: number)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        enabled\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seconds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpecialCommand.html":{"url":"classes/SpecialCommand.html","title":"class - SpecialCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpecialCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/special.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cakes\n                            \n                            \n                                coffees\n                            \n                            \n                                possibleAnswers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                chooseRandomCoffee\n                            \n                            \n                                templateAnswer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cakes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'Käsekuchen',\n    'Apfelkuchen',\n    'Bienenstich',\n    'Streuselkuchen',\n    'Kuchen',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coffees\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'Americano',\n    'Cappuccino',\n    'Diplomatenkaffee',\n    'Einspänner',\n    'Eiskaffee',\n    'Espresso',\n    'Kaffee Konsul',\n    'Latte Macchiato',\n    'Mokka',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        possibleAnswers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    '*Y schiebt X einen Z rüber!*',\n    '*Y schenkt X einen ganzen Z!*',\n    '*Y gibt X ein headpat :3*',\n    '*Y gibt X eine Umarmung :3*',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        chooseRandomCoffee\n                        \n                    \n                \n            \n            \n                \n                        \n                    chooseRandomCoffee(interaction: CommandInteraction, dto: UserToUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/special.command.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserToUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateAnswer\n                        \n                    \n                \n            \n            \n                \ntemplateAnswer(category: string, fromUserId: string, toUserId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/commands/special.command.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fromUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                toUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, IA, InteractionEvent } from '@discord-nestjs/core';\nimport { CommandInteraction, userMention } from 'discord.js';\nimport { UserToUser } from '../dto/user-to-user.dto';\nimport { SlashCommandPipe } from '@discord-nestjs/common';\nimport { UseFilters, ValidationPipe } from '@nestjs/common';\nimport { CommandValidationFilter } from '../filters/command-validation';\n\n@Command({\n  name: 'special',\n  description:\n    'Give a user you like a coffee, a cake or a headpat or maybe just a hug?',\n  dmPermission: false,\n})\n@UseFilters(CommandValidationFilter)\nexport class SpecialCommand {\n  coffees = [\n    'Americano',\n    'Cappuccino',\n    'Diplomatenkaffee',\n    'Einspänner',\n    'Eiskaffee',\n    'Espresso',\n    'Kaffee Konsul',\n    'Latte Macchiato',\n    'Mokka',\n  ];\n  possibleAnswers = [\n    '*Y schiebt X einen Z rüber!*',\n    '*Y schenkt X einen ganzen Z!*',\n    '*Y gibt X ein headpat :3*',\n    '*Y gibt X eine Umarmung :3*',\n  ];\n  cakes = [\n    'Käsekuchen',\n    'Apfelkuchen',\n    'Bienenstich',\n    'Streuselkuchen',\n    'Kuchen',\n  ];\n  @Handler()\n  async chooseRandomCoffee(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: UserToUser,\n  ): Promise {\n    const toUser = await interaction.guild.members.fetch(dto.user);\n    return this.templateAnswer(dto.category, interaction.user.id, toUser.id);\n  }\n\n  templateAnswer(category: string, fromUserId: string, toUserId: string) {\n    switch (category) {\n      case 'coffee':\n        return this.possibleAnswers[0]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId))\n          .replace(\n            'Z',\n            this.coffees[Math.ceil(Math.random() * this.coffees.length - 1)],\n          );\n      case 'cake':\n        return this.possibleAnswers[1]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId))\n          .replace(\n            'Z',\n            this.cakes[Math.ceil(Math.random() * this.cakes.length - 1)],\n          );\n      case 'headpat':\n        return this.possibleAnswers[2]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId));\n      case 'hug':\n        return this.possibleAnswers[3]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId));\n      default:\n        break;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TargetUser.html":{"url":"classes/TargetUser.html","title":"class - TargetUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TargetUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user you want to give something', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { User } from 'discord.js';\n\nexport class TargetUser {\n  @Param({\n    description: 'The user you want to give something',\n    descriptionLocalizations: {\n      'en-US': 'The user to delete all messages from',\n      de: 'Person von der du alle Nachrichten löschen willst',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nGuildRestrictedChannelService->TasksModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nTasksModule -->\n\nGuildService->TasksModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nTasksModule -->\n\nGuildSettingsService->TasksModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nTasksModule -->\n\nGuildUserService->TasksModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nTasksModule -->\n\nPrismaService->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The Tasks module manages the creation/execution of jobs that run periodically\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { GuildRestrictedChannelService } from 'src/guild/guild-restricted-channel/guild-restricted-channel.service';\n\n/**\n * The Tasks module manages the creation/execution of jobs that run periodically\n */\n@Module({\n  providers: [\n    TasksService,\n    GuildUserService,\n    GuildService,\n    PrismaService,\n    GuildSettingsService,\n    GuildRestrictedChannelService,\n  ],\n  imports: [DiscordModule.forFeature()],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The tasks service is responsible for managing jobs/tasks that run periodically.\nIt also exposes a way to create tasks but NOT deleting them.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                checkActiveUsers\n                            \n                            \n                                    \n                                    Async\n                                checkTimeouts\n                            \n                            \n                                    \n                                    Async\n                                cleanWfpMembers\n                            \n                            \n                                    \n                                    Async\n                                closeStaleTickets\n                            \n                            \n                                createDynamicScheduledJob\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildService: GuildService, userService: GuildUserService, client: Client, eventEmitter: EventEmitter2, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkActiveUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkActiveUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'checkActiveUsers', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Runs at 00:00:00 every day and\nupdates the written messages count for all users, of all guilds the bot is in, that have the MEMBER rank\nand then updates their permissions on specific channels.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkTimeouts\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeouts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('*/5 * * * *', {name: 'timeouts', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Runs every 5 minutes and checks if members of each given guild the bot is in are still timeouted\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        cleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanWfpMembers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'cleanWfpMembers', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Runs everyday at midnight and kicks members that are longer than 14 days on the server and haven't checked in.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        closeStaleTickets\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeStaleTickets()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'closeStaleTickets', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createDynamicScheduledJob\n                        \n                    \n                \n            \n            \n                \ncreateDynamicScheduledJob(jobOptions: CronJobParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:41\n                        \n                    \n\n\n            \n                \n                        A utility function to create cronjobs on the fly from cronjob parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jobOptions\n                                            \n                                                        CronJobParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    CronJob parameters such as the time. onComplete etc\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                a new cronjob\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { GuildUser } from '@prisma/client';\nimport {\n  BaseGuildTextChannel,\n  Client,\n  Colors,\n  EmbedBuilder,\n  GuildTextBasedChannel,\n  userMention,\n} from 'discord.js';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { UserTimeOutEvent } from 'src/guild/moderation/events/user.events';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { CronJob, CronJobParams } from 'cron';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\n\nconst logger = new Logger('TaskService');\n\n/**\n * The tasks service is responsible for managing jobs/tasks that run periodically.\n * It also exposes a way to create tasks but NOT deleting them.\n */\n@Injectable()\nexport class TasksService {\n  constructor(\n    @Inject(GuildService) private guildService: GuildService,\n    @Inject(GuildUserService) private userService: GuildUserService,\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n    @Inject(PrismaService) private readonly prismaService: PrismaService,\n  ) {}\n  /**\n   * A utility function to create cronjobs on the fly from cronjob parameters\n   * @param jobOptions CronJob parameters such as the time. onComplete etc\n   * @returns a new cronjob\n   */\n  createDynamicScheduledJob(jobOptions: CronJobParams) {\n    return new CronJob(\n      jobOptions.cronTime,\n      jobOptions.onTick,\n      jobOptions.onComplete,\n      jobOptions.start,\n      jobOptions.timeZone,\n    );\n  }\n\n  /**\n   * Runs at 00:00:00 every day and\n   * updates the written messages count for all users, of all guilds the bot is in, that have the MEMBER rank\n   * and then updates their permissions on specific channels.\n   */\n  @Cron('0 0 * * *', {\n    name: 'checkActiveUsers',\n    timeZone: 'Europe/Berlin',\n  })\n  async checkActiveUsers() {\n    this.client.guilds.cache.forEach(async (guild) => {\n      (await this.userService.findAll(guild.id)).forEach(\n        async (user: GuildUser) => {\n          if (user.rank != 'MEMBER') return;\n          logger.log(`Checking user ${user.userId} for activity...`);\n          this.userService.updateMessageCountBucket(user.userId, user.guildId);\n          this.guildService.updateChannelPermissions(user);\n        },\n      );\n    });\n  }\n\n  /**\n   * Runs every 5 minutes and checks if members of each given guild the bot is in are still timeouted\n   */\n  @Cron('*/5 * * * *', {\n    name: 'timeouts',\n    timeZone: 'Europe/Berlin',\n  })\n  async checkTimeouts() {\n    this.client.guilds.cache.forEach(async (guild) => {\n      (await this.userService.findAll(guild.id)).forEach(\n        async (dbUser: GuildUser) => {\n          try {\n            const member = await this.client.guilds.cache\n              .get(guild.id)\n              .members.fetch(dbUser.userId.toString());\n            if (member.communicationDisabledUntilTimestamp == null) {\n              return;\n            } else if (\n              member.communicationDisabledUntilTimestamp > Date.now()\n            ) {\n              logger.log(\n                `User ${dbUser.userId} is still timed out, until ${new Date(\n                  member.communicationDisabledUntilTimestamp,\n                ).toLocaleString()}`,\n              );\n              return;\n            } else if (\n              member.communicationDisabledUntilTimestamp  userMention(member.id))\n            .join('\\n'),\n        },\n        {\n          name: \"Couldn't kick members count\",\n          value: outCome['unkickableMembers'].length.toString(),\n        },\n        {\n          name: \"Couldn't kick members names\",\n          value: outCome['unkickableMembers']\n            .map((member) => userMention(member.id))\n            .join('\\n'),\n        },\n      ]);\n    await logChannel.send({\n      embeds: [embed],\n    });\n  }\n\n  @Cron('0 0 * * *', {\n    name: 'closeStaleTickets',\n    timeZone: 'Europe/Berlin',\n  })\n  async closeStaleTickets() {\n    const tickets = await this.prismaService.tickets.findMany();\n    tickets.forEach(async (ticket) => {\n      try {\n        const channel = (await (\n          await this.client.guilds.fetch(ticket.guildId)\n        ).channels.fetch(ticket.ticketId)) as GuildTextBasedChannel;\n\n        if (\n          new Date(new Date().setDate(new Date().getDate() - 7)) >\n          new Date((await channel.lastMessage.fetch()).createdTimestamp)\n        ) {\n          try {\n            await (channel as BaseGuildTextChannel).permissionOverwrites.delete(\n              ticket.userId,\n            );\n            await this.prismaService.tickets.update({\n              where: {\n                ticketId: ticket.ticketId,\n              },\n              data: {\n                closed: true,\n              },\n            });\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketSystemSetupCommand.html":{"url":"classes/TicketSystemSetupCommand.html","title":"class - TicketSystemSetupCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketSystemSetupCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/ticket-system.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onTicketsystemSetupCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/ticket-system.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTicketsystemSetupCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTicketsystemSetupCommand(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/ticket-system.command.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  Client,\n  CommandInteraction,\n} from 'discord.js';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Command({\n  name: 'ticketsystem-setup',\n  description: 'Sends a message and attaches the create Ticket button.',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class TicketSystemSetupCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n\n  @Handler()\n  async onTicketsystemSetupCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n  ) {\n    try {\n      await interaction.channel.send({\n        content:\n          'Du hast ein Anliegen welches du mit den Mods besprechen möchtest? Dann erstelle ein Ticket!',\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n      await interaction.reply({\n        ephemeral: true,\n        content: 'Done!',\n      });\n    } catch {\n      interaction.reply({\n        ephemeral: true,\n        content: 'Could not send a message in this channel!',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeOutCommand.html":{"url":"classes/TimeOutCommand.html","title":"class - TimeOutCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeOutCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/timeout.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                onTimeOutCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/timeout.command.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onTimeOutCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTimeOutCommand(interaction: CommandInteraction, dto: UserTimeOutDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()@UseFilters(CommandValidationFilter)\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/timeout.command.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserTimeOutDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  Client,\n  CommandInteraction,\n  EmbedBuilder,\n  userMention,\n} from 'discord.js';\nimport UserTimeOutDto from '../dto/user-timeout.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  UserSendDMFailedEvent,\n  UserTimeOutEvent,\n  UserTimeOutFailedEvent,\n} from 'src/guild/moderation/events/user.events';\nimport { UseFilters } from '@nestjs/common';\nimport { CommandValidationFilter } from '../filters/command-validation';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Command({\n  name: 'timeout',\n  description: 'Timeouts a user',\n  defaultMemberPermissions: ['ModerateMembers'],\n  descriptionLocalizations: {\n    'en-US': 'Timeouts a user',\n    de: 'Nutzer:in muten (Timeout)',\n  },\n  dmPermission: false,\n})\nexport class TimeOutCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    private readonly eventEmitter: EventEmitter2,\n  ) {}\n  @Handler()\n  @UseFilters(CommandValidationFilter)\n  async onTimeOutCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: UserTimeOutDto,\n  ) {\n    const date = new Date(dto.duration).getTime();\n    const user = await interaction.guild.members.fetch(dto.user);\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const error: Array = [];\n    try {\n      await user.timeout(date - Date.now(), dto.reason);\n    } catch (err) {\n      error.push(err);\n      this.eventEmitter.emit(\n        'user.timeout.failed',\n        new UserTimeOutFailedEvent(\n          user.id,\n          interaction.guildId,\n          dto.reason,\n          date,\n          err,\n        ),\n      );\n    }\n    try {\n      if (error.length) throw new Error('Timeout failed, therefore no DM');\n      await user.send({\n        content: `Du hast einen Timeout bis ${new Date(\n          dto.duration,\n        ).toString()}, bei Fragen wende dich an die Mods. \nGrund: ${dto.reason}`,\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n    } catch (err) {\n      error.push(err);\n      this.eventEmitter.emit(\n        'user.send.failed',\n        new UserSendDMFailedEvent(user.id, interaction.guildId, err),\n      );\n    }\n    const embed = new EmbedBuilder()\n      .setAuthor({\n        name: this.client.user.username,\n        iconURL: this.client.user.avatarURL(),\n      })\n      .setTitle(`Timeout user ${user.user.username}`)\n      .setDescription(\n        error.length === 0\n          ? `Timeouted user ${userMention(user.id)} until ${new Date(\n              dto.duration,\n            ).toLocaleString()} and sent them a DM.`\n          : `Failed to timeout user ${userMention(user.id)} until ${new Date(\n              dto.duration,\n            ).toLocaleString()}, check below for more information.`,\n      );\n    if (error.length) {\n      embed.addFields(\n        error.map((e) => {\n          if (!(e instanceof Error)) return;\n          return {\n            name: e.name,\n            value: e.message,\n          };\n        }),\n      );\n    }\n    await interaction.followUp({\n      embeds: [embed],\n      ephemeral: true,\n    });\n    this.eventEmitter.emit(\n      'user.timeout.created',\n      new UserTimeOutEvent(user.id, interaction.guildId, dto.reason, date),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnverifyByRoleCommand.html":{"url":"classes/UnverifyByRoleCommand.html","title":"class - UnverifyByRoleCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnverifyByRoleCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/unverify-by-role.conmand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onUnverifybyRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/unverify-by-role.conmand.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onUnverifybyRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    onUnverifybyRole(baseInteraction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/unverify-by-role.conmand.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                baseInteraction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n} from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { Client, CommandInteraction } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'enter-lockdown',\n  dmPermission: false,\n})\nexport class UnverifyByRoleCommand {\n  constructor(\n    @InjectDiscordClient() private client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  @Handler()\n  onUnverifybyRole(@IA() baseInteraction: CommandInteraction) {\n    this.client.guilds.fetch(baseInteraction.guildId).then((guild) =>\n      guild.members.fetch().then((members) =>\n        members.forEach(async (member) => {\n          if (\n            member.roles.cache.has('1011563978956226560') ||\n            member.roles.cache.has('1011513775054143632') ||\n            guild.ownerId == member.id\n          )\n            return;\n          const roles = [];\n          member.roles.cache.forEach((role) => roles.push({ id: role.id }));\n          this.database.lockdownRoleBackup\n            .create({\n              data: {\n                guildId: member.guild.id,\n                userId: member.id,\n                roles,\n              },\n            })\n            .then(async (data) =>\n              (data.roles as Prisma.JsonArray).forEach(\n                async (role: { id: string }) =>\n                  await member.roles.remove(role.id),\n              ),\n            );\n          if (!member.roles.cache.has('1226585753253843014')) {\n            await member.roles.add('1121823930085285938');\n          } else {\n            //await member.roles.add('')\n          }\n        }),\n      ),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserBanEvent.html":{"url":"classes/UserBanEvent.html","title":"class - UserBanEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserBanEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                banUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                kickUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                purgeUserFromGuild\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                timeoutUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        banUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    banUser(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/ban')@ApiOperation({summary: 'Ban a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully banned'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUser(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get a user for a guild'})@ApiResponse({status: 200, type: DiscordUser, schema: userResponseSchema, description: 'User was successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUsers(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all users for a guild'})@ApiResponse({status: 200, schema: usersResponseSchema, type: DiscordGuildMember, description: 'Users were successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        kickUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    kickUser(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/kick')@ApiOperation({summary: 'Kick a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully kicked'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        purgeUserFromGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    purgeUserFromGuild(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/purge')@ApiOperation({summary: 'Purge a user from a guild VERY EXPENSIVEEEEEE, USE WITH CAUTION'})@ApiResponse({status: 200, description: 'User was successfully purged'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        timeoutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    timeoutUser(guildId: string, userId: string, duration: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/timeout/:duration')@ApiOperation({summary: 'Timeout a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully timed outed'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                duration\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  NotFoundException,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { ChannelType, Client, User } from 'discord.js';\nimport {\n  DiscordUser,\n  userResponseSchema,\n  usersResponseSchema,\n} from '../dto/user';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\nimport { SendDirectMessageToUserException } from 'src/util/exception/send-direct-message-to-user-exception';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  UserBanEvent,\n  UserKickEvent,\n  UserPurgeEvent,\n  UserTimeOutEvent,\n} from '../events/user.events';\nimport { DiscordGuildMember } from '../dto/guild-member';\nimport { plainToInstance } from '../../../util/functions/plain-to-instance';\nimport { Request } from 'express';\nimport { GuildUser, Rank } from '@prisma/client';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller('/user')\n@ApiBearerAuth()\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class UserController {\n  logger = new Logger(UserController.name);\n\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all users for a guild' })\n  @ApiResponse({\n    status: 200,\n    schema: usersResponseSchema,\n    type: DiscordGuildMember,\n    description: 'Users were successfully fetched',\n  })\n  async getGuildUsers(\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const members = await guild.members.fetch();\n    this.logger.debug(`Found ${members.size} members in guild ${guildId}`);\n    return members.map((member) =>\n      plainToInstance(DiscordGuildMember, {\n        avatarUrl: member.displayAvatarURL(),\n        guildId: member.guild.id,\n        bot: member.user.bot,\n        userId: member.user.id,\n        communicationDisabledUntil:\n          member?.communicationDisabledUntil?.toJSON() ?? undefined,\n        displayName: member.displayName ?? member.user.globalName,\n        username: member.user.username,\n      }),\n    );\n  }\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get a user for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: DiscordUser,\n    schema: userResponseSchema,\n    description: 'User was successfully fetched',\n  })\n  async getGuildUser(\n    @Req() request: Request & { user: GuildUser },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(request.user.guildId);\n    const member = await guild.members.fetch(request.user.userId);\n    this.logger.log(\n      `Found member ${member.user.username} in guild ${request.user.guildId}`,\n    );\n    return member.user;\n  }\n\n  @Post(':userId/ban')\n  @ApiOperation({ summary: 'Ban a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully banned',\n  })\n  async banUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    await guild.members.ban(userId);\n    this.logger.log(`Banned user ${userId} from guild ${guildId}`);\n    await this.eventEmitter.emitAsync(\n      'user.ban',\n      new UserBanEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n\n  @Post(':userId/kick')\n  @ApiOperation({ summary: 'Kick a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully kicked',\n  })\n  async kickUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    await guild.members.kick(userId);\n    this.logger.log(`Kicked user ${userId} from guild ${guildId}`);\n    await this.eventEmitter.emitAsync(\n      'user.kick',\n      new UserKickEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n\n  @Post(':userId/timeout/:duration')\n  @ApiOperation({ summary: 'Timeout a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully timed outed',\n  })\n  async timeoutUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n    @Param('duration') duration: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const member = await guild.members.fetch(userId);\n    await member.timeout(parseInt(duration));\n    await member\n      .send(\n        `Du hast einen Timeout bis ${new Date(\n          new Date().getTime() + duration,\n        ).toISOString()}, bei Fragen wende dich an die Mods.`,\n      )\n      .catch(() => {\n        throw new SendDirectMessageToUserException(guildId, userId);\n      });\n    await this.eventEmitter.emitAsync(\n      'user.timeout.created',\n      new UserTimeOutEvent(\n        userId,\n        guildId,\n        'TODO: NOT IMPLEMENTED',\n        new Date(new Date().getTime() + duration).getMilliseconds(),\n      ),\n    );\n    this.logger.log(\n      `Timed out user ${userId} from guild ${guildId} for ${duration}`,\n    );\n  }\n\n  @Post(':userId/purge')\n  @ApiOperation({\n    summary: 'Purge a user from a guild VERY EXPENSIVEEEEEE, USE WITH CAUTION',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully purged',\n  })\n  async purgeUserFromGuild(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(`Purging user ${userId} from guild ${guildId}`);\n    if (guild === undefined) {\n      throw new NotFoundException('Guild not found');\n    }\n    guild.channels.fetch();\n    guild.channels.cache.forEach(async (channel) => {\n      try {\n        if (\n          channel.type === ChannelType.GuildText ||\n          channel.type === ChannelType.PublicThread ||\n          channel.type === ChannelType.PrivateThread\n        ) {\n          this.logger.log(`Purging user ${userId} from channel ${channel.id}`);\n          await cleanTextChannel(\n            channel,\n            () => false,\n            (msg) => msg.author.id === userId,\n            this.logger,\n          );\n          // sleep for 500ms to avoid rate limit\n          await new Promise((resolve) => setTimeout(resolve, 500));\n        }\n      } catch {\n        this.logger.error(\n          `Failed to purge user ${userId} from channel ${channel.id}`,\n        );\n      }\n    });\n    await this.eventEmitter.emitAsync(\n      'user.purge',\n      new UserPurgeEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInfoUiCommand.html":{"url":"classes/UserInfoUiCommand.html","title":"class - UserInfoUiCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInfoUiCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/user-info-ui.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getMessage\n                            \n                            \n                                    \n                                    Async\n                                onShowInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/user-info-ui.command.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _getMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getMessage(msgId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/commands/user-info-ui.command.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                msgId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onShowInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    onShowInfo(interaction: ContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/user-info-ui.command.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ApplicationCommandType,\n  Client,\n  ContextMenuCommandInteraction,\n  EmbedBuilder,\n  Message,\n  userMention,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'Show user info',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.User,\n})\nexport class UserInfoUiCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService)\n    private prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onShowInfo(interaction: ContextMenuCommandInteraction) {\n    if (!interaction.isContextMenuCommand()) return;\n    await interaction.deferReply({ ephemeral: true });\n    const guildUser = await this.prismaService.guildUser.findUnique({\n      where: {\n        guildId_userId: {\n          guildId: interaction.guildId,\n          userId: interaction.targetId,\n        },\n      },\n    });\n    if (!guildUser) {\n      return interaction.followUp({\n        content: 'User not found in database.',\n        ephemeral: true,\n      });\n    }\n    const firstMessageId = guildUser.firstMessageId;\n    const message = await this._getMessage(firstMessageId, interaction.guildId);\n    const numMessages = await this.prismaService.messages.count({\n      where: { userId: interaction.targetId, guildId: interaction.guildId },\n    });\n    const numReactions = await this.prismaService.auditLog.count({\n      where: {\n        invokerId: interaction.targetId,\n        guildId: interaction.guildId,\n        action: 'REACTION_ADDED',\n      },\n    });\n\n    const embed = new EmbedBuilder()\n      .setTitle('User Info')\n      .setDescription(`User: ${userMention(interaction.targetId)}`)\n      .addFields([\n        {\n          name: 'Link to introduction message',\n          value: message\n            ? `$[Click here](${message.url})`\n            : 'No message found in the database',\n        },\n        {\n          name: 'Number of messages sent',\n          value: numMessages.toString(),\n        },\n        {\n          name: 'Reactions added',\n          value: numReactions.toString(),\n        },\n      ]);\n    return interaction.followUp({\n      embeds: [embed],\n      ephemeral: true,\n    });\n  }\n  async _getMessage(msgId: string, guildId: string) {\n    if (!msgId) return null;\n    let message: Message = null;\n    await this.client.guilds.fetch(guildId).then(async (guild) => {\n      (await guild.channels.fetch()).forEach(async (channel) => {\n        if (channel.isTextBased()) {\n          try {\n            message = await channel.messages.fetch(msgId);\n          } catch {\n            return;\n          }\n        }\n      });\n    });\n    return message;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserKickEvent.html":{"url":"classes/UserKickEvent.html","title":"class - UserKickEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserKickEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nSelfService \n\nSelfService \n\n\n\nUserModule\n\nUserModule\n\nSelfService  -->\n\nUserModule->SelfService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nUserModule -->\n\nSelfService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The user module, not to be confused the guildUser module,\nis used to manage the bot local user of a discord user.\nSee user.service.ts and self.controller.ts for more info\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            SelfService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SelfController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SelfService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { SelfController } from './self.controller';\nimport { SelfService } from './self.service';\n\n/**\n * The user module, not to be confused the guildUser module,\n * is used to manage the bot local user of a discord user.\n * See user.service.ts and self.controller.ts for more info\n */\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [PrismaService, SelfService],\n  controllers: [SelfController],\n  exports: [SelfService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPurgeEvent.html":{"url":"classes/UserPurgeEvent.html","title":"class - UserPurgeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPurgeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:92\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:90\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSendDMFailedEvent.html":{"url":"classes/UserSendDMFailedEvent.html","title":"class - UserSendDMFailedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSendDMFailedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                guildId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, error: Error)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:110\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:108\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutDto.html":{"url":"classes/UserTimeOutDto.html","title":"class - UserTimeOutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user-timeout.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                duration\n                            \n                            \n                                    \n                                reason\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Param({description: 'The duration of the timeout', descriptionLocalizations: undefined, type: undefined, required: true})@IsDateString({}, {message: 'The input must be in format: Xd, Xh, Xm or XdXh or XhXm or XdXm or XdXhXm. Where X is a number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The reason for the timeout', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user to timeout', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { Transform } from 'class-transformer';\nimport { IsDateString } from 'class-validator';\nimport { User } from 'discord.js';\n\nexport default class UserTimeOutDto {\n  @Param({\n    description: 'The user to timeout',\n    descriptionLocalizations: {\n      'en-US': 'The user to timeout',\n      de: 'Account der gemutet werden soll',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n\n  @Param({\n    description: 'The reason for the timeout',\n    descriptionLocalizations: {\n      'en-US': 'The reason for the timeout',\n      de: 'Grund für den Timeout',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  reason: string;\n\n  // Hacky way to both transform the value and validate it, in one step :D\n  @Transform(({ value }) => {\n    if (\n      !/\\b(\\d+d)(\\d+h)\\b|\\b(\\d+h)(\\d+m)\\b|\\b(\\d+d)(\\d+m)\\b|\\b(\\d+[dhm])\\b|\\b(\\d+d)(\\d+h)(\\d+m)/.test(\n        value.trim(),\n      )\n    )\n      return null;\n    let _days = '0';\n    let _hours = '0';\n    let _minutes = '0';\n    (value as string)\n      .match(\n        /\\b(\\d+d)(\\d+h)\\b|\\b(\\d+h)(\\d+m)\\b|\\b(\\d+d)(\\d+m)\\b|\\b(\\d+[dhm])\\b|\\b(\\d+d)(\\d+h)(\\d+m)/g,\n      )\n      .forEach((match) => {\n        if (match.endsWith('d')) _days = match.replace('d', '');\n        else if (match.endsWith('h')) _hours = match.replace('h', '');\n        else if (match.endsWith('m')) _minutes = match.replace('m', '');\n      });\n    const days = parseInt(_days) || 0;\n    const hours = parseInt(_hours) || 0;\n    const minutes = parseInt(_minutes) || 0;\n    return new Date(\n      Date.now() + ((days * 24 + hours) * 60 + minutes) * 60 * 1000,\n    ).toISOString();\n  })\n  @Param({\n    description: 'The duration of the timeout',\n    descriptionLocalizations: {\n      'en-US': 'The duration of the timeout',\n      de: 'Dauer des Timeouts',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsDateString(\n    {},\n    {\n      message:\n        'The input must be in format: Xd, Xh, Xm or XdXh or XhXm or XdXm or XdXhXm. Where X is a number',\n    },\n  )\n  duration: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutEvent.html":{"url":"classes/UserTimeOutEvent.html","title":"class - UserTimeOutEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string, duration: number)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:37\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutFailedEvent.html":{"url":"classes/UserTimeOutFailedEvent.html","title":"class - UserTimeOutFailedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutFailedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                error\n                            \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string, duration: number, error: Error)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:62\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserToUser.html":{"url":"classes/UserToUser.html","title":"class - UserToUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserToUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user-to-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Choice(CommandToExecute)@Param({description: 'Was möchtest du einer Person geben?', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-to-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user you want to give something', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-to-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Choice, Param, ParamType } from '@discord-nestjs/core';\nimport { ChoiceOptions } from '@discord-nestjs/core/dist/decorators/option/choice/choice-options';\nimport { User } from 'discord.js';\n\nconst CommandToExecute: ChoiceOptions = {\n  'Einer Person einen Kaffee geben': 'coffee',\n  'Einer Person einen Kuchen geben': 'cake',\n  'Einer Person ein Headpat geben': 'headpat',\n  'Eine Person umarmen': 'hug',\n};\nexport class UserToUser {\n  @Param({\n    description: 'The user you want to give something',\n    descriptionLocalizations: {\n      'en-US': 'The user you want to give something',\n      de: 'Person welcher du etwas geben willst',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n\n  @Choice(CommandToExecute)\n  @Param({\n    description: 'Was möchtest du einer Person geben?',\n    required: true,\n  })\n  category: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.controller.ts\n            \n            controller\n            AuditLogController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.events.ts\n            \n            injectable\n            AuditEvents\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.service.ts\n            \n            injectable\n            AuditLogService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auditlog/dto/audit-log-filter.dto.ts\n            \n            class\n            AuditLogFilterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auditlog/dto/log-entry.dto.ts\n            \n            class\n            LogEntryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/guards/refresh-auth.guard.ts\n            \n            injectable\n            RefreshJwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.controller.ts\n            \n            controller\n            JwtAuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.service.ts\n            \n            injectable\n            JwtAuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.strategy.ts\n            \n            injectable\n            JwtAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/refresh-token.strategy.ts\n            \n            injectable\n            RefreshJwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/add-role.command.ts\n            \n            class\n            AddRoleCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/clean-wfp.command.ts\n            \n            class\n            CleanWfpMember\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/community-question.command.ts\n            \n            class\n            CommunityQuestionCommand\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bot/commands/init-guild.command.ts\n            \n            class\n            initGuildCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/mod-anouncement.command.ts\n            \n            class\n            MumVoiceCommandChatInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/commands/mod-anouncement.command.ts\n            \n            class\n            MumVoiceCommandUi\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/ping.command.ts\n            \n            class\n            PingCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/purge-user.command.ts\n            \n            class\n            PurgeCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/special.command.ts\n            \n            class\n            SpecialCommand\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/bot/commands/ticket-system.command.ts\n            \n            class\n            TicketSystemSetupCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/timeout.command.ts\n            \n            class\n            TimeOutCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/unverify-by-role.conmand.ts\n            \n            class\n            UnverifyByRoleCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/user-info-ui.command.ts\n            \n            class\n            UserInfoUiCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/user-set-first-message-ui.command.ts\n            \n            class\n            SetFirstMessageUICommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BOT_EVENT_HANDLER_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BOT_EVENT_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BotEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/dto/commmunity-question.dto.ts\n            \n            class\n            CommunityQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/dto/community-question.form.dto.ts\n            \n            class\n            CommunityQuestionFormDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/dto/mod-anouncement.dto.ts\n            \n            class\n            ModAnnouncementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/dto/user-timeout.dto.ts\n            \n            class\n            UserTimeOutDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/dto/user-to-user.dto.ts\n            \n            class\n            UserToUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/bot/dto/user-to-user.dto.ts\n            \n            variable\n            CommandToExecute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/dto/user.dto.ts\n            \n            class\n            TargetUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/explorers/event.explorer.ts\n            \n            class\n            Explorer\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bot/filters/command-validation.ts\n            \n            class\n            CommandValidationFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/is-modal-interaction.guard.ts\n            \n            guard\n            IsModalInteractionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/member-is-mod-or-higher.guard.ts\n            \n            guard\n            ReactedMemberIsModOrHigherGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/guards/message-from-user.guard.ts\n            \n            guard\n            MessageFromUserGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bot/guards/message-in-channel.guard.ts\n            \n            variable\n            ChannelIdGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/guards/message-is-dm.guard.ts\n            \n            guard\n            MessageIsDmGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bot/guards/reaction-emote.guard.ts\n            \n            variable\n            ReactionEmoteGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/guards/reaction-in-channel.guard.ts\n            \n            variable\n            ReactionChannelIdGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n            interface\n            DiscordExecutionContext\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n            guard\n            IsUserUnlockedGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/interfaces/bot-event.interface.ts\n            \n            interface\n            BotEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/events/guild-members/index.ts\n            \n            injectable\n            GuildMemberEvents\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/guild/events/interaction-create/mod-request-menu/index.ts\n            \n            class\n            ModRequestFlow\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/guild/events/message-create/dm-message/index.ts\n            \n            injectable\n            DmMessageHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/events/message-create/guild-message/index.ts\n            \n            injectable\n            GuildMessageHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts\n            \n            class\n            GuildAutoDeleteChannelDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts\n            \n            controller\n            GuildAutoDeleteChannelController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts\n            \n            injectable\n            GuildAutoDeleteChannelService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-restricted-channel/guild-restricted-channel.controller.ts\n            \n            controller\n            GuildRestrictedChannelController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/guild-restricted-channel/guild-restricted-channel.service.ts\n            \n            injectable\n            GuildRestrictedChannelService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/dto/restricted-channels.dto.ts\n            \n            class\n            RestrictedChannelDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/dto/settings.dto.ts\n            \n            class\n            SettingsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/events/settings-role-id-changed.event.ts\n            \n            class\n            SettingsChanged\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/guild-settings.controller.ts\n            \n            controller\n            GuildSettingsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/guild-settings.service.ts\n            \n            injectable\n            GuildSettingsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/guild/guild-user/dto/self.dto.ts\n            \n            class\n            SelfDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-user/guild-user.controller.ts\n            \n            controller\n            GuildUserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/guild-user/guild-user.service.ts\n            \n            injectable\n            GuildUserService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/guild/guild.controller.ts\n            \n            controller\n            GuildController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild.service.ts\n            \n            injectable\n            GuildService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/guild/moderation/channel/channel.controller.ts\n            \n            controller\n            ChannelController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            Channel\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            GuildChannelEditOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            PermissionOverwrite\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/guild-member.ts\n            \n            class\n            DiscordGuildMember\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/role.ts\n            \n            class\n            EditRoleData\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/role.ts\n            \n            class\n            RoleResponse\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/role.ts\n            \n            variable\n            roleResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/role.ts\n            \n            variable\n            rolesResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/user.ts\n            \n            class\n            DiscordUser\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/user.ts\n            \n            variable\n            userResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/user.ts\n            \n            variable\n            usersResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            ChannelCleaned\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            SlowmodeDisabled\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            SlowmodeEnabled\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserBanEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserKickEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserPurgeEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserSendDMFailedEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserTimeOutEvent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserTimeOutFailedEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/guild/moderation/role/role.controller.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                        src/tasks/tasks.service.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/self.controller.ts\n            \n            controller\n            SelfController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/self.dto.ts\n            \n            class\n            Guild\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/self.dto.ts\n            \n            class\n            SelfDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/self.service.ts\n            \n            injectable\n            SelfService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/util/decorators/parameter-not-undefined.ts\n            \n            function\n            DearV8ProtectMeFromParametersWithNoneValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-guild-user.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-guild-user.decorator.ts\n            \n            variable\n            RequestGuildUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-user.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-user.decorator.ts\n            \n            variable\n            RequestUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/requires-rank.decorator.ts\n            \n            variable\n            REQUIRED_RANK_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/requires-rank.decorator.ts\n            \n            variable\n            RequiredRank\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/dto/log.entry.dto.ts\n            \n            class\n            LogEntry\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            variable\n            actions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            variable\n            targetTypes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            type alias\n            Action\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            type alias\n            TargetType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/util/exception/channel-not-text-based-exception.ts\n            \n            class\n            ChannelNotTextBasedException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/channel-not-text-based-exception.ts\n            \n            class\n            ChannelNotTextBasedExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/guild-does-not-exist-exception.ts\n            \n            class\n            GuildDoesNotExistException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/guild-does-not-exist-exception.ts\n            \n            class\n            GuildDoesNotExistExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/send-direct-message-to-user-exception.ts\n            \n            class\n            SendDirectMessageToUserException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/send-direct-message-to-user-exception.ts\n            \n            class\n            SendDirectMessageToUserExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/util/functions/channel-utils.ts\n            \n            function\n            cleanTextChannel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/get-attachtment-type.ts\n            \n            function\n            getAttachmentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            modRequestCategorySelect\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            needHelpButton\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            selectGuildMenu\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            variable\n            modRequestMenuId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            variable\n            needHelpButtonId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/functions/plain-to-instance.ts\n            \n            function\n            plainToInstance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/guards/has-required-rank.guard.ts\n            \n            guard\n            HasRequiredRank\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/util/guards/has-required-rank.guard.ts\n            \n            variable\n            InheritedRanks\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/interfaces/event-to-log.ts\n            \n            interface\n            EventToLog\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @discord-nestjs/common : ^5.3.2\n        \n            @discord-nestjs/core : ^5.5.1\n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.5\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.5\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.5\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @prisma/client : ^6.12.0\n        \n            axios : ^1.11.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            discord.js : ^14.18.0\n        \n            jest-mock-extended : ^4.0.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-oauth2 : ^1.7.0\n        \n            rambda : ^10.3.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            type-fest : ^4.41.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            cleanTextChannel   (src/.../channel-utils.ts)\n                        \n                        \n                            DearV8ProtectMeFromParametersWithNoneValue   (src/.../parameter-not-undefined.ts)\n                        \n                        \n                            getAttachmentType   (src/.../get-attachtment-type.ts)\n                        \n                        \n                            modRequestCategorySelect   (src/.../menu-helper.ts)\n                        \n                        \n                            needHelpButton   (src/.../menu-helper.ts)\n                        \n                        \n                            plainToInstance   (src/.../plain-to-instance.ts)\n                        \n                        \n                            selectGuildMenu   (src/.../menu-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/util/functions/channel-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cleanTextChannel\n                        \n                    \n                \n            \n            \n                \ncleanTextChannel(channel: GuildTextBasedChannel, stopCb, filterCb, logger: Logger)\n                \n            \n\n\n\n\n            \n                \n                        Utility function which deletes messages determined by the filterCb in a given channel until the stopCb returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                        GuildTextBasedChannel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GuildTextBasedChannel -- the channel to clean\n\n                                            \n                                        \n                                        \n                                                stopCb\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the callback which gets called to check if we should stop deleting messages\n\n                                            \n                                        \n                                        \n                                                filterCb\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the callback used to filter out messages to delete\n\n                                            \n                                        \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the logger used to log to the apps log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/util/decorators/parameter-not-undefined.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DearV8ProtectMeFromParametersWithNoneValue\n                        \n                    \n                \n            \n            \n                \nDearV8ProtectMeFromParametersWithNoneValue(target: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ClassDecorator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/util/functions/get-attachtment-type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAttachmentType\n                        \n                    \n                \n            \n            \n                \ngetAttachmentType(contentType: string)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to check which type the contentType is,\nused to check the type of a attachment of a message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contentType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string that contains the content type e.g vide/mp4\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AttachmentType\n\n                        \n                            \n                                AttachmentType enum value for the given type\n\n                            \n                \n            \n        \n    \n    src/util/functions/menu-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modRequestCategorySelect\n                        \n                    \n                \n            \n            \n                \nmodRequestCategorySelect(suffix: string)\n                \n            \n\n\n\n\n            \n                \n                        Returns a SelectMenu for the ModRequest functionality\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                suffix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Some string to suffix the the value of each field\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     StringSelectMenuBuilder\n\n                        \n                            \n                                StringSelectMenuBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        needHelpButton\n                        \n                    \n                \n            \n            \n                \nneedHelpButton()\n                \n            \n\n\n\n\n            \n                \n                        Utility function that returns a button builder named \"Hilfe benötigt\"\n\n\n                        \n                            Returns :     ButtonBuilder\n\n                        \n                            \n                                ButtonBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectGuildMenu\n                        \n                    \n                \n            \n            \n                \nselectGuildMenu(guilds, client: Client)\n                \n            \n\n\n\n\n            \n                \n                        Utility function that returns a SelectMenu to choose a guild.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                guilds\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of guildIDs\n\n                                            \n                                        \n                                        \n                                                client\n                                            \n                                                        Client\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Discord Client\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     StringSelectMenuBuilder\n\n                        \n                            \n                                StringSelectMenuBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    src/util/functions/plain-to-instance.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        plainToInstance\n                        \n                    \n                \n            \n            \n                \nplainToInstance(cls: Constructor, plain: Pick)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to convert a plain object to the given type and return a constructed class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cls\n                                            \n                                                            Constructor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A class type, must be a constructor\n\n                                            \n                                        \n                                        \n                                                plain\n                                            \n                                                        Pick\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A plain object that can be the cls type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                the generic T, type of cls\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/initGuildCommand.html":{"url":"classes/initGuildCommand.html","title":"class - initGuildCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  initGuildCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/init-guild.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onInitGuild\n                            \n                            \n                                    \n                                    Async\n                                onInteraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaServer: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/init-guild.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaServer\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onInitGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInitGuild(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/init-guild.command.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onInteraction\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInteraction(interaction: ChannelSelectMenuInteraction | RoleSelectMenuInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/init-guild.command.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                            ChannelSelectMenuInteraction | RoleSelectMenuInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InteractionEvent, On } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ActionRowBuilder,\n  ChannelSelectMenuBuilder,\n  ChannelSelectMenuInteraction,\n  ChannelType,\n  CommandInteraction,\n  MessageActionRowComponentBuilder,\n  RoleSelectMenuBuilder,\n  RoleSelectMenuInteraction,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'setup-bot',\n  description: 'Shows a modal to set/update the bot settings',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class initGuildCommand {\n  constructor(\n    @Inject(PrismaService) private readonly prismaServer: PrismaService,\n  ) {}\n  @Handler()\n  async onInitGuild(@InteractionEvent() interaction: CommandInteraction) {\n    await interaction.deferReply({ ephemeral: true });\n    const settings = await this.prismaServer.settings.findUnique({\n      where: { guildId: interaction.guildId },\n    });\n    const setOpenIntroChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('openIntroChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.openIntroChannelId))\n          .name ?? 'Select the open intro channel',\n      );\n\n    const setIntroChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('IntroChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.introChannelId))\n          .name ?? 'Select the intro channel',\n      );\n    const setMiscChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('miscChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.leaveChannelId))\n          .name ?? 'Select the miscellaneous channel',\n      );\n    const setModChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('modChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.modChannelId)).name ??\n          'Select the mod channel',\n      );\n    const setModRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('modRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.modRoleId)).name ??\n          'Select the mod role',\n      );\n\n    const setAdminRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('adminRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.adminRoleId)).name ??\n          'Select the admin role',\n      );\n\n    const setVerifiedMemberRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('verifiedMemberRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.verifiedMemberRoleId))\n          .name ?? 'Select the verified member role',\n      );\n\n    const setUnverifiedRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('unverifiedMemberRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.unverifiedMemberRoleId))\n          .name ?? 'Select the unverified member role',\n      );\n\n    const roleRows = [\n      setAdminRoleId,\n      setModRoleId,\n      setUnverifiedRoleId,\n      setVerifiedMemberRoleId,\n    ].map((row) =>\n      new ActionRowBuilder().addComponents(\n        row,\n      ),\n    );\n    const channelRows = [\n      setModChannelId,\n      setIntroChannelId,\n      setOpenIntroChannelId,\n      setMiscChannelId,\n    ].map((row) =>\n      new ActionRowBuilder().addComponents(\n        row,\n      ),\n    );\n\n    Promise.all([\n      interaction.followUp({\n        ephemeral: true,\n        content: 'Configure the role settings below',\n        components: [...roleRows],\n      }),\n      interaction.followUp({\n        ephemeral: true,\n        content: 'Configure the channel settings below',\n        components: [...channelRows],\n      }),\n    ]);\n  }\n\n  @On('interactionCreate')\n  async onInteraction(\n    interaction: ChannelSelectMenuInteraction | RoleSelectMenuInteraction,\n  ) {\n    if (\n      !(\n        interaction.customId != undefined &&\n        interaction.customId.endsWith('-setup') &&\n        interaction.isAnySelectMenu()\n      )\n    )\n      return;\n    await interaction.deferReply({ ephemeral: true });\n    if (interaction.isChannelSelectMenu()) {\n      const guildId = interaction.guildId;\n      const channelId = interaction.values[0];\n      switch (interaction.customId) {\n        case 'openIntroChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { openIntroChannelId: channelId },\n          });\n          break;\n        case 'IntroChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { introChannelId: channelId },\n          });\n          break;\n        case 'miscChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { leaveChannelId: channelId },\n          });\n          break;\n        case 'modChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { modChannelId: channelId },\n          });\n          break;\n      }\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } else if (interaction.isRoleSelectMenu()) {\n      const guildId = interaction.guildId;\n      const roleId = interaction.values[0];\n      switch (interaction.customId) {\n        case 'modRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { modRoleId: roleId },\n          });\n          break;\n        case 'adminRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { adminRoleId: roleId },\n          });\n          break;\n        case 'verifiedMemberRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { verifiedMemberRoleId: roleId },\n          });\n          break;\n        case 'unverifiedMemberRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { unverifiedMemberRoleId: roleId },\n          });\n          break;\n      }\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\nExample :                        Preamble  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\nExample :                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\nExample :a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\nExample :a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\nExample :a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nRemote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\nExample :                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\nExample :\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\nhttps://www.gnu.org/licenses/.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuditLogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BotModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildAutoDeleteChannelModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildRestrictedChannelModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildSettingsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildUserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        JwtAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ModerationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuditLogModule\n\n\n\ncluster_AuditLogModule_exports\n\n\n\ncluster_AuditLogModule_providers\n\n\n\ncluster_BotModule\n\n\n\ncluster_BotModule_providers\n\n\n\ncluster_GuildAutoDeleteChannelModule\n\n\n\ncluster_GuildAutoDeleteChannelModule_exports\n\n\n\ncluster_GuildAutoDeleteChannelModule_providers\n\n\n\ncluster_GuildModule\n\n\n\ncluster_GuildModule_imports\n\n\n\ncluster_GuildModule_exports\n\n\n\ncluster_GuildModule_providers\n\n\n\ncluster_GuildRestrictedChannelModule\n\n\n\ncluster_GuildRestrictedChannelModule_exports\n\n\n\ncluster_GuildSettingsModule\n\n\n\ncluster_GuildSettingsModule_exports\n\n\n\ncluster_GuildUserModule\n\n\n\ncluster_GuildUserModule_exports\n\n\n\ncluster_JwtAuthModule\n\n\n\ncluster_JwtAuthModule_exports\n\n\n\ncluster_JwtAuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nBotModule\n\nBotModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBotModule->AppModule\n\n\n\n\n\nGuildModule\n\nGuildModule\n\nAppModule -->\n\nGuildModule->AppModule\n\n\n\n\n\nGuildService \n\nGuildService \n\nGuildService  -->\n\nGuildModule->GuildService \n\n\n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nAppModule -->\n\nJwtAuthModule->AppModule\n\n\n\n\n\nJwtAuthService \n\nJwtAuthService \n\nJwtAuthService  -->\n\nJwtAuthModule->JwtAuthService \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nSelfService \n\nSelfService \n\nSelfService  -->\n\nUserModule->SelfService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nBotModule -->\n\nPrismaService->BotModule\n\n\n\nGuildModule -->\n\nPrismaService->GuildModule\n\n\n\nJwtAuthModule -->\n\nPrismaService->JwtAuthModule\n\n\n\nTasksModule -->\n\nPrismaService->TasksModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nAuditLogModule\n\nAuditLogModule\n\nAuditLogModule -->\n\nPrismaService->AuditLogModule\n\n\n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule -->\n\nPrismaService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule -->\n\nPrismaService->GuildRestrictedChannelModule\n\n\n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildSettingsModule -->\n\nPrismaService->GuildSettingsModule\n\n\n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildUserModule -->\n\nPrismaService->GuildUserModule\n\n\n\n\n\nModerationModule\n\nModerationModule\n\nModerationModule -->\n\nPrismaService->ModerationModule\n\n\n\n\n\nAuditLogService \n\nAuditLogService \n\nAuditLogService  -->\n\nAuditLogModule->AuditLogService \n\n\n\nModerationModule -->\n\nAuditLogModule->ModerationModule\n\n\n\n\n\nAuditEvents\n\nAuditEvents\n\nAuditLogModule -->\n\nAuditEvents->AuditLogModule\n\n\n\n\n\nAuditLogService\n\nAuditLogService\n\nAuditLogModule -->\n\nAuditLogService->AuditLogModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nBotModule -->\n\nGuildRestrictedChannelService->BotModule\n\n\n\nGuildModule -->\n\nGuildRestrictedChannelService->GuildModule\n\n\n\nTasksModule -->\n\nGuildRestrictedChannelService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildRestrictedChannelService->GuildAutoDeleteChannelModule\n\n\n\nGuildRestrictedChannelModule -->\n\nGuildRestrictedChannelService->GuildRestrictedChannelModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nBotModule -->\n\nGuildService->BotModule\n\n\n\nGuildModule -->\n\nGuildService->GuildModule\n\n\n\nTasksModule -->\n\nGuildService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nBotModule -->\n\nGuildSettingsService->BotModule\n\n\n\nTasksModule -->\n\nGuildSettingsService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildSettingsService->GuildAutoDeleteChannelModule\n\n\n\nGuildSettingsModule -->\n\nGuildSettingsService->GuildSettingsModule\n\n\n\nGuildUserModule -->\n\nGuildSettingsService->GuildUserModule\n\n\n\n\n\nGuildAutoDeleteChannelService \n\nGuildAutoDeleteChannelService \n\nGuildModule -->\n\nGuildAutoDeleteChannelModule->GuildModule\n\n\n\nGuildAutoDeleteChannelService  -->\n\nGuildAutoDeleteChannelModule->GuildAutoDeleteChannelService \n\n\n\n\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildAutoDeleteChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nTasksModule -->\n\nGuildUserService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildUserService->GuildAutoDeleteChannelModule\n\n\n\nGuildUserModule -->\n\nGuildUserService->GuildUserModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nTasksService->GuildAutoDeleteChannelModule\n\n\n\nGuildModule -->\n\nGuildRestrictedChannelModule->GuildModule\n\n\n\n\n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService  -->\n\nGuildRestrictedChannelModule->GuildRestrictedChannelService \n\n\n\nGuildModule -->\n\nGuildSettingsModule->GuildModule\n\n\n\n\n\nGuildSettingsService \n\nGuildSettingsService \n\nGuildSettingsService  -->\n\nGuildSettingsModule->GuildSettingsService \n\n\n\nGuildModule -->\n\nGuildUserModule->GuildModule\n\n\n\n\n\nGuildUserService \n\nGuildUserService \n\nGuildUserService  -->\n\nGuildUserModule->GuildUserService \n\n\n\nGuildModule -->\n\nModerationModule->GuildModule\n\n\n\n\n\nDmMessageHandler\n\nDmMessageHandler\n\nGuildModule -->\n\nDmMessageHandler->GuildModule\n\n\n\n\n\nGuildMemberEvents\n\nGuildMemberEvents\n\nGuildModule -->\n\nGuildMemberEvents->GuildModule\n\n\n\n\n\nGuildMessageHandler\n\nGuildMessageHandler\n\nGuildModule -->\n\nGuildMessageHandler->GuildModule\n\n\n\n\n\nJwtAuthService\n\nJwtAuthService\n\nJwtAuthModule -->\n\nJwtAuthService->JwtAuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nJwtAuthModule -->\n\nJwtAuthStrategy->JwtAuthModule\n\n\n\n\n\nRefreshJwtStrategy\n\nRefreshJwtStrategy\n\nJwtAuthModule -->\n\nRefreshJwtStrategy->JwtAuthModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nJwtAuthModule -->\n\nSelfService->JwtAuthModule\n\n\n\nUserModule -->\n\nSelfService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    55 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : A discord bot for a community with special needs hence the name Mega-Transformers-Bot. Written in Typescript using Nestjs, discordjs and React. It also features a API that is used by the frontend but can also be used standalone\n        \n            License : AGPL-3.0-only\n        \n            Author : 89q12\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (src/.../log.entry.dto.ts)\n                        \n                        \n                            TargetType   (src/.../log.entry.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/dto/log.entry.dto.ts\n    \n    \n        \n            \n                \n                    \n                    Action\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TargetType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            actions   (src/.../log.entry.dto.ts)\n                        \n                        \n                            BOT_EVENT_HANDLER_NAME   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            BOT_EVENT_KEY   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            BotEvent   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            ChannelIdGuard   (src/.../message-in-channel.guard.ts)\n                        \n                        \n                            CommandToExecute   (src/.../user-to-user.dto.ts)\n                        \n                        \n                            InheritedRanks   (src/.../has-required-rank.guard.ts)\n                        \n                        \n                            logger   (src/.../tasks.service.ts)\n                        \n                        \n                            logger   (src/.../request-guild-user.decorator.ts)\n                        \n                        \n                            logger   (src/.../request-user.decorator.ts)\n                        \n                        \n                            logger   (src/.../role.controller.ts)\n                        \n                        \n                            modRequestMenuId   (src/.../menu-helper.ts)\n                        \n                        \n                            needHelpButtonId   (src/.../menu-helper.ts)\n                        \n                        \n                            ReactionChannelIdGuard   (src/.../reaction-in-channel.guard.ts)\n                        \n                        \n                            ReactionEmoteGuard   (src/.../reaction-emote.guard.ts)\n                        \n                        \n                            RequestGuildUser   (src/.../request-guild-user.decorator.ts)\n                        \n                        \n                            RequestUser   (src/.../request-user.decorator.ts)\n                        \n                        \n                            REQUIRED_RANK_KEY   (src/.../requires-rank.decorator.ts)\n                        \n                        \n                            RequiredRank   (src/.../requires-rank.decorator.ts)\n                        \n                        \n                            roleResponseSchema   (src/.../role.ts)\n                        \n                        \n                            rolesResponseSchema   (src/.../role.ts)\n                        \n                        \n                            targetTypes   (src/.../log.entry.dto.ts)\n                        \n                        \n                            userResponseSchema   (src/.../user.ts)\n                        \n                        \n                            usersResponseSchema   (src/.../user.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/dto/log.entry.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'USER_JOINED',\n  'WARN',\n  'ERROR',\n  'USER_LEFT',\n  'USER_BANNED',\n  'USER_UNBANNED',\n  'USER_UPDATED',\n  'GUILD_UPDATED',\n  'INVALID_REQUEST',\n  'INVITE_CREATED',\n  'INVITE_DELETED',\n  'MESSAGE_DELETED',\n  'REACTION_ADDED',\n  'REACTION_REMOVED',\n  'ROLE_CREATED',\n  'ROLE_DELETED',\n  'ROLE_UPDATED',\n  'CHANNEL_CREATED',\n  'CHANNEL_DELETED',\n  'CHANNEL_UPDATED',\n  'WEBHOOKS_UPDATED',\n  'TIMEOUT_EXPIRED',\n  'TIMEOUT',\n  'KICK',\n  'BAN',\n] as const\n                    \n                \n\n            \n                \n                    All possible actions that can occur\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'ERROR',\n  'WARN',\n  'USER',\n  'GUILD',\n  'INVALID_REQUEST',\n  'INVITE',\n  'MESSAGE',\n  'ROLE',\n  'CHANNEL',\n] as const\n                    \n                \n\n            \n                \n                    List of the targets an event can have\n\n                \n            \n\n        \n    \n\n    src/bot/decorators/bot-event.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BOT_EVENT_HANDLER_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__bot_event_handler__'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BOT_EVENT_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__bot_event__'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BotEvent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...event: Array) =>\n  SetMetadata(BOT_EVENT_KEY, event)\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/message-in-channel.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ChannelIdGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (channelId: string) => {\n  class ChannelIdGuardMixin implements CanActivate {\n    async canActivate(context: ExecutionContext) {\n      const message = context.getArgByIndex(0);\n      if (\n        !(message.message instanceof Message) ||\n        !(message.message as Message).inGuild()\n      ) {\n        return false;\n      }\n      return message.channelId === channelId;\n    }\n  }\n\n  const guard = mixin(ChannelIdGuardMixin);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/bot/dto/user-to-user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommandToExecute\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChoiceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  'Einer Person einen Kaffee geben': 'coffee',\n  'Einer Person einen Kuchen geben': 'cake',\n  'Einer Person ein Headpat geben': 'headpat',\n  'Eine Person umarmen': 'hug',\n}\n                    \n                \n\n\n        \n    \n\n    src/util/guards/has-required-rank.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InheritedRanks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  OWNER: ['ADMIN', 'MOD', 'MEMBER'],\n  ADMIN: ['MOD', 'MEMBER'],\n  MOD: ['MEMBER'],\n  MEMBER: [],\n  NEW: [],\n}\n                    \n                \n\n            \n                \n                    Map of ranks that are inherited by any given rank,\nmeaning their lower ranks e.g MOD has MEMBER.\nBut MEMBER has 0 since its the lowest rank a member can have.\n\n                \n            \n\n        \n    \n\n    src/tasks/tasks.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('TaskService')\n                    \n                \n\n\n        \n    \n\n    src/util/decorators/request-guild-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RequestGuildUser')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequestGuildUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx\n      .switchToHttp()\n      .getRequest();\n    const user = request.user;\n\n    if (!user) {\n      logger.error(`${ctx.getHandler().toString()} has a parameter with\n      annotation RequestGuildUser but is NOT guarded by ${\n        JwtAuthGuard.name\n      } AND the request path ${\n        request.path\n      } is not prefixed by \"/guild/:guildId/\n        Please use ${JwtAuthGuard.name} if you want to access a UserId`);\n      throw new InternalServerErrorException();\n    }\n    return user;\n  },\n)\n                    \n                \n\n            \n                \n                    A param decorator to check whether a GuildUser is set on a request,\nif not the route is not guarded by JWT but should be.\nIf the route is guarded it returns the user\n\n                \n            \n\n        \n    \n\n    src/util/decorators/request-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RequestUser')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequestUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const userId = ctx.switchToHttp().getRequest()\n      .user.userId;\n\n    if (!userId) {\n      logger.error(`${ctx.getHandler().toString()} has a parameter with\n    annotation RequestUser but is NOT guarded by ${JwtAuthGuard.name}.\n      Please use ${JwtAuthGuard.name} if you want to access a UserId`);\n      throw new InternalServerErrorException();\n    }\n    return userId;\n  },\n)\n                    \n                \n\n            \n                \n                    A param decorator to check whether a user is set on a request,\nif not the route is not guarded by JWT but should be.\nIt returns the userID.\n\n                \n            \n\n        \n    \n\n    src/guild/moderation/role/role.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RoleController')\n                    \n                \n\n\n        \n    \n\n    src/util/functions/menu-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modRequestMenuId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'modRequestMenu'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        needHelpButtonId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'createTicket'\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/reaction-in-channel.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReactionChannelIdGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (channelId: string) => {\n  class ChannelIdGuardMixin implements CanActivate {\n    async canActivate(context: ExecutionContext) {\n      const reaction = context.getArgByIndex(0);\n      if (reaction.partial) await reaction.fetch();\n      const message = reaction.message;\n      if (\n        message.message instanceof Message &&\n        !(message.message as Message).inGuild()\n      ) {\n        return false;\n      }\n      return message.channelId === channelId;\n    }\n  }\n\n  const guard = mixin(ChannelIdGuardMixin);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/reaction-emote.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReactionEmoteGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (emotes: string[]) => {\n  class ReactionEmote implements CanActivate {\n    canActivate(context: ExecutionContext): boolean {\n      const reaction = context.getArgByIndex(0);\n      if (\n        reaction instanceof MessageReaction &&\n        emotes.includes((reaction as MessageReaction).emoji.name)\n      ) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  const guard = mixin(ReactionEmote);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/util/decorators/requires-rank.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUIRED_RANK_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__rank__'\n                    \n                \n\n            \n                \n                    The constant used in the RequiredRank decorator to store the rank for a function/object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequiredRank\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (rank: Rank) =>\n  SetMetadata(REQUIRED_RANK_KEY, rank)\n                    \n                \n\n            \n                \n                    Sets the required rank for a route or controller\n\n                \n            \n\n        \n    \n\n    src/guild/moderation/dto/role.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roleResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rolesResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/guild/moderation/dto/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    username: { type: 'string' },\n    discriminator: { type: 'string' },\n    avatarURL: { type: 'string' },\n    displayAvatarURL: { type: 'string' },\n    bannerURL: { type: 'string' },\n    bot: { type: 'boolean' },\n    system: { type: 'boolean' },\n    flags: { type: 'number' },\n    createdTimestamp: { type: 'number' },\n    accentColor: { type: 'number' },\n    hexAccentColor: { type: 'string' },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usersResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'array',\n  items: userResponseSchema,\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
