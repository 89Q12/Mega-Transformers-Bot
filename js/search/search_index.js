var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddRoleCommand.html",[0,0.25,1,3.541]],["body/classes/AddRoleCommand.html",[0,0.287,1,5.319,2,0.891,3,0.1,4,0.089,5,0.089,6,6.498,7,4.46,8,0.292,9,0.857,10,1.611,11,6.61,12,1.194,13,2.495,14,2.963,15,4.062,16,2.22,17,0.382,18,5.055,19,0.812,20,0.009,21,0.648,22,0.332,23,0.682,24,5.055,25,4.309,26,0.913,27,3.401,28,5.055,29,3.053,30,0.638,31,0.161,32,3.263,33,2.485,34,2.905,35,0.936,36,1.03,37,1.472,38,0.415,39,0.959,40,1.667,41,4.068,42,1.801,43,5.055,44,4.46,45,2.682,46,2.905,47,2.682,48,1.879,49,0.112,50,1.667,51,2.262,52,5.055,53,5.055,54,3.775,55,2.585,56,4.46,57,4.46,58,1.08,59,5.055,60,0.982,61,4.376,62,1.275,63,4.46,64,4.376,65,1.347,66,4.631,67,1.925,68,5.319,69,5.055,70,2.927,71,5.055,72,1.755,73,0.71,74,2.585,75,5.055,76,2.067,77,1.508,78,4.46,79,0.007,80,0.007]],["title/controllers/AppController.html",[81,1.488,82,3.286]],["body/controllers/AppController.html",[0,0.383,3,0.134,4,0.119,5,0.119,20,0.009,31,0.167,38,0.554,49,0.149,79,0.008,80,0.008,81,2.674,82,5.904,83,2.469,84,5.952,85,3.219,86,3.45,87,5.429,88,3.721,89,5.904,90,2.536,91,3.877]],["title/modules/AppModule.html",[92,1.527,93,3.286]],["body/modules/AppModule.html",[0,0.232,3,0.081,4,0.072,5,0.072,14,2.357,16,2.221,20,0.009,31,0.177,35,0.758,36,1.168,37,1.193,38,0.337,39,0.777,48,1.165,49,0.09,77,2.138,79,0.006,80,0.006,82,4.94,83,2.098,92,2.841,93,6.639,94,1.892,95,1.892,96,2.023,97,2.023,98,1.892,99,3.156,100,1.892,101,3.615,102,3.615,103,3.615,104,5.475,105,5.62,106,5.475,107,5.475,108,5.475,109,5.475,110,2.83,111,2.023,112,1.499,113,4.097,114,3.51,115,5.734,116,5.019,117,2.713,118,4.097,119,4.097,120,4.097,121,4.097,122,4.097,123,2.174,124,4.097,125,5.734,126,4.097,127,4.097,128,4.097,129,3.297,130,3.796,131,4.097,132,3.796,133,5.734,134,1.955,135,3.615,136,3.796,137,4.097,138,4.097,139,2.26,140,2.26,141,3.796,142,2.023,143,3.615,144,4.097,145,4.097,146,3.615,147,4.097,148,4.097,149,4.097,150,4.097,151,4.097,152,4.097,153,3.615,154,4.097,155,4.097,156,4.097,157,4.097,158,4.097,159,4.097,160,4.097,161,4.097,162,4.097,163,4.097,164,4.097,165,4.097,166,4.097,167,4.097,168,5.734,169,4.097,170,4.097,171,4.097,172,4.097,173,4.097,174,4.097,175,4.097,176,4.097,177,4.097,178,4.097,179,4.097,180,4.097,181,4.097,182,4.097,183,4.097,184,4.097,185,3.615,186,4.097,187,4.097,188,4.097,189,4.097,190,4.097,191,4.097,192,6.895,193,3.615,194,4.097,195,3.615,196,1.137,197,2.459,198,4.097]],["title/injectables/AppService.html",[109,3.083,199,0.963]],["body/injectables/AppService.html",[0,0.335,3,0.117,4,0.104,5,0.104,8,0.341,9,0.946,12,1.318,17,0.457,19,0.896,20,0.009,21,0.642,22,0.296,23,0.753,26,1.067,30,0.745,31,0.157,37,1.72,38,0.485,49,0.13,50,1.489,79,0.007,80,0.007,109,5.112,139,3.257,140,3.257,199,1.596,200,2.347,201,5.21,202,1.635,203,2.798,204,7.297,205,5.905,206,5.204,207,7.297,208,4.591,209,7.297,210,6.987,211,5.905,212,4.137,213,2.727,214,2.642,215,2.415,216,1.93,217,7.297,218,3.482,219,5.905,220,2.486,221,3.91,222,1.72,223,5.905]],["title/controllers/AuditLogController.html",[81,1.488,224,3.286]],["body/controllers/AuditLogController.html",[0,0.287,3,0.1,4,0.089,5,0.089,8,0.292,9,0.857,10,1.611,12,0.913,17,0.292,19,0.621,20,0.009,21,0.445,22,0.254,23,0.521,26,0.913,30,0.638,31,0.174,37,1.472,38,0.415,42,1.801,49,0.112,50,1.275,58,1.08,65,1.347,73,1.035,79,0.007,80,0.007,81,2.236,83,1.85,85,2.412,86,2.585,88,2.788,91,2.905,220,2.128,222,1.472,224,4.936,225,4.46,226,7.365,227,5.055,228,4.309,229,5.473,230,4.914,231,2.963,232,6.892,233,5.055,234,2.355,235,2.067,236,7.365,237,4.46,238,3.347,239,4.46,240,4.46,241,4.876,242,4.46,243,3.775,244,5.055,245,5.055,246,3.034,247,3.775,248,3.775,249,4.232,250,4.634,251,4.068,252,2.585,253,3.034,254,3.034,255,3.18,256,3.347,257,3.968,258,3.034,259,2.067,260,3.541,261,5.055,262,5.055,263,3.18,264,5.055,265,5.055,266,5.055,267,5.055,268,4.46,269,5.055,270,4.46,271,5.055,272,1.953,273,5.055,274,5.055,275,5.055,276,3.034,277,5.055,278,3.541,279,5.055,280,2.128,281,5.055,282,3.775,283,5.055,284,5.055]],["title/classes/AuditLogFilterDto.html",[0,0.25,229,3.083]],["body/classes/AuditLogFilterDto.html",[0,0.387,2,0.937,3,0.106,4,0.094,5,0.094,8,0.307,17,0.46,20,0.009,22,0.436,23,0.896,26,1.439,31,0.15,49,0.117,73,1.258,79,0.007,80,0.007,90,1.999,202,1.53,220,3.468,229,4.784,249,4.844,250,5.303,251,4.278,285,7.266,286,4.69,287,7.545,288,7.545,289,7.025,290,4.78,291,5.316,292,5.316,293,5.578,294,4.072,295,6.829,296,5.316,297,5.316,298,5.316,299,5.316,300,3.52,301,4.543,302,3.601,303,2.378,304,5.77,305,4.522,306,4.784,307,3.492,308,5.316,309,5.316]],["title/modules/AuditLogModule.html",[92,1.527,136,2.914]],["body/modules/AuditLogModule.html",[0,0.331,3,0.116,4,0.103,5,0.103,16,2.453,20,0.009,31,0.172,35,1.08,36,1.189,38,0.48,40,1.924,49,0.129,79,0.007,80,0.007,83,2.651,92,2.734,94,2.695,95,2.695,96,2.881,97,2.881,98,2.695,99,3.759,100,3.638,110,3.576,111,2.881,112,2.135,114,3.097,123,3.097,136,5.975,224,5.883,241,6.003,242,5.149,310,5.149,311,5.149,312,5.149,313,6.947,314,5.836,315,5.836,316,5.836,317,3.219]],["title/injectables/AuditLogService.html",[199,0.963,241,2.914]],["body/injectables/AuditLogService.html",[0,0.269,3,0.094,4,0.084,5,0.084,8,0.274,9,0.822,10,1.787,12,0.857,16,2.321,17,0.412,19,0.876,20,0.009,21,0.628,22,0.398,23,0.736,30,0.8,31,0.151,37,1.381,38,0.39,40,1.563,49,0.105,50,1.196,58,1.354,60,0.921,62,1.598,65,1.552,73,1.003,77,2.489,79,0.006,80,0.006,199,1.386,200,1.884,216,1.676,220,1.996,228,3.936,229,5.336,230,2.983,231,2.258,232,4.183,239,4.183,240,4.183,241,4.195,249,4.101,250,4.489,268,4.183,270,4.183,272,2.448,276,4.572,278,4.439,280,2.668,282,4.732,318,4.183,319,3.641,320,6.296,321,4.742,322,4.742,323,6.336,324,5.336,325,4.742,326,4.742,327,2.749,328,7.136,329,5.59,330,4.742,331,4.742,332,4.742,333,4.742,334,4.742,335,4.742,336,4.742,337,4.742,338,4.742,339,4.742,340,5.59,341,4.742,342,2.615,343,4.742,344,6.336,345,6.336,346,3.816,347,4.742,348,3.005,349,4.742,350,4.742,351,4.742,352,4.742,353,4.183,354,4.742,355,3.322,356,4.183,357,4.183,358,4.742,359,4.742,360,2.668,361,4.183,362,4.742]],["title/interfaces/BotEvent.html",[363,2.529,364,3.083]],["body/interfaces/BotEvent.html",[3,0.13,4,0.116,5,0.116,8,0.378,9,1.007,17,0.378,19,0.803,20,0.009,21,0.575,22,0.328,23,0.675,30,0.825,31,0.13,39,1.24,49,0.144,79,0.008,80,0.008,214,2.926,234,2.766,363,3.758,364,5.438,365,4.581,366,6.848,367,5.769,368,7.303,369,6.539,370,7.554,371,6.539,372,7.762,373,6.539]],["title/modules/BotModule.html",[92,1.527,104,3.083]],["body/modules/BotModule.html",[0,0.287,3,0.131,4,0.09,5,0.09,16,2.365,20,0.009,31,0.18,35,0.937,36,1.032,38,0.416,40,1.669,49,0.112,79,0.007,80,0.007,92,2.559,94,2.338,95,2.338,96,2.5,97,2.5,98,2.338,99,3.518,100,3.056,104,6.229,110,3.267,111,2.5,112,1.853,114,2.687,123,3.511,134,2.416,317,2.793,374,4.467,375,4.467,376,4.589,377,4.254,378,3.97,379,5.063,380,4.942,381,5.063,382,2.182,383,2.793,384,4.942,385,5.063,386,4.636,387,4.636,388,5.063,389,5.063,390,3.803,391,2.687,392,3.185,393,4.942,394,5.063,395,5.063,396,4.942,397,5.063,398,5.063,399,4.942,400,6.617,401,6.617,402,4.942,403,3.547,404,3.782,405,1.549,406,4.942,407,5.063,408,5.063,409,3.547,410,4.942,411,5.063,412,4.942,413,5.063,414,5.063]],["title/classes/Channel.html",[0,0.25,415,1.451]],["body/classes/Channel.html",[0,0.34,2,0.5,3,0.056,4,0.05,5,0.05,8,0.164,17,0.476,20,0.009,21,0.628,22,0.46,23,0.842,26,1.49,31,0.106,39,0.538,48,2.382,49,0.063,65,1.087,72,2.803,73,1.263,79,0.004,80,0.004,90,1.066,196,1.213,202,0.98,216,0.75,230,2.751,231,3.071,259,3.372,280,1.194,290,1.702,300,1.877,301,4.504,302,3.854,303,1.269,342,3.574,348,2.883,360,2.526,405,1.834,415,2.894,416,2.118,417,3.357,418,4.54,419,4.295,420,2.729,421,5.742,422,4.295,423,3.986,424,3.986,425,3.533,426,4.295,427,5.742,428,5.998,429,2.895,430,2.513,431,5.028,432,3.519,433,2.836,434,2.836,435,5.292,436,0.912,437,2.895,438,2.836,439,3.519,440,2.836,441,4.373,442,3.063,443,3.519,444,2.836,445,4.373,446,3.776,447,4.48,448,2.836,449,3.519,450,2.836,451,2.883,452,2.836,453,2.625,454,2.836,455,3.986,456,3.519,457,2.836,458,4.202,459,2.836,460,3.533,461,3.519,462,2.836,463,2.836,464,3.266,465,3.063,466,3.519,467,3.357,468,2.836,469,3.519,470,3.063,471,2.751,472,2.836,473,3.519,474,2.836,475,2.836,476,2.836,477,4.147,478,4.295,479,3.357,480,2.282,481,2.282,482,4.489,483,2.751,484,3.519,485,4.295,486,2.033,487,2.282,488,2.282,489,2.895,490,1.269,491,2.282,492,2.118,493,1.784,494,2.282,495,1.877,496,2.282,497,2.282,498,1.987,499,2.282]],["title/classes/ChannelCleaned.html",[0,0.25,500,2.914]],["body/classes/ChannelCleaned.html",[0,0.391,2,0.78,3,0.088,4,0.078,5,0.078,8,0.256,9,0.784,12,1.245,17,0.473,19,0.742,20,0.009,21,0.532,22,0.411,23,0.624,30,0.559,31,0.12,38,0.364,49,0.152,65,1.76,67,2.386,73,1.277,79,0.006,80,0.006,196,1.228,202,1.355,203,2.771,213,3.42,218,3.699,220,1.863,231,3.103,420,2.263,436,1.437,451,3.118,467,3.804,495,4.902,500,4.561,501,3.305,502,2.265,503,5.739,504,4.483,505,6.593,506,3.209,507,3.63,508,6.047,509,4.425,510,4.425,511,4.425,512,4.425,513,3.929,514,4.425,515,2.263,516,4.004,517,6.118,518,4.414,519,6.44,520,4.867,521,4.867,522,3.8,523,4.004,524,3.305,525,4.867,526,3.561,527,3.475,528,3.305]],["title/controllers/ChannelController.html",[81,1.488,529,3.286]],["body/controllers/ChannelController.html",[0,0.168,3,0.059,4,0.052,5,0.052,8,0.171,9,0.587,10,1.82,12,0.536,14,1.955,17,0.382,19,0.812,20,0.009,21,0.582,22,0.421,23,0.682,26,1.195,30,0.835,31,0.162,33,1.701,35,0.549,36,0.604,37,0.864,38,0.244,39,0.562,42,1.057,48,0.843,49,0.065,50,1.141,58,1.172,60,1.452,62,2.003,65,1.695,67,1.925,73,1.246,77,0.885,79,0.005,80,0.005,81,1.003,83,1.085,85,1.415,86,1.516,88,1.636,90,1.115,91,1.704,139,1.636,140,1.636,196,0.823,202,0.664,203,1.531,206,2.847,208,1.866,216,1.749,221,1.963,222,1.318,231,1.955,234,2.784,235,1.213,252,1.516,253,1.78,254,1.78,255,1.866,256,1.963,257,2.716,258,1.78,259,1.213,260,2.077,263,4.16,329,5.417,348,2.585,360,2.31,403,3.844,415,2.859,420,2.314,424,2.215,436,1.719,467,3.452,483,1.866,486,1.442,489,4.065,493,1.866,500,1.963,503,5.078,504,4.346,516,1.963,517,2.215,523,1.963,524,2.215,529,3.379,530,2.616,531,1.704,532,5.487,533,5.487,534,5.487,535,5.487,536,5.487,537,2.965,538,2.965,539,3.642,540,2.965,541,2.965,542,2.965,543,5.487,544,2.965,545,4.525,546,2.965,547,2.965,548,2.965,549,3.642,550,4.941,551,4.941,552,4.941,553,2.965,554,2.965,555,2.386,556,6.149,557,2.965,558,2.965,559,2.965,560,2.965,561,4.302,562,1.963,563,2.215,564,4.525,565,5.608,566,4.416,567,2.386,568,3.992,569,2.965,570,2.996,571,2.965,572,3.379,573,2.215,574,2.616,575,2.965,576,2.077,577,2.215,578,2.077,579,2.077,580,1.704,581,2.965,582,2.965,583,2.215,584,2.965,585,5.321,586,3.379,587,4.16,588,4.586,589,2.6,590,4.525,591,2.965,592,2.965,593,6.14,594,2.965,595,2.965,596,5.487,597,2.965,598,2.965,599,2.965,600,3.799,601,3.642,602,2.965,603,2.965,604,2.965,605,2.965,606,2.965,607,2.077,608,1.78,609,2.965,610,2.616,611,2.386,612,2.386,613,2.965,614,2.965,615,2.965,616,2.616,617,1.573,618,2.965,619,2.965,620,2.965]],["title/classes/ChannelNotTextBasedException.html",[0,0.25,576,3.083]],["body/classes/ChannelNotTextBasedException.html",[0,0.406,2,1.011,3,0.114,4,0.101,5,0.101,12,1.036,17,0.331,19,0.704,20,0.009,21,0.505,22,0.288,23,0.592,31,0.142,38,0.471,49,0.158,60,1.392,70,2.848,72,2.487,73,1.098,76,2.345,79,0.007,80,0.007,228,3.163,415,2.362,486,1.347,502,1.754,576,5.475,577,5.351,578,5.475,579,5.475,580,4.491,589,4.118,621,3.608,622,4.917,623,5.351,624,3.537,625,6.322,626,4.615,627,6.322,628,4.508,629,4.508,630,3.797,631,4.917,632,3.163,633,5.06,634,2.737,635,4.018,636,4.301,637,2.831,638,5.06,639,4.283,640,3.797,641,3.608,642,3.608,643,3.797,644,3.797,645,3.797,646,3.797,647,5.06]],["title/classes/ChannelNotTextBasedExceptionFilter.html",[0,0.25,639,3.286]],["body/classes/ChannelNotTextBasedExceptionFilter.html",[0,0.4,2,0.987,3,0.111,4,0.099,5,0.099,8,0.323,9,0.915,17,0.323,19,0.687,20,0.009,21,0.492,22,0.281,23,0.577,30,0.706,31,0.14,38,0.46,49,0.156,60,1.371,70,2.223,72,1.942,73,0.786,76,3.16,79,0.007,80,0.007,228,3.892,415,1.845,486,1.314,502,2.158,576,5.685,577,5.269,578,5.414,579,5.414,580,4.663,589,3.215,621,3.52,622,4.862,623,4.179,624,2.762,625,4.936,627,4.936,628,4.862,629,5.105,630,3.704,631,5.105,632,3.086,633,4.936,634,3.367,635,4.943,636,4.871,637,3.483,638,4.936,639,5.269,640,4.671,641,4.862,642,3.52,643,3.704,644,3.704,645,3.704,646,3.704,647,4.936,648,5.595]],["title/classes/CleanWfpMember.html",[0,0.25,406,3.286]],["body/classes/CleanWfpMember.html",[0,0.276,2,0.858,3,0.097,4,0.086,5,0.086,8,0.281,9,0.836,10,1.582,12,0.879,17,0.372,19,0.791,20,0.009,21,0.739,22,0.323,23,0.665,25,4.245,26,0.879,27,3.338,29,2.977,30,0.614,31,0.153,32,3.182,34,2.796,35,0.901,36,0.991,37,1.417,38,0.4,39,0.923,45,2.582,46,2.796,47,2.582,48,1.832,49,0.107,50,1.227,55,3.296,60,1.252,62,1.823,77,1.923,79,0.006,80,0.006,215,3.147,216,1.287,360,2.714,377,4.207,406,4.814,409,3.409,471,3.061,486,1.143,490,2.177,539,3.915,649,6.377,650,4.293,651,6.446,652,4.293,653,4.865,654,4.865,655,4.865,656,3.409,657,4.055,658,2.921,659,5.687,660,5.391,661,5.301,662,4.293,663,3.634,664,4.293,665,3.409,666,3.915,667,4.865,668,4.865,669,3.221,670,3.42,671,4.865,672,4.865,673,3.221,674,4.865,675,4.814,676,4.865,677,4.865,678,4.865,679,3.915,680,3.634,681,4.422,682,4.865,683,4.865,684,4.865,685,3.915,686,4.865,687,3.409,688,4.814,689,4.865,690,5.187,691,4.865,692,5.687,693,5.687,694,5.187,695,5.687,696,4.293,697,4.293,698,3.409,699,3.061]],["title/classes/CommandValidationFilter.html",[0,0.25,700,3.083]],["body/classes/CommandValidationFilter.html",[0,0.326,2,1.013,3,0.114,4,0.102,5,0.102,8,0.332,9,0.931,10,1.711,17,0.332,19,0.705,20,0.009,21,0.631,22,0.288,23,0.593,29,2.654,30,0.725,31,0.155,35,1.064,38,0.59,39,1.09,49,0.127,60,1.394,62,1.449,76,3.35,77,1.715,79,0.007,80,0.007,215,2.35,216,1.52,234,2.556,502,2.194,628,4.921,629,5.154,641,4.921,656,4.026,657,4.513,670,3.049,687,4.026,699,4.513,700,5.026,701,6.33,702,5.07,703,5.746,704,8.192,705,5.746,706,7.174,707,5.746,708,5.746,709,5.746,710,5.746,711,4.624,712,5.746,713,5.746,714,2.742,715,5.746,716,5.746,717,4.026,718,5.746,719,5.746,720,3.804]],["title/classes/CommunityQuestionCommand.html",[0,0.25,393,3.286]],["body/classes/CommunityQuestionCommand.html",[0,0.194,2,0.604,3,0.068,4,0.061,5,0.061,8,0.198,9,0.654,10,1.743,12,0.911,13,1.691,14,2.621,16,2.161,17,0.381,19,0.81,20,0.009,21,0.687,22,0.331,23,0.681,25,3.639,26,1.081,27,2.763,29,2.763,30,0.755,31,0.155,32,2.489,33,1.895,34,2.897,35,0.933,36,0.698,37,0.997,38,0.414,39,0.649,40,1.129,45,1.817,46,1.968,47,1.817,48,0.973,49,0.076,50,1.271,51,1.532,58,1.41,60,1.63,62,2.042,65,0.698,72,2.29,77,1.785,79,0.005,80,0.005,85,1.634,215,2.061,216,2.106,222,1.468,238,3.338,272,2.312,276,2.056,294,1.751,355,2.399,370,5.278,393,3.765,486,0.804,570,3.338,589,1.968,657,3.171,663,3.765,670,2.675,673,2.267,687,2.399,699,2.155,720,3.338,721,6.205,722,3.022,723,5.041,724,5.982,725,5.278,726,3.425,727,5.041,728,5.821,729,4.814,730,3.425,731,3.425,732,7.469,733,4.928,734,3.425,735,3.425,736,4.928,737,6.598,738,3.425,739,3.425,740,2.267,741,5.041,742,2.267,743,3.338,744,3.022,745,3.022,746,4.448,747,5.278,748,3.022,749,3.425,750,3.425,751,3.425,752,2.399,753,2.558,754,3.425,755,4.369,756,3.425,757,3.425,758,3.425,759,3.022,760,2.558,761,2.399,762,6.598,763,3.425,764,3.425,765,2.558,766,5.041,767,3.425,768,5.041,769,2.756,770,3.022,771,4.448,772,3.425,773,2.267,774,2.855,775,5.041,776,3.022,777,3.425,778,3.022,779,5.041,780,6.598,781,2.756,782,3.022,783,2.558,784,3.425,785,5.041,786,5.041,787,3.425,788,3.425,789,3.425,790,4.448,791,3.425,792,3.425,793,5.041,794,3.425,795,3.022,796,3.425,797,5.041,798,4.057,799,3.425,800,2.756,801,3.425,802,3.425,803,3.425,804,3.425,805,3.425,806,4.448,807,3.425,808,3.425,809,3.425,810,3.425,811,3.425,812,3.425,813,3.425,814,2.267,815,3.425,816,5.982,817,3.425,818,3.425,819,3.425,820,1.634,821,3.022,822,3.022,823,3.022,824,3.022,825,2.399,826,3.425,827,3.022,828,1.532,829,5.041,830,3.022,831,2.756,832,3.425,833,3.425]],["title/classes/CommunityQuestionDto.html",[0,0.25,733,3.286]],["body/classes/CommunityQuestionDto.html",[0,0.409,2,1.023,3,0.115,4,0.103,5,0.103,8,0.335,17,0.417,20,0.009,22,0.432,26,1.304,31,0.143,35,1.074,36,1.182,49,0.128,73,1.155,77,2.154,79,0.007,80,0.007,202,1.617,235,3.213,259,3.361,302,3.749,303,2.596,348,3.039,486,2.053,578,5.056,711,5.808,732,7.712,733,5.39,755,4.779,759,6.368,760,5.39,834,6.932,835,5.119,836,5.39,837,6.368,838,6.368,839,7.217,840,6.368,841,5.802,842,5.39,843,5.802,844,4.333,845,5.808]],["title/classes/CommunityQuestionFormDto.html",[0,0.25,736,3.286]],["body/classes/CommunityQuestionFormDto.html",[0,0.374,2,1.163,3,0.131,4,0.117,5,0.117,8,0.381,17,0.381,20,0.009,22,0.331,26,1.192,31,0.155,35,1.221,36,1.344,39,1.251,49,0.146,79,0.008,80,0.008,202,1.748,736,5.827,806,7.33,846,6.884,847,5.82,848,8.308,849,7.802,850,6.597,851,5.82]],["title/interfaces/DiscordExecutionContext.html",[363,2.529,852,3.286]],["body/interfaces/DiscordExecutionContext.html",[0,0.336,3,0.118,4,0.105,5,0.105,8,0.342,9,0.949,10,1.297,12,1.071,17,0.342,20,0.009,30,0.748,31,0.158,37,1.726,38,0.487,39,1.124,48,1.685,49,0.131,50,1.495,58,1.563,60,1.152,62,1.495,79,0.007,80,0.007,134,2.829,199,1.6,222,1.726,234,2.112,363,3.407,365,4.153,378,3.491,382,1.955,383,3.27,405,2.713,502,1.813,624,3.611,852,5.925,853,5.463,854,4.771,855,4.762,856,7.308,857,5.929,858,4.391,859,4.153,860,4.428,861,4.153,862,3.559,863,3.73,864,3.73,865,4.153,866,5.231,867,5.231]],["title/classes/DiscordGuildMember.html",[0,0.25,868,3.286]],["body/classes/DiscordGuildMember.html",[0,0.375,2,0.893,3,0.101,4,0.09,5,0.09,8,0.293,17,0.49,20,0.009,22,0.45,23,0.683,26,1.531,31,0.146,49,0.112,65,1.502,67,2.147,73,1.29,79,0.007,80,0.007,90,1.904,196,1.405,202,1.482,293,4.636,294,3.384,301,3.65,302,3.97,303,2.265,304,4.636,307,3.384,451,3.291,477,4.044,479,4.163,828,3.298,868,4.942,869,7.584,870,4.467,871,4.236,872,6.504,873,6.504,874,5.164,875,4.869,876,5.063,877,4.075,878,5.063,879,5.063,880,5.063,881,5.063,882,5.063,883,6.617,884,5.063,885,5.063,886,5.838,887,3.039]],["title/classes/DiscordUser.html",[0,0.25,887,2.641]],["body/classes/DiscordUser.html",[0,0.283,2,0.597,3,0.067,4,0.06,5,0.06,8,0.196,17,0.479,20,0.009,22,0.457,26,1.498,31,0.099,48,1.865,49,0.075,60,0.971,72,2.543,73,1.275,77,1.492,79,0.005,80,0.005,90,1.273,196,2.475,202,1.331,231,3.034,302,3.712,303,1.515,360,3.275,417,4.128,418,5.132,429,3.31,430,2.873,431,4.982,446,1.868,451,3.401,453,3.939,477,3.996,479,3.739,482,4.128,486,2.084,608,2.032,825,5.132,828,3.278,871,3.771,874,5.132,875,4.548,877,4.023,887,3.567,888,2.725,889,5.789,890,5.789,891,6.463,892,5.789,893,5.789,894,4.85,895,4.782,896,6.562,897,4.901,898,3.386,899,6.562,900,3.386,901,4.999,902,3.386,903,3.386,904,3.386,905,4.999,906,4.999,907,4.999,908,4.999,909,3.386,910,4.41,911,3.386,912,3.386,913,4.999,914,4.999,915,3.386,916,3.733,917,3.386,918,3.386,919,4.999,920,4.999,921,3.386,922,4.438,923,3.733,924,2.529]],["title/injectables/DmMessageHandler.html",[199,0.963,925,3.083]],["body/injectables/DmMessageHandler.html",[0,0.306,3,0.107,4,0.096,5,0.096,8,0.312,9,0.895,10,1.663,17,0.399,19,0.663,20,0.009,21,0.475,22,0.271,23,0.557,26,0.976,30,0.682,31,0.164,35,1,36,1.101,38,0.444,39,1.025,49,0.119,62,1.362,74,2.763,76,2.209,79,0.007,80,0.007,85,2.578,199,1.51,200,2.147,202,1.546,203,2.71,214,2.417,215,2.209,216,2.011,234,2.459,327,2.344,405,2.531,742,3.577,743,3.577,765,4.035,773,3.577,774,2.578,828,2.417,925,4.834,926,6.118,927,6.118,928,4.348,929,6.9,930,6.9,931,5.403,932,5.403,933,6.9,934,5.403,935,5.403,936,4.035,937,3.577,938,5.403,939,3.785,940,3.399,941,4.035,942,4.767,943,5.403,944,5.403,945,6.9,946,5.403,947,5.403,948,5.403,949,3.785,950,4.767,951,6.9,952,5.403,953,5.403,954,5.403,955,5.403,956,5.403,957,5.403,958,5.403,959,5.403,960,4.348,961,5.403,962,4.767,963,5.403,964,5.403,965,4.348,966,3.577,967,5.403,968,5.403]],["title/classes/EditRoleData.html",[0,0.25,969,3.083]],["body/classes/EditRoleData.html",[0,0.29,2,0.467,3,0.053,4,0.047,5,0.047,8,0.153,17,0.428,20,0.009,21,0.652,22,0.453,23,0.847,26,1.338,31,0.102,39,0.787,48,2.458,49,0.058,60,0.806,61,1.754,72,2.007,73,1.253,77,1.238,79,0.004,80,0.004,90,0.996,100,1.224,202,1.145,214,1.856,216,1.905,231,2.834,259,3.411,272,1.024,280,2.152,290,1.59,300,1.754,301,3.973,302,3.684,303,1.185,342,4.178,348,2.643,360,3.033,417,3.216,425,3.384,429,1.754,430,1.522,431,5.085,436,1.31,437,2.746,446,2.288,451,3.486,453,3.769,460,2.746,470,4.664,477,4.092,479,4.189,482,3.95,486,2.074,490,3.93,607,2.906,608,1.59,656,3.581,666,2.132,825,1.856,875,1.59,897,5.53,916,4.319,924,1.979,969,3.581,970,1.979,971,5.358,972,5.959,973,5.959,974,5.188,975,5.959,976,4.51,977,2.649,978,3.659,979,3.659,980,2.649,981,3.659,982,4.51,983,2.649,984,4.51,985,4.51,986,4.113,987,3.659,988,3.659,989,3.659,990,2.649,991,2.649,992,2.649,993,4.51,994,2.649,995,4.654,996,2.649,997,2.338,998,3.659,999,2.609,1000,3.659,1001,2.906,1002,2.649,1003,2.649,1004,2.649,1005,3.659,1006,2.132,1007,2.906,1008,1.754,1009,2.338,1010,3.338,1011,2.49,1012,4.654,1013,2.338,1014,4.654,1015,2.338,1016,3.338,1017,2.338,1018,2.338,1019,2.338,1020,2.338,1021,2.338,1022,2.338,1023,2.132,1024,2.338,1025,3.581,1026,2.338,1027,2.906,1028,1.979,1029,2.132,1030,2.132,1031,2.338,1032,1.979]],["title/interfaces/EventToLog.html",[218,2.1,363,2.529]],["body/interfaces/EventToLog.html",[3,0.116,4,0.104,5,0.104,8,0.338,9,0.942,17,0.338,19,0.719,20,0.009,21,0.516,22,0.294,23,0.604,30,0.739,31,0.116,38,0.482,49,0.129,79,0.007,80,0.007,203,2.994,213,3.353,218,3.465,220,3.473,235,2.396,363,3.367,365,4.105,486,1.706,506,3.853,513,3.853,515,3.713,622,5.189,634,3.936,1033,5.169,1034,8.64,1035,6.638,1036,8.249,1037,8.249,1038,6.407,1039,5.859,1040,4.808,1041,6.407,1042,6.638,1043,7.261,1044,5.843]],["title/classes/Explorer.html",[0,0.25,1045,3.541]],["body/classes/Explorer.html",[0,0.289,2,0.899,3,0.101,4,0.09,5,0.09,8,0.295,9,0.862,12,1.201,13,2.517,14,2.97,17,0.453,19,0.962,20,0.009,21,0.69,22,0.393,23,0.808,27,3.415,30,0.933,31,0.156,33,2.499,35,0.944,36,1.354,39,0.967,49,0.112,50,2.171,58,1.42,60,1.437,70,2.026,79,0.007,80,0.007,99,3.172,213,3.07,216,1.348,222,1.936,364,3.572,451,2.799,617,2.705,1035,4.103,1040,3.375,1045,5.349,1046,4.498,1047,6.647,1048,6.525,1049,6.647,1050,6.647,1051,8.489,1052,5.098,1053,6.647,1054,5.098,1055,8.335,1056,6.647,1057,5.098,1058,6.647,1059,5.098,1060,4.103,1061,5.349,1062,5.098,1063,5.098,1064,5.349,1065,5.098,1066,5.098,1067,5.098,1068,5.098,1069,5.098,1070,5.098,1071,5.098,1072,5.098,1073,5.098,1074,4.498,1075,5.098]],["title/classes/Guild.html",[0,0.25,436,0.918]],["body/classes/Guild.html",[0,0.408,2,1.017,3,0.115,4,0.102,5,0.102,8,0.333,17,0.453,20,0.009,21,0.722,22,0.45,26,1.416,31,0.143,42,2.055,49,0.159,65,1.597,67,1.68,73,1.285,79,0.007,80,0.007,90,2.169,202,1.611,304,5.038,436,1.712,477,4.166,871,3.315,1076,4.642,1077,6.306,1078,5.787,1079,5.852,1080,5.768,1081,5.768,1082,5.768,1083,2.95,1084,3.315,1085,4.642,1086,3.315]],["title/controllers/GuildAutoDeleteChannelController.html",[81,1.488,1087,3.286]],["body/controllers/GuildAutoDeleteChannelController.html",[0,0.35,3,0.091,4,0.081,5,0.081,8,0.263,9,0.801,10,1.863,12,0.824,17,0.404,19,0.859,20,0.009,21,0.616,22,0.351,23,0.722,26,1.264,30,0.883,31,0.149,37,1.328,38,0.375,49,0.101,50,1.15,58,1.495,60,1.359,62,1.764,65,1.711,73,1.196,79,0.006,80,0.006,81,1.543,83,1.669,216,1.983,222,1.328,235,1.865,246,2.738,263,3.883,327,3.036,382,2.472,391,3.978,392,2.869,415,2.722,436,0.952,531,2.621,561,4.902,562,4.633,563,5.225,617,3.978,1087,4.61,1088,5.636,1089,5.166,1090,3.67,1091,7.511,1092,6.997,1093,6.172,1094,6.997,1095,4.56,1096,5.785,1097,4.56,1098,4.56,1099,4.56,1100,4.56,1101,4.56,1102,6.172,1103,6.615,1104,4.633,1105,4.024,1106,4.024,1107,3.406,1108,4.56,1109,4.56,1110,4.56,1111,5.225,1112,4.56,1113,6.997,1114,4.56,1115,4.024,1116,3.67,1117,4.56,1118,6.172]],["title/classes/GuildAutoDeleteChannelDto.html",[0,0.25,1096,3.083]],["body/classes/GuildAutoDeleteChannelDto.html",[0,0.41,2,1.025,3,0.115,4,0.103,5,0.103,8,0.336,17,0.417,20,0.009,22,0.413,26,1.306,31,0.156,42,2.071,49,0.128,73,1.242,79,0.007,80,0.007,90,2.185,202,1.619,302,3.752,303,2.601,382,2.593,405,2.21,477,3.752,502,2.21,504,4.021,875,3.489,1088,5.206,1089,5.177,1096,5.063,1111,4.341,1119,6.938,1120,4.678,1121,4.338,1122,7.863,1123,5.813,1124,5.813,1125,7.226,1126,7.226,1127,7.226,1128,6.375,1129,5.813,1130,5.813,1131,5.813,1132,5.813,1133,5.813]],["title/modules/GuildAutoDeleteChannelModule.html",[92,1.527,1134,3.083]],["body/modules/GuildAutoDeleteChannelModule.html",[0,0.288,3,0.101,4,0.09,5,0.09,16,2.367,20,0.009,31,0.174,35,0.941,36,1.035,38,0.418,40,1.675,49,0.112,79,0.007,80,0.007,83,2.427,92,2.563,94,2.346,95,2.346,96,2.508,97,2.508,98,2.346,99,3.523,100,3.41,110,3.274,111,2.508,112,1.859,114,2.696,123,2.696,134,2.424,142,2.508,317,2.802,376,4.593,377,4.258,378,3.974,382,1.675,383,2.802,390,3.811,391,3.519,392,4.172,436,1.694,1087,5.514,1088,5.182,1089,4.698,1104,5.889,1134,6.393,1135,4.483,1136,4.483,1137,4.483,1138,4.111,1139,5.239,1140,4.483,1141,4.483,1142,4.483,1143,4.089,1144,2.92]],["title/injectables/GuildAutoDeleteChannelService.html",[199,0.963,1104,2.914]],["body/injectables/GuildAutoDeleteChannelService.html",[0,0.238,3,0.083,4,0.074,5,0.074,8,0.242,9,0.755,10,1.852,12,1.052,13,2.068,14,2.804,15,3.692,16,2.056,17,0.439,19,0.822,20,0.009,21,0.589,22,0.336,23,0.69,30,0.845,31,0.156,33,2.189,35,0.776,36,0.854,37,1.22,38,0.344,39,0.794,40,1.381,49,0.092,50,1.688,51,1.874,58,1.244,60,1.568,62,1.984,65,1.677,73,1.106,77,1.25,79,0.006,80,0.006,199,1.274,200,1.665,202,1.305,203,2.447,214,1.874,215,1.713,216,1.54,222,1.22,319,2.407,327,2.526,355,2.935,382,2.595,391,4.176,415,1.92,436,1.215,504,3.888,568,5.138,587,2.635,588,3.129,1086,2.407,1088,5.712,1089,5.217,1091,6.707,1096,5.068,1104,3.855,1105,3.696,1106,3.696,1111,3.129,1139,5.078,1142,3.696,1145,3.371,1146,7.234,1147,4.686,1148,5.823,1149,4.189,1150,5.823,1151,4.189,1152,5.138,1153,3.696,1154,5.823,1155,4.189,1156,4.189,1157,4.189,1158,4.189,1159,2.635,1160,4.189,1161,4.189,1162,4.189,1163,4.189,1164,4.189,1165,4.189,1166,4.189,1167,4.189,1168,4.189,1169,3.371,1170,3.696,1171,4.189,1172,4.189,1173,4.189,1174,3.129,1175,4.189,1176,4.189,1177,4.189,1178,3.696,1179,3.696]],["title/classes/GuildChannelEditOptions.html",[0,0.25,489,2.914]],["body/classes/GuildChannelEditOptions.html",[0,0.364,2,0.572,3,0.064,4,0.057,5,0.057,8,0.188,17,0.432,20,0.009,21,0.658,22,0.454,23,0.865,26,1.351,31,0.115,39,0.616,48,2.462,49,0.072,65,0.661,72,2.594,73,1.26,79,0.005,80,0.005,90,1.22,196,0.901,202,1.085,216,1.281,230,2.042,231,2.988,259,3.524,280,2.441,290,1.948,300,2.149,301,4.625,302,3.964,303,1.452,342,4.123,348,2.04,360,2.04,405,1.482,415,2.903,416,2.424,417,2.042,418,3.394,419,2.612,420,1.66,421,6.015,422,2.612,423,2.424,424,2.424,425,2.149,426,2.612,427,6.015,429,2.149,430,1.865,431,4.773,432,2.612,436,0.677,437,2.149,439,2.612,442,2.274,443,2.612,446,3.197,447,3.618,449,2.612,451,3.037,453,1.948,455,4.8,456,2.612,458,4.061,460,3.208,461,2.612,464,2.424,465,2.274,466,2.612,467,3.647,469,2.612,470,2.274,471,2.042,473,2.612,477,4.215,478,4.665,479,3.647,480,2.612,481,2.612,482,4.702,483,3.647,484,4.665,485,4.665,486,2.106,487,2.612,488,2.612,489,3.838,490,2.168,491,2.612,492,3.618,493,3.048,494,3.899,495,3.208,496,4.665,497,2.612,498,3.394,499,3.899,875,1.948,981,2.864,986,3.899,997,2.864,1180,3.246,1181,3.246,1182,3.246,1183,3.246,1184,3.246,1185,3.246,1186,3.246,1187,3.246,1188,3.246,1189,3.246]],["title/controllers/GuildController.html",[81,1.488,1190,3.286]],["body/controllers/GuildController.html",[0,0.284,3,0.1,4,0.089,5,0.089,8,0.29,9,0.853,10,1.815,12,0.906,14,2.614,17,0.38,19,0.807,20,0.009,21,0.645,22,0.33,23,0.678,26,1.188,30,0.83,31,0.161,33,2.471,35,0.928,36,1.021,37,1.46,38,0.412,39,0.951,49,0.111,50,1.658,58,1.405,60,1.612,62,1.963,65,1.586,73,1.166,79,0.007,80,0.007,81,2.223,83,1.834,85,2.392,86,2.563,88,2.765,91,2.88,235,2.05,253,3.009,272,2.54,327,2.852,377,3.751,415,2.167,442,5.455,465,5.455,531,2.88,717,3.512,1143,4.034,1190,4.909,1191,4.422,1192,6.574,1193,6.574,1194,5.012,1195,7.786,1196,7.786,1197,5.012,1198,5.012,1199,5.29,1200,5.012,1201,4.034,1202,5.012,1203,5.012,1204,7.786,1205,7.786,1206,6.574,1207,5.012,1208,5.012,1209,5.012,1210,5.012,1211,5.012,1212,5.012,1213,5.012]],["title/classes/GuildDoesNotExistException.html",[0,0.25,1214,3.083]],["body/classes/GuildDoesNotExistException.html",[0,0.405,2,1.006,3,0.113,4,0.101,5,0.101,12,1.03,17,0.329,19,0.7,20,0.009,21,0.502,22,0.286,23,0.588,31,0.142,38,0.469,49,0.158,60,1.387,65,1.455,70,2.837,72,2.706,73,1.095,76,2.332,79,0.007,80,0.007,228,3.145,436,1.626,486,1.339,502,1.744,507,4.286,580,4.479,589,4.103,621,3.587,622,4.904,623,5.332,624,3.525,626,4.589,628,4.492,629,4.492,630,3.775,631,4.904,632,3.145,634,2.721,635,3.995,636,4.286,637,2.815,640,3.775,641,3.587,642,3.587,643,3.775,644,3.775,645,3.775,646,3.775,894,3.775,1214,5.461,1215,5.746,1216,5.461,1217,3.775,1218,3.587,1219,5.031,1220,5.031,1221,4.258,1222,5.031]],["title/classes/GuildDoesNotExistExceptionFilter.html",[0,0.25,1221,3.286]],["body/classes/GuildDoesNotExistExceptionFilter.html",[0,0.399,2,0.981,3,0.111,4,0.098,5,0.098,8,0.321,9,0.912,17,0.321,19,0.683,20,0.009,21,0.49,22,0.279,23,0.574,30,0.702,31,0.14,38,0.457,49,0.155,60,1.366,65,1.134,70,2.211,72,2.44,73,0.782,76,3.152,79,0.007,80,0.007,228,3.878,436,1.467,486,1.307,502,2.15,507,3.34,580,4.653,589,3.197,621,3.5,622,4.849,623,4.155,624,2.747,628,4.849,629,5.094,630,3.684,631,5.094,632,3.069,634,3.355,635,4.925,636,4.861,637,3.471,640,4.655,641,4.849,642,3.5,643,3.684,644,3.684,645,3.684,646,3.684,894,3.684,1214,5.673,1215,5.658,1216,5.4,1217,3.684,1218,3.5,1219,4.909,1220,4.909,1221,5.25,1222,4.909,1223,4.909]],["title/injectables/GuildMemberEvents.html",[199,0.963,1224,3.083]],["body/injectables/GuildMemberEvents.html",[0,0.162,3,0.057,4,0.051,5,0.051,8,0.165,9,0.571,10,1.86,12,0.795,13,1.411,14,2.447,15,3.322,16,1.712,17,0.427,19,0.843,20,0.009,21,0.63,22,0.359,23,0.708,26,1.241,30,0.867,31,0.159,33,1.654,35,0.529,36,0.582,37,0.832,38,0.235,39,0.542,40,0.942,42,1.018,48,0.812,49,0.063,50,1.64,51,1.278,55,3.08,58,1.529,60,1.472,61,3.55,62,2.233,63,2.521,64,3.55,65,1.093,66,3.081,67,1.562,72,0.992,73,0.402,74,2.742,76,2.193,77,0.853,78,2.521,79,0.004,80,0.004,85,2.559,134,1.364,142,1.411,196,2.184,199,0.962,200,1.136,202,0.985,203,2.037,214,1.278,215,1.168,216,1.418,222,1.754,234,1.567,252,2.742,348,1.852,377,3.659,378,2.874,382,1.45,383,1.576,405,1.345,409,2.002,415,0.942,436,0.596,490,2.399,503,2.002,570,2.912,588,2.134,617,1.516,860,2.134,861,3.757,887,1.715,894,1.892,966,3.55,1011,1.715,1032,2.134,1138,3.532,1144,1.642,1201,2.3,1224,3.081,1225,6.684,1226,2.521,1227,3.881,1228,4.398,1229,4.846,1230,4.398,1231,4.398,1232,4.398,1233,4.398,1234,4.398,1235,6.51,1236,4.398,1237,2.857,1238,4.398,1239,5.757,1240,4.398,1241,2.857,1242,3.54,1243,4.398,1244,2.857,1245,4.398,1246,4.398,1247,2.857,1248,4.398,1249,4.005,1250,2.857,1251,4.398,1252,5.362,1253,4.398,1254,2.857,1255,2.857,1256,4.398,1257,2.3,1258,2.64,1259,2.857,1260,2.3,1261,3.54,1262,2.857,1263,4.315,1264,2.857,1265,4.398,1266,2.521,1267,1.892,1268,2.3,1269,2.857,1270,2.521,1271,2.521,1272,3.285,1273,2.857,1274,2.3,1275,2.521,1276,2.857,1277,2.3,1278,2.857,1279,2.857,1280,2.521,1281,2.3,1282,2.857,1283,4.398,1284,3.881,1285,2.857,1286,4.398,1287,2.857,1288,3.881,1289,3.881,1290,4.731,1291,2.521,1292,2.857,1293,6.867,1294,2.3,1295,2.857,1296,2.3,1297,2.857,1298,2.857,1299,2.857,1300,2.521,1301,2.857,1302,2.857,1303,2.857,1304,2.857,1305,2.857,1306,2.857,1307,2.857,1308,2.857,1309,2.521,1310,2.521,1311,2.521,1312,2.3,1313,2.857,1314,2.521,1315,2.857,1316,2.857,1317,2.521,1318,2.521,1319,2.3,1320,2.857,1321,2.857,1322,2.857,1323,2.857,1324,2.521,1325,2.857,1326,2.521,1327,2.857,1328,2.002,1329,4.398,1330,5.362,1331,2.857,1332,6.022,1333,2.857,1334,2.857,1335,2.857,1336,2.857,1337,2.857,1338,3.881,1339,2.521,1340,4.731,1341,2.3,1342,2.857,1343,2.857,1344,2.857,1345,4.398,1346,2.857,1347,2.857,1348,2.857,1349,2.857,1350,2.857,1351,2.857]],["title/injectables/GuildMessageHandler.html",[199,0.963,1352,3.083]],["body/injectables/GuildMessageHandler.html",[0,0.248,3,0.087,4,0.077,5,0.077,8,0.253,9,0.779,10,1.788,12,1.085,17,0.396,19,0.841,20,0.009,21,0.603,22,0.388,23,0.707,26,1.085,30,0.758,31,0.162,35,0.811,36,0.892,37,1.275,38,0.36,39,0.831,49,0.097,50,1.104,58,1.464,60,1.432,62,1.514,65,0.892,67,1.275,79,0.006,80,0.006,85,2.09,142,2.162,199,1.314,200,1.741,214,1.96,216,1.158,222,1.275,234,2.627,276,2.629,360,1.844,382,1.444,405,2.612,415,1.444,504,2.24,570,3.976,688,3.271,825,3.068,853,3.271,859,4.801,926,5.933,928,3.525,937,2.9,942,6.046,1083,2.24,1138,3.939,1144,2.517,1267,2.9,1291,3.864,1352,4.207,1353,5.933,1354,4.832,1355,6.005,1356,4.38,1357,4.38,1358,6.005,1359,6.005,1360,4.38,1361,6.005,1362,4.38,1363,6.216,1364,3.271,1365,4.38,1366,4.38,1367,3.525,1368,3.525,1369,3.525,1370,6.852,1371,4.38,1372,6.505,1373,6.505,1374,7.372,1375,3.864,1376,6.046,1377,4.38,1378,4.38,1379,4.38,1380,4.38,1381,6.005,1382,4.38,1383,4.38,1384,4.38,1385,4.38,1386,4.38,1387,4.38,1388,4.38,1389,6.005,1390,4.38,1391,4.38,1392,4.38,1393,4.38,1394,4.38,1395,4.38,1396,4.38,1397,4.38,1398,4.38]],["title/modules/GuildModule.html",[92,1.527,105,3.083]],["body/modules/GuildModule.html",[0,0.256,3,0.09,4,0.08,5,0.08,16,2.289,20,0.009,31,0.177,35,0.837,36,0.921,38,0.371,40,1.49,49,0.1,79,0.006,80,0.006,83,2.245,92,2.417,94,2.087,95,2.087,96,2.231,97,2.231,98,2.087,99,3.323,100,3.216,105,6.441,110,3.028,111,2.231,112,1.654,114,3.255,123,2.398,130,5.332,132,5.332,134,2.156,135,3.987,141,5.332,142,2.231,143,3.987,317,2.493,376,4.442,377,4.468,390,4.292,391,3.695,392,2.843,405,1.876,436,1.629,661,2.992,925,5.642,927,3.637,1088,4.062,1089,3.682,1134,5.642,1143,3.637,1190,5.201,1224,5.642,1352,5.642,1353,3.637,1399,3.987,1400,3.987,1401,3.987,1402,3.987,1403,5.642,1404,5.642,1405,4.519,1406,4.519,1407,4.519,1408,6.134,1409,6.134,1410,4.519,1411,3.637,1412,2.597,1413,3.987,1414,4.519]],["title/controllers/GuildRestrictedChannelController.html",[81,1.488,1415,3.286]],["body/controllers/GuildRestrictedChannelController.html",[0,0.386,3,0.135,4,0.12,5,0.12,20,0.009,31,0.135,38,0.56,49,0.15,79,0.008,80,0.008,81,2.303,83,2.491,382,2.245,390,4.985,391,3.612,415,2.62,436,1.42,531,3.912,1090,5.478,1415,5.936,1416,6.808]],["title/modules/GuildRestrictedChannelModule.html",[92,1.527,1403,3.083]],["body/modules/GuildRestrictedChannelModule.html",[0,0.333,3,0.117,4,0.104,5,0.104,16,2.457,20,0.009,31,0.169,35,1.087,36,1.196,38,0.482,40,1.935,49,0.13,79,0.007,80,0.007,83,2.66,92,2.741,94,2.711,95,2.711,96,2.898,97,2.898,98,2.711,99,3.769,100,3.648,110,3.589,111,2.898,112,2.148,114,3.115,123,3.115,317,3.238,376,5.005,382,1.935,390,4.743,391,3.115,392,3.693,436,1.517,1140,5.179,1141,5.179,1403,6.253,1415,5.898,1417,5.179,1418,5.87,1419,5.179]],["title/injectables/GuildRestrictedChannelService.html",[199,0.963,376,2.427]],["body/injectables/GuildRestrictedChannelService.html",[0,0.253,3,0.089,4,0.079,5,0.079,8,0.258,9,0.788,10,1.907,12,1.098,13,2.201,14,2.858,15,3.815,16,2.111,17,0.449,19,0.954,20,0.009,21,0.684,22,0.39,23,0.802,30,0.937,31,0.154,33,2.285,35,0.825,36,0.908,37,1.298,38,0.366,39,0.845,40,1.47,42,1.589,49,0.098,50,1.533,51,1.995,58,1.587,65,1.776,73,1.247,79,0.006,80,0.006,196,1.237,199,1.33,200,1.772,222,1.298,272,3.004,319,2.562,327,3.222,376,3.353,382,2.645,390,5.01,391,4.256,415,2.28,504,4.488,1083,3.798,1121,4.151,1145,3.588,1147,5.565,1152,3.933,1153,3.933,1159,2.805,1420,6.078,1421,6.078,1422,6.078,1423,4.458,1424,6.078,1425,4.458,1426,6.078,1427,4.458,1428,5.363,1429,5.977,1430,4.458,1431,4.458,1432,4.458,1433,4.458,1434,4.458,1435,4.458]],["title/injectables/GuildService.html",[199,0.963,377,2.25]],["body/injectables/GuildService.html",[0,0.126,3,0.044,4,0.039,5,0.039,8,0.128,9,0.467,10,1.836,12,0.65,14,2.31,15,2.883,16,1.485,17,0.403,19,0.829,20,0.009,21,0.614,22,0.339,23,0.697,26,0.401,27,1.662,30,0.975,31,0.122,33,1.353,35,0.41,36,0.452,37,0.645,38,0.182,39,0.42,40,0.731,42,0.79,48,1.485,49,0.049,50,1.76,51,0.992,54,1.655,55,1.84,58,1.443,60,1.58,62,1.851,65,1.612,67,1.048,72,2.25,73,1.19,74,1.134,76,0.906,77,1.935,79,0.004,80,0.004,195,1.956,196,0.615,197,2.16,199,0.787,200,0.881,212,3.661,214,0.992,215,0.906,216,1.382,234,2.193,235,0.906,272,2.22,276,3.694,294,2.322,319,2.067,327,0.962,346,2.895,355,4.542,356,1.956,357,4.611,360,2.2,376,2.883,377,1.84,390,2.067,391,1.176,392,1.394,405,2.066,415,2.138,420,2.939,430,2.067,436,1.199,442,3.661,446,1.984,451,1.912,465,4.312,486,0.521,504,3.57,587,1.394,659,1.956,661,3.46,663,1.655,664,1.956,681,1.274,688,3.903,800,1.784,828,2.032,999,1.394,1083,2.673,1086,2.609,1111,1.655,1115,3.174,1116,2.895,1121,2.726,1159,1.394,1199,5.618,1216,2.521,1229,4.206,1235,1.784,1271,3.174,1274,1.784,1277,1.784,1373,4.006,1428,1.956,1429,1.784,1436,1.956,1437,4.541,1438,4.541,1439,4.541,1440,4.541,1441,4.006,1442,3.598,1443,3.598,1444,1.784,1445,4.541,1446,2.216,1447,2.216,1448,6.154,1449,2.216,1450,4.206,1451,2.216,1452,2.216,1453,2.216,1454,2.216,1455,6.154,1456,4.596,1457,5.842,1458,3.903,1459,2.382,1460,4.541,1461,6.981,1462,6.154,1463,4.541,1464,5.43,1465,4.541,1466,6.755,1467,4.541,1468,4.006,1469,4.541,1470,6.154,1471,6.154,1472,4.541,1473,6.154,1474,4.541,1475,4.541,1476,4.541,1477,4.006,1478,2.895,1479,2.687,1480,2.687,1481,2.216,1482,2.216,1483,2.216,1484,5.226,1485,2.216,1486,3.174,1487,2.216,1488,3.598,1489,3.598,1490,3.598,1491,3.174,1492,4.541,1493,3.598,1494,2.895,1495,3.598,1496,2.216,1497,3.598,1498,2.216,1499,1.956,1500,3.654,1501,2.216,1502,2.216,1503,2.216,1504,3.598,1505,1.784,1506,1.956,1507,1.956,1508,1.956,1509,2.216,1510,2.216,1511,2.216,1512,2.216,1513,2.216,1514,2.216,1515,2.216,1516,2.216,1517,2.216,1518,2.216,1519,3.598,1520,4.541,1521,2.216,1522,1.956,1523,2.216,1524,4.611,1525,3.174,1526,3.598,1527,3.598,1528,4.541,1529,5.226,1530,2.895,1531,2.216,1532,3.598,1533,2.216,1534,2.216,1535,3.598,1536,3.598,1537,2.216,1538,4.541,1539,3.598,1540,2.216,1541,2.216,1542,2.216,1543,3.598,1544,2.216,1545,2.216,1546,2.216,1547,2.216,1548,2.216,1549,3.598,1550,2.216,1551,2.216,1552,2.216,1553,2.216,1554,2.216,1555,2.216,1556,3.598,1557,2.216,1558,3.598,1559,2.216,1560,2.216,1561,2.216,1562,2.216,1563,1.956,1564,2.216]],["title/controllers/GuildSettingsController.html",[81,1.488,1565,3.286]],["body/controllers/GuildSettingsController.html",[0,0.296,3,0.104,4,0.092,5,0.092,8,0.301,9,0.875,10,1.835,17,0.39,19,0.828,20,0.009,21,0.593,22,0.338,23,0.696,26,1.219,30,0.851,31,0.174,38,0.429,42,1.858,49,0.115,58,1.114,60,1.013,62,1.701,65,1.611,73,1.178,79,0.007,80,0.007,81,2.281,83,1.908,85,2.488,86,2.666,87,4.196,88,2.876,91,2.996,134,3.567,197,4.048,222,1.518,234,2.403,235,2.132,246,3.13,247,3.894,248,3.894,252,2.666,254,3.13,255,3.28,256,3.452,257,4.048,258,3.13,259,2.132,260,3.653,263,3.28,378,3.218,382,2.465,383,2.876,436,1.088,561,5.875,563,5.037,583,3.894,861,3.653,1565,5.037,1566,4.6,1567,5.95,1568,7.476,1569,4.6,1570,5.214,1571,5.214,1572,5.903,1573,5.214,1574,5.214,1575,5.214,1576,5.214,1577,5.214,1578,4.196,1579,4.196,1580,5.214,1581,5.214,1582,5.214,1583,5.214,1584,5.214]],["title/modules/GuildSettingsModule.html",[92,1.527,132,2.914]],["body/modules/GuildSettingsModule.html",[0,0.341,3,0.119,4,0.106,5,0.106,16,2.471,20,0.009,31,0.165,38,0.494,40,1.982,49,0.133,79,0.007,80,0.007,83,2.7,92,2.771,94,2.777,95,2.777,96,2.968,97,2.968,98,2.777,99,3.809,100,3.687,110,3.642,111,2.968,112,2.2,132,5.933,134,2.869,378,4.343,382,1.982,383,3.316,436,1.54,1565,5.962,1585,5.304,1586,6.012,1587,5.304,1588,6.012,1589,6.012]],["title/injectables/GuildSettingsService.html",[199,0.963,378,2.1]],["body/injectables/GuildSettingsService.html",[0,0.187,3,0.065,4,0.058,5,0.058,8,0.19,9,0.636,10,1.975,12,0.885,15,2.703,16,1.841,17,0.476,19,1.012,20,0.009,21,0.725,22,0.414,23,0.85,30,1.028,31,0.153,37,0.96,38,0.271,39,0.625,40,1.087,42,1.174,49,0.073,50,1.236,51,1.475,58,1.715,60,1.136,62,1.633,65,1.713,72,1.144,73,1.264,79,0.005,80,0.005,134,3.976,139,1.818,140,1.818,196,0.915,197,4.817,199,1.072,200,1.31,206,4.074,208,3.68,216,1.296,221,2.182,234,1.746,272,1.274,327,3.421,378,2.338,382,2.747,405,2.36,490,1.475,580,1.894,601,2.653,617,1.749,658,1.979,694,2.653,717,3.433,774,1.573,874,2.309,1121,1.979,1214,2.309,1216,2.309,1218,2.074,1444,2.653,1567,4.324,1569,4.324,1590,2.908,1591,5.849,1592,4.9,1593,4.9,1594,4.9,1595,4.9,1596,4.9,1597,4.9,1598,4.9,1599,4.9,1600,4.9,1601,3.296,1602,3.296,1603,5.849,1604,3.296,1605,4.9,1606,3.296,1607,4.9,1608,3.296,1609,4.9,1610,3.296,1611,4.9,1612,3.296,1613,4.9,1614,3.296,1615,3.296,1616,4.9,1617,3.296,1618,4.9,1619,3.296,1620,4.9,1621,3.296,1622,4.9,1623,3.296,1624,3.296,1625,3.296,1626,2.309,1627,3.296,1628,2.908,1629,3.296,1630,3.296,1631,3.296,1632,3.296,1633,3.296,1634,3.296,1635,2.908,1636,3.296,1637,3.296,1638,3.296,1639,3.296,1640,7.717,1641,3.296,1642,3.296,1643,3.296,1644,3.296,1645,3.296,1646,3.296,1647,3.296,1648,3.296,1649,6.476,1650,2.653,1651,3.296,1652,3.296,1653,2.653,1654,3.296,1655,3.296,1656,3.296,1657,3.296,1658,3.296,1659,3.296,1660,3.296,1661,3.296,1662,3.296]],["title/controllers/GuildUserController.html",[81,1.488,1663,3.286]],["body/controllers/GuildUserController.html",[0,0.381,3,0.103,4,0.092,5,0.092,8,0.3,9,0.872,10,1.632,12,0.937,14,2.657,17,0.3,19,0.637,20,0.009,21,0.694,22,0.26,23,0.535,26,0.937,30,0.655,31,0.172,33,2.527,35,0.96,36,1.057,37,1.51,38,0.426,39,0.984,49,0.114,50,1.695,58,1.108,60,1.008,62,1.308,65,1.665,67,2.172,73,1.177,79,0.007,80,0.007,81,2.274,83,1.898,85,2.475,86,2.652,88,2.861,91,2.98,142,3.318,222,1.957,234,2.395,235,2.121,246,3.113,252,3.437,253,3.113,263,3.263,382,2.459,436,1.082,871,4.285,1084,2.98,1107,3.874,1138,3.318,1144,2.98,1174,3.874,1267,3.434,1663,5.02,1664,4.576,1665,6.579,1666,4.576,1667,6.722,1668,5.187,1669,5.187,1670,5.02,1671,4.174,1672,4.576,1673,4.576,1674,7.457,1675,5.187,1676,5.187,1677,5.187,1678,6.722,1679,5.187,1680,5.187,1681,4.576,1682,4.576,1683,5.187,1684,5.187,1685,4.576]],["title/modules/GuildUserModule.html",[92,1.527,141,2.914]],["body/modules/GuildUserModule.html",[0,0.326,3,0.114,4,0.102,5,0.102,16,2.444,20,0.009,31,0.171,35,1.064,36,1.171,38,0.472,40,1.894,49,0.127,79,0.007,80,0.007,83,2.625,92,2.715,94,2.654,95,2.654,96,2.837,97,2.837,98,2.654,99,3.733,100,3.612,110,3.542,111,2.837,112,2.103,114,3.049,123,3.049,134,2.742,141,5.962,142,2.837,317,3.169,378,4.103,382,1.894,383,3.169,436,1.632,1138,4.467,1144,3.302,1663,5.842,1686,5.07,1687,5.746,1688,5.07,1689,5.746,1690,5.746]],["title/injectables/GuildUserService.html",[199,0.963,1138,2.172]],["body/injectables/GuildUserService.html",[0,0.126,3,0.044,4,0.039,5,0.039,8,0.128,9,0.467,10,1.946,12,0.651,14,2.312,15,1.987,16,1.487,17,0.457,19,0.961,20,0.009,21,0.689,22,0.393,23,0.807,26,0.651,30,0.988,31,0.134,33,1.354,35,0.411,36,0.452,37,0.646,38,0.182,39,0.421,40,0.732,42,0.791,49,0.049,50,1.888,51,0.993,54,1.658,55,2.325,58,1.651,60,1.313,62,2.182,64,3.807,65,1.786,66,3.664,67,2.527,68,1.786,72,0.77,73,1.275,77,0.662,79,0.004,80,0.004,134,1.059,139,1.224,140,1.224,142,3.947,197,2.729,199,0.788,200,0.882,210,1.958,214,0.993,215,0.908,216,1.202,234,2.92,252,2.941,272,3.089,276,1.332,294,1.135,319,2.07,327,0.963,346,1.786,348,3.022,378,2.496,382,2.636,383,1.224,420,2.675,436,1.091,490,0.993,587,1.396,661,1.47,814,1.47,860,1.658,1011,1.332,1064,4.209,1083,1.135,1086,1.276,1121,4.494,1138,1.778,1147,3.658,1159,2.266,1227,4.01,1229,4.209,1235,4.628,1242,1.786,1258,1.332,1274,1.786,1281,1.786,1284,1.958,1339,3.178,1363,1.786,1444,1.786,1450,4.956,1457,2.69,1464,3.178,1486,3.178,1499,1.958,1524,3.178,1525,1.958,1563,1.958,1626,3.664,1628,1.958,1691,1.786,1692,4.546,1693,4.546,1694,3.602,1695,3.602,1696,3.602,1697,4.546,1698,4.01,1699,3.602,1700,4.546,1701,3.602,1702,3.602,1703,4.546,1704,2.22,1705,2.22,1706,6.985,1707,2.22,1708,2.22,1709,2.22,1710,3.602,1711,2.22,1712,2.22,1713,2.22,1714,3.602,1715,2.22,1716,3.602,1717,2.22,1718,2.22,1719,2.22,1720,2.22,1721,2.22,1722,3.602,1723,2.22,1724,2.22,1725,5.231,1726,5.231,1727,4.615,1728,2.22,1729,3.602,1730,2.22,1731,3.602,1732,3.602,1733,2.22,1734,1.658,1735,2.22,1736,2.22,1737,2.22,1738,2.22,1739,2.22,1740,1.786,1741,2.22,1742,2.22,1743,2.22,1744,2.22,1745,2.22,1746,2.22,1747,3.906,1748,3.602,1749,2.22,1750,2.22,1751,2.22,1752,2.22,1753,2.22,1754,3.602,1755,2.22,1756,1.786,1757,2.22,1758,2.22,1759,2.22,1760,1.958,1761,2.22,1762,2.22,1763,2.22,1764,2.22,1765,2.22,1766,4.546,1767,3.602,1768,2.22,1769,2.22,1770,2.22,1771,2.22,1772,2.22]],["title/guards/HasRequiredRank.html",[257,2.641,1773,2.529]],["body/guards/HasRequiredRank.html",[0,0.249,3,0.087,4,0.078,5,0.078,8,0.254,9,0.78,10,1.502,12,1.087,16,2.324,17,0.348,19,0.739,20,0.009,21,0.529,22,0.302,23,0.621,30,0.759,31,0.159,36,0.895,37,1.279,38,0.361,40,1.448,42,1.565,49,0.097,50,1.861,51,1.965,55,4.181,58,1.286,60,1.551,62,1.108,64,2.908,65,0.895,67,1.998,77,1.311,79,0.006,80,0.006,196,2.048,199,1.316,202,0.984,203,2.321,216,1.952,222,1.752,235,1.796,249,3.458,252,3.954,254,3.612,256,2.908,257,3.612,258,4.119,259,3.162,327,1.906,360,1.85,451,2.533,486,1.413,502,1.343,617,3.193,632,2.423,634,2.871,637,3.388,855,4.793,858,4.431,862,3.612,1011,3.612,1040,3.984,1044,4.842,1258,4.431,1294,3.535,1328,4.215,1412,2.524,1459,2.908,1478,3.535,1530,3.535,1756,3.535,1773,4.242,1774,2.763,1775,3.535,1776,6.017,1777,5.309,1778,4.842,1779,6.017,1780,4.393,1781,7.985,1782,4.393,1783,4.393,1784,6.513,1785,6.017,1786,4.494,1787,5.309,1788,6.017,1789,5.309,1790,4.842,1791,4.393,1792,4.393,1793,4.393,1794,4.393,1795,4.393,1796,4.393,1797,3.535,1798,3.876,1799,3.876,1800,4.393,1801,3.876,1802,4.393,1803,4.393,1804,4.393,1805,4.393,1806,5.309,1807,3.876,1808,3.535,1809,3.876,1810,3.535,1811,3.876,1812,3.535]],["title/guards/IsModalInteractionGuard.html",[753,3.286,1773,2.529]],["body/guards/IsModalInteractionGuard.html",[0,0.357,3,0.125,4,0.111,5,0.111,8,0.363,9,0.984,17,0.363,19,0.772,20,0.009,21,0.554,22,0.316,23,0.649,29,2.905,30,0.794,31,0.151,38,0.517,39,1.193,49,0.139,58,1.344,60,1.222,79,0.008,80,0.008,451,3.193,502,2.32,637,3.106,753,5.664,755,5.021,855,5.074,858,5.193,862,4.553,863,3.958,1774,3.958,1813,6.691,1814,5.55,1815,6.291,1816,6.291,1817,6.291,1818,6.291]],["title/guards/IsUserUnlockedGuard.html",[859,3.083,1773,2.529]],["body/guards/IsUserUnlockedGuard.html",[0,0.323,3,0.113,4,0.101,5,0.101,8,0.329,9,0.925,10,1.704,12,1.289,17,0.412,19,0.876,20,0.009,21,0.627,22,0.358,23,0.736,30,0.718,31,0.155,37,1.657,38,0.468,39,1.079,48,1.618,49,0.126,50,1.435,58,1.524,60,1.106,62,1.435,79,0.007,80,0.007,134,2.716,199,1.56,222,1.657,234,2.541,363,3.27,378,3.896,382,1.876,383,3.139,405,2.662,502,1.741,624,2.809,637,2.809,852,6.097,853,5.816,854,4.58,855,4.281,856,5.021,858,4.901,859,4.996,860,4.25,861,4.996,862,4.281,863,3.58,864,3.58,865,3.987,866,5.021,867,5.021,1774,3.58,1819,5.021,1820,5.691,1821,5.691]],["title/controllers/JwtAuthController.html",[81,1.488,1822,3.286]],["body/controllers/JwtAuthController.html",[0,0.298,3,0.105,4,0.093,5,0.093,8,0.304,9,0.88,10,1.839,12,0.95,17,0.392,19,0.833,20,0.009,21,0.661,22,0.264,23,0.7,26,1.226,30,0.856,31,0.167,38,0.432,49,0.116,50,2,58,1.449,73,1.055,79,0.007,80,0.007,81,1.779,83,1.925,85,2.51,88,2.901,89,5.066,90,1.977,116,5.259,117,3.482,203,2.294,216,1.794,222,1.532,237,4.641,327,2.943,486,1.593,531,3.022,562,3.482,567,4.233,617,2.791,636,3.157,1650,4.233,1797,6.041,1822,5.066,1823,5.259,1824,4.641,1825,5.26,1826,5.984,1827,5.984,1828,5.26,1829,6.783,1830,5.26,1831,5.923,1832,5.26,1833,5.26,1834,6.783,1835,6.783,1836,5.26,1837,5.26,1838,4.491,1839,3.482,1840,4.641,1841,3.928,1842,5.26,1843,6.783,1844,5.984,1845,3.928,1846,5.26,1847,5.26,1848,5.26,1849,5.26,1850,5.26,1851,5.26,1852,5.26,1853,5.26,1854,5.26,1855,5.26,1856,5.26]],["title/injectables/JwtAuthGuard.html",[86,2.25,199,0.963]],["body/injectables/JwtAuthGuard.html",[0,0.386,3,0.135,4,0.12,5,0.12,20,0.009,31,0.158,38,0.56,49,0.15,79,0.008,80,0.008,86,4.065,199,1.739,200,2.705,253,4.086,624,3.924,1857,5.478,1858,7.012,1859,6.006,1860,4.507]],["title/modules/JwtAuthModule.html",[92,1.527,106,3.083]],["body/modules/JwtAuthModule.html",[0,0.295,3,0.103,4,0.092,5,0.092,16,2.381,20,0.009,31,0.176,35,0.962,36,1.059,38,0.427,40,1.713,49,0.115,79,0.007,80,0.007,83,2.462,92,2.591,94,2.4,95,2.4,96,2.565,97,2.565,98,2.4,99,3.562,100,3.447,106,6.335,110,3.322,111,2.565,112,1.901,114,2.757,123,2.757,317,2.866,1822,5.574,1823,3.64,1838,5.909,1839,4.941,1840,4.584,1845,3.88,1860,3.44,1861,4.584,1862,4.584,1863,4.584,1864,5.869,1865,5.869,1866,5.029,1867,5.196,1868,5.196,1869,5.196,1870,4.181,1871,6.729,1872,5.196,1873,4.181,1874,5.196,1875,6.729,1876,4.584,1877,5.196,1878,4.584,1879,5.196,1880,5.196,1881,4.584,1882,5.196]],["title/injectables/JwtAuthService.html",[199,0.963,1838,2.914]],["body/injectables/JwtAuthService.html",[0,0.212,3,0.074,4,0.066,5,0.066,8,0.216,9,0.697,10,1.85,12,0.972,17,0.438,19,0.895,20,0.009,21,0.641,22,0.381,23,0.752,30,0.868,31,0.159,35,0.693,38,0.308,39,0.71,49,0.083,50,1.971,55,1.914,58,1.47,60,1.415,62,1.587,67,2.209,70,1.487,73,1.188,79,0.005,80,0.005,116,5.475,117,2.478,153,3.302,196,1.909,199,1.176,200,1.487,202,1.205,203,2.327,214,1.675,215,1.53,216,1.927,220,1.576,222,2.003,234,2.451,272,1.446,327,2.333,436,0.781,562,2.478,617,3.339,631,2.355,636,3.778,714,1.786,774,1.786,1450,3.012,1578,3.012,1734,4.016,1789,5.553,1823,5.475,1826,4.744,1827,5.553,1831,4.7,1838,3.56,1844,6.07,1845,2.795,1866,4.13,1870,3.012,1876,3.302,1878,4.744,1881,3.302,1883,3.302,1884,5.377,1885,5.377,1886,3.743,1887,7.586,1888,6.293,1889,5.377,1890,5.377,1891,3.743,1892,5.377,1893,3.743,1894,5.377,1895,3.743,1896,5.377,1897,3.743,1898,5.377,1899,6.293,1900,3.743,1901,6.293,1902,3.743,1903,3.302,1904,5.377,1905,5.377,1906,6.293,1907,3.743,1908,4.744,1909,5.377,1910,5.377,1911,5.377,1912,3.743,1913,3.743,1914,3.743,1915,3.012,1916,5.377,1917,3.743,1918,3.743,1919,3.743,1920,3.743,1921,3.743,1922,3.743,1923,3.743,1924,3.743,1925,3.743,1926,3.743,1927,3.302,1928,3.743,1929,5.377,1930,3.743,1931,3.743,1932,3.302,1933,3.743,1934,5.377,1935,5.377,1936,5.377,1937,3.743,1938,3.743,1939,3.743,1940,3.743,1941,3.743,1942,3.743,1943,3.743,1944,3.302,1945,3.743,1946,3.743,1947,3.743,1948,3.743]],["title/injectables/JwtAuthStrategy.html",[199,0.963,1864,3.083]],["body/injectables/JwtAuthStrategy.html",[0,0.334,3,0.117,4,0.104,5,0.104,8,0.34,9,0.945,10,1.731,12,1.065,17,0.421,19,0.895,20,0.009,21,0.641,22,0.366,23,0.752,30,0.744,31,0.164,38,0.484,48,1.675,49,0.13,58,1.259,79,0.007,80,0.007,116,6.062,117,3.902,199,1.595,200,2.342,222,1.716,327,2.557,624,3.598,1217,3.902,1579,4.743,1734,4.401,1823,5.543,1839,3.902,1860,3.902,1864,5.106,1908,5.2,1949,5.2,1950,7.288,1951,5.865,1952,5.2,1953,5.893,1954,6.43,1955,5.893,1956,5.2,1957,5.2,1958,4.743,1959,5.2,1960,5.2,1961,5.893,1962,5.2,1963,5.2,1964,5.893,1965,5.893,1966,5.2]],["title/classes/LogEntry.html",[0,0.25,324,3.083]],["body/classes/LogEntry.html",[0,0.304,2,0.656,3,0.074,4,0.066,5,0.066,8,0.215,17,0.461,20,0.009,22,0.444,23,0.552,26,1.443,31,0.106,48,1.521,49,0.16,60,1.333,65,1.278,70,2.127,72,3.073,73,1.259,79,0.005,80,0.005,90,1.398,196,2.017,202,1.199,212,5.465,214,1.664,216,1.416,249,4.852,250,4.762,259,2.189,272,2.069,276,3.765,278,4.394,280,3.061,282,4.684,294,3.871,301,2.953,302,3.81,303,1.664,305,3.544,306,2.606,324,3.75,340,5.533,405,1.918,415,2.068,436,1.517,477,3.88,486,2.053,490,2.806,608,4.792,660,2.606,717,3.75,875,4.544,950,4.723,986,2.993,1074,4.723,1159,3.368,1479,5.123,1831,3.998,1967,2.778,1968,4.723,1969,5.353,1970,5.353,1971,3.719,1972,3.719,1973,6.86,1974,3.719,1975,5.353,1976,5.353,1977,4.723,1978,5.353,1979,3.719,1980,3.719,1981,5.353,1982,3.719,1983,4.723,1984,5.353,1985,3.719,1986,6.052,1987,4.308,1988,5.533,1989,5.353,1990,3.719,1991,5.353,1992,3.719,1993,5.353,1994,2.993,1995,3.281,1996,3.281,1997,4.723,1998,3.281,1999,3.281,2000,3.281,2001,3.281,2002,3.281,2003,4.723,2004,3.281,2005,3.281,2006,3.281,2007,2.993,2008,3.281,2009,3.281,2010,3.281,2011,3.281,2012,3.281,2013,3.281,2014,3.281,2015,3.281,2016,3.281,2017,2.606,2018,2.993,2019,3.719,2020,2.778,2021,3.281,2022,3.719]],["title/classes/LogEntryDto.html",[0,0.25,243,3.286]],["body/classes/LogEntryDto.html",[0,0.298,2,0.928,3,0.105,4,0.093,5,0.093,8,0.304,17,0.486,20,0.009,22,0.449,26,1.519,31,0.135,49,0.116,73,1.283,79,0.007,80,0.007,90,1.977,202,1.52,243,5.066,249,4.83,250,5.288,251,4.233,276,4.506,278,5.259,280,3.161,282,5.607,290,4.761,293,4.752,294,4.056,305,4.97,306,5.259,307,3.469,324,3.685,477,4.081,502,2.074,1079,6.277,1121,4.071,2023,7.545,2024,4.641,2025,5.26,2026,5.26,2027,5.26,2028,5.26,2029,5.26,2030,5.26]],["title/guards/MessageFromUserGuard.html",[1364,3.286,1773,2.529]],["body/guards/MessageFromUserGuard.html",[0,0.352,3,0.123,4,0.11,5,0.11,8,0.359,9,0.976,17,0.359,19,0.763,20,0.009,21,0.547,22,0.312,23,0.641,30,0.784,31,0.15,38,0.511,39,1.178,48,1.766,49,0.137,58,1.608,60,1.207,79,0.008,80,0.008,405,2.637,451,3.169,502,2.302,637,3.067,855,5.053,858,5.175,862,4.518,863,3.908,864,3.908,865,4.352,937,4.983,1364,5.621,1774,3.908,2031,5.481,2032,6.212,2033,5.481]],["title/guards/MessageIsDmGuard.html",[936,3.286,1773,2.529]],["body/guards/MessageIsDmGuard.html",[0,0.349,3,0.122,4,0.109,5,0.109,8,0.356,9,0.971,17,0.356,19,0.756,20,0.009,21,0.542,22,0.309,23,0.636,30,0.778,31,0.149,38,0.506,39,1.168,48,1.751,49,0.136,58,1.6,60,1.197,77,1.839,79,0.008,80,0.008,199,1.639,405,2.631,451,3.153,502,1.884,637,3.042,855,5.038,858,5.038,862,4.495,863,3.876,864,3.876,865,4.316,936,5.593,937,4.958,1774,3.876,2033,5.436,2034,5.436,2035,6.161]],["title/classes/ModAnnouncementDto.html",[0,0.25,2036,3.083]],["body/classes/ModAnnouncementDto.html",[0,0.405,2,1.006,3,0.113,4,0.101,5,0.101,8,0.329,17,0.412,20,0.009,21,0.502,22,0.431,26,1.29,31,0.142,35,1.056,36,1.162,48,1.621,49,0.126,72,2.478,73,1.148,77,1.702,79,0.007,80,0.007,202,1.6,235,3.187,259,3.341,301,3.938,302,3.72,303,2.551,348,3.282,405,2.693,486,1.831,680,5.332,685,4.589,820,3.72,828,3.194,836,4.258,840,5.031,844,4.258,845,5.746,2036,5.002,2037,6.877,2038,5.031,2039,7.795,2040,5.332,2041,5.702,2042,5.702,2043,7.14,2044,7.14,2045,5.702,2046,5.702,2047,4.258,2048,4.258,2049,5.702,2050,5.702,2051,5.031]],["title/injectables/ModRequestFlow.html",[199,0.963,1404,3.083]],["body/injectables/ModRequestFlow.html",[0,0.151,3,0.053,4,0.047,5,0.047,8,0.154,9,0.541,10,1.827,12,0.754,13,1.318,14,2.38,16,1.984,17,0.417,19,0.857,20,0.009,21,0.668,22,0.362,23,0.72,26,1.05,29,3.223,30,0.843,31,0.139,33,1.569,35,0.494,36,0.544,37,0.778,38,0.22,39,0.506,40,0.881,49,0.059,50,1.053,51,1.195,58,1.653,60,1.583,62,2.144,65,1.284,67,0.778,72,1.783,73,0.722,74,2.135,76,1.707,77,1.881,79,0.004,80,0.004,142,1.318,185,2.356,199,0.913,200,1.061,202,0.935,203,1.965,214,1.195,215,2.101,216,2.046,222,1.496,228,1.473,272,1.613,280,1.125,307,1.366,327,1.811,360,1.125,382,0.881,415,1.376,423,1.995,430,1.535,436,0.557,455,1.995,483,1.68,493,1.68,587,1.68,657,2.626,658,1.603,665,1.871,669,2.763,670,3.082,673,3.402,679,2.149,687,1.871,699,1.68,720,1.768,728,7.031,729,5.812,742,1.768,743,2.763,744,2.356,745,2.356,746,3.683,747,3.683,748,2.356,755,2.763,770,2.356,773,3.402,774,2.772,776,3.683,778,3.683,790,2.356,795,2.356,798,4.674,814,3.402,830,2.356,831,2.149,940,1.68,941,1.995,966,2.763,1006,2.149,1086,3.621,1138,3.446,1144,1.535,1159,1.68,1258,2.505,1267,1.768,1290,3.683,1324,2.356,1341,2.149,1404,2.924,1411,5.974,1412,4.266,1500,3.359,2052,6.549,2053,2.356,2054,5.138,2055,4.174,2056,4.174,2057,4.174,2058,4.174,2059,4.174,2060,4.174,2061,2.671,2062,2.671,2063,4.174,2064,2.671,2065,4.174,2066,2.671,2067,4.174,2068,2.671,2069,4.174,2070,5.808,2071,2.671,2072,4.174,2073,5.808,2074,2.671,2075,4.174,2076,4.174,2077,2.671,2078,2.671,2079,2.356,2080,4.174,2081,2.149,2082,3.359,2083,3.359,2084,2.149,2085,2.671,2086,2.671,2087,5.138,2088,2.671,2089,5.376,2090,2.671,2091,2.671,2092,2.671,2093,2.671,2094,2.671,2095,2.671,2096,2.671,2097,2.671,2098,4.174,2099,2.671,2100,2.671,2101,5.138,2102,4.533,2103,4.174,2104,4.174,2105,4.174,2106,4.174,2107,2.671,2108,2.671,2109,5.125,2110,2.356,2111,4.174,2112,6.302,2113,2.671,2114,4.174,2115,2.671,2116,2.671,2117,2.356,2118,2.671,2119,2.671,2120,2.671,2121,2.671,2122,4.174,2123,2.671,2124,2.671,2125,2.671,2126,2.671,2127,3.683,2128,2.671,2129,4.174,2130,2.671,2131,2.671,2132,2.671,2133,2.671,2134,2.671,2135,2.671,2136,2.671,2137,2.671,2138,2.671,2139,2.671,2140,2.671,2141,2.671,2142,2.671,2143,2.671,2144,4.174,2145,2.356,2146,2.356,2147,2.671,2148,2.671,2149,2.671,2150,2.671,2151,2.671,2152,2.671,2153,2.671,2154,2.671,2155,2.356,2156,2.671,2157,2.671,2158,2.671,2159,3.683,2160,2.671,2161,3.359,2162,4.174,2163,1.995,2164,4.174,2165,4.174,2166,4.174,2167,2.356,2168,2.671,2169,1.768,2170,2.671,2171,2.671,2172,2.671,2173,2.671,2174,2.671,2175,2.671,2176,2.356,2177,2.149,2178,2.149,2179,2.671]],["title/modules/ModerationModule.html",[92,1.527,130,2.914]],["body/modules/ModerationModule.html",[0,0.334,3,0.117,4,0.104,5,0.104,16,2.458,20,0.009,31,0.174,35,1.089,36,1.198,38,0.483,40,1.939,49,0.13,79,0.007,80,0.007,83,2.664,92,2.744,94,2.716,95,2.716,96,2.904,97,2.904,98,2.716,99,3.772,100,3.362,110,3.593,111,2.904,112,2.152,114,3.862,123,3.121,130,5.864,136,5.726,317,3.244,529,5.904,2180,5.882,2181,5.882,2182,5.882,2183,5.882,2184,5.904,2185,5.904,2186,5.882,2187,5.882,2188,5.882,2189,5.882]],["title/classes/MumVoiceCommandChatInput.html",[0,0.25,386,3.083]],["body/classes/MumVoiceCommandChatInput.html",[0,0.363,2,0.848,3,0.096,4,0.085,5,0.085,8,0.278,9,0.83,10,1.676,17,0.278,19,0.591,20,0.009,21,0.632,22,0.361,23,0.496,25,4.226,26,0.869,27,3.538,29,3.32,30,0.607,31,0.152,32,3.548,34,4.13,35,1.184,36,0.98,38,0.395,39,0.912,45,3.395,46,3.676,47,2.552,48,1.367,49,0.141,62,1.813,70,2.542,74,3.272,76,2.616,77,2.38,79,0.006,80,0.006,234,2.561,238,4.759,348,2.025,386,4.482,387,3.37,405,2.439,415,2.109,486,1.13,670,3.814,714,3.053,720,4.759,740,3.185,752,3.37,761,4.482,774,3.914,820,3.053,828,2.152,1218,3.026,1354,6.165,2036,5.588,2190,5.148,2191,3.871,2192,4.244,2193,5.367,2194,4.81,2195,3.593,2196,5.644,2197,4.244,2198,4.244,2199,4.244,2200,3.871,2201,4.244,2202,6.342,2203,5.784,2204,7.037,2205,5.644,2206,5.644,2207,5.644,2208,3.593,2209,6.165,2210,4.244,2211,3.871,2212,4.244]],["title/classes/MumVoiceCommandUi.html",[0,0.25,387,3.083]],["body/classes/MumVoiceCommandUi.html",[0,0.363,2,0.848,3,0.096,4,0.085,5,0.085,8,0.278,9,0.83,10,1.676,17,0.278,19,0.591,20,0.009,21,0.632,22,0.361,23,0.496,25,3.529,26,0.869,27,3.538,29,3.32,30,0.607,31,0.152,32,3.548,34,4.13,35,1.184,36,0.98,38,0.395,39,0.912,45,3.395,46,3.676,47,2.552,48,1.367,49,0.141,62,1.813,70,2.542,74,3.272,76,2.616,77,2.38,79,0.006,80,0.006,234,2.561,238,4.759,348,2.025,386,3.37,387,4.482,405,2.439,415,2.109,486,1.13,670,3.814,714,3.053,720,4.759,740,3.185,752,3.37,761,4.482,774,3.914,820,3.053,828,2.152,1218,3.026,1354,6.165,2036,5.588,2190,5.148,2191,3.871,2192,4.244,2193,5.367,2195,3.593,2196,6.759,2197,4.244,2198,4.244,2199,4.244,2200,3.871,2201,4.244,2202,6.342,2203,5.784,2204,7.037,2205,5.644,2206,5.644,2207,5.644,2208,3.593,2209,6.165,2210,4.244,2211,3.871,2212,4.244,2213,4.81]],["title/classes/PermissionOverwrite.html",[0,0.25,458,3.083]],["body/classes/PermissionOverwrite.html",[0,0.391,2,0.662,3,0.075,4,0.066,5,0.066,8,0.217,17,0.217,20,0.009,21,0.606,22,0.452,26,0.678,31,0.125,39,0.712,48,2.404,49,0.083,65,0.764,72,2.87,73,1.263,79,0.005,80,0.005,90,1.411,196,1.041,202,1.207,216,0.992,230,2.36,231,3.014,259,3.423,280,1.58,290,2.252,300,2.484,301,4.743,302,4.072,303,1.679,342,4.023,360,2.268,405,1.648,415,2.885,416,2.802,417,2.36,418,3.774,419,3.019,420,1.919,421,5.543,422,3.019,423,2.802,424,2.802,425,2.484,426,3.019,427,5.543,429,2.484,430,2.156,431,4.903,432,3.019,435,3.31,436,0.783,437,2.484,439,3.019,442,2.629,443,3.019,446,3.476,447,4.023,449,3.019,451,2.9,453,2.252,455,4.023,456,3.019,458,4.825,460,4.173,461,3.019,464,2.802,465,2.629,466,3.019,467,3.389,469,3.019,470,2.629,471,2.36,473,3.019,477,4.28,478,5.072,479,3.965,480,3.019,481,3.019,482,4.92,483,3.389,484,4.335,485,5.072,486,2.101,487,4.335,488,3.019,489,3.567,490,1.679,491,3.019,492,2.802,493,2.36,494,3.019,495,2.484,496,3.019,497,3.019,498,2.629,499,3.019,2214,3.752]],["title/classes/PingCommand.html",[0,0.25,380,3.286]],["body/classes/PingCommand.html",[0,0.344,2,1.069,3,0.12,4,0.107,5,0.107,8,0.35,9,0.962,12,1.34,13,2.992,14,3.104,17,0.428,19,0.744,20,0.009,21,0.652,22,0.304,23,0.625,26,1.095,27,3.7,30,0.765,31,0.147,32,3.66,33,2.788,35,1.122,36,1.235,39,1.149,45,3.216,47,3.216,48,1.723,49,0.134,50,1.528,58,1.295,73,1.042,79,0.007,80,0.007,222,1.765,380,5.537,486,1.424,1272,4.527,2215,5.348,2216,8.347,2217,6.061,2218,6.061,2219,8.011,2220,6.061,2221,6.061,2222,5.348,2223,6.061,2224,6.061]],["title/injectables/PrismaService.html",[16,1.251,199,0.963]],["body/injectables/PrismaService.html",[0,0.344,3,0.121,4,0.107,5,0.107,8,0.351,9,0.963,10,1.931,16,2.11,17,0.429,19,0.746,20,0.009,21,0.534,22,0.305,23,0.627,30,0.937,31,0.148,38,0.499,42,2.164,49,0.134,62,1.872,79,0.007,80,0.007,199,1.624,200,2.414,502,1.857,624,3.665,1042,4.887,2225,5.358,2226,8.018,2227,7.424,2228,8.716,2229,7.424,2230,8.353,2231,6.073,2232,6.073,2233,6.073,2234,6.073,2235,6.073,2236,6.073]],["title/guards/ReactedMemberIsModOrHigherGuard.html",[1249,3.286,1773,2.529]],["body/guards/ReactedMemberIsModOrHigherGuard.html",[0,0.312,3,0.109,4,0.097,5,0.097,8,0.318,9,0.906,10,1.678,12,1.261,17,0.403,19,0.857,20,0.009,21,0.614,22,0.35,23,0.72,30,0.694,31,0.152,37,1.602,38,0.452,39,1.043,48,2.179,49,0.121,50,1.387,58,1.723,60,1.49,62,1.934,77,1.642,79,0.007,80,0.007,142,2.716,196,2.127,199,1.527,222,1.602,234,2.488,382,1.814,405,2.135,502,1.683,637,2.716,855,4.841,858,4.841,861,4.891,862,4.191,863,3.462,864,3.462,887,3.303,1011,3.303,1138,3.981,1144,3.162,1239,5.618,1249,5.214,1257,6.171,1258,4.841,1267,3.643,1774,3.462,1819,4.855,2237,4.855,2238,5.502,2239,5.502,2240,5.502,2241,5.502,2242,5.502,2243,5.502,2244,5.502,2245,5.502,2246,5.502,2247,4.855,2248,5.502,2249,5.502]],["title/injectables/RefreshJwtGuard.html",[199,0.963,1841,3.286]],["body/injectables/RefreshJwtGuard.html",[0,0.384,3,0.135,4,0.12,5,0.12,20,0.009,31,0.157,38,0.557,49,0.15,79,0.008,80,0.008,199,1.734,200,2.693,624,3.913,1841,5.92,1857,5.454,1858,6.994,1859,5.979,1860,4.487,1873,6.379,2250,5.979]],["title/injectables/RefreshJwtStrategy.html",[199,0.963,1865,3.083]],["body/injectables/RefreshJwtStrategy.html",[0,0.328,3,0.115,4,0.102,5,0.102,8,0.335,9,0.935,10,1.717,12,1.046,17,0.416,19,0.885,20,0.009,21,0.634,22,0.362,23,0.744,30,0.731,31,0.163,38,0.476,48,1.646,49,0.128,58,1.237,79,0.007,80,0.007,116,6.036,117,3.834,196,1.607,199,1.577,200,2.301,222,1.686,327,2.512,624,3.559,1217,3.834,1579,4.66,1734,4.325,1839,5.197,1860,3.834,1865,5.05,1873,5.801,1951,5.801,1952,5.109,1954,6.36,1956,5.109,1957,6.925,1958,4.66,1959,6.925,1960,5.109,1962,5.109,1963,5.109,1966,5.109,2251,6.925,2252,5.109,2253,5.79,2254,5.79,2255,5.79,2256,5.79]],["title/classes/RestrictedChannelDto.html",[0,0.25,2257,3.541]],["body/classes/RestrictedChannelDto.html",[0,0.422,2,1.075,3,0.121,4,0.108,5,0.108,8,0.352,17,0.43,20,0.009,22,0.42,26,1.345,31,0.16,42,2.173,49,0.135,73,1.175,79,0.007,80,0.007,90,2.293,202,1.667,231,2.98,302,3.551,303,2.728,382,2.648,477,3.833,482,4.682,502,2.276,504,4.108,875,3.661,895,4.907,1120,4.907,1121,4.467,1429,4.907,2257,5.989,2258,7.087,2259,8.033,2260,6.098,2261,6.098]],["title/controllers/RoleController.html",[81,1.488,2184,3.286]],["body/controllers/RoleController.html",[0,0.188,3,0.066,4,0.059,5,0.059,8,0.191,9,0.637,10,1.805,12,0.598,14,2.088,17,0.375,19,0.796,20,0.009,21,0.571,22,0.414,23,0.669,26,1.172,30,0.819,31,0.16,33,1.847,35,0.612,36,0.674,37,0.963,38,0.272,39,0.627,42,1.178,49,0.073,50,1.239,58,1.252,60,1.501,61,4.979,62,1.948,65,1.681,73,1.214,79,0.005,80,0.005,81,1.119,83,1.21,85,1.578,86,1.691,88,1.824,89,3.669,90,1.243,91,1.9,139,1.824,140,1.824,203,1.662,206,3.091,208,2.081,216,0.875,221,2.19,222,1.431,234,2.753,235,1.352,252,1.691,253,1.985,254,1.985,255,2.081,256,2.19,257,2.949,258,1.985,259,1.352,260,2.317,263,3.687,319,2.823,348,1.392,430,3.368,436,1.721,486,2.006,490,4.002,528,4.377,531,1.9,549,5.22,550,6.217,551,6.872,552,4.716,555,2.661,561,4.106,562,3.253,563,2.47,565,5.578,566,6.351,567,2.661,583,2.47,585,5.22,586,5.769,587,4.081,607,5.088,969,5.268,995,4.716,1007,5.412,1025,4.856,1027,4.106,1089,3.518,1159,3.091,1319,6.217,2184,3.669,2262,2.661,2263,5.861,2264,5.861,2265,4.912,2266,5.861,2267,3.307,2268,7.263,2269,3.307,2270,3.307,2271,3.307,2272,3.307,2273,6.408,2274,3.307,2275,3.307,2276,3.307,2277,3.307,2278,3.307,2279,3.307,2280,3.307,2281,3.307,2282,3.307,2283,3.307,2284,3.307,2285,2.918,2286,3.307,2287,3.307,2288,3.307,2289,3.307,2290,3.307,2291,3.307,2292,3.307,2293,3.307,2294,5.861,2295,3.307,2296,4.912,2297,4.912,2298,3.307,2299,3.307,2300,3.307,2301,3.307,2302,3.307]],["title/classes/RoleResponse.html",[0,0.25,1007,3.083]],["body/classes/RoleResponse.html",[0,0.286,2,0.457,3,0.052,4,0.046,5,0.046,8,0.15,17,0.457,20,0.009,21,0.647,22,0.454,26,1.43,31,0.1,39,0.774,48,2.393,49,0.057,60,0.792,61,1.718,72,2.396,73,1.263,77,0.774,79,0.004,80,0.004,90,0.975,100,1.198,202,1.13,214,1.161,216,1.512,231,2.938,259,3.008,272,1.002,280,1.092,290,1.557,300,1.718,301,3.944,302,3.663,303,1.161,342,3.944,348,1.092,360,3.232,417,3.91,425,4.115,429,2.701,430,2.344,431,5.171,436,1.492,437,2.701,446,2.25,451,3.523,453,4.144,460,1.718,470,4.005,477,4.08,479,4.152,482,3.91,486,2.087,490,3.951,607,2.858,608,1.557,656,2.858,666,2.088,825,1.817,875,3.961,877,4.058,895,4.058,897,5.494,916,4.928,924,1.937,969,2.858,970,1.937,971,5.311,972,5.92,973,5.92,974,5.154,975,5.92,976,3.599,978,2.289,979,2.289,982,4.449,984,3.599,985,3.599,987,2.289,988,2.289,989,2.289,993,3.599,995,3.283,998,2.289,999,1.632,1000,2.289,1001,1.817,1005,3.599,1006,2.088,1007,3.533,1008,2.701,1009,3.599,1010,4.058,1011,3.027,1012,5.556,1013,3.599,1014,5.556,1015,3.599,1016,4.058,1017,2.289,1018,2.289,1019,2.289,1020,2.289,1021,2.289,1022,2.289,1023,2.088,1024,2.289,1025,3.533,1026,2.289,1027,2.858,1028,1.937,1029,2.088,1030,2.088,1031,2.289,1032,1.937,2303,2.594,2304,2.594,2305,2.594,2306,2.594,2307,2.594,2308,2.594,2309,2.594,2310,2.594,2311,2.594,2312,2.594,2313,2.594,2314,2.594,2315,2.594,2316,2.594]],["title/controllers/SelfController.html",[81,1.488,2317,3.286]],["body/controllers/SelfController.html",[0,0.297,3,0.104,4,0.093,5,0.093,8,0.302,9,0.877,10,1.638,17,0.302,19,0.642,20,0.009,21,0.46,22,0.263,23,0.54,26,0.945,30,0.853,31,0.163,35,1.465,37,1.524,38,0.43,49,0.115,50,1.319,58,1.118,67,2.181,72,2.747,73,1.052,79,0.007,80,0.007,81,2.533,83,1.915,85,2.497,86,2.676,87,4.211,88,2.886,91,3.007,196,2.478,222,1.524,234,2.409,235,2.14,272,2.612,486,1.588,531,3.007,1008,4.476,1084,3.007,1272,5.048,1412,3.884,1665,5.964,1666,4.616,1670,3.908,1672,4.616,1784,6.983,1786,5.048,1866,4.495,2317,5.048,2318,4.616,2319,7.488,2320,7.915,2321,5.44,2322,6.76,2323,6.37,2324,8.393,2325,5.232,2326,5.964,2327,5.964,2328,6.76,2329,4.616,2330,5.232,2331,4.616,2332,5.232,2333,5.232,2334,5.232,2335,5.232]],["title/classes/SelfDto.html",[0,0.25,1084,2.529]],["body/classes/SelfDto.html",[0,0.402,2,0.996,3,0.112,4,0.1,5,0.1,8,0.326,17,0.47,20,0.009,21,0.716,22,0.451,26,1.471,31,0.141,42,2.013,49,0.157,65,1.151,67,2.26,73,1.282,79,0.007,80,0.007,90,2.123,202,1.59,289,4.983,304,4.972,348,2.378,436,1.699,477,4.147,871,4.46,1076,4.545,1077,4.545,1078,4.545,1079,5.796,1083,2.888,1084,4.078,1085,5.711,1086,4.46,2336,5.648,2337,5.648,2338,5.648,2339,5.648]],["title/classes/SelfDto-1.html",[0,0.208,814,2.427,1084,2.107]],["body/classes/SelfDto-1.html",[0,0.321,2,0.998,3,0.112,4,0.1,5,0.1,8,0.327,17,0.485,20,0.009,21,0.683,22,0.448,26,1.517,31,0.141,42,2.016,49,0.125,65,1.583,67,2.262,73,1.279,79,0.007,80,0.007,90,2.127,202,1.592,252,3.972,382,2.824,477,4.088,871,4.464,1078,5.718,1079,6.268,1083,2.894,1084,4.083,1085,5.718,2340,4.993,2341,5.659,2342,5.659,2343,5.659,2344,7.106,2345,5.659,2346,5.659]],["title/injectables/SelfService.html",[199,0.963,1866,2.641]],["body/injectables/SelfService.html",[0,0.238,3,0.083,4,0.074,5,0.074,8,0.243,9,0.757,10,1.723,12,1.054,14,2.581,15,3.995,16,2.059,17,0.387,19,0.823,20,0.009,21,0.67,22,0.336,23,0.692,30,1.04,31,0.161,33,2.193,35,1.584,36,0.856,37,1.223,38,0.345,39,0.797,41,5.395,42,1.497,49,0.093,50,1.919,51,1.88,58,1.247,60,0.816,62,1.059,65,0.856,67,2.352,72,2.514,79,0.006,80,0.006,146,3.706,196,2.53,199,1.277,200,1.669,222,1.699,234,2.581,235,2.386,246,2.522,247,3.137,248,3.137,272,2.799,436,1.588,447,4.357,486,1.574,634,2.784,871,2.414,887,2.522,1077,3.381,1084,2.414,1086,4.162,1174,4.357,1277,3.381,1681,5.148,1682,5.148,1685,3.706,1866,3.502,2020,4.357,2193,4.088,2247,3.706,2323,4.695,2327,5.148,2329,3.706,2347,3.706,2348,4.695,2349,5.148,2350,5.835,2351,5.835,2352,4.201,2353,4.201,2354,5.835,2355,4.201,2356,7.876,2357,5.835,2358,5.835,2359,5.148,2360,5.835,2361,4.201,2362,5.148,2363,5.835,2364,5.148,2365,5.835,2366,4.201,2367,4.201,2368,4.201,2369,4.201,2370,4.201,2371,4.201,2372,4.201,2373,4.201,2374,4.201,2375,4.201,2376,4.201,2377,4.201]],["title/classes/SendDirectMessageToUserException.html",[0,0.25,2378,3.083]],["body/classes/SendDirectMessageToUserException.html",[0,0.397,2,0.976,3,0.11,4,0.098,5,0.098,12,1,17,0.32,19,0.679,20,0.009,21,0.487,22,0.278,23,0.571,31,0.139,38,0.455,49,0.155,60,1.361,65,1.427,67,2.353,70,3.055,73,1.197,76,2.263,79,0.007,80,0.007,196,2.313,228,3.052,405,2.351,436,1.154,486,1.3,502,1.692,507,4.205,580,4.418,621,3.481,622,4.407,624,3.458,626,4.453,628,4.407,629,4.407,630,3.663,631,4.836,632,3.052,634,2.64,636,4.205,637,2.731,640,3.663,641,3.481,642,3.481,643,3.663,644,3.663,645,3.663,646,3.663,714,2.64,820,2.64,828,3.134,1008,3.663,1217,3.663,1412,3.179,2378,5.386,2379,5.232,2380,5.741,2381,6.181,2382,4.026,2383,5.638,2384,4.882,2385,4.882,2386,4.882,2387,4.132,2388,4.882]],["title/classes/SendDirectMessageToUserExceptionFilter.html",[0,0.25,2387,3.286]],["body/classes/SendDirectMessageToUserExceptionFilter.html",[0,0.392,2,0.956,3,0.108,4,0.096,5,0.096,8,0.313,9,0.897,17,0.313,19,0.666,20,0.009,21,0.477,22,0.272,23,0.559,30,0.684,31,0.137,38,0.446,49,0.153,60,1.344,65,1.105,67,2.014,70,3.027,73,0.972,76,3.114,79,0.007,80,0.007,196,2.226,228,3.815,405,2.329,436,1.131,486,1.274,502,2.115,507,3.255,580,4.609,621,3.411,622,3.411,624,2.677,628,4.791,629,5.046,630,3.59,631,5.046,632,2.991,634,3.3,636,4.815,637,3.414,640,4.579,641,4.791,642,3.411,643,3.59,644,3.59,645,3.59,646,3.59,714,2.587,820,2.587,828,2.426,1008,4.579,1217,3.59,1223,4.784,1412,3.974,2378,5.62,2379,5.165,2380,5.688,2381,4.784,2382,3.116,2383,4.364,2384,6.102,2385,6.102,2386,4.784,2387,5.165,2388,4.784]],["title/classes/SetFirstMessageUICommand.html",[0,0.25,402,3.286]],["body/classes/SetFirstMessageUICommand.html",[0,0.297,2,0.923,3,0.104,4,0.093,5,0.093,8,0.302,9,0.877,10,1.638,12,1.221,13,2.583,14,2.991,16,2.427,17,0.391,19,0.83,20,0.009,21,0.659,22,0.376,23,0.697,26,0.945,27,3.458,29,2.416,30,0.66,31,0.157,32,3.337,33,2.541,35,0.969,36,1.066,37,1.524,38,0.43,39,0.992,40,1.725,45,2.776,46,3.007,49,0.115,50,1.705,51,2.341,58,1.118,60,1.016,62,1.888,64,3.464,65,1.066,67,1.524,77,2.017,79,0.007,80,0.007,222,1.524,272,2.022,402,5.048,403,5.741,404,6.12,405,2.567,658,4.058,669,3.464,670,3.587,698,3.666,774,2.497,1296,4.211,1372,5.964,1376,4.616,2195,3.908,2211,4.211,2389,6.026,2390,4.211,2391,5.964,2392,5.232,2393,5.964,2394,6.983,2395,5.232,2396,4.616,2397,5.232,2398,5.964,2399,5.232]],["title/classes/SettingsChanged.html",[0,0.25,1626,3.083]],["body/classes/SettingsChanged.html",[0,0.292,2,0.907,3,0.102,4,0.091,5,0.091,8,0.297,9,0.867,12,1.208,17,0.471,19,0.821,20,0.009,21,0.588,22,0.395,23,0.689,30,0.649,31,0.148,38,0.423,42,1.832,49,0.113,65,1.702,72,2.9,73,1.236,79,0.007,80,0.007,197,4.458,202,1.497,203,2.757,213,3.087,215,3.478,218,3.544,220,2.165,231,2.904,382,2.754,451,3.432,490,3.738,502,2.044,506,3.547,507,3.087,513,3.547,515,2.63,518,2.836,1626,4.683,1635,5.897,1740,6.723,2400,4.537,2401,8.506,2402,6.684,2403,5.142,2404,5.142,2405,5.142,2406,6.684,2407,6.684,2408,5.142,2409,5.142]],["title/classes/SettingsDto.html",[0,0.25,1572,3.286]],["body/classes/SettingsDto.html",[0,0.345,2,0.787,3,0.089,4,0.079,5,0.079,8,0.258,17,0.5,20,0.009,22,0.455,26,1.563,31,0.138,42,1.591,49,0.099,73,1.308,79,0.006,80,0.006,90,1.679,197,2.68,202,1.363,301,4.81,302,4.161,303,1.998,304,6.109,382,2.875,502,1.861,531,3.977,1121,3.652,1572,4.544,2410,3.939,2411,6.106,2412,6.106,2413,6.106,2414,6.921,2415,6.106,2416,6.106,2417,6.106,2418,6.106,2419,6.106,2420,6.921,2421,8.652,2422,4.465,2423,4.465,2424,4.465,2425,4.465,2426,4.465,2427,4.465,2428,4.465,2429,4.465,2430,4.465,2431,4.465,2432,4.465]],["title/classes/SlowmodeDisabled.html",[0,0.25,523,2.914]],["body/classes/SlowmodeDisabled.html",[0,0.397,2,0.807,3,0.091,4,0.081,5,0.081,8,0.264,9,0.802,12,1.266,17,0.453,19,0.759,20,0.009,21,0.544,22,0.393,23,0.638,30,0.577,31,0.123,38,0.376,49,0.155,65,1.77,67,2.041,73,1.272,79,0.006,80,0.006,196,1.269,202,1.386,203,2.795,213,3.467,218,3.742,220,1.926,231,2.88,420,2.339,436,1.462,451,3.479,467,3.891,495,4.97,500,4.095,501,3.416,502,2.296,503,4.91,504,4.506,505,5.639,506,3.282,507,3.713,513,3.983,515,2.339,516,4.095,517,6.489,518,4.458,519,6.504,520,4.978,521,4.978,522,3.865,523,4.64,524,3.416,525,4.978,526,3.681,527,3.554,528,3.416,2433,6.185,2434,4.574,2435,4.574,2436,4.574]],["title/classes/SlowmodeEnabled.html",[0,0.25,516,2.914]],["body/classes/SlowmodeEnabled.html",[0,0.394,2,0.793,3,0.089,4,0.08,5,0.08,8,0.26,9,0.793,12,1.255,17,0.465,19,0.751,20,0.009,21,0.538,22,0.404,23,0.631,30,0.568,31,0.122,38,0.37,49,0.153,65,1.765,67,2.023,73,1.27,79,0.006,80,0.006,196,1.248,202,1.37,203,2.783,213,3.443,218,3.721,220,1.894,231,3.025,420,2.301,436,1.45,451,3.464,467,3.847,495,5.543,500,4.049,501,3.36,502,2.28,503,4.868,504,4.494,505,5.591,506,3.245,507,3.671,513,3.956,515,2.301,516,4.6,517,6.47,518,4.436,519,6.472,520,4.921,521,4.921,522,3.832,523,4.049,524,3.36,525,4.921,526,3.62,527,3.514,528,3.36,2437,6.115,2438,4.499,2439,4.499,2440,4.499,2441,4.499]],["title/classes/SpecialCommand.html",[0,0.25,410,3.286]],["body/classes/SpecialCommand.html",[0,0.227,2,0.707,3,0.08,4,0.071,5,0.071,8,0.232,9,0.732,10,1.43,17,0.432,19,0.693,20,0.009,21,0.575,22,0.375,23,0.583,25,3.914,26,0.724,27,3.019,29,2.608,30,0.713,31,0.154,32,2.788,34,3.245,35,1.045,36,0.817,38,0.464,39,0.76,47,2.127,48,1.139,49,0.088,58,1.598,60,0.779,62,1.011,73,1.163,79,0.006,80,0.006,196,1.112,202,1.265,214,3.175,215,2.673,234,2.012,238,3.739,410,4.217,471,4.464,486,0.942,498,3.956,658,2.407,700,2.809,740,2.654,752,2.809,761,2.809,814,3.739,949,3.956,2102,3.537,2163,4.217,2169,4.698,2193,4.58,2442,3.537,2443,6.537,2444,6.537,2445,6.537,2446,6.537,2447,5.647,2448,5.647,2449,5.647,2450,5.647,2451,5.647,2452,4.544,2453,4.009,2454,5.647,2455,5.647,2456,5.647,2457,5.647,2458,5.647,2459,5.647,2460,4.544,2461,5.647,2462,5.647,2463,5.647,2464,5.647,2465,4.009,2466,8.141,2467,5.647,2468,7.183,2469,7.76,2470,5.647,2471,5.647,2472,5.647,2473,7.096,2474,5.711,2475,5.647,2476,4.009,2477,4.009,2478,5.3,2479,4.009,2480,5.647,2481,6.537,2482,6.537,2483,4.009,2484,3.226,2485,4.009,2486,3.537,2487,3.537,2488,3.537,2489,3.226,2490,3.226,2491,4.544,2492,4.544,2493,4.009,2494,4.544,2495,3.537,2496,4.009,2497,3.537,2498,4.009,2499,4.009,2500,4.009,2501,4.009,2502,4.009,2503,3.537,2504,5.711,2505,4.009,2506,7.096,2507,7.096,2508,7.096,2509,7.096,2510,5.647,2511,4.009,2512,4.009,2513,4.009,2514,4.009,2515,4.009,2516,4.009,2517,4.009,2518,3.537]],["title/modules/TasksModule.html",[92,1.527,107,3.083]],["body/modules/TasksModule.html",[0,0.302,3,0.106,4,0.094,5,0.094,16,2.397,20,0.009,31,0.173,35,0.986,36,1.085,38,0.438,40,1.756,49,0.118,79,0.007,80,0.007,92,2.86,94,2.459,95,2.459,96,2.629,97,2.629,98,2.459,99,3.604,100,2.459,107,6.373,110,3.375,111,2.629,112,1.949,114,2.826,123,2.826,134,2.541,142,2.629,317,2.937,376,4.651,377,4.313,378,4.024,382,2.49,383,2.937,390,3.929,391,2.826,392,3.35,409,3.731,486,1.251,1138,4.163,1139,5.305,1144,3.06,2519,5.325,2520,5.325,2521,5.325,2522,6.032,2523,6.837,2524,6.837,2525,6.837,2526,5.106,2527,6.032,2528,5.325]],["title/injectables/TasksService.html",[199,0.963,1139,2.768]],["body/injectables/TasksService.html",[0,0.167,3,0.058,4,0.052,5,0.052,8,0.17,9,0.583,10,1.781,12,0.812,14,2.575,16,2.054,17,0.401,19,0.853,20,0.009,21,0.697,22,0.225,23,0.464,26,1.104,30,0.877,31,0.157,33,1.69,35,0.544,36,0.599,37,0.856,38,0.242,39,0.557,40,0.969,42,1.047,49,0.065,50,1.661,51,1.315,55,3.125,58,1.306,60,1.187,62,1.926,74,2.791,76,1.838,77,0.877,79,0.005,80,0.005,112,1.075,129,2.365,139,1.621,140,1.621,142,1.451,196,1.514,199,0.983,200,1.168,203,1.52,206,3.845,208,3.433,215,1.838,216,1.911,221,1.946,222,1.589,235,1.202,252,2.298,272,1.136,294,1.503,307,2.298,319,3.512,342,1.621,360,2.773,377,3.551,382,0.969,409,2.059,415,1.482,420,2.298,436,1.275,486,1.056,522,1.621,556,3.965,570,2.976,652,2.593,656,2.059,657,1.849,658,1.764,660,3.149,661,4.36,662,2.593,665,2.059,675,2.195,688,4.076,690,2.365,692,2.593,693,3.965,694,3.617,695,3.965,696,2.593,697,2.593,699,1.849,828,2.734,966,2.976,974,3.149,1040,2.976,1083,2.791,1086,2.583,1128,3.965,1138,3.017,1139,2.828,1144,1.689,1169,3.617,1178,6.375,1179,6.375,1199,3.617,1201,2.365,1267,1.946,1268,5.3,1275,3.965,1294,2.365,1338,2.593,1341,2.365,1441,5.392,1456,3.357,1458,2.195,1459,2.976,1480,3.357,1494,4.918,1500,2.365,1505,2.365,1506,2.593,1507,2.593,1508,2.593,1673,4.815,1747,3.357,1778,3.617,1915,2.365,2089,2.365,2109,2.593,2117,2.593,2145,2.593,2146,2.593,2155,2.593,2178,3.617,2321,3.617,2348,3.617,2362,3.965,2522,5.392,2526,3.357,2527,3.965,2529,2.365,2530,4.494,2531,4.494,2532,4.494,2533,3.617,2534,6.945,2535,6.112,2536,6.945,2537,4.494,2538,2.939,2539,6.586,2540,2.939,2541,4.494,2542,4.494,2543,3.617,2544,2.939,2545,3.965,2546,5.457,2547,3.965,2548,2.939,2549,2.939,2550,2.939,2551,2.939,2552,2.939,2553,2.939,2554,2.939,2555,4.494,2556,6.112,2557,2.939,2558,3.965,2559,4.494,2560,4.494,2561,7.452,2562,4.494,2563,3.965,2564,4.494,2565,4.494,2566,1.559,2567,2.593,2568,2.593,2569,2.939,2570,2.939,2571,2.939,2572,2.939,2573,2.939,2574,4.494,2575,2.939,2576,2.593,2577,2.939,2578,2.939,2579,2.939,2580,2.939,2581,6.112,2582,2.365,2583,2.939,2584,1.764,2585,2.195,2586,2.593,2587,2.939,2588,2.939,2589,2.939,2590,2.939,2591,2.939,2592,2.939,2593,2.593,2594,2.939,2595,2.939,2596,2.939,2597,4.494]],["title/classes/TicketSystemSetupCommand.html",[0,0.25,412,3.286]],["body/classes/TicketSystemSetupCommand.html",[0,0.301,2,0.936,3,0.105,4,0.094,5,0.094,8,0.307,9,0.885,10,1.649,12,1.233,13,2.62,14,3.002,17,0.394,19,0.838,20,0.009,21,0.663,22,0.342,23,0.704,25,4.389,26,0.959,27,3.482,29,3.15,30,0.67,31,0.15,32,3.368,33,2.565,34,3.92,35,0.982,36,1.081,39,1.006,45,2.816,47,2.816,48,1.508,49,0.117,50,1.338,62,1.72,74,2.714,76,2.17,77,2.036,79,0.007,80,0.007,216,1.403,222,1.545,319,3.049,405,2.086,412,5.094,415,1.75,486,1.246,670,3.62,720,4.516,742,3.513,743,3.513,765,3.963,773,3.513,774,3.598,783,3.963,820,2.532,939,3.718,940,3.338,941,3.963,949,4.779,960,4.27,965,4.27,2089,5.49,2200,4.27,2203,4.27,2208,3.963,2222,4.682,2598,6.651,2599,4.682,2600,7.539,2601,5.307,2602,5.307,2603,5.307,2604,5.307,2605,4.682,2606,5.307,2607,5.094,2608,4.27,2609,5.307,2610,5.307,2611,4.682,2612,5.307,2613,4.682,2614,5.307,2615,5.307]],["title/classes/TimeOutCommand.html",[0,0.25,384,3.286]],["body/classes/TimeOutCommand.html",[0,0.227,2,0.707,3,0.08,4,0.071,5,0.071,8,0.232,9,0.732,10,1.43,12,1.02,13,1.979,14,2.765,17,0.326,19,0.693,20,0.009,21,0.658,22,0.283,23,0.583,25,3.914,26,0.724,27,2.608,29,2.608,30,0.506,31,0.164,32,2.788,33,2.123,34,3.245,35,1.045,36,0.817,38,0.464,39,0.76,45,2.127,46,2.304,47,2.127,48,1.139,49,0.088,50,1.424,58,1.207,60,1.378,62,1.886,70,2.244,74,2.888,76,2.309,77,1.685,79,0.006,80,0.006,139,2.211,140,2.211,196,2.153,206,4.464,208,4.113,215,1.639,216,2.218,222,1.644,238,3.739,294,3.969,360,1.688,384,4.217,446,2.211,486,0.942,617,2.127,657,3.553,658,2.407,669,2.654,670,2.996,673,4.328,675,4.217,679,3.226,680,2.994,698,2.809,699,2.522,700,2.809,714,2.695,740,2.654,742,2.654,743,2.654,752,2.809,761,2.809,773,2.654,774,1.913,783,2.994,821,3.537,822,3.537,823,3.537,824,3.537,831,3.226,864,2.522,939,2.809,940,2.522,941,2.994,965,3.226,966,2.654,999,2.522,1001,2.809,1328,2.809,1340,3.537,2017,4.972,2040,2.994,2047,2.994,2048,2.994,2169,2.654,2193,4.58,2209,5.711,2382,3.245,2484,3.226,2486,3.537,2487,3.537,2488,3.537,2495,3.537,2497,3.537,2543,4.544,2547,3.537,2566,2.127,2567,3.537,2582,3.226,2585,4.217,2586,4.982,2607,2.994,2608,3.226,2616,3.537,2617,6.537,2618,4.009,2619,4.009,2620,5.3,2621,4.009,2622,4.009,2623,4.009,2624,2.304,2625,3.245,2626,4.009,2627,4.009,2628,4.009,2629,7.096,2630,5.647,2631,6.537,2632,4.009,2633,6.537,2634,4.009,2635,3.537,2636,4.009,2637,3.537,2638,6.537,2639,4.009,2640,3.537,2641,3.537,2642,3.537,2643,3.537,2644,3.537,2645,4.009,2646,4.009,2647,4.009,2648,4.009,2649,5.647,2650,3.537,2651,3.537,2652,4.009,2653,4.009,2654,4.009,2655,4.009,2656,3.537,2657,4.009]],["title/classes/UnverifyByRoleCommand.html",[0,0.25,2658,3.541]],["body/classes/UnverifyByRoleCommand.html",[0,0.289,2,0.899,3,0.101,4,0.09,5,0.09,8,0.295,9,0.862,10,1.115,12,1.201,13,2.517,14,2.97,15,4.079,16,2.227,17,0.384,19,0.816,20,0.009,21,0.651,22,0.333,23,0.686,25,4.323,26,0.921,27,3.415,30,0.643,31,0.162,32,3.281,33,2.499,35,0.944,36,1.039,37,1.485,38,0.419,39,0.967,40,1.681,41,4.103,42,1.817,44,4.498,47,2.705,48,1.449,49,0.112,50,1.676,51,2.281,54,3.807,55,2.607,56,4.498,57,4.498,58,1.089,60,0.99,61,4.401,62,1.865,65,1.039,66,3.572,67,1.485,68,5.349,72,2.307,73,0.716,79,0.007,80,0.007,213,2.354,272,2.568,319,2.93,490,2.281,740,3.375,1300,4.498,2658,5.349,2659,6.525,2660,4.498,2661,6.647,2662,5.098,2663,5.098,2664,5.098,2665,6.647,2666,5.098,2667,5.098,2668,5.098,2669,5.098,2670,5.098,2671,5.098,2672,5.098,2673,5.098,2674,5.098,2675,5.098,2676,5.098,2677,5.098,2678,5.098,2679,5.098,2680,5.098]],["title/classes/UserBanEvent.html",[0,0.25,2681,2.529]],["body/classes/UserBanEvent.html",[0,0.434,2,0.679,3,0.076,4,0.068,5,0.068,8,0.222,9,0.712,12,1.155,17,0.426,19,0.674,20,0.009,21,0.483,22,0.37,23,0.566,30,0.486,31,0.109,38,0.316,49,0.169,65,1.823,67,2.557,70,3.377,73,1.297,79,0.006,80,0.006,112,2.007,202,1.229,203,2.813,213,3.639,218,3.844,220,1.621,231,2.483,280,3.729,307,1.968,436,1.598,502,2.41,506,2.911,513,4.181,515,1.968,518,4.688,522,3.026,527,4.884,600,4.4,681,2.212,714,2.618,820,1.837,2382,2.212,2566,2.911,2584,2.31,2624,3.152,2625,3.152,2681,3.152,2682,2.421,2683,4.877,2684,5.486,2685,3.849,2686,3.849,2687,3.849,2688,4.877,2689,2.548,2690,2.421,2691,2.212,2692,2.548,2693,3.632,2694,3.632,2695,3.632,2696,3.632,2697,3.152,2698,2.421]],["title/controllers/UserController.html",[81,1.488,2185,3.286]],["body/controllers/UserController.html",[0,0.142,3,0.05,4,0.044,5,0.044,8,0.144,9,0.514,10,1.806,12,0.451,14,1.753,17,0.375,19,0.797,20,0.009,21,0.571,22,0.365,23,0.67,26,1.173,30,0.82,31,0.161,33,1.489,35,0.463,36,0.509,37,0.728,38,0.205,39,0.474,42,0.89,48,0.71,49,0.055,50,0.999,55,3.121,58,0.846,60,1.412,62,2.096,65,1.705,66,1.75,67,2.464,73,1.226,74,1.278,76,1.62,79,0.004,80,0.004,81,0.845,83,0.914,85,1.192,86,1.278,88,1.378,89,2.958,90,0.939,91,1.436,112,0.914,139,1.378,140,1.378,196,2.421,203,1.34,206,2.492,208,1.572,216,2.009,221,1.654,222,1.153,230,1.572,234,2.754,235,1.022,246,1.5,247,1.866,248,1.866,252,1.278,253,1.5,254,1.5,255,1.572,256,1.654,257,2.377,258,1.5,259,1.022,260,1.75,263,3.84,294,1.278,348,1.668,405,0.764,415,1.846,436,1.746,464,1.866,483,1.572,486,1.816,493,1.572,531,1.436,549,4.912,550,6.22,551,6.22,552,4.505,555,3.187,562,1.654,565,5.476,566,5.476,572,2.958,573,1.866,574,2.204,580,1.436,583,1.866,585,5.226,586,4.85,587,3.84,588,2.958,589,2.276,600,3.507,601,4.505,607,3.922,610,4.341,611,2.011,612,2.011,616,2.204,617,2.102,632,1.378,660,2.775,661,2.622,680,1.866,681,2.276,714,1.192,783,1.866,820,1.192,828,1.118,868,3.675,871,1.436,872,2.204,873,2.204,874,1.75,887,2.953,922,3.675,923,3.675,1083,2.025,1103,2.204,1170,2.204,1280,3.494,1281,2.011,1309,2.204,1317,2.204,1318,2.204,1319,2.011,1412,3.217,1505,2.011,1698,4.341,1747,4.181,1760,2.204,1797,3.187,2017,3.447,2018,3.187,2110,3.494,2169,1.654,2185,2.958,2378,1.75,2379,1.866,2380,1.866,2484,2.011,2566,2.102,2584,2.953,2607,1.866,2608,2.011,2637,2.204,2640,2.204,2641,2.204,2642,2.204,2643,2.204,2656,2.204,2681,1.436,2690,2.492,2691,1.436,2697,1.436,2698,2.492,2699,2.204,2700,4.92,2701,4.92,2702,4.92,2703,4.92,2704,4.92,2705,2.499,2706,2.499,2707,2.499,2708,2.499,2709,2.499,2710,2.499,2711,2.499,2712,2.499,2713,2.499,2714,2.499,2715,2.499,2716,2.499,2717,4.92,2718,3.961,2719,3.961,2720,3.187,2721,2.499,2722,2.499,2723,2.499,2724,2.499,2725,3.961,2726,2.499,2727,2.499,2728,2.499,2729,2.499,2730,2.499,2731,2.499,2732,2.499,2733,2.499,2734,2.499,2735,2.499,2736,2.499,2737,2.499,2738,2.499,2739,2.499,2740,2.499,2741,2.499,2742,2.499,2743,2.499,2744,2.499,2745,5.599,2746,2.499,2747,2.499,2748,2.499,2749,2.499,2750,5.599,2751,5.599,2752,2.499,2753,2.499,2754,2.499,2755,2.499,2756,2.499,2757,2.499,2758,2.499,2759,2.499,2760,2.499,2761,3.961,2762,2.204,2763,2.499,2764,2.499,2765,2.499,2766,2.499,2767,3.961,2768,2.499,2769,2.499,2770,2.499,2771,2.499,2772,2.499,2773,2.499,2774,2.499,2775,2.499,2776,2.499]],["title/classes/UserInfoUiCommand.html",[0,0.25,399,3.286]],["body/classes/UserInfoUiCommand.html",[0,0.239,2,0.742,3,0.161,4,0.074,5,0.074,8,0.243,9,0.758,10,1.724,12,1.055,13,2.077,14,2.808,15,3.221,16,2.297,17,0.388,19,0.824,20,0.009,21,0.711,22,0.364,23,0.692,26,0.76,27,3.098,29,1.943,30,0.737,31,0.144,32,2.883,33,2.196,35,0.779,36,0.857,37,1.225,38,0.346,39,0.798,40,1.387,45,2.232,46,2.417,49,0.093,50,1.473,51,1.882,58,1.684,60,1.531,62,2.078,64,2.785,65,1.606,67,1.701,73,1.107,74,2.151,76,1.72,77,2.002,79,0.006,80,0.006,196,1.62,215,2.743,216,1.113,222,1.225,231,1.499,249,2.417,278,2.947,327,2.534,342,3.221,353,3.712,399,4.362,405,2.559,415,1.387,420,2.151,436,0.878,589,3.356,657,3.674,658,2.525,669,2.785,670,3.56,673,4.798,675,4.362,687,2.947,698,4.092,699,2.647,774,2.008,1083,2.987,1296,3.385,1312,3.385,1727,3.712,1801,3.712,2007,3.385,2195,3.142,2389,5.832,2390,3.385,2391,5.153,2393,5.153,2394,6.394,2396,3.712,2398,5.919,2650,3.712,2777,5.84,2778,4.207,2779,5.84,2780,4.207,2781,5.84,2782,4.207,2783,4.207,2784,4.207,2785,4.207,2786,4.207,2787,4.207,2788,4.207,2789,4.207,2790,4.207,2791,4.207,2792,4.207,2793,3.712,2794,4.207,2795,4.207,2796,4.207,2797,4.207,2798,4.207,2799,4.207,2800,4.207,2801,4.207,2802,4.207]],["title/classes/UserKickEvent.html",[0,0.25,2691,2.529]],["body/classes/UserKickEvent.html",[0,0.434,2,0.679,3,0.076,4,0.068,5,0.068,8,0.222,9,0.712,12,1.155,17,0.426,19,0.674,20,0.009,21,0.483,22,0.37,23,0.566,30,0.486,31,0.109,38,0.316,49,0.169,65,1.823,67,2.557,70,3.377,73,1.297,79,0.006,80,0.006,112,2.007,202,1.229,203,2.813,213,3.639,218,3.844,220,1.621,231,2.483,280,3.729,307,1.968,436,1.598,502,2.41,506,2.911,513,4.181,515,1.968,518,4.688,522,3.026,527,4.884,600,4.4,681,2.212,714,2.618,820,1.837,2382,2.212,2566,2.911,2584,2.31,2624,3.152,2625,3.152,2681,2.212,2682,2.421,2683,4.877,2688,4.877,2689,2.548,2690,2.421,2691,3.152,2692,2.548,2693,3.632,2694,3.632,2695,3.632,2696,3.632,2697,3.152,2698,2.421,2803,5.486,2804,3.849,2805,3.849,2806,3.849]],["title/modules/UserModule.html",[92,1.527,108,3.083]],["body/modules/UserModule.html",[0,0.313,3,0.153,4,0.098,5,0.098,16,2.42,20,0.009,31,0.166,35,1.422,36,1.125,38,0.454,40,1.821,49,0.122,79,0.007,80,0.007,83,2.561,92,3.001,94,2.55,95,2.55,96,2.726,97,2.726,98,2.55,99,3.665,100,3.547,108,6.187,110,3.454,111,2.726,112,2.021,114,2.93,123,2.93,196,2.362,317,3.046,486,1.297,634,3.339,828,3.131,999,4.402,1083,3.578,1691,5.631,1786,5.226,1866,5.403,2317,5.737,2331,4.872,2807,4.872,2808,5.523,2809,4.872,2810,5.523,2811,6.997,2812,6.997,2813,6.174,2814,6.997,2815,5.523]],["title/classes/UserPurgeEvent.html",[0,0.25,2697,2.529]],["body/classes/UserPurgeEvent.html",[0,0.434,2,0.679,3,0.076,4,0.068,5,0.068,8,0.222,9,0.712,12,1.155,17,0.426,19,0.674,20,0.009,21,0.483,22,0.37,23,0.566,30,0.486,31,0.109,38,0.316,49,0.169,65,1.823,67,2.557,70,3.377,73,1.297,79,0.006,80,0.006,112,2.007,202,1.229,203,2.813,213,3.639,218,3.844,220,1.621,231,2.483,280,3.729,307,1.968,436,1.598,502,2.41,506,2.911,513,4.181,515,1.968,518,4.688,522,3.026,527,4.884,600,4.4,681,2.212,714,2.618,820,1.837,2382,2.212,2566,2.911,2584,2.31,2624,3.152,2625,3.152,2681,2.212,2682,2.421,2683,4.877,2688,4.877,2689,2.548,2690,2.421,2691,2.212,2692,2.548,2693,3.632,2694,3.632,2695,3.632,2696,3.632,2697,3.673,2698,2.421,2816,5.486,2817,3.849,2818,3.849,2819,3.849]],["title/classes/UserSendDMFailedEvent.html",[0,0.25,2624,2.529]],["body/classes/UserSendDMFailedEvent.html",[0,0.434,2,0.679,3,0.076,4,0.068,5,0.068,8,0.222,9,0.712,12,1.155,17,0.426,19,0.674,20,0.009,21,0.483,22,0.37,23,0.566,30,0.486,31,0.109,38,0.316,49,0.169,65,1.823,67,2.557,70,3.52,73,1.294,79,0.006,80,0.006,112,2.007,202,1.229,203,2.813,213,3.639,218,3.844,220,1.621,231,2.483,280,3.659,307,1.968,436,1.598,502,2.41,506,2.911,513,4.181,515,1.968,518,4.688,522,3.026,527,4.884,600,4.4,681,2.212,714,2.618,820,1.837,2382,2.212,2566,2.911,2584,2.31,2624,3.673,2625,3.152,2681,2.212,2682,2.421,2683,4.877,2688,4.877,2689,2.548,2690,2.421,2691,2.212,2692,2.548,2693,3.632,2694,3.632,2695,3.632,2696,3.632,2697,3.152,2698,2.421,2820,5.486,2821,3.849,2822,3.849,2823,3.849]],["title/classes/UserTimeOutDto.html",[0,0.25,2620,3.286]],["body/classes/UserTimeOutDto.html",[0,0.383,2,0.752,3,0.085,4,0.076,5,0.076,8,0.247,17,0.39,20,0.009,22,0.421,26,1.221,31,0.145,35,0.79,36,0.869,39,0.809,49,0.094,58,1.26,60,1.313,73,1.075,77,2.284,79,0.006,80,0.006,196,2.329,202,1.321,214,1.909,215,2.764,216,1.128,231,2.102,235,2.982,259,3.236,280,3.333,293,4.132,294,2.182,303,1.909,342,2.354,348,3.333,360,3.333,405,1.804,486,1.588,600,4.548,685,3.434,711,4.746,836,5.048,844,3.187,845,4.746,886,5.204,960,3.434,1107,3.187,1458,4.405,1951,3.434,1987,3.434,2017,5.952,2040,5.911,2047,5.048,2048,5.048,2051,3.765,2176,3.765,2177,4.746,2468,5.204,2533,3.434,2543,3.434,2545,5.204,2582,3.434,2620,4.405,2644,3.765,2762,3.765,2824,5.445,2825,3.765,2826,7.291,2827,4.267,2828,5.898,2829,5.898,2830,5.898,2831,5.898,2832,5.898,2833,5.898,2834,5.898,2835,4.267,2836,4.267,2837,4.267,2838,4.267,2839,4.267,2840,4.267,2841,3.765,2842,4.267,2843,4.267,2844,3.765,2845,4.267,2846,3.765,2847,4.267,2848,4.267,2849,5.898,2850,5.898,2851,5.898,2852,4.267,2853,4.267,2854,4.267,2855,4.267,2856,4.267,2857,4.267,2858,4.267,2859,4.267,2860,4.267,2861,4.267,2862,5.898,2863,4.267,2864,4.267,2865,4.267,2866,4.267,2867,4.267]],["title/classes/UserTimeOutEvent.html",[0,0.25,2566,2.335]],["body/classes/UserTimeOutEvent.html",[0,0.432,2,0.669,3,0.075,4,0.067,5,0.067,8,0.219,9,0.704,12,1.146,17,0.44,19,0.667,20,0.009,21,0.478,22,0.382,23,0.56,30,0.479,31,0.108,38,0.312,49,0.168,65,1.82,67,2.553,70,3.368,73,1.296,79,0.005,80,0.005,112,1.987,202,1.217,203,2.804,213,3.624,218,3.83,220,1.598,231,2.796,280,3.723,307,1.941,436,1.59,502,2.4,506,2.882,513,4.164,515,1.941,518,4.675,522,2.996,527,4.871,600,4.764,681,2.181,714,2.592,820,1.811,2382,2.181,2566,3.365,2584,2.278,2624,3.121,2625,3.121,2681,2.181,2682,2.387,2683,4.851,2688,4.851,2689,2.513,2690,2.387,2691,2.181,2692,2.513,2693,3.596,2694,3.596,2695,3.596,2696,3.596,2697,3.121,2698,2.387,2868,5.431,2869,3.795,2870,3.795,2871,3.795,2872,3.795]],["title/classes/UserTimeOutFailedEvent.html",[0,0.25,2625,2.529]],["body/classes/UserTimeOutFailedEvent.html",[0,0.43,2,0.66,3,0.074,4,0.066,5,0.066,8,0.216,9,0.697,12,1.137,17,0.451,19,0.66,20,0.009,21,0.473,22,0.392,23,0.555,30,0.472,31,0.107,38,0.308,49,0.167,65,1.817,67,2.548,70,3.508,73,1.295,79,0.005,80,0.005,112,1.968,202,1.205,203,2.796,213,3.609,218,3.816,220,1.576,231,2.785,280,3.716,307,1.914,436,1.583,502,2.39,506,2.853,513,4.147,515,1.914,518,4.663,522,2.966,527,4.858,600,4.749,681,2.151,714,2.566,820,1.786,2382,2.151,2566,2.853,2584,2.247,2624,3.09,2625,3.616,2681,2.151,2682,2.355,2683,4.824,2688,4.824,2689,2.478,2690,2.355,2691,2.151,2692,2.478,2693,3.56,2694,3.56,2695,3.56,2696,3.56,2697,3.09,2698,2.355,2873,5.377,2874,3.743,2875,3.743,2876,3.743,2877,3.743,2878,3.743]],["title/classes/UserToUser.html",[0,0.25,2478,3.286]],["body/classes/UserToUser.html",[0,0.305,2,0.948,3,0.107,4,0.095,5,0.095,8,0.31,17,0.397,20,0.009,22,0.401,26,1.243,31,0.151,35,1.273,36,1.095,39,1.019,49,0.119,60,1.044,73,0.966,77,2.386,79,0.007,80,0.007,196,2.438,202,1.541,235,3.101,259,3.269,348,2.895,486,1.615,498,5.313,769,6.802,836,4.013,842,5.664,844,4.013,949,3.765,2040,5.136,2047,4.013,2048,4.013,2161,4.324,2163,4.013,2169,4.553,2452,4.324,2460,4.324,2474,5.534,2478,5.136,2490,6.103,2491,4.324,2492,4.324,2494,4.324,2607,5.664,2613,6.067,2824,5.664,2841,4.741,2879,4.324,2880,5.373,2881,7.291,2882,7.582,2883,5.373,2884,7.584,2885,5.373,2886,5.373,2887,6.067,2888,5.373,2889,4.324,2890,4.741,2891,5.373,2892,5.373,2893,5.373,2894,5.373]],["title/coverage.html",[2895,4.499]],["body/coverage.html",[0,0.51,1,1.817,3,0.045,5,0.04,6,1.993,7,1.993,16,0.642,20,0.009,22,0.231,72,0.784,79,0.004,80,0.004,81,2.545,82,1.687,84,1.993,86,1.155,98,1.043,109,1.582,134,1.743,142,1.803,196,1.013,199,1.799,201,1.993,203,1.787,216,0.597,218,1.078,220,0.951,224,1.687,225,1.993,229,1.582,241,1.495,243,1.687,246,1.356,249,1.298,250,1.421,253,1.356,254,1.356,255,2.298,257,1.356,258,2.193,259,1.494,285,1.993,286,1.993,305,1.495,306,1.582,313,1.817,318,1.993,324,1.582,360,3.895,363,2.643,364,2.559,366,1.993,367,1.993,376,1.246,377,1.155,378,1.078,380,1.687,382,2.522,384,1.687,386,1.582,387,1.582,390,3.036,391,2.804,393,1.687,396,1.687,399,1.687,402,1.687,403,1.582,404,1.687,405,1.407,406,1.687,410,1.687,412,1.687,415,0.745,416,3.435,436,0.96,458,1.582,489,1.495,490,1.01,500,1.495,501,3.435,515,1.155,516,1.495,523,1.495,529,1.687,530,1.993,572,1.687,573,1.687,576,1.582,577,2.728,578,2.559,579,2.559,621,3.905,639,1.687,649,1.993,650,1.993,700,1.582,701,1.993,702,1.993,721,1.993,722,1.993,733,1.687,736,1.687,753,1.687,755,1.495,834,1.993,835,1.993,846,1.993,847,1.993,852,1.687,853,2.728,854,2.94,859,1.582,868,1.687,869,1.993,870,1.993,887,1.356,888,3.701,922,1.687,923,1.687,925,1.582,926,2.94,927,1.817,928,2.94,936,1.687,937,3.045,939,1.582,940,3.65,969,1.582,970,3.946,1007,1.582,1025,1.582,1027,1.582,1033,1.993,1040,4.504,1045,1.817,1046,1.993,1060,1.817,1061,1.817,1076,2.94,1084,2.099,1087,1.687,1088,3.841,1089,3.726,1090,2.94,1096,1.582,1104,1.495,1119,1.993,1120,2.94,1138,1.115,1139,1.421,1145,2.94,1190,1.687,1191,1.993,1214,1.582,1215,2.94,1216,2.559,1221,1.687,1224,1.582,1225,1.993,1226,1.993,1249,1.687,1257,1.817,1258,1.356,1260,1.817,1261,2.94,1263,1.817,1352,1.582,1353,1.817,1364,1.687,1367,1.817,1368,1.817,1369,1.817,1404,1.582,1411,1.817,1412,1.298,1415,1.687,1436,1.993,1457,1.687,1565,1.687,1566,1.993,1572,1.687,1590,1.993,1626,1.582,1663,1.687,1664,1.993,1670,1.687,1671,4.252,1691,1.817,1740,1.817,1773,3.567,1775,2.94,1787,1.993,1790,1.817,1812,1.817,1813,1.993,1814,1.993,1822,1.687,1823,3.222,1824,1.993,1838,1.495,1841,1.687,1857,2.94,1864,1.582,1865,1.582,1866,1.356,1883,1.993,1949,1.993,1967,4.333,2023,1.993,2024,1.993,2031,1.993,2034,1.993,2036,1.582,2037,1.993,2038,1.993,2052,1.993,2053,1.993,2081,1.817,2082,1.817,2083,1.817,2084,1.817,2184,1.687,2185,1.687,2190,2.94,2191,2.94,2215,1.993,2225,1.993,2237,1.993,2250,1.993,2251,1.993,2252,1.993,2257,1.817,2258,1.993,2262,2.94,2317,1.687,2318,1.993,2340,1.993,2347,1.993,2378,1.582,2379,2.728,2380,2.728,2387,1.687,2389,2.94,2390,2.94,2400,1.993,2410,1.993,2442,1.993,2478,1.687,2529,2.94,2566,1.198,2598,1.993,2599,1.993,2616,1.993,2620,1.687,2624,1.298,2625,1.298,2658,1.817,2659,1.993,2660,1.993,2681,1.298,2682,3.905,2691,1.298,2697,1.298,2699,1.993,2824,3.435,2825,1.993,2879,2.94,2889,1.817,2895,1.687,2896,2.258,2897,2.258,2898,8.455,2899,6.803,2900,7.523,2901,2.258,2902,2.258,2903,5.802,2904,5.802,2905,8.275,2906,1.993,2907,1.993,2908,7.381,2909,4.058,2910,4.058,2911,8.415,2912,3.223,2913,1.993,2914,1.993,2915,3.653,2916,2.258,2917,3.653,2918,2.258,2919,2.258,2920,2.258,2921,5.284,2922,2.258,2923,2.258,2924,1.993,2925,2.258,2926,2.258,2927,7.857,2928,3.653,2929,2.258,2930,2.258,2931,1.993,2932,1.993,2933,1.993,2934,4.662,2935,1.993,2936,7.648,2937,3.223,2938,1.993,2939,2.258,2940,3.653,2941,6.534,2942,6.208,2943,1.993,2944,1.993,2945,4.669,2946,1.993,2947,1.993,2948,2.258,2949,2.258,2950,2.258]],["title/dependencies.html",[95,2.447,2951,3.234]],["body/dependencies.html",[0,0.416,20,0.009,22,0.299,35,1.357,36,1.494,38,0.603,39,1.129,42,2.121,79,0.007,80,0.007,90,2.238,95,2.749,117,3.941,129,4.79,139,3.283,140,3.283,303,2.663,632,3.283,1064,4.79,1107,4.445,1266,5.252,1578,4.79,1839,3.941,1845,4.445,1860,3.941,1870,4.79,1903,5.252,1958,6.395,2952,5.952,2953,5.952,2954,5.952,2955,7.947,2956,5.952,2957,5.952,2958,7.333,2959,5.952,2960,5.952,2961,5.952,2962,5.952,2963,5.952,2964,5.952,2965,5.952,2966,5.952,2967,5.952,2968,5.952,2969,5.252,2970,5.952,2971,5.952,2972,5.952,2973,5.952,2974,5.952,2975,5.952,2976,5.952,2977,5.952,2978,5.952,2979,5.952,2980,5.952,2981,5.952]],["title/miscellaneous/functions.html",[2982,2.306,2983,4.674]],["body/miscellaneous/functions.html",[0,0.344,8,0.257,12,1.249,14,2.768,19,0.984,20,0.009,21,0.705,22,0.443,23,0.827,30,1.091,35,0.824,39,1.311,48,1.265,58,0.951,73,1.127,79,0.006,80,0.006,98,3.191,112,1.629,203,2.628,215,2.483,220,2.557,228,2.455,234,1.586,246,3.645,290,2.672,405,1.362,415,2.278,420,3.534,436,0.929,446,2.455,486,1.825,539,3.582,570,4.575,572,4.535,573,3.325,608,4.663,634,3.826,743,4.02,765,3.325,774,2.124,851,3.928,939,4.841,940,2.801,962,3.928,1040,5.143,1086,2.558,1089,2.672,1169,3.582,1272,3.325,1328,4.841,1363,3.582,1367,4.886,1368,3.582,1369,4.886,1459,4.575,1479,3.325,1480,3.325,1810,3.582,1986,3.928,2079,6.549,2081,4.886,2084,4.886,2167,3.928,2558,6.854,2585,3.325,2924,3.928,2931,3.928,2932,5.357,2933,5.357,2943,5.357,2944,5.357,2945,5.973,2946,3.928,2947,5.357,2982,2.801,2983,3.928,2984,4.452,2985,4.452,2986,4.452,2987,4.452,2988,6.097,2989,4.452,2990,4.452,2991,6.91,2992,6.91,2993,4.452,2994,4.452,2995,6.072,2996,3.928,2997,4.452,2998,4.452,2999,4.452,3000,4.452,3001,4.452,3002,6.072,3003,4.452,3004,6.072,3005,4.452,3006,6.072,3007,4.452,3008,4.452,3009,6.072,3010,6.097,3011,4.452,3012,4.452,3013,4.452,3014,3.928,3015,4.452,3016,4.452,3017,7.423,3018,6.072,3019,4.452,3020,4.452,3021,6.91,3022,6.072,3023,4.452]],["title/index.html",[8,0.212,3024,3.234,3025,3.234]],["body/index.html",[4,0.104,20,0.009,79,0.007,80,0.007,431,4.543,486,1.381,665,4.121,781,4.733,999,3.7,1032,4.393,1042,4.733,1468,5.189,2526,6.459,2611,6.422,2895,4.393,3026,5.882,3027,5.882,3028,7.279,3029,5.882,3030,5.882,3031,5.882,3032,5.882,3033,5.882,3034,7.905,3035,5.189,3036,5.882,3037,5.882,3038,5.189,3039,8.766,3040,5.882,3041,5.882,3042,5.189,3043,5.882,3044,6.422,3045,5.882,3046,5.882,3047,5.882,3048,5.882,3049,7.279,3050,7.279,3051,5.882,3052,5.882,3053,5.882,3054,6.422,3055,5.189,3056,5.882,3057,5.882,3058,5.882,3059,5.882,3060,4.733,3061,5.882,3062,5.882,3063,5.882,3064,5.882,3065,5.882,3066,5.882,3067,4.733,3068,5.882,3069,5.882,3070,5.882,3071,5.882,3072,5.882,3073,5.882,3074,4.393]],["title/classes/initGuildCommand.html",[0,0.25,396,3.286]],["body/classes/initGuildCommand.html",[0,0.173,2,0.537,3,0.061,4,0.054,5,0.054,8,0.176,9,0.599,10,1.541,12,0.835,16,1.77,17,0.322,19,0.685,20,0.009,21,0.679,22,0.28,23,0.576,25,3.434,26,0.835,27,2.577,29,2.876,30,0.583,31,0.124,32,2.281,34,1.751,35,0.564,36,0.621,37,0.887,38,0.25,39,0.578,40,1.005,45,1.617,46,1.751,47,1.617,48,0.866,49,0.067,50,0.768,51,1.363,55,2.363,58,0.651,60,1.624,62,2.185,65,1.749,77,2.102,79,0.005,80,0.005,197,3.738,216,2.081,222,0.887,272,2.913,348,1.283,355,5.28,396,3.45,415,2.206,483,1.917,486,0.716,490,2.994,493,3.917,504,3.422,611,5.011,612,5.011,669,3.059,670,3.737,673,3.694,698,4.362,725,4.923,729,3.718,742,2.017,755,2.017,771,4.076,773,3.059,774,2.971,798,3.718,828,2.067,1001,3.236,1011,1.829,1174,2.276,1258,2.773,1314,2.688,2127,4.923,2208,3.45,2273,5.904,2411,4.076,2412,4.076,2413,2.688,2415,4.076,2416,4.076,2417,4.076,2418,4.076,2419,4.076,2503,4.076,2504,6.065,2518,6.65,2605,7.531,2906,5.493,2907,2.688,2982,1.917,3055,2.688,3075,4.62,3076,3.047,3077,3.047,3078,4.62,3079,3.047,3080,3.047,3081,3.047,3082,6.226,3083,6.226,3084,3.047,3085,6.692,3086,3.047,3087,6.692,3088,3.047,3089,3.047,3090,3.047,3091,3.047,3092,4.62,3093,3.047,3094,6.226,3095,7.537,3096,7.537,3097,7.537,3098,3.047,3099,4.62,3100,4.62,3101,3.047,3102,3.047,3103,4.62,3104,3.047,3105,3.047,3106,4.62,3107,3.047,3108,3.047,3109,4.62,3110,3.047,3111,3.047,3112,4.62,3113,3.047,3114,3.047,3115,4.62,3116,3.047,3117,3.047,3118,3.047,3119,4.62,3120,3.047,3121,3.047,3122,4.62,3123,4.62,3124,4.62,3125,4.62,3126,3.047,3127,3.047,3128,3.047,3129,4.62,3130,7.537,3131,3.047,3132,3.047]],["title/license.html",[3024,3.234,3025,3.234,3074,2.738]],["body/license.html",[0,0.05,4,0.142,5,0.029,9,0.115,17,0.051,20,0.004,29,1.035,31,0.018,50,0.223,58,0.189,79,0.002,80,0.002,112,0.324,196,1.604,212,0.621,213,0.409,216,1.136,230,1.02,231,0.578,259,1.134,272,0.866,280,0.373,293,0.621,294,0.453,305,0.587,307,1.418,320,1.431,361,0.782,363,2.289,365,1.571,404,0.662,431,3.131,453,1.664,460,3.196,471,2.506,492,2.07,561,0.621,579,2.544,586,0.662,589,0.509,608,3.91,632,0.894,634,2.511,635,1.136,637,0.437,663,2.413,665,3.541,690,1.305,717,0.621,760,1.211,774,0.423,782,0.782,800,2.231,814,2.139,837,0.782,838,1.978,842,1.211,894,2.139,910,1.978,966,1.074,974,3.382,999,2.284,1001,0.621,1023,0.713,1028,1.211,1035,0.713,1038,0.782,1041,1.431,1048,6.353,1116,0.713,1218,1.744,1268,0.713,1310,4.642,1311,1.978,1312,1.804,1413,0.782,1456,2.07,1457,0.662,1458,1.211,1459,1.484,1477,1.431,1479,1.211,1480,3.605,1494,0.713,1522,1.431,1650,4.385,1747,3.775,1777,0.782,1778,2.231,1786,2.07,1808,0.713,1831,5.671,1927,0.782,1932,4.46,1944,0.782,1968,0.782,1977,0.782,1983,3.204,1987,2.922,1994,0.713,2020,1.211,2161,0.713,2177,0.713,2178,0.713,2321,0.713,2326,0.782,2348,1.305,2359,4.46,2364,1.431,2383,0.713,2489,1.305,2490,2.6,2504,2.231,2526,2.975,2533,3.206,2563,5.562,2576,0.782,2585,0.662,2593,1.978,2635,1.978,2651,3.791,2720,5.242,2793,1.431,2813,1.431,2844,0.782,2846,1.978,2895,1.211,2938,1.431,2969,0.782,2996,2.446,3010,1.431,3014,1.431,3038,2.446,3042,0.782,3044,0.782,3054,1.978,3060,1.804,3067,1.305,3074,6.517,3133,6.061,3134,5.926,3135,6.699,3136,6.584,3137,0.886,3138,0.886,3139,2.242,3140,7.14,3141,3.231,3142,5.926,3143,6.784,3144,3.231,3145,0.886,3146,0.886,3147,3.231,3148,6.863,3149,2.242,3150,2.242,3151,5.261,3152,2.242,3153,0.886,3154,2.242,3155,0.886,3156,0.886,3157,1.621,3158,5.261,3159,3.231,3160,3.984,3161,2.772,3162,1.621,3163,5.621,3164,4.297,3165,0.886,3166,0.886,3167,3.631,3168,1.621,3169,0.886,3170,0.886,3171,0.886,3172,5.055,3173,7.778,3174,2.242,3175,0.886,3176,0.886,3177,2.772,3178,4.576,3179,0.886,3180,4.576,3181,0.886,3182,3.231,3183,0.886,3184,0.886,3185,2.772,3186,0.886,3187,5.78,3188,0.886,3189,0.886,3190,0.886,3191,4.828,3192,2.242,3193,5.055,3194,3.231,3195,5.261,3196,0.886,3197,1.621,3198,0.886,3199,0.886,3200,2.242,3201,0.886,3202,0.886,3203,0.886,3204,5.055,3205,0.886,3206,1.621,3207,0.886,3208,0.886,3209,2.772,3210,0.886,3211,1.621,3212,0.886,3213,0.886,3214,2.242,3215,4.576,3216,6.061,3217,0.886,3218,3.791,3219,4.297,3220,0.886,3221,2.242,3222,0.886,3223,0.886,3224,0.886,3225,3.631,3226,2.772,3227,2.242,3228,1.621,3229,0.886,3230,2.772,3231,0.886,3232,2.242,3233,0.886,3234,1.621,3235,1.621,3236,2.242,3237,7.811,3238,0.886,3239,7.258,3240,5.449,3241,3.231,3242,3.231,3243,3.631,3244,2.242,3245,0.886,3246,2.242,3247,6.304,3248,1.621,3249,5.261,3250,0.886,3251,0.886,3252,0.886,3253,8.665,3254,0.886,3255,0.886,3256,1.621,3257,3.631,3258,0.886,3259,1.621,3260,0.886,3261,4.828,3262,0.886,3263,2.772,3264,0.886,3265,1.621,3266,7.744,3267,2.242,3268,4.576,3269,2.772,3270,0.886,3271,1.621,3272,2.242,3273,4.576,3274,4.828,3275,2.772,3276,0.886,3277,2.772,3278,1.621,3279,2.772,3280,2.772,3281,0.886,3282,2.242,3283,6.938,3284,1.621,3285,0.886,3286,4.297,3287,0.886,3288,3.631,3289,5.78,3290,2.242,3291,1.621,3292,3.984,3293,5.055,3294,3.631,3295,0.886,3296,1.621,3297,0.886,3298,0.886,3299,3.984,3300,0.886,3301,5.449,3302,1.621,3303,0.886,3304,0.886,3305,2.242,3306,0.886,3307,0.886,3308,0.886,3309,0.886,3310,2.242,3311,4.297,3312,2.772,3313,0.886,3314,0.886,3315,0.886,3316,1.621,3317,4.828,3318,0.886,3319,1.621,3320,0.886,3321,0.886,3322,2.242,3323,2.242,3324,3.984,3325,2.242,3326,2.242,3327,0.886,3328,0.886,3329,3.231,3330,3.231,3331,3.631,3332,0.886,3333,0.886,3334,1.621,3335,2.242,3336,0.886,3337,0.886,3338,0.886,3339,0.886,3340,0.886,3341,7.009,3342,2.242,3343,4.297,3344,0.886,3345,3.631,3346,1.621,3347,2.772,3348,0.886,3349,0.886,3350,1.621,3351,1.621,3352,2.772,3353,0.886,3354,0.886,3355,0.886,3356,0.886,3357,1.621,3358,3.231,3359,0.886,3360,1.621,3361,0.886,3362,0.886,3363,3.231,3364,2.772,3365,0.886,3366,2.772,3367,2.772,3368,0.886,3369,3.984,3370,2.772,3371,0.886,3372,3.231,3373,0.886,3374,1.621,3375,0.886,3376,0.886,3377,1.621,3378,0.886,3379,0.886,3380,0.886,3381,2.242,3382,2.242,3383,3.631,3384,0.886,3385,1.621,3386,0.886,3387,1.621,3388,1.621,3389,1.621,3390,0.886,3391,5.449,3392,1.621,3393,0.886,3394,0.886,3395,0.886,3396,0.886,3397,0.886,3398,0.886,3399,0.886,3400,2.242,3401,0.886,3402,5.78,3403,2.242,3404,0.886,3405,0.886,3406,0.886,3407,0.886,3408,3.231,3409,3.631,3410,0.886,3411,0.886,3412,2.242,3413,0.886,3414,0.886,3415,2.772,3416,0.886,3417,0.886,3418,0.886,3419,0.886,3420,0.782,3421,0.886,3422,0.886,3423,1.621,3424,0.886,3425,2.242,3426,0.886,3427,0.886,3428,1.621,3429,0.886,3430,0.886,3431,0.886,3432,0.886,3433,0.886,3434,1.621,3435,1.621,3436,1.621,3437,4.576,3438,0.886,3439,3.631,3440,0.886,3441,0.886,3442,1.621,3443,2.242,3444,2.242,3445,2.772,3446,2.772,3447,2.772,3448,0.886,3449,3.231,3450,0.886,3451,2.242,3452,2.242,3453,0.886,3454,1.621,3455,0.886,3456,1.621,3457,3.231,3458,1.621,3459,2.772,3460,2.772,3461,2.242,3462,5.621,3463,3.231,3464,0.886,3465,0.886,3466,2.242,3467,3.984,3468,1.621,3469,0.886,3470,0.886,3471,0.886,3472,0.886,3473,2.242,3474,0.886,3475,0.886,3476,0.886,3477,2.242,3478,0.886,3479,0.886,3480,1.621,3481,0.886,3482,0.886,3483,1.621,3484,0.886,3485,2.242,3486,0.886,3487,0.886,3488,2.242,3489,1.621,3490,3.631,3491,6.514,3492,2.242,3493,1.621,3494,1.621,3495,1.621,3496,1.621,3497,2.772,3498,1.621,3499,0.886,3500,0.886,3501,0.886,3502,0.886,3503,0.886,3504,3.631,3505,1.621,3506,0.886,3507,0.886,3508,0.886,3509,0.886,3510,1.621,3511,0.886,3512,1.621,3513,0.886,3514,3.231,3515,0.886,3516,4.297,3517,0.886,3518,5.055,3519,1.621,3520,0.886,3521,0.886,3522,0.886,3523,0.886,3524,0.886,3525,0.886,3526,1.621,3527,0.886,3528,2.242,3529,3.231,3530,2.772,3531,1.621,3532,0.886,3533,0.886,3534,0.886,3535,0.886,3536,0.886,3537,1.621,3538,0.886,3539,0.886,3540,0.886,3541,2.772,3542,0.886,3543,1.621,3544,0.886,3545,1.621,3546,0.886,3547,0.886,3548,2.242,3549,0.886,3550,0.886,3551,0.886,3552,0.886,3553,0.886,3554,0.886,3555,0.886,3556,0.886,3557,0.886,3558,0.886,3559,2.242,3560,0.886,3561,0.886,3562,0.886,3563,0.886,3564,0.886,3565,3.231,3566,0.886,3567,0.886,3568,0.886,3569,0.886,3570,0.886,3571,0.886,3572,0.886,3573,0.886,3574,0.886,3575,0.886,3576,0.886,3577,3.984,3578,2.242,3579,0.886,3580,2.772,3581,0.886,3582,0.886,3583,2.242,3584,0.886,3585,0.886,3586,2.242,3587,0.886,3588,1.621,3589,0.886,3590,0.886,3591,0.886,3592,0.886,3593,0.886,3594,0.886,3595,0.886,3596,0.886,3597,0.886,3598,0.886,3599,0.886,3600,0.886,3601,1.621,3602,1.621,3603,0.886,3604,0.886,3605,2.772,3606,0.886,3607,2.242,3608,1.621,3609,0.886,3610,1.621,3611,2.242,3612,2.242,3613,0.886,3614,1.621,3615,0.886,3616,2.242,3617,3.984,3618,0.886,3619,1.621,3620,1.621,3621,0.886,3622,0.886,3623,0.886,3624,0.886,3625,0.886,3626,0.886,3627,1.621,3628,0.886,3629,2.772,3630,2.242,3631,0.886,3632,3.231,3633,0.886,3634,0.886,3635,0.886,3636,0.886,3637,0.886,3638,0.886,3639,1.621,3640,1.621,3641,1.621,3642,2.242,3643,0.886,3644,1.621,3645,2.242,3646,0.886,3647,1.621,3648,0.886,3649,1.621,3650,0.886,3651,0.886,3652,1.621,3653,6.699,3654,2.242,3655,0.886,3656,3.231,3657,4.828,3658,2.242,3659,0.886,3660,0.886,3661,0.886,3662,2.772,3663,0.886,3664,2.242,3665,0.886,3666,0.886,3667,0.886,3668,0.886,3669,0.886,3670,0.886,3671,0.886,3672,2.772,3673,1.621,3674,0.886,3675,0.886,3676,2.242,3677,0.886,3678,1.621,3679,2.242,3680,1.621,3681,0.886,3682,0.886,3683,0.886,3684,0.886,3685,1.621,3686,2.242,3687,0.886,3688,0.886,3689,1.621,3690,0.886,3691,1.621,3692,0.886,3693,0.886,3694,0.886,3695,0.886,3696,0.886,3697,0.886,3698,2.242,3699,1.621,3700,0.886,3701,0.886,3702,0.886,3703,2.772,3704,0.886,3705,2.242,3706,0.886,3707,0.886,3708,0.886,3709,1.621,3710,0.886,3711,0.886,3712,0.886,3713,2.242,3714,1.621,3715,1.621,3716,0.886,3717,1.621,3718,3.984,3719,1.621,3720,2.242,3721,2.772,3722,0.886,3723,0.886,3724,1.621,3725,0.886,3726,2.242,3727,0.886,3728,1.621,3729,0.886,3730,0.886,3731,0.886,3732,0.886,3733,2.772,3734,0.886,3735,2.242,3736,1.621,3737,0.886,3738,1.621,3739,0.886,3740,0.886,3741,0.886,3742,1.621,3743,1.621,3744,0.886,3745,1.621,3746,0.886,3747,0.886,3748,0.886,3749,0.886,3750,0.886,3751,2.242,3752,0.886,3753,0.886,3754,0.886,3755,1.621,3756,2.772,3757,1.621,3758,2.242,3759,0.886,3760,0.886,3761,0.886,3762,0.886,3763,1.621,3764,0.886,3765,0.886,3766,0.886,3767,0.886,3768,0.886,3769,0.886,3770,0.886,3771,0.886,3772,0.886,3773,0.886,3774,0.886,3775,0.886,3776,0.886,3777,0.886,3778,2.772,3779,0.886,3780,0.886,3781,1.621,3782,0.886,3783,0.886,3784,0.886,3785,0.886,3786,0.886,3787,0.886,3788,0.886,3789,0.886,3790,0.886,3791,0.886,3792,0.886,3793,0.886,3794,1.621,3795,0.886,3796,0.886,3797,0.886,3798,0.886,3799,0.886,3800,0.886,3801,1.621,3802,0.886,3803,0.886,3804,0.886,3805,0.886,3806,0.886,3807,0.886,3808,0.886,3809,0.886,3810,1.621,3811,1.621,3812,3.231,3813,0.886,3814,0.886,3815,0.886,3816,0.886,3817,0.886,3818,0.886,3819,0.886,3820,2.242,3821,1.621,3822,0.886,3823,1.621,3824,1.621,3825,1.621,3826,0.886,3827,0.886,3828,0.886,3829,0.886,3830,0.886,3831,0.886,3832,1.621,3833,0.886,3834,0.886,3835,0.886,3836,1.621,3837,0.886,3838,2.242,3839,0.886,3840,0.886,3841,0.886,3842,0.886,3843,0.886,3844,0.886,3845,0.886,3846,0.886,3847,0.886,3848,0.886,3849,0.886,3850,1.621,3851,0.886,3852,0.886,3853,0.886,3854,0.886,3855,0.886,3856,0.886,3857,0.886,3858,0.886,3859,0.886,3860,0.886,3861,0.886,3862,0.886,3863,0.886,3864,0.886,3865,0.886,3866,0.886,3867,0.886,3868,0.886,3869,0.886,3870,1.621,3871,1.621,3872,0.886,3873,0.886,3874,0.886,3875,0.886,3876,0.886,3877,0.886,3878,0.886,3879,0.886,3880,0.886,3881,0.886,3882,0.886,3883,0.886,3884,0.886,3885,0.886,3886,0.886,3887,0.886,3888,0.886,3889,0.886,3890,0.886,3891,0.886,3892,0.886,3893,0.886,3894,0.886,3895,0.886,3896,0.886,3897,0.886,3898,0.782,3899,0.886]],["title/modules.html",[94,2.782]],["body/modules.html",[20,0.008,79,0.008,80,0.008,93,4.708,94,2.911,104,4.417,105,4.417,106,4.417,107,4.417,108,4.417,130,4.174,132,4.174,136,4.174,141,4.174,1134,4.417,1403,4.417,3060,7.367,3900,9.154,3901,9.154,3902,9.154]],["title/overview.html",[3903,5.315]],["body/overview.html",[2,0.666,16,2.446,20,0.009,79,0.005,80,0.005,83,1.382,92,1.311,93,6.508,94,1.744,95,1.744,96,1.864,97,1.864,98,1.744,99,1.802,100,1.744,101,3.331,102,3.331,103,3.331,104,5.872,105,6.342,106,6.03,107,6.07,108,5.616,109,4.431,110,2.671,111,1.864,112,1.382,130,5.188,132,5.307,136,5.483,141,5.483,200,1.5,241,5.188,310,3.331,311,3.331,312,3.331,313,5.09,365,2.645,374,3.331,375,3.331,376,4.623,377,4.235,378,4,471,2.375,925,4.431,1104,5.188,1134,6.165,1135,3.331,1136,3.331,1137,3.331,1138,4.029,1139,4.346,1224,4.431,1352,4.431,1399,3.331,1400,3.331,1401,3.331,1402,3.331,1403,5.616,1404,4.431,1417,3.331,1419,3.331,1585,3.331,1587,3.331,1686,3.331,1688,3.331,1774,2.375,1838,5.188,1861,3.331,1862,3.331,1863,3.331,1864,4.431,1865,4.431,1866,4.811,2807,3.331,2809,3.331,3420,3.331,3903,3.331,3904,5.411,3905,3.776,3906,3.776]],["title/properties.html",[202,1.187,2951,3.234]],["body/properties.html",[20,0.009,21,0.587,35,1.235,79,0.008,80,0.008,202,1.494,486,1.567,634,3.748,760,4.982,827,5.885,828,3.514,1008,4.417,1044,5.368,1218,4.197,1270,5.885,1456,4.982,2323,5.368,2349,5.885,2489,5.368,3035,5.885,3067,5.368,3074,4.982,3136,5.885,3898,5.885,3907,6.671,3908,6.671,3909,6.671,3910,6.671,3911,6.671,3912,6.671,3913,6.671,3914,6.671]],["title/miscellaneous/typealiases.html",[2982,2.306,3915,5.298]],["body/miscellaneous/typealiases.html",[8,0.407,20,0.008,22,0.354,79,0.008,80,0.008,249,4.66,250,5.102,1967,5.264,2982,4.435,3916,7.049,3917,7.155]],["title/miscellaneous/variables.html",[1653,4.263,2982,2.306]],["body/miscellaneous/variables.html",[0,0.275,8,0.141,10,0.851,20,0.009,21,0.342,22,0.447,30,0.491,48,2.051,55,3.45,58,1.613,60,1.493,62,0.616,67,1.873,70,1.546,72,1.683,73,1.185,77,0.729,79,0.004,80,0.004,81,0.826,192,2.156,193,2.156,196,1.784,202,0.872,203,2.368,212,3.397,214,3.81,215,3.482,216,1.784,231,2.291,235,1.591,252,3.45,254,2.91,255,1.537,258,1.467,259,1.983,272,1.504,305,3.21,306,2.726,327,1.688,342,3.049,360,2.708,364,2.726,368,2.156,403,2.726,405,1.846,415,0.806,417,3.05,418,1.712,425,2.576,431,4.543,436,1.342,437,2.576,446,2.674,451,2.708,453,2.336,490,1.093,502,1.483,504,2.827,608,3.86,617,2.065,634,1.166,642,3.05,660,1.712,769,3.902,781,3.131,828,1.093,842,2.906,855,3.624,858,2.91,862,2.91,863,3.05,864,3.05,865,2.726,871,1.404,874,1.712,888,1.966,889,2.156,890,2.156,891,2.156,892,2.156,893,2.156,894,1.618,897,2.906,916,2.906,922,3.621,923,2.906,924,2.906,937,1.618,940,1.537,949,1.712,970,1.825,971,3.131,972,3.131,973,3.131,974,2.726,975,3.131,1010,1.966,1011,2.91,1012,3.131,1014,3.131,1016,1.966,1025,3.397,1027,2.726,1028,1.825,1029,1.966,1030,1.966,1060,3.131,1061,3.131,1083,1.25,1239,1.966,1242,3.902,1258,3.319,1260,3.131,1261,3.131,1263,3.131,1288,2.156,1289,2.156,1326,2.156,1328,2.726,1375,3.433,1412,3.177,1459,1.618,1478,1.966,1491,2.156,1530,1.966,1653,1.966,1670,3.621,1671,3.131,1756,1.966,1773,3.695,1775,3.131,1790,3.131,1798,2.156,1799,2.156,1806,3.433,1807,2.156,1808,1.966,1809,2.156,1810,1.966,1811,2.156,1812,3.131,1839,2.576,1915,1.966,1967,1.825,1988,2.156,1994,1.966,1995,2.156,1996,2.156,1997,3.433,1998,2.156,1999,2.156,2000,2.156,2001,2.156,2002,2.156,2003,3.433,2004,2.156,2005,2.156,2006,2.156,2007,1.966,2008,2.156,2009,2.156,2010,2.156,2011,2.156,2012,2.156,2013,2.156,2014,2.156,2015,2.156,2016,2.156,2017,1.712,2018,1.966,2020,1.825,2021,2.156,2082,3.131,2083,3.131,2159,2.156,2163,1.825,2169,2.576,2262,1.966,2285,2.156,2452,1.966,2460,1.966,2474,3.131,2491,1.966,2492,1.966,2494,1.966,2529,1.966,2568,2.156,2720,3.131,2824,1.825,2879,3.131,2881,4.278,2882,4.878,2887,2.156,2889,3.131,2890,2.156,2909,2.156,2910,4.878,2912,4.878,2913,3.433,2914,3.433,2934,5.674,2935,4.278,2937,4.278,2945,3.902,2982,1.537,2988,3.433,3218,3.433,3917,3.433,3918,4.848,3919,2.443,3920,2.443,3921,2.443,3922,2.443,3923,5.529,3924,2.443,3925,3.891,3926,3.891,3927,3.891,3928,3.891,3929,2.443,3930,2.443,3931,3.891,3932,5.529,3933,3.891,3934,2.443,3935,3.891,3936,2.443,3937,3.891,3938,3.891,3939,3.891,3940,6.037,3941,5.529,3942,2.443,3943,2.443,3944,3.891,3945,4.848,3946,5.529,3947,2.443,3948,2.443,3949,2.443,3950,2.443,3951,2.443,3952,2.443,3953,2.443,3954,2.443,3955,2.443,3956,2.443,3957,2.443,3958,2.443,3959,2.443]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":360,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":3907,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":2965,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2979,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2964,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2972,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2898,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2922,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2916,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2917,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2923,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2920,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2918,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2900,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":2902,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2905,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2899,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2903,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2908,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2904,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2921,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2915,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":914,"title":{},"body":{"classes/DiscordUser.html":{}}}],["00:00:00",{"_index":2541,"title":{},"body":{"injectables/TasksService.html":{}}}],["1",{"_index":814,"title":{"classes/SelfDto-1.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"license.html":{}}}],["1.7.0",{"_index":2975,"title":{},"body":{"dependencies.html":{}}}],["1.7.7",{"_index":2963,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2936,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2942,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":2939,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":3403,"title":{},"body":{"license.html":{}}}],["10.0.3",{"_index":2958,"title":{},"body":{"dependencies.html":{}}}],["10.4.2",{"_index":2955,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":2927,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":2176,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/UserTimeOutDto.html":{}}}],["1011511871297302608",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"injectables/ModRequestFlow.html":{}}}],["1011513775054143632",{"_index":2107,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["1011529685357838376",{"_index":1390,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["1011532621412577350",{"_index":2099,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["1042351896",{"_index":1316,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["1051979218164125826",{"_index":1391,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["1056592866660581456",{"_index":439,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["1080070968900333578",{"_index":443,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["11",{"_index":2938,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["1132244079242133555",{"_index":1392,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["12",{"_index":3904,"title":{},"body":{"overview.html":{}}}],["123",{"_index":1472,"title":{},"body":{"injectables/GuildService.html":{}}}],["1234",{"_index":907,"title":{},"body":{"classes/DiscordUser.html":{}}}],["123456789012345678",{"_index":916,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["128",{"_index":1682,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["13",{"_index":3893,"title":{},"body":{"license.html":{}}}],["14",{"_index":1508,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["14.16.2",{"_index":2966,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":3619,"title":{},"body":{"license.html":{}}}],["1567081521233",{"_index":1030,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":3620,"title":{},"body":{"license.html":{}}}],["1600000000000",{"_index":1016,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["1671981769958",{"_index":432,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["19",{"_index":3137,"title":{},"body":{"license.html":{}}}],["1996",{"_index":3422,"title":{},"body":{"license.html":{}}}],["2",{"_index":663,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["2.0.3",{"_index":2957,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":2928,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":2948,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3420,"title":{},"body":{"license.html":{},"overview.html":{}}}],["200",{"_index":550,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["2007",{"_index":3139,"title":{},"body":{"license.html":{}}}],["24",{"_index":2865,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["28",{"_index":3774,"title":{},"body":{"license.html":{}}}],["3",{"_index":471,"title":{},"body":{"classes/Channel.html":{},"classes/CleanWfpMember.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SpecialCommand.html":{},"license.html":{},"overview.html":{}}}],["3.0",{"_index":3913,"title":{},"body":{"properties.html":{}}}],["3.0.3",{"_index":2954,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":2956,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":2919,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2930,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1457,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"coverage.html":{},"license.html":{}}}],["322822954796974080",{"_index":1771,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["4",{"_index":3452,"title":{},"body":{"license.html":{}}}],["4.0.0",{"_index":2970,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":2973,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":2960,"title":{},"body":{"dependencies.html":{}}}],["4.26.1",{"_index":2981,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":2178,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["5,7",{"_index":1126,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["5.2.5",{"_index":2952,"title":{},"body":{"dependencies.html":{}}}],["5.3.7",{"_index":2953,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":2926,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2941,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":1319,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["500ms",{"_index":1309,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["52",{"_index":3905,"title":{},"body":{"overview.html":{}}}],["559623534870528",{"_index":1029,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":3906,"title":{},"body":{"overview.html":{}}}],["6.0.1",{"_index":2962,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2177,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["616609333832187924",{"_index":437,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["63",{"_index":2097,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["6b",{"_index":3511,"title":{},"body":{"license.html":{}}}],["6d",{"_index":3535,"title":{},"body":{"license.html":{}}}],["7",{"_index":2593,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["7.2.0",{"_index":2980,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":2925,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":2929,"title":{},"body":{"coverage.html":{}}}],["8.0.7",{"_index":2961,"title":{},"body":{"dependencies.html":{}}}],["832170662491062333",{"_index":456,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["89q12",{"_index":3914,"title":{},"body":{"properties.html":{}}}],["9.4.0",{"_index":2977,"title":{},"body":{"dependencies.html":{}}}],["900s",{"_index":1882,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["__bot_event__",{"_index":3929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__bot_event_handler__",{"_index":368,"title":{},"body":{"interfaces/BotEvent.html":{},"miscellaneous/variables.html":{}}}],["__bot_event_handler__(...args",{"_index":369,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["__rank__",{"_index":3955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_addmembertochanneloverwrite",{"_index":1437,"title":{},"body":{"injectables/GuildService.html":{}}}],["_addmembertochanneloverwrite(user_id",{"_index":1447,"title":{},"body":{"injectables/GuildService.html":{}}}],["_count",{"_index":1528,"title":{},"body":{"injectables/GuildService.html":{}}}],["_days",{"_index":2849,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_fetchguilds",{"_index":2350,"title":{},"body":{"injectables/SelfService.html":{}}}],["_fetchguilds(userid",{"_index":2354,"title":{},"body":{"injectables/SelfService.html":{}}}],["_getguildidfromselectmenu",{"_index":2054,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["_getguildidfromselectmenu(interaction",{"_index":2061,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["_getmessage",{"_index":2777,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["_getmessage(msgid",{"_index":2779,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["_hours",{"_index":2850,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_ismemberadmin",{"_index":1692,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberadmin(user_id",{"_index":1705,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismembermod",{"_index":1693,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismembermod(user_id",{"_index":1708,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberverified",{"_index":1694,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberverified(user_id",{"_index":1710,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_minutes",{"_index":2851,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_removememberfromchanneloverwrite",{"_index":1438,"title":{},"body":{"injectables/GuildService.html":{}}}],["_removememberfromchanneloverwrite(user_id",{"_index":1451,"title":{},"body":{"injectables/GuildService.html":{}}}],["aber",{"_index":955,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["abgeschickt",{"_index":833,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["ability",{"_index":3585,"title":{},"body":{"license.html":{}}}],["above",{"_index":838,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"license.html":{}}}],["absence",{"_index":3448,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":3860,"title":{},"body":{"license.html":{}}}],["acc",{"_index":1538,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[channelid",{"_index":1536,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[channelid][userid",{"_index":1537,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[date",{"_index":1549,"title":{},"body":{"injectables/GuildService.html":{}}}],["accent",{"_index":896,"title":{},"body":{"classes/DiscordUser.html":{}}}],["accentcolor",{"_index":889,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["accept",{"_index":3673,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":3672,"title":{},"body":{"license.html":{}}}],["accepted",{"_index":1301,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["access",{"_index":3218,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":3228,"title":{},"body":{"license.html":{}}}],["accesstoken",{"_index":1905,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["accompanied",{"_index":3492,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":3864,"title":{},"body":{"license.html":{}}}],["accomplish",{"_index":3231,"title":{},"body":{"license.html":{}}}],["accord",{"_index":3447,"title":{},"body":{"license.html":{}}}],["according",{"_index":3855,"title":{},"body":{"license.html":{}}}],["account",{"_index":2838,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["accumulator",{"_index":1548,"title":{},"body":{"injectables/GuildService.html":{}}}],["achieve",{"_index":3869,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":3379,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":3724,"title":{},"body":{"license.html":{}}}],["action",{"_index":249,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["actionrowbuilder",{"_index":742,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["actionrowbuilder().addcomponents",{"_index":798,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["actionrowbuilder().addcomponents(button",{"_index":772,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["actionrowbuilder().addcomponents(needhelpbutton",{"_index":965,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{}}}],["actions",{"_index":305,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["actions)[number",{"_index":2019,"title":{},"body":{"classes/LogEntry.html":{}}}],["actions})@isoptional()@isstring()@isin(actions",{"_index":291,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["activities",{"_index":3282,"title":{},"body":{"license.html":{}}}],["activity",{"_index":2576,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["actual",{"_index":3749,"title":{},"body":{"license.html":{}}}],["actually",{"_index":3558,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":3260,"title":{},"body":{"license.html":{}}}],["add",{"_index":800,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["addchanneltypes",{"_index":3094,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["added",{"_index":1312,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["addfields",{"_index":687,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/UserInfoUiCommand.html":{}}}],["additional",{"_index":3462,"title":{},"body":{"license.html":{}}}],["addmember",{"_index":1227,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["addmember(member",{"_index":1234,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["addmember(userid",{"_index":1712,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addmembers",{"_index":1695,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addmembers(guildid",{"_index":1714,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addreactions",{"_index":1020,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["address",{"_index":3806,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":3255,"title":{},"body":{"license.html":{}}}],["addrolecommand",{"_index":1,"title":{"classes/AddRoleCommand.html":{}},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["admin",{"_index":1011,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RoleResponse.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["administrator",{"_index":2222,"title":{},"body":{"classes/PingCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["adminroleid",{"_index":2411,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["adopted",{"_index":3419,"title":{},"body":{"license.html":{}}}],["adversely",{"_index":3592,"title":{},"body":{"license.html":{}}}],["advised",{"_index":3851,"title":{},"body":{"license.html":{}}}],["affects",{"_index":3593,"title":{},"body":{"license.html":{}}}],["affero",{"_index":3134,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":3704,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":3375,"title":{},"body":{"license.html":{}}}],["against",{"_index":3436,"title":{},"body":{"license.html":{}}}],["agb",{"_index":1302,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["aggregate",{"_index":3477,"title":{},"body":{"license.html":{}}}],["agpl",{"_index":3898,"title":{},"body":{"license.html":{},"properties.html":{}}}],["agree",{"_index":3787,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3837,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3735,"title":{},"body":{"license.html":{}}}],["aka",{"_index":466,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["algorithm",{"_index":1910,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["alias",{"_index":2940,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3916,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":3712,"title":{},"body":{"license.html":{}}}],["allow",{"_index":2103,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["allowed",{"_index":3154,"title":{},"body":{"license.html":{}}}],["along",{"_index":3449,"title":{},"body":{"license.html":{}}}],["already",{"_index":1116,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["alternate",{"_index":3201,"title":{},"body":{"license.html":{}}}],["alternative",{"_index":3507,"title":{},"body":{"license.html":{}}}],["always",{"_index":906,"title":{},"body":{"classes/DiscordUser.html":{}}}],["amazing",{"_index":3061,"title":{},"body":{"index.html":{}}}],["americano",{"_index":2454,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["ancillary",{"_index":3674,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":3194,"title":{},"body":{"license.html":{}}}],["anfrage",{"_index":2112,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["anliegen",{"_index":2609,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["annotation",{"_index":3939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anouncement.command",{"_index":389,"title":{},"body":{"modules/BotModule.html":{}}}],["anouncement.command.ts",{"_index":2191,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["anouncement.command.ts:19",{"_index":2194,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{}}}],["anouncement.command.ts:57",{"_index":2213,"title":{},"body":{"classes/MumVoiceCommandUi.html":{}}}],["anouncement.dto",{"_index":2198,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["anouncement.dto.ts",{"_index":2038,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"coverage.html":{}}}],["anouncement.dto.ts:15",{"_index":2041,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["anouncement.dto.ts:25",{"_index":2046,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["answer",{"_index":806,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{}}}],["answer.value",{"_index":816,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answercomponentrow",{"_index":797,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answerinput",{"_index":793,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answers",{"_index":812,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["anti",{"_index":3407,"title":{},"body":{"license.html":{}}}],["antwort",{"_index":829,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["anyone",{"_index":3460,"title":{},"body":{"license.html":{}}}],["anything",{"_index":3269,"title":{},"body":{"license.html":{}}}],["apfelkuchen",{"_index":2449,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["api",{"_index":1008,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"properties.html":{}}}],["apibearerauth",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apibody",{"_index":564,"title":{},"body":{"controllers/ChannelController.html":{}}}],["apiheader",{"_index":1843,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["apioperation",{"_index":565,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":477,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["apiproperty({type",{"_index":1079,"title":{},"body":{"classes/Guild.html":{},"classes/LogEntryDto.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["apipropertyoptional",{"_index":304,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SettingsDto.html":{}}}],["apipropertyoptional({type",{"_index":289,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/SelfDto.html":{}}}],["apiresponse",{"_index":566,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":567,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{}}}],["apitags('/channel",{"_index":581,"title":{},"body":{"controllers/ChannelController.html":{}}}],["apitags('/role",{"_index":2286,"title":{},"body":{"controllers/RoleController.html":{}}}],["apitags('auth/jwt",{"_index":1847,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["app",{"_index":1042,"title":{},"body":{"interfaces/EventToLog.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":2236,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":82,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":3273,"title":{},"body":{"license.html":{}}}],["application",{"_index":1038,"title":{},"body":{"interfaces/EventToLog.html":{},"license.html":{}}}],["application/x",{"_index":1930,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["applicationcommandtype",{"_index":2195,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["applicationcommandtype.chatinput",{"_index":2201,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["applicationcommandtype.message",{"_index":2211,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["applicationcommandtype.user",{"_index":2784,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["applications",{"_index":3033,"title":{},"body":{"index.html":{}}}],["applies",{"_index":3813,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3249,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":93,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":3292,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":3441,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":3859,"title":{},"body":{"license.html":{}}}],["apps",{"_index":2998,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appservice",{"_index":109,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archive",{"_index":3890,"title":{},"body":{"license.html":{}}}],["args",{"_index":372,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["argumentshost",{"_index":629,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["arising",{"_index":3841,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":3745,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":3758,"title":{},"body":{"license.html":{}}}],["array",{"_index":446,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["article",{"_index":3416,"title":{},"body":{"license.html":{}}}],["ask",{"_index":759,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{}}}],["assert",{"_index":3190,"title":{},"body":{"license.html":{}}}],["assets",{"_index":3693,"title":{},"body":{"license.html":{}}}],["associated",{"_index":3353,"title":{},"body":{"license.html":{}}}],["assume",{"_index":3831,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":3863,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":3641,"title":{},"body":{"license.html":{}}}],["async",{"_index":10,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["at(unixtimestamp",{"_index":1015,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["attach",{"_index":3871,"title":{},"body":{"license.html":{}}}],["attaches",{"_index":2606,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["attachment",{"_index":1363,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"injectables/GuildUserService.html":{},"miscellaneous/functions.html":{}}}],["attachment.url",{"_index":1382,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["attachments",{"_index":1726,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["attachmenttype",{"_index":3004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attachtment",{"_index":1369,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["attempt",{"_index":3651,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":3622,"title":{},"body":{"license.html":{}}}],["auditevents",{"_index":313,"title":{},"body":{"modules/AuditLogModule.html":{},"coverage.html":{},"overview.html":{}}}],["auditlog",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"injectables/GuildService.html":{}}}],["auditlog.controller",{"_index":315,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["auditlog.events",{"_index":316,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["auditlog.service",{"_index":242,"title":{},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{}}}],["auditlog/auditlog.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["auditlogcontroller",{"_index":224,"title":{"controllers/AuditLogController.html":{}},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"coverage.html":{}}}],["auditlogfilterdto",{"_index":229,"title":{"classes/AuditLogFilterDto.html":{}},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"coverage.html":{}}}],["auditlogmodule",{"_index":136,"title":{"modules/AuditLogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/ModerationModule.html":{},"modules.html":{},"overview.html":{}}}],["auditlogservice",{"_index":241,"title":{"injectables/AuditLogService.html":{}},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"coverage.html":{},"overview.html":{}}}],["auf",{"_index":959,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["aus",{"_index":2164,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["auth",{"_index":1825,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.controller",{"_index":1872,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.controller.ts",{"_index":1824,"title":{},"body":{"controllers/JwtAuthController.html":{},"coverage.html":{}}}],["auth.controller.ts:35",{"_index":1836,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.controller.ts:40",{"_index":1830,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.guard",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":1857,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["auth.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.module.ts",{"_index":1867,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.service",{"_index":1840,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{}}}],["auth.service.ts",{"_index":1883,"title":{},"body":{"injectables/JwtAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:12",{"_index":1889,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:21",{"_index":1893,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:45",{"_index":1895,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:57",{"_index":1897,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:66",{"_index":1891,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.strategy",{"_index":1868,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.strategy.ts",{"_index":1949,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:17",{"_index":1955,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:7",{"_index":1953,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth/jwt/guards/jwt",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"controllers/GuildSettingsController.html":{},"controllers/SelfController.html":{}}}],["auth/jwt/jwt",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":1859,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{}}}],["authguard('jwt",{"_index":1858,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{}}}],["author",{"_index":3067,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["authorization",{"_index":1944,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["authorization_code",{"_index":1924,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["authorized",{"_index":3613,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":3719,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":3762,"title":{},"body":{"license.html":{}}}],["authors",{"_index":3630,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":1849,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auto",{"_index":1088,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["autodeletechannel",{"_index":1091,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["autodeletechannel.channelid",{"_index":1157,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["autodeletechannels",{"_index":1111,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{}}}],["automatic",{"_index":3683,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":3366,"title":{},"body":{"license.html":{}}}],["available",{"_index":3204,"title":{},"body":{"license.html":{}}}],["avatar",{"_index":899,"title":{},"body":{"classes/DiscordUser.html":{}}}],["avatarurl",{"_index":871,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/Guild.html":{},"controllers/GuildUserController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["average",{"_index":1455,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperchannellastmonth",{"_index":1439,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperchannellastmonth(guildid",{"_index":1453,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperdaylastmonth",{"_index":1440,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperdaylastmonth(guildid",{"_index":1481,"title":{},"body":{"injectables/GuildService.html":{}}}],["avg(subquery.messagecount",{"_index":1465,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecount",{"_index":1466,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecounts",{"_index":1539,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecounts[channelid",{"_index":1545,"title":{},"body":{"injectables/GuildService.html":{}}}],["avoid",{"_index":2773,"title":{},"body":{"controllers/UserController.html":{}}}],["await",{"_index":62,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":3166,"title":{},"body":{"license.html":{}}}],["axios",{"_index":1578,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":1899,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["b",{"_index":3331,"title":{},"body":{"license.html":{}}}],["b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/.test",{"_index":2847,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/g",{"_index":2853,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["backers",{"_index":3062,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":1837,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["badrequestexception('no",{"_index":1854,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["ban",{"_index":2018,"title":{},"body":{"classes/LogEntry.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["banned",{"_index":2690,"title":{},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["banner",{"_index":901,"title":{},"body":{"classes/DiscordUser.html":{}}}],["bannerurl",{"_index":890,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["banuser",{"_index":2700,"title":{},"body":{"controllers/UserController.html":{}}}],["banuser(guildid",{"_index":2705,"title":{},"body":{"controllers/UserController.html":{}}}],["base64",{"_index":987,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["base64resolvable",{"_index":984,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["based",{"_index":579,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{},"license.html":{}}}],["baseguildtextchannel",{"_index":1500,"title":{},"body":{"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["baseguildtextchannel).permissionoverwrites.delete",{"_index":2595,"title":{},"body":{"injectables/TasksService.html":{}}}],["baseinteraction",{"_index":2665,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["basic",{"_index":3368,"title":{},"body":{"license.html":{}}}],["bearbeiten",{"_index":789,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["bearer",{"_index":1945,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["become",{"_index":3203,"title":{},"body":{"license.html":{}}}],["becomes",{"_index":3222,"title":{},"body":{"license.html":{}}}],["before",{"_index":503,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"injectables/GuildMemberEvents.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["behalf",{"_index":3393,"title":{},"body":{"license.html":{}}}],["bei",{"_index":2640,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["being",{"_index":1522,"title":{},"body":{"injectables/GuildService.html":{},"license.html":{}}}],["bekommen",{"_index":964,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["believe",{"_index":3754,"title":{},"body":{"license.html":{}}}],["belongs",{"_index":1009,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["below",{"_index":1001,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["benefit",{"_index":3197,"title":{},"body":{"license.html":{}}}],["benötigt",{"_index":3013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["besprechen",{"_index":2612,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["best",{"_index":3868,"title":{},"body":{"license.html":{}}}],["beta1",{"_index":2971,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":3892,"title":{},"body":{"license.html":{}}}],["between",{"_index":3362,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":3479,"title":{},"body":{"license.html":{}}}],["bienenstich",{"_index":2450,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["bin",{"_index":946,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["binarytotextencoding",{"_index":2076,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["bis",{"_index":2637,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["bit",{"_index":1347,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["body",{"_index":561,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"license.html":{}}}],["boolean",{"_index":451,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bot",{"_index":828,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildService.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/initGuildCommand.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["bot/bot.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["bot_event_handler_name",{"_index":1061,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bot_event_key",{"_index":1060,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["botevent",{"_index":364,"title":{"interfaces/BotEvent.html":{}},"body":{"interfaces/BotEvent.html":{},"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["boteventdecorator",{"_index":1047,"title":{},"body":{"classes/Explorer.html":{}}}],["boteventdecorator(provider",{"_index":1053,"title":{},"body":{"classes/Explorer.html":{}}}],["both",{"_index":2844,"title":{},"body":{"classes/UserTimeOutDto.html":{},"license.html":{}}}],["botmodule",{"_index":104,"title":{"modules/BotModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BotModule.html":{},"modules.html":{},"overview.html":{}}}],["bots",{"_index":2357,"title":{},"body":{"injectables/SelfService.html":{}}}],["break",{"_index":2518,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{}}}],["browse",{"_index":3902,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3900,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":3011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["building",{"_index":3029,"title":{},"body":{"index.html":{}}}],["business",{"_index":3766,"title":{},"body":{"license.html":{}}}],["button",{"_index":765,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"miscellaneous/functions.html":{}}}],["buttonbuilder",{"_index":743,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{}}}],["buttoninteraction",{"_index":728,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["buttonstyle",{"_index":744,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["bzw",{"_index":683,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["c",{"_index":3141,"title":{},"body":{"license.html":{}}}],["cake",{"_index":2492,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["cakes",{"_index":2443,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["call",{"_index":1938,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["callback",{"_index":2995,"title":{},"body":{"miscellaneous/functions.html":{}}}],["called",{"_index":2996,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["canactivate",{"_index":858,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["canactivate(context",{"_index":862,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["cappuccino",{"_index":2455,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["cardinal",{"_index":1219,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["carry",{"_index":3454,"title":{},"body":{"license.html":{}}}],["case",{"_index":2504,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["cases",{"_index":3221,"title":{},"body":{"license.html":{}}}],["catch",{"_index":76,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"injectables/DmMessageHandler.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["catch(channelnottextbasedexception",{"_index":638,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["catch(exception",{"_index":640,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["catch(exceptionlist",{"_index":703,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["catch(guilddoesnotexistexception",{"_index":1220,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["catch(senddirectmessagetouserexception",{"_index":2386,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["catch(wrongargsexception",{"_index":707,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["catcherror",{"_index":1902,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["catcherror((error",{"_index":1935,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["category",{"_index":498,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SpecialCommand.html":{},"classes/UserToUser.html":{}}}],["categorychannel",{"_index":485,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["categorychannel'])@isoptional()@apiproperty({type",{"_index":1183,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["categorychannelresolvable",{"_index":484,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["categoryid",{"_index":2086,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["categoryid.replace('modrequest",{"_index":2115,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["cause",{"_index":3483,"title":{},"body":{"license.html":{}}}],["caution",{"_index":2766,"title":{},"body":{"controllers/UserController.html":{}}}],["caution'})@apiresponse({status",{"_index":2721,"title":{},"body":{"controllers/UserController.html":{}}}],["cease",{"_index":3655,"title":{},"body":{"license.html":{}}}],["certain",{"_index":3610,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":3665,"title":{},"body":{"license.html":{}}}],["change",{"_index":492,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"license.html":{}}}],["changed",{"_index":2409,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event",{"_index":1628,"title":{},"body":{"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{}}}],["changed.event.ts",{"_index":2400,"title":{},"body":{"classes/SettingsChanged.html":{},"coverage.html":{}}}],["changed.event.ts:20",{"_index":2405,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:6",{"_index":2403,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:7",{"_index":2404,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:8",{"_index":2402,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changing",{"_index":3153,"title":{},"body":{"license.html":{}}}],["channel",{"_index":415,"title":{"classes/Channel.html":{}},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildRestrictedChannelController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["channel'})@apibody({schema",{"_index":540,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.channelid",{"_index":1115,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildService.html":{}}}],["channel.clean",{"_index":619,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.clone",{"_index":1172,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.controller",{"_index":1141,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildRestrictedChannelModule.html":{}}}],["channel.controller.ts",{"_index":1090,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildRestrictedChannelController.html":{},"coverage.html":{}}}],["channel.controller.ts:24",{"_index":1099,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.controller.ts:34",{"_index":1097,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.controller.ts:54",{"_index":1101,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.delete",{"_index":1173,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.edit",{"_index":605,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.edit(channeldata",{"_index":597,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.guard",{"_index":1262,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["channel.guard.ts",{"_index":2912,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["channel.id",{"_index":2110,"title":{},"body":{"injectables/ModRequestFlow.html":{},"controllers/UserController.html":{}}}],["channel.istextbased",{"_index":2801,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["channel.messages.fetch(msgid",{"_index":2802,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["channel.module",{"_index":1408,"title":{},"body":{"modules/GuildModule.html":{}}}],["channel.module.ts",{"_index":1140,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildRestrictedChannelModule.html":{}}}],["channel.parentid",{"_index":1389,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["channel.permissionoverwrites.delete('1011513775054143632",{"_index":2150,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["channel.permissionoverwrites.delete(ticket.userid",{"_index":2149,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["channel.requiredpoints",{"_index":1435,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.send",{"_index":1324,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{}}}],["channel.send(usermention(interaction.user.id",{"_index":2120,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["channel.service",{"_index":392,"title":{},"body":{"modules/BotModule.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{}}}],["channel.service.ts",{"_index":1145,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"coverage.html":{}}}],["channel.service.ts:10",{"_index":1148,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:14",{"_index":1427,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:17",{"_index":1151,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:22",{"_index":1153,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:40",{"_index":1149,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:44",{"_index":1425,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:52",{"_index":1430,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:8",{"_index":1423,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.setparent('1014456370860404756",{"_index":2151,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["channel.slowmode.${duration",{"_index":602,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.type",{"_index":610,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["channel/channel.controller",{"_index":2188,"title":{},"body":{"modules/ModerationModule.html":{}}}],["channel/dto/auto",{"_index":1119,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"coverage.html":{}}}],["channel/guild",{"_index":391,"title":{},"body":{"modules/BotModule.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["channel_created",{"_index":2012,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channel_deleted",{"_index":2013,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channel_id",{"_index":1448,"title":{},"body":{"injectables/GuildService.html":{}}}],["channel_updated",{"_index":2014,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channelcleaned",{"_index":500,"title":{"classes/ChannelCleaned.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["channelcleaned(guildid",{"_index":620,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelcontroller",{"_index":529,"title":{"controllers/ChannelController.html":{}},"body":{"controllers/ChannelController.html":{},"modules/ModerationModule.html":{},"coverage.html":{}}}],["channeldata",{"_index":543,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelid",{"_index":504,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/RestrictedChannelDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["channelidguard",{"_index":2913,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["channelidguardmixin",{"_index":3931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["channelname",{"_index":627,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["channelnottextbasedexception",{"_index":576,"title":{"classes/ChannelNotTextBasedException.html":{}},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["channelnottextbasedexception(channel.name",{"_index":618,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelnottextbasedexceptionfilter",{"_index":639,"title":{"classes/ChannelNotTextBasedExceptionFilter.html":{}},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["channelrows",{"_index":3124,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channels",{"_index":556,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/TasksService.html":{}}}],["channels.dto",{"_index":1106,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["channels.dto.ts",{"_index":1120,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["channels.dto.ts:10",{"_index":1123,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["channels.dto.ts:12",{"_index":2260,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["channels.dto.ts:16",{"_index":1130,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["channels.dto.ts:17",{"_index":2261,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["channels.fetch('1195024829544411168",{"_index":819,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["channels.fetch(ticket.ticketid",{"_index":2592,"title":{},"body":{"injectables/TasksService.html":{}}}],["channels.fetch(ticketid",{"_index":2148,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["channels.foreach((channel",{"_index":1551,"title":{},"body":{"injectables/GuildService.html":{}}}],["channelselectmenubuilder",{"_index":3085,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channelselectmenuinteraction",{"_index":3082,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channeltype",{"_index":483,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.guildannouncement",{"_index":494,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["channeltype.guildtext",{"_index":493,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.privatethread",{"_index":612,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.publicthread",{"_index":611,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["characterized",{"_index":3582,"title":{},"body":{"license.html":{}}}],["charge",{"_index":3178,"title":{},"body":{"license.html":{}}}],["check",{"_index":1328,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["checkactiveusers",{"_index":2534,"title":{},"body":{"injectables/TasksService.html":{}}}],["checked",{"_index":2553,"title":{},"body":{"injectables/TasksService.html":{}}}],["checkifpersonwasverifiedbefore",{"_index":1228,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["checkifpersonwasverifiedbefore(reaction",{"_index":1238,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["checklimits(message",{"_index":1394,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["checkproviders",{"_index":1049,"title":{},"body":{"classes/Explorer.html":{}}}],["checkproviders(providers",{"_index":1056,"title":{},"body":{"classes/Explorer.html":{}}}],["checks",{"_index":2362,"title":{},"body":{"injectables/SelfService.html":{},"injectables/TasksService.html":{}}}],["checktimeouts",{"_index":2535,"title":{},"body":{"injectables/TasksService.html":{}}}],["children",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["choice",{"_index":2886,"title":{},"body":{"classes/UserToUser.html":{}}}],["choice(commandtoexecute",{"_index":2894,"title":{},"body":{"classes/UserToUser.html":{}}}],["choice(commandtoexecute)@param({description",{"_index":2880,"title":{},"body":{"classes/UserToUser.html":{}}}],["choiceoptions",{"_index":2887,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["choose",{"_index":3014,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["chooserandomcoffee",{"_index":2446,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["chooserandomcoffee(interaction",{"_index":2477,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["choosing",{"_index":3819,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":3399,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":3408,"title":{},"body":{"license.html":{}}}],["civil",{"_index":3862,"title":{},"body":{"license.html":{}}}],["claim",{"_index":3709,"title":{},"body":{"license.html":{}}}],["claims",{"_index":3721,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddRoleCommand.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["classdecorator",{"_index":3000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"overview.html":{}}}],["clean",{"_index":539,"title":{},"body":{"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"miscellaneous/functions.html":{}}}],["cleanchannel",{"_index":532,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleanchannel(guildid",{"_index":537,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleaning",{"_index":609,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleantextchannel",{"_index":572,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["cleantextchannel(channel",{"_index":2990,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cleanwfpmember",{"_index":406,"title":{"classes/CleanWfpMember.html":{}},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["cleanwfpmembers",{"_index":1441,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["cleanwfpmembers(guildid",{"_index":1483,"title":{},"body":{"injectables/GuildService.html":{}}}],["clear",{"_index":3521,"title":{},"body":{"license.html":{}}}],["click",{"_index":2795,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["client",{"_index":14,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{}}}],["client.setmaxlisteners(30",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["client_id",{"_index":1919,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["client_secret",{"_index":1921,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["clientevents",{"_index":370,"title":{},"body":{"interfaces/BotEvent.html":{},"classes/CommunityQuestionCommand.html":{}}}],["clientevents['interactioncreate",{"_index":807,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["clientevents[keyof",{"_index":373,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["closed",{"_index":2146,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["closely",{"_index":3858,"title":{},"body":{"license.html":{}}}],["closestaletickets",{"_index":2536,"title":{},"body":{"injectables/TasksService.html":{}}}],["cls",{"_index":3021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule",{"_index":310,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule_exports",{"_index":311,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule_providers",{"_index":312,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_botmodule",{"_index":374,"title":{},"body":{"modules/BotModule.html":{},"overview.html":{}}}],["cluster_botmodule_providers",{"_index":375,"title":{},"body":{"modules/BotModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule",{"_index":1135,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule_exports",{"_index":1136,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule_providers",{"_index":1137,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildmodule",{"_index":1399,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_exports",{"_index":1401,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_imports",{"_index":1400,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_providers",{"_index":1402,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule",{"_index":1417,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule_exports",{"_index":1419,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule_providers",{"_index":1418,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{}}}],["cluster_guildsettingsmodule",{"_index":1585,"title":{},"body":{"modules/GuildSettingsModule.html":{},"overview.html":{}}}],["cluster_guildsettingsmodule_exports",{"_index":1587,"title":{},"body":{"modules/GuildSettingsModule.html":{},"overview.html":{}}}],["cluster_guildsettingsmodule_providers",{"_index":1586,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["cluster_guildusermodule",{"_index":1686,"title":{},"body":{"modules/GuildUserModule.html":{},"overview.html":{}}}],["cluster_guildusermodule_exports",{"_index":1688,"title":{},"body":{"modules/GuildUserModule.html":{},"overview.html":{}}}],["cluster_guildusermodule_providers",{"_index":1687,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["cluster_jwtauthmodule",{"_index":1861,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_jwtauthmodule_exports",{"_index":1862,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_jwtauthmodule_providers",{"_index":1863,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_moderationmodule",{"_index":2180,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_moderationmodule_imports",{"_index":2182,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_moderationmodule_providers",{"_index":2181,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_tasksmodule",{"_index":2519,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":2520,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_usermodule",{"_index":2807,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2809,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2808,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":1831,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"license.html":{}}}],["coffee",{"_index":2491,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["coffees",{"_index":2444,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["collect",{"_index":3789,"title":{},"body":{"license.html":{}}}],["color",{"_index":897,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["colorresolvable",{"_index":976,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["colors",{"_index":656,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{}}}],["combine",{"_index":3800,"title":{},"body":{"license.html":{}}}],["combined",{"_index":3473,"title":{},"body":{"license.html":{}}}],["come",{"_index":3213,"title":{},"body":{"license.html":{}}}],["comes",{"_index":2326,"title":{},"body":{"controllers/SelfController.html":{},"license.html":{}}}],["command",{"_index":32,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["commandinteraction",{"_index":25,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{}}}],["commands",{"_index":1777,"title":{},"body":{"guards/HasRequiredRank.html":{},"license.html":{}}}],["commands/clean",{"_index":407,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/community",{"_index":394,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/init",{"_index":397,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/mod",{"_index":388,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/ping.command",{"_index":381,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/special.command",{"_index":411,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/ticket",{"_index":413,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/timeout.command",{"_index":385,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/user",{"_index":400,"title":{},"body":{"modules/BotModule.html":{}}}],["commandtoexecute",{"_index":2889,"title":{},"body":{"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commandvalidationfilter",{"_index":700,"title":{"classes/CommandValidationFilter.html":{}},"body":{"classes/CommandValidationFilter.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["commercial",{"_index":3563,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":3736,"title":{},"body":{"license.html":{}}}],["common",{"_index":3557,"title":{},"body":{"license.html":{}}}],["communication",{"_index":3360,"title":{},"body":{"license.html":{}}}],["communicationdisableduntil",{"_index":872,"title":{},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{}}}],["community",{"_index":760,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"license.html":{},"properties.html":{}}}],["communityquestioncommand",{"_index":393,"title":{"classes/CommunityQuestionCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["communityquestiondto",{"_index":733,"title":{"classes/CommunityQuestionDto.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["communityquestionformdto",{"_index":736,"title":{"classes/CommunityQuestionFormDto.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["compilation",{"_index":3468,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":3478,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":3771,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":3339,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":3688,"title":{},"body":{"license.html":{}}}],["comply",{"_index":3390,"title":{},"body":{"license.html":{}}}],["component",{"_index":3330,"title":{},"body":{"license.html":{}}}],["components",{"_index":773,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["componenttype",{"_index":2080,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["componenttype.stringselect",{"_index":2173,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["computer",{"_index":3277,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":3808,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":3765,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":3240,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["configservice.get('jwt_access_secret",{"_index":1964,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('jwt_issuer",{"_index":1965,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":2256,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["configservice.get('token",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":3125,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["conflictexception",{"_index":1102,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["confused",{"_index":2811,"title":{},"body":{"modules/UserModule.html":{}}}],["connection",{"_index":3756,"title":{},"body":{"license.html":{}}}],["consequence",{"_index":3676,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":3840,"title":{},"body":{"license.html":{}}}],["considered",{"_index":3643,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3728,"title":{},"body":{"license.html":{}}}],["console.log(category",{"_index":2500,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["console.log(e",{"_index":2597,"title":{},"body":{"injectables/TasksService.html":{}}}],["console.log(fromuserid",{"_index":2501,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["console.log(outcome",{"_index":674,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["console.log(touserid",{"_index":2502,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["conspicuously",{"_index":3440,"title":{},"body":{"license.html":{}}}],["const",{"_index":60,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":3956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constitutes",{"_index":3378,"title":{},"body":{"license.html":{}}}],["constructchanneldeletejobs",{"_index":1146,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["constructed",{"_index":3020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["constructor(@inject(guildservice",{"_index":667,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["constructor(@inject(prismaservice",{"_index":332,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["constructor(@inject(selfservice",{"_index":2333,"title":{},"body":{"controllers/SelfController.html":{}}}],["constructor(channelname",{"_index":625,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["constructor(client",{"_index":13,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["constructor(configservice",{"_index":1952,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["constructor(database",{"_index":1444,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{}}}],["constructor(discord",{"_index":2352,"title":{},"body":{"injectables/SelfService.html":{}}}],["constructor(eventemitter",{"_index":205,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(guildid",{"_index":507,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["constructor(guildservice",{"_index":652,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["constructor(guilduserservice",{"_index":1356,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["constructor(jwtservice",{"_index":1886,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["constructor(prismaserver",{"_index":3076,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["constructor(prismaservice",{"_index":321,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["constructor(private",{"_index":1579,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["constructor(reflector",{"_index":1780,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["constructor(settingsservice",{"_index":1819,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["constructor(userid",{"_index":2683,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["construed",{"_index":3776,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":3541,"title":{},"body":{"license.html":{}}}],["contact",{"_index":782,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"license.html":{}}}],["contain",{"_index":3772,"title":{},"body":{"license.html":{}}}],["containing",{"_index":3623,"title":{},"body":{"license.html":{}}}],["contains",{"_index":1479,"title":{},"body":{"injectables/GuildService.html":{},"classes/LogEntry.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["content",{"_index":774,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildSettingsService.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["contents",{"_index":3732,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":3002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["context",{"_index":637,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"license.html":{}}}],["context.getargbyindex(0",{"_index":863,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getargbyindex(1",{"_index":2240,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["context.getclass",{"_index":1796,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["context.gethandler",{"_index":1795,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["contextmenucommandinteraction",{"_index":2394,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["continue",{"_index":3588,"title":{},"body":{"license.html":{}}}],["continued",{"_index":3572,"title":{},"body":{"license.html":{}}}],["contractual",{"_index":3640,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":3783,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":3169,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3718,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":3720,"title":{},"body":{"license.html":{}}}],["control",{"_index":3345,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3723,"title":{},"body":{"license.html":{}}}],["controller",{"_index":81,"title":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('/channel",{"_index":582,"title":{},"body":{"controllers/ChannelController.html":{}}}],["controller('/role",{"_index":2287,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller('/user",{"_index":2729,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('/user/self",{"_index":2332,"title":{},"body":{"controllers/SelfController.html":{}}}],["controller('auth",{"_index":1846,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["controller('autodeletechannel",{"_index":1108,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["controller('guild",{"_index":1416,"title":{},"body":{"controllers/GuildRestrictedChannelController.html":{}}}],["controllers",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convenient",{"_index":3295,"title":{},"body":{"license.html":{}}}],["convert",{"_index":3019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["convey",{"_index":3283,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":3760,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":3583,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":3289,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":3639,"title":{},"body":{"license.html":{}}}],["cooperation",{"_index":3162,"title":{},"body":{"license.html":{}}}],["copies",{"_index":3151,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3148,"title":{},"body":{"license.html":{}}}],["copying",{"_index":3241,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":3156,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3140,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":3252,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":3396,"title":{},"body":{"license.html":{}}}],["correction",{"_index":3835,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":3341,"title":{},"body":{"license.html":{}}}],["cost",{"_index":3505,"title":{},"body":{"license.html":{}}}],["couldn't",{"_index":695,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["count",{"_index":688,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["count(m.messageid",{"_index":1463,"title":{},"body":{"injectables/GuildService.html":{}}}],["count(messageid",{"_index":1469,"title":{},"body":{"injectables/GuildService.html":{}}}],["counterclaim",{"_index":3710,"title":{},"body":{"license.html":{}}}],["countries",{"_index":3281,"title":{},"body":{"license.html":{}}}],["country",{"_index":3751,"title":{},"body":{"license.html":{}}}],["court",{"_index":3782,"title":{},"body":{"license.html":{}}}],["courts",{"_index":3857,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":3740,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":2895,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["covered",{"_index":3266,"title":{},"body":{"license.html":{}}}],["craft",{"_index":2384,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["create",{"_index":319,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["create(entry",{"_index":323,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["create/dm",{"_index":927,"title":{},"body":{"injectables/DmMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["create/guild",{"_index":1353,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["create/mod",{"_index":1411,"title":{},"body":{"modules/GuildModule.html":{},"injectables/ModRequestFlow.html":{},"coverage.html":{}}}],["createautodeletechannel",{"_index":1092,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["createautodeletechannel(guildid",{"_index":1095,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["created",{"_index":430,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{}}}],["created'})@apiresponse({status",{"_index":2270,"title":{},"body":{"controllers/RoleController.html":{}}}],["createdat",{"_index":276,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{}}}],["createdfrom",{"_index":287,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["createdtill",{"_index":288,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["createdtimestamp",{"_index":417,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["createdynamicscheduledjob",{"_index":2537,"title":{},"body":{"injectables/TasksService.html":{}}}],["createdynamicscheduledjob(joboptions",{"_index":2555,"title":{},"body":{"injectables/TasksService.html":{}}}],["createhash",{"_index":2077,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["createhash('sha256",{"_index":2090,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["createparamdecorator",{"_index":3935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrole",{"_index":2263,"title":{},"body":{"controllers/RoleController.html":{}}}],["createrole(guildid",{"_index":2267,"title":{},"body":{"controllers/RoleController.html":{}}}],["createticket",{"_index":3949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creation/execution",{"_index":2524,"title":{},"body":{"modules/TasksModule.html":{}}}],["criterion",{"_index":3308,"title":{},"body":{"license.html":{}}}],["cron",{"_index":1128,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"injectables/TasksService.html":{}}}],["cron('*/5",{"_index":2542,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron('0",{"_index":2539,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjob",{"_index":2561,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjobparams",{"_index":2556,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjobs",{"_index":2559,"title":{},"body":{"injectables/TasksService.html":{}}}],["crontime",{"_index":1164,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["cross",{"_index":3708,"title":{},"body":{"license.html":{}}}],["crypto",{"_index":2078,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["ctx",{"_index":642,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getresponse",{"_index":644,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cure",{"_index":3668,"title":{},"body":{"license.html":{}}}],["curr",{"_index":1532,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr._count?.messageid",{"_index":1535,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.channelid.tostring",{"_index":1533,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.createdat.toisostring().split('t')[0",{"_index":1547,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.userid.tostring",{"_index":1534,"title":{},"body":{"injectables/GuildService.html":{}}}],["current",{"_index":1784,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/SelfController.html":{}}}],["customarily",{"_index":3495,"title":{},"body":{"license.html":{}}}],["customary",{"_index":3797,"title":{},"body":{"license.html":{}}}],["customer",{"_index":3501,"title":{},"body":{"license.html":{}}}],["d",{"_index":2846,"title":{},"body":{"classes/UserTimeOutDto.html":{},"license.html":{}}}],["d+)|\\d",{"_index":1125,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["damages",{"_index":3838,"title":{},"body":{"license.html":{}}}],["dann",{"_index":2614,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["data",{"_index":272,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"classes/EditRoleData.html":{},"controllers/GuildController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["data.roles",{"_index":2676,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["database",{"_index":15,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/SelfService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["date",{"_index":294,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["date().getdate",{"_index":1507,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["date().gettime",{"_index":2761,"title":{},"body":{"controllers/UserController.html":{}}}],["date().getutcdate",{"_index":2093,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["date().setdate(new",{"_index":1506,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["date(channel.lastmessage.createdtimestamp",{"_index":2594,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(dto.duration).gettime",{"_index":2627,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["date(filter.createdfrom).toisostring",{"_index":347,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["date(filter.createdtill).toisostring",{"_index":350,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["date(member.joinedtimestamp",{"_index":1512,"title":{},"body":{"injectables/GuildService.html":{}}}],["date(message.createdtimestamp",{"_index":1377,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["date(new",{"_index":1505,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["date.now",{"_index":2582,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["date_sub(now",{"_index":1470,"title":{},"body":{"injectables/GuildService.html":{}}}],["dauer",{"_index":2866,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["day",{"_index":1199,"title":{},"body":{"controllers/GuildController.html":{},"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["days",{"_index":1458,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["dbuser",{"_index":1338,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["dbuser.guildid",{"_index":1345,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["dbuser.userid",{"_index":2583,"title":{},"body":{"injectables/TasksService.html":{}}}],["de",{"_index":2048,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["dearv8protectmefromparameterswithnonevalue",{"_index":2933,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dearv8protectmefromparameterswithnonevalue(target",{"_index":2999,"title":{},"body":{"miscellaneous/functions.html":{}}}],["december",{"_index":3421,"title":{},"body":{"license.html":{}}}],["decide",{"_index":3816,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declining",{"_index":3631,"title":{},"body":{"license.html":{}}}],["decorator",{"_index":3945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":26,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsDto.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["decorators/bot",{"_index":1062,"title":{},"body":{"classes/Explorer.html":{}}}],["decorators/requires",{"_index":1791,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["deemed",{"_index":3410,"title":{},"body":{"license.html":{}}}],["default",{"_index":214,"title":{},"body":{"injectables/AppService.html":{},"interfaces/BotEvent.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/RoleResponse.html":{},"classes/SpecialCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["defaultmemberpermissions",{"_index":45,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["defective",{"_index":3830,"title":{},"body":{"license.html":{}}}],["defending",{"_index":3198,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":3779,"title":{},"body":{"license.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["definition",{"_index":3351,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3245,"title":{},"body":{"license.html":{}}}],["deine",{"_index":2122,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["delete",{"_index":1089,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["delete(':roleid",{"_index":2300,"title":{},"body":{"controllers/RoleController.html":{}}}],["delete(':roleid')@apioperation({summary",{"_index":2274,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleteatcron",{"_index":1122,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["deletechannel.channelid",{"_index":1167,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deletechannel.deleteatcron",{"_index":1165,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deletechannel.guildid",{"_index":1168,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deleted",{"_index":528,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/RoleController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["deleted'})@apiresponse({status",{"_index":2275,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleteone",{"_index":1696,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["deleteone(userid",{"_index":1716,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["deleterole",{"_index":2264,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleterole(guildid",{"_index":2272,"title":{},"body":{"controllers/RoleController.html":{}}}],["deletes",{"_index":2993,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deleting",{"_index":1169,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["den",{"_index":960,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["denied",{"_index":3589,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":3737,"title":{},"body":{"license.html":{}}}],["deny",{"_index":2100,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["dependencies",{"_index":95,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":908,"title":{},"body":{"classes/DiscordUser.html":{}}}],["deprive",{"_index":3746,"title":{},"body":{"license.html":{}}}],["der",{"_index":2839,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["des",{"_index":2867,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["desc",{"_index":357,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{}}}],["describe",{"_index":1991,"title":{},"body":{"classes/LogEntry.html":{}}}],["description",{"_index":486,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"properties.html":{}}}],["descriptionlocalizations",{"_index":2040,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["designated",{"_index":3513,"title":{},"body":{"license.html":{}}}],["designed",{"_index":3160,"title":{},"body":{"license.html":{}}}],["detail",{"_index":3805,"title":{},"body":{"license.html":{}}}],["details",{"_index":3882,"title":{},"body":{"license.html":{}}}],["determined",{"_index":2994,"title":{},"body":{"miscellaneous/functions.html":{}}}],["determining",{"_index":3552,"title":{},"body":{"license.html":{}}}],["develop",{"_index":3866,"title":{},"body":{"license.html":{}}}],["developers",{"_index":3185,"title":{},"body":{"license.html":{}}}],["development",{"_index":3041,"title":{},"body":{"index.html":{}}}],["dich",{"_index":2643,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["die",{"_index":680,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["differ",{"_index":3804,"title":{},"body":{"license.html":{}}}],["different",{"_index":1983,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["differently",{"_index":3618,"title":{},"body":{"license.html":{}}}],["digest('hex",{"_index":2095,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["diplomatenkaffee",{"_index":2456,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["dir",{"_index":956,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["direct",{"_index":2380,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["direction",{"_index":3394,"title":{},"body":{"license.html":{}}}],["directions",{"_index":3522,"title":{},"body":{"license.html":{}}}],["directly",{"_index":3010,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["disabled",{"_index":524,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["disclaim",{"_index":3432,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":3820,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":3615,"title":{},"body":{"license.html":{}}}],["discord",{"_index":35,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"injectables/DmMessageHandler.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"properties.html":{}}}],["discord.js",{"_index":39,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["discordapierror",{"_index":935,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["discordapierror).message",{"_index":968,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["discordclientoptions",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["discordexecutioncontext",{"_index":852,"title":{"interfaces/DiscordExecutionContext.html":{}},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["discordguildmember",{"_index":868,"title":{"classes/DiscordGuildMember.html":{}},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["discordjs",{"_index":1270,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"properties.html":{}}}],["discordmodule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["discordmodule.forfeature",{"_index":317,"title":{},"body":{"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["discordmodule.forrootasync",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["discorduser",{"_index":887,"title":{"classes/DiscordUser.html":{}},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["discorduser.avatarurl",{"_index":2368,"title":{},"body":{"injectables/SelfService.html":{}}}],["discorduser.fetch",{"_index":2242,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["discorduser.globalname",{"_index":2369,"title":{},"body":{"injectables/SelfService.html":{}}}],["discorduser.id",{"_index":2247,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/SelfService.html":{}}}],["discorduser.partial",{"_index":2241,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["discorduser.roles.add(role.id",{"_index":1350,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser.roles.cache.has('1121823930085285938",{"_index":1344,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser.roles.remove('1121823930085285938",{"_index":1351,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser['id",{"_index":883,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["discriminator",{"_index":891,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["discriminatory",{"_index":3763,"title":{},"body":{"license.html":{}}}],["display",{"_index":910,"title":{},"body":{"classes/DiscordUser.html":{},"license.html":{}}}],["displayavatarurl",{"_index":892,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["displayed",{"_index":837,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"license.html":{}}}],["displayname",{"_index":873,"title":{},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{}}}],["displays",{"_index":3291,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":3809,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":3149,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3879,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":3767,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3242,"title":{},"body":{"license.html":{}}}],["dm",{"_index":2382,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["dm.guard",{"_index":938,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dm.guard.ts",{"_index":2034,"title":{},"body":{"guards/MessageIsDmGuard.html":{},"coverage.html":{}}}],["dm.guard.ts:7",{"_index":2035,"title":{},"body":{"guards/MessageIsDmGuard.html":{}}}],["dmmessagehandler",{"_index":925,"title":{"injectables/DmMessageHandler.html":{}},"body":{"injectables/DmMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["dmmessagetomodteam",{"_index":929,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dmmessagetomodteam(message",{"_index":930,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dmpermission",{"_index":47,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{}}}],["docs",{"_index":1021,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["document",{"_index":3152,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":1787,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{}}}],["documented",{"_index":3597,"title":{},"body":{"license.html":{}}}],["doe",{"_index":920,"title":{},"body":{"classes/DiscordUser.html":{}}}],["done",{"_index":2208,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/initGuildCommand.html":{}}}],["dont",{"_index":1493,"title":{},"body":{"injectables/GuildService.html":{}}}],["doubtful",{"_index":3553,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":3685,"title":{},"body":{"license.html":{}}}],["dry",{"_index":1517,"title":{},"body":{"injectables/GuildService.html":{}}}],["dryrun",{"_index":1484,"title":{},"body":{"injectables/GuildService.html":{}}}],["dto",{"_index":2193,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/SelfService.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["dto.duration",{"_index":2638,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["dto.message",{"_index":2204,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dto.reason",{"_index":2629,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["dto.replytomessage",{"_index":2202,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dto/audit",{"_index":239,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["dto/auto",{"_index":1105,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["dto/channel",{"_index":571,"title":{},"body":{"controllers/ChannelController.html":{}}}],["dto/commmunity",{"_index":749,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["dto/community",{"_index":757,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["dto/guild",{"_index":2728,"title":{},"body":{"controllers/UserController.html":{}}}],["dto/log",{"_index":244,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["dto/mod",{"_index":2197,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dto/role",{"_index":2284,"title":{},"body":{"controllers/RoleController.html":{}}}],["dto/settings.dto",{"_index":1576,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["dto/user",{"_index":2484,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["du",{"_index":2607,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserToUser.html":{}}}],["durable",{"_index":3494,"title":{},"body":{"license.html":{}}}],["duration",{"_index":600,"title":{},"body":{"controllers/ChannelController.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["duration).getmilliseconds",{"_index":2764,"title":{},"body":{"controllers/UserController.html":{}}}],["dwelling",{"_index":3551,"title":{},"body":{"license.html":{}}}],["dynamically",{"_index":3355,"title":{},"body":{"license.html":{}}}],["e",{"_index":966,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"license.html":{}}}],["e.g",{"_index":1810,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["e.message",{"_index":2655,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["e.name",{"_index":2654,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["e2e",{"_index":3051,"title":{},"body":{"index.html":{}}}],["each",{"_index":1480,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["earlier",{"_index":3265,"title":{},"body":{"license.html":{}}}],["early",{"_index":1516,"title":{},"body":{"injectables/GuildService.html":{}}}],["edit",{"_index":545,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editchannel",{"_index":533,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editchannel(guildid",{"_index":542,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editroledata",{"_index":969,"title":{"classes/EditRoleData.html":{}},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{}}}],["editsettings",{"_index":1591,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["editsettings(guildid",{"_index":1602,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["effect",{"_index":3854,"title":{},"body":{"license.html":{}}}],["effected",{"_index":3429,"title":{},"body":{"license.html":{}}}],["effective",{"_index":3411,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":3873,"title":{},"body":{"license.html":{}}}],["efficient",{"_index":3030,"title":{},"body":{"index.html":{}}}],["efforts",{"_index":3702,"title":{},"body":{"license.html":{}}}],["ein",{"_index":949,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["eine",{"_index":2163,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einen",{"_index":2169,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einer",{"_index":2881,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einspänner",{"_index":2457,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["eiskaffee",{"_index":2458,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["electronic",{"_index":3883,"title":{},"body":{"license.html":{}}}],["embed",{"_index":675,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embed.addfields",{"_index":2652,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["embedbuilder",{"_index":657,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embeds",{"_index":699,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embodied",{"_index":3489,"title":{},"body":{"license.html":{}}}],["emitter",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["emoji",{"_index":1384,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["emojiresolvable",{"_index":985,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["emote.guard",{"_index":1264,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["emote.guard.ts",{"_index":2914,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["emotes",{"_index":3950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emotes.includes((reaction",{"_index":3952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["employer",{"_index":3894,"title":{},"body":{"license.html":{}}}],["en",{"_index":2047,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["enable",{"_index":3333,"title":{},"body":{"license.html":{}}}],["enabled",{"_index":517,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["enables",{"_index":3285,"title":{},"body":{"license.html":{}}}],["enableshutdownhooks",{"_index":2227,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":2229,"title":{},"body":{"injectables/PrismaService.html":{}}}],["encoded",{"_index":988,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["encouraged",{"_index":3208,"title":{},"body":{"license.html":{}}}],["end",{"_index":3865,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":2320,"title":{},"body":{"controllers/SelfController.html":{}}}],["enforce",{"_index":3738,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":3435,"title":{},"body":{"license.html":{}}}],["ensure",{"_index":3161,"title":{},"body":{"license.html":{}}}],["enter",{"_index":2666,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["entered",{"_index":3773,"title":{},"body":{"license.html":{}}}],["entire",{"_index":3459,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":3791,"title":{},"body":{"license.html":{}}}],["entity",{"_index":3689,"title":{},"body":{"license.html":{}}}],["entry",{"_index":326,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.action",{"_index":334,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.createdat",{"_index":343,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.dto",{"_index":245,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["entry.dto.ts",{"_index":2024,"title":{},"body":{"classes/LogEntryDto.html":{},"coverage.html":{}}}],["entry.dto.ts:11",{"_index":2025,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:13",{"_index":2026,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:15",{"_index":2027,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:17",{"_index":2028,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:19",{"_index":2029,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:21",{"_index":2030,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.extrainfo",{"_index":341,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.guildid",{"_index":335,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.invokerid",{"_index":336,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.reason",{"_index":337,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.targetid",{"_index":338,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.targettype",{"_index":339,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["enum",{"_index":290,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/functions.html":{}}}],["ephemeral",{"_index":670,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["equivalent",{"_index":3381,"title":{},"body":{"license.html":{}}}],["erfolgreich",{"_index":2124,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["err",{"_index":2209,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TimeOutCommand.html":{}}}],["error",{"_index":70,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/Explorer.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["error('timeout",{"_index":2634,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.length",{"_index":2633,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.map((e",{"_index":2653,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.message",{"_index":1947,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["error.push(err",{"_index":2630,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.response.data.error",{"_index":1940,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["erstelle",{"_index":2615,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["espresso",{"_index":2459,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["essential",{"_index":3335,"title":{},"body":{"license.html":{}}}],["etc",{"_index":2565,"title":{},"body":{"injectables/TasksService.html":{}}}],["etwas",{"_index":2892,"title":{},"body":{"classes/UserToUser.html":{}}}],["europe/berlin",{"_index":1179,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{}}}],["even",{"_index":3850,"title":{},"body":{"license.html":{}}}],["event",{"_index":212,"title":{},"body":{"injectables/AppService.html":{},"injectables/GuildService.html":{},"classes/LogEntry.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["event.decorator",{"_index":1063,"title":{},"body":{"classes/Explorer.html":{}}}],["event.decorator.ts",{"_index":2910,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["event.interface.ts",{"_index":367,"title":{},"body":{"interfaces/BotEvent.html":{},"coverage.html":{}}}],["event.interface.ts:4",{"_index":371,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["event.toformattedlog(this.logger",{"_index":223,"title":{},"body":{"injectables/AppService.html":{}}}],["eventargs",{"_index":737,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["eventemitter",{"_index":208,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["eventemitter2",{"_index":206,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["eventemittermodule",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["eventparams",{"_index":741,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["events",{"_index":1034,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["events/channel.event",{"_index":575,"title":{},"body":{"controllers/ChannelController.html":{}}}],["events/guild",{"_index":1414,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/interaction",{"_index":1410,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/message",{"_index":1409,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/settings",{"_index":1627,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["events/user.events",{"_index":2727,"title":{},"body":{"controllers/UserController.html":{}}}],["eventtolog",{"_index":218,"title":{"interfaces/EventToLog.html":{}},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["eventtype",{"_index":2401,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["everyday",{"_index":2549,"title":{},"body":{"injectables/TasksService.html":{}}}],["everyone",{"_index":1028,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["exact",{"_index":3264,"title":{},"body":{"license.html":{}}}],["example",{"_index":431,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["examples",{"_index":979,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["except",{"_index":3275,"title":{},"body":{"license.html":{}}}],["exception",{"_index":580,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{}}}],["exception.constraints[key",{"_index":718,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exception.message",{"_index":646,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exception.property",{"_index":712,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exception.ts",{"_index":621,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"coverage.html":{}}}],["exception.ts:12",{"_index":626,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/GuildDoesNotExistException.html":{},"classes/SendDirectMessageToUserException.html":{}}}],["exception.ts:23",{"_index":648,"title":{},"body":{"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["exception.ts:25",{"_index":1223,"title":{},"body":{"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exceptionfilter",{"_index":628,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exceptionlist",{"_index":706,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exceptionlist.geterror().map((exception",{"_index":709,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exceptions",{"_index":3602,"title":{},"body":{"license.html":{}}}],["excluded",{"_index":3539,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":3777,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":3875,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3729,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":3388,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":3784,"title":{},"body":{"license.html":{}}}],["executable",{"_index":3323,"title":{},"body":{"license.html":{}}}],["execute",{"_index":3570,"title":{},"body":{"license.html":{}}}],["executing",{"_index":3276,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":855,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":3703,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3430,"title":{},"body":{"license.html":{}}}],["exist",{"_index":1216,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["exists",{"_index":1117,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["expected",{"_index":3561,"title":{},"body":{"license.html":{}}}],["expects",{"_index":3560,"title":{},"body":{"license.html":{}}}],["expensiveeeeee",{"_index":2719,"title":{},"body":{"controllers/UserController.html":{}}}],["expiresin",{"_index":1881,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["explicitly",{"_index":3374,"title":{},"body":{"license.html":{}}}],["explorer",{"_index":1045,"title":{"classes/Explorer.html":{}},"body":{"classes/Explorer.html":{},"coverage.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["exports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"classes/EditRoleData.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"classes/RoleResponse.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exposes",{"_index":2532,"title":{},"body":{"injectables/TasksService.html":{}}}],["express",{"_index":632,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":3822,"title":{},"body":{"license.html":{}}}],["expression",{"_index":1133,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["expression'})@apiproperty({type",{"_index":1129,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["expressly",{"_index":3650,"title":{},"body":{"license.html":{}}}],["extend",{"_index":3748,"title":{},"body":{"license.html":{}}}],["extended",{"_index":2969,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":624,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["extensions",{"_index":3472,"title":{},"body":{"license.html":{}}}],["extent",{"_index":3294,"title":{},"body":{"license.html":{}}}],["externalcontextcreator",{"_index":1051,"title":{},"body":{"classes/Explorer.html":{}}}],["externaldocs",{"_index":989,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["extractjwt",{"_index":1956,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1961,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["extractjwt.fromheader('refresh_token",{"_index":2255,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["extrainfo",{"_index":340,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/LogEntry.html":{}}}],["f",{"_index":3637,"title":{},"body":{"license.html":{}}}],["facilitating",{"_index":3798,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":3389,"title":{},"body":{"license.html":{}}}],["fail",{"_index":3212,"title":{},"body":{"license.html":{}}}],["failed",{"_index":714,"title":{},"body":{"classes/CommandValidationFilter.html":{},"injectables/JwtAuthService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["failifnotexists",{"_index":2207,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["failonlogin",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["fails",{"_index":2383,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"license.html":{}}}],["failure",{"_index":3848,"title":{},"body":{"license.html":{}}}],["fair",{"_index":3380,"title":{},"body":{"license.html":{}}}],["false",{"_index":48,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RoleResponse.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["false})@isoptional()@isstring",{"_index":2045,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["family",{"_index":3546,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":3262,"title":{},"body":{"license.html":{}}}],["favor",{"_index":3555,"title":{},"body":{"license.html":{}}}],["feature",{"_index":3298,"title":{},"body":{"license.html":{}}}],["features",{"_index":3911,"title":{},"body":{"properties.html":{}}}],["fee",{"_index":3451,"title":{},"body":{"license.html":{}}}],["fest",{"_index":1266,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"dependencies.html":{}}}],["fetch",{"_index":2327,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{}}}],["fetch(guildid",{"_index":1677,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["fetched",{"_index":552,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["fetched'})@apiresponse({status",{"_index":2278,"title":{},"body":{"controllers/RoleController.html":{}}}],["fetches",{"_index":2356,"title":{},"body":{"injectables/SelfService.html":{}}}],["fetchself",{"_index":2351,"title":{},"body":{"injectables/SelfService.html":{}}}],["fetchself(userid",{"_index":2360,"title":{},"body":{"injectables/SelfService.html":{}}}],["field",{"_index":851,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"miscellaneous/functions.html":{}}}],["field('answer",{"_index":849,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["files",{"_index":3352,"title":{},"body":{"license.html":{}}}],["filter",{"_index":228,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/ModRequestFlow.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["filter.action",{"_index":351,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.createdfrom",{"_index":344,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.createdtill",{"_index":345,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.dto",{"_index":240,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["filter.dto.ts",{"_index":286,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:13",{"_index":296,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:16",{"_index":297,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:21",{"_index":299,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:26",{"_index":292,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.targettype",{"_index":352,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filtercb",{"_index":2992,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filters/command",{"_index":2487,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["finally",{"_index":3660,"title":{},"body":{"license.html":{}}}],["find",{"_index":320,"title":{},"body":{"injectables/AuditLogService.html":{},"license.html":{}}}],["find(guildid",{"_index":268,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["findall",{"_index":1697,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["findall(guildid",{"_index":1718,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["findmany",{"_index":2374,"title":{},"body":{"injectables/SelfService.html":{}}}],["fired",{"_index":1490,"title":{},"body":{"injectables/GuildService.html":{}}}],["first",{"_index":404,"title":{},"body":{"modules/BotModule.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{},"license.html":{}}}],["firstmessageid",{"_index":1296,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["firstvaluefrom",{"_index":1901,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["fitness",{"_index":3825,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":3493,"title":{},"body":{"license.html":{}}}],["flags",{"_index":418,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"miscellaneous/variables.html":{}}}],["flow",{"_index":3361,"title":{},"body":{"license.html":{}}}],["fly",{"_index":2560,"title":{},"body":{"injectables/TasksService.html":{}}}],["follow",{"_index":3244,"title":{},"body":{"license.html":{}}}],["following",{"_index":3733,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":3428,"title":{},"body":{"license.html":{}}}],["forbiddenexception",{"_index":1788,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["force",{"_index":3384,"title":{},"body":{"license.html":{}}}],["foreach((match",{"_index":2854,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["forguild",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["form",{"_index":1932,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["format",{"_index":293,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/LogEntryDto.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["forms",{"_index":3484,"title":{},"body":{"license.html":{}}}],["found",{"_index":589,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["foundation",{"_index":3144,"title":{},"body":{"license.html":{}}}],["frage",{"_index":785,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["fragen",{"_index":2641,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["framework",{"_index":3028,"title":{},"body":{"index.html":{}}}],["free",{"_index":3142,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":3167,"title":{},"body":{"license.html":{}}}],["fromuserid",{"_index":2481,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["frontend",{"_index":2323,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{},"properties.html":{}}}],["fulfilling",{"_index":3414,"title":{},"body":{"license.html":{}}}],["full",{"_index":3878,"title":{},"body":{"license.html":{}}}],["fun",{"_index":1518,"title":{},"body":{"injectables/GuildService.html":{}}}],["function",{"_index":1040,"title":{},"body":{"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function/object",{"_index":3958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functionality",{"_index":3008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functioning",{"_index":3573,"title":{},"body":{"license.html":{}}}],["functions",{"_index":2983,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3516,"title":{},"body":{"license.html":{}}}],["future",{"_index":3817,"title":{},"body":{"license.html":{}}}],["führen",{"_index":954,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["für",{"_index":2842,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["ganzen",{"_index":2472,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["gateway",{"_index":2221,"title":{},"body":{"classes/PingCommand.html":{}}}],["gatewayintentbits",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.automoderationconfiguration",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.automoderationexecution",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessagereactions",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessages",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessagetyping",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildemojisandstickers",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildintegrations",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildinvites",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmembers",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessagereactions",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessages",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessagetyping",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmoderation",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildpresences",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guilds",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildvoicestates",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildwebhooks",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.messagecontent",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["geben",{"_index":769,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["gemutet",{"_index":2840,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["general",{"_index":3135,"title":{},"body":{"license.html":{}}}],["generally",{"_index":3349,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1023,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"license.html":{}}}],["generic",{"_index":3023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geschlossen",{"_index":2144,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["gesendet",{"_index":2050,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["get('/')@apioperation({summary",{"_index":555,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["get(':channelid",{"_index":592,"title":{},"body":{"controllers/ChannelController.html":{}}}],["get(':channelid')@apioperation({summary",{"_index":548,"title":{},"body":{"controllers/ChannelController.html":{}}}],["get('https://discordapp.com/api/users/@me",{"_index":1943,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["get('login",{"_index":1829,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["get('messages",{"_index":1195,"title":{},"body":{"controllers/GuildController.html":{}}}],["get('self",{"_index":1667,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["get(dbuser.guildid",{"_index":1342,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["get(guild.id",{"_index":2579,"title":{},"body":{"injectables/TasksService.html":{}}}],["get(guildid",{"_index":1150,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["get(ticket.guildid",{"_index":2147,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["getadminroleid",{"_index":1592,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getadminroleid(guildid",{"_index":1605,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getall",{"_index":1420,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getall(guildid",{"_index":1424,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getattachmenttype",{"_index":1367,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getattachmenttype(attachment.contenttype",{"_index":1381,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["getattachmenttype(contenttype",{"_index":3001,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getauditlog",{"_index":226,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["getauditlog(guildid",{"_index":227,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["getautodeletechannel",{"_index":1093,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getautodeletechannel(@param('guildid",{"_index":1110,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getautodeletechannel(guildid",{"_index":1098,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getguildchannel",{"_index":534,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannel(guildid",{"_index":547,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannels",{"_index":535,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannels(guildid",{"_index":554,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildroles",{"_index":2265,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguildroles(@param('guildid",{"_index":2288,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguildroles(guildid",{"_index":2277,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguilduser",{"_index":1698,"title":{},"body":{"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["getguilduser(request",{"_index":2708,"title":{},"body":{"controllers/UserController.html":{}}}],["getguilduser(userid",{"_index":1720,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getguildusers",{"_index":2701,"title":{},"body":{"controllers/UserController.html":{}}}],["getguildusers(guildid",{"_index":2710,"title":{},"body":{"controllers/UserController.html":{}}}],["getintrochannelid",{"_index":1593,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getintrochannelid(guildid",{"_index":1607,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmessage",{"_index":856,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["getmodchannelid",{"_index":1594,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodchannelid(guildid",{"_index":1609,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodroleid",{"_index":1595,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodroleid(guildid",{"_index":1611,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getopenintrochannelid",{"_index":1596,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getopenintrochannelid(guildid",{"_index":1613,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getrank",{"_index":1699,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getrank(member",{"_index":1722,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getrequest",{"_index":1799,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["getrestrictedchannel",{"_index":1421,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getrestrictedchannel(guildid",{"_index":1426,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["gets",{"_index":1272,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/PingCommand.html":{},"controllers/SelfController.html":{},"miscellaneous/functions.html":{}}}],["getself",{"_index":1665,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["getself(@requestuser",{"_index":2334,"title":{},"body":{"controllers/SelfController.html":{}}}],["getself(userid",{"_index":1666,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["getsettings",{"_index":1567,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{}}}],["getsettings(@param('guildid",{"_index":1580,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["getsettings(guildid",{"_index":1569,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{}}}],["getting",{"_index":3024,"title":{"index.html":{},"license.html":{}},"body":{}}],["getunverifiedmemberroleid",{"_index":1597,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getunverifiedmemberroleid(guildid",{"_index":1616,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getuserfromcode",{"_index":1884,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["getuserfromcode(code",{"_index":1890,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["getverifiedmemberroleid",{"_index":1598,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getverifiedmemberroleid(guildid",{"_index":1618,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getwelcomemessageformat",{"_index":1599,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getwelcomemessageformat(guildid",{"_index":1620,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["gibt",{"_index":2473,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["give",{"_index":2490,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"license.html":{}}}],["given",{"_index":1459,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["gives",{"_index":3192,"title":{},"body":{"license.html":{}}}],["giving",{"_index":3455,"title":{},"body":{"license.html":{}}}],["gnu",{"_index":3133,"title":{},"body":{"license.html":{}}}],["goals",{"_index":3233,"title":{},"body":{"license.html":{}}}],["governed",{"_index":3605,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":3234,"title":{},"body":{"license.html":{}}}],["grant",{"_index":3632,"title":{},"body":{"license.html":{}}}],["grant_type",{"_index":1923,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["granted",{"_index":3369,"title":{},"body":{"license.html":{}}}],["grants",{"_index":3679,"title":{},"body":{"license.html":{}}}],["gratis",{"_index":3515,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":3867,"title":{},"body":{"license.html":{}}}],["group",{"_index":1473,"title":{},"body":{"injectables/GuildService.html":{}}}],["grow",{"_index":3057,"title":{},"body":{"index.html":{}}}],["grund",{"_index":2644,"title":{},"body":{"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["gte",{"_index":346,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guarantee",{"_index":3171,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1773,"title":{"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["guarded",{"_index":3940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":1774,"title":{},"body":{"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"overview.html":{}}}],["guards/is",{"_index":754,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["guards/refresh",{"_index":1842,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["guild",{"_index":436,"title":{"classes/Guild.html":{}},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["guild'})@apiresponse({status",{"_index":549,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["guild.autodeletechannels.foreach((deletechannel",{"_index":1162,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["guild.channels.cache.foreach(async",{"_index":2769,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.channels.cache.get(channelid",{"_index":596,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.cache.size",{"_index":590,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.create",{"_index":2088,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guild.channels.fetch",{"_index":1170,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"controllers/UserController.html":{}}}],["guild.channels.fetch()).foreach(async",{"_index":2800,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["guild.channels.fetch()).tojson",{"_index":591,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.fetch(channelid",{"_index":594,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.command",{"_index":398,"title":{},"body":{"modules/BotModule.html":{}}}],["guild.command.ts",{"_index":2907,"title":{},"body":{"coverage.html":{},"classes/initGuildCommand.html":{}}}],["guild.command.ts:156",{"_index":3084,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.command.ts:21",{"_index":3077,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.command.ts:26",{"_index":3080,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.controller",{"_index":1406,"title":{},"body":{"modules/GuildModule.html":{}}}],["guild.iconurl",{"_index":2372,"title":{},"body":{"injectables/SelfService.html":{}}}],["guild.id",{"_index":2371,"title":{},"body":{"injectables/SelfService.html":{}}}],["guild.members.ban(userid",{"_index":2746,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.fetch",{"_index":1760,"title":{},"body":{"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["guild.members.fetch().then((members",{"_index":2669,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["guild.members.fetch(request.user.userid",{"_index":2741,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.fetch(userid",{"_index":2759,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.kick(userid",{"_index":2753,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.name",{"_index":1277,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/SelfService.html":{}}}],["guild.ownerid",{"_index":2670,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["guild.roles.cache.get(roleid",{"_index":2297,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.cache.size",{"_index":2290,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.create(roledata",{"_index":2292,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.fetch()).tojson",{"_index":2291,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.service",{"_index":1143,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"modules/GuildModule.html":{}}}],["guild/:guildid",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["guild/guild",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["guild/guild.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["guild/moderation/moderation.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["guild_id",{"_index":1706,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["guild_updated",{"_index":2002,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["guildautodeletechannelcontroller",{"_index":1087,"title":{"controllers/GuildAutoDeleteChannelController.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"coverage.html":{}}}],["guildautodeletechanneldto",{"_index":1096,"title":{"classes/GuildAutoDeleteChannelDto.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"coverage.html":{}}}],["guildautodeletechannelmodule",{"_index":1134,"title":{"modules/GuildAutoDeleteChannelModule.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules.html":{},"overview.html":{}}}],["guildautodeletechannelservice",{"_index":1104,"title":{"injectables/GuildAutoDeleteChannelService.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"coverage.html":{},"overview.html":{}}}],["guildbasedchannel",{"_index":569,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guildchannel",{"_index":568,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["guildchanneleditoptions",{"_index":489,"title":{"classes/GuildChannelEditOptions.html":{}},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["guildcontroller",{"_index":1190,"title":{"controllers/GuildController.html":{}},"body":{"controllers/GuildController.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["guilddoesnotexistexception",{"_index":1214,"title":{"classes/GuildDoesNotExistException.html":{}},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["guilddoesnotexistexception(guildid",{"_index":1638,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["guilddoesnotexistexceptionfilter",{"_index":1221,"title":{"classes/GuildDoesNotExistExceptionFilter.html":{}},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"coverage.html":{}}}],["guildid",{"_index":65,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/initGuildCommand.html":{}}}],["guildid_userid",{"_index":64,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["guildids",{"_index":3015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guildmember",{"_index":1235,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guildmemberevents",{"_index":1224,"title":{"injectables/GuildMemberEvents.html":{}},"body":{"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildmenu",{"_index":2166,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guildmessagehandler",{"_index":1352,"title":{"injectables/GuildMessageHandler.html":{}},"body":{"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildmodule",{"_index":105,"title":{"modules/GuildModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules.html":{},"overview.html":{}}}],["guildname",{"_index":1674,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["guildquestionid",{"_index":817,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["guildrestrictedchannelcontroller",{"_index":1415,"title":{"controllers/GuildRestrictedChannelController.html":{}},"body":{"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"coverage.html":{}}}],["guildrestrictedchannelmodule",{"_index":1403,"title":{"modules/GuildRestrictedChannelModule.html":{}},"body":{"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules.html":{},"overview.html":{}}}],["guildrestrictedchannelservice",{"_index":376,"title":{"injectables/GuildRestrictedChannelService.html":{}},"body":{"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["guilds",{"_index":1086,"title":{},"body":{"classes/Guild.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["guilds.foreach((guild",{"_index":1161,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["guilds.foreach(async",{"_index":1563,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guilds.length",{"_index":2156,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guilds.map((guild",{"_index":2370,"title":{},"body":{"injectables/SelfService.html":{}}}],["guilds/:guildid/roles/:roleid",{"_index":1024,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["guilds[0",{"_index":2158,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guildservice",{"_index":377,"title":{"injectables/GuildService.html":{}},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["guildsettingscontroller",{"_index":1565,"title":{"controllers/GuildSettingsController.html":{}},"body":{"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"coverage.html":{}}}],["guildsettingsmodule",{"_index":132,"title":{"modules/GuildSettingsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/GuildSettingsModule.html":{},"modules.html":{},"overview.html":{}}}],["guildsettingsservice",{"_index":378,"title":{"injectables/GuildSettingsService.html":{}},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildtextbasedchannel",{"_index":570,"title":{},"body":{"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["guilduser",{"_index":1083,"title":{},"body":{"classes/Guild.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["guilduser.firstmessageid",{"_index":2785,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["guilduser['guildid",{"_index":1078,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["guilduser['rank",{"_index":2344,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["guilduser['userid",{"_index":1085,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["guildusercontroller",{"_index":1663,"title":{"controllers/GuildUserController.html":{}},"body":{"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"coverage.html":{}}}],["guildusermodule",{"_index":141,"title":{"modules/GuildUserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/GuildUserModule.html":{},"modules.html":{},"overview.html":{}}}],["guildusers.map((guilduser",{"_index":2376,"title":{},"body":{"injectables/SelfService.html":{}}}],["guilduserservice",{"_index":1138,"title":{"injectables/GuildUserService.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["hacky",{"_index":2843,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["handleevent",{"_index":204,"title":{},"body":{"injectables/AppService.html":{}}}],["handleevent(event",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["handler",{"_index":27,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["handler()@usefilters(commandvalidationfilter",{"_index":2621,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["hasattachments",{"_index":1395,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["hashandlermethod",{"_index":1050,"title":{},"body":{"classes/Explorer.html":{}}}],["hashandlermethod(provider",{"_index":1058,"title":{},"body":{"classes/Explorer.html":{}}}],["hasrequiredrank",{"_index":257,"title":{"guards/HasRequiredRank.html":{}},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["hast",{"_index":2608,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["haven't",{"_index":2552,"title":{},"body":{"injectables/TasksService.html":{}}}],["having",{"_index":3387,"title":{},"body":{"license.html":{}}}],["headers",{"_index":1929,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["headpat",{"_index":2474,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["heartened",{"_index":3207,"title":{},"body":{"license.html":{}}}],["helfen",{"_index":957,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["helper",{"_index":941,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{}}}],["helper.ts",{"_index":2945,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["hence",{"_index":3908,"title":{},"body":{"properties.html":{}}}],["here",{"_index":1032,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"classes/RoleResponse.html":{},"index.html":{}}}],["here](${message.url",{"_index":2796,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["hereafter",{"_index":3725,"title":{},"body":{"license.html":{}}}],["hex",{"_index":913,"title":{},"body":{"classes/DiscordUser.html":{}}}],["hexaccentcolor",{"_index":893,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["hier",{"_index":2133,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["higher",{"_index":998,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["higher.guard",{"_index":1259,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["higher.guard.ts",{"_index":2237,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["higher.guard.ts:11",{"_index":2238,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["higher.guard.ts:16",{"_index":2239,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["hilfe",{"_index":962,"title":{},"body":{"injectables/DmMessageHandler.html":{},"miscellaneous/functions.html":{}}}],["hoist",{"_index":971,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["hoisted",{"_index":982,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["holder",{"_index":3657,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3614,"title":{},"body":{"license.html":{}}}],["hope",{"_index":3880,"title":{},"body":{"license.html":{}}}],["host",{"_index":641,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["host.getargbyindex(0",{"_index":708,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["host.switchtohttp",{"_index":643,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["hosts",{"_index":3525,"title":{},"body":{"license.html":{}}}],["hours",{"_index":2862,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["household",{"_index":3547,"title":{},"body":{"license.html":{}}}],["hs256",{"_index":1911,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["http",{"_index":636,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["httpcode",{"_index":1575,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["httpcode(httpstatuscode.accepted",{"_index":1583,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["httpmodule",{"_index":1875,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["https://cdn.discordapp.com/emojis/859111454677139476.webp",{"_index":1010,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["https://discordapp.com/api/oauth2/token",{"_index":1917,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["https://fsf.org",{"_index":3146,"title":{},"body":{"license.html":{}}}],["https://github.com/89q12/mega",{"_index":826,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["https://github.com/discordjs/discord.js/issues/4930#issuecomment",{"_index":1315,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["https://nestjs.com",{"_index":3071,"title":{},"body":{"index.html":{}}}],["https://old.discordjs.dev/#/docs/discord.js/main/class/role?scrollto=seticon",{"_index":1022,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["https://www.gnu.org/licenses",{"_index":3899,"title":{},"body":{"license.html":{}}}],["httpservice",{"_index":1844,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["httpstatus",{"_index":630,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["httpstatuscode",{"_index":1577,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["hug",{"_index":2494,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["i.customid",{"_index":2174,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["ia",{"_index":740,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["ia(modalfieldstransformpipe",{"_index":805,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["ia(slashcommandpipe",{"_index":761,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["ich",{"_index":945,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["icon",{"_index":972,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["iconurl",{"_index":823,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["id",{"_index":72,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/Channel.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SettingsChanged.html":{},"classes/UnverifyByRoleCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifiable",{"_index":3753,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":2896,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1928,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["ids",{"_index":447,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"injectables/SelfService.html":{}}}],["iffy",{"_index":1348,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ignoreenvvars",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":1962,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["image",{"_index":1077,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{}}}],["images",{"_index":449,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["implement",{"_index":1035,"title":{},"body":{"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"license.html":{}}}],["implementation",{"_index":3334,"title":{},"body":{"license.html":{}}}],["implemented",{"_index":2751,"title":{},"body":{"controllers/UserController.html":{}}}],["implements",{"_index":502,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RestrictedChannelDto.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["implied",{"_index":3778,"title":{},"body":{"license.html":{}}}],["import",{"_index":31,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["importing",{"_index":3716,"title":{},"body":{"license.html":{}}}],["imports",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["impose",{"_index":3642,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":3781,"title":{},"body":{"license.html":{}}}],["improvements",{"_index":3199,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3842,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":3845,"title":{},"body":{"license.html":{}}}],["inc",{"_index":3145,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3839,"title":{},"body":{"license.html":{}}}],["include",{"_index":3324,"title":{},"body":{"license.html":{}}}],["included",{"_index":3326,"title":{},"body":{"license.html":{}}}],["includes",{"_index":3280,"title":{},"body":{"license.html":{}}}],["including",{"_index":3343,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":3482,"title":{},"body":{"license.html":{}}}],["incorporate",{"_index":3205,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3799,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":3550,"title":{},"body":{"license.html":{}}}],["indemnification",{"_index":3638,"title":{},"body":{"license.html":{}}}],["independent",{"_index":3470,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":3682,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":3648,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3480,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":3258,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":3564,"title":{},"body":{"license.html":{}}}],["inestapplication",{"_index":2230,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["inform",{"_index":3532,"title":{},"body":{"license.html":{}}}],["information",{"_index":2651,"title":{},"body":{"classes/TimeOutCommand.html":{},"license.html":{}}}],["infringe",{"_index":3680,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3713,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3272,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":1807,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["inheritedranks",{"_index":1812,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inheritedranks[user.rank",{"_index":1804,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["initguildcommand",{"_index":396,"title":{"classes/initGuildCommand.html":{}},"body":{"modules/BotModule.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["initiate",{"_index":3706,"title":{},"body":{"license.html":{}}}],["initiatemodrequestflow",{"_index":2055,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["initiatemodrequestflow(interaction",{"_index":2063,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["inject",{"_index":37,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["inject(auditlogservice",{"_index":262,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["inject(eventemitter2",{"_index":221,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["inject(guildautodeletechannelservice",{"_index":1109,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["inject(guildrestrictedchannelservice",{"_index":1501,"title":{},"body":{"injectables/GuildService.html":{}}}],["inject(guildservice",{"_index":1201,"title":{},"body":{"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["inject(guildsettingsservice",{"_index":860,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["inject(guilduserservice",{"_index":1267,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/TasksService.html":{}}}],["inject(prismaservice",{"_index":51,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["inject(reflector",{"_index":1793,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["inject(tasksservice",{"_index":1155,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["injectable",{"_index":199,"title":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":200,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectdiscordclient",{"_index":33,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["input",{"_index":711,"title":{},"body":{"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionDto.html":{},"classes/UserTimeOutDto.html":{}}}],["inputs",{"_index":801,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["insertmessage",{"_index":1700,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["insertmessage(data",{"_index":1724,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["install",{"_index":3342,"title":{},"body":{"license.html":{}}}],["installation",{"_index":3038,"title":{},"body":{"index.html":{},"license.html":{}}}],["installed",{"_index":3586,"title":{},"body":{"license.html":{}}}],["installrunning",{"_index":3040,"title":{},"body":{"index.html":{}}}],["instance",{"_index":248,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildSettingsController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{}}}],["instance.ts",{"_index":2947,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["instanceof",{"_index":864,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/variables.html":{}}}],["int",{"_index":839,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["intact",{"_index":3444,"title":{},"body":{"license.html":{}}}],["integration",{"_index":1013,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["intended",{"_index":3170,"title":{},"body":{"license.html":{}}}],["intention",{"_index":3433,"title":{},"body":{"license.html":{}}}],["intents",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["interact",{"_index":3886,"title":{},"body":{"license.html":{}}}],["interacting",{"_index":3793,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":29,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"guards/IsModalInteractionGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["interaction.channel.messages.fetch",{"_index":2397,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["interaction.channel.send",{"_index":2203,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["interaction.customid",{"_index":2127,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["interaction.customid.endswith",{"_index":3126,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.customid.includes('community",{"_index":777,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.customid.split",{"_index":778,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["interaction.customid.startswith('closeticket",{"_index":2138,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.deferreply",{"_index":669,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/ModRequestFlow.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.deletereply",{"_index":2137,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.editreply",{"_index":2121,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.editreply(options",{"_index":2165,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.fields.gettextinputvalue('modrequestmessage",{"_index":2113,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.followup",{"_index":698,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.guard",{"_index":756,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.guard.ts",{"_index":1814,"title":{},"body":{"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["interaction.guard.ts:5",{"_index":1815,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interaction.guild.channels.fetch(settings.introchannelid",{"_index":3102,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.leavechannelid",{"_index":3105,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.modchannelid)).name",{"_index":3108,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.openintrochannelid",{"_index":3098,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.members.fetch().then((members",{"_index":53,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["interaction.guild.members.fetch(dto.user",{"_index":2497,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["interaction.guild.roles.fetch(settings.adminroleid)).name",{"_index":3114,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.modroleid)).name",{"_index":3111,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.unverifiedmemberroleid",{"_index":3121,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.verifiedmemberroleid",{"_index":3117,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guildid",{"_index":673,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.isanyselectmenu",{"_index":3127,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.isbutton",{"_index":776,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["interaction.ischannelselectmenu",{"_index":3128,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.iscontextmenucommand",{"_index":2396,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["interaction.ismodalsubmit",{"_index":2085,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.isrepliable",{"_index":719,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["interaction.isroleselectmenu",{"_index":3132,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.isstringselectmenu",{"_index":2126,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.reply",{"_index":720,"title":{},"body":{"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["interaction.reply('das",{"_index":2141,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.showmodal(modal",{"_index":803,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.showmodal(modrequestmodal",{"_index":2136,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.targetid",{"_index":2398,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["interaction.targetmessage.id",{"_index":2212,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.type",{"_index":1817,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interaction.user.displayname",{"_index":2092,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.user.id",{"_index":2102,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{}}}],["interaction.values[0",{"_index":3129,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.values[0].split",{"_index":2129,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interactionevent",{"_index":34,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["interactiontype",{"_index":1816,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interactiontype.modalsubmit",{"_index":1818,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interactive",{"_index":3290,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":3496,"title":{},"body":{"license.html":{}}}],["interest",{"_index":3699,"title":{},"body":{"license.html":{}}}],["interface",{"_index":363,"title":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{}},"body":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{},"license.html":{}}}],["interfaces",{"_index":365,"title":{},"body":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{},"license.html":{},"overview.html":{}}}],["interfered",{"_index":3575,"title":{},"body":{"license.html":{}}}],["internalservererrorexception",{"_index":3944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interpretation",{"_index":3853,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":3340,"title":{},"body":{"license.html":{}}}],["interval",{"_index":1471,"title":{},"body":{"injectables/GuildService.html":{}}}],["intimate",{"_index":3359,"title":{},"body":{"license.html":{}}}],["intro",{"_index":3099,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["introchannelid",{"_index":2412,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["introduction",{"_index":2794,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["invalid",{"_index":1127,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["invalid_grant",{"_index":1941,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["invalid_request",{"_index":2003,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invalidate",{"_index":3465,"title":{},"body":{"license.html":{}}}],["invite",{"_index":1988,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invite_created",{"_index":2004,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invite_deleted",{"_index":2005,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invoker",{"_index":1981,"title":{},"body":{"classes/LogEntry.html":{}}}],["invokerid",{"_index":278,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/UserInfoUiCommand.html":{}}}],["involved",{"_index":1975,"title":{},"body":{"classes/LogEntry.html":{}}}],["irrevocable",{"_index":3371,"title":{},"body":{"license.html":{}}}],["isactive",{"_index":1701,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["isactive(userid",{"_index":1729,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["isarray",{"_index":478,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isarray()@isstring()@isoptional()@apiproperty({description",{"_index":445,"title":{},"body":{"classes/Channel.html":{}}}],["isavailable",{"_index":1554,"title":{},"body":{"injectables/GuildService.html":{}}}],["isboolean",{"_index":479,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["isboolean()@apiproperty({type",{"_index":877,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/RoleResponse.html":{}}}],["isboolean()@isoptional()@apiproperty({description",{"_index":452,"title":{},"body":{"classes/Channel.html":{}}}],["isboolean()@isoptional()@apiproperty({type",{"_index":981,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{}}}],["ischannelavailabletouser",{"_index":1422,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["ischannelavailabletouser(user",{"_index":1428,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{}}}],["isdate",{"_index":1993,"title":{},"body":{"classes/LogEntry.html":{}}}],["isdate()@apiproperty({type",{"_index":1972,"title":{},"body":{"classes/LogEntry.html":{}}}],["isdatestring",{"_index":886,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/UserTimeOutDto.html":{}}}],["isdatestring()@isoptional()@apipropertyoptional({type",{"_index":879,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["isenum",{"_index":480,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isenum(channeltype",{"_index":491,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isenum(channeltype)@isoptional()@apiproperty({enum",{"_index":1187,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["isglobal",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":300,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["isin(['string",{"_index":1182,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["isin([string",{"_index":497,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isin(actions",{"_index":309,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["isin(object.keys(colors",{"_index":1017,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isin(object.keys(permissionflagsbits",{"_index":1019,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isin(targettypes",{"_index":308,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["isin(undefined)@apiproperty({enum",{"_index":977,"title":{},"body":{"classes/EditRoleData.html":{}}}],["isin(undefined)@isoptional()@apiproperty({type",{"_index":994,"title":{},"body":{"classes/EditRoleData.html":{}}}],["isinstance",{"_index":481,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isinstance(permissionoverwrite",{"_index":488,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isinstance(permissionoverwrite)@isoptional()@apiproperty({description",{"_index":459,"title":{},"body":{"classes/Channel.html":{}}}],["ismodalinteractionguard",{"_index":753,"title":{"guards/IsModalInteractionGuard.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["isn't",{"_index":623,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["isnumber",{"_index":482,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isnumber()@apiproperty({description",{"_index":428,"title":{},"body":{"classes/Channel.html":{}}}],["isnumber()@apiproperty({type",{"_index":895,"title":{},"body":{"classes/DiscordUser.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isnumber()@isoptional()@apiproperty({description",{"_index":463,"title":{},"body":{"classes/Channel.html":{}}}],["isnumber()@isoptional()@apiproperty({type",{"_index":997,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{}}}],["isoptional",{"_index":301,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{}}}],["isstring",{"_index":302,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{}}}],["isstring()@apiproperty({description",{"_index":435,"title":{},"body":{"classes/Channel.html":{},"classes/PermissionOverwrite.html":{}}}],["isstring()@apiproperty({type",{"_index":875,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isstring()@isoptional()@apiproperty({description",{"_index":441,"title":{},"body":{"classes/Channel.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":986,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{}}}],["isstring()@isoptional()@apipropertyoptional({type",{"_index":2421,"title":{},"body":{"classes/SettingsDto.html":{}}}],["isstring()@matches(/^(((\\d+,)+\\d+|(\\d",{"_index":1124,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["issuer",{"_index":1908,"title":{},"body":{"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["ist",{"_index":2142,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["isurl",{"_index":1005,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isurl()@apiproperty({type",{"_index":2307,"title":{},"body":{"classes/RoleResponse.html":{}}}],["isuserunlockedguard",{"_index":859,"title":{"guards/IsUserUnlockedGuard.html":{}},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMessageHandler.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["it.action",{"_index":275,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.adminroleid",{"_index":1644,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.avatarurl",{"_index":1680,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.createdat",{"_index":277,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.displayname",{"_index":1683,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.guild.name",{"_index":1684,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.introchannelid",{"_index":1647,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.invokerid",{"_index":279,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.members.fetch(userid",{"_index":1679,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.modchannelid",{"_index":1648,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.modroleid",{"_index":1643,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.openintrochannelid",{"_index":1646,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.reason",{"_index":281,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.targetid",{"_index":283,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.targettype",{"_index":284,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.unverifiedmemberroleid",{"_index":1642,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.verifiedmemberroleid",{"_index":1641,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.welcomemessageformat",{"_index":1645,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["item",{"_index":3306,"title":{},"body":{"license.html":{}}}],["items",{"_index":924,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["itself",{"_index":3590,"title":{},"body":{"license.html":{}}}],["jest",{"_index":2967,"title":{},"body":{"dependencies.html":{}}}],["joboptions",{"_index":2562,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.crontime",{"_index":2569,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.oncomplete",{"_index":2571,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.ontick",{"_index":2570,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.start",{"_index":2572,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.timezone",{"_index":2573,"title":{},"body":{"injectables/TasksService.html":{}}}],["jobs",{"_index":2525,"title":{},"body":{"modules/TasksModule.html":{}}}],["jobs/tasks",{"_index":2531,"title":{},"body":{"injectables/TasksService.html":{}}}],["john",{"_index":919,"title":{},"body":{"classes/DiscordUser.html":{}}}],["join",{"_index":1468,"title":{},"body":{"injectables/GuildService.html":{},"index.html":{}}}],["join('\\n",{"_index":694,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildSettingsService.html":{},"injectables/TasksService.html":{}}}],["json.stringify",{"_index":2091,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["json.stringify(error.response.data",{"_index":1939,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["jsonarray",{"_index":1265,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["jwt",{"_index":1839,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtauthcontroller",{"_index":1822,"title":{"controllers/JwtAuthController.html":{}},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"coverage.html":{}}}],["jwtauthguard",{"_index":86,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtauthguard.name",{"_index":3941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthmodule",{"_index":106,"title":{"modules/JwtAuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/JwtAuthModule.html":{},"modules.html":{},"overview.html":{}}}],["jwtauthservice",{"_index":1838,"title":{"injectables/JwtAuthService.html":{}},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"coverage.html":{},"overview.html":{}}}],["jwtauthstrategy",{"_index":1864,"title":{"injectables/JwtAuthStrategy.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtconstants.secret",{"_index":1879,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtfromrequest",{"_index":1960,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["jwtmodule",{"_index":1869,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtmodule.register",{"_index":1877,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtservice",{"_index":1887,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["kaffee",{"_index":2460,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["kamil",{"_index":3068,"title":{},"body":{"index.html":{}}}],["kann",{"_index":951,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kategorie",{"_index":2114,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["keep",{"_index":3443,"title":{},"body":{"license.html":{}}}],["kein",{"_index":952,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kernel",{"_index":3336,"title":{},"body":{"license.html":{}}}],["key",{"_index":717,"title":{},"body":{"classes/CommandValidationFilter.html":{},"controllers/GuildController.html":{},"injectables/GuildSettingsService.html":{},"classes/LogEntry.html":{},"license.html":{}}}],["key.endswith('roleid",{"_index":1631,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["keyof",{"_index":1635,"title":{},"body":{"injectables/GuildSettingsService.html":{},"classes/SettingsChanged.html":{}}}],["keys",{"_index":3569,"title":{},"body":{"license.html":{}}}],["kick",{"_index":660,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/LogEntry.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["kicked",{"_index":681,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["kickmembers",{"_index":666,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["kicks",{"_index":2551,"title":{},"body":{"injectables/TasksService.html":{}}}],["kickuser",{"_index":2702,"title":{},"body":{"controllers/UserController.html":{}}}],["kickuser(guildid",{"_index":2712,"title":{},"body":{"controllers/UserController.html":{}}}],["kind",{"_index":3284,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":3157,"title":{},"body":{"license.html":{}}}],["klicke",{"_index":958,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["know",{"_index":3183,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":3742,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":3750,"title":{},"body":{"license.html":{}}}],["konnten",{"_index":686,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["konsul",{"_index":2461,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["koverstionen",{"_index":953,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kuchen",{"_index":2452,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["käsekuchen",{"_index":2448,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["labels",{"_index":1204,"title":{},"body":{"controllers/GuildController.html":{}}}],["labels.push",{"_index":1208,"title":{},"body":{"controllers/GuildController.html":{}}}],["labels.push(key",{"_index":1213,"title":{},"body":{"controllers/GuildController.html":{}}}],["language",{"_index":3319,"title":{},"body":{"license.html":{}}}],["larger",{"_index":3474,"title":{},"body":{"license.html":{}}}],["last",{"_index":442,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{}}}],["lastmessageid",{"_index":419,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["later",{"_index":3812,"title":{},"body":{"license.html":{}}}],["latte",{"_index":2462,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["law",{"_index":3274,"title":{},"body":{"license.html":{}}}],["laws",{"_index":3248,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3711,"title":{},"body":{"license.html":{}}}],["leads",{"_index":3889,"title":{},"body":{"license.html":{}}}],["leavechannelid",{"_index":2413,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["leavemessageformat",{"_index":2414,"title":{},"body":{"classes/SettingsDto.html":{}}}],["legal",{"_index":3193,"title":{},"body":{"license.html":{}}}],["legend",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1378,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["letting",{"_index":3217,"title":{},"body":{"license.html":{}}}],["liability",{"_index":3617,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3271,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3322,"title":{},"body":{"license.html":{}}}],["library",{"_index":3540,"title":{},"body":{"license.html":{}}}],["license",{"_index":3074,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3054,"title":{},"body":{"index.html":{},"license.html":{}}}],["licensee",{"_index":3254,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":3256,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":3164,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":3684,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":3629,"title":{},"body":{"license.html":{}}}],["lift",{"_index":43,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["likewise",{"_index":3677,"title":{},"body":{"license.html":{}}}],["limit",{"_index":230,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"license.html":{}}}],["limitation",{"_index":3836,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3823,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":3616,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1503,"title":{},"body":{"injectables/GuildService.html":{}}}],["line",{"_index":3876,"title":{},"body":{"license.html":{}}}],["link",{"_index":2793,"title":{},"body":{"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["linked",{"_index":3356,"title":{},"body":{"license.html":{}}}],["list",{"_index":2020,"title":{},"body":{"classes/LogEntry.html":{},"injectables/SelfService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["listens",{"_index":1488,"title":{},"body":{"injectables/GuildService.html":{}}}],["literal",{"_index":329,"title":{},"body":{"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{}}}],["litigation",{"_index":3707,"title":{},"body":{"license.html":{}}}],["local",{"_index":2813,"title":{},"body":{"modules/UserModule.html":{},"license.html":{}}}],["lockdown",{"_index":44,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["log",{"_index":220,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"injectables/JwtAuthService.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["log.ts",{"_index":1033,"title":{},"body":{"interfaces/EventToLog.html":{},"coverage.html":{}}}],["log.ts:11",{"_index":1039,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["logchannel.send",{"_index":2587,"title":{},"body":{"injectables/TasksService.html":{}}}],["logentries",{"_index":1969,"title":{},"body":{"classes/LogEntry.html":{}}}],["logentry",{"_index":324,"title":{"classes/LogEntry.html":{}},"body":{"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{}}}],["logentrydto",{"_index":243,"title":{"classes/LogEntryDto.html":{}},"body":{"controllers/AuditLogController.html":{},"classes/LogEntryDto.html":{},"coverage.html":{}}}],["logged",{"_index":2324,"title":{},"body":{"controllers/SelfController.html":{}}}],["logger",{"_index":203,"title":{},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"controllers/RoleController.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["logger('appservice",{"_index":217,"title":{},"body":{"injectables/AppService.html":{}}}],["logger('requestguilduser",{"_index":3934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('requestuser",{"_index":3947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('rolecontroller",{"_index":2285,"title":{},"body":{"controllers/RoleController.html":{},"miscellaneous/variables.html":{}}}],["logger('taskservice",{"_index":2568,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["logger(channelcontroller.name",{"_index":584,"title":{},"body":{"controllers/ChannelController.html":{}}}],["logger(dmmessagehandler.name",{"_index":933,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["logger(guildautodeletechannelservice.name",{"_index":1154,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["logger(guildmemberevents.name",{"_index":1256,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["logger(hasrequiredrank.name",{"_index":1792,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["logger(jwtauthcontroller.name",{"_index":1848,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["logger(jwtauthservice.name",{"_index":1898,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["logger(modrequestflow.name",{"_index":2075,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["logger(usercontroller.name",{"_index":2730,"title":{},"body":{"controllers/UserController.html":{}}}],["logger.error",{"_index":2695,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.error(`${ctx.gethandler().tostring",{"_index":3937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger.log",{"_index":522,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.log(`checking",{"_index":2575,"title":{},"body":{"injectables/TasksService.html":{}}}],["logger.log(`created",{"_index":2293,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`deleted",{"_index":2301,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`found",{"_index":2289,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`settingschanged",{"_index":2408,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["logger.log(`updated",{"_index":2299,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`userbanevent",{"_index":2689,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.log(`userkickevent",{"_index":2692,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logging",{"_index":1043,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["login",{"_index":1826,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["login(@query('code",{"_index":1853,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["login(code",{"_index":1828,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["login(userid",{"_index":1892,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["long",{"_index":3382,"title":{},"body":{"license.html":{}}}],["longer",{"_index":662,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["loss",{"_index":3843,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3846,"title":{},"body":{"license.html":{}}}],["lower",{"_index":1809,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["lowest",{"_index":1811,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["lte",{"_index":349,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["m",{"_index":1467,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.channelid",{"_index":1461,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.createdat",{"_index":1476,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.userid",{"_index":1462,"title":{},"body":{"injectables/GuildService.html":{}}}],["macchiato",{"_index":2463,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["machine",{"_index":3486,"title":{},"body":{"license.html":{}}}],["made",{"_index":3200,"title":{},"body":{"license.html":{}}}],["mail",{"_index":3885,"title":{},"body":{"license.html":{}}}],["maintain",{"_index":3520,"title":{},"body":{"license.html":{}}}],["major",{"_index":3329,"title":{},"body":{"license.html":{}}}],["make",{"_index":1310,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["makes",{"_index":3404,"title":{},"body":{"license.html":{}}}],["making",{"_index":3215,"title":{},"body":{"license.html":{}}}],["manage",{"_index":2812,"title":{},"body":{"modules/UserModule.html":{}}}],["managed",{"_index":1012,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["manages",{"_index":2523,"title":{},"body":{"modules/TasksModule.html":{}}}],["managing",{"_index":2530,"title":{},"body":{"injectables/TasksService.html":{}}}],["manner",{"_index":3726,"title":{},"body":{"license.html":{}}}],["many",{"_index":3206,"title":{},"body":{"license.html":{}}}],["map",{"_index":1478,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["map((it",{"_index":1657,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["map((member",{"_index":692,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["map((row",{"_index":3123,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["map((user",{"_index":2154,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["march",{"_index":3775,"title":{},"body":{"license.html":{}}}],["marked",{"_index":3626,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3636,"title":{},"body":{"license.html":{}}}],["masks",{"_index":3251,"title":{},"body":{"license.html":{}}}],["match",{"_index":2852,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('d",{"_index":2855,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('h",{"_index":2857,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('m",{"_index":2859,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('d",{"_index":2856,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('h",{"_index":2858,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('m",{"_index":2860,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["matches",{"_index":1131,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["matches(/^(((\\d+,)+\\d+|(\\d",{"_index":1132,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["matching",{"_index":80,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":3391,"title":{},"body":{"license.html":{}}}],["materially",{"_index":3591,"title":{},"body":{"license.html":{}}}],["maybe",{"_index":2493,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["meaning",{"_index":1808,"title":{},"body":{"guards/HasRequiredRank.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":3247,"title":{},"body":{"license.html":{}}}],["measure",{"_index":3413,"title":{},"body":{"license.html":{}}}],["measures",{"_index":3425,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3439,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3453,"title":{},"body":{"license.html":{}}}],["meets",{"_index":3307,"title":{},"body":{"license.html":{}}}],["mega",{"_index":3909,"title":{},"body":{"properties.html":{}}}],["member",{"_index":55,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["member.communicationdisableduntiltimestamp",{"_index":2581,"title":{},"body":{"injectables/TasksService.html":{}}}],["member.displayavatarurl",{"_index":2735,"title":{},"body":{"controllers/UserController.html":{}}}],["member.displayname",{"_index":2738,"title":{},"body":{"controllers/UserController.html":{}}}],["member.guild.id",{"_index":66,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{}}}],["member.guild.ownerid",{"_index":1755,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["member.id",{"_index":68,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.kick",{"_index":1521,"title":{},"body":{"injectables/GuildService.html":{}}}],["member.roles.add",{"_index":2680,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.add('1014066383912439809",{"_index":1307,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.add('1121823930085285938",{"_index":2679,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.add(role.id",{"_index":75,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["member.roles.add(verifiedroleid",{"_index":1305,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.cache.foreach((role",{"_index":2671,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1011513775054143632",{"_index":57,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1011563978956226560",{"_index":56,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1070116538083975309",{"_index":1514,"title":{},"body":{"injectables/GuildService.html":{}}}],["member.roles.cache.has('1121823930085285938",{"_index":59,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["member.roles.cache.has('1226585753253843014",{"_index":1300,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.remove",{"_index":1320,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.remove(role.id",{"_index":2678,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.timeout(parseint(duration",{"_index":2760,"title":{},"body":{"controllers/UserController.html":{}}}],["member.ts",{"_index":870,"title":{},"body":{"classes/DiscordGuildMember.html":{},"coverage.html":{}}}],["member.ts:11",{"_index":882,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:15",{"_index":880,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:18",{"_index":881,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:21",{"_index":885,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:24",{"_index":876,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:27",{"_index":878,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:8",{"_index":884,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.user",{"_index":2743,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.bot",{"_index":1281,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["member.user.globalname",{"_index":2739,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.id",{"_index":2736,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.username",{"_index":1280,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["member?.communicationdisableduntil?.tojson",{"_index":2737,"title":{},"body":{"controllers/UserController.html":{}}}],["members",{"_index":661,"title":{},"body":{"classes/CleanWfpMember.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["members.fetch(dbuser.userid.tostring",{"_index":2580,"title":{},"body":{"injectables/TasksService.html":{}}}],["members.fetch(user.id",{"_index":1343,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members.fetch(user.userid",{"_index":1299,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members.foreach(async",{"_index":54,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["members.map((member",{"_index":2733,"title":{},"body":{"controllers/UserController.html":{}}}],["members.push(member",{"_index":1515,"title":{},"body":{"injectables/GuildService.html":{}}}],["members.size",{"_index":2732,"title":{},"body":{"controllers/UserController.html":{}}}],["members/index.ts",{"_index":1226,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{}}}],["members/index.ts:125",{"_index":1254,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:143",{"_index":1241,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:23",{"_index":1233,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:37",{"_index":1244,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:48",{"_index":1237,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:58",{"_index":1247,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:69",{"_index":1250,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["memberstokick",{"_index":1519,"title":{},"body":{"injectables/GuildService.html":{}}}],["membersunfiltered",{"_index":1509,"title":{},"body":{"injectables/GuildService.html":{}}}],["membersunfiltered.foreach(async",{"_index":1511,"title":{},"body":{"injectables/GuildService.html":{}}}],["mentionable",{"_index":973,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["menu",{"_index":1413,"title":{},"body":{"modules/GuildModule.html":{},"license.html":{}}}],["menu/index.ts",{"_index":2053,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{}}}],["menu/index.ts:131",{"_index":2071,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:157",{"_index":2066,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:192",{"_index":2068,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:201",{"_index":2064,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:227",{"_index":2062,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:34",{"_index":2060,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:44",{"_index":2074,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["merchantability",{"_index":3824,"title":{},"body":{"license.html":{}}}],["mere",{"_index":3287,"title":{},"body":{"license.html":{}}}],["merging",{"_index":3695,"title":{},"body":{"license.html":{}}}],["message",{"_index":405,"title":{},"body":{"modules/BotModule.html":{},"classes/Channel.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["message).inguild",{"_index":865,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"miscellaneous/variables.html":{}}}],["message.attachments.map",{"_index":1398,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.attachments.map((attachment",{"_index":1380,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.attachments.size",{"_index":1396,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.author.bot",{"_index":2033,"title":{},"body":{"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{}}}],["message.author.id",{"_index":1372,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["message.channel",{"_index":1388,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.channelid",{"_index":1375,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"miscellaneous/variables.html":{}}}],["message.content",{"_index":1655,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["message.content.length",{"_index":1379,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.fetch",{"_index":2244,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.guildid",{"_index":1376,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["message.id",{"_index":1374,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.member.roles.cache.has",{"_index":866,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["message.message",{"_index":3932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message.message.guildid",{"_index":2248,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.message.inguild",{"_index":2245,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.partial",{"_index":2243,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.react('1194715694948946030",{"_index":1393,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.reactions.cache.map((reaction",{"_index":1383,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.reply",{"_index":944,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts",{"_index":928,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"coverage.html":{}}}],["message/index.ts:10",{"_index":1357,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message/index.ts:14",{"_index":934,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts:17",{"_index":1360,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message/index.ts:18",{"_index":932,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts:53",{"_index":1362,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message_deleted",{"_index":2006,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["messageactionrowcomponentbuilder",{"_index":3086,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["messagecontextmenucommandinteraction",{"_index":2196,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["messagecount",{"_index":1464,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["messagecountbucket",{"_index":1754,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["messagecounts",{"_index":1529,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagefromuserguard",{"_index":1364,"title":{"guards/MessageFromUserGuard.html":{}},"body":{"injectables/GuildMessageHandler.html":{},"guards/MessageFromUserGuard.html":{},"coverage.html":{}}}],["messageid",{"_index":1373,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{}}}],["messageisdmguard",{"_index":936,"title":{"guards/MessageIsDmGuard.html":{}},"body":{"injectables/DmMessageHandler.html":{},"guards/MessageIsDmGuard.html":{},"coverage.html":{}}}],["messagemetadata",{"_index":1725,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["messagereaction",{"_index":1239,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["messagereaction).emoji.name",{"_index":3953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagereference",{"_index":2206,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["messages",{"_index":420,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{}}}],["messages.last().createdtimestamp",{"_index":613,"title":{},"body":{"controllers/ChannelController.html":{}}}],["messagesdeleted",{"_index":505,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["messagesperchannellastmonth",{"_index":1192,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperchannellastmonth(@param('guildid",{"_index":1202,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperchannellastmonth(guildid",{"_index":1194,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth",{"_index":1193,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth(@param('guildid",{"_index":1210,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth(guildid",{"_index":1198,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagestats",{"_index":1526,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagestats.reduce",{"_index":1546,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagestats.reduce((acc",{"_index":1531,"title":{},"body":{"injectables/GuildService.html":{}}}],["met",{"_index":3373,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1064,"title":{},"body":{"classes/Explorer.html":{},"injectables/GuildUserService.html":{},"dependencies.html":{}}}],["method",{"_index":1068,"title":{},"body":{"classes/Explorer.html":{}}}],["methods",{"_index":9,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["midnight",{"_index":2550,"title":{},"body":{"injectables/TasksService.html":{}}}],["minutes",{"_index":2545,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{}}}],["miscchannelid",{"_index":3131,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["miscellaneous",{"_index":2982,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misrepresentation",{"_index":3624,"title":{},"body":{"license.html":{}}}],["mit",{"_index":2611,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"index.html":{}}}],["mixin(channelidguardmixin",{"_index":3933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mixin(reactionemote",{"_index":3954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mock",{"_index":2968,"title":{},"body":{"dependencies.html":{}}}],["mod",{"_index":1258,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["modal",{"_index":755,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"guards/IsModalInteractionGuard.html":{},"injectables/ModRequestFlow.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["modal.addcomponents(questioncomponentrow",{"_index":802,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.customid.split",{"_index":810,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.customid.startswith('community",{"_index":809,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.ismodalsubmit",{"_index":808,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.reply",{"_index":832,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modalactionrowcomponentbuilder",{"_index":745,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["modalbuilder",{"_index":746,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["modalfieldstransformpipe",{"_index":751,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modalsubmitinteraction",{"_index":2073,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modannouncementdto",{"_index":2036,"title":{"classes/ModAnnouncementDto.html":{}},"body":{"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["modchannelid",{"_index":2415,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["mode",{"_index":3044,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":3502,"title":{},"body":{"license.html":{}}}],["moderatemembers",{"_index":46,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["moderation",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["moderation/moderation.module",{"_index":1407,"title":{},"body":{"modules/GuildModule.html":{}}}],["moderationmodule",{"_index":130,"title":{"modules/ModerationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/ModerationModule.html":{},"modules.html":{},"overview.html":{}}}],["modification",{"_index":3243,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":3310,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3216,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":3458,"title":{},"body":{"license.html":{}}}],["modify",{"_index":3195,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":3278,"title":{},"body":{"license.html":{}}}],["modrequest",{"_index":3007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modrequestcategoryselect",{"_index":2081,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["modrequestcategoryselect(guildid",{"_index":2160,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modrequestcategoryselect(suffix",{"_index":3005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modrequestflow",{"_index":1404,"title":{"injectables/ModRequestFlow.html":{}},"body":{"modules/GuildModule.html":{},"injectables/ModRequestFlow.html":{},"coverage.html":{},"overview.html":{}}}],["modrequestmenu",{"_index":2159,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/variables.html":{}}}],["modrequestmenuid",{"_index":2082,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modrequestmodal",{"_index":2087,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modrequestmodal.addcomponents",{"_index":2130,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modroleid",{"_index":2416,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["mods",{"_index":783,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["module",{"_index":92,"title":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":94,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mokka",{"_index":2464,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["month",{"_index":1196,"title":{},"body":{"controllers/GuildController.html":{}}}],["more",{"_index":999,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildService.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"modules/UserModule.html":{},"index.html":{},"license.html":{}}}],["moreover",{"_index":3666,"title":{},"body":{"license.html":{}}}],["ms",{"_index":2224,"title":{},"body":{"classes/PingCommand.html":{}}}],["msg",{"_index":2770,"title":{},"body":{"controllers/UserController.html":{}}}],["msg.author.id",{"_index":2771,"title":{},"body":{"controllers/UserController.html":{}}}],["msg.createdtimestamp",{"_index":615,"title":{},"body":{"controllers/ChannelController.html":{}}}],["msg.deletable",{"_index":614,"title":{},"body":{"controllers/ChannelController.html":{}}}],["msgid",{"_index":2781,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["mumvoice",{"_index":2199,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["mumvoicecommandchatinput",{"_index":386,"title":{"classes/MumVoiceCommandChatInput.html":{}},"body":{"modules/BotModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["mumvoicecommandui",{"_index":387,"title":{"classes/MumVoiceCommandUi.html":{}},"body":{"modules/BotModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["mumvoiceui",{"_index":2210,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["muten",{"_index":2626,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["myśliwiec",{"_index":3069,"title":{},"body":{"index.html":{}}}],["möchtest",{"_index":2613,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/UserToUser.html":{}}}],["n\\n${quotedmessage",{"_index":1662,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["nachricht",{"_index":2049,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":3012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["names",{"_index":690,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["nature",{"_index":3471,"title":{},"body":{"license.html":{}}}],["nchannel",{"_index":1171,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setname(channel.name",{"_index":1177,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setparent(channel.parentid",{"_index":1176,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setposition(channel.position",{"_index":1175,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["necessary",{"_index":3832,"title":{},"body":{"license.html":{}}}],["need",{"_index":3364,"title":{},"body":{"license.html":{}}}],["needed",{"_index":2364,"title":{},"body":{"injectables/SelfService.html":{},"license.html":{}}}],["needhelpbutton",{"_index":939,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["needhelpbuttonid",{"_index":2083,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":2349,"title":{},"body":{"injectables/SelfService.html":{},"properties.html":{}}}],["nest",{"_index":3034,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":3073,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1044,"title":{},"body":{"interfaces/EventToLog.html":{},"guards/HasRequiredRank.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":1845,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{}}}],["nestjs/config",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":36,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"injectables/DmMessageHandler.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{}}}],["nestjs/core/dist/decorators/option/choice/choice",{"_index":2888,"title":{},"body":{"classes/UserToUser.html":{}}}],["nestjs/event",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1870,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1860,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2959,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["network",{"_index":3163,"title":{},"body":{"license.html":{}}}],["never",{"_index":2235,"title":{},"body":{"injectables/PrismaService.html":{}}}],["new",{"_index":216,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newmember",{"_index":1252,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newmember.guild.id",{"_index":1336,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newmember.user.username",{"_index":1334,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newrank",{"_index":1332,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["next",{"_index":3523,"title":{},"body":{"license.html":{}}}],["nicht",{"_index":684,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["node.js",{"_index":3027,"title":{},"body":{"index.html":{}}}],["non",{"_index":3311,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":3509,"title":{},"body":{"license.html":{}}}],["normal",{"_index":3327,"title":{},"body":{"license.html":{}}}],["normally",{"_index":3545,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":1103,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/UserController.html":{}}}],["notfoundexception('guild",{"_index":2768,"title":{},"body":{"controllers/UserController.html":{}}}],["nothing",{"_index":3678,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3299,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3293,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":3667,"title":{},"body":{"license.html":{}}}],["notify",{"_index":3663,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":3611,"title":{},"body":{"license.html":{}}}],["november",{"_index":3138,"title":{},"body":{"license.html":{}}}],["now",{"_index":905,"title":{},"body":{"classes/DiscordUser.html":{}}}],["nsfw",{"_index":421,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["null",{"_index":342,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":231,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["numbered",{"_index":3811,"title":{},"body":{"license.html":{}}}],["nummessages",{"_index":2787,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["nummessages.tostring",{"_index":2797,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["numreactions",{"_index":2789,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["numreactions.tostring",{"_index":2798,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["nur",{"_index":948,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["nutzer:in",{"_index":831,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{}}}],["oauth",{"_index":1937,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["oauth2",{"_index":2974,"title":{},"body":{"dependencies.html":{}}}],["oautherrordata",{"_index":1900,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["object",{"_index":608,"title":{},"body":{"controllers/ChannelController.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/LogEntry.html":{},"classes/RoleResponse.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.keys(colors",{"_index":1018,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["object.keys(data).foreach((key",{"_index":1212,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.keys(data).foreach(async",{"_index":1207,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.keys(exception.constraints).map((key",{"_index":716,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["object.keys(settings).foreach(async",{"_index":1630,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["object.values(data",{"_index":1206,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.values(messagecounts[channelid",{"_index":1541,"title":{},"body":{"injectables/GuildService.html":{}}}],["obligate",{"_index":3788,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":3527,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":3415,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":3508,"title":{},"body":{"license.html":{}}}],["occur",{"_index":1995,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["occurred",{"_index":1973,"title":{},"body":{"classes/LogEntry.html":{}}}],["occurring",{"_index":3675,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":3576,"title":{},"body":{"license.html":{}}}],["offer",{"_index":3191,"title":{},"body":{"license.html":{}}}],["offered",{"_index":3534,"title":{},"body":{"license.html":{}}}],["offering",{"_index":3512,"title":{},"body":{"license.html":{}}}],["official",{"_index":3313,"title":{},"body":{"license.html":{}}}],["offset",{"_index":232,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["old",{"_index":1976,"title":{},"body":{"classes/LogEntry.html":{}}}],["old/new",{"_index":1978,"title":{},"body":{"classes/LogEntry.html":{}}}],["older",{"_index":3229,"title":{},"body":{"license.html":{}}}],["oldmember",{"_index":1255,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["oldrank",{"_index":1330,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["omit",{"_index":1121,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntryDto.html":{},"classes/RestrictedChannelDto.html":{},"classes/SettingsDto.html":{}}}],["omit(['guildid",{"_index":1639,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["on('guildmemberadd",{"_index":1236,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('guildmemberremove",{"_index":1246,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('guildmemberupdate",{"_index":1253,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('interactioncreate",{"_index":729,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["on('interactioncreate')@useguards(ismodalinteractionguard",{"_index":738,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["on('messagecreate",{"_index":942,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{}}}],["on('messagecreate')@useguards(messagefromuserguard",{"_index":1359,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["on('messagecreate')@useguards(messageisdmguard",{"_index":931,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["on('messagereactionadd",{"_index":1286,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('messagereactionadd')@useguards(undefined",{"_index":1240,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('ready",{"_index":1243,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["onadminroleidchanged",{"_index":1702,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["onadminroleidchanged(payload",{"_index":1731,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["onbuttoncloseticket",{"_index":2056,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onbuttoncloseticket(interaction",{"_index":2065,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onbuttonneedhelpbutton",{"_index":2057,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onbuttonneedhelpbutton(interaction",{"_index":2067,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onbuttonpress",{"_index":723,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["onbuttonpress(interaction",{"_index":727,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["once",{"_index":1499,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["once('ready",{"_index":1486,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["oncleanwfpmembers",{"_index":651,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncleanwfpmembers(@interactionevent",{"_index":668,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncleanwfpmembers(interaction",{"_index":654,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncommunityquestion",{"_index":724,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["oncommunityquestion(interaction",{"_index":731,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["oncomplete",{"_index":2564,"title":{},"body":{"injectables/TasksService.html":{}}}],["one",{"_index":1987,"title":{},"body":{"classes/LogEntry.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["onevent",{"_index":210,"title":{},"body":{"injectables/AppService.html":{},"injectables/GuildUserService.html":{}}}],["onevent('settings.role.*.changed",{"_index":1732,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["oninitguild",{"_index":3075,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninitguild(@interactionevent",{"_index":3090,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninitguild(interaction",{"_index":3079,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninteraction",{"_index":725,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/initGuildCommand.html":{}}}],["oninteraction(interaction",{"_index":3081,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninteraction(undefined",{"_index":735,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["onmenuselect",{"_index":2058,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmenuselect(interaction",{"_index":2069,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmessage",{"_index":1354,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["onmessage(interaction",{"_index":2192,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["onmessage(message",{"_index":1358,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["onmodalsubmit",{"_index":2059,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmodalsubmit(interaction",{"_index":2072,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmoduleinit",{"_index":2228,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onplaycommand",{"_index":2216,"title":{},"body":{"classes/PingCommand.html":{}}}],["onready",{"_index":1229,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["onroleadd",{"_index":11,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onroleadd(@interactionevent",{"_index":52,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onroleadd(interaction",{"_index":24,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onshowinfo",{"_index":2391,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["onshowinfo(interaction",{"_index":2393,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["ontick",{"_index":1166,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["onticketsystemsetupcommand",{"_index":2600,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["onticketsystemsetupcommand(interaction",{"_index":2602,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["ontimeoutcommand",{"_index":2617,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["ontimeoutcommand(interaction",{"_index":2619,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["onunverifybyrole",{"_index":2661,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["onunverifybyrole(@ia",{"_index":2667,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["onunverifybyrole(baseinteraction",{"_index":2663,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["open",{"_index":3055,"title":{},"body":{"index.html":{},"classes/initGuildCommand.html":{}}}],["openintrochannelid",{"_index":2417,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["operate",{"_index":3849,"title":{},"body":{"license.html":{}}}],["operated",{"_index":3517,"title":{},"body":{"license.html":{}}}],["operating",{"_index":3338,"title":{},"body":{"license.html":{}}}],["operation",{"_index":3434,"title":{},"body":{"license.html":{}}}],["operator",{"_index":3224,"title":{},"body":{"license.html":{}}}],["opportunity",{"_index":3795,"title":{},"body":{"license.html":{}}}],["option",{"_index":3607,"title":{},"body":{"license.html":{}}}],["optional",{"_index":23,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["options",{"_index":2161,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/UserToUser.html":{},"license.html":{}}}],["order",{"_index":1477,"title":{},"body":{"injectables/GuildService.html":{},"license.html":{}}}],["orderby",{"_index":356,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{}}}],["organization",{"_index":3691,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":3259,"title":{},"body":{"license.html":{}}}],["origin",{"_index":3625,"title":{},"body":{"license.html":{}}}],["original",{"_index":3627,"title":{},"body":{"license.html":{}}}],["others",{"_index":3385,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":3383,"title":{},"body":{"license.html":{}}}],["out",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"license.html":{},"overview.html":{}}}],["outcome",{"_index":671,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['memberstokick",{"_index":691,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['memberstokick'].length.tostring",{"_index":689,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['unkickablemembers",{"_index":697,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["outcome['unkickablemembers'].length.tostring",{"_index":696,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["outed",{"_index":2725,"title":{},"body":{"controllers/UserController.html":{}}}],["output",{"_index":3377,"title":{},"body":{"license.html":{}}}],["outside",{"_index":3397,"title":{},"body":{"license.html":{}}}],["overview",{"_index":3903,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":487,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["overwrites",{"_index":461,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["owned",{"_index":3722,"title":{},"body":{"license.html":{}}}],["ownedranks",{"_index":1803,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["ownedranks.includes(requiredrank",{"_index":1805,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["owner",{"_index":1756,"title":{},"body":{"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["owner'].includes(user.rank",{"_index":2249,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["package",{"_index":2951,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packaged",{"_index":3464,"title":{},"body":{"license.html":{}}}],["packaging",{"_index":3328,"title":{},"body":{"license.html":{}}}],["pagination",{"_index":328,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["pagination.limit",{"_index":362,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["pagination.offset",{"_index":359,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["paper",{"_index":3884,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":3654,"title":{},"body":{"license.html":{}}}],["paragraphs",{"_index":3734,"title":{},"body":{"license.html":{}}}],["param",{"_index":235,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"interfaces/EventToLog.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"guards/HasRequiredRank.html":{},"classes/ModAnnouncementDto.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["param('channelid",{"_index":593,"title":{},"body":{"controllers/ChannelController.html":{}}}],["param('duration",{"_index":2758,"title":{},"body":{"controllers/UserController.html":{}}}],["param('guildid",{"_index":263,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["param('roleid",{"_index":2296,"title":{},"body":{"controllers/RoleController.html":{}}}],["param('userid",{"_index":2745,"title":{},"body":{"controllers/UserController.html":{}}}],["param({description",{"_index":836,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["param({name",{"_index":2042,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["parameter",{"_index":3938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["paramtype",{"_index":844,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["paramtype.string",{"_index":845,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["paramtype.user",{"_index":2841,"title":{},"body":{"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["parent",{"_index":455,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{}}}],["parentid",{"_index":422,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["parseint(_days",{"_index":2861,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(_hours",{"_index":2863,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(_minutes",{"_index":2864,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(questionid",{"_index":780,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["parseintpipe",{"_index":236,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["part",{"_index":3261,"title":{},"body":{"license.html":{}}}],["partial",{"_index":1603,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["partials",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.channel",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.guildmember",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.guildscheduledevent",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.message",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.reaction",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.threadmember",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.user",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["particular",{"_index":3317,"title":{},"body":{"license.html":{}}}],["parties",{"_index":3286,"title":{},"body":{"license.html":{}}}],["parts",{"_index":3363,"title":{},"body":{"license.html":{}}}],["party",{"_index":3518,"title":{},"body":{"license.html":{}}}],["party's",{"_index":3697,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1958,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":1871,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["passportstrategy",{"_index":1959,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1950,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["password",{"_index":3598,"title":{},"body":{"license.html":{}}}],["patent",{"_index":3653,"title":{},"body":{"license.html":{}}}],["patents",{"_index":3717,"title":{},"body":{"license.html":{}}}],["path",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":1734,"title":{},"body":{"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["payload.sub",{"_index":1966,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["payment",{"_index":3768,"title":{},"body":{"license.html":{}}}],["peer",{"_index":3530,"title":{},"body":{"license.html":{}}}],["peers",{"_index":3533,"title":{},"body":{"license.html":{}}}],["per",{"_index":465,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{}}}],["perform",{"_index":1785,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["performance",{"_index":3828,"title":{},"body":{"license.html":{}}}],["performed",{"_index":1970,"title":{},"body":{"classes/LogEntry.html":{}}}],["performing",{"_index":3350,"title":{},"body":{"license.html":{}}}],["periodically",{"_index":2527,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["permanently",{"_index":3662,"title":{},"body":{"license.html":{}}}],["permission",{"_index":460,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"license.html":{}}}],["permissionflagsbits",{"_index":1006,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/ModRequestFlow.html":{},"classes/RoleResponse.html":{}}}],["permissionflagsbits.addreactions",{"_index":2106,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionflagsbits.readmessagehistory",{"_index":2105,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionflagsbits.sendmessages",{"_index":2104,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionflagsbits.viewchannel",{"_index":2101,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionoverwrite",{"_index":458,"title":{"classes/PermissionOverwrite.html":{}},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["permissionoverwrites",{"_index":423,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{}}}],["permissionoverwrites.create(user_id",{"_index":1559,"title":{},"body":{"injectables/GuildService.html":{}}}],["permissionoverwrites.delete(user_id",{"_index":1562,"title":{},"body":{"injectables/GuildService.html":{}}}],["permissionresolvable",{"_index":993,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["permissions",{"_index":974,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["permissive",{"_index":3446,"title":{},"body":{"license.html":{}}}],["permit",{"_index":3481,"title":{},"body":{"license.html":{}}}],["permits",{"_index":3214,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":3147,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":3581,"title":{},"body":{"license.html":{}}}],["person",{"_index":2882,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["personal",{"_index":3543,"title":{},"body":{"license.html":{}}}],["pertinent",{"_index":3786,"title":{},"body":{"license.html":{}}}],["physical",{"_index":3490,"title":{},"body":{"license.html":{}}}],["physically",{"_index":3506,"title":{},"body":{"license.html":{}}}],["pick",{"_index":3018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pieces",{"_index":3181,"title":{},"body":{"license.html":{}}}],["ping",{"_index":2219,"title":{},"body":{"classes/PingCommand.html":{}}}],["pingcommand",{"_index":380,"title":{"classes/PingCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/PingCommand.html":{},"coverage.html":{}}}],["pipe",{"_index":1934,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["place",{"_index":3514,"title":{},"body":{"license.html":{}}}],["plain",{"_index":3017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintoinstance",{"_index":246,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["plaintoinstance(cls",{"_index":3016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintoinstance(discordguildmember",{"_index":2734,"title":{},"body":{"controllers/UserController.html":{}}}],["plaintoinstance(guildautodeletechanneldto",{"_index":1113,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["plaintoinstance(logentrydto",{"_index":274,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["plaintoinstance(selfdto",{"_index":1685,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["plaintoinstance(settingsdto",{"_index":1582,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["please",{"_index":781,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["plus",{"_index":3701,"title":{},"body":{"license.html":{}}}],["pointer",{"_index":3877,"title":{},"body":{"license.html":{}}}],["portion",{"_index":3537,"title":{},"body":{"license.html":{}}}],["position",{"_index":470,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["possesses",{"_index":3503,"title":{},"body":{"license.html":{}}}],["possession",{"_index":3461,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":3852,"title":{},"body":{"license.html":{}}}],["possible",{"_index":1994,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["possibleanswers",{"_index":2445,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["post",{"_index":562,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["post('/')@apioperation({summary",{"_index":2269,"title":{},"body":{"controllers/RoleController.html":{}}}],["post(':channelid/clean",{"_index":606,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/clean')@apioperation({summary",{"_index":538,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/slowmode",{"_index":599,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/slowmode')@apioperation({summary",{"_index":559,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':userid/ban",{"_index":2744,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/ban')@apioperation({summary",{"_index":2706,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/kick",{"_index":2752,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/kick')@apioperation({summary",{"_index":2713,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/purge",{"_index":2765,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/purge')@apioperation({summary",{"_index":2716,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/timeout/:duration",{"_index":2757,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/timeout/:duration')@apioperation({summary",{"_index":2724,"title":{},"body":{"controllers/UserController.html":{}}}],["post('refresh",{"_index":1835,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["power",{"_index":3427,"title":{},"body":{"license.html":{}}}],["practical",{"_index":3165,"title":{},"body":{"license.html":{}}}],["practice",{"_index":3739,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":3155,"title":{},"body":{"license.html":{}}}],["precise",{"_index":3238,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":3698,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":3309,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":531,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"classes/SettingsDto.html":{},"controllers/UserController.html":{}}}],["prefixed",{"_index":3943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["present",{"_index":3803,"title":{},"body":{"license.html":{}}}],["presents",{"_index":3304,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":3621,"title":{},"body":{"license.html":{}}}],["pretty",{"_index":1036,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["prevented",{"_index":3574,"title":{},"body":{"license.html":{}}}],["previous",{"_index":3700,"title":{},"body":{"license.html":{}}}],["price",{"_index":3177,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":3769,"title":{},"body":{"license.html":{}}}],["print",{"_index":1037,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["prior",{"_index":3664,"title":{},"body":{"license.html":{}}}],["prisma",{"_index":41,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/SelfService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["prisma.jsonarray",{"_index":69,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["prisma.jsonarray).foreach",{"_index":2677,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["prisma.service",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/SelfService.html":{}}}],["prisma/client",{"_index":42,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/PrismaService.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":2226,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaserver",{"_index":3078,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["prismaservice",{"_index":16,"title":{"injectables/PrismaService.html":{}},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"injectables/PrismaService.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"overview.html":{}}}],["private",{"_index":50,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["problems",{"_index":3807,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":3568,"title":{},"body":{"license.html":{}}}],["procuring",{"_index":3759,"title":{},"body":{"license.html":{}}}],["produce",{"_index":635,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"license.html":{}}}],["product",{"_index":3491,"title":{},"body":{"license.html":{}}}],["production",{"_index":3046,"title":{},"body":{"index.html":{}}}],["products",{"_index":3770,"title":{},"body":{"license.html":{}}}],["program",{"_index":3173,"title":{},"body":{"license.html":{}}}],["program's",{"_index":3438,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":3895,"title":{},"body":{"license.html":{}}}],["programming",{"_index":3318,"title":{},"body":{"license.html":{}}}],["programs",{"_index":3182,"title":{},"body":{"license.html":{}}}],["progressive",{"_index":3026,"title":{},"body":{"index.html":{}}}],["prohibit",{"_index":3395,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":3423,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":3764,"title":{},"body":{"license.html":{}}}],["project",{"_index":3056,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":3305,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":3296,"title":{},"body":{"license.html":{}}}],["promise",{"_index":234,"title":{},"body":{"controllers/AuditLogController.html":{},"interfaces/BotEvent.html":{},"controllers/ChannelController.html":{},"classes/CommandValidationFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SpecialCommand.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1317,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["promise.all",{"_index":1174,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildUserController.html":{},"injectables/SelfService.html":{},"classes/initGuildCommand.html":{}}}],["promoted",{"_index":1329,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["propagate",{"_index":3268,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":3681,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":3279,"title":{},"body":{"license.html":{}}}],["properties",{"_index":202,"title":{"properties.html":{}},"body":{"injectables/AppService.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":3544,"title":{},"body":{"license.html":{}}}],["protect",{"_index":3186,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":3406,"title":{},"body":{"license.html":{}}}],["protection",{"_index":3450,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":3596,"title":{},"body":{"license.html":{}}}],["prove",{"_index":3829,"title":{},"body":{"license.html":{}}}],["provide",{"_index":3225,"title":{},"body":{"license.html":{}}}],["provided",{"_index":1650,"title":{},"body":{"injectables/GuildSettingsService.html":{},"controllers/JwtAuthController.html":{},"license.html":{}}}],["provider",{"_index":1055,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.name",{"_index":1067,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.prototype.handler",{"_index":1075,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.prototype.hasownproperty(bot_event_handler_name",{"_index":1073,"title":{},"body":{"classes/Explorer.html":{}}}],["provider[bot_event_handler_name",{"_index":1070,"title":{},"body":{"classes/Explorer.html":{}}}],["providers",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["provides",{"_index":3887,"title":{},"body":{"license.html":{}}}],["providing",{"_index":3796,"title":{},"body":{"license.html":{}}}],["provision",{"_index":3612,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":3659,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":3815,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":3818,"title":{},"body":{"license.html":{}}}],["public",{"_index":1048,"title":{},"body":{"classes/Explorer.html":{},"license.html":{}}}],["publicity",{"_index":3628,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":3227,"title":{},"body":{"license.html":{}}}],["publish",{"_index":3442,"title":{},"body":{"license.html":{}}}],["published",{"_index":3230,"title":{},"body":{"license.html":{}}}],["purge",{"_index":2717,"title":{},"body":{"controllers/UserController.html":{}}}],["purged",{"_index":2698,"title":{},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["purgeuserfromguild",{"_index":2703,"title":{},"body":{"controllers/UserController.html":{}}}],["purgeuserfromguild(guildid",{"_index":2715,"title":{},"body":{"controllers/UserController.html":{}}}],["purpose",{"_index":3347,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":3548,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":3755,"title":{},"body":{"license.html":{}}}],["put",{"_index":563,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{}}}],["put(':channelid",{"_index":595,"title":{},"body":{"controllers/ChannelController.html":{}}}],["put(':channelid')@apioperation({summary",{"_index":544,"title":{},"body":{"controllers/ChannelController.html":{}}}],["put(':roleid",{"_index":2295,"title":{},"body":{"controllers/RoleController.html":{}}}],["put(':roleid')@apioperation({summary",{"_index":2281,"title":{},"body":{"controllers/RoleController.html":{}}}],["put()@httpcode(httpstatuscode.accepted",{"_index":1573,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["putsettings",{"_index":1568,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["putsettings(guildid",{"_index":1571,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["qualify",{"_index":3671,"title":{},"body":{"license.html":{}}}],["quality",{"_index":3827,"title":{},"body":{"license.html":{}}}],["query",{"_index":237,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/JwtAuthController.html":{}}}],["query('limit",{"_index":265,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["query('offset",{"_index":266,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["query(validationpipe",{"_index":264,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["question",{"_index":732,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{}}}],["question.answers",{"_index":813,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command",{"_index":395,"title":{},"body":{"modules/BotModule.html":{}}}],["question.command.ts",{"_index":722,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["question.command.ts:120",{"_index":739,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:41",{"_index":726,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:48",{"_index":734,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:73",{"_index":730,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.description",{"_index":764,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.dto",{"_index":750,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.dto.ts",{"_index":835,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:11",{"_index":843,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["question.dto.ts:20",{"_index":841,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["question.form.dto",{"_index":758,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.form.dto.ts",{"_index":847,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["question.form.dto.ts:6",{"_index":850,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["question.question",{"_index":775,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questioncomponentrow",{"_index":799,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionfield",{"_index":786,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionid",{"_index":762,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionid.id",{"_index":767,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["quote",{"_index":1629,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["quote(it",{"_index":1658,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["quotedmessage",{"_index":1654,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["rambda",{"_index":2976,"title":{},"body":{"dependencies.html":{}}}],["rambda/immutable",{"_index":1625,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["rank",{"_index":252,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"classes/SelfDto-1.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["rank(s",{"_index":1779,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.decorator",{"_index":256,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rank.decorator.ts",{"_index":2937,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank.guard",{"_index":260,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rank.guard.ts",{"_index":1775,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank.guard.ts:21",{"_index":1782,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.guard.ts:33",{"_index":1783,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.new",{"_index":1283,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ranks",{"_index":1806,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["rate",{"_index":464,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{}}}],["ratelimitperuser",{"_index":424,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["raw",{"_index":469,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["rawposition",{"_index":425,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["react",{"_index":3910,"title":{},"body":{"properties.html":{}}}],["reactedmemberismodorhigherguard",{"_index":1249,"title":{"guards/ReactedMemberIsModOrHigherGuard.html":{}},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["reaction",{"_index":1242,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"miscellaneous/variables.html":{}}}],["reaction.count",{"_index":1386,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["reaction.emoji.name",{"_index":1306,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.emoji.tostring",{"_index":1385,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["reaction.fetch",{"_index":1289,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.message",{"_index":1326,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.message.author.id",{"_index":1292,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.guild.channels.fetch",{"_index":1322,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.guildid",{"_index":1293,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.id",{"_index":1297,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.partial",{"_index":1288,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.remove",{"_index":1327,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction_added",{"_index":2007,"title":{},"body":{"classes/LogEntry.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/variables.html":{}}}],["reaction_removed",{"_index":2008,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["reactionchannelidguard",{"_index":1260,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reactionchannelidguard('1121822614374060175",{"_index":1287,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reactionchannelidguard('1226574989147508746",{"_index":1337,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reactionemote",{"_index":3951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reactionemoteguard",{"_index":1263,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reactions",{"_index":1727,"title":{},"body":{"injectables/GuildUserService.html":{},"classes/UserInfoUiCommand.html":{}}}],["read",{"_index":3064,"title":{},"body":{"index.html":{}}}],["readable",{"_index":3487,"title":{},"body":{"license.html":{}}}],["readily",{"_index":3744,"title":{},"body":{"license.html":{}}}],["reading",{"_index":3600,"title":{},"body":{"license.html":{}}}],["readmessagehistory",{"_index":1561,"title":{},"body":{"injectables/GuildService.html":{}}}],["readonly",{"_index":222,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["ready",{"_index":1489,"title":{},"body":{"injectables/GuildService.html":{}}}],["reason",{"_index":280,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["reasonable",{"_index":3504,"title":{},"body":{"license.html":{}}}],["receipt",{"_index":3669,"title":{},"body":{"license.html":{}}}],["receive",{"_index":3180,"title":{},"body":{"license.html":{}}}],["received",{"_index":3467,"title":{},"body":{"license.html":{}}}],["receives",{"_index":3686,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":3761,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":3580,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":3752,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":3257,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":3314,"title":{},"body":{"license.html":{}}}],["record",{"_index":1530,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["recreated",{"_index":1273,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["redirect_uri",{"_index":1925,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["redistribute",{"_index":3870,"title":{},"body":{"license.html":{}}}],["referring",{"_index":3176,"title":{},"body":{"license.html":{}}}],["refers",{"_index":3246,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":2978,"title":{},"body":{"dependencies.html":{}}}],["reflect.getmetadata(bot_event_key",{"_index":1072,"title":{},"body":{"classes/Explorer.html":{}}}],["reflector",{"_index":1781,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["refrain",{"_index":3790,"title":{},"body":{"license.html":{}}}],["refresh",{"_index":1873,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["refresh_token",{"_index":1834,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshjwtguard",{"_index":1841,"title":{"injectables/RefreshJwtGuard.html":{}},"body":{"controllers/JwtAuthController.html":{},"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["refreshjwtstrategy",{"_index":1865,"title":{"injectables/RefreshJwtStrategy.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/RefreshJwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtoken",{"_index":1827,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["refreshtoken(@req",{"_index":1851,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshtoken(req",{"_index":1832,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshtoken(userid",{"_index":1894,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["regard",{"_index":3606,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":3463,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":3365,"title":{},"body":{"license.html":{}}}],["registercommandoptions",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["rein",{"_index":2134,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["reinstated",{"_index":3658,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":3398,"title":{},"body":{"license.html":{}}}],["relative",{"_index":1000,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["released",{"_index":3235,"title":{},"body":{"license.html":{}}}],["releasing",{"_index":3220,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":3456,"title":{},"body":{"license.html":{}}}],["relicensing",{"_index":3236,"title":{},"body":{"license.html":{}}}],["relying",{"_index":3743,"title":{},"body":{"license.html":{}}}],["remain",{"_index":3526,"title":{},"body":{"license.html":{}}}],["remains",{"_index":3174,"title":{},"body":{"license.html":{}}}],["remote",{"_index":3792,"title":{},"body":{"license.html":{}}}],["remotely",{"_index":3794,"title":{},"body":{"license.html":{}}}],["removal",{"_index":3609,"title":{},"body":{"license.html":{}}}],["remove",{"_index":3608,"title":{},"body":{"license.html":{}}}],["removecommandsbefore",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["removemember",{"_index":1230,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["removemember(member",{"_index":1245,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["removing",{"_index":1313,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["rendered",{"_index":3844,"title":{},"body":{"license.html":{}}}],["repair",{"_index":3834,"title":{},"body":{"license.html":{}}}],["replace",{"_index":2510,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('x",{"_index":2508,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('y",{"_index":2506,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('{message",{"_index":1661,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["replace('{user",{"_index":1659,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["reply",{"_index":2205,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["reply(optional",{"_index":2044,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["replyto",{"_index":2043,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["replytomessage",{"_index":2039,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["report",{"_index":677,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["repository",{"_index":3037,"title":{},"body":{"index.html":{}}}],["represent",{"_index":3566,"title":{},"body":{"license.html":{}}}],["req",{"_index":1797,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"controllers/UserController.html":{}}}],["req.params.guildid",{"_index":1802,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["req.user.userid",{"_index":1800,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["request",{"_index":1412,"title":{},"body":{"modules/GuildModule.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"controllers/SelfController.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.path",{"_index":3942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":3936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.guildid",{"_index":2742,"title":{},"body":{"controllers/UserController.html":{}}}],["requestguilduser",{"_index":2935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["requestuser",{"_index":1670,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":3358,"title":{},"body":{"license.html":{}}}],["required",{"_index":259,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["required_rank_key",{"_index":1790,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredpoints",{"_index":2259,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["requiredrank",{"_index":254,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredrank(rank.member",{"_index":261,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["requiredrank(rank.mod",{"_index":583,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["requirement",{"_index":3457,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":3529,"title":{},"body":{"license.html":{}}}],["requires",{"_index":3223,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":3263,"title":{},"body":{"license.html":{}}}],["reset",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolved",{"_index":3554,"title":{},"body":{"license.html":{}}}],["respect",{"_index":3431,"title":{},"body":{"license.html":{}}}],["response",{"_index":631,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["response.data.access_token",{"_index":1946,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["response.sendstatus(httpstatus.bad_request",{"_index":647,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["response.sendstatus(httpstatus.forbidden",{"_index":1222,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["response.sendstatus(httpstatus.internal_server_error",{"_index":2388,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["response.statusmessage",{"_index":645,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["responsible",{"_index":2321,"title":{},"body":{"controllers/SelfController.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["restricted",{"_index":390,"title":{},"body":{"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["restrictedchanneldto",{"_index":2257,"title":{"classes/RestrictedChannelDto.html":{}},"body":{"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["restrictedchannels",{"_index":1429,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/RestrictedChannelDto.html":{}}}],["restrictedchannelservice",{"_index":1445,"title":{},"body":{"injectables/GuildService.html":{}}}],["restricting",{"_index":3424,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":3645,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":3644,"title":{},"body":{"license.html":{}}}],["result",{"_index":3211,"title":{},"body":{"license.html":{}}}],["result.data.map((it",{"_index":273,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["result.total",{"_index":271,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["resulting",{"_index":3209,"title":{},"body":{"license.html":{}}}],["results",{"_index":79,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":3584,"title":{},"body":{"license.html":{}}}],["retrieving",{"_index":1026,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["return",{"_index":58,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["reviewing",{"_index":3856,"title":{},"body":{"license.html":{}}}],["revised",{"_index":3801,"title":{},"body":{"license.html":{}}}],["right",{"_index":3578,"title":{},"body":{"license.html":{}}}],["rights",{"_index":3187,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3826,"title":{},"body":{"license.html":{}}}],["role",{"_index":490,"title":{},"body":{"classes/Channel.html":{},"classes/CleanWfpMember.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/UnverifyByRoleCommand.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["role.command.ts",{"_index":7,"title":{},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["role.command.ts:17",{"_index":18,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["role.command.ts:23",{"_index":28,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["role.conmand.ts",{"_index":2660,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["role.conmand.ts:16",{"_index":2662,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.conmand.ts:22",{"_index":2664,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.delete",{"_index":2302,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.edit(roledata",{"_index":2298,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.id",{"_index":2673,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.name",{"_index":2294,"title":{},"body":{"controllers/RoleController.html":{}}}],["role/role.controller",{"_index":2186,"title":{},"body":{"modules/ModerationModule.html":{}}}],["role_created",{"_index":2009,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["role_deleted",{"_index":2010,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["role_updated",{"_index":2011,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["rolecontroller",{"_index":2184,"title":{"controllers/RoleController.html":{}},"body":{"modules/ModerationModule.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["roledata",{"_index":2268,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleid",{"_index":2273,"title":{},"body":{"controllers/RoleController.html":{},"classes/initGuildCommand.html":{}}}],["roleresponse",{"_index":1007,"title":{"classes/RoleResponse.html":{}},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{}}}],["roleresponseschema",{"_index":1025,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolerows",{"_index":3122,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["roles",{"_index":61,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["roles.cache.has",{"_index":1767,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["roles.cache.has((await",{"_index":1769,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["roles.fetch('1121823930085285938",{"_index":1510,"title":{},"body":{"injectables/GuildService.html":{}}}],["roles.foreach",{"_index":1349,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["roles.foreach((role",{"_index":71,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["roles.push",{"_index":2672,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["roleselectmenubuilder",{"_index":3087,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["roleselectmenuinteraction",{"_index":3083,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["rolesresponseschema",{"_index":1027,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rom",{"_index":3587,"title":{},"body":{"license.html":{}}}],["route",{"_index":3946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routermodule",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule.register",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/controller(http",{"_index":1776,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["row",{"_index":771,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/initGuildCommand.html":{}}}],["royalty",{"_index":3705,"title":{},"body":{"license.html":{}}}],["rules",{"_index":3595,"title":{},"body":{"license.html":{}}}],["run",{"_index":2526,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"index.html":{},"license.html":{}}}],["running",{"_index":3226,"title":{},"body":{"license.html":{}}}],["runs",{"_index":1268,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["rxjs",{"_index":1903,"title":{},"body":{"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["rüber",{"_index":2470,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["safest",{"_index":3872,"title":{},"body":{"license.html":{}}}],["sale",{"_index":3715,"title":{},"body":{"license.html":{}}}],["same",{"_index":3367,"title":{},"body":{"license.html":{}}}],["satisfy",{"_index":3528,"title":{},"body":{"license.html":{}}}],["saying",{"_index":3524,"title":{},"body":{"license.html":{}}}],["scalable",{"_index":3031,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["schema",{"_index":607,"title":{},"body":{"controllers/ChannelController.html":{},"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/UserController.html":{}}}],["schenkt",{"_index":2471,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["schiebt",{"_index":2467,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["schließen",{"_index":2119,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["schon",{"_index":2143,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["school",{"_index":3896,"title":{},"body":{"license.html":{}}}],["scope",{"_index":1927,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["scripts",{"_index":3344,"title":{},"body":{"license.html":{}}}],["secondarily",{"_index":3270,"title":{},"body":{"license.html":{}}}],["secondary",{"_index":3196,"title":{},"body":{"license.html":{}}}],["seconds",{"_index":495,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["secret",{"_index":1878,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["secretorkey",{"_index":1963,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["section",{"_index":3402,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3485,"title":{},"body":{"license.html":{}}}],["see",{"_index":1786,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/SelfController.html":{},"modules/UserModule.html":{},"license.html":{}}}],["select",{"_index":355,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"classes/initGuildCommand.html":{}}}],["selectguild",{"_index":2175,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectguildmenu",{"_index":2084,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectguildmenu(guilds",{"_index":2167,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["selection",{"_index":2171,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selection.values[0",{"_index":2179,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectioninteraction",{"_index":2170,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectioninteraction.awaitmessagecomponent",{"_index":2172,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectmenu",{"_index":3006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["self.controller",{"_index":2815,"title":{},"body":{"modules/UserModule.html":{}}}],["self.controller.ts",{"_index":2814,"title":{},"body":{"modules/UserModule.html":{}}}],["self.dto",{"_index":2329,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{}}}],["self.service",{"_index":2331,"title":{},"body":{"controllers/SelfController.html":{},"modules/UserModule.html":{}}}],["self.service.ts",{"_index":2328,"title":{},"body":{"controllers/SelfController.html":{}}}],["selfcontroller",{"_index":2317,"title":{"controllers/SelfController.html":{}},"body":{"controllers/SelfController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["selfdto",{"_index":1084,"title":{"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}},"body":{"classes/Guild.html":{},"controllers/GuildUserController.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"coverage.html":{}}}],["selfservice",{"_index":1866,"title":{"injectables/SelfService.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["sell",{"_index":3731,"title":{},"body":{"license.html":{}}}],["selling",{"_index":3714,"title":{},"body":{"license.html":{}}}],["semiconductor",{"_index":3250,"title":{},"body":{"license.html":{}}}],["send",{"_index":820,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["senddirectmessagetouserexception",{"_index":2378,"title":{"classes/SendDirectMessageToUserException.html":{}},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["senddirectmessagetouserexception(guildid",{"_index":2763,"title":{},"body":{"controllers/UserController.html":{}}}],["senddirectmessagetouserexceptionfilter",{"_index":2387,"title":{"classes/SendDirectMessageToUserExceptionFilter.html":{}},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"coverage.html":{}}}],["sends",{"_index":2200,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["sent",{"_index":2650,"title":{},"body":{"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["separable",{"_index":3536,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3469,"title":{},"body":{"license.html":{}}}],["separately",{"_index":3466,"title":{},"body":{"license.html":{}}}],["server",{"_index":665,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"index.html":{},"license.html":{}}}],["servers",{"_index":3210,"title":{},"body":{"license.html":{}}}],["serves",{"_index":3332,"title":{},"body":{"license.html":{}}}],["service",{"_index":2348,"title":{},"body":{"injectables/SelfService.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["servicing",{"_index":3833,"title":{},"body":{"license.html":{}}}],["set",{"_index":403,"title":{},"body":{"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["set/update",{"_index":3089,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setadminroleid",{"_index":3112,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setauthor",{"_index":821,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["setcolor(colors.blue",{"_index":678,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["setcolor(colors.red",{"_index":715,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["setcustomid",{"_index":2128,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setcustomid('adminroleid",{"_index":3113,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('answer",{"_index":794,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid('introchannelid",{"_index":3101,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('miscchannelid",{"_index":3104,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('modchannelid",{"_index":3107,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('modrequestmessage",{"_index":2131,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setcustomid('modroleid",{"_index":3110,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('openintrochannelid",{"_index":3093,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('question",{"_index":787,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid('unverifiedmemberroleid",{"_index":3120,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('verifiedmemberroleid",{"_index":3116,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid(`closeticket",{"_index":2116,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setcustomid(`community",{"_index":766,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setdescription",{"_index":679,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{}}}],["setdescription(`for",{"_index":710,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["setdescription(`user",{"_index":2791,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["setfirstmessageuicommand",{"_index":402,"title":{"classes/SetFirstMessageUICommand.html":{}},"body":{"modules/BotModule.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{}}}],["setintrochannelid",{"_index":3100,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setlabel('antwort",{"_index":768,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setlabel('frage(nicht",{"_index":788,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setlabel('mod",{"_index":2135,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setlabel('ticket",{"_index":2118,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setmaxvalues(1",{"_index":3095,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmetadata(bot_event_key",{"_index":3930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(required_rank_key",{"_index":3959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setminvalues(0",{"_index":3096,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmiscchannelid",{"_index":3103,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmodchannelid",{"_index":3106,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmodroleid",{"_index":3109,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setopenintrochannelid",{"_index":3092,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setplaceholder",{"_index":3097,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setplaceholder('antwort",{"_index":796,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setplaceholder('schreibe",{"_index":2132,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setrequired(false",{"_index":792,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setrequired(true",{"_index":795,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["sets",{"_index":1491,"title":{},"body":{"injectables/GuildService.html":{},"miscellaneous/variables.html":{}}}],["setslowmode",{"_index":536,"title":{},"body":{"controllers/ChannelController.html":{}}}],["setslowmode(guildid",{"_index":558,"title":{},"body":{"controllers/ChannelController.html":{}}}],["setstyle(buttonstyle.primary",{"_index":770,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["setstyle(textinputstyle.paragraph",{"_index":790,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["settimeout(resolve",{"_index":1318,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["settings",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["settings.controller",{"_index":1589,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["settings.controller.ts",{"_index":1566,"title":{},"body":{"controllers/GuildSettingsController.html":{},"coverage.html":{}}}],["settings.controller.ts:26",{"_index":1570,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["settings.controller.ts:33",{"_index":1574,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["settings.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{}}}],["settings.module.ts",{"_index":1588,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["settings.role.${key}.changed",{"_index":1632,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service",{"_index":383,"title":{},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{}}}],["settings.service.ts",{"_index":1590,"title":{},"body":{"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["settings.service.ts:11",{"_index":1601,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:16",{"_index":1604,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:31",{"_index":1615,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:41",{"_index":1619,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:45",{"_index":1617,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:49",{"_index":1612,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:53",{"_index":1606,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:57",{"_index":1621,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:61",{"_index":1614,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:65",{"_index":1608,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:68",{"_index":1610,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:71",{"_index":1623,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings/dto/restricted",{"_index":2258,"title":{},"body":{"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["settings/dto/settings.dto.ts",{"_index":2410,"title":{},"body":{"classes/SettingsDto.html":{},"coverage.html":{}}}],["settings/dto/settings.dto.ts:14",{"_index":2432,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:19",{"_index":2428,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:24",{"_index":2423,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:29",{"_index":2425,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:34",{"_index":2424,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:39",{"_index":2430,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:44",{"_index":2431,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:49",{"_index":2427,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:54",{"_index":2422,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:59",{"_index":2426,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:9",{"_index":2429,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/events/settings",{"_index":1740,"title":{},"body":{"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"coverage.html":{}}}],["settings/guild",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["settings[key",{"_index":1634,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settingschanged",{"_index":1626,"title":{"classes/SettingsChanged.html":{}},"body":{"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"coverage.html":{}}}],["settingschanged(guildid",{"_index":1633,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settingsdto",{"_index":1572,"title":{"classes/SettingsDto.html":{}},"body":{"controllers/GuildSettingsController.html":{},"classes/SettingsDto.html":{},"coverage.html":{}}}],["settingsservice",{"_index":861,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["settitle('community",{"_index":784,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["settitle('mod",{"_index":2111,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["settitle('user",{"_index":2790,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["settitle('validation",{"_index":713,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["settitle('wfp",{"_index":676,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["settitle(`timeout",{"_index":2647,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["setunverifiedroleid",{"_index":3119,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setup",{"_index":2605,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/initGuildCommand.html":{}}}],["setupclientfactory",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["setvalue(question.question",{"_index":791,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setverifiedmemberroleid",{"_index":3115,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["shall",{"_index":3409,"title":{},"body":{"license.html":{}}}],["share",{"_index":3168,"title":{},"body":{"license.html":{}}}],["shared",{"_index":3354,"title":{},"body":{"license.html":{}}}],["show",{"_index":2783,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["shows",{"_index":3088,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["side",{"_index":3032,"title":{},"body":{"index.html":{}}}],["sign",{"_index":3897,"title":{},"body":{"license.html":{}}}],["significant",{"_index":3567,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":1880,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["similar",{"_index":3232,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":3785,"title":{},"body":{"license.html":{}}}],["single",{"_index":3757,"title":{},"body":{"license.html":{}}}],["size",{"_index":1681,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["skip",{"_index":358,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["slashcommandpipe",{"_index":752,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["sleep",{"_index":2772,"title":{},"body":{"controllers/UserController.html":{}}}],["slice(0",{"_index":2096,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["slowmode",{"_index":467,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["slowmodedisabled",{"_index":523,"title":{"classes/SlowmodeDisabled.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["slowmodedisabled(guildid",{"_index":604,"title":{},"body":{"controllers/ChannelController.html":{}}}],["slowmodeenabled",{"_index":516,"title":{"classes/SlowmodeEnabled.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["slowmodeenabled(guildid",{"_index":603,"title":{},"body":{"controllers/ChannelController.html":{}}}],["software",{"_index":3143,"title":{},"body":{"license.html":{}}}],["sold",{"_index":3549,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3386,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3400,"title":{},"body":{"license.html":{}}}],["soll",{"_index":2051,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["solutions",{"_index":3891,"title":{},"body":{"license.html":{}}}],["something",{"_index":2884,"title":{},"body":{"classes/UserToUser.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["spare",{"_index":3500,"title":{},"body":{"license.html":{}}}],["speak",{"_index":3175,"title":{},"body":{"license.html":{}}}],["special",{"_index":2489,"title":{},"body":{"classes/SpecialCommand.html":{},"license.html":{},"properties.html":{}}}],["specialcommand",{"_index":410,"title":{"classes/SpecialCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/SpecialCommand.html":{},"coverage.html":{}}}],["specific",{"_index":1778,"title":{},"body":{"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["specifically",{"_index":3159,"title":{},"body":{"license.html":{}}}],["specified",{"_index":3316,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":3810,"title":{},"body":{"license.html":{}}}],["specify",{"_index":3814,"title":{},"body":{"license.html":{}}}],["spirit",{"_index":3802,"title":{},"body":{"license.html":{}}}],["split('\\n",{"_index":1656,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["sponsors",{"_index":3059,"title":{},"body":{"index.html":{}}}],["sql",{"_index":1460,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/.../bot",{"_index":3918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../channel",{"_index":2985,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":2987,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../has",{"_index":3921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../log.entry.dto.ts",{"_index":3917,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../menu",{"_index":2988,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../message",{"_index":3919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../parameter",{"_index":2986,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plain",{"_index":2989,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../reaction",{"_index":3925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request",{"_index":3923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../requires",{"_index":3926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.controller.ts",{"_index":3924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.ts",{"_index":3927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tasks.service.ts",{"_index":3922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":3920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.ts",{"_index":3928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":201,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:13",{"_index":211,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":207,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auditlog/auditlog.controller.ts",{"_index":225,"title":{},"body":{"controllers/AuditLogController.html":{},"coverage.html":{}}}],["src/auditlog/auditlog.controller.ts:30",{"_index":233,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["src/auditlog/auditlog.events.ts",{"_index":2901,"title":{},"body":{"coverage.html":{}}}],["src/auditlog/auditlog.module",{"_index":2189,"title":{},"body":{"modules/ModerationModule.html":{}}}],["src/auditlog/auditlog.module.ts",{"_index":314,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["src/auditlog/auditlog.service.ts",{"_index":318,"title":{},"body":{"injectables/AuditLogService.html":{},"coverage.html":{}}}],["src/auditlog/auditlog.service.ts:10",{"_index":325,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/auditlog.service.ts:25",{"_index":330,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/auditlog.service.ts:7",{"_index":322,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/dto/audit",{"_index":285,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"coverage.html":{}}}],["src/auditlog/dto/log",{"_index":2023,"title":{},"body":{"classes/LogEntryDto.html":{},"coverage.html":{}}}],["src/auth/jwt/guards/jwt",{"_index":253,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/jwt/guards/refresh",{"_index":2250,"title":{},"body":{"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["src/auth/jwt/jwt",{"_index":1823,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt/refresh",{"_index":2251,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{},"coverage.html":{}}}],["src/bot/bot.module.ts",{"_index":379,"title":{},"body":{"modules/BotModule.html":{}}}],["src/bot/commands/add",{"_index":6,"title":{},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["src/bot/commands/clean",{"_index":649,"title":{},"body":{"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["src/bot/commands/community",{"_index":721,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["src/bot/commands/init",{"_index":2906,"title":{},"body":{"coverage.html":{},"classes/initGuildCommand.html":{}}}],["src/bot/commands/mod",{"_index":2190,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["src/bot/commands/ping.command.ts",{"_index":2215,"title":{},"body":{"classes/PingCommand.html":{},"coverage.html":{}}}],["src/bot/commands/ping.command.ts:10",{"_index":2217,"title":{},"body":{"classes/PingCommand.html":{}}}],["src/bot/commands/ping.command.ts:16",{"_index":2218,"title":{},"body":{"classes/PingCommand.html":{}}}],["src/bot/commands/special.command.ts",{"_index":2442,"title":{},"body":{"classes/SpecialCommand.html":{},"coverage.html":{}}}],["src/bot/commands/special.command.ts:16",{"_index":2465,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:27",{"_index":2476,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:33",{"_index":2453,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:41",{"_index":2479,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:50",{"_index":2483,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/ticket",{"_index":2598,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["src/bot/commands/timeout.command.ts",{"_index":2616,"title":{},"body":{"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["src/bot/commands/timeout.command.ts:38",{"_index":2618,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["src/bot/commands/timeout.command.ts:46",{"_index":2622,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["src/bot/commands/unverify",{"_index":2659,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["src/bot/commands/user",{"_index":2389,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["src/bot/decorators/bot",{"_index":2909,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/dto/commmunity",{"_index":834,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["src/bot/dto/community",{"_index":846,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["src/bot/dto/mod",{"_index":2037,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"coverage.html":{}}}],["src/bot/dto/user",{"_index":2824,"title":{},"body":{"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/explorers/event.explorer.ts",{"_index":1046,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{}}}],["src/bot/explorers/event.explorer.ts:15",{"_index":1057,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:34",{"_index":1054,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:38",{"_index":1059,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:9",{"_index":1052,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/filters/command",{"_index":701,"title":{},"body":{"classes/CommandValidationFilter.html":{},"coverage.html":{}}}],["src/bot/guards/is",{"_index":1813,"title":{},"body":{"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["src/bot/guards/member",{"_index":1257,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["src/bot/guards/message",{"_index":937,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/guards/reaction",{"_index":1261,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/guards/user",{"_index":853,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMessageHandler.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["src/bot/interfaces/bot",{"_index":366,"title":{},"body":{"interfaces/BotEvent.html":{},"coverage.html":{}}}],["src/guild/events/guild",{"_index":1225,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{}}}],["src/guild/events/interaction",{"_index":2052,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{}}}],["src/guild/events/message",{"_index":926,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"coverage.html":{}}}],["src/guild/guild",{"_index":382,"title":{},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RestrictedChannelDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["src/guild/guild.controller.ts",{"_index":1191,"title":{},"body":{"controllers/GuildController.html":{},"coverage.html":{}}}],["src/guild/guild.controller.ts:16",{"_index":1197,"title":{},"body":{"controllers/GuildController.html":{}}}],["src/guild/guild.controller.ts:33",{"_index":1200,"title":{},"body":{"controllers/GuildController.html":{}}}],["src/guild/guild.module.ts",{"_index":1405,"title":{},"body":{"modules/GuildModule.html":{}}}],["src/guild/guild.service",{"_index":409,"title":{},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"injectables/GuildMemberEvents.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["src/guild/guild.service.ts",{"_index":1436,"title":{},"body":{"injectables/GuildService.html":{},"coverage.html":{}}}],["src/guild/guild.service.ts:107",{"_index":1454,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:165",{"_index":1482,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:17",{"_index":1498,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:198",{"_index":1496,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:218",{"_index":1449,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:229",{"_index":1452,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:242",{"_index":1487,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:42",{"_index":1485,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:9",{"_index":1446,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/moderation/channel/channel.controller.ts",{"_index":530,"title":{},"body":{"controllers/ChannelController.html":{},"coverage.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:133",{"_index":541,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:55",{"_index":557,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:72",{"_index":553,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:85",{"_index":546,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:99",{"_index":560,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/dto/channel.ts",{"_index":416,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["src/guild/moderation/dto/channel.ts:100",{"_index":450,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:108",{"_index":472,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:116",{"_index":457,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:125",{"_index":475,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:134",{"_index":444,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:143",{"_index":468,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:151",{"_index":433,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:162",{"_index":1180,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:171",{"_index":1188,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:180",{"_index":1186,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:189",{"_index":1181,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:198",{"_index":1189,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:207",{"_index":1184,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:21",{"_index":2214,"title":{},"body":{"classes/PermissionOverwrite.html":{}}}],["src/guild/moderation/dto/channel.ts:215",{"_index":1185,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:27",{"_index":476,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:35",{"_index":438,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:44",{"_index":462,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:55",{"_index":448,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:66",{"_index":474,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:76",{"_index":454,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:84",{"_index":434,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:92",{"_index":440,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/guild",{"_index":869,"title":{},"body":{"classes/DiscordGuildMember.html":{},"coverage.html":{}}}],["src/guild/moderation/dto/role.ts",{"_index":970,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/dto/role.ts:106",{"_index":2311,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:114",{"_index":2315,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:122",{"_index":2304,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:133",{"_index":992,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:143",{"_index":980,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:151",{"_index":1003,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:160",{"_index":983,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:170",{"_index":1002,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:181",{"_index":996,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:190",{"_index":991,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:203",{"_index":990,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:212",{"_index":1004,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:26",{"_index":2305,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:34",{"_index":2308,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:42",{"_index":2316,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:50",{"_index":2309,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:58",{"_index":2312,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:66",{"_index":2303,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:74",{"_index":2306,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:82",{"_index":2314,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:90",{"_index":2313,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:98",{"_index":2310,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/user.ts",{"_index":888,"title":{},"body":{"classes/DiscordUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/dto/user.ts:11",{"_index":917,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:19",{"_index":921,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:28",{"_index":909,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:35",{"_index":900,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:42",{"_index":911,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:49",{"_index":902,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:57",{"_index":903,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:65",{"_index":918,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:73",{"_index":912,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:81",{"_index":904,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:89",{"_index":898,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:97",{"_index":915,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/events/channel.event.ts",{"_index":501,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["src/guild/moderation/events/channel.event.ts:22",{"_index":2441,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:30",{"_index":2435,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:31",{"_index":2434,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:32",{"_index":2433,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:40",{"_index":2436,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:48",{"_index":511,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:49",{"_index":510,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:5",{"_index":2440,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:50",{"_index":512,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:51",{"_index":509,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:52",{"_index":508,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:6",{"_index":2438,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:68",{"_index":514,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:7",{"_index":2439,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:8",{"_index":2437,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/user.events",{"_index":2567,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["src/guild/moderation/events/user.events.ts",{"_index":2682,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["src/guild/moderation/events/user.events.ts:100",{"_index":2819,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:108",{"_index":2822,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:109",{"_index":2821,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:110",{"_index":2820,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:118",{"_index":2823,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:15",{"_index":2687,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:21",{"_index":2805,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:22",{"_index":2804,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:23",{"_index":2803,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:31",{"_index":2806,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:37",{"_index":2871,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:38",{"_index":2869,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:39",{"_index":2870,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:40",{"_index":2868,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:5",{"_index":2686,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:54",{"_index":2872,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:6",{"_index":2685,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:62",{"_index":2877,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:63",{"_index":2875,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:64",{"_index":2876,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:65",{"_index":2874,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:66",{"_index":2873,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:7",{"_index":2684,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:82",{"_index":2878,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:90",{"_index":2818,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:91",{"_index":2817,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:92",{"_index":2816,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/moderation.module.ts",{"_index":2183,"title":{},"body":{"modules/ModerationModule.html":{}}}],["src/guild/moderation/role/role.controller.ts",{"_index":2262,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/role/role.controller.ts:119",{"_index":2276,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:58",{"_index":2279,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:75",{"_index":2271,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:96",{"_index":2283,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/user/user.controller.ts",{"_index":2699,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/guild/moderation/user/user.controller.ts:103",{"_index":2707,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:122",{"_index":2714,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:141",{"_index":2726,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:180",{"_index":2722,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:58",{"_index":2711,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:86",{"_index":2709,"title":{},"body":{"controllers/UserController.html":{}}}],["src/main.ts",{"_index":2924,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma.service",{"_index":40,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/SetFirstMessageUICommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/initGuildCommand.html":{}}}],["src/prisma.service.ts",{"_index":2225,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:10",{"_index":2231,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:6",{"_index":2232,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/tasks/tasks.module.ts",{"_index":2521,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service",{"_index":1142,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["src/tasks/tasks.service.ts",{"_index":2529,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/tasks.service.ts:128",{"_index":2548,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:173",{"_index":2554,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:27",{"_index":2538,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:41",{"_index":2557,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:60",{"_index":2540,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:80",{"_index":2544,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/user/self.controller.ts",{"_index":2318,"title":{},"body":{"controllers/SelfController.html":{},"coverage.html":{}}}],["src/user/self.controller.ts:21",{"_index":2325,"title":{},"body":{"controllers/SelfController.html":{}}}],["src/user/self.dto.ts",{"_index":1076,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"coverage.html":{}}}],["src/user/self.dto.ts:11",{"_index":2339,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:12",{"_index":2336,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:13",{"_index":2338,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:14",{"_index":2337,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:5",{"_index":1080,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.dto.ts:6",{"_index":1082,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.dto.ts:7",{"_index":1081,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.service",{"_index":1876,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["src/user/self.service.ts",{"_index":2347,"title":{},"body":{"injectables/SelfService.html":{},"coverage.html":{}}}],["src/user/self.service.ts:13",{"_index":2353,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/self.service.ts:25",{"_index":2361,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/self.service.ts:48",{"_index":2355,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/user.module.ts",{"_index":2810,"title":{},"body":{"modules/UserModule.html":{}}}],["src/util/decorators/parameter",{"_index":2931,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/decorators/request",{"_index":1671,"title":{},"body":{"controllers/GuildUserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/decorators/requires",{"_index":255,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/dto/log.entry.dto",{"_index":331,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/util/dto/log.entry.dto.ts",{"_index":1967,"title":{},"body":{"classes/LogEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/util/dto/log.entry.dto.ts:106",{"_index":1979,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:61",{"_index":1980,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:64",{"_index":1982,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:67",{"_index":1971,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:74",{"_index":1985,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:77",{"_index":1974,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:91",{"_index":1990,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:97",{"_index":1992,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/exception/channel",{"_index":577,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["src/util/exception/guild",{"_index":1215,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"coverage.html":{}}}],["src/util/exception/send",{"_index":2379,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/util/functions/channel",{"_index":573,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/functions/get",{"_index":1368,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/functions/menu",{"_index":940,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/util/functions/plain",{"_index":2946,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/guards/has",{"_index":258,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/interfaces/event",{"_index":515,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["standalone",{"_index":3912,"title":{},"body":{"properties.html":{}}}],["standard",{"_index":3312,"title":{},"body":{"license.html":{}}}],["standards",{"_index":3315,"title":{},"body":{"license.html":{}}}],["start",{"_index":3042,"title":{},"body":{"index.html":{},"license.html":{}}}],["start:dev",{"_index":3045,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":3047,"title":{},"body":{"index.html":{}}}],["started",{"_index":3025,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":3036,"title":{},"body":{"index.html":{}}}],["state",{"_index":3874,"title":{},"body":{"license.html":{}}}],["stated",{"_index":3372,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3647,"title":{},"body":{"license.html":{}}}],["statements",{"_index":2897,"title":{},"body":{"coverage.html":{}}}],["stating",{"_index":3445,"title":{},"body":{"license.html":{}}}],["status",{"_index":586,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"license.html":{}}}],["stay",{"_index":3065,"title":{},"body":{"index.html":{}}}],["step",{"_index":2845,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["steps",{"_index":3189,"title":{},"body":{"license.html":{}}}],["still",{"_index":2546,"title":{},"body":{"injectables/TasksService.html":{}}}],["stop",{"_index":2997,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stopcb",{"_index":2991,"title":{},"body":{"miscellaneous/functions.html":{}}}],["storage",{"_index":3476,"title":{},"body":{"license.html":{}}}],["store",{"_index":3957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":1957,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["streuselkuchen",{"_index":2451,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["string",{"_index":73,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringselectmenubuilder",{"_index":2079,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["stringselectmenuinteraction",{"_index":2070,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["sub",{"_index":1904,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["subdividing",{"_index":3694,"title":{},"body":{"license.html":{}}}],["subject",{"_index":3687,"title":{},"body":{"license.html":{}}}],["sublicenses",{"_index":3727,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":3401,"title":{},"body":{"license.html":{}}}],["subprograms",{"_index":3357,"title":{},"body":{"license.html":{}}}],["subquery",{"_index":1474,"title":{},"body":{"injectables/GuildService.html":{}}}],["subquery.channelid",{"_index":1475,"title":{},"body":{"injectables/GuildService.html":{}}}],["subsection",{"_index":3510,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":3562,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":3692,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":551,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["such",{"_index":2563,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["sue",{"_index":3741,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":3571,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":3009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sum",{"_index":1543,"title":{},"body":{"injectables/GuildService.html":{}}}],["summary",{"_index":585,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":1217,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["super(`channel",{"_index":633,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["supplement",{"_index":3601,"title":{},"body":{"license.html":{}}}],["support",{"_index":3060,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["supports",{"_index":3519,"title":{},"body":{"license.html":{}}}],["sure",{"_index":1311,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["surrender",{"_index":3780,"title":{},"body":{"license.html":{}}}],["survive",{"_index":3646,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":3847,"title":{},"body":{"license.html":{}}}],["svg",{"_index":3901,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2503,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{}}}],["switchtohttp",{"_index":1798,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":894,"title":{},"body":{"classes/DiscordUser.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["system.command",{"_index":414,"title":{},"body":{"modules/BotModule.html":{}}}],["system.command.ts",{"_index":2599,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["system.command.ts:21",{"_index":2601,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["system.command.ts:28",{"_index":2603,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["t",{"_index":3022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":2950,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2949,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":1014,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["take",{"_index":361,"title":{},"body":{"injectables/AuditLogService.html":{},"license.html":{}}}],["takes",{"_index":2358,"title":{},"body":{"injectables/SelfService.html":{}}}],["tangible",{"_index":3542,"title":{},"body":{"license.html":{}}}],["target",{"_index":1986,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/functions.html":{}}}],["targetid",{"_index":282,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{}}}],["targets",{"_index":2021,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["targettype",{"_index":250,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["targettypes",{"_index":306,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targettypes)[number",{"_index":2022,"title":{},"body":{"classes/LogEntry.html":{}}}],["targettypes})@isoptional()@isstring()@isin(targettypes",{"_index":298,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["tasks",{"_index":2522,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["tasks.service",{"_index":2528,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["tasksmodule",{"_index":107,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":1139,"title":{"injectables/TasksService.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["technological",{"_index":3412,"title":{},"body":{"license.html":{}}}],["telling",{"_index":2322,"title":{},"body":{"controllers/SelfController.html":{}}}],["tells",{"_index":3300,"title":{},"body":{"license.html":{}}}],["template",{"_index":1649,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["templateanswer",{"_index":2447,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["templateanswer(category",{"_index":2480,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["templatemessage",{"_index":1600,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["templatemessage(message",{"_index":1622,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["term",{"_index":3370,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":3652,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":3670,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":3661,"title":{},"body":{"license.html":{}}}],["termination",{"_index":3649,"title":{},"body":{"license.html":{}}}],["terms",{"_index":3239,"title":{},"body":{"license.html":{}}}],["test",{"_index":3050,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":3053,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":3052,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3049,"title":{},"body":{"index.html":{}}}],["text",{"_index":578,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["textinputbuilder",{"_index":747,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["textinputmodaldata",{"_index":848,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["textinputstyle",{"_index":748,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["thanks",{"_index":3058,"title":{},"body":{"index.html":{}}}],["then((guildusers",{"_index":2375,"title":{},"body":{"injectables/SelfService.html":{}}}],["then((isavailable",{"_index":1553,"title":{},"body":{"injectables/GuildService.html":{}}}],["then((it",{"_index":1678,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["then((result",{"_index":269,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["then(async",{"_index":2675,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["therefore",{"_index":2635,"title":{},"body":{"classes/TimeOutCommand.html":{},"license.html":{}}}],["things",{"_index":3184,"title":{},"body":{"license.html":{}}}],["third",{"_index":3437,"title":{},"body":{"license.html":{}}}],["thirtydaysago",{"_index":1524,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["thirtydaysago.setdate(thirtydaysago.getdate",{"_index":1525,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["this.$connect",{"_index":2233,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":2234,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._addmembertochanneloverwrite",{"_index":1557,"title":{},"body":{"injectables/GuildService.html":{}}}],["this._fetchguilds(userid",{"_index":2367,"title":{},"body":{"injectables/SelfService.html":{}}}],["this._getguildidfromselectmenu(interaction",{"_index":2157,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this._getmessage(firstmessageid",{"_index":2786,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this._ismemberadmin(member.id",{"_index":1757,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._ismembermod(member.id",{"_index":1758,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._ismemberverified(member.id",{"_index":1759,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._removememberfromchanneloverwrite",{"_index":1555,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.addmember(member.id",{"_index":1762,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.addmembers(guild.id",{"_index":1741,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.addmembers(payload.guildid",{"_index":1765,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.auditlogservice",{"_index":267,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["this.authservice.getuserfromcode(code",{"_index":1856,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.authservice.login(await",{"_index":1855,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.authservice.refreshtoken(req.user",{"_index":1852,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.before",{"_index":526,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.boteventdecorator(provider",{"_index":1065,"title":{},"body":{"classes/Explorer.html":{}}}],["this.cakes.length",{"_index":2515,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.cakes[math.ceil(math.random",{"_index":2514,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.channelid",{"_index":519,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.client",{"_index":2168,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.client.channels.fetch(channel_id",{"_index":1558,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.client.guilds",{"_index":1676,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["this.client.guilds.cache",{"_index":1341,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["this.client.guilds.cache.foreach(async",{"_index":1275,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["this.client.guilds.fetch",{"_index":1274,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["this.client.guilds.fetch(baseinteraction.guildid).then((guild",{"_index":2668,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["this.client.guilds.fetch(eventargs[0].guildid",{"_index":818,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.client.guilds.fetch(guild_id)).members.fetch(user_id",{"_index":1766,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.client.guilds.fetch(guildid",{"_index":587,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["this.client.guilds.fetch(guildid)).channels.fetch(key",{"_index":1209,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.client.guilds.fetch(guildid).then(async",{"_index":2799,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this.client.guilds.fetch(reaction.message.guildid",{"_index":1298,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.client.guilds.fetch(request.user.guildid",{"_index":2740,"title":{},"body":{"controllers/UserController.html":{}}}],["this.client.guilds.fetch(ticket.guildid",{"_index":2591,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.client.on(metadata",{"_index":1071,"title":{},"body":{"classes/Explorer.html":{}}}],["this.client.user.avatarurl",{"_index":824,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["this.client.user.username",{"_index":822,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["this.client.ws.ping",{"_index":2223,"title":{},"body":{"classes/PingCommand.html":{}}}],["this.coffees.length",{"_index":2512,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.coffees[math.ceil(math.random",{"_index":2511,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.configservice.get('discord_callback_url",{"_index":1926,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('discord_oauth_client_id",{"_index":1920,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('discord_oauth_secret",{"_index":1922,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":1907,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_issuer",{"_index":1909,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_refresh_expiration",{"_index":1912,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":1913,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.database.attachment.createmany",{"_index":1744,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.autodeletechannels.findmany",{"_index":1156,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.autodeletechannels.upsert",{"_index":1158,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.guild.findmany",{"_index":1160,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.guild.upsert",{"_index":1502,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.database.guilduser.delete",{"_index":1749,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.findmany",{"_index":1748,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.findunique",{"_index":1339,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["this.database.guilduser.update",{"_index":1753,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.upsert",{"_index":1742,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.lockdownrolebackup",{"_index":2674,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["this.database.lockdownrolebackup.delete",{"_index":78,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{}}}],["this.database.lockdownrolebackup.findunique",{"_index":63,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{}}}],["this.database.messagemetadata.create",{"_index":1743,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.count",{"_index":1752,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.create",{"_index":1746,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.groupby",{"_index":1527,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.database.reaction.createmany",{"_index":1745,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.restrictedchannels.findmany",{"_index":1433,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.restrictedchannels.findunique",{"_index":1431,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.restrictedchannels.upsert",{"_index":1432,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.settings.findunique",{"_index":1637,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.database.settings.update",{"_index":1636,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.database.user.delete",{"_index":1751,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.user.upsert",{"_index":1763,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.discord.guilds.fetch(guilduser.guildid",{"_index":2377,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.discord.users.fetch(userid",{"_index":2366,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.duration",{"_index":2693,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.enabled",{"_index":520,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.error",{"_index":2694,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.error.message",{"_index":2696,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.eventemitter.emit",{"_index":2631,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["this.eventemitter.emitasync",{"_index":601,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/UserController.html":{}}}],["this.eventtype",{"_index":2407,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["this.externalcontextcreator.create",{"_index":1069,"title":{},"body":{"classes/Explorer.html":{}}}],["this.getrank(member",{"_index":1761,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.getsettings(guildid).then((it",{"_index":1640,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.getwelcomemessageformat(message.guildid",{"_index":1651,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.guildautodeletechannelservice.get(guildid",{"_index":1112,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildautodeletechannelservice.get(guildid).then",{"_index":1114,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildautodeletechannelservice.upsert",{"_index":1118,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildid",{"_index":518,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.guildservice.averagemessagesperchannellastmonth(guildid",{"_index":1203,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.guildservice.averagemessagesperdaylastmonth(guildid",{"_index":1211,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.guildservice.cleanwfpmembers",{"_index":672,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["this.guildservice.updatechannelpermissions(user",{"_index":2578,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.guildservice.upsertguild(guild.id",{"_index":1276,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.addmember(member.id",{"_index":1282,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.addmembers(guild.id",{"_index":1278,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.deleteone(member.id",{"_index":1285,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.findall(undefined",{"_index":2153,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.guilduserservice.getguilduser",{"_index":1291,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.getrank(newmember",{"_index":1333,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.getrank(oldmember",{"_index":1331,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.insertmessage",{"_index":1371,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.updatemessagecountbucket",{"_index":1387,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.upsert(newmember.id",{"_index":1335,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.upsert(user.userid",{"_index":1295,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.hashandlermethod(provider",{"_index":1066,"title":{},"body":{"classes/Explorer.html":{}}}],["this.http",{"_index":1916,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.initiatemodrequestflow(interaction",{"_index":2152,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.jwtservice.sign(payload",{"_index":1906,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.logger",{"_index":616,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["this.logger.debug(`found",{"_index":2731,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.error",{"_index":2774,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.error((e",{"_index":967,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["this.logger.error(e",{"_index":1290,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{}}}],["this.logger.log",{"_index":588,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["this.logger.log(`adding",{"_index":1279,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.logger.log(`banned",{"_index":2747,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.log(`edited",{"_index":598,"title":{},"body":{"controllers/ChannelController.html":{}}}],["this.logger.log(`kicked",{"_index":2754,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.log(`purging",{"_index":2767,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.warn",{"_index":1936,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.messagesdeleted",{"_index":525,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.possibleanswers[0",{"_index":2505,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[1",{"_index":2513,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[2",{"_index":2516,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[3",{"_index":2517,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.prisma.guilduser",{"_index":2373,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.prismaserver.settings.findunique",{"_index":3091,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["this.prismaserver.settings.update",{"_index":3130,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["this.prismaservice.auditlog.count",{"_index":353,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.auditlog.create",{"_index":333,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["this.prismaservice.auditlog.findmany",{"_index":354,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["this.prismaservice.guildquestion.create",{"_index":763,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestion.findunique",{"_index":779,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestion.update",{"_index":811,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestionanswer.create",{"_index":815,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guilduser.findunique",{"_index":1801,"title":{},"body":{"guards/HasRequiredRank.html":{},"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.guilduser.update",{"_index":2399,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["this.prismaservice.messages.count",{"_index":2788,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.tickets.create",{"_index":2108,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.prismaservice.tickets.findmany",{"_index":2589,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.tickets.findunique",{"_index":2139,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.prismaservice.tickets.update",{"_index":2145,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["this.reason",{"_index":2688,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.reflector.getallandoverride",{"_index":1794,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["this.restrictedchannelservice",{"_index":1552,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.restrictedchannelservice.getall(user.guildid).then((channels",{"_index":1550,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.seconds",{"_index":521,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.selfservice.fetchself(userid",{"_index":2335,"title":{},"body":{"controllers/SelfController.html":{}}}],["this.settings.getadminroleid(guild_id)).tostring",{"_index":1772,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settings.getmodroleid(guild_id)).tostring",{"_index":1770,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settings.getverifiedmemberroleid(guild_id)).tostring",{"_index":1768,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settingsservice.editsettings(guildid",{"_index":1584,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["this.settingsservice.getguilduser",{"_index":2246,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["this.settingsservice.getopenintrochannelid",{"_index":1323,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getsettings(guildid",{"_index":1581,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["this.settingsservice.getunverifiedmemberroleid",{"_index":1321,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getverifiedmemberroleid",{"_index":1304,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getverifiedmemberroleid(message.guildid",{"_index":867,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["this.settingsservice.templatemessage",{"_index":1325,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.tasksservice.createdynamicscheduledjob",{"_index":1163,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.templateanswer(dto.category",{"_index":2498,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.upsert(userid",{"_index":1764,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.upsertguild(guild.id",{"_index":1564,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.userid",{"_index":527,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.userservice.findall(guild.id)).foreach",{"_index":2574,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.userservice.getguilduser(userid",{"_index":1675,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["this.userservice.updatemessagecountbucket(user.userid",{"_index":2577,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.usersservice.fetchself(userid",{"_index":1914,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.validateuser(data.id",{"_index":1948,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.value",{"_index":2406,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["those",{"_index":2359,"title":{},"body":{"injectables/SelfService.html":{},"license.html":{}}}],["though",{"_index":3604,"title":{},"body":{"license.html":{}}}],["thread",{"_index":473,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["threads",{"_index":426,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["three",{"_index":3498,"title":{},"body":{"license.html":{}}}],["through",{"_index":3288,"title":{},"body":{"license.html":{}}}],["throw",{"_index":617,"title":{},"body":{"controllers/ChannelController.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildSettingsService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["thrown",{"_index":622,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/EventToLog.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["thus",{"_index":3392,"title":{},"body":{"license.html":{}}}],["ticket",{"_index":2089,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["ticket.closed",{"_index":2140,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["ticket.ticketid",{"_index":2117,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["ticket.userid",{"_index":2596,"title":{},"body":{"injectables/TasksService.html":{}}}],["ticketid",{"_index":2109,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["tickets",{"_index":2588,"title":{},"body":{"injectables/TasksService.html":{}}}],["tickets.foreach(async",{"_index":2590,"title":{},"body":{"injectables/TasksService.html":{}}}],["ticketsystem",{"_index":2604,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["ticketsystemsetupcommand",{"_index":412,"title":{"classes/TicketSystemSetupCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["time",{"_index":307,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/LogEntryDto.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["time'})@isoptional",{"_index":295,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["timed",{"_index":2584,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["timeout",{"_index":2017,"title":{},"body":{"classes/LogEntry.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["timeout.dto",{"_index":2623,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["timeout.dto.ts",{"_index":2825,"title":{},"body":{"classes/UserTimeOutDto.html":{},"coverage.html":{}}}],["timeout.dto.ts:16",{"_index":2837,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout.dto.ts:27",{"_index":2836,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout.dto.ts:72",{"_index":2835,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout_expired",{"_index":2016,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["timeoutcommand",{"_index":384,"title":{"classes/TimeOutCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["timeouted",{"_index":2547,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["timeouts",{"_index":2543,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["timeoutuser",{"_index":2704,"title":{},"body":{"controllers/UserController.html":{}}}],["timeoutuser(guildid",{"_index":2723,"title":{},"body":{"controllers/UserController.html":{}}}],["timestamp",{"_index":429,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["timezone",{"_index":1178,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{}}}],["todo",{"_index":2750,"title":{},"body":{"controllers/UserController.html":{}}}],["toformattedlog",{"_index":506,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["toformattedlog(logger",{"_index":513,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["toisostring",{"_index":2762,"title":{},"body":{"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{}}}],["token",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthService.html":{}}}],["token.strategy",{"_index":1874,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["token.strategy.ts",{"_index":2252,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:10",{"_index":2253,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["token.strategy.ts:19",{"_index":2254,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["tolocalestring",{"_index":2586,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["tonimsgstobird",{"_index":1355,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["tonimsgstobird(message",{"_index":1361,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["tools",{"_index":3348,"title":{},"body":{"license.html":{}}}],["topic",{"_index":427,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["tostring",{"_index":2639,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["total",{"_index":270,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["touch",{"_index":3066,"title":{},"body":{"index.html":{}}}],["touser",{"_index":2496,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["touser.id",{"_index":2499,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["touserid",{"_index":2482,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["trade",{"_index":3634,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3633,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3635,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":3577,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1968,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["transferred",{"_index":3579,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":3690,"title":{},"body":{"license.html":{}}}],["transform",{"_index":2826,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["transformer",{"_index":1107,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildUserController.html":{},"classes/UserTimeOutDto.html":{},"dependencies.html":{}}}],["transformers",{"_index":827,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"properties.html":{}}}],["transmission",{"_index":3531,"title":{},"body":{"license.html":{}}}],["treated",{"_index":3603,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":3418,"title":{},"body":{"license.html":{}}}],["tries",{"_index":2381,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["triggered",{"_index":2385,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["true",{"_index":77,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RoleResponse.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["true})@isdatestring",{"_index":2827,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["true})@isstring",{"_index":840,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{}}}],["try",{"_index":74,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["trying",{"_index":1942,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["twitter",{"_index":3072,"title":{},"body":{"index.html":{}}}],["two",{"_index":3188,"title":{},"body":{"license.html":{}}}],["twoweekdate",{"_index":1504,"title":{},"body":{"injectables/GuildService.html":{}}}],["tyep",{"_index":1346,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["type",{"_index":22,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":2944,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typealiases",{"_index":3915,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1074,"title":{},"body":{"classes/Explorer.html":{},"classes/LogEntry.html":{}}}],["typeofattachments",{"_index":1397,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["typescript",{"_index":3035,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typical",{"_index":3556,"title":{},"body":{"license.html":{}}}],["ui.command",{"_index":401,"title":{},"body":{"modules/BotModule.html":{}}}],["ui.command.ts",{"_index":2390,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["ui.command.ts:16",{"_index":2392,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["ui.command.ts:18",{"_index":2778,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["ui.command.ts:24",{"_index":2395,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["ui.command.ts:26",{"_index":2782,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["ui.command.ts:80",{"_index":2780,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["um",{"_index":961,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["umarmen",{"_index":2890,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["umarmung",{"_index":2475,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["unauthorizedexception",{"_index":1789,"title":{},"body":{"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{}}}],["und",{"_index":950,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/LogEntry.html":{}}}],["undefined",{"_index":348,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["undefined.ts",{"_index":2932,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":3237,"title":{},"body":{"license.html":{}}}],["unicodeemoji",{"_index":975,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":3048,"title":{},"body":{"index.html":{}}}],["unkickablemembers",{"_index":1520,"title":{},"body":{"injectables/GuildService.html":{}}}],["unkickablemembers.push(member",{"_index":1523,"title":{},"body":{"injectables/GuildService.html":{}}}],["unknown",{"_index":327,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":3565,"title":{},"body":{"license.html":{}}}],["unlimited",{"_index":3376,"title":{},"body":{"license.html":{}}}],["unlocked",{"_index":1284,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["unlocked.guard",{"_index":1366,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["unlocked.guard.ts",{"_index":854,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["unlocked.guard.ts:11",{"_index":857,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{}}}],["unlocked.guard.ts:14",{"_index":1820,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{}}}],["unlocked.guard.ts:19",{"_index":1821,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{}}}],["unlockuser",{"_index":1231,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["unlockuser(reaction",{"_index":1248,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["unmodified",{"_index":3267,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":3405,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":3599,"title":{},"body":{"license.html":{}}}],["until",{"_index":2585,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["unverified",{"_index":1314,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/initGuildCommand.html":{}}}],["unverifiedmemberroleid",{"_index":2418,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["unverifybyrolecommand",{"_index":2658,"title":{"classes/UnverifyByRoleCommand.html":{}},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["up",{"_index":1492,"title":{},"body":{"injectables/GuildService.html":{}}}],["update",{"_index":1159,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"controllers/RoleController.html":{}}}],["updateautodeletechannel",{"_index":1094,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["updateautodeletechannel(guildid",{"_index":1100,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["updatechannelpermissions",{"_index":1442,"title":{},"body":{"injectables/GuildService.html":{}}}],["updatechannelpermissions(user",{"_index":1495,"title":{},"body":{"injectables/GuildService.html":{}}}],["updated",{"_index":995,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{}}}],["updated'})@apiresponse({status",{"_index":2282,"title":{},"body":{"controllers/RoleController.html":{}}}],["updated/created",{"_index":499,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["updatemessagecountbucket",{"_index":1703,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["updatemessagecountbucket(userid",{"_index":1736,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["updaterank",{"_index":1232,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["updaterank(oldmember",{"_index":1251,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["updaterole",{"_index":2266,"title":{},"body":{"controllers/RoleController.html":{}}}],["updaterole(guildid",{"_index":2280,"title":{},"body":{"controllers/RoleController.html":{}}}],["updates",{"_index":1494,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["upsert",{"_index":1147,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildUserService.html":{}}}],["upsert(guildid",{"_index":1152,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{}}}],["upsert(userid",{"_index":1738,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["upsertguild",{"_index":1443,"title":{},"body":{"injectables/GuildService.html":{}}}],["upsertguild(guildid",{"_index":1497,"title":{},"body":{"injectables/GuildService.html":{}}}],["url",{"_index":825,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"injectables/GuildMessageHandler.html":{},"classes/RoleResponse.html":{}}}],["urlencoded",{"_index":1933,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["urlsearchparams",{"_index":1918,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["usable",{"_index":1652,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["use",{"_index":2720,"title":{},"body":{"controllers/UserController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":634,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/EventToLog.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"modules/UserModule.html":{},"miscellaneous/functions.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["usefilters",{"_index":2486,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["usefilters(commandvalidationfilter",{"_index":2495,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["useful",{"_index":3881,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["useguards(ismodalinteractionguard",{"_index":804,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["useguards(jwtauthguard",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["useguards(messagefromuserguard",{"_index":1370,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["useguards(messageisdmguard",{"_index":943,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["useguards(refreshjwtguard",{"_index":1850,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["useguards(refreshjwtguard)@apiheader({name",{"_index":1833,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["user",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/PermissionOverwrite.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user.ban",{"_index":2748,"title":{},"body":{"controllers/UserController.html":{}}}],["user.controller",{"_index":1690,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["user.controller.ts",{"_index":1664,"title":{},"body":{"controllers/GuildUserController.html":{},"coverage.html":{}}}],["user.controller.ts:19",{"_index":1668,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["user.decorator",{"_index":1672,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["user.decorator.ts",{"_index":2934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":2485,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["user.dto.ts",{"_index":2879,"title":{},"body":{"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:21",{"_index":2885,"title":{},"body":{"classes/UserToUser.html":{}}}],["user.dto.ts:28",{"_index":2883,"title":{},"body":{"classes/UserToUser.html":{}}}],["user.guard",{"_index":1365,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["user.guard.ts",{"_index":2031,"title":{},"body":{"guards/MessageFromUserGuard.html":{},"coverage.html":{}}}],["user.guard.ts:5",{"_index":2032,"title":{},"body":{"guards/MessageFromUserGuard.html":{}}}],["user.guildid",{"_index":2155,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["user.id",{"_index":1340,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/TimeOutCommand.html":{}}}],["user.kick",{"_index":2755,"title":{},"body":{"controllers/UserController.html":{}}}],["user.messagecountbucket",{"_index":1434,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["user.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{}}}],["user.module.ts",{"_index":1689,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["user.purge",{"_index":2775,"title":{},"body":{"controllers/UserController.html":{}}}],["user.rank",{"_index":1294,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{}}}],["user.send",{"_index":2636,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.send.failed",{"_index":2645,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.service",{"_index":1144,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["user.service.ts",{"_index":1691,"title":{},"body":{"injectables/GuildUserService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["user.service.ts:100",{"_index":1737,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:122",{"_index":1730,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:137",{"_index":1723,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:150",{"_index":1715,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:163",{"_index":1713,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:177",{"_index":1733,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:18",{"_index":1704,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:181",{"_index":1711,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:189",{"_index":1709,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:197",{"_index":1707,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:26",{"_index":1735,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:33",{"_index":1721,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:42",{"_index":1739,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:54",{"_index":1728,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:78",{"_index":1717,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:89",{"_index":1719,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.timeout(date",{"_index":2628,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.timeout.created",{"_index":2656,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["user.timeout.failed",{"_index":2632,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.user.username",{"_index":2648,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.userid",{"_index":1915,"title":{},"body":{"injectables/JwtAuthService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["user.userid.tostring",{"_index":1556,"title":{},"body":{"injectables/GuildService.html":{}}}],["user/dto/self.dto",{"_index":1669,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["user/dto/self.dto.ts",{"_index":2340,"title":{},"body":{"classes/SelfDto-1.html":{},"coverage.html":{}}}],["user/dto/self.dto.ts:5",{"_index":2346,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:6",{"_index":2342,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:7",{"_index":2345,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:8",{"_index":2341,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:9",{"_index":2343,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/guild",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["user/self",{"_index":2319,"title":{},"body":{"controllers/SelfController.html":{}}}],["user/user.controller",{"_index":2187,"title":{},"body":{"modules/ModerationModule.html":{}}}],["user/user.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["user['userid",{"_index":2365,"title":{},"body":{"injectables/SelfService.html":{}}}],["user_banned",{"_index":1999,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_id",{"_index":1450,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{}}}],["user_joined",{"_index":1996,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_left",{"_index":1998,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_unbanned",{"_index":2000,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_updated",{"_index":2001,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["userbanevent",{"_index":2681,"title":{"classes/UserBanEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userbanevent(userid",{"_index":2749,"title":{},"body":{"controllers/UserController.html":{}}}],["usercontroller",{"_index":2185,"title":{"controllers/UserController.html":{}},"body":{"modules/ModerationModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["usercounts",{"_index":1540,"title":{},"body":{"injectables/GuildService.html":{}}}],["usercounts.length",{"_index":1544,"title":{},"body":{"injectables/GuildService.html":{}}}],["usercounts.reduce((sum",{"_index":1542,"title":{},"body":{"injectables/GuildService.html":{}}}],["userid",{"_index":67,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["userinfouicommand",{"_index":399,"title":{"classes/UserInfoUiCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["userkickevent",{"_index":2691,"title":{"classes/UserKickEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userkickevent(userid",{"_index":2756,"title":{},"body":{"controllers/UserController.html":{}}}],["userlimit",{"_index":496,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["usermention",{"_index":658,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildSettingsService.html":{},"injectables/ModRequestFlow.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["usermention(fromuserid",{"_index":2507,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["usermention(interaction.targetid",{"_index":2792,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["usermention(interaction.user.id",{"_index":2098,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["usermention(member.id",{"_index":693,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["usermention(message.author.id",{"_index":1660,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["usermention(touserid",{"_index":2509,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["usermention(user.id",{"_index":2649,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["usermodule",{"_index":108,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":874,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/GuildSettingsService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["userpurgeevent",{"_index":2697,"title":{"classes/UserPurgeEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userpurgeevent(userid",{"_index":2776,"title":{},"body":{"controllers/UserController.html":{}}}],["userresponseschema",{"_index":922,"title":{},"body":{"classes/DiscordUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":1747,"title":{},"body":{"injectables/GuildUserService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"license.html":{}}}],["users.length",{"_index":1750,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["usersenddmfailedevent",{"_index":2624,"title":{"classes/UserSendDMFailedEvent.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usersenddmfailedevent(user.id",{"_index":2646,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["userservice",{"_index":1673,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/TasksService.html":{}}}],["usersresponseschema",{"_index":923,"title":{},"body":{"classes/DiscordUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice",{"_index":1888,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["usertimeoutdto",{"_index":2620,"title":{"classes/UserTimeOutDto.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{}}}],["usertimeoutevent",{"_index":2566,"title":{"classes/UserTimeOutEvent.html":{}},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usertimeoutevent(user.id",{"_index":2657,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["usertimeoutfailedevent",{"_index":2625,"title":{"classes/UserTimeOutFailedEvent.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usertouser",{"_index":2478,"title":{"classes/UserToUser.html":{}},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"coverage.html":{}}}],["uses",{"_index":3559,"title":{},"body":{"license.html":{}}}],["using",{"_index":1218,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"license.html":{},"properties.html":{}}}],["utf8",{"_index":2094,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["util/decorators/request",{"_index":2330,"title":{},"body":{"controllers/SelfController.html":{}}}],["util/dto/log.entry.dto",{"_index":251,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"classes/LogEntryDto.html":{}}}],["util/exception/guild",{"_index":1624,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["util/functions/plain",{"_index":247,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildSettingsController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{}}}],["util/interfaces/event",{"_index":219,"title":{},"body":{"injectables/AppService.html":{}}}],["utility",{"_index":2558,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["utils",{"_index":574,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["utils.ts",{"_index":2943,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["valid",{"_index":3497,"title":{},"body":{"license.html":{}}}],["validate",{"_index":1951,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/UserTimeOutDto.html":{}}}],["validate(payload",{"_index":1954,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["validateuser",{"_index":1885,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["validateuser(userid",{"_index":1896,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["validation",{"_index":2488,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["validation.ts",{"_index":702,"title":{},"body":{"classes/CommandValidationFilter.html":{},"coverage.html":{}}}],["validation.ts:7",{"_index":705,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["validationpipe",{"_index":238,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["validator",{"_index":303,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{},"classes/UserTimeOutDto.html":{},"dependencies.html":{}}}],["value",{"_index":215,"title":{},"body":{"injectables/AppService.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/SettingsChanged.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.trim",{"_index":2848,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["values",{"_index":1205,"title":{},"body":{"controllers/GuildController.html":{}}}],["variable",{"_index":2911,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1653,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/GuildSettingsService.html":{},"miscellaneous/variables.html":{}}}],["verbatim",{"_index":3150,"title":{},"body":{"license.html":{}}}],["vereinsmitglied",{"_index":1513,"title":{},"body":{"injectables/GuildService.html":{}}}],["verified",{"_index":3118,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["verifiedmemberroleid",{"_index":2419,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["verifiedroleid",{"_index":1303,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["versendet",{"_index":2125,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["version",{"_index":3136,"title":{},"body":{"license.html":{},"properties.html":{}}}],["versions",{"_index":3172,"title":{},"body":{"license.html":{}}}],["very",{"_index":2718,"title":{},"body":{"controllers/UserController.html":{}}}],["via",{"_index":2363,"title":{},"body":{"injectables/SelfService.html":{}}}],["vide/mp4",{"_index":3003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["view",{"_index":3303,"title":{},"body":{"license.html":{}}}],["viewchannel",{"_index":1560,"title":{},"body":{"injectables/GuildService.html":{}}}],["violates",{"_index":3594,"title":{},"body":{"license.html":{}}}],["violation",{"_index":3656,"title":{},"body":{"license.html":{}}}],["visible",{"_index":3297,"title":{},"body":{"license.html":{}}}],["void",{"_index":213,"title":{},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["volume",{"_index":3475,"title":{},"body":{"license.html":{}}}],["von",{"_index":830,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["wait",{"_index":1308,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["waive",{"_index":3426,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":3861,"title":{},"body":{"license.html":{}}}],["want",{"_index":842,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/UserToUser.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["warn",{"_index":1997,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":3302,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3301,"title":{},"body":{"license.html":{}}}],["watch",{"_index":3043,"title":{},"body":{"index.html":{}}}],["way",{"_index":2533,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["ways",{"_index":3488,"title":{},"body":{"license.html":{}}}],["web",{"_index":3888,"title":{},"body":{"license.html":{}}}],["webhook",{"_index":1989,"title":{},"body":{"classes/LogEntry.html":{}}}],["webhooks_updated",{"_index":2015,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":3070,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":1271,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{}}}],["weeks",{"_index":664,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{}}}],["welcher",{"_index":2891,"title":{},"body":{"classes/UserToUser.html":{}}}],["welches",{"_index":2610,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["welcomemessageformat",{"_index":2420,"title":{},"body":{"classes/SettingsDto.html":{}}}],["well",{"_index":1977,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["wende",{"_index":2642,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["werden",{"_index":685,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["wfp",{"_index":659,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{}}}],["wfp.command",{"_index":408,"title":{},"body":{"modules/BotModule.html":{}}}],["wfp.command.ts",{"_index":650,"title":{},"body":{"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["wfp.command.ts:18",{"_index":653,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["wfp.command.ts:21",{"_index":655,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["whatever",{"_index":3696,"title":{},"body":{"license.html":{}}}],["whenever",{"_index":1269,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["whether",{"_index":453,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["white",{"_index":978,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["whole",{"_index":3325,"title":{},"body":{"license.html":{}}}],["whose",{"_index":3538,"title":{},"body":{"license.html":{}}}],["widely",{"_index":3320,"title":{},"body":{"license.html":{}}}],["widespread",{"_index":3202,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["willst",{"_index":2893,"title":{},"body":{"classes/UserToUser.html":{}}}],["window",{"_index":3337,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":3417,"title":{},"body":{"license.html":{}}}],["wish",{"_index":3179,"title":{},"body":{"license.html":{}}}],["within",{"_index":1041,"title":{},"body":{"interfaces/EventToLog.html":{},"license.html":{}}}],["without",{"_index":3219,"title":{},"body":{"license.html":{}}}],["wording",{"_index":1984,"title":{},"body":{"classes/LogEntry.html":{}}}],["work",{"_index":3253,"title":{},"body":{"license.html":{}}}],["work's",{"_index":3346,"title":{},"body":{"license.html":{}}}],["working",{"_index":3321,"title":{},"body":{"license.html":{}}}],["works",{"_index":3158,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3730,"title":{},"body":{"license.html":{}}}],["write",{"_index":1031,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["writing",{"_index":3821,"title":{},"body":{"license.html":{}}}],["written",{"_index":1456,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"license.html":{},"properties.html":{}}}],["wrongargsexception",{"_index":704,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["ws",{"_index":2220,"title":{},"body":{"classes/PingCommand.html":{}}}],["wurde",{"_index":2123,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["wurden",{"_index":682,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["www",{"_index":1931,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["wähle",{"_index":2162,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["x",{"_index":2468,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["xd",{"_index":2828,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxh",{"_index":2831,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxhxm",{"_index":2834,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxm",{"_index":2833,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xh",{"_index":2829,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xhxm",{"_index":2832,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xm",{"_index":2830,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["y",{"_index":2466,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["yarn",{"_index":3039,"title":{},"body":{"index.html":{}}}],["years",{"_index":3499,"title":{},"body":{"license.html":{}}}],["you'd",{"_index":3063,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":3747,"title":{},"body":{"license.html":{}}}],["z",{"_index":2469,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["zoom",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["zu",{"_index":963,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["zwar",{"_index":947,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddRoleCommand.html":{"url":"classes/AddRoleCommand.html","title":"class - AddRoleCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddRoleCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/add-role.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onRoleAdd\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/add-role.command.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onRoleAdd\n                        \n                    \n                \n            \n            \n                \n                        \n                    onRoleAdd(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/add-role.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport { Client, CommandInteraction } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { Prisma } from '@prisma/client';\n\n@Command({\n  name: 'lift-lockdown',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class AddRoleCommand {\n  constructor(\n    @InjectDiscordClient() private client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  @Handler()\n  async onRoleAdd(@InteractionEvent() interaction: CommandInteraction) {\n    interaction.guild.members.fetch().then((members) =>\n      members.forEach(async (member) => {\n        if (\n          member.roles.cache.has('1011563978956226560') ||\n          member.roles.cache.has('1011513775054143632')\n        )\n          return;\n        if (member.roles.cache.has('1121823930085285938')) {\n          const roles = (\n            await this.database.lockdownRoleBackup.findUnique({\n              where: {\n                guildId_userId: { guildId: member.guild.id, userId: member.id },\n              },\n            })\n          ).roles as Prisma.JsonArray;\n          let error = false;\n          roles.forEach((role: { id: string }) => {\n            try {\n              member.roles.add(role.id);\n            } catch {\n              error = true;\n            }\n          });\n          if (!error)\n            this.database.lockdownRoleBackup.delete({\n              where: {\n                guildId_userId: {\n                  guildId: member.guild.id,\n                  userId: member.id,\n                },\n              },\n            });\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt/guards/jwt-auth.guard';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller()\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class AppController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nBotModule\n\nBotModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBotModule->AppModule\n\n\n\n\n\nGuildModule\n\nGuildModule\n\nAppModule -->\n\nGuildModule->AppModule\n\n\n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nAppModule -->\n\nJwtAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BotModule\n                        \n                        \n                            GuildModule\n                        \n                        \n                            JwtAuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { JwtAuthModule } from './auth/jwt/jwt-auth.module';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { Client, GatewayIntentBits, Partials } from 'discord.js';\nimport { BotModule } from './bot/bot.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { ModerationModule } from './guild/moderation/moderation.module';\nimport { GuildSettingsModule } from './guild/guild-settings/guild-settings.module';\nimport { AuditLogModule } from './auditlog/auditlog.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { GuildUserModule } from './guild/guild-user/guild-user.module';\nimport { GuildModule } from './guild/guild.module';\nimport { RouterModule } from '@nestjs/core';\nimport { PrismaService } from './prisma.service';\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    ConfigModule.forRoot({\n      isGlobal: true,\n      ignoreEnvVars: false,\n    }),\n    DiscordModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        token: configService.get('TOKEN'),\n        discordClientOptions: {\n          intents: [\n            GatewayIntentBits.AutoModerationConfiguration,\n            GatewayIntentBits.AutoModerationExecution,\n            GatewayIntentBits.GuildPresences,\n            GatewayIntentBits.Guilds,\n            GatewayIntentBits.GuildMessages,\n            GatewayIntentBits.MessageContent,\n            GatewayIntentBits.GuildMembers,\n            GatewayIntentBits.GuildMessageReactions,\n            GatewayIntentBits.GuildModeration,\n            GatewayIntentBits.GuildInvites,\n            GatewayIntentBits.GuildVoiceStates,\n            GatewayIntentBits.GuildMessageTyping,\n            GatewayIntentBits.GuildWebhooks,\n            GatewayIntentBits.GuildIntegrations,\n            GatewayIntentBits.GuildMessageTyping,\n            GatewayIntentBits.GuildEmojisAndStickers,\n            GatewayIntentBits.DirectMessageTyping,\n            GatewayIntentBits.DirectMessages,\n            GatewayIntentBits.DirectMessageReactions,\n          ],\n          partials: [\n            Partials.GuildMember,\n            Partials.ThreadMember,\n            Partials.User,\n            Partials.Message,\n            Partials.Channel,\n            Partials.Reaction,\n            Partials.GuildScheduledEvent,\n          ],\n        },\n\n        registerCommandOptions: [\n          {\n            removeCommandsBefore: true,\n            forGuild: '1011511871297302608',\n          },\n        ],\n\n        failOnLogin: true,\n      }),\n      inject: [ConfigService],\n      setupClientFactory: (client: Client) => {\n        client.setMaxListeners(30);\n      },\n    }),\n    EventEmitterModule.forRoot({\n      wildcard: true,\n    }),\n    RouterModule.register([\n      {\n        path: 'guild/:guildId',\n        children: [\n          {\n            path: '/',\n            module: GuildModule,\n          },\n          {\n            path: '/auditlog',\n            module: AuditLogModule,\n          },\n          {\n            path: '/user',\n            module: GuildUserModule,\n          },\n          {\n            path: '/settings',\n            module: GuildSettingsModule,\n          },\n          {\n            path: '/moderation',\n            module: ModerationModule,\n          },\n        ],\n      },\n    ]),\n    UserModule,\n    JwtAuthModule,\n    GuildModule,\n    BotModule,\n    TasksModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, PrismaService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleEvent(event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('**')\n                \n            \n\n                    \n                        \n                            Defined in src/app.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('AppService')\n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { EventToLog } from './util/interfaces/event-to-log';\n\n@Injectable()\nexport class AppService {\n  logger = new Logger('AppService');\n  constructor(\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @OnEvent('**')\n  handleEvent(event: any & EventToLog) {\n    event.toFormattedLog(this.logger);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuditLogController.html":{"url":"controllers/AuditLogController.html","title":"controller - AuditLogController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuditLogController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/auditlog.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getAuditLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAuditLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuditLog(guildId: string, filter: AuditLogFilterDto, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auditlog/auditlog.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            AuditLogFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Param,\n  ParseIntPipe,\n  Query,\n  UseGuards,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuditLogFilterDto } from './dto/audit-log-filter.dto';\nimport { AuditLogService } from './auditlog.service';\nimport { LogEntryDto } from './dto/log-entry.dto';\nimport { plainToInstance } from '../util/functions/plain-to-instance';\nimport { Action, TargetType } from '../util/dto/log.entry.dto';\nimport { Rank } from '@prisma/client';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller()\n@RequiredRank(Rank.MEMBER)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class AuditLogController {\n  constructor(\n    @Inject(AuditLogService) private readonly auditLogService: AuditLogService,\n  ) {}\n\n  @Get()\n  async getAuditLog(\n    @Param('guildId') guildId: string,\n    @Query(ValidationPipe) filter: AuditLogFilterDto,\n    @Query('limit', ParseIntPipe) limit: number,\n    @Query('offset', ParseIntPipe) offset: number,\n  ): Promise {\n    return this.auditLogService\n      .find(guildId, filter, { offset, limit })\n      .then((result) => ({\n        total: result.total,\n        data: result.data.map((it) =>\n          plainToInstance(LogEntryDto, {\n            action: it.action as Action,\n            createdAt: it.createdAt,\n            invokerId: it.invokerId,\n            reason: it.reason,\n            targetId: it.targetId,\n            targetType: it.targetType as TargetType,\n          }),\n        ),\n      }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuditLogFilterDto.html":{"url":"classes/AuditLogFilterDto.html","title":"class - AuditLogFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuditLogFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/dto/audit-log-filter.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                action\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdFrom\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdTill\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', enum: actions})@IsOptional()@IsString()@IsIn(actions)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdFrom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', format: 'date-time'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdTill\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', format: 'date-time'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', enum: targetTypes})@IsOptional()@IsString()@IsIn(targetTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  Action,\n  actions,\n  TargetType,\n  targetTypes,\n} from '../../util/dto/log.entry.dto';\n\nexport class AuditLogFilterDto {\n  @ApiPropertyOptional({ type: 'string', format: 'date-time' })\n  @IsOptional()\n  createdFrom?: string;\n  @ApiPropertyOptional({ type: 'string', format: 'date-time' })\n  @IsOptional()\n  createdTill?: string;\n  @ApiPropertyOptional({ type: 'string', enum: targetTypes })\n  @IsOptional()\n  @IsString()\n  @IsIn(targetTypes)\n  targetType?: TargetType;\n  @ApiPropertyOptional({ type: 'string', enum: actions })\n  @IsOptional()\n  @IsString()\n  @IsIn(actions)\n  action?: Action;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuditLogModule.html":{"url":"modules/AuditLogModule.html","title":"module - AuditLogModule","body":"\n                   \n\n\n\n\n    Modules\n    AuditLogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuditLogModule\n\n\n\ncluster_AuditLogModule_exports\n\n\n\ncluster_AuditLogModule_providers\n\n\n\n\nAuditLogService \n\nAuditLogService \n\n\n\nAuditLogModule\n\nAuditLogModule\n\nAuditLogService  -->\n\nAuditLogModule->AuditLogService \n\n\n\n\n\nAuditEvents\n\nAuditEvents\n\nAuditLogModule -->\n\nAuditEvents->AuditLogModule\n\n\n\n\n\nAuditLogService\n\nAuditLogService\n\nAuditLogModule -->\n\nAuditLogService->AuditLogModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuditLogModule -->\n\nPrismaService->AuditLogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auditlog/auditlog.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuditEvents\n                        \n                        \n                            AuditLogService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuditLogController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuditLogService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuditLogController } from './auditlog.controller';\nimport { AuditLogService } from './auditlog.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\nimport AuditEvents from './auditlog.events';\n\n@Module({\n  controllers: [AuditLogController],\n  providers: [AuditLogService, PrismaService, AuditEvents],\n  imports: [DiscordModule.forFeature()],\n  exports: [AuditLogService],\n})\nexport class AuditLogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditLogService.html":{"url":"injectables/AuditLogService.html","title":"injectable - AuditLogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditLogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/auditlog.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auditlog/auditlog.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(entry: LogEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auditlog/auditlog.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            LogEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                        \n                    find(guildId: string, filter: AuditLogFilterDto, pagination: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auditlog/auditlog.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            AuditLogFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport LogEntry from 'src/util/dto/log.entry.dto';\nimport { PrismaService } from 'src/prisma.service';\nimport { AuditLogFilterDto } from './dto/audit-log-filter.dto';\n\n@Injectable()\nexport class AuditLogService {\n  constructor(@Inject(PrismaService) private prismaService: PrismaService) {}\n\n  async create(entry: LogEntry) {\n    return this.prismaService.auditLog.create({\n      data: {\n        action: entry.action,\n        guildId: entry.guildId,\n        invokerId: entry.invokerId,\n        reason: entry.reason,\n        targetId: entry.targetId,\n        targetType: entry.targetType,\n        extraInfo: entry.extraInfo || null,\n        createdAt: entry.createdAt,\n      },\n    });\n  }\n\n  async find(\n    guildId: string,\n    filter: AuditLogFilterDto,\n    pagination: { offset?: number; limit?: number },\n  ) {\n    const where = {\n      guildId,\n      createdAt:\n        filter.createdFrom || filter.createdTill\n          ? {\n              gte: filter.createdFrom\n                ? new Date(filter.createdFrom).toISOString()\n                : undefined,\n              lte: filter.createdTill\n                ? new Date(filter.createdTill).toISOString()\n                : undefined,\n            }\n          : undefined,\n      action: filter.action,\n      targetType: filter.targetType,\n    };\n\n    return {\n      total: await this.prismaService.auditLog.count({ where }),\n      data: await this.prismaService.auditLog.findMany({\n        select: {\n          action: true,\n          invokerId: true,\n          reason: true,\n          targetId: true,\n          targetType: true,\n          extraInfo: true,\n          createdAt: true,\n        },\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        skip: pagination.offset ?? 0,\n        take: pagination.limit ?? 0,\n      }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BotEvent.html":{"url":"interfaces/BotEvent.html","title":"interface - BotEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BotEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/interfaces/bot-event.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        __bot_event_handler__\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        __bot_event_handler__\n                        \n                    \n                \n            \n            \n                \n__bot_event_handler__(...args: ClientEvents)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/interfaces/bot-event.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ClientEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ClientEvents } from 'discord.js';\n\nexport default interface BotEvent {\n  __bot_event_handler__(\n    ...args: ClientEvents[keyof ClientEvents]\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BotModule.html":{"url":"modules/BotModule.html","title":"module - BotModule","body":"\n                   \n\n\n\n\n    Modules\n    BotModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BotModule\n\n\n\ncluster_BotModule_providers\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\n\n\nBotModule\n\nBotModule\n\nBotModule -->\n\nGuildRestrictedChannelService->BotModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nBotModule -->\n\nGuildService->BotModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nBotModule -->\n\nGuildSettingsService->BotModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nBotModule -->\n\nPrismaService->BotModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bot/bot.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { DiscordModule } from '@discord-nestjs/core';\nimport { Module } from '@nestjs/common';\nimport { PingCommand } from './commands/ping.command';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { TimeOutCommand } from './commands/timeout.command';\nimport {\n  MumVoiceCommandChatInput,\n  MumVoiceCommandUi,\n} from './commands/mod-anouncement.command';\nimport { GuildRestrictedChannelService } from 'src/guild/guild-restricted-channel/guild-restricted-channel.service';\nimport { CommunityQuestionCommand } from './commands/community-question.command';\nimport { initGuildCommand } from './commands/init-guild.command';\nimport { UserInfoUiCommand } from './commands/user-info-ui.command';\nimport { SetFirstMessageUICommand } from './commands/user-set-first-message-ui.command';\nimport { CleanWfpMember } from './commands/clean-wfp.command';\nimport { GuildService } from 'src/guild/guild.service';\nimport { SpecialCommand } from './commands/special.command';\nimport { TicketSystemSetupCommand } from './commands/ticket-system.command';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [\n    PingCommand,\n    TimeOutCommand,\n    MumVoiceCommandChatInput,\n    CommunityQuestionCommand,\n    initGuildCommand,\n    PrismaService,\n    GuildSettingsService,\n    GuildRestrictedChannelService,\n    UserInfoUiCommand,\n    SetFirstMessageUICommand,\n    CleanWfpMember,\n    GuildService,\n    SpecialCommand,\n    TicketSystemSetupCommand,\n    MumVoiceCommandUi,\n  ],\n  exports: [DiscordModule],\n})\nexport class BotModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Channel.html":{"url":"classes/Channel.html","title":"class - Channel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Channel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                flags\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastMessageId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                messages\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nsfw\n                            \n                            \n                                    \n                                    \n                                parentId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                permissionOverwrites\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                rateLimitPerUser\n                            \n                            \n                                    \n                                    \n                                rawPosition\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                threads\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                topic\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Timestamp when the channel was created', example: 1671981769958, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Flags for the channel', example: 0, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the guild', example: '616609333832187924', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the channel', example: '1056592866660581456', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastMessageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'ID of the last message', example: '1080070968900333578', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString()@IsOptional()@ApiProperty({description: 'Array of message IDs', type: undefined, example: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'Name of the channel', example: 'images', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nsfw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({description: 'Whether the channel is NSFW', example: false, type: Boolean, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the parent channel', example: '832170662491062333', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        permissionOverwrites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionOverwrite[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInstance(PermissionOverwrite)@IsOptional()@ApiProperty({description: 'Array of permission overwrites', type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        rateLimitPerUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({description: 'Rate limit per user aka slowmode', example: 0, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rawPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Raw position of the channel', example: 3, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        threads\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString()@IsOptional()@ApiProperty({description: 'Array of thread IDs', type: undefined, example: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'Topic of the channel', example: undefined, type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Type of the channel', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelCleaned.html":{"url":"classes/ChannelCleaned.html","title":"class - ChannelCleaned","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelCleaned\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                before\n                            \n                            \n                                channelId\n                            \n                            \n                                guildId\n                            \n                            \n                                messagesDeleted\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, messagesDeleted: number, before: number, userId: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesDeleted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        before\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        before\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messagesDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:52\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChannelController.html":{"url":"controllers/ChannelController.html","title":"controller - ChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/channel/channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /channel\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                cleanChannel\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editChannel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildChannel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildChannels\n                            \n                            \n                                    \n                                    \n                                    Async\n                                setSlowmode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        cleanChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanChannel(guildId: string, channelId: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channelId/clean')@ApiOperation({summary: 'Clean a channel'})@ApiBody({schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        editChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    editChannel(guildId: string, channelId: string, channelData: GuildChannelEditOptions)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':channelId')@ApiOperation({summary: 'Edit a channel for a guild'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelData\n                                            \n                                                            GuildChannelEditOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildChannel(guildId: string, channelId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':channelId')@ApiOperation({summary: 'Get a channel for a guild'})@ApiResponse({status: 200, type: Channel, description: 'Channel was successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildChannels\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildChannels(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all channels for a guild'})@ApiResponse({status: 200, type: undefined, description: 'Channels were successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        setSlowmode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSlowmode(guildId: string, channelId: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channelId/slowmode')@ApiOperation({summary: 'Set slowmode for a channel'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport {\n  Client,\n  GuildChannel,\n  GuildChannelEditOptions,\n  GuildBasedChannel,\n  ChannelType,\n  GuildTextBasedChannel,\n} from 'discord.js';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { Channel } from '../dto/channel';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  ChannelCleaned,\n  SlowmodeDisabled,\n  SlowmodeEnabled,\n} from '../events/channel.event';\nimport { ChannelNotTextBasedException } from 'src/util/exception/channel-not-text-based-exception';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { Rank } from '@prisma/client';\n\n@ApiTags('/channel')\n@Controller('/channel')\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class ChannelController {\n  logger = new Logger(ChannelController.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all channels for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: [Channel],\n    description: 'Channels were successfully fetched',\n  })\n  async getGuildChannels(\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(\n      `Found ${guild.channels.cache.size} channels in guild ${guildId}`,\n    );\n    return (await guild.channels.fetch()).toJSON();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get a channel for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: Channel,\n    description: 'Channel was successfully fetched',\n  })\n  async getGuildChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(\n      `Found ${guild.channels.cache.size} channels in guild ${guildId}`,\n    );\n    return await guild.channels.fetch(channelId);\n  }\n\n  @Put(':channelId')\n  @ApiOperation({ summary: 'Edit a channel for a guild' })\n  async editChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() channelData: GuildChannelEditOptions,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId);\n    await channel.edit(channelData);\n    this.logger.log(`Edited channel ${channelId} in guild ${guildId}`);\n    return channel;\n  }\n\n  @Post(':channelId/slowmode')\n  @ApiOperation({ summary: 'Set slowmode for a channel' })\n  async setSlowmode(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() { duration }: { duration: number },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId) as GuildChannel;\n    this.logger.log(\n      `Set slowmode for channel ${channelId} in guild ${guildId}`,\n    );\n    await this.eventEmitter.emitAsync(\n      `channel.slowmode.${duration > 0 ? 'enabled' : 'disabled'}`,\n      duration > 0\n        ? new SlowmodeEnabled(guildId, channelId, true, duration)\n        : new SlowmodeDisabled(guildId, channelId, false),\n    );\n    await channel.edit({ rateLimitPerUser: duration });\n  }\n\n  @Post(':channelId/clean')\n  @ApiOperation({ summary: 'Clean a channel' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        userId: {\n          type: 'string',\n        },\n        before: {\n          type: 'number',\n        },\n      },\n    },\n  })\n  async cleanChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() { userId, before }: { userId: string; before: number },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId);\n    this.logger.log(\n      `Cleaning channel ${channelId} in guild ${guildId} from messages before ${before} of user ${userId}`,\n    );\n    if (\n      channel.type in\n      [\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ]\n    ) {\n      cleanTextChannel(\n        channel as GuildTextBasedChannel,\n        (messages) => messages.last().createdTimestamp  msg.deletable && msg.createdTimestamp > before,\n        this.logger,\n      );\n    } else {\n      throw new ChannelNotTextBasedException(channel.name);\n    }\n    await this.eventEmitter.emitAsync(\n      'channel.clean',\n      new ChannelCleaned(guildId, channelId, 0, before, userId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelNotTextBasedException.html":{"url":"classes/ChannelNotTextBasedException.html","title":"class - ChannelNotTextBasedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelNotTextBasedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/channel-not-text-based-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when a channel isn't found by ID\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(channelName: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/channel-not-text-based-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        channelName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a channel isn't found by ID\n */\nexport class ChannelNotTextBasedException extends Error {\n  constructor(channelName: string) {\n    super(`Channel ${channelName} is not text based.`);\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(ChannelNotTextBasedException)\nexport class ChannelNotTextBasedExceptionFilter implements ExceptionFilter {\n  catch(exception: ChannelNotTextBasedException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelNotTextBasedExceptionFilter.html":{"url":"classes/ChannelNotTextBasedExceptionFilter.html","title":"class - ChannelNotTextBasedExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelNotTextBasedExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/channel-not-text-based-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to produce the http response when the exception is thrown in a http context\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: ChannelNotTextBasedException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/channel-not-text-based-exception.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            ChannelNotTextBasedException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a channel isn't found by ID\n */\nexport class ChannelNotTextBasedException extends Error {\n  constructor(channelName: string) {\n    super(`Channel ${channelName} is not text based.`);\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(ChannelNotTextBasedException)\nexport class ChannelNotTextBasedExceptionFilter implements ExceptionFilter {\n  catch(exception: ChannelNotTextBasedException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CleanWfpMember.html":{"url":"classes/CleanWfpMember.html","title":"class - CleanWfpMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CleanWfpMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/clean-wfp.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onCleanWfpMembers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildService: GuildService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/clean-wfp.command.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onCleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    onCleanWfpMembers(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/clean-wfp.command.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InteractionEvent } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  Colors,\n  CommandInteraction,\n  EmbedBuilder,\n  userMention,\n} from 'discord.js';\nimport { GuildService } from 'src/guild/guild.service';\n\n@Command({\n  name: 'clean-wfp',\n  description:\n    'Kick all members with the role `wfp` if they are longer than 2 weeks on the server.',\n  defaultMemberPermissions: ['ModerateMembers', 'KickMembers'],\n  dmPermission: false,\n})\nexport class CleanWfpMember {\n  constructor(@Inject(GuildService) private guildService: GuildService) {}\n  @Handler()\n  async onCleanWfpMembers(@InteractionEvent() interaction: CommandInteraction) {\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const outCome = await this.guildService.cleanWfpMembers(\n      interaction.guildId,\n      false,\n    );\n    console.log(outCome);\n    const embed = new EmbedBuilder()\n      .setTitle('wfp kick member report :3')\n      .setColor(Colors.Blue)\n      .setDescription(\n        'Member die kicked wurden bzw. nicht kicked werden konnten',\n      )\n      .addFields([\n        {\n          name: 'Kicked members count',\n          value: outCome['membersToKick'].length.toString() || '0',\n        },\n        {\n          name: 'Kicked members names',\n          value:\n            outCome['membersToKick']\n              .map((member) => userMention(member.id))\n              .join('\\n') || '',\n        },\n        {\n          name: \"Couldn't kick members count\",\n          value: outCome['unkickableMembers'].length.toString() || '0',\n        },\n        {\n          name: \"Couldn't kick members names\",\n          value:\n            outCome['unkickableMembers']\n              .map((member) => userMention(member.id))\n              .join('\\n') || '',\n        },\n      ]);\n    await interaction.followUp({\n      ephemeral: true,\n      embeds: [embed],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommandValidationFilter.html":{"url":"classes/CommandValidationFilter.html","title":"class - CommandValidationFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommandValidationFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/filters/command-validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(exceptionList: WrongArgsException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/filters/command-validation.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exceptionList\n                                            \n                                                        WrongArgsException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WrongArgsException } from '@discord-nestjs/common';\nimport { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { Colors, EmbedBuilder } from 'discord.js';\n\n@Catch(WrongArgsException)\nexport class CommandValidationFilter implements ExceptionFilter {\n  async catch(\n    exceptionList: WrongArgsException,\n    host: ArgumentsHost,\n  ): Promise {\n    const interaction = host.getArgByIndex(0);\n    const embeds = exceptionList.getError().map((exception) =>\n      new EmbedBuilder()\n        .setDescription(`For input: ${exception.property}`)\n        .setTitle('Validation failed')\n        .setColor(Colors.Red)\n        .addFields(\n          Object.keys(exception.constraints).map((key) => ({\n            name: key,\n            value: exception.constraints[key],\n          })),\n        ),\n    );\n\n    if (interaction.isRepliable())\n      await interaction.reply({ embeds, ephemeral: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionCommand.html":{"url":"classes/CommunityQuestionCommand.html","title":"class - CommunityQuestionCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/community-question.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onButtonPress\n                            \n                            \n                                    \n                                    Async\n                                onCommunityQuestion\n                            \n                            \n                                    \n                                    \n                                    Async\n                                onInteraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/community-question.command.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonPress\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonPress(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onCommunityQuestion\n                        \n                    \n                \n            \n            \n                \n                        \n                    onCommunityQuestion(interaction: CommandInteraction, question: CommunityQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                question\n                                            \n                                                            CommunityQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onInteraction\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInteraction(undefined: CommunityQuestionFormDto, eventArgs: ClientEvents)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')@UseGuards(IsModalInteractionGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CommunityQuestionFormDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventArgs\n                                            \n                                                        ClientEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n  IA,\n  On,\n  EventParams,\n} from '@discord-nestjs/core';\nimport { Inject, UseGuards, ValidationPipe } from '@nestjs/common';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  ButtonInteraction,\n  ButtonStyle,\n  Client,\n  ClientEvents,\n  CommandInteraction,\n  EmbedBuilder,\n  GuildTextBasedChannel,\n  ModalActionRowComponentBuilder,\n  ModalBuilder,\n  TextInputBuilder,\n  TextInputStyle,\n} from 'discord.js';\nimport { CommunityQuestionDto } from '../dto/commmunity-question.dto';\nimport {\n  ModalFieldsTransformPipe,\n  SlashCommandPipe,\n} from '@discord-nestjs/common';\nimport { IsModalInteractionGuard } from '../guards/is-modal-interaction.guard';\nimport { CommunityQuestionFormDto } from '../dto/community-question.form.dto';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'question',\n  description: 'Ask the community a question',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class CommunityQuestionCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private readonly prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onCommunityQuestion(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) question: CommunityQuestionDto,\n  ) {\n    const questionId = await this.prismaService.guildQuestion.create({\n      data: {\n        question: question.description,\n        guildId: interaction.guildId,\n      },\n      select: {\n        id: true,\n      },\n    });\n    const button = new ButtonBuilder()\n      .setCustomId(`community-question-${questionId.id}`)\n      .setLabel('Antwort geben')\n      .setStyle(ButtonStyle.Primary);\n\n    const row = new ActionRowBuilder().addComponents(button);\n    interaction.reply({\n      components: [row],\n      content: question.question,\n    });\n  }\n  @On('interactionCreate')\n  async onButtonPress(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (!interaction.customId.includes('community-question')) return;\n    const questionId = interaction.customId.split('-')[2];\n    const question = await this.prismaService.guildQuestion.findUnique({\n      where: {\n        id: parseInt(questionId),\n      },\n    });\n    if (!question) {\n      await interaction.reply({\n        content: 'Question not found, please contact the mods',\n        ephemeral: true,\n      });\n      return;\n    }\n    const modal = new ModalBuilder()\n      .setCustomId(`community-question-${questionId}`)\n      .setTitle('Community Frage');\n    const questionField = new TextInputBuilder()\n      .setCustomId('question')\n      .setLabel('Frage(Nicht bearbeiten)')\n      .setStyle(TextInputStyle.Paragraph)\n      .setValue(question.question)\n      .setRequired(false);\n    const answerInput = new TextInputBuilder()\n      .setCustomId('answer')\n      .setLabel('Antwort')\n      .setStyle(TextInputStyle.Paragraph)\n      .setRequired(true)\n      .setPlaceholder('Antwort');\n    const answerComponentRow =\n      new ActionRowBuilder().addComponents(\n        answerInput,\n      );\n    const questionComponentRow =\n      new ActionRowBuilder().addComponents(\n        questionField,\n      );\n\n    // Add inputs to the modal\n    modal.addComponents(questionComponentRow, answerComponentRow);\n    await interaction.showModal(modal);\n  }\n\n  @On('interactionCreate')\n  @UseGuards(IsModalInteractionGuard)\n  async onInteraction(\n    @IA(ModalFieldsTransformPipe) { answer }: CommunityQuestionFormDto,\n    @EventParams() eventArgs: ClientEvents['interactionCreate'],\n  ) {\n    const [modal] = eventArgs;\n    if (\n      !modal.isModalSubmit() ||\n      !modal.customId.startsWith('community-question')\n    )\n      return;\n    const questionId = modal.customId.split('-')[2];\n    const question = await this.prismaService.guildQuestion.findUnique({\n      where: {\n        id: parseInt(questionId),\n      },\n    });\n    await this.prismaService.guildQuestion.update({\n      where: {\n        id: parseInt(questionId),\n      },\n      data: {\n        answers: question.answers + 1,\n      },\n    });\n    await this.prismaService.guildQuestionAnswer.create({\n      data: {\n        answer: answer.value,\n        createdAt: new Date(),\n        guildQuestionId: parseInt(questionId),\n      },\n    });\n    if (answer.value != '')\n      (\n        (await (\n          await this.client.guilds.fetch(eventArgs[0].guildId)\n        ).channels.fetch('1195024829544411168')) as GuildTextBasedChannel\n      ).send({\n        embeds: [\n          new EmbedBuilder()\n            .setAuthor({\n              name: this.client.user.username,\n              iconURL: this.client.user.avatarURL(),\n              url: 'https://github.com/89Q12/Mega-Transformers-bot',\n            })\n            .addFields([\n              {\n                name: 'Antwort von nutzer:in',\n                value: answer.value,\n              },\n              {\n                name: 'Frage',\n                value: question.question,\n              },\n            ]),\n        ],\n      });\n    await modal.reply({ content: 'Antwort abgeschickt', ephemeral: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionDto.html":{"url":"classes/CommunityQuestionDto.html","title":"class - CommunityQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/commmunity-question.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'Description about the question displayed above the text input int the modal', type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/commmunity-question.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The question you want to ask the community', type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/commmunity-question.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { IsString } from 'class-validator';\n\nexport class CommunityQuestionDto {\n  @Param({\n    description: 'The question you want to ask the community',\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  question: string;\n\n  @Param({\n    description:\n      'Description about the question displayed above the text input int the modal',\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionFormDto.html":{"url":"classes/CommunityQuestionFormDto.html","title":"class - CommunityQuestionFormDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionFormDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/community-question.form.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                answer\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TextInputModalData\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field('answer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/community-question.form.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field } from '@discord-nestjs/core';\nimport { TextInputModalData } from 'discord.js';\n\nexport class CommunityQuestionFormDto {\n  @Field('answer')\n  answer: TextInputModalData;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiscordExecutionContext.html":{"url":"interfaces/DiscordExecutionContext.html","title":"interface - DiscordExecutionContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiscordExecutionContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/guards/user-is-unlocked.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ExecutionContext\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getMessage\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMessage\n                        \n                    \n                \n            \n            \n                \ngetMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/user-is-unlocked.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Message\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { Message } from 'discord.js';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\n\ninterface DiscordExecutionContext extends ExecutionContext {\n  getMessage(): Message;\n}\n@Injectable()\nexport class IsUserUnlockedGuard implements CanActivate {\n  constructor(\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n  ) {}\n  async canActivate(context: DiscordExecutionContext): Promise {\n    const message: Message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return message.member.roles.cache.has(\n      await this.settingsService.getVerifiedMemberRoleId(message.guildId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordGuildMember.html":{"url":"classes/DiscordGuildMember.html","title":"class - DiscordGuildMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordGuildMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/guild-member.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                    \n                                bot\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                communicationDisabledUntil\n                            \n                            \n                                    \n                                    \n                                displayName\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        communicationDisabledUntil\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()@IsOptional()@ApiPropertyOptional({type: String, format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiscordUser['id']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsDateString, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { DiscordUser } from './user';\n\nexport class DiscordGuildMember {\n  @IsString()\n  @ApiProperty({ type: String })\n  userId: DiscordUser['id'];\n  @IsString()\n  @ApiProperty({ type: String })\n  guildId: string;\n  @IsDateString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String, format: 'date-time' })\n  communicationDisabledUntil?: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  displayName: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  username: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  avatarUrl: string;\n  @IsBoolean()\n  @ApiProperty({ type: Boolean })\n  bot: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordUser.html":{"url":"classes/DiscordUser.html","title":"class - DiscordUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accentColor\n                            \n                            \n                                    \n                                    \n                                avatarURL\n                            \n                            \n                                    \n                                    \n                                bannerURL\n                            \n                            \n                                    \n                                    \n                                bot\n                            \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                discriminator\n                            \n                            \n                                    \n                                    \n                                displayAvatarURL\n                            \n                            \n                                    \n                                    \n                                flags\n                            \n                            \n                                    \n                                    \n                                hexAccentColor\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                system\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accentColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The accent color of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatarURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The avatar url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bannerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The banner url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the user is a bot', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The created timestamp of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        discriminator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The discriminator of the user but now ITS ALWAYS 0', example: '1234', deprecated: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        displayAvatarURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The display avatar url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The flags of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hexAccentColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The hex accent color of the user', example: '#000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the user', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        system\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the user is a system user', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The username of the user', example: 'John Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsNumber, IsString } from 'class-validator';\n\nclass DiscordUser {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the user',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The username of the user',\n    example: 'John Doe',\n  })\n  username: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The discriminator of the user but now ITS ALWAYS 0',\n    example: '1234',\n    deprecated: true,\n  })\n  discriminator: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The avatar url of the user',\n  })\n  avatarURL: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The display avatar url of the user',\n  })\n  displayAvatarURL: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The banner url of the user',\n  })\n  bannerURL: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the user is a bot',\n    example: false,\n  })\n  bot: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the user is a system user',\n    example: false,\n  })\n  system: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The flags of the user',\n    example: 0,\n  })\n  flags: number;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The created timestamp of the user',\n    example: 0,\n  })\n  createdTimestamp: number;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The accent color of the user',\n    example: 0,\n  })\n  accentColor: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The hex accent color of the user',\n    example: '#000000',\n  })\n  hexAccentColor: string;\n}\nconst userResponseSchema = {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    username: { type: 'string' },\n    discriminator: { type: 'string' },\n    avatarURL: { type: 'string' },\n    displayAvatarURL: { type: 'string' },\n    bannerURL: { type: 'string' },\n    bot: { type: 'boolean' },\n    system: { type: 'boolean' },\n    flags: { type: 'number' },\n    createdTimestamp: { type: 'number' },\n    accentColor: { type: 'number' },\n    hexAccentColor: { type: 'string' },\n  },\n};\nconst usersResponseSchema = {\n  type: 'array',\n  items: userResponseSchema,\n};\nexport { DiscordUser, userResponseSchema, usersResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DmMessageHandler.html":{"url":"injectables/DmMessageHandler.html","title":"injectable - DmMessageHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DmMessageHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/message-create/dm-message/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                dmMessageToModTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        dmMessageToModTeam\n                        \n                    \n                \n            \n            \n                \n                        \n                    dmMessageToModTeam(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageIsDmGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/dm-message/index.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DmMessageHandler.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/message-create/dm-message/index.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { On } from '@discord-nestjs/core';\nimport { Injectable, Logger, UseGuards } from '@nestjs/common';\nimport {\n  Message,\n  ActionRowBuilder,\n  ButtonBuilder,\n  DiscordAPIError,\n} from 'discord.js';\nimport { MessageIsDmGuard } from 'src/bot/guards/message-is-dm.guard';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Injectable()\nexport class DmMessageHandler {\n  logger = new Logger(DmMessageHandler.name);\n\n  @On('messageCreate')\n  @UseGuards(MessageIsDmGuard)\n  async dmMessageToModTeam(message: Message): Promise {\n    try {\n      await message.reply({\n        content:\n          'Ich bin zwar nur ein Bot und kann kein Koverstionen führen, aber ich kann dir helfen. Klicke auf den Button, um Hilfe zu bekommen.',\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n    } catch (e: unknown) {\n      this.logger.error((e as DiscordAPIError).message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditRoleData.html":{"url":"classes/EditRoleData.html","title":"class - EditRoleData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditRoleData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                color\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                hoist\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                icon\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                mentionable\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                permissions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                position\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                unicodeEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ColorResolvable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(undefined)@ApiProperty({enum: Colors, required: false, example: 'White', examples: undefined, description: 'New color of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        hoist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Whether or not the role should be hoisted'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:160\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Base64Resolvable | EmojiResolvable | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New Icon of the role, base64 encoded string', externalDocs: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:203\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        mentionable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Should the role be mentionable or not'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:190\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New name of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PermissionResolvable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(undefined)@IsOptional()@ApiProperty({type: undefined, required: false, description: 'Updated Permission', default: undefined, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({type: Number, required: false, description: 'The position of the role; Higher = more permissions relative to the role below'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, required: true, description: 'Why was the role updated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        unicodeEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'The new unicodeEmoji of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:212\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nimport {\n  Base64Resolvable,\n  ColorResolvable,\n  Colors,\n  EmojiResolvable,\n  PermissionFlagsBits,\n  PermissionResolvable,\n} from 'discord.js';\n\nclass RoleResponse {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild the api belongs to',\n    example: '123456789012345678',\n  })\n  guild: string;\n\n  @IsUrl()\n  @ApiProperty({\n    type: String,\n    description: 'The icon of the role',\n    example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n  })\n  icon: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The unicodeEmoji of the role',\n    example: '👑',\n  })\n  unicodeEmoji: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the role',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The name of the role',\n    example: 'Admin',\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The color of the role',\n    example: 0,\n  })\n  color: number;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is hoisted',\n    example: false,\n  })\n  hoist: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The position of the role',\n    example: 0,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The permissions of the role',\n    example: '0',\n  })\n  permissions: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is managed by an integration',\n    example: false,\n  })\n  managed: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is mentionable',\n    example: false,\n  })\n  mentionable: boolean;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The tags of the role',\n    example: null,\n  })\n  tags: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The timestamp the role was created at(Unixtimestamp)',\n    example: 1600000000000,\n  })\n  createdTimestamp: number;\n}\n\nclass EditRoleData {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsIn(Object.keys(Colors))\n  @ApiProperty({\n    enum: Colors,\n    required: false,\n    example: 'White',\n    examples: Object.keys(Colors),\n    description: 'New color of the role',\n  })\n  color?: ColorResolvable;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'Why was the role updated',\n  })\n  reason: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Whether or not the role should be hoisted',\n  })\n  hoist?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description:\n      'The position of the role; Higher = more permissions relative to the role below',\n  })\n  position?: number;\n\n  @IsIn(Object.keys(PermissionFlagsBits))\n  @IsOptional()\n  @ApiProperty({\n    type: Array,\n    required: false,\n    description: 'Updated Permission',\n    default: null,\n    example: ['AddReactions', 'KickMembers'],\n  })\n  permissions?: PermissionResolvable;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the role be mentionable or not',\n  })\n  mentionable?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New Icon of the role, base64 encoded string',\n    externalDocs: {\n      description: 'Discord.js docs',\n      url: 'https://old.discordjs.dev/#/docs/discord.js/main/class/Role?scrollTo=setIcon',\n    },\n  })\n  icon?: Base64Resolvable | EmojiResolvable | null;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'The new unicodeEmoji of the role',\n  })\n  unicodeEmoji?: string | null;\n}\n// Generate example schema for get /guilds/:guildId/roles/:roleId\nconst roleResponseSchema = {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n};\n// Schema for retrieving all roles from a guild with example data\nconst rolesResponseSchema = {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n};\n\n// Write exports here\nexport { RoleResponse, EditRoleData, roleResponseSchema, rolesResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventToLog.html":{"url":"interfaces/EventToLog.html","title":"interface - EventToLog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventToLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/interfaces/event-to-log.ts\n        \n\n\n            \n                Description\n            \n            \n                Thrown events that implement this can be used to pretty print into the application log\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toFormattedLog\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/interfaces/event-to-log.ts:11\n                        \n                    \n\n\n            \n                \n                        Pretty print function on thrown events within the app, not all events implement this!!\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Logger which is used for logging to the nestjs app log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\n\n/**\n * Thrown events that implement this can be used to pretty print into the application log\n */\nexport interface EventToLog {\n  /**\n   * Pretty print function on thrown events within the app, not all events implement this!!\n   * @param logger Logger which is used for logging to the nestjs app log\n   */\n  toFormattedLog(logger: Logger): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Explorer.html":{"url":"classes/Explorer.html","title":"class - Explorer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Explorer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/explorers/event.explorer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                botEventDecorator\n                            \n                            \n                                    Public\n                                checkProviders\n                            \n                            \n                                    Private\n                                hasHandlerMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, externalContextCreator: ExternalContextCreator)\n                    \n                \n                        \n                            \n                                Defined in src/bot/explorers/event.explorer.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        externalContextCreator\n                                                  \n                                                        \n                                                                    ExternalContextCreator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        botEventDecorator\n                        \n                    \n                \n            \n            \n                \n                        \n                    botEventDecorator(provider: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        checkProviders\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkProviders(providers: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                providers\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasHandlerMethod\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasHandlerMethod(provider: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\nimport {\n  BOT_EVENT_KEY,\n  BOT_EVENT_HANDLER_NAME,\n} from '../decorators/bot-event.decorator';\nimport { ExternalContextCreator } from '@nestjs/core';\n\nexport class Explorer {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    private readonly externalContextCreator: ExternalContextCreator,\n  ) {}\n  public checkProviders(providers: any[]): void {\n    for (const provider of providers) {\n      const metadata = this.botEventDecorator(provider);\n      if (metadata) {\n        if (!this.hasHandlerMethod(provider)) {\n          throw new Error(\n            `The provider ${provider.name} does not have a handler method, does it implement BotEvent?`,\n          );\n        }\n        const handler = this.externalContextCreator.create(\n          provider,\n          provider[BOT_EVENT_HANDLER_NAME],\n          BOT_EVENT_HANDLER_NAME,\n        );\n        this.client.on(metadata, handler);\n      }\n    }\n  }\n\n  private botEventDecorator(provider: any) {\n    return Reflect.getMetadata(BOT_EVENT_KEY, provider);\n  }\n\n  private hasHandlerMethod(provider: any): boolean {\n    return (\n      provider.prototype.hasOwnProperty(BOT_EVENT_HANDLER_NAME) &&\n      typeof provider.prototype.handler === 'function'\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Guild.html":{"url":"classes/Guild.html","title":"class - Guild","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Guild\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                guildId\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['guildId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { GuildUser } from '@prisma/client';\n\nexport class Guild {\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) name: string;\n  @ApiProperty({ type: String }) image: string;\n}\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n  @ApiPropertyOptional({ type: [Guild] }) guilds: Guild[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildAutoDeleteChannelController.html":{"url":"controllers/GuildAutoDeleteChannelController.html","title":"controller - GuildAutoDeleteChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildAutoDeleteChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                autodeletechannel\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createAutoDeleteChannel\n                            \n                            \n                                    \n                                    Async\n                                getAutoDeleteChannel\n                            \n                            \n                                    \n                                    Async\n                                updateAutoDeleteChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAutoDeleteChannel(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAutoDeleteChannel(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAutoDeleteChannel(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { GuildAutoDeleteChannelService } from './guild-auto-delete-channel.service';\nimport { GuildAutoDeleteChannelDto } from './dto/auto-delete-channels.dto';\nimport { plainToInstance } from 'class-transformer';\n\n@Controller('autodeletechannel')\nexport class GuildAutoDeleteChannelController {\n  constructor(\n    @Inject(GuildAutoDeleteChannelService)\n    private readonly guildAutoDeleteChannelService: GuildAutoDeleteChannelService,\n  ) {}\n\n  @Get()\n  async getAutoDeleteChannel(@Param('guildId') guildId: string) {\n    const autoDeleteChannels =\n      await this.guildAutoDeleteChannelService.get(guildId);\n    if (!autoDeleteChannels) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, autoDeleteChannels);\n  }\n\n  @Post()\n  async createAutoDeleteChannel(\n    @Param('guildId') guildId: string,\n    @Body() autoDeleteChannel: GuildAutoDeleteChannelDto,\n  ) {\n    this.guildAutoDeleteChannelService.get(guildId).then(() => {\n      throw new ConflictException(\n        `Channel ${channel.channelId} already exists`,\n      );\n    });\n    const channel = await this.guildAutoDeleteChannelService.upsert(\n      guildId,\n      autoDeleteChannel,\n    );\n    if (!channel) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, channel);\n  }\n\n  @Put()\n  async updateAutoDeleteChannel(\n    @Param('guildId') guildId: string,\n    @Body() autoDeleteChannel: GuildAutoDeleteChannelDto,\n  ) {\n    const channel = await this.guildAutoDeleteChannelService.upsert(\n      guildId,\n      autoDeleteChannel,\n    );\n    if (!channel) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, channel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildAutoDeleteChannelDto.html":{"url":"classes/GuildAutoDeleteChannelDto.html","title":"class - GuildAutoDeleteChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildAutoDeleteChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                    \n                                deleteAtCron\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deleteAtCron\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(/^(((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7}$/, {message: 'Invalid cron expression'})@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { AutoDeleteChannels } from '@prisma/client';\nimport { IsString, Matches } from 'class-validator';\n\nexport class GuildAutoDeleteChannelDto\n  implements Omit\n{\n  @IsString()\n  @ApiProperty({ type: String })\n  channelId: string;\n  @IsString()\n  @Matches(/^(((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7}$/, {\n    message: 'Invalid cron expression',\n  })\n  @ApiProperty({ type: String })\n  deleteAtCron: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildAutoDeleteChannelModule.html":{"url":"modules/GuildAutoDeleteChannelModule.html","title":"module - GuildAutoDeleteChannelModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildAutoDeleteChannelModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildAutoDeleteChannelModule\n\n\n\ncluster_GuildAutoDeleteChannelModule_exports\n\n\n\ncluster_GuildAutoDeleteChannelModule_providers\n\n\n\n\nGuildAutoDeleteChannelService \n\nGuildAutoDeleteChannelService \n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelService  -->\n\nGuildAutoDeleteChannelModule->GuildAutoDeleteChannelService \n\n\n\n\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildAutoDeleteChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildRestrictedChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nGuildAutoDeleteChannelModule -->\n\nGuildService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildAutoDeleteChannelModule -->\n\nGuildSettingsService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nGuildAutoDeleteChannelModule -->\n\nGuildUserService->GuildAutoDeleteChannelModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildAutoDeleteChannelModule -->\n\nPrismaService->GuildAutoDeleteChannelModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nGuildAutoDeleteChannelModule -->\n\nTasksService->GuildAutoDeleteChannelModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildAutoDeleteChannelService\n                        \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildAutoDeleteChannelController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildAutoDeleteChannelService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildAutoDeleteChannelService } from './guild-auto-delete-channel.service';\nimport { GuildAutoDeleteChannelController } from './guild-auto-delete-channel.controller';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\nimport { TasksService } from 'src/tasks/tasks.service';\nimport { GuildService } from '../guild.service';\nimport { GuildUserService } from '../guild-user/guild-user.service';\nimport { GuildRestrictedChannelService } from '../guild-restricted-channel/guild-restricted-channel.service';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [\n    GuildAutoDeleteChannelService,\n    PrismaService,\n    TasksService,\n    GuildService,\n    GuildUserService,\n    GuildRestrictedChannelService,\n    GuildSettingsService,\n  ],\n  controllers: [GuildAutoDeleteChannelController],\n  exports: [GuildAutoDeleteChannelService],\n})\nexport class GuildAutoDeleteChannelModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildAutoDeleteChannelService.html":{"url":"injectables/GuildAutoDeleteChannelService.html","title":"injectable - GuildAutoDeleteChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildAutoDeleteChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                constructChannelDeleteJobs\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService, tasksService: TasksService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tasksService\n                                                  \n                                                        \n                                                                        TasksService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        constructChannelDeleteJobs\n                        \n                    \n                \n            \n            \n                \n                        \n                    constructChannelDeleteJobs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GuildAutoDeleteChannelService.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Client, GuildChannel } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { TasksService } from 'src/tasks/tasks.service';\nimport { GuildAutoDeleteChannelDto } from './dto/auto-delete-channels.dto';\n\n@Injectable()\nexport class GuildAutoDeleteChannelService {\n  logger = new Logger(GuildAutoDeleteChannelService.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(TasksService) private tasksService: TasksService,\n  ) {}\n  async get(guildId: string) {\n    return await this.database.autoDeleteChannels.findMany({\n      where: { guildId },\n    });\n  }\n  async upsert(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto) {\n    const channelId = autoDeleteChannel.channelId;\n    return this.database.autoDeleteChannels.upsert({\n      where: {\n        channelId,\n        guildId,\n      },\n      create: {\n        ...autoDeleteChannel,\n        guildId,\n      },\n      update: {\n        ...autoDeleteChannel,\n        guildId,\n      },\n    });\n  }\n\n  async constructChannelDeleteJobs() {\n    const guilds = await this.database.guild.findMany({\n      select: {\n        AutoDeleteChannels: true,\n      },\n    });\n    guilds.forEach((guild) => {\n      guild.AutoDeleteChannels.forEach((deleteChannel) => {\n        this.tasksService.createDynamicScheduledJob({\n          cronTime: deleteChannel.deleteAtCron,\n          onTick: async () => {\n            const channelId = deleteChannel.channelId;\n            const guildId = deleteChannel.guildId;\n            this.logger.log(\n              `Deleting channel ${channelId} in guild ${guildId}`,\n            );\n            const guild = await this.client.guilds.fetch(guildId);\n            const channel = (await guild.channels.fetch(\n              channelId,\n            )) as GuildChannel;\n            const nChannel = await channel.clone();\n            await channel.delete();\n            Promise.all([\n              nChannel.setPosition(channel.position),\n              nChannel.setParent(channel.parentId),\n              nChannel.setName(channel.name),\n            ]);\n          },\n          timeZone: 'Europe/Berlin',\n        });\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildChannelEditOptions.html":{"url":"classes/GuildChannelEditOptions.html","title":"class - GuildChannelEditOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildChannelEditOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nsfw\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                parent\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                topic\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                userLimit\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New name of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nsfw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Should the channel be NSFW'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:189\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryChannelResolvable | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['String', 'undefined', 'CategoryChannel'])@IsOptional()@ApiProperty({type: undefined, required: false, description: 'Category of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, required: false, description: 'Why was the channel updated/created'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:215\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'Topic of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:180\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChannelType.GuildText | ChannelType.GuildAnnouncement\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ChannelType)@IsOptional()@ApiProperty({enum: ChannelType, required: false, description: 'Change the type of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        userLimit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({type: Number, required: false, description: 'Slowmode for the channel in seconds'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:198\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildController.html":{"url":"controllers/GuildController.html","title":"controller - GuildController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                messagesPerChannelLastMonth\n                            \n                            \n                                    \n                                    Async\n                                messagesPerDayLastMonth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        messagesPerChannelLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    messagesPerChannelLastMonth(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('messages-per-channel-last-month')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        messagesPerDayLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    messagesPerDayLastMonth(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('messages-per-day-last-month')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, Param, UseGuards } from '@nestjs/common';\nimport { GuildService } from './guild.service';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\n\n@Controller('/')\n@UseGuards(JwtAuthGuard)\nexport class GuildController {\n  constructor(\n    @Inject(GuildService) private guildService: GuildService,\n    @InjectDiscordClient() private client: Client,\n  ) {}\n\n  @Get('messages-per-channel-last-month')\n  async messagesPerChannelLastMonth(@Param('guildId') guildId: string) {\n    const data =\n      await this.guildService.averageMessagesPerChannelLastMonth(guildId);\n    const labels = [];\n    const values = Object.values(data);\n    Object.keys(data).forEach(async (key) => {\n      labels.push(\n        (await (await this.client.guilds.fetch(guildId)).channels.fetch(key))\n          .name,\n      );\n    });\n    return {\n      labels,\n      values,\n    };\n  }\n  @Get('messages-per-day-last-month')\n  async messagesPerDayLastMonth(@Param('guildId') guildId: string) {\n    const data =\n      await this.guildService.averageMessagesPerDayLastMonth(guildId);\n    const labels = [];\n    const values = Object.values(data);\n    Object.keys(data).forEach((key) => {\n      labels.push(key);\n    });\n    return {\n      labels,\n      values,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildDoesNotExistException.html":{"url":"classes/GuildDoesNotExistException.html","title":"class - GuildDoesNotExistException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildDoesNotExistException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/guild-does-not-exist-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when a Guild isn't found by ID\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/guild-does-not-exist-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a Guild isn't found by ID\n */\nexport class GuildDoesNotExistException extends Error {\n  constructor(guildId: string) {\n    super(\n      `Guild with the id ${guildId} does not exist or is not using Cardinal System.`,\n    );\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(GuildDoesNotExistException)\nexport class GuildDoesNotExistExceptionFilter implements ExceptionFilter {\n  catch(exception: GuildDoesNotExistException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildDoesNotExistExceptionFilter.html":{"url":"classes/GuildDoesNotExistExceptionFilter.html","title":"class - GuildDoesNotExistExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildDoesNotExistExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/guild-does-not-exist-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to produce the http response when the exception is thrown in a http context\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: GuildDoesNotExistException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/guild-does-not-exist-exception.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            GuildDoesNotExistException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a Guild isn't found by ID\n */\nexport class GuildDoesNotExistException extends Error {\n  constructor(guildId: string) {\n    super(\n      `Guild with the id ${guildId} does not exist or is not using Cardinal System.`,\n    );\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(GuildDoesNotExistException)\nexport class GuildDoesNotExistExceptionFilter implements ExceptionFilter {\n  catch(exception: GuildDoesNotExistException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildMemberEvents.html":{"url":"injectables/GuildMemberEvents.html","title":"injectable - GuildMemberEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildMemberEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/guild-members/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addMember\n                            \n                            \n                                    \n                                    \n                                    Async\n                                checkIfPersonWasVerifiedBefore\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    \n                                    Async\n                                removeMember\n                            \n                            \n                                    \n                                    \n                                    Async\n                                unlockUser\n                            \n                            \n                                    \n                                    Async\n                                updateRank\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, guildUserService: GuildUserService, settingsService: GuildSettingsService, guildService: GuildService, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/guild-members/index.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(member: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberAdd')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        checkIfPersonWasVerifiedBefore\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfPersonWasVerifiedBefore(reaction: MessageReaction, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageReactionAdd')@UseGuards(undefined, undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:143\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                        MessageReaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeMember(member: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberRemove')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        unlockUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unlockUser(reaction: MessageReaction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageReactionAdd')@UseGuards(undefined, undefined, ReactedMemberIsModOrHigherGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                        MessageReaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateRank\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRank(oldMember: GuildMember, newMember: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberUpdate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldMember\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newMember\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GuildMemberEvents.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/guild-members/index.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, On } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger, UseGuards } from '@nestjs/common';\nimport { Rank } from '@prisma/client';\nimport {\n  Client,\n  GuildMember,\n  MessageReaction,\n  GuildTextBasedChannel,\n  Message,\n  User,\n} from 'discord.js';\nimport { ReactedMemberIsModOrHigherGuard } from 'src/bot/guards/member-is-mod-or-higher.guard';\nimport { ReactionChannelIdGuard } from 'src/bot/guards/reaction-in-channel.guard';\nimport { ReactionEmoteGuard } from 'src/bot/guards/reaction-emote.guard';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { JsonArray } from 'type-fest';\n\n@Injectable()\nexport class GuildMemberEvents {\n  logger = new Logger(GuildMemberEvents.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n    @Inject(GuildService) private readonly guildService: GuildService,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n\n  // Runs whenever the discordjs websocket gets recreated\n  @On('ready')\n  async onReady(): Promise {\n    await this.client.guilds.fetch();\n    this.client.guilds.cache.forEach(async (guild) => {\n      await this.guildService.upsertGuild(guild.id, {\n        name: guild.name,\n      });\n      this.guildUserService.addMembers(guild.id);\n    });\n  }\n\n  @On('guildMemberAdd')\n  async addMember(member: GuildMember) {\n    this.logger.log(`Adding member ${member.user.username} to database.`);\n    if (member.user.bot) return;\n    await this.guildUserService.addMember(member.id, member.guild.id, {\n      rank: Rank.NEW,\n      unlocked: false,\n    });\n  }\n\n  @On('guildMemberRemove')\n  async removeMember(member: GuildMember) {\n    await this.guildUserService.deleteOne(member.id, member.guild.id);\n  }\n\n  @On('messageReactionAdd')\n  @UseGuards(\n    ReactionChannelIdGuard('1121822614374060175'),\n\n    ReactionEmoteGuard(['✅', '☑️']),\n    ReactedMemberIsModOrHigherGuard,\n  )\n  async unlockUser(reaction: MessageReaction) {\n    if (reaction.partial) {\n      try {\n        await reaction.fetch();\n      } catch (e) {\n        this.logger.error(e);\n        return;\n      }\n    }\n    const user = await this.guildUserService.getGuildUser(\n      reaction.message.author.id,\n      reaction.message.guildId,\n    );\n    if (!user && user.rank !== Rank.NEW) return;\n    await this.guildUserService.upsert(user.userId, reaction.message.guildId, {\n      unlocked: true,\n      firstMessageId: reaction.message.id,\n    });\n    const member = await (\n      await this.client.guilds.fetch(reaction.message.guildId)\n    ).members.fetch(user.userId);\n    try {\n      if (!member.roles.cache.has('1226585753253843014'))\n        throw 'Has not accepted AGB';\n      const verifiedRoleId = await this.settingsService.getVerifiedMemberRoleId(\n        reaction.message.guildId,\n      );\n      await member.roles.add(verifiedRoleId);\n      if (reaction.emoji.name === '☑️')\n        await member.roles.add('1014066383912439809');\n      // Wait 500ms to make sure the role is added before removing the unverified role\n      //https://github.com/discordjs/discord.js/issues/4930#issuecomment-1042351896\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      await member.roles.remove(\n        await this.settingsService.getUnverifiedMemberRoleId(\n          reaction.message.guildId,\n        ),\n      );\n    } catch (e) {\n      this.logger.error(e);\n      return;\n    }\n    const channel = (await reaction.message.guild.channels.fetch(\n      await this.settingsService.getOpenIntroChannelId(\n        reaction.message.guildId,\n      ),\n    )) as GuildTextBasedChannel;\n    await channel.send(\n      await this.settingsService.templateMessage(\n        reaction.message as Message,\n      ),\n    );\n    await reaction.remove();\n  }\n\n  @On('guildMemberUpdate')\n  async updateRank(oldMember: GuildMember, newMember: GuildMember) {\n    // check if user has been promoted to mod or admin\n    const oldRank = await this.guildUserService.getRank(oldMember);\n    const newRank = await this.guildUserService.getRank(newMember);\n    if (oldRank === newRank) return;\n    this.logger.log(\n      `User ${newMember.user.username} has been promoted from ${oldRank} to ${newRank}`,\n    );\n    await this.guildUserService.upsert(newMember.id, newMember.guild.id, {\n      rank: newRank,\n    });\n  }\n\n  @On('messageReactionAdd')\n  @UseGuards(\n    ReactionChannelIdGuard('1226574989147508746'),\n    ReactionEmoteGuard(['👍']),\n  )\n  async checkIfPersonWasVerifiedBefore(reaction: MessageReaction, user: User) {\n    if (reaction.partial) {\n      try {\n        await reaction.fetch();\n      } catch (e) {\n        this.logger.error(e);\n        return;\n      }\n    }\n    const dbUser = await this.database.guildUser.findUnique({\n      where: {\n        guildId_userId: { guildId: reaction.message.guildId, userId: user.id },\n      },\n    });\n    const discordUser = await this.client.guilds.cache\n      .get(dbUser.guildId)\n      .members.fetch(user.id);\n    if (!dbUser && discordUser.roles.cache.has('1121823930085285938')) {\n      const roles = (\n        await this.database.lockdownRoleBackup.findUnique({\n          where: {\n            guildId_userId: { guildId: dbUser.guildId, userId: user.id },\n          },\n        })\n      ).roles as JsonArray;\n      if (!roles) return;\n      // Tyep system gets a bit iffy here :/\n      roles.forEach(\n        async (role: { id: string }) => await discordUser.roles.add(role.id),\n      );\n      await discordUser.roles.remove('1121823930085285938');\n      await this.database.lockdownRoleBackup.delete({\n        where: { guildId_userId: { userId: user.id, guildId: dbUser.guildId } },\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildMessageHandler.html":{"url":"injectables/GuildMessageHandler.html","title":"injectable - GuildMessageHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildMessageHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/message-create/guild-message/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                onMessage\n                            \n                            \n                                    \n                                    \n                                    Async\n                                toniMsgsToBird\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildUserService: GuildUserService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/message-create/guild-message/index.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageFromUserGuard, IsUserUnlockedGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/guild-message/index.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        toniMsgsToBird\n                        \n                    \n                \n            \n            \n                \n                        \n                    toniMsgsToBird(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageFromUserGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/guild-message/index.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { On } from '@discord-nestjs/core';\nimport { Inject, Injectable, UseGuards } from '@nestjs/common';\nimport { Attachment, GuildTextBasedChannel, Message } from 'discord.js';\nimport { MessageFromUserGuard } from 'src/bot/guards/message-from-user.guard';\nimport { IsUserUnlockedGuard } from 'src/bot/guards/user-is-unlocked.guard';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport getAttachmentType from 'src/util/functions/get-attachtment-type';\n\n@Injectable()\nexport default class GuildMessageHandler {\n  constructor(\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n  ) {}\n  @On('messageCreate')\n  @UseGuards(MessageFromUserGuard, IsUserUnlockedGuard)\n  async onMessage(message: Message): Promise {\n    await this.guildUserService.insertMessage(\n      {\n        userId: message.author.id,\n        messageId: message.id,\n        channelId: message.channelId,\n        guildId: message.guildId,\n        createdAt: new Date(message.createdTimestamp),\n      },\n      {\n        messageId: message.id,\n        length: message.content.length,\n      },\n      message.attachments.map((attachment: Attachment) => {\n        return {\n          type: getAttachmentType(attachment.contentType),\n          url: attachment.url,\n          messageId: message.id,\n        };\n      }),\n      message.reactions.cache.map((reaction) => {\n        return {\n          messageId: message.id,\n          emoji: reaction.emoji.toString(),\n          count: reaction.count,\n        };\n      }),\n    );\n    await this.guildUserService.updateMessageCountBucket(\n      message.author.id,\n      message.guildId,\n    );\n  }\n\n  @On('messageCreate')\n  @UseGuards(MessageFromUserGuard)\n  async toniMsgsToBird(message: Message): Promise {\n    const channel = message.channel as GuildTextBasedChannel;\n    if (\n      channel.parentId !== '1011529685357838376' &&\n      channel.parentId !== '1051979218164125826'\n    ) {\n      if (message.author.id === '1132244079242133555')\n        message.react('1194715694948946030');\n    }\n  }\n\n  // @On('messageCreate')\n  // @UseGuards(MessageFromUserGuard)\n  // async checkLimits(message: Message) {\n  //   const guildUser = this.guildUserService.getGuildUser(\n  //     message.author.id,\n  //     message.guildId,\n  //   );\n  //   const hasAttachments = message.attachments.size > 0;\n  //   const typeOfAttachments = message.attachments.map(\n  //     (attachment: Attachment) => {\n  //       return ({}[getAttachmentType(attachment.contentType)] = attachment);\n  //     },\n  //   );\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildModule.html":{"url":"modules/GuildModule.html","title":"module - GuildModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildModule\n\n\n\ncluster_GuildModule_imports\n\n\n\ncluster_GuildModule_exports\n\n\n\ncluster_GuildModule_providers\n\n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\n\n\nGuildModule\n\nGuildModule\n\nGuildModule -->\n\nGuildAutoDeleteChannelModule->GuildModule\n\n\n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildModule -->\n\nGuildRestrictedChannelModule->GuildModule\n\n\n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildModule -->\n\nGuildSettingsModule->GuildModule\n\n\n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildModule -->\n\nGuildUserModule->GuildModule\n\n\n\n\n\nModerationModule\n\nModerationModule\n\nGuildModule -->\n\nModerationModule->GuildModule\n\n\n\n\n\nGuildService \n\nGuildService \n\nGuildService  -->\n\nGuildModule->GuildService \n\n\n\n\n\nDmMessageHandler\n\nDmMessageHandler\n\nGuildModule -->\n\nDmMessageHandler->GuildModule\n\n\n\n\n\nGuildMemberEvents\n\nGuildMemberEvents\n\nGuildModule -->\n\nGuildMemberEvents->GuildModule\n\n\n\n\n\nGuildMessageHandler\n\nGuildMessageHandler\n\nGuildModule -->\n\nGuildMessageHandler->GuildModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildModule -->\n\nGuildRestrictedChannelService->GuildModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nGuildModule -->\n\nGuildService->GuildModule\n\n\n\n\n\nModRequestFlow\n\nModRequestFlow\n\nGuildModule -->\n\nModRequestFlow->GuildModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildModule -->\n\nPrismaService->GuildModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DmMessageHandler\n                        \n                        \n                            GuildMemberEvents\n                        \n                        \n                            GuildMessageHandler\n                        \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            ModRequestFlow\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GuildAutoDeleteChannelModule\n                        \n                        \n                            GuildRestrictedChannelModule\n                        \n                        \n                            GuildSettingsModule\n                        \n                        \n                            GuildUserModule\n                        \n                        \n                            ModerationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildController } from './guild.controller';\nimport { GuildService } from './guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildSettingsModule } from './guild-settings/guild-settings.module';\nimport { ModerationModule } from './moderation/moderation.module';\nimport { GuildUserModule } from './guild-user/guild-user.module';\nimport { GuildAutoDeleteChannelModule } from './guild-auto-delete-channel/guild-auto-delete-channel.module';\nimport { GuildRestrictedChannelModule } from './guild-restricted-channel/guild-restricted-channel.module';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel/guild-restricted-channel.service';\nimport GuildMessageHandler from './events/message-create/guild-message';\nimport { DmMessageHandler } from './events/message-create/dm-message';\nimport { ModRequestFlow } from './events/interaction-create/mod-request-menu';\nimport { GuildMemberEvents } from './events/guild-members';\n\n@Module({\n  imports: [\n    DiscordModule.forFeature(),\n    GuildUserModule,\n    GuildSettingsModule,\n    ModerationModule,\n    GuildAutoDeleteChannelModule,\n    GuildRestrictedChannelModule,\n  ],\n  controllers: [GuildController],\n  providers: [\n    GuildService,\n    PrismaService,\n    GuildRestrictedChannelService,\n    GuildMessageHandler,\n    DmMessageHandler,\n    ModRequestFlow,\n    GuildMemberEvents,\n  ],\n  exports: [GuildService],\n})\nexport class GuildModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildRestrictedChannelController.html":{"url":"controllers/GuildRestrictedChannelController.html","title":"controller - GuildRestrictedChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildRestrictedChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                guild-restricted-channel\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('guild-restricted-channel')\nexport class GuildRestrictedChannelController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildRestrictedChannelModule.html":{"url":"modules/GuildRestrictedChannelModule.html","title":"module - GuildRestrictedChannelModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildRestrictedChannelModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildRestrictedChannelModule\n\n\n\ncluster_GuildRestrictedChannelModule_providers\n\n\n\ncluster_GuildRestrictedChannelModule_exports\n\n\n\n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService \n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelService  -->\n\nGuildRestrictedChannelModule->GuildRestrictedChannelService \n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelModule -->\n\nGuildRestrictedChannelService->GuildRestrictedChannelModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildRestrictedChannelModule -->\n\nPrismaService->GuildRestrictedChannelModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildRestrictedChannelController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildRestrictedChannelController } from './guild-restricted-channel.controller';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  controllers: [GuildRestrictedChannelController],\n  providers: [GuildRestrictedChannelService, PrismaService],\n  exports: [GuildRestrictedChannelService],\n})\nexport class GuildRestrictedChannelModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildRestrictedChannelService.html":{"url":"injectables/GuildRestrictedChannelService.html","title":"injectable - GuildRestrictedChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildRestrictedChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getRestrictedChannel\n                            \n                            \n                                    Async\n                                isChannelAvailableToUser\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRestrictedChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRestrictedChannel(guildId: string, channelId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isChannelAvailableToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    isChannelAvailableToUser(user: GuildUser, channel: RestrictedChannels)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            GuildUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel\n                                            \n                                                            RestrictedChannels\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(guildId: string, channelId: string, data: Omit, guildId> | channelId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, guildId> | channelId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { GuildUser, RestrictedChannels } from '@prisma/client';\nimport { Client } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Injectable()\nexport class GuildRestrictedChannelService {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  async getRestrictedChannel(guildId: string, channelId: string) {\n    return this.database.restrictedChannels.findUnique({\n      where: {\n        guildId,\n        channelId,\n      },\n    });\n  }\n  async upsert(\n    guildId: string,\n    channelId: string,\n    data: Omit, 'guildId'>, 'channelId'>,\n  ) {\n    return this.database.restrictedChannels.upsert({\n      where: {\n        channelId,\n        guildId,\n      },\n      create: {\n        ...data,\n        channelId,\n        guildId,\n      },\n      update: {\n        ...data,\n        channelId,\n        guildId,\n      },\n    });\n  }\n  async getAll(guildId: string) {\n    return this.database.restrictedChannels.findMany({\n      where: {\n        guildId,\n      },\n    });\n  }\n\n  async isChannelAvailableToUser(user: GuildUser, channel: RestrictedChannels) {\n    return user.messageCountBucket >= channel.requiredPoints;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildService.html":{"url":"injectables/GuildService.html","title":"injectable - GuildService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _addMemberToChannelOverwrite\n                            \n                            \n                                    Private\n                                    Async\n                                _removeMemberFromChannelOverwrite\n                            \n                            \n                                    Async\n                                averageMessagesPerChannelLastMonth\n                            \n                            \n                                    Async\n                                averageMessagesPerDayLastMonth\n                            \n                            \n                                    Async\n                                cleanWfpMembers\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    Async\n                                updateChannelPermissions\n                            \n                            \n                                    Async\n                                upsertGuild\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, restrictedChannelService: GuildRestrictedChannelService, client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        restrictedChannelService\n                                                  \n                                                        \n                                                                        GuildRestrictedChannelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _addMemberToChannelOverwrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    _addMemberToChannelOverwrite(user_id: string, channel_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _removeMemberFromChannelOverwrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    _removeMemberFromChannelOverwrite(user_id: string, channel_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:229\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        averageMessagesPerChannelLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    averageMessagesPerChannelLastMonth(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Returns the average written messages per channel for last 30 days for the given guild.\nSQL:\n SELECT\n  m.channelId,\n  m.userId,\n  COUNT(m.messageId) AS messageCount,\n  AVG(subquery.messageCount) AS avgMessageCount\nFROM\n  Message m\nJOIN\n  (SELECT channelId, COUNT(messageId) / 30 AS messageCount\n  FROM Message\n  WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\n  GROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\nWHERE\n  m.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY\n  m.channelId, m.userId\nORDER BY\n avgMessageCount DESC;\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A map that contains each channel ID and the average written messages\nSQL:\nSELECT\nm.channelId,\nm.userId,\nCOUNT(m.messageId) AS messageCount,\nAVG(subquery.messageCount) AS avgMessageCount\nFROM\nMessage m\nJOIN\n(SELECT channelId, COUNT(messageId) / 30 AS messageCount\nFROM Message\nWHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\nGROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\nWHERE\nm.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY\nm.channelId, m.userId\nORDER BY\navgMessageCount DESC;\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        averageMessagesPerDayLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    averageMessagesPerDayLastMonth(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:165\n                        \n                    \n\n\n            \n                \n                        Returns the average written message per day in the last 30 days per channel\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanWfpMembers(guildID: string, dryRun: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                guildID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                dryRun\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Once('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:242\n                        \n                    \n\n\n            \n                \n                        Event handler that listens to the ready event which is fired when the bot websocket has been created.\nSets up all guilds in the database if they dont already exist there or updates them.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateChannelPermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateChannelPermissions(user: GuildUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            GuildUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsertGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsertGuild(guildId: string, data: Omit | id>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit | id>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, Once } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { Guild, GuildUser } from '@prisma/client';\nimport { Client, BaseGuildTextChannel, GuildMember } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel/guild-restricted-channel.service';\n\n@Injectable()\nexport class GuildService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(GuildRestrictedChannelService)\n    private restrictedChannelService: GuildRestrictedChannelService,\n    @InjectDiscordClient() private client: Client,\n  ) {}\n\n  async upsertGuild(guildId: string, data: Omit, 'id'>) {\n    return await this.database.guild.upsert({\n      where: {\n        id: guildId,\n      },\n      select: {\n        AuditLog: true,\n        Settings: true,\n        AutoDeleteChannels: true,\n        RestrictedChannels: true,\n        Limits: true,\n      },\n      create: {\n        id: guildId,\n        Settings: {\n          create: {},\n        },\n        ...data,\n      },\n      update: {\n        ...data,\n      },\n    });\n  }\n\n  async cleanWfpMembers(\n    guildID: string,\n    dryRun: boolean = false,\n  ): Promise>> {\n    const twoWeekDate = new Date(new Date().setDate(new Date().getDate() - 14));\n    const membersUnfiltered = (\n      await (\n        await this.client.guilds.fetch(guildID)\n      ).roles.fetch('1121823930085285938')\n    ).members;\n    const members: Array = [];\n    membersUnfiltered.forEach(async (member) => {\n      if (\n        twoWeekDate > new Date(member.joinedTimestamp) &&\n        // Has not VereinsMitglied\n        !member.roles.cache.has('1070116538083975309')\n      ) {\n        members.push(member);\n      }\n    });\n    // Return early if we are in a dry fun\n    if (dryRun)\n      return {\n        membersToKick: members,\n      };\n    const unkickableMembers: Array = [];\n    members.forEach(async (member) => {\n      try {\n        await member.kick(\n          'Kicked by the bot for being in wfp for more than 2 weeks',\n        );\n      } catch {\n        unkickableMembers.push(member);\n      }\n    });\n    return {\n      membersToKick: members,\n      unkickableMembers: unkickableMembers,\n    };\n  }\n\n  /**\n   * Returns the average written messages per channel for last 30 days for the given guild.\n   * @returns A map that contains each channel ID and the average written messages\n   *\n   * SQL:\n   *  SELECT\n   *   m.channelId,\n   *   m.userId,\n   *   COUNT(m.messageId) AS messageCount,\n   *   AVG(subquery.messageCount) AS avgMessageCount\n   * FROM\n   *   Message m\n   * JOIN\n   *   (SELECT channelId, COUNT(messageId) / 30 AS messageCount\n   *   FROM Message\n   *   WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\n   *   GROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\n   * WHERE\n   *   m.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\n   * GROUP BY\n   *   m.channelId, m.userId\n   * ORDER BY\n   *  avgMessageCount DESC;\n   */\n  async averageMessagesPerChannelLastMonth(\n    guildId: string,\n  ): Promise> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageStats = await this.database.messages.groupBy({\n      by: ['channelId', 'userId'],\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        AND: {\n          guildId: guildId,\n        },\n      },\n      _count: {\n        messageId: true,\n      },\n      orderBy: {\n        _count: {\n          messageId: 'desc',\n        },\n      },\n    });\n\n    const messageCounts: Record\n    > = messageStats.reduce((acc, curr) => {\n      const channelId = curr.channelId.toString();\n      const userId = curr.userId.toString();\n      const count = curr._count?.messageId ?? 0;\n\n      if (!acc[channelId]) {\n        acc[channelId] = {};\n      }\n\n      acc[channelId][userId] = count;\n\n      return acc;\n    }, {});\n\n    const avgMessageCounts = {};\n\n    for (const channelId in messageCounts) {\n      const userCounts = Object.values(messageCounts[channelId]);\n      const avgMessageCount =\n        userCounts.reduce((sum, count) => sum + count, 0) / userCounts.length;\n      avgMessageCounts[channelId] = avgMessageCount;\n    }\n\n    return avgMessageCounts;\n  }\n  /**\n   * Returns the average written message per day in the last 30 days per channel\n   * @param guildId string\n   * @returns\n   */\n  async averageMessagesPerDayLastMonth(\n    guildId: string,\n  ): Promise> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageStats = await this.database.messages.groupBy({\n      by: 'createdAt',\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        AND: {\n          guildId,\n        },\n      },\n      _count: {\n        messageId: true,\n      },\n    });\n    const messageCounts: Record = messageStats.reduce(\n      (acc, curr) => {\n        const date = curr.createdAt.toISOString().split('T')[0];\n        // sum up all the messages for that day and add it to the accumulator\n        acc[date] = (acc[date] ?? 0) + (curr._count?.messageId ?? 0);\n\n        return acc;\n      },\n      {},\n    );\n\n    return messageCounts;\n  }\n\n  async updateChannelPermissions(user: GuildUser) {\n    this.restrictedChannelService.getAll(user.guildId).then((channels) =>\n      channels.forEach((channel) =>\n        this.restrictedChannelService\n          .isChannelAvailableToUser(user, channel)\n          .then((isAvailable) => {\n            if (isAvailable)\n              this._removeMemberFromChannelOverwrite(\n                user.userId.toString(),\n                channel.channelId,\n              );\n            else\n              this._addMemberToChannelOverwrite(\n                user.userId.toString(),\n                channel.channelId,\n              );\n          }),\n      ),\n    );\n  }\n  private async _addMemberToChannelOverwrite(\n    user_id: string,\n    channel_id: string,\n  ) {\n    await (\n      (await this.client.channels.fetch(channel_id)) as BaseGuildTextChannel\n    ).permissionOverwrites.create(user_id, {\n      ViewChannel: false,\n      ReadMessageHistory: false,\n    });\n  }\n  private async _removeMemberFromChannelOverwrite(\n    user_id: string,\n    channel_id: string,\n  ) {\n    await (\n      (await this.client.channels.fetch(channel_id)) as BaseGuildTextChannel\n    ).permissionOverwrites.delete(user_id);\n  }\n  /**\n   * Event handler that listens to the ready event which is fired when the bot websocket has been created.\n   * Sets up all guilds in the database if they dont already exist there or updates them.\n   */\n  @Once('ready')\n  async onReady() {\n    const guilds = await this.client.guilds.fetch();\n    guilds.forEach(async (guild) => {\n      this.upsertGuild(guild.id, {\n        name: guild.name,\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildSettingsController.html":{"url":"controllers/GuildSettingsController.html","title":"controller - GuildSettingsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildSettingsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSettings\n                            \n                            \n                                    \n                                    \n                                    Async\n                                putSettings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSettings(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        putSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    putSettings(guildId: string, body: SettingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatusCode.Accepted)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            SettingsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Param,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../../auth/jwt/guards/jwt-auth.guard';\nimport { SettingsDto } from './dto/settings.dto';\nimport { GuildSettingsService } from './guild-settings.service';\nimport { plainToInstance } from '../../util/functions/plain-to-instance';\nimport { HttpStatusCode } from 'axios';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { Rank } from '@prisma/client';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller()\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class GuildSettingsController {\n  constructor(private readonly settingsService: GuildSettingsService) {}\n\n  @Get()\n  async getSettings(@Param('guildId') guildId: string): Promise {\n    const settings = await this.settingsService.getSettings(guildId);\n    return plainToInstance(SettingsDto, settings);\n  }\n\n  @Put()\n  @HttpCode(HttpStatusCode.Accepted)\n  async putSettings(\n    @Param('guildId') guildId: string,\n    @Body() body: SettingsDto,\n  ) {\n    await this.settingsService.editSettings(guildId, body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildSettingsModule.html":{"url":"modules/GuildSettingsModule.html","title":"module - GuildSettingsModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildSettingsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildSettingsModule\n\n\n\ncluster_GuildSettingsModule_providers\n\n\n\ncluster_GuildSettingsModule_exports\n\n\n\n\nGuildSettingsService \n\nGuildSettingsService \n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildSettingsService  -->\n\nGuildSettingsModule->GuildSettingsService \n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildSettingsModule -->\n\nGuildSettingsService->GuildSettingsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildSettingsModule -->\n\nPrismaService->GuildSettingsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildSettingsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildSettingsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildSettingsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildSettingsService } from './guild-settings.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsController } from './guild-settings.controller';\n\n@Module({\n  providers: [GuildSettingsService, PrismaService],\n  controllers: [GuildSettingsController],\n  exports: [GuildSettingsService],\n})\nexport class GuildSettingsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildSettingsService.html":{"url":"injectables/GuildSettingsService.html","title":"injectable - GuildSettingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildSettingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editSettings\n                            \n                            \n                                    Async\n                                getAdminRoleId\n                            \n                            \n                                    Async\n                                getIntroChannelId\n                            \n                            \n                                    Async\n                                getModChannelId\n                            \n                            \n                                    Async\n                                getModRoleId\n                            \n                            \n                                    Async\n                                getOpenIntroChannelId\n                            \n                            \n                                    Async\n                                getSettings\n                            \n                            \n                                    Async\n                                getUnverifiedMemberRoleId\n                            \n                            \n                                    Async\n                                getVerifiedMemberRoleId\n                            \n                            \n                                    Async\n                                getWelcomeMessageFormat\n                            \n                            \n                                    Async\n                                templateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-settings/guild-settings.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    editSettings(guildId: string, settings: Partial>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                settings\n                                            \n                                                        Partial>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAdminRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdminRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIntroChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntroChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getModChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getModChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getModRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getModRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOpenIntroChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOpenIntroChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSettings(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUnverifiedMemberRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUnverifiedMemberRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVerifiedMemberRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVerifiedMemberRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getWelcomeMessageFormat\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWelcomeMessageFormat(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        templateMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    templateMessage(message: Message)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { Settings } from '@prisma/client';\nimport { GuildDoesNotExistException } from '../../util/exception/guild-does-not-exist-exception';\nimport { omit } from 'rambda/immutable';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { SettingsChanged } from './events/settings-role-id-changed.event';\nimport { Message, userMention, quote } from 'discord.js';\n\n@Injectable()\nexport class GuildSettingsService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(EventEmitter2) private eventEmitter: EventEmitter2,\n  ) {}\n  async editSettings(\n    guildId: string,\n    settings: Partial>,\n  ) {\n    Object.keys(settings).forEach(async (key) => {\n      if (key.endsWith('RoleId')) {\n        await this.eventEmitter.emitAsync(\n          `settings.role.${key}.changed`,\n          new SettingsChanged(guildId, settings[key], key as keyof Settings),\n        );\n      }\n    });\n    await this.database.settings.update({ where: { guildId }, data: settings });\n  }\n\n  async getSettings(guildId: string) {\n    const settings = await this.database.settings.findUnique({\n      where: { guildId: guildId },\n    });\n    if (!settings) {\n      throw new GuildDoesNotExistException(guildId);\n    }\n    return omit(['guildId'], settings);\n  }\n\n  async getVerifiedMemberRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.verifiedMemberRoleId);\n  }\n\n  async getUnverifiedMemberRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.unverifiedMemberRoleId);\n  }\n\n  async getModRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.modRoleId);\n  }\n\n  async getAdminRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.adminRoleId);\n  }\n\n  async getWelcomeMessageFormat(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.welcomeMessageFormat);\n  }\n\n  async getOpenIntroChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.openIntroChannelId);\n  }\n\n  async getIntroChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.introChannelId);\n  }\n  async getModChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.modChannelId);\n  }\n  async templateMessage(message: Message): Promise {\n    // template message using the template string provided in the settings\n    const template = await this.getWelcomeMessageFormat(message.guildId);\n    // Usable variables:\n    // ${user} - username\n    // ${message} - message content\n    const quotedMessage = message.content\n      .split('\\n')\n      .map((it) => quote(it))\n      .join('\\n');\n    return template\n      .replace('{user}', userMention(message.author.id))\n      .replace('{message}', `\\n\\n${quotedMessage}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildUserController.html":{"url":"controllers/GuildUserController.html","title":"controller - GuildUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(userId: string, guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('self')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Controller, Get, Inject, Param, UseGuards } from '@nestjs/common';\nimport { plainToInstance } from 'class-transformer';\nimport { Client } from 'discord.js';\nimport { SelfDto } from 'src/guild/guild-user/dto/self.dto';\nimport { RequestUser } from 'src/util/decorators/request-user.decorator';\nimport { GuildUserService } from './guild-user.service';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\n\n@Controller()\n@UseGuards(JwtAuthGuard)\nexport class GuildUserController {\n  constructor(\n    @Inject(GuildUserService) private readonly userService: GuildUserService,\n    @InjectDiscordClient() private readonly client: Client,\n  ) {}\n\n  @Get('self')\n  async getSelf(\n    @RequestUser() userId: string,\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const [{ rank }, { avatarUrl, name, guildName }] = await Promise.all([\n      this.userService.getGuildUser(userId, guildId),\n      this.client.guilds\n        .fetch(guildId)\n        .then((it) => it.members.fetch(userId))\n        .then((it) => ({\n          avatarUrl: it.avatarURL({ size: 128 }),\n          name: it.displayName,\n          guildName: it.guild.name,\n        })),\n    ]);\n    return plainToInstance(SelfDto, {\n      userId,\n      guildId,\n      avatarUrl,\n      name,\n      rank,\n      guildName,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildUserModule.html":{"url":"modules/GuildUserModule.html","title":"module - GuildUserModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildUserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildUserModule\n\n\n\ncluster_GuildUserModule_providers\n\n\n\ncluster_GuildUserModule_exports\n\n\n\n\nGuildUserService \n\nGuildUserService \n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildUserService  -->\n\nGuildUserModule->GuildUserService \n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildUserModule -->\n\nGuildSettingsService->GuildUserModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nGuildUserModule -->\n\nGuildUserService->GuildUserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildUserModule -->\n\nPrismaService->GuildUserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildUserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildUserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildUserController } from './guild-user.controller';\nimport { GuildUserService } from './guild-user.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  controllers: [GuildUserController],\n  providers: [GuildUserService, PrismaService, GuildSettingsService],\n  exports: [GuildUserService],\n})\nexport class GuildUserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildUserService.html":{"url":"injectables/GuildUserService.html","title":"injectable - GuildUserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildUserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _isMemberAdmin\n                            \n                            \n                                    Private\n                                    Async\n                                _isMemberMod\n                            \n                            \n                                    Private\n                                    Async\n                                _isMemberVerified\n                            \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                addMembers\n                            \n                            \n                                    Async\n                                deleteOne\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getGuildUser\n                            \n                            \n                                    Async\n                                getRank\n                            \n                            \n                                    Async\n                                insertMessage\n                            \n                            \n                                    Async\n                                isActive\n                            \n                            \n                                    \n                                    Async\n                                onAdminRoleIdChanged\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    Async\n                                updateMessageCountBucket\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, client: Client, settings: GuildSettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-user/guild-user.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        settings\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberAdmin(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:197\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberMod\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberMod(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberVerified\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberVerified(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(userId: string, guildId: string, data: Omit, userId> | guildId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, userId> | guildId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMembers(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteOne(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(guildId: string | undefined, userId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                        \n                                                userId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getGuildUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUser(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRank\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRank(member: GuildMember)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        insertMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertMessage(data: Messages, metadata: MessageMetadata, attachments: Omit[], reactions: Omit[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Messages\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        MessageMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                attachments\n                                            \n                                                        Omit[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reactions\n                                            \n                                                        Omit[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    isActive(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onAdminRoleIdChanged\n                        \n                    \n                \n            \n            \n                \n                        \n                    onAdminRoleIdChanged(payload: SettingsChanged)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('settings.role.*.changed')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            SettingsChanged\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Once('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateMessageCountBucket\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMessageCountBucket(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(userId: string, guildId: string, data: Omit, userId> | guildId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, userId> | guildId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, Once } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport {\n  Attachment,\n  GuildUser,\n  MessageMetadata,\n  Messages,\n  Rank,\n  Reaction,\n} from '@prisma/client';\nimport { Client, GuildMember } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\nimport { SettingsChanged } from '../guild-settings/events/settings-role-id-changed.event';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class GuildUserService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @InjectDiscordClient() private client: Client,\n    @Inject(GuildSettingsService) private settings: GuildSettingsService,\n  ) {}\n\n  @Once('ready')\n  async onReady() {\n    const guilds = await this.client.guilds.fetch();\n    guilds.forEach(async (guild) => {\n      await this.addMembers(guild.id);\n    });\n  }\n\n  async getGuildUser(\n    userId: string,\n    guildId: string,\n  ): Promise {\n    return this.database.guildUser.findUnique({\n      where: { guildId_userId: { userId, guildId } },\n    });\n  }\n\n  async upsert(\n    userId: string,\n    guildId: string,\n    data: Omit, 'userId'>, 'guildId'>,\n  ): Promise {\n    return await this.database.guildUser.upsert({\n      where: { guildId_userId: { userId, guildId } },\n      create: { ...data, userId, guildId },\n      update: { ...data, userId, guildId },\n    });\n  }\n\n  async insertMessage(\n    data: Messages,\n    metadata: MessageMetadata,\n    attachments: Omit[],\n    reactions: Omit[],\n  ): Promise {\n    await this.database.messageMetadata.create({\n      data: {\n        ...metadata,\n      },\n    });\n    await this.database.attachment.createMany({\n      data: attachments,\n    });\n    await this.database.reaction.createMany({\n      data: reactions,\n    });\n    await this.database.messages.create({\n      data: {\n        ...data,\n      },\n    });\n  }\n\n  async deleteOne(userId: string, guildId: string): Promise {\n    const users = await this.database.guildUser.findMany({\n      where: { userId },\n    });\n    await this.database.guildUser.delete({\n      where: { guildId_userId: { userId, guildId } },\n    });\n    if (users.length === 1) {\n      await this.database.user.delete({ where: { userId } });\n    }\n  }\n  async findAll(\n    guildId: string | undefined = undefined,\n    userId: string | undefined = undefined,\n  ): Promise> {\n    const users = await this.database.guildUser.findMany({\n      where: { OR: [{ userId }, { guildId }] },\n    });\n    if (!users) return [];\n    return users;\n  }\n\n  async updateMessageCountBucket(\n    userId: string,\n    guildId: string,\n  ): Promise {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageCount = await this.database.messages.count({\n      where: {\n        AND: {\n          userId,\n          guildId,\n        },\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n      },\n    });\n    await this.database.guildUser.update({\n      where: { guildId_userId: { userId, guildId } },\n      data: { messageCountBucket: messageCount },\n    });\n  }\n  async isActive(userId: string, guildId: string): Promise {\n    return (\n      (\n        await this.database.guildUser.findUnique({\n          where: {\n            guildId_userId: {\n              userId,\n              guildId,\n            },\n          },\n        })\n      ).messageCountBucket >= 30\n    );\n  }\n\n  async getRank(member: GuildMember): Promise {\n    if (member.guild.ownerId === member.id) {\n      return 'OWNER';\n    } else if (await this._isMemberAdmin(member.id, member.guild.id)) {\n      return 'ADMIN';\n    } else if (await this._isMemberMod(member.id, member.guild.id)) {\n      return 'MOD';\n    } else if (await this._isMemberVerified(member.id, member.guild.id)) {\n      return 'MEMBER';\n    } else {\n      return 'NEW';\n    }\n  }\n  async addMembers(guildId: string) {\n    const guild = await this.client.guilds.fetch(guildId);\n    const members = await guild.members.fetch();\n    members.forEach(async (member: GuildMember) => {\n      if (!member.user.bot) {\n        const rank = await this.getRank(member);\n        await this.addMember(member.id, member.guild.id, {\n          rank: rank,\n          unlocked: rank !== 'NEW',\n        });\n      }\n    });\n  }\n  async addMember(\n    userId: string,\n    guildId: string,\n    data: Omit, 'userId'>, 'guildId'>,\n  ) {\n    await this.database.user.upsert({\n      where: { userId },\n      create: { userId },\n      update: { userId },\n    });\n    await this.upsert(userId, guildId, data);\n  }\n\n  @OnEvent('settings.role.*.changed')\n  async onAdminRoleIdChanged(payload: SettingsChanged) {\n    await this.addMembers(payload.guildId);\n  }\n\n  private async _isMemberVerified(user_id: string, guild_id: string) {\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has(\n      (await this.settings.getVerifiedMemberRoleId(guild_id)).toString(),\n    );\n  }\n\n  private async _isMemberMod(\n    user_id: string,\n    guild_id: string,\n  ): Promise {\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has((await this.settings.getModRoleId(guild_id)).toString());\n  }\n  private async _isMemberAdmin(\n    user_id: string,\n    guild_id: string,\n  ): Promise {\n    if (user_id == '322822954796974080') return true;\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has(\n      (await this.settings.getAdminRoleId(guild_id)).toString(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/HasRequiredRank.html":{"url":"guards/HasRequiredRank.html","title":"guard - HasRequiredRank","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    HasRequiredRank\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/util/guards/has-required-rank.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    This guard can be used to guard routes/controller(HTTP ONLY NOT COMMANDS) with specific RANK(s)\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/util/guards/has-required-rank.guard.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/guards/has-required-rank.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Function to check if the current user has the required rank to perform the current action.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ExecutionContext see nestjs documentation\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { Reflector } from '@nestjs/core';\nimport { REQUIRED_RANK_KEY } from '../decorators/requires-rank.decorator';\nimport { PrismaService } from 'src/prisma.service';\nimport { Rank } from '@prisma/client';\n\n/**\n * This guard can be used to guard routes/controller(HTTP ONLY NOT COMMANDS) with specific RANK(s)\n */\n@Injectable()\nexport class HasRequiredRank implements CanActivate {\n  private readonly logger = new Logger(HasRequiredRank.name);\n\n  constructor(\n    @Inject(Reflector)\n    private reflector: Reflector,\n    @Inject(PrismaService) private prismaService: PrismaService,\n  ) {}\n  /**\n   * Function to check if the current user has the required rank to perform the current action.\n   * @param context ExecutionContext see nestjs documentation\n   * @returns boolean\n   */\n  async canActivate(context: ExecutionContext) {\n    const requiredRank = this.reflector.getAllAndOverride(\n      REQUIRED_RANK_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    const req = context\n      .switchToHttp()\n      .getRequest();\n    const userId = req.user.userId;\n    if (!userId) throw new UnauthorizedException();\n    const user = await this.prismaService.guildUser.findUnique({\n      where: { guildId_userId: { userId, guildId: req.params.guildId } },\n    });\n    if (!user) throw new ForbiddenException();\n    if (!requiredRank) {\n      return true;\n    }\n\n    const ownedRanks = [user.rank, ...InheritedRanks[user.rank]];\n    return ownedRanks.includes(requiredRank);\n  }\n}\n\n/**\n * Map of ranks that are inherited by any given rank,\n * meaning their lower ranks e.g MOD has MEMBER.\n * But MEMBER has 0 since its the lowest rank a member can have.\n */\nconst InheritedRanks: Record = {\n  OWNER: ['ADMIN', 'MOD', 'MEMBER'],\n  ADMIN: ['MOD', 'MEMBER'],\n  MOD: ['MEMBER'],\n  MEMBER: [],\n  NEW: [],\n};\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsModalInteractionGuard.html":{"url":"guards/IsModalInteractionGuard.html","title":"guard - IsModalInteractionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsModalInteractionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/is-modal-interaction.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/is-modal-interaction.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { InteractionType } from 'discord.js';\n\nexport class IsModalInteractionGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const interaction = context.getArgByIndex(0);\n\n    return interaction.type === InteractionType.ModalSubmit;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsUserUnlockedGuard.html":{"url":"guards/IsUserUnlockedGuard.html","title":"guard - IsUserUnlockedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsUserUnlockedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(settingsService: GuildSettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/guards/user-is-unlocked.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: DiscordExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/user-is-unlocked.guard.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            DiscordExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { Message } from 'discord.js';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\n\ninterface DiscordExecutionContext extends ExecutionContext {\n  getMessage(): Message;\n}\n@Injectable()\nexport class IsUserUnlockedGuard implements CanActivate {\n  constructor(\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n  ) {}\n  async canActivate(context: DiscordExecutionContext): Promise {\n    const message: Message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return message.member.roles.cache.has(\n      await this.settingsService.getVerifiedMemberRoleId(message.guildId),\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/JwtAuthController.html":{"url":"controllers/JwtAuthController.html","title":"controller - JwtAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  JwtAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshJwtGuard)@ApiHeader({name: 'refresh_token', description: ''})@Post('refresh')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Get,\n  Logger,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { RefreshJwtGuard } from './guards/refresh-auth.guard';\nimport { ApiBearerAuth, ApiHeader, ApiTags } from '@nestjs/swagger';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller('auth')\n@ApiTags('auth/jwt')\n@ApiBearerAuth()\nexport class JwtAuthController {\n  private readonly logger = new Logger(JwtAuthController.name);\n\n  constructor(\n    private authService: JwtAuthService,\n    private http: HttpService,\n    private configService: ConfigService,\n  ) {}\n\n  @UseGuards(RefreshJwtGuard)\n  @ApiHeader({\n    name: 'refresh_token',\n    description: '',\n  })\n  @Post('refresh')\n  async refreshToken(@Req() req) {\n    return this.authService.refreshToken(req.user);\n  }\n\n  @Get('login')\n  async login(@Query('code') code: string) {\n    if (!code) {\n      throw new BadRequestException('No code provided');\n    }\n\n    return this.authService.login(await this.authService.getUserFromCode(code));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JwtAuthModule.html":{"url":"modules/JwtAuthModule.html","title":"module - JwtAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    JwtAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JwtAuthModule\n\n\n\ncluster_JwtAuthModule_exports\n\n\n\ncluster_JwtAuthModule_providers\n\n\n\n\nJwtAuthService \n\nJwtAuthService \n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nJwtAuthService  -->\n\nJwtAuthModule->JwtAuthService \n\n\n\n\n\nJwtAuthService\n\nJwtAuthService\n\nJwtAuthModule -->\n\nJwtAuthService->JwtAuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nJwtAuthModule -->\n\nJwtAuthStrategy->JwtAuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nJwtAuthModule -->\n\nPrismaService->JwtAuthModule\n\n\n\n\n\nRefreshJwtStrategy\n\nRefreshJwtStrategy\n\nJwtAuthModule -->\n\nRefreshJwtStrategy->JwtAuthModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nJwtAuthModule -->\n\nSelfService->JwtAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthService\n                        \n                        \n                            JwtAuthStrategy\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RefreshJwtStrategy\n                        \n                        \n                            SelfService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            JwtAuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { JwtAuthStrategy } from './jwt-auth.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtAuthController } from './jwt-auth.controller';\nimport { RefreshJwtStrategy } from './refresh-token.strategy';\nimport { HttpModule } from '@nestjs/axios';\nimport { PrismaService } from 'src/prisma.service';\nimport { SelfService } from 'src/user/self.service';\nimport { DiscordModule } from '@discord-nestjs/core';\n\n@Module({\n  imports: [\n    DiscordModule.forFeature(),\n    PassportModule,\n    HttpModule,\n    JwtModule.register({\n      secret: 'jwtConstants.secret',\n      signOptions: { expiresIn: '900s' },\n    }),\n  ],\n  controllers: [JwtAuthController],\n  providers: [\n    JwtAuthStrategy,\n    RefreshJwtStrategy,\n    JwtAuthService,\n    PrismaService,\n    SelfService,\n  ],\n  exports: [JwtAuthService],\n})\nexport class JwtAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthService.html":{"url":"injectables/JwtAuthService.html","title":"injectable - JwtAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserFromCode\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, usersService: SelfService, http: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt-auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        SelfService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFromCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFromCode(code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(JwtAuthService.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/jwt/jwt-auth.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { AxiosError } from 'axios';\nimport { OAuthErrorData } from 'discord.js';\nimport { firstValueFrom, catchError } from 'rxjs';\nimport { SelfService } from 'src/user/self.service';\n\n@Injectable()\nexport class JwtAuthService {\n  private readonly logger = new Logger(JwtAuthService.name);\n\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private readonly usersService: SelfService,\n    private http: HttpService,\n  ) {}\n\n  async login(userId: string) {\n    const payload = {\n      sub: {\n        userId,\n      },\n    };\n    return {\n      user: {\n        user_id: userId,\n      },\n      accessToken: this.jwtService.sign(payload, {\n        secret: this.configService.get('JWT_ACCESS_SECRET'),\n        issuer: this.configService.get('JWT_ISSUER'),\n        algorithm: 'HS256',\n      }),\n      refreshToken: this.jwtService.sign(payload, {\n        expiresIn: this.configService.get('JWT_REFRESH_EXPIRATION'),\n        secret: this.configService.get('JWT_REFRESH_SECRET'),\n        issuer: this.configService.get('JWT_ISSUER'),\n        algorithm: 'HS256',\n      }),\n    };\n  }\n\n  async refreshToken(userId: string) {\n    const payload = {\n      sub: {\n        userId,\n      },\n    };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  async validateUser(userId: string): Promise {\n    const user = await this.usersService.fetchSelf(userId);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user.userId;\n  }\n\n  async getUserFromCode(code: string): Promise {\n    const response = await firstValueFrom(\n      this.http\n        .post(\n          'https://discordapp.com/api/oauth2/token',\n          new URLSearchParams({\n            client_id: this.configService.get('DISCORD_OAUTH_CLIENT_ID'),\n            client_secret: this.configService.get('DISCORD_OAUTH_SECRET'),\n            code: code,\n            grant_type: 'authorization_code',\n            redirect_uri: this.configService.get('DISCORD_CALLBACK_URL'),\n            scope: 'identify',\n          }),\n          {\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n          },\n        )\n        .pipe(\n          catchError((error: AxiosError) => {\n            this.logger.warn(\n              'OAuth token call to Discord failed: ' +\n                JSON.stringify(error.response.data),\n            );\n            if (error.response.data.error === 'invalid_grant') {\n              this.logger.warn(\n                'Is the user trying to log in not member of the guild?',\n              );\n            }\n            throw new UnauthorizedException();\n          }),\n        ),\n    );\n    const { data } = await firstValueFrom(\n      this.http\n        .get('https://discordapp.com/api/users/@me', {\n          headers: { Authorization: `Bearer ${response.data.access_token}` },\n        })\n        .pipe(\n          catchError((error: AxiosError) => {\n            throw `Error: ${error.message} `;\n          }),\n        ),\n    );\n    return this.validateUser(data.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthStrategy.html":{"url":"injectables/JwtAuthStrategy.html","title":"injectable - JwtAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt-auth.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_ACCESS_SECRET'),\n      issuer: configService.get('JWT_ISSUER'),\n    });\n  }\n\n  async validate(payload: any) {\n    return payload.sub;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogEntry.html":{"url":"classes/LogEntry.html","title":"class - LogEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/dto/log.entry.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for LogEntries\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                action\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                extraInfo\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                invokerId\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                            \n                                    \n                                    \n                                targetId\n                            \n                            \n                                    \n                                    \n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The action that was performed'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@ApiProperty({type: Date, description: 'The date when the event occurred'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        extraInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'Contains the involved object, if its an update event it contains the old object as well as the new object und old/new key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The guild id where the event occurred'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        invokerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The user id of the invoker'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The reason for the action, most likely just a different wording of action'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the target, can be one of:         message id,         channel id,         role id,         guild id,         user id,         invite code         or a webhook id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'Describe the type of the target id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:97\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsOptional, IsString } from 'class-validator';\n\n/**\n * All possible actions that can occur\n */\nexport const actions = [\n  'USER_JOINED',\n  'WARN',\n  'ERROR',\n  'USER_LEFT',\n  'USER_BANNED',\n  'USER_UNBANNED',\n  'USER_UPDATED',\n  'GUILD_UPDATED',\n  'INVALID_REQUEST',\n  'INVITE_CREATED',\n  'INVITE_DELETED',\n  'MESSAGE_DELETED',\n  'REACTION_ADDED',\n  'REACTION_REMOVED',\n  'ROLE_CREATED',\n  'ROLE_DELETED',\n  'ROLE_UPDATED',\n  'CHANNEL_CREATED',\n  'CHANNEL_DELETED',\n  'CHANNEL_UPDATED',\n  'WEBHOOKS_UPDATED',\n  'TIMEOUT_EXPIRED',\n  'TIMEOUT',\n  'KICK',\n  'BAN',\n] as const;\nexport type Action = (typeof actions)[number];\n\n/**\n * List of the targets an event can have\n */\nexport const targetTypes = [\n  'ERROR',\n  'WARN',\n  'USER',\n  'GUILD',\n  'INVALID_REQUEST',\n  'INVITE',\n  'MESSAGE',\n  'ROLE',\n  'CHANNEL',\n] as const;\nexport type TargetType = (typeof targetTypes)[number];\n\n/**\n * Data transfer object for LogEntries\n */\nexport default class LogEntry {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild id where the event occurred',\n  })\n  guildId: string;\n  @IsString()\n  @ApiProperty({ type: String, description: 'The user id of the invoker' })\n  invokerId: string;\n  @IsString()\n  @ApiProperty({ type: String, description: 'The action that was performed' })\n  action: Action;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description:\n      'The reason for the action, most likely just a different wording of action',\n  })\n  reason: string;\n  @IsDate()\n  @ApiProperty({ type: Date, description: 'The date when the event occurred' })\n  createdAt: Date;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description:\n      'The id of the target, can be one of: \\\n        message id, \\\n        channel id, \\\n        role id, \\\n        guild id, \\\n        user id, \\\n        invite code \\\n        or a webhook id',\n  })\n  targetId: string;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'Describe the type of the target id',\n  })\n  targetType: TargetType;\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description:\n      'Contains the involved object, if its an update event it contains the old object as well as the new object und old/new key',\n  })\n  extraInfo?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogEntryDto.html":{"url":"classes/LogEntryDto.html","title":"class - LogEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/dto/log-entry.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                action\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                invokerId\n                            \n                            \n                                    \n                                reason\n                            \n                            \n                                    \n                                targetId\n                            \n                            \n                                    \n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', enum: actions})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        invokerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', enum: targetTypes})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import LogEntry, {\n  Action,\n  actions,\n  TargetType,\n  targetTypes,\n} from '../../util/dto/log.entry.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LogEntryDto implements Omit {\n  @ApiProperty({ type: 'string', enum: actions })\n  action: Action;\n  @ApiProperty({ type: 'string', format: 'date-time' })\n  createdAt: Date;\n  @ApiProperty({ type: 'string' })\n  invokerId: string;\n  @ApiProperty({ type: 'string' })\n  reason: string;\n  @ApiProperty({ type: 'string' })\n  targetId: string;\n  @ApiProperty({ type: 'string', enum: targetTypes })\n  targetType: TargetType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MessageFromUserGuard.html":{"url":"guards/MessageFromUserGuard.html","title":"guard - MessageFromUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MessageFromUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/message-from-user.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/message-from-user.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Message } from 'discord.js';\n\nexport class MessageFromUserGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return !message.author.bot;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MessageIsDmGuard.html":{"url":"guards/MessageIsDmGuard.html","title":"guard - MessageIsDmGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MessageIsDmGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/message-is-dm.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/message-is-dm.guard.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\nimport { Message } from 'discord.js';\n\n@Injectable()\nexport class MessageIsDmGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const message = context.getArgByIndex(0);\n    if (\n      message instanceof Message &&\n      !(message as Message).inGuild() &&\n      !message.author.bot\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ModAnnouncementDto.html":{"url":"classes/ModAnnouncementDto.html","title":"class - ModAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ModAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/mod-anouncement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                replyToMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The message to send', descriptionLocalizations: undefined, type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/mod-anouncement.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        replyToMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({name: 'replyto', description: 'Message ID to which the bot should reply(optional)', type: undefined, required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/mod-anouncement.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ModAnnouncementDto {\n  @Param({\n    description: 'The message to send',\n    descriptionLocalizations: {\n      'en-US': 'The message to send',\n      de: 'Die Nachricht die gesendet werden soll',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  message: string;\n\n  @Param({\n    name: 'replyto',\n    description: 'Message ID to which the bot should reply(optional)',\n    type: ParamType.STRING,\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  replyToMessage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ModRequestFlow.html":{"url":"injectables/ModRequestFlow.html","title":"injectable - ModRequestFlow","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ModRequestFlow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/interaction-create/mod-request-menu/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getGuildIdFromSelectMenu\n                            \n                            \n                                    Async\n                                initiateModRequestFlow\n                            \n                            \n                                    \n                                    Async\n                                onButtonCloseTicket\n                            \n                            \n                                    \n                                    Async\n                                onButtonNeedHelpButton\n                            \n                            \n                                    \n                                    Async\n                                onMenuSelect\n                            \n                            \n                                    \n                                    Async\n                                onModalSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, guildUserService: GuildUserService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _getGuildIdFromSelectMenu\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getGuildIdFromSelectMenu(interaction: ButtonInteraction, guilds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:227\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guilds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initiateModRequestFlow\n                        \n                    \n                \n            \n            \n                \n                        \n                    initiateModRequestFlow(interaction: ButtonInteraction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:201\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonCloseTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonCloseTicket(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonNeedHelpButton\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonNeedHelpButton(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:192\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMenuSelect\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMenuSelect(interaction: StringSelectMenuInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        StringSelectMenuInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onModalSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModalSubmit(interaction: ModalSubmitInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ModalSubmitInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ModRequestFlow.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:34\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, On } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { BinaryToTextEncoding, createHash } from 'crypto';\nimport {\n  ModalSubmitInteraction,\n  EmbedBuilder,\n  userMention,\n  StringSelectMenuInteraction,\n  ModalBuilder,\n  ActionRowBuilder,\n  ModalActionRowComponentBuilder,\n  TextInputBuilder,\n  TextInputStyle,\n  ButtonInteraction,\n  StringSelectMenuBuilder,\n  ComponentType,\n  Client,\n  ChannelType,\n  PermissionFlagsBits,\n  ButtonBuilder,\n  ButtonStyle,\n  BaseGuildTextChannel,\n} from 'discord.js';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { PrismaService } from 'src/prisma.service';\nimport {\n  modRequestCategorySelect,\n  modRequestMenuId,\n  needHelpButtonId,\n  selectGuildMenu,\n} from 'src/util/functions/menu-helper';\n@Injectable()\nexport class ModRequestFlow {\n  logger = new Logger(ModRequestFlow.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n    @Inject(PrismaService) readonly prismaService: PrismaService,\n  ) {}\n\n  @On('interactionCreate')\n  async onModalSubmit(interaction: ModalSubmitInteraction) {\n    if (!interaction.isModalSubmit()) return;\n    const [modal, guildId, categoryId] = interaction.customId.split('-');\n    if (modal != 'modRequestModal') return;\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = await guild.channels.create({\n      name: `Ticket-${createHash('sha256')\n        .update(\n          JSON.stringify(\n            interaction.user.displayName + new Date().getUTCDate(),\n          ),\n          'utf8',\n        )\n        .digest('hex' as BinaryToTextEncoding)\n        .slice(0, 63)}`,\n      reason: `${userMention(interaction.user.id)} created a ticket`,\n      type: ChannelType.GuildText,\n      parent: '1011532621412577350',\n      permissionOverwrites: [\n        {\n          id: '1011511871297302608',\n          deny: [PermissionFlagsBits.ViewChannel],\n        },\n        {\n          id: interaction.user.id,\n          allow: [\n            PermissionFlagsBits.ViewChannel,\n            PermissionFlagsBits.SendMessages,\n            PermissionFlagsBits.ReadMessageHistory,\n            PermissionFlagsBits.AddReactions,\n          ],\n        },\n        {\n          id: '1011513775054143632',\n          allow: [\n            PermissionFlagsBits.ViewChannel,\n            PermissionFlagsBits.SendMessages,\n            PermissionFlagsBits.ReadMessageHistory,\n            PermissionFlagsBits.AddReactions,\n          ],\n        },\n      ],\n    });\n    const ticket = await this.prismaService.tickets.create({\n      data: {\n        userId: interaction.user.id,\n        guildId,\n        ticketId: channel.id,\n      },\n    });\n    await channel.send({\n      embeds: [\n        new EmbedBuilder()\n          .setTitle('Mod Anfrage')\n          .setDescription(\n            interaction.fields.getTextInputValue('modRequestMessage'),\n          )\n          .addFields(\n            {\n              name: 'Kategorie',\n              value: categoryId.replace('modRequest', ''),\n            },\n            {\n              name: 'Von Nutzer:in',\n              value: userMention(interaction.user.id),\n            },\n          ),\n      ],\n      components: [\n        new ActionRowBuilder().addComponents(\n          new ButtonBuilder()\n            .setCustomId(`closeTicket-${ticket.ticketId}`)\n            .setLabel('Ticket schließen')\n            .setStyle(ButtonStyle.Primary),\n        ),\n      ],\n    });\n    await channel.send(userMention(interaction.user.id));\n    await interaction.editReply({\n      content: 'Deine Mod Anfrage wurde erfolgreich versendet.',\n    });\n  }\n\n  @On('interactionCreate')\n  async onMenuSelect(interaction: StringSelectMenuInteraction) {\n    if (!interaction.isStringSelectMenu()) return;\n    if (interaction.customId != modRequestMenuId) return;\n    const modRequestModal = new ModalBuilder()\n      .setCustomId(\n        `modRequestModal-${\n          interaction.guildId ?? interaction.values[0].split('-')[1]\n        }-${interaction.values[0].split('-')[0]}`,\n      )\n      .setTitle('Mod Anfrage');\n\n    modRequestModal.addComponents(\n      new ActionRowBuilder().addComponents(\n        new TextInputBuilder()\n          .setCustomId('modRequestMessage')\n          .setPlaceholder('Schreibe deine Mod Anfrage hier rein.')\n          .setRequired(true)\n          .setStyle(TextInputStyle.Paragraph)\n          .setLabel('Mod Anfrage'),\n      ),\n    );\n    await interaction.showModal(modRequestModal);\n    await interaction.deleteReply();\n  }\n\n  @On('interactionCreate')\n  async onButtonCloseTicket(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (!interaction.customId.startsWith('closeTicket')) return;\n    const ticketId = interaction.customId.split('-')[1];\n    try {\n      const ticket = await this.prismaService.tickets.findUnique({\n        where: {\n          ticketId,\n        },\n      });\n      if (ticket.closed) {\n        return interaction.reply('Das Ticket ist schon geschlossen!');\n      }\n      await this.prismaService.tickets.update({\n        where: {\n          ticketId,\n        },\n        data: {\n          closed: true,\n        },\n      });\n      const channel = (await this.client.guilds.cache\n        .get(ticket.guildId)\n        .channels.fetch(ticketId)) as BaseGuildTextChannel;\n      await channel.permissionOverwrites.delete(ticket.userId);\n      await channel.permissionOverwrites.delete('1011513775054143632');\n      await channel.setParent('1014456370860404756');\n      return interaction.reply({\n        content: 'Ticket geschlossen',\n      });\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n  @On('interactionCreate')\n  async onButtonNeedHelpButton(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (interaction.customId != needHelpButtonId) return;\n    try {\n      this.initiateModRequestFlow(interaction);\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n  async initiateModRequestFlow(interaction: ButtonInteraction) {\n    await interaction.deferReply({ ephemeral: true });\n    let guildId = '';\n    if (!interaction.guildId) {\n      const guilds = (\n        await this.guildUserService.findAll(undefined, interaction.user.id)\n      ).map((user) => user.guildId);\n      guildId =\n        guilds.length > 1\n          ? await this._getGuildIdFromSelectMenu(interaction, guilds)\n          : guilds[0];\n    } else {\n      guildId = interaction.guildId;\n    }\n    const modRequestMenu = modRequestCategorySelect(guildId);\n    const options = {\n      content: 'Wähle eine Kategorie aus:',\n      components: [\n        new ActionRowBuilder().addComponents(\n          modRequestMenu,\n        ),\n      ],\n      ephemeral: true,\n    };\n    await interaction.editReply(options);\n  }\n  async _getGuildIdFromSelectMenu(\n    interaction: ButtonInteraction,\n    guilds: string[],\n  ) {\n    const guildMenu = selectGuildMenu(guilds, this.client);\n    const options = {\n      content: 'Wähle einen Server aus:',\n      components: [\n        new ActionRowBuilder().addComponents(\n          guildMenu,\n        ),\n      ],\n      ephemeral: true,\n    };\n\n    const selectionInteraction = await interaction.editReply(options);\n    const selection = await selectionInteraction.awaitMessageComponent({\n      componentType: ComponentType.StringSelect,\n      filter: (i) => i.customId === 'selectGuild',\n      time: 1000 * 60 * 5,\n    });\n    return selection.values[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ModerationModule.html":{"url":"modules/ModerationModule.html","title":"module - ModerationModule","body":"\n                   \n\n\n\n\n    Modules\n    ModerationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ModerationModule\n\n\n\ncluster_ModerationModule_providers\n\n\n\ncluster_ModerationModule_imports\n\n\n\n\nAuditLogModule\n\nAuditLogModule\n\n\n\nModerationModule\n\nModerationModule\n\nModerationModule -->\n\nAuditLogModule->ModerationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nModerationModule -->\n\nPrismaService->ModerationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/moderation/moderation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                        \n                            UserController\n                        \n                        \n                            ChannelController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuditLogModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoleController } from './role/role.controller';\nimport { UserController } from './user/user.controller';\nimport { ChannelController } from './channel/channel.controller';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { AuditLogModule } from 'src/auditlog/auditlog.module';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  imports: [DiscordModule.forFeature(), AuditLogModule],\n  controllers: [RoleController, UserController, ChannelController],\n  providers: [PrismaService],\n  exports: [],\n})\nexport class ModerationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MumVoiceCommandChatInput.html":{"url":"classes/MumVoiceCommandChatInput.html","title":"class - MumVoiceCommandChatInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MumVoiceCommandChatInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/mod-anouncement.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(interaction: CommandInteraction, dto: ModAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/mod-anouncement.command.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ModAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, IA, InteractionEvent } from '@discord-nestjs/core';\nimport {\n  ApplicationCommandType,\n  CommandInteraction,\n  MessageContextMenuCommandInteraction,\n} from 'discord.js';\nimport { ModAnnouncementDto } from '../dto/mod-anouncement.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\n\n@Command({\n  name: 'mumvoice',\n  description: 'Sends your message using the bot',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.ChatInput,\n  dmPermission: false,\n})\nexport class MumVoiceCommandChatInput {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) dto: ModAnnouncementDto,\n  ): Promise {\n    try {\n      if (dto.replyToMessage != '' || dto.replyToMessage != undefined)\n        await interaction.channel.send({\n          content: dto.message,\n          reply: {\n            messageReference: dto.replyToMessage,\n            failIfNotExists: true,\n          },\n        });\n      else\n        await interaction.channel.send({\n          content: dto.message,\n        });\n      interaction.reply({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${dto.message}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n@Command({\n  name: 'mumvoiceui',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class MumVoiceCommandUi {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: MessageContextMenuCommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) dto: ModAnnouncementDto,\n  ): Promise {\n    try {\n      await interaction.channel.send({\n        content: dto.message,\n        reply: {\n          messageReference: interaction.targetMessage.id,\n          failIfNotExists: true,\n        },\n      });\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${dto.message}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MumVoiceCommandUi.html":{"url":"classes/MumVoiceCommandUi.html","title":"class - MumVoiceCommandUi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MumVoiceCommandUi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/mod-anouncement.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(interaction: MessageContextMenuCommandInteraction, dto: ModAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/mod-anouncement.command.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        MessageContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ModAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, IA, InteractionEvent } from '@discord-nestjs/core';\nimport {\n  ApplicationCommandType,\n  CommandInteraction,\n  MessageContextMenuCommandInteraction,\n} from 'discord.js';\nimport { ModAnnouncementDto } from '../dto/mod-anouncement.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\n\n@Command({\n  name: 'mumvoice',\n  description: 'Sends your message using the bot',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.ChatInput,\n  dmPermission: false,\n})\nexport class MumVoiceCommandChatInput {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) dto: ModAnnouncementDto,\n  ): Promise {\n    try {\n      if (dto.replyToMessage != '' || dto.replyToMessage != undefined)\n        await interaction.channel.send({\n          content: dto.message,\n          reply: {\n            messageReference: dto.replyToMessage,\n            failIfNotExists: true,\n          },\n        });\n      else\n        await interaction.channel.send({\n          content: dto.message,\n        });\n      interaction.reply({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${dto.message}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n@Command({\n  name: 'mumvoiceui',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class MumVoiceCommandUi {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: MessageContextMenuCommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) dto: ModAnnouncementDto,\n  ): Promise {\n    try {\n      await interaction.channel.send({\n        content: dto.message,\n        reply: {\n          messageReference: interaction.targetMessage.id,\n          failIfNotExists: true,\n        },\n      });\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${dto.message}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PermissionOverwrite.html":{"url":"classes/PermissionOverwrite.html","title":"class - PermissionOverwrite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PermissionOverwrite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the permission overwrite'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PingCommand.html":{"url":"classes/PingCommand.html","title":"class - PingCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PingCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/ping.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onPlayCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/ping.command.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onPlayCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onPlayCommand()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/ping.command.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\n\n@Command({\n  name: 'ping',\n  description: 'Gets the ws gateway ping',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class PingCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n  @Handler()\n  onPlayCommand(): string {\n    return `Ping is ${this.client.ws.ping} ms.`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit' as never, async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ReactedMemberIsModOrHigherGuard.html":{"url":"guards/ReactedMemberIsModOrHigherGuard.html","title":"guard - ReactedMemberIsModOrHigherGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ReactedMemberIsModOrHigherGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/member-is-mod-or-higher.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(settingsService: GuildUserService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/guards/member-is-mod-or-higher.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/member-is-mod-or-higher.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { MessageReaction, User } from 'discord.js';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\n\n@Injectable()\nexport class ReactedMemberIsModOrHigherGuard implements CanActivate {\n  constructor(\n    @Inject(GuildUserService)\n    private readonly settingsService: GuildUserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const message = context.getArgByIndex(0);\n    const discordUser: User = context.getArgByIndex(1);\n    if (discordUser.partial) await discordUser.fetch();\n    if (message.partial) await message.fetch();\n    if (!(message instanceof MessageReaction)) return false;\n    if (!message.message.inGuild()) {\n      return false;\n    }\n    const user = await this.settingsService.getGuildUser(\n      discordUser.id,\n      message.message.guildId,\n    );\n    if (['MOD', 'ADMIN', 'OWNER'].includes(user.rank)) {\n      return true;\n    }\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJwtGuard.html":{"url":"injectables/RefreshJwtGuard.html","title":"injectable - RefreshJwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/guards/refresh-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt-refresh')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshJwtGuard extends AuthGuard('jwt-refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJwtStrategy.html":{"url":"injectables/RefreshJwtStrategy.html","title":"injectable - RefreshJwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/refresh-token.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/refresh-token.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/refresh-token.strategy.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class RefreshJwtStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromHeader('refresh_token'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { user: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestrictedChannelDto.html":{"url":"classes/RestrictedChannelDto.html","title":"class - RestrictedChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestrictedChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/dto/restricted-channels.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                requiredPoints\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/restricted-channels.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        requiredPoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/restricted-channels.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { RestrictedChannels } from '@prisma/client';\nimport { IsNumber, IsString } from 'class-validator';\n\nexport class RestrictedChannelDto\n  implements Omit\n{\n  @IsString()\n  @ApiProperty({\n    type: String,\n  })\n  channelId: string;\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n  })\n  requiredPoints: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /role\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildRoles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRole(guildId: string, roleData: EditRoleData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({summary: 'Create a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, schema: roleResponseSchema, description: 'Role was successfully created'})@ApiResponse({status: 500, description: 'Role could not be successfully created'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleData\n                                            \n                                                            EditRoleData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        deleteRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRole(guildId: string, roleId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':roleId')@ApiOperation({summary: 'Delete a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, description: 'Role was successfully deleted'})@ApiResponse({status: 500, description: 'Role could not be successfully deleted'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getGuildRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildRoles(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all roles for a guild'})@ApiResponse({status: 200, type: undefined, schema: rolesResponseSchema, description: 'Roles were successfully fetched'})@ApiResponse({status: 500, description: 'Roles could not be successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(guildId: string, roleId: string, roleData: EditRoleData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':roleId')@ApiOperation({summary: 'Update a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, schema: roleResponseSchema, description: 'Role was successfully updated'})@ApiResponse({status: 500, description: 'Role could not be successfully updated'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleData\n                                            \n                                                            EditRoleData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Inject,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Client, Role } from 'discord.js';\nimport {\n  RoleResponse,\n  rolesResponseSchema,\n  roleResponseSchema,\n  EditRoleData,\n} from '../dto/role';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { Rank } from '@prisma/client';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\nconst logger = new Logger('RoleController');\n@ApiTags('/role')\n@Controller('/role')\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\n@ApiBearerAuth()\nexport class RoleController {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all roles for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: [RoleResponse],\n    schema: rolesResponseSchema,\n    description: 'Roles were successfully fetched',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Roles could not be successfully fetched',\n  })\n  async getGuildRoles(@Param('guildId') guildId: string): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    logger.log(`Found ${guild.roles.cache.size} roles in guild ${guildId}`);\n    return (await guild.roles.fetch()).toJSON();\n  }\n  @Post('/')\n  @ApiOperation({ summary: 'Create a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    schema: roleResponseSchema,\n    description: 'Role was successfully created',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully created',\n  })\n  async createRole(\n    @Param('guildId') guildId: string,\n    @Body() roleData: EditRoleData,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = await guild.roles.create(roleData);\n    logger.log(`Created role ${role.name} in guild ${guildId}`);\n    return role;\n  }\n  @Put(':roleId')\n  @ApiOperation({ summary: 'Update a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    schema: roleResponseSchema,\n    description: 'Role was successfully updated',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully updated',\n  })\n  async updateRole(\n    @Param('guildId') guildId: string,\n    @Param('roleId') roleId: string,\n    @Body() roleData: EditRoleData,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = guild.roles.cache.get(roleId);\n    await role.edit(roleData);\n    logger.log(`Updated role ${role.name} in guild ${guildId}`);\n    return role;\n  }\n\n  @Delete(':roleId')\n  @ApiOperation({ summary: 'Delete a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    description: 'Role was successfully deleted',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully deleted',\n  })\n  async deleteRole(\n    @Param('guildId') guildId: string,\n    @Param('roleId') roleId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = guild.roles.cache.get(roleId);\n    logger.log(`Deleted role ${role.name} in guild ${guildId}`);\n    await role.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleResponse.html":{"url":"classes/RoleResponse.html","title":"class - RoleResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                color\n                            \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                guild\n                            \n                            \n                                    \n                                    \n                                hoist\n                            \n                            \n                                    \n                                    \n                                icon\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                managed\n                            \n                            \n                                    \n                                    \n                                mentionable\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                permissions\n                            \n                            \n                                    \n                                    \n                                rawPosition\n                            \n                            \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                unicodeEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The color of the role', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The timestamp the role was created at(Unixtimestamp)', example: 1600000000000})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guild\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The guild the api belongs to', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hoist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is hoisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@ApiProperty({type: String, description: 'The icon of the role', example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the role', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        managed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is managed by an integration', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        mentionable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is mentionable', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The name of the role', example: 'Admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The permissions of the role', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rawPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The position of the role', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The tags of the role', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        unicodeEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The unicodeEmoji of the role', example: '👑'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nimport {\n  Base64Resolvable,\n  ColorResolvable,\n  Colors,\n  EmojiResolvable,\n  PermissionFlagsBits,\n  PermissionResolvable,\n} from 'discord.js';\n\nclass RoleResponse {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild the api belongs to',\n    example: '123456789012345678',\n  })\n  guild: string;\n\n  @IsUrl()\n  @ApiProperty({\n    type: String,\n    description: 'The icon of the role',\n    example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n  })\n  icon: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The unicodeEmoji of the role',\n    example: '👑',\n  })\n  unicodeEmoji: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the role',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The name of the role',\n    example: 'Admin',\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The color of the role',\n    example: 0,\n  })\n  color: number;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is hoisted',\n    example: false,\n  })\n  hoist: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The position of the role',\n    example: 0,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The permissions of the role',\n    example: '0',\n  })\n  permissions: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is managed by an integration',\n    example: false,\n  })\n  managed: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is mentionable',\n    example: false,\n  })\n  mentionable: boolean;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The tags of the role',\n    example: null,\n  })\n  tags: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The timestamp the role was created at(Unixtimestamp)',\n    example: 1600000000000,\n  })\n  createdTimestamp: number;\n}\n\nclass EditRoleData {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsIn(Object.keys(Colors))\n  @ApiProperty({\n    enum: Colors,\n    required: false,\n    example: 'White',\n    examples: Object.keys(Colors),\n    description: 'New color of the role',\n  })\n  color?: ColorResolvable;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'Why was the role updated',\n  })\n  reason: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Whether or not the role should be hoisted',\n  })\n  hoist?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description:\n      'The position of the role; Higher = more permissions relative to the role below',\n  })\n  position?: number;\n\n  @IsIn(Object.keys(PermissionFlagsBits))\n  @IsOptional()\n  @ApiProperty({\n    type: Array,\n    required: false,\n    description: 'Updated Permission',\n    default: null,\n    example: ['AddReactions', 'KickMembers'],\n  })\n  permissions?: PermissionResolvable;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the role be mentionable or not',\n  })\n  mentionable?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New Icon of the role, base64 encoded string',\n    externalDocs: {\n      description: 'Discord.js docs',\n      url: 'https://old.discordjs.dev/#/docs/discord.js/main/class/Role?scrollTo=setIcon',\n    },\n  })\n  icon?: Base64Resolvable | EmojiResolvable | null;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'The new unicodeEmoji of the role',\n  })\n  unicodeEmoji?: string | null;\n}\n// Generate example schema for get /guilds/:guildId/roles/:roleId\nconst roleResponseSchema = {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n};\n// Schema for retrieving all roles from a guild with example data\nconst rolesResponseSchema = {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n};\n\n// Write exports here\nexport { RoleResponse, EditRoleData, roleResponseSchema, rolesResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SelfController.html":{"url":"controllers/SelfController.html","title":"controller - SelfController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SelfController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user/self\n            \n\n\n            \n                Description\n            \n            \n                The controller for the /user/self endpoint.\nThis endpoint is responsible for telling the frontend the current logged in user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/self.controller.ts:21\n                        \n                    \n\n\n            \n                \n                        Gets the current logged in user for the frontend.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the user ID, this is the discord user ID and it comes from the request if a user is logged in\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the user with data fetch from the discord api, see self.service.ts\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, UseGuards } from '@nestjs/common';\nimport { SelfDto } from './self.dto';\nimport { RequestUser } from '../util/decorators/request-user.decorator';\nimport { JwtAuthGuard } from '../auth/jwt/guards/jwt-auth.guard';\nimport { SelfService } from './self.service';\n\n/**\n * The controller for the /user/self endpoint.\n * This endpoint is responsible for telling the frontend the current logged in user.\n */\n@Controller('/user/self')\n@UseGuards(JwtAuthGuard)\nexport class SelfController {\n  constructor(@Inject(SelfService) private readonly selfService: SelfService) {}\n  /**\n   * Gets the current logged in user for the frontend.\n   * @param userId the user ID, this is the discord user ID and it comes from the request if a user is logged in\n   * @returns the user with data fetch from the discord api, see self.service.ts\n   */\n  @Get()\n  async getSelf(@RequestUser() userId: string): Promise {\n    return this.selfService.fetchSelf(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfDto.html":{"url":"classes/SelfDto.html","title":"class - SelfDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                guilds\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guilds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Guild[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['userId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { GuildUser } from '@prisma/client';\n\nexport class Guild {\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) name: string;\n  @ApiProperty({ type: String }) image: string;\n}\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n  @ApiPropertyOptional({ type: [Guild] }) guilds: Guild[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfDto-1.html":{"url":"classes/SelfDto-1.html","title":"class - SelfDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/dto/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                guildId\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                rank\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['guildId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['rank']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['userId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GuildUser } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) rank: GuildUser['rank'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SelfService.html":{"url":"injectables/SelfService.html","title":"injectable - SelfService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SelfService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service used to fetch the user data that the frontend needs.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _fetchGuilds\n                            \n                            \n                                    Async\n                                fetchSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discord: Client, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/self.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discord\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _fetchGuilds\n                        \n                    \n                \n            \n            \n                \n                        \n                    _fetchGuilds(userId: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/self.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Fetches the user from the bots database and\ntakes the guild ids and fetches those from discord, then returns them.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the discord user id of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                a list of guilds that the user is in\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        fetchSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchSelf(userId: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/self.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Fetches the user from discord and\nchecks the guild that the user is in via the database\nand returns the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the discord user id of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the user dto with all needed data\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client, Guild } from 'discord.js';\nimport { PrismaService } from '../prisma.service';\nimport { SelfDto } from './self.dto';\nimport { User } from '@prisma/client';\nimport { plainToInstance } from '../util/functions/plain-to-instance';\n\n/**\n * Service used to fetch the user data that the frontend needs.\n */\n@Injectable()\nexport class SelfService {\n  constructor(\n    @InjectDiscordClient() private readonly discord: Client,\n    @Inject(PrismaService) private readonly prisma: PrismaService,\n  ) {}\n  /**\n   * Fetches the user from discord and\n   * checks the guild that the user is in via the database\n   * and returns the user.\n   * @param userId the discord user id of the user\n   * @returns the user dto with all needed data\n   */\n  async fetchSelf(userId: User['userId']): Promise {\n    const [discordUser, guilds] = await Promise.all([\n      this.discord.users.fetch(userId),\n      this._fetchGuilds(userId),\n    ]);\n\n    return plainToInstance(SelfDto, {\n      userId: discordUser.id,\n      avatarUrl: discordUser.avatarURL({ size: 128 }),\n      name: discordUser.globalName,\n      guilds: guilds.map((guild) => ({\n        guildId: guild.id,\n        name: guild.name,\n        image: guild.iconURL({ size: 128 }),\n      })),\n    });\n  }\n  /**\n   * Fetches the user from the bots database and\n   * takes the guild ids and fetches those from discord, then returns them.\n   * @param userId the discord user id of the user\n   * @returns a list of guilds that the user is in\n   */\n  private async _fetchGuilds(userId: User['userId']): Promise {\n    return this.prisma.guildUser\n      .findMany({ where: { userId: userId } })\n      .then((guildUsers) =>\n        Promise.all(\n          guildUsers.map((guildUser) =>\n            this.discord.guilds.fetch(guildUser.guildId),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendDirectMessageToUserException.html":{"url":"classes/SendDirectMessageToUserException.html","title":"class - SendDirectMessageToUserException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendDirectMessageToUserException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/send-direct-message-to-user-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when the bot tries to DM a user but fails\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, userId: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/send-direct-message-to-user-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when the bot tries to DM a user but fails\n */\nexport class SendDirectMessageToUserException extends Error {\n  constructor(guildId: string, userId: string) {\n    super(\n      `Failed to send direct message to user ${userId} in guild ${guildId}.`,\n    );\n  }\n}\n\n/**\n * Filter used to craft the http api error response when the exception is triggered in a http request context.\n */\n@Catch(SendDirectMessageToUserException)\nexport class SendDirectMessageToUserExceptionFilter implements ExceptionFilter {\n  catch(exception: SendDirectMessageToUserException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendDirectMessageToUserExceptionFilter.html":{"url":"classes/SendDirectMessageToUserExceptionFilter.html","title":"class - SendDirectMessageToUserExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendDirectMessageToUserExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/send-direct-message-to-user-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to craft the http api error response when the exception is triggered in a http request context.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: SendDirectMessageToUserException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/send-direct-message-to-user-exception.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            SendDirectMessageToUserException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when the bot tries to DM a user but fails\n */\nexport class SendDirectMessageToUserException extends Error {\n  constructor(guildId: string, userId: string) {\n    super(\n      `Failed to send direct message to user ${userId} in guild ${guildId}.`,\n    );\n  }\n}\n\n/**\n * Filter used to craft the http api error response when the exception is triggered in a http request context.\n */\n@Catch(SendDirectMessageToUserException)\nexport class SendDirectMessageToUserExceptionFilter implements ExceptionFilter {\n  catch(exception: SendDirectMessageToUserException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetFirstMessageUICommand.html":{"url":"classes/SetFirstMessageUICommand.html","title":"class - SetFirstMessageUICommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetFirstMessageUICommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/user-set-first-message-ui.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onShowInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/user-set-first-message-ui.command.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onShowInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    onShowInfo(interaction: ContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/user-set-first-message-ui.command.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ApplicationCommandType,\n  Client,\n  ContextMenuCommandInteraction,\n  userMention,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'Set first message',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class SetFirstMessageUICommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService)\n    private prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onShowInfo(interaction: ContextMenuCommandInteraction) {\n    if (!interaction.isContextMenuCommand()) return;\n    await interaction.deferReply({ ephemeral: true });\n    const message = await interaction.channel.messages.fetch(\n      interaction.targetId,\n    );\n    await this.prismaService.guildUser.update({\n      where: {\n        guildId_userId: {\n          guildId: message.guildId,\n          userId: message.author.id,\n        },\n      },\n      data: {\n        firstMessageId: interaction.targetId,\n      },\n    });\n    interaction.followUp({\n      content: `First message for ${userMention(\n        message.author.id,\n      )} has been set.`,\n      ephemeral: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingsChanged.html":{"url":"classes/SettingsChanged.html","title":"class - SettingsChanged","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingsChanged\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/events/settings-role-id-changed.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventType\n                            \n                            \n                                guildId\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, value: string | number | boolean, eventType)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string | number | boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventType\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventType\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { Settings } from '@prisma/client';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SettingsChanged implements EventToLog {\n  guildId: string;\n  value: string | number | boolean;\n  eventType: keyof Settings;\n\n  constructor(\n    guildId: string,\n    value: string | number | boolean,\n    eventType: keyof Settings,\n  ) {\n    this.guildId = guildId;\n    this.value = value;\n    this.eventType = eventType;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`SettingsChanged: ${this.eventType} changed to ${this.value}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingsDto.html":{"url":"classes/SettingsDto.html","title":"class - SettingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/dto/settings.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                adminRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                introChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveMessageFormat\n                            \n                            \n                                    \n                                    \n                                    \n                                modChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                modRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                openIntroChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                prefix\n                            \n                            \n                                    \n                                    \n                                    \n                                unverifiedMemberRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                verifiedMemberRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                welcomeMessageFormat\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        adminRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        introChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveMessageFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        modChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        modRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        openIntroChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        unverifiedMemberRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        verifiedMemberRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        welcomeMessageFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Settings } from '@prisma/client';\nimport { IsOptional, IsString } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class SettingsDto implements Omit {\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  prefix: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  welcomeMessageFormat: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  openIntroChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  introChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  leaveMessageFormat: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  leaveChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  unverifiedMemberRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  verifiedMemberRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  modRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  adminRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  modChannelId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlowmodeDisabled.html":{"url":"classes/SlowmodeDisabled.html","title":"class - SlowmodeDisabled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlowmodeDisabled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                enabled\n                            \n                            \n                                guildId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, enabled: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        enabled\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlowmodeEnabled.html":{"url":"classes/SlowmodeEnabled.html","title":"class - SlowmodeEnabled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlowmodeEnabled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                enabled\n                            \n                            \n                                guildId\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, enabled: boolean, seconds: number)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        enabled\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seconds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpecialCommand.html":{"url":"classes/SpecialCommand.html","title":"class - SpecialCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpecialCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/special.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cakes\n                            \n                            \n                                coffees\n                            \n                            \n                                possibleAnswers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                chooseRandomCoffee\n                            \n                            \n                                templateAnswer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cakes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'Käsekuchen',\n    'Apfelkuchen',\n    'Bienenstich',\n    'Streuselkuchen',\n    'Kuchen',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coffees\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'Americano',\n    'Cappuccino',\n    'Diplomatenkaffee',\n    'Einspänner',\n    'Eiskaffee',\n    'Espresso',\n    'Kaffee Konsul',\n    'Latte Macchiato',\n    'Mokka',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        possibleAnswers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    '*Y schiebt X einen Z rüber!*',\n    '*Y schenkt X einen ganzen Z!*',\n    '*Y gibt X ein headpat :3*',\n    '*Y gibt X eine Umarmung :3*',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        chooseRandomCoffee\n                        \n                    \n                \n            \n            \n                \n                        \n                    chooseRandomCoffee(interaction: CommandInteraction, dto: UserToUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/special.command.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserToUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateAnswer\n                        \n                    \n                \n            \n            \n                \ntemplateAnswer(category: string, fromUserId: string, toUserId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/commands/special.command.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fromUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                toUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, IA, InteractionEvent } from '@discord-nestjs/core';\nimport { CommandInteraction, userMention } from 'discord.js';\nimport { UserToUser } from '../dto/user-to-user.dto';\nimport { SlashCommandPipe } from '@discord-nestjs/common';\nimport { UseFilters, ValidationPipe } from '@nestjs/common';\nimport { CommandValidationFilter } from '../filters/command-validation';\n\n@Command({\n  name: 'special',\n  description:\n    'Give a user you like a coffee, a cake or a headpat or maybe just a hug?',\n  dmPermission: false,\n})\n@UseFilters(CommandValidationFilter)\nexport class SpecialCommand {\n  coffees = [\n    'Americano',\n    'Cappuccino',\n    'Diplomatenkaffee',\n    'Einspänner',\n    'Eiskaffee',\n    'Espresso',\n    'Kaffee Konsul',\n    'Latte Macchiato',\n    'Mokka',\n  ];\n  possibleAnswers = [\n    '*Y schiebt X einen Z rüber!*',\n    '*Y schenkt X einen ganzen Z!*',\n    '*Y gibt X ein headpat :3*',\n    '*Y gibt X eine Umarmung :3*',\n  ];\n  cakes = [\n    'Käsekuchen',\n    'Apfelkuchen',\n    'Bienenstich',\n    'Streuselkuchen',\n    'Kuchen',\n  ];\n  @Handler()\n  async chooseRandomCoffee(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: UserToUser,\n  ): Promise {\n    const toUser = await interaction.guild.members.fetch(dto.user);\n    return this.templateAnswer(dto.category, interaction.user.id, toUser.id);\n  }\n\n  templateAnswer(category: string, fromUserId: string, toUserId: string) {\n    console.log(category);\n    console.log(fromUserId);\n    console.log(toUserId);\n\n    switch (category) {\n      case 'coffee':\n        return this.possibleAnswers[0]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId))\n          .replace(\n            'Z',\n            this.coffees[Math.ceil(Math.random() * this.coffees.length - 1)],\n          );\n      case 'cake':\n        return this.possibleAnswers[1]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId))\n          .replace(\n            'Z',\n            this.cakes[Math.ceil(Math.random() * this.cakes.length - 1)],\n          );\n      case 'headpat':\n        return this.possibleAnswers[2]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId));\n      case 'hug':\n        return this.possibleAnswers[3]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId));\n      default:\n        break;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nGuildRestrictedChannelService->TasksModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nTasksModule -->\n\nGuildService->TasksModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nTasksModule -->\n\nGuildSettingsService->TasksModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nTasksModule -->\n\nGuildUserService->TasksModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nTasksModule -->\n\nPrismaService->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The Tasks module manages the creation/execution of jobs that run periodically\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { GuildRestrictedChannelService } from 'src/guild/guild-restricted-channel/guild-restricted-channel.service';\n\n/**\n * The Tasks module manages the creation/execution of jobs that run periodically\n */\n@Module({\n  providers: [\n    TasksService,\n    GuildUserService,\n    GuildService,\n    PrismaService,\n    GuildSettingsService,\n    GuildRestrictedChannelService,\n  ],\n  imports: [DiscordModule.forFeature()],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The tasks service is responsible for managing jobs/tasks that run periodically.\nIt also exposes a way to create tasks but NOT deleting them.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                checkActiveUsers\n                            \n                            \n                                    \n                                    Async\n                                checkTimeouts\n                            \n                            \n                                    \n                                    Async\n                                cleanWfpMembers\n                            \n                            \n                                    \n                                    Async\n                                closeStaleTickets\n                            \n                            \n                                createDynamicScheduledJob\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildService: GuildService, userService: GuildUserService, client: Client, eventEmitter: EventEmitter2, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkActiveUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkActiveUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'checkActiveUsers', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Runs at 00:00:00 every day and\nupdates the written messages count for all users, of all guilds the bot is in, that have the MEMBER rank\nand then updates their permissions on specific channels.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkTimeouts\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeouts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('*/5 * * * *', {name: 'timeouts', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Runs every 5 minutes and checks if members of each given guild the bot is in are still timeouted\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        cleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanWfpMembers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'cleanWfpMembers', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Runs everyday at midnight and kicks members that are longer than 14 days on the server and haven't checked in.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        closeStaleTickets\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeStaleTickets()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'closeStaleTickets', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createDynamicScheduledJob\n                        \n                    \n                \n            \n            \n                \ncreateDynamicScheduledJob(jobOptions: CronJobParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:41\n                        \n                    \n\n\n            \n                \n                        A utility function to create cronjobs on the fly from cronjob parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jobOptions\n                                            \n                                                        CronJobParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    CronJob parameters such as the time. onComplete etc\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                a new cronjob\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { GuildUser } from '@prisma/client';\nimport {\n  BaseGuildTextChannel,\n  Client,\n  Colors,\n  EmbedBuilder,\n  GuildTextBasedChannel,\n  userMention,\n} from 'discord.js';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { UserTimeOutEvent } from 'src/guild/moderation/events/user.events';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { CronJob, CronJobParams } from 'cron';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\n\nconst logger = new Logger('TaskService');\n\n/**\n * The tasks service is responsible for managing jobs/tasks that run periodically.\n * It also exposes a way to create tasks but NOT deleting them.\n */\n@Injectable()\nexport class TasksService {\n  constructor(\n    @Inject(GuildService) private guildService: GuildService,\n    @Inject(GuildUserService) private userService: GuildUserService,\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n    @Inject(PrismaService) private readonly prismaService: PrismaService,\n  ) {}\n  /**\n   * A utility function to create cronjobs on the fly from cronjob parameters\n   * @param jobOptions CronJob parameters such as the time. onComplete etc\n   * @returns a new cronjob\n   */\n  createDynamicScheduledJob(jobOptions: CronJobParams) {\n    return new CronJob(\n      jobOptions.cronTime,\n      jobOptions.onTick,\n      jobOptions.onComplete,\n      jobOptions.start,\n      jobOptions.timeZone,\n    );\n  }\n\n  /**\n   * Runs at 00:00:00 every day and\n   * updates the written messages count for all users, of all guilds the bot is in, that have the MEMBER rank\n   * and then updates their permissions on specific channels.\n   */\n  @Cron('0 0 * * *', {\n    name: 'checkActiveUsers',\n    timeZone: 'Europe/Berlin',\n  })\n  async checkActiveUsers() {\n    this.client.guilds.cache.forEach(async (guild) => {\n      (await this.userService.findAll(guild.id)).forEach(\n        async (user: GuildUser) => {\n          if (user.rank != 'MEMBER') return;\n          logger.log(`Checking user ${user.userId} for activity...`);\n          this.userService.updateMessageCountBucket(user.userId, user.guildId);\n          this.guildService.updateChannelPermissions(user);\n        },\n      );\n    });\n  }\n\n  /**\n   * Runs every 5 minutes and checks if members of each given guild the bot is in are still timeouted\n   */\n  @Cron('*/5 * * * *', {\n    name: 'timeouts',\n    timeZone: 'Europe/Berlin',\n  })\n  async checkTimeouts() {\n    this.client.guilds.cache.forEach(async (guild) => {\n      (await this.userService.findAll(guild.id)).forEach(\n        async (dbUser: GuildUser) => {\n          try {\n            const member = await this.client.guilds.cache\n              .get(guild.id)\n              .members.fetch(dbUser.userId.toString());\n            if (member.communicationDisabledUntilTimestamp == null) {\n              return;\n            } else if (\n              member.communicationDisabledUntilTimestamp > Date.now()\n            ) {\n              logger.log(\n                `User ${dbUser.userId} is still timed out, until ${new Date(\n                  member.communicationDisabledUntilTimestamp,\n                ).toLocaleString()}`,\n              );\n              return;\n            } else if (\n              member.communicationDisabledUntilTimestamp  userMention(member.id))\n            .join('\\n'),\n        },\n        {\n          name: \"Couldn't kick members count\",\n          value: outCome['unkickableMembers'].length.toString(),\n        },\n        {\n          name: \"Couldn't kick members names\",\n          value: outCome['unkickableMembers']\n            .map((member) => userMention(member.id))\n            .join('\\n'),\n        },\n      ]);\n    await logChannel.send({\n      embeds: [embed],\n    });\n  }\n\n  @Cron('0 0 * * *', {\n    name: 'closeStaleTickets',\n    timeZone: 'Europe/Berlin',\n  })\n  async closeStaleTickets() {\n    const tickets = await this.prismaService.tickets.findMany();\n    tickets.forEach(async (ticket) => {\n      try {\n        const channel = (await (\n          await this.client.guilds.fetch(ticket.guildId)\n        ).channels.fetch(ticket.ticketId)) as GuildTextBasedChannel;\n        if (\n          new Date(new Date().setDate(new Date().getDate() - 7)) >\n          new Date(channel.lastMessage.createdTimestamp)\n        ) {\n          try {\n            await (channel as BaseGuildTextChannel).permissionOverwrites.delete(\n              ticket.userId,\n            );\n            await this.prismaService.tickets.update({\n              where: {\n                ticketId: ticket.ticketId,\n              },\n              data: {\n                closed: true,\n              },\n            });\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketSystemSetupCommand.html":{"url":"classes/TicketSystemSetupCommand.html","title":"class - TicketSystemSetupCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketSystemSetupCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/ticket-system.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onTicketsystemSetupCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/ticket-system.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTicketsystemSetupCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTicketsystemSetupCommand(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/ticket-system.command.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  Client,\n  CommandInteraction,\n} from 'discord.js';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Command({\n  name: 'ticketsystem-setup',\n  description: 'Sends a message and attaches the create Ticket button.',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class TicketSystemSetupCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n\n  @Handler()\n  async onTicketsystemSetupCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n  ) {\n    try {\n      await interaction.channel.send({\n        content:\n          'Du hast ein Anliegen welches du mit den Mods besprechen möchtest? Dann erstelle ein Ticket!',\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n      await interaction.reply({\n        ephemeral: true,\n        content: 'Done!',\n      });\n    } catch {\n      interaction.reply({\n        ephemeral: true,\n        content: 'Could not send a message in this channel!',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeOutCommand.html":{"url":"classes/TimeOutCommand.html","title":"class - TimeOutCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeOutCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/timeout.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                onTimeOutCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/timeout.command.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onTimeOutCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTimeOutCommand(interaction: CommandInteraction, dto: UserTimeOutDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()@UseFilters(CommandValidationFilter)\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/timeout.command.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserTimeOutDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  Client,\n  CommandInteraction,\n  EmbedBuilder,\n  userMention,\n} from 'discord.js';\nimport UserTimeOutDto from '../dto/user-timeout.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  UserSendDMFailedEvent,\n  UserTimeOutEvent,\n  UserTimeOutFailedEvent,\n} from 'src/guild/moderation/events/user.events';\nimport { UseFilters } from '@nestjs/common';\nimport { CommandValidationFilter } from '../filters/command-validation';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Command({\n  name: 'timeout',\n  description: 'Timeouts a user',\n  defaultMemberPermissions: ['ModerateMembers'],\n  descriptionLocalizations: {\n    'en-US': 'Timeouts a user',\n    de: 'Nutzer:in muten (Timeout)',\n  },\n  dmPermission: false,\n})\nexport class TimeOutCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    private readonly eventEmitter: EventEmitter2,\n  ) {}\n  @Handler()\n  @UseFilters(CommandValidationFilter)\n  async onTimeOutCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: UserTimeOutDto,\n  ) {\n    const date = new Date(dto.duration).getTime();\n    const user = await interaction.guild.members.fetch(dto.user);\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const error: Array = [];\n    try {\n      await user.timeout(date - Date.now(), dto.reason);\n    } catch (err) {\n      error.push(err);\n      this.eventEmitter.emit(\n        'user.timeout.failed',\n        new UserTimeOutFailedEvent(\n          user.id,\n          interaction.guildId,\n          dto.reason,\n          date,\n          err,\n        ),\n      );\n    }\n    try {\n      if (error.length) throw new Error('Timeout failed, therefore no DM');\n      await user.send({\n        content: `Du hast einen Timeout bis ${new Date(\n          dto.duration,\n        ).toString()}, bei Fragen wende dich an die Mods. \nGrund: ${dto.reason}`,\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n    } catch (err) {\n      error.push(err);\n      this.eventEmitter.emit(\n        'user.send.failed',\n        new UserSendDMFailedEvent(user.id, interaction.guildId, err),\n      );\n    }\n    const embed = new EmbedBuilder()\n      .setAuthor({\n        name: this.client.user.username,\n        iconURL: this.client.user.avatarURL(),\n      })\n      .setTitle(`Timeout user ${user.user.username}`)\n      .setDescription(\n        error.length === 0\n          ? `Timeouted user ${userMention(user.id)} until ${new Date(\n              dto.duration,\n            ).toLocaleString()} and sent them a DM.`\n          : `Failed to timeout user ${userMention(user.id)} until ${new Date(\n              dto.duration,\n            ).toLocaleString()}, check below for more information.`,\n      );\n    if (error.length) {\n      embed.addFields(\n        error.map((e) => {\n          if (!(e instanceof Error)) return;\n          return {\n            name: e.name,\n            value: e.message,\n          };\n        }),\n      );\n    }\n    await interaction.followUp({\n      embeds: [embed],\n      ephemeral: true,\n    });\n    this.eventEmitter.emit(\n      'user.timeout.created',\n      new UserTimeOutEvent(user.id, interaction.guildId, dto.reason, date),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnverifyByRoleCommand.html":{"url":"classes/UnverifyByRoleCommand.html","title":"class - UnverifyByRoleCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnverifyByRoleCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/unverify-by-role.conmand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onUnverifybyRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/unverify-by-role.conmand.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onUnverifybyRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    onUnverifybyRole(baseInteraction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/unverify-by-role.conmand.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                baseInteraction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n} from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { Client, CommandInteraction } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'enter-lockdown',\n  dmPermission: false,\n})\nexport class UnverifyByRoleCommand {\n  constructor(\n    @InjectDiscordClient() private client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  @Handler()\n  onUnverifybyRole(@IA() baseInteraction: CommandInteraction) {\n    this.client.guilds.fetch(baseInteraction.guildId).then((guild) =>\n      guild.members.fetch().then((members) =>\n        members.forEach(async (member) => {\n          if (\n            member.roles.cache.has('1011563978956226560') ||\n            member.roles.cache.has('1011513775054143632') ||\n            guild.ownerId == member.id\n          )\n            return;\n          const roles = [];\n          member.roles.cache.forEach((role) => roles.push({ id: role.id }));\n          this.database.lockdownRoleBackup\n            .create({\n              data: {\n                guildId: member.guild.id,\n                userId: member.id,\n                roles,\n              },\n            })\n            .then(async (data) =>\n              (data.roles as Prisma.JsonArray).forEach(\n                async (role: { id: string }) =>\n                  await member.roles.remove(role.id),\n              ),\n            );\n          if (!member.roles.cache.has('1226585753253843014')) {\n            await member.roles.add('1121823930085285938');\n          } else {\n            //await member.roles.add('')\n          }\n        }),\n      ),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserBanEvent.html":{"url":"classes/UserBanEvent.html","title":"class - UserBanEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserBanEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                banUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                kickUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                purgeUserFromGuild\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                timeoutUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        banUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    banUser(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/ban')@ApiOperation({summary: 'Ban a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully banned'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUser(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get a user for a guild'})@ApiResponse({status: 200, type: DiscordUser, schema: userResponseSchema, description: 'User was successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUsers(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all users for a guild'})@ApiResponse({status: 200, schema: usersResponseSchema, type: DiscordGuildMember, description: 'Users were successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        kickUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    kickUser(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/kick')@ApiOperation({summary: 'Kick a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully kicked'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        purgeUserFromGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    purgeUserFromGuild(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/purge')@ApiOperation({summary: 'Purge a user from a guild VERY EXPENSIVEEEEEE, USE WITH CAUTION'})@ApiResponse({status: 200, description: 'User was successfully purged'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        timeoutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    timeoutUser(guildId: string, userId: string, duration: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/timeout/:duration')@ApiOperation({summary: 'Timeout a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully timed outed'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                duration\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  NotFoundException,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { ChannelType, Client, User } from 'discord.js';\nimport {\n  DiscordUser,\n  userResponseSchema,\n  usersResponseSchema,\n} from '../dto/user';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\nimport { SendDirectMessageToUserException } from 'src/util/exception/send-direct-message-to-user-exception';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  UserBanEvent,\n  UserKickEvent,\n  UserPurgeEvent,\n  UserTimeOutEvent,\n} from '../events/user.events';\nimport { DiscordGuildMember } from '../dto/guild-member';\nimport { plainToInstance } from '../../../util/functions/plain-to-instance';\nimport { Request } from 'express';\nimport { GuildUser, Rank } from '@prisma/client';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller('/user')\n@ApiBearerAuth()\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class UserController {\n  logger = new Logger(UserController.name);\n\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all users for a guild' })\n  @ApiResponse({\n    status: 200,\n    schema: usersResponseSchema,\n    type: DiscordGuildMember,\n    description: 'Users were successfully fetched',\n  })\n  async getGuildUsers(\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const members = await guild.members.fetch();\n    this.logger.debug(`Found ${members.size} members in guild ${guildId}`);\n    return members.map((member) =>\n      plainToInstance(DiscordGuildMember, {\n        avatarUrl: member.displayAvatarURL(),\n        guildId: member.guild.id,\n        bot: member.user.bot,\n        userId: member.user.id,\n        communicationDisabledUntil:\n          member?.communicationDisabledUntil?.toJSON() ?? undefined,\n        displayName: member.displayName ?? member.user.globalName,\n        username: member.user.username,\n      }),\n    );\n  }\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get a user for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: DiscordUser,\n    schema: userResponseSchema,\n    description: 'User was successfully fetched',\n  })\n  async getGuildUser(\n    @Req() request: Request & { user: GuildUser },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(request.user.guildId);\n    const member = await guild.members.fetch(request.user.userId);\n    this.logger.log(\n      `Found member ${member.user.username} in guild ${request.user.guildId}`,\n    );\n    return member.user;\n  }\n\n  @Post(':userId/ban')\n  @ApiOperation({ summary: 'Ban a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully banned',\n  })\n  async banUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    await guild.members.ban(userId);\n    this.logger.log(`Banned user ${userId} from guild ${guildId}`);\n    await this.eventEmitter.emitAsync(\n      'user.ban',\n      new UserBanEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n\n  @Post(':userId/kick')\n  @ApiOperation({ summary: 'Kick a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully kicked',\n  })\n  async kickUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    await guild.members.kick(userId);\n    this.logger.log(`Kicked user ${userId} from guild ${guildId}`);\n    await this.eventEmitter.emitAsync(\n      'user.kick',\n      new UserKickEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n\n  @Post(':userId/timeout/:duration')\n  @ApiOperation({ summary: 'Timeout a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully timed outed',\n  })\n  async timeoutUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n    @Param('duration') duration: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const member = await guild.members.fetch(userId);\n    await member.timeout(parseInt(duration));\n    await member\n      .send(\n        `Du hast einen Timeout bis ${new Date(\n          new Date().getTime() + duration,\n        ).toISOString()}, bei Fragen wende dich an die Mods.`,\n      )\n      .catch(() => {\n        throw new SendDirectMessageToUserException(guildId, userId);\n      });\n    await this.eventEmitter.emitAsync(\n      'user.timeout.created',\n      new UserTimeOutEvent(\n        userId,\n        guildId,\n        'TODO: NOT IMPLEMENTED',\n        new Date(new Date().getTime() + duration).getMilliseconds(),\n      ),\n    );\n    this.logger.log(\n      `Timed out user ${userId} from guild ${guildId} for ${duration}`,\n    );\n  }\n\n  @Post(':userId/purge')\n  @ApiOperation({\n    summary: 'Purge a user from a guild VERY EXPENSIVEEEEEE, USE WITH CAUTION',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully purged',\n  })\n  async purgeUserFromGuild(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(`Purging user ${userId} from guild ${guildId}`);\n    if (guild === undefined) {\n      throw new NotFoundException('Guild not found');\n    }\n    guild.channels.fetch();\n    guild.channels.cache.forEach(async (channel) => {\n      try {\n        if (\n          channel.type === ChannelType.GuildText ||\n          channel.type === ChannelType.PublicThread ||\n          channel.type === ChannelType.PrivateThread\n        ) {\n          this.logger.log(`Purging user ${userId} from channel ${channel.id}`);\n          await cleanTextChannel(\n            channel,\n            () => false,\n            (msg) => msg.author.id === userId,\n            this.logger,\n          );\n          // sleep for 500ms to avoid rate limit\n          await new Promise((resolve) => setTimeout(resolve, 500));\n        }\n      } catch {\n        this.logger.error(\n          `Failed to purge user ${userId} from channel ${channel.id}`,\n        );\n      }\n    });\n    await this.eventEmitter.emitAsync(\n      'user.purge',\n      new UserPurgeEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInfoUiCommand.html":{"url":"classes/UserInfoUiCommand.html","title":"class - UserInfoUiCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInfoUiCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/user-info-ui.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getMessage\n                            \n                            \n                                    \n                                    Async\n                                onShowInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/user-info-ui.command.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _getMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getMessage(msgId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/commands/user-info-ui.command.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                msgId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onShowInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    onShowInfo(interaction: ContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/user-info-ui.command.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ApplicationCommandType,\n  Client,\n  ContextMenuCommandInteraction,\n  EmbedBuilder,\n  Message,\n  userMention,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'Show user info',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.User,\n})\nexport class UserInfoUiCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService)\n    private prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onShowInfo(interaction: ContextMenuCommandInteraction) {\n    if (!interaction.isContextMenuCommand()) return;\n    await interaction.deferReply({ ephemeral: true });\n    const guildUser = await this.prismaService.guildUser.findUnique({\n      where: {\n        guildId_userId: {\n          guildId: interaction.guildId,\n          userId: interaction.targetId,\n        },\n      },\n    });\n    if (!guildUser) {\n      return interaction.followUp({\n        content: 'User not found in database.',\n        ephemeral: true,\n      });\n    }\n    const firstMessageId = guildUser.firstMessageId;\n    const message = await this._getMessage(firstMessageId, interaction.guildId);\n    const numMessages = await this.prismaService.messages.count({\n      where: { userId: interaction.targetId, guildId: interaction.guildId },\n    });\n    const numReactions = await this.prismaService.auditLog.count({\n      where: {\n        invokerId: interaction.targetId,\n        guildId: interaction.guildId,\n        action: 'REACTION_ADDED',\n      },\n    });\n\n    const embed = new EmbedBuilder()\n      .setTitle('User Info')\n      .setDescription(`User: ${userMention(interaction.targetId)}`)\n      .addFields([\n        {\n          name: 'Link to introduction message',\n          value: message\n            ? `$[Click here](${message.url})`\n            : 'No message found in the database',\n        },\n        {\n          name: 'Number of messages sent',\n          value: numMessages.toString(),\n        },\n        {\n          name: 'Reactions added',\n          value: numReactions.toString(),\n        },\n      ]);\n    return interaction.followUp({\n      embeds: [embed],\n      ephemeral: true,\n    });\n  }\n  async _getMessage(msgId: string, guildId: string) {\n    if (!msgId) return null;\n    let message: Message = null;\n    await this.client.guilds.fetch(guildId).then(async (guild) => {\n      (await guild.channels.fetch()).forEach(async (channel) => {\n        if (channel.isTextBased()) {\n          try {\n            message = await channel.messages.fetch(msgId);\n          } catch {\n            return;\n          }\n        }\n      });\n    });\n    return message;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserKickEvent.html":{"url":"classes/UserKickEvent.html","title":"class - UserKickEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserKickEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nSelfService \n\nSelfService \n\n\n\nUserModule\n\nUserModule\n\nSelfService  -->\n\nUserModule->SelfService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nUserModule -->\n\nSelfService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The user module, not to be confused the guildUser module,\nis used to manage the bot local user of a discord user.\nSee user.service.ts and self.controller.ts for more info\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            SelfService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SelfController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SelfService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { SelfController } from './self.controller';\nimport { SelfService } from './self.service';\n\n/**\n * The user module, not to be confused the guildUser module,\n * is used to manage the bot local user of a discord user.\n * See user.service.ts and self.controller.ts for more info\n */\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [PrismaService, SelfService],\n  controllers: [SelfController],\n  exports: [SelfService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPurgeEvent.html":{"url":"classes/UserPurgeEvent.html","title":"class - UserPurgeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPurgeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:92\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:90\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSendDMFailedEvent.html":{"url":"classes/UserSendDMFailedEvent.html","title":"class - UserSendDMFailedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSendDMFailedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                guildId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, error: Error)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:110\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:108\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutDto.html":{"url":"classes/UserTimeOutDto.html","title":"class - UserTimeOutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user-timeout.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                duration\n                            \n                            \n                                    \n                                reason\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Param({description: 'The duration of the timeout', descriptionLocalizations: undefined, type: undefined, required: true})@IsDateString({}, {message: 'The input must be in format: Xd, Xh, Xm or XdXh or XhXm or XdXm or XdXhXm. Where X is a number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The reason for the timeout', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user to timeout', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { Transform } from 'class-transformer';\nimport { IsDateString } from 'class-validator';\nimport { User } from 'discord.js';\n\nexport default class UserTimeOutDto {\n  @Param({\n    description: 'The user to timeout',\n    descriptionLocalizations: {\n      'en-US': 'The user to timeout',\n      de: 'Account der gemutet werden soll',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n\n  @Param({\n    description: 'The reason for the timeout',\n    descriptionLocalizations: {\n      'en-US': 'The reason for the timeout',\n      de: 'Grund für den Timeout',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  reason: string;\n\n  // Hacky way to both transform the value and validate it, in one step :D\n  @Transform(({ value }) => {\n    if (\n      !/\\b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/.test(\n        value.trim(),\n      )\n    )\n      return null;\n    let _days = '0';\n    let _hours = '0';\n    let _minutes = '0';\n    (value as string)\n      .match(\n        /\\b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/g,\n      )\n      .forEach((match) => {\n        if (match.endsWith('d')) _days = match.replace('d', '');\n        else if (match.endsWith('h')) _hours = match.replace('h', '');\n        else if (match.endsWith('m')) _minutes = match.replace('m', '');\n      });\n    const days = parseInt(_days) || 0;\n    const hours = parseInt(_hours) || 0;\n    const minutes = parseInt(_minutes) || 0;\n    return new Date(\n      Date.now() + ((days * 24 + hours) * 60 + minutes) * 60 * 1000,\n    ).toISOString();\n  })\n  @Param({\n    description: 'The duration of the timeout',\n    descriptionLocalizations: {\n      'en-US': 'The duration of the timeout',\n      de: 'Dauer des Timeouts',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsDateString(\n    {},\n    {\n      message:\n        'The input must be in format: Xd, Xh, Xm or XdXh or XhXm or XdXm or XdXhXm. Where X is a number',\n    },\n  )\n  duration: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutEvent.html":{"url":"classes/UserTimeOutEvent.html","title":"class - UserTimeOutEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string, duration: number)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:37\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutFailedEvent.html":{"url":"classes/UserTimeOutFailedEvent.html","title":"class - UserTimeOutFailedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutFailedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                error\n                            \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string, duration: number, error: Error)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:62\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserToUser.html":{"url":"classes/UserToUser.html","title":"class - UserToUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserToUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user-to-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Choice(CommandToExecute)@Param({description: 'Was möchtest du einer Person geben?', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-to-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user you want to give something', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-to-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Choice, Param, ParamType } from '@discord-nestjs/core';\nimport { ChoiceOptions } from '@discord-nestjs/core/dist/decorators/option/choice/choice-options';\nimport { User } from 'discord.js';\n\nconst CommandToExecute: ChoiceOptions = {\n  'Einer Person einen Kaffee geben': 'coffee',\n  'Einer Person einen Kuchen geben': 'cake',\n  'Einer Person ein Headpat geben': 'headpat',\n  'Eine Person umarmen': 'hug',\n};\nexport class UserToUser {\n  @Param({\n    description: 'The user you want to give something',\n    descriptionLocalizations: {\n      'en-US': 'The user you want to give something',\n      de: 'Person welcher du etwas geben willst',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n\n  @Choice(CommandToExecute)\n  @Param({\n    description: 'Was möchtest du einer Person geben?',\n    required: true,\n  })\n  category: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.controller.ts\n            \n            controller\n            AuditLogController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.events.ts\n            \n            injectable\n            AuditEvents\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.service.ts\n            \n            injectable\n            AuditLogService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auditlog/dto/audit-log-filter.dto.ts\n            \n            class\n            AuditLogFilterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auditlog/dto/log-entry.dto.ts\n            \n            class\n            LogEntryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/guards/refresh-auth.guard.ts\n            \n            injectable\n            RefreshJwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.controller.ts\n            \n            controller\n            JwtAuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.service.ts\n            \n            injectable\n            JwtAuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.strategy.ts\n            \n            injectable\n            JwtAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/refresh-token.strategy.ts\n            \n            injectable\n            RefreshJwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/add-role.command.ts\n            \n            class\n            AddRoleCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/clean-wfp.command.ts\n            \n            class\n            CleanWfpMember\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/community-question.command.ts\n            \n            class\n            CommunityQuestionCommand\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bot/commands/init-guild.command.ts\n            \n            class\n            initGuildCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/mod-anouncement.command.ts\n            \n            class\n            MumVoiceCommandChatInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/commands/mod-anouncement.command.ts\n            \n            class\n            MumVoiceCommandUi\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/commands/ping.command.ts\n            \n            class\n            PingCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/special.command.ts\n            \n            class\n            SpecialCommand\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/bot/commands/ticket-system.command.ts\n            \n            class\n            TicketSystemSetupCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/timeout.command.ts\n            \n            class\n            TimeOutCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/unverify-by-role.conmand.ts\n            \n            class\n            UnverifyByRoleCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/user-info-ui.command.ts\n            \n            class\n            UserInfoUiCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/user-set-first-message-ui.command.ts\n            \n            class\n            SetFirstMessageUICommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BOT_EVENT_HANDLER_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BOT_EVENT_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BotEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/dto/commmunity-question.dto.ts\n            \n            class\n            CommunityQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/dto/community-question.form.dto.ts\n            \n            class\n            CommunityQuestionFormDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/dto/mod-anouncement.dto.ts\n            \n            class\n            ModAnnouncementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/dto/user-timeout.dto.ts\n            \n            class\n            UserTimeOutDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/dto/user-to-user.dto.ts\n            \n            class\n            UserToUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/bot/dto/user-to-user.dto.ts\n            \n            variable\n            CommandToExecute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/explorers/event.explorer.ts\n            \n            class\n            Explorer\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bot/filters/command-validation.ts\n            \n            class\n            CommandValidationFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/is-modal-interaction.guard.ts\n            \n            guard\n            IsModalInteractionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/member-is-mod-or-higher.guard.ts\n            \n            guard\n            ReactedMemberIsModOrHigherGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/guards/message-from-user.guard.ts\n            \n            guard\n            MessageFromUserGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bot/guards/message-in-channel.guard.ts\n            \n            variable\n            ChannelIdGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/guards/message-is-dm.guard.ts\n            \n            guard\n            MessageIsDmGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bot/guards/reaction-emote.guard.ts\n            \n            variable\n            ReactionEmoteGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/guards/reaction-in-channel.guard.ts\n            \n            variable\n            ReactionChannelIdGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n            interface\n            DiscordExecutionContext\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n            guard\n            IsUserUnlockedGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/interfaces/bot-event.interface.ts\n            \n            interface\n            BotEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/events/guild-members/index.ts\n            \n            injectable\n            GuildMemberEvents\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/guild/events/interaction-create/mod-request-menu/index.ts\n            \n            injectable\n            ModRequestFlow\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/guild/events/message-create/dm-message/index.ts\n            \n            injectable\n            DmMessageHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/events/message-create/guild-message/index.ts\n            \n            injectable\n            GuildMessageHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts\n            \n            class\n            GuildAutoDeleteChannelDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts\n            \n            controller\n            GuildAutoDeleteChannelController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts\n            \n            injectable\n            GuildAutoDeleteChannelService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-restricted-channel/guild-restricted-channel.controller.ts\n            \n            controller\n            GuildRestrictedChannelController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/guild-restricted-channel/guild-restricted-channel.service.ts\n            \n            injectable\n            GuildRestrictedChannelService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/dto/restricted-channels.dto.ts\n            \n            class\n            RestrictedChannelDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/dto/settings.dto.ts\n            \n            class\n            SettingsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/events/settings-role-id-changed.event.ts\n            \n            class\n            SettingsChanged\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/guild-settings.controller.ts\n            \n            controller\n            GuildSettingsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/guild-settings.service.ts\n            \n            injectable\n            GuildSettingsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/guild/guild-user/dto/self.dto.ts\n            \n            class\n            SelfDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-user/guild-user.controller.ts\n            \n            controller\n            GuildUserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/guild-user/guild-user.service.ts\n            \n            injectable\n            GuildUserService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/guild/guild.controller.ts\n            \n            controller\n            GuildController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild.service.ts\n            \n            injectable\n            GuildService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/guild/moderation/channel/channel.controller.ts\n            \n            controller\n            ChannelController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            Channel\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            GuildChannelEditOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            PermissionOverwrite\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/guild-member.ts\n            \n            class\n            DiscordGuildMember\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/role.ts\n            \n            class\n            EditRoleData\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/role.ts\n            \n            class\n            RoleResponse\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/role.ts\n            \n            variable\n            roleResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/role.ts\n            \n            variable\n            rolesResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/user.ts\n            \n            class\n            DiscordUser\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/user.ts\n            \n            variable\n            userResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/user.ts\n            \n            variable\n            usersResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            ChannelCleaned\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            SlowmodeDisabled\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            SlowmodeEnabled\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserBanEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserKickEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserPurgeEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserSendDMFailedEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserTimeOutEvent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserTimeOutFailedEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/guild/moderation/role/role.controller.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                        src/tasks/tasks.service.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/self.controller.ts\n            \n            controller\n            SelfController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/self.dto.ts\n            \n            class\n            Guild\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/self.dto.ts\n            \n            class\n            SelfDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/self.service.ts\n            \n            injectable\n            SelfService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/util/decorators/parameter-not-undefined.ts\n            \n            function\n            DearV8ProtectMeFromParametersWithNoneValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-guild-user.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-guild-user.decorator.ts\n            \n            variable\n            RequestGuildUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-user.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-user.decorator.ts\n            \n            variable\n            RequestUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/requires-rank.decorator.ts\n            \n            variable\n            REQUIRED_RANK_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/requires-rank.decorator.ts\n            \n            variable\n            RequiredRank\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/dto/log.entry.dto.ts\n            \n            class\n            LogEntry\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            variable\n            actions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            variable\n            targetTypes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            type alias\n            Action\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            type alias\n            TargetType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/util/exception/channel-not-text-based-exception.ts\n            \n            class\n            ChannelNotTextBasedException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/channel-not-text-based-exception.ts\n            \n            class\n            ChannelNotTextBasedExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/guild-does-not-exist-exception.ts\n            \n            class\n            GuildDoesNotExistException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/guild-does-not-exist-exception.ts\n            \n            class\n            GuildDoesNotExistExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/send-direct-message-to-user-exception.ts\n            \n            class\n            SendDirectMessageToUserException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/send-direct-message-to-user-exception.ts\n            \n            class\n            SendDirectMessageToUserExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/util/functions/channel-utils.ts\n            \n            function\n            cleanTextChannel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/get-attachtment-type.ts\n            \n            function\n            getAttachmentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            modRequestCategorySelect\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            needHelpButton\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            selectGuildMenu\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            variable\n            modRequestMenuId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            variable\n            needHelpButtonId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/functions/plain-to-instance.ts\n            \n            function\n            plainToInstance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/guards/has-required-rank.guard.ts\n            \n            guard\n            HasRequiredRank\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/util/guards/has-required-rank.guard.ts\n            \n            variable\n            InheritedRanks\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/interfaces/event-to-log.ts\n            \n            interface\n            EventToLog\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @discord-nestjs/common : ^5.2.5\n        \n            @discord-nestjs/core : ^5.3.7\n        \n            @nestjs/axios : ^3.0.3\n        \n            @nestjs/common : ^10.4.2\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.4.2\n        \n            @nestjs/event-emitter : ^2.0.3\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.4.2\n        \n            @nestjs/schedule : ^4.1.1\n        \n            @nestjs/swagger : ^8.0.7\n        \n            @prisma/client : ^6.0.1\n        \n            axios : ^1.7.7\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            discord.js : ^14.16.2\n        \n            jest-mock-extended : ^4.0.0-beta1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-oauth2 : ^1.7.0\n        \n            rambda : 9.4.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.2.0\n        \n            type-fest : ^4.26.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            cleanTextChannel   (src/.../channel-utils.ts)\n                        \n                        \n                            DearV8ProtectMeFromParametersWithNoneValue   (src/.../parameter-not-undefined.ts)\n                        \n                        \n                            getAttachmentType   (src/.../get-attachtment-type.ts)\n                        \n                        \n                            modRequestCategorySelect   (src/.../menu-helper.ts)\n                        \n                        \n                            needHelpButton   (src/.../menu-helper.ts)\n                        \n                        \n                            plainToInstance   (src/.../plain-to-instance.ts)\n                        \n                        \n                            selectGuildMenu   (src/.../menu-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/util/functions/channel-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cleanTextChannel\n                        \n                    \n                \n            \n            \n                \ncleanTextChannel(channel: GuildTextBasedChannel, stopCb, filterCb, logger: Logger)\n                \n            \n\n\n\n\n            \n                \n                        Utility function which deletes messages determined by the filterCb in a given channel until the stopCb returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                        GuildTextBasedChannel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GuildTextBasedChannel -- the channel to clean\n\n                                            \n                                        \n                                        \n                                                stopCb\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the callback which gets called to check if we should stop deleting messages\n\n                                            \n                                        \n                                        \n                                                filterCb\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the callback used to filter out messages to delete\n\n                                            \n                                        \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the logger used to log to the apps log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/util/decorators/parameter-not-undefined.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DearV8ProtectMeFromParametersWithNoneValue\n                        \n                    \n                \n            \n            \n                \nDearV8ProtectMeFromParametersWithNoneValue(target: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ClassDecorator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/util/functions/get-attachtment-type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAttachmentType\n                        \n                    \n                \n            \n            \n                \ngetAttachmentType(contentType: string)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to check which type the contentType is,\nused to check the type of a attachment of a message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contentType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string that contains the content type e.g vide/mp4\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AttachmentType\n\n                        \n                            \n                                AttachmentType enum value for the given type\n\n                            \n                \n            \n        \n    \n    src/util/functions/menu-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modRequestCategorySelect\n                        \n                    \n                \n            \n            \n                \nmodRequestCategorySelect(suffix: string)\n                \n            \n\n\n\n\n            \n                \n                        Returns a SelectMenu for the ModRequest functionality\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                suffix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Some string to suffix the the value of each field\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     StringSelectMenuBuilder\n\n                        \n                            \n                                StringSelectMenuBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        needHelpButton\n                        \n                    \n                \n            \n            \n                \nneedHelpButton()\n                \n            \n\n\n\n\n            \n                \n                        Utility function that returns a button builder named \"Hilfe benötigt\"\n\n\n                        \n                            Returns :     ButtonBuilder\n\n                        \n                            \n                                ButtonBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectGuildMenu\n                        \n                    \n                \n            \n            \n                \nselectGuildMenu(guilds, client: Client)\n                \n            \n\n\n\n\n            \n                \n                        Utility function that returns a SelectMenu to choose a guild.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                guilds\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of guildIDs\n\n                                            \n                                        \n                                        \n                                                client\n                                            \n                                                        Client\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Discord Client\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     StringSelectMenuBuilder\n\n                        \n                            \n                                StringSelectMenuBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    src/util/functions/plain-to-instance.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        plainToInstance\n                        \n                    \n                \n            \n            \n                \nplainToInstance(cls: Constructor, plain: Pick)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to convert a plain object to the given type and return a constructed class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cls\n                                            \n                                                            Constructor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A class type, must be a constructor\n\n                                            \n                                        \n                                        \n                                                plain\n                                            \n                                                        Pick\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A plain object that can be the cls type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                the generic T, type of cls\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/initGuildCommand.html":{"url":"classes/initGuildCommand.html","title":"class - initGuildCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  initGuildCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/init-guild.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onInitGuild\n                            \n                            \n                                    \n                                    Async\n                                onInteraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaServer: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/init-guild.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaServer\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onInitGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInitGuild(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/init-guild.command.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onInteraction\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInteraction(interaction: ChannelSelectMenuInteraction | RoleSelectMenuInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/init-guild.command.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                            ChannelSelectMenuInteraction | RoleSelectMenuInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InteractionEvent, On } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ActionRowBuilder,\n  ChannelSelectMenuBuilder,\n  ChannelSelectMenuInteraction,\n  ChannelType,\n  CommandInteraction,\n  MessageActionRowComponentBuilder,\n  RoleSelectMenuBuilder,\n  RoleSelectMenuInteraction,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'setup-bot',\n  description: 'Shows a modal to set/update the bot settings',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class initGuildCommand {\n  constructor(\n    @Inject(PrismaService) private readonly prismaServer: PrismaService,\n  ) {}\n  @Handler()\n  async onInitGuild(@InteractionEvent() interaction: CommandInteraction) {\n    await interaction.deferReply({ ephemeral: true });\n    const settings = await this.prismaServer.settings.findUnique({\n      where: { guildId: interaction.guildId },\n    });\n    const setOpenIntroChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('openIntroChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.openIntroChannelId))\n          .name ?? 'Select the open intro channel',\n      );\n\n    const setIntroChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('IntroChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.introChannelId))\n          .name ?? 'Select the intro channel',\n      );\n    const setMiscChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('miscChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.leaveChannelId))\n          .name ?? 'Select the miscellaneous channel',\n      );\n    const setModChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('modChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.modChannelId)).name ??\n          'Select the mod channel',\n      );\n    const setModRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('modRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.modRoleId)).name ??\n          'Select the mod role',\n      );\n\n    const setAdminRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('adminRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.adminRoleId)).name ??\n          'Select the admin role',\n      );\n\n    const setVerifiedMemberRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('verifiedMemberRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.verifiedMemberRoleId))\n          .name ?? 'Select the verified member role',\n      );\n\n    const setUnverifiedRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('unverifiedMemberRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.unverifiedMemberRoleId))\n          .name ?? 'Select the unverified member role',\n      );\n\n    const roleRows = [\n      setAdminRoleId,\n      setModRoleId,\n      setUnverifiedRoleId,\n      setVerifiedMemberRoleId,\n    ].map((row) =>\n      new ActionRowBuilder().addComponents(\n        row,\n      ),\n    );\n    const channelRows = [\n      setModChannelId,\n      setIntroChannelId,\n      setOpenIntroChannelId,\n      setMiscChannelId,\n    ].map((row) =>\n      new ActionRowBuilder().addComponents(\n        row,\n      ),\n    );\n\n    Promise.all([\n      interaction.followUp({\n        ephemeral: true,\n        content: 'Configure the role settings below',\n        components: [...roleRows],\n      }),\n      interaction.followUp({\n        ephemeral: true,\n        content: 'Configure the channel settings below',\n        components: [...channelRows],\n      }),\n    ]);\n  }\n\n  @On('interactionCreate')\n  async onInteraction(\n    interaction: ChannelSelectMenuInteraction | RoleSelectMenuInteraction,\n  ) {\n    if (\n      !(\n        interaction.customId != undefined &&\n        interaction.customId.endsWith('-setup') &&\n        interaction.isAnySelectMenu()\n      )\n    )\n      return;\n    await interaction.deferReply({ ephemeral: true });\n    if (interaction.isChannelSelectMenu()) {\n      const guildId = interaction.guildId;\n      const channelId = interaction.values[0];\n      switch (interaction.customId) {\n        case 'openIntroChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { openIntroChannelId: channelId },\n          });\n          break;\n        case 'IntroChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { introChannelId: channelId },\n          });\n          break;\n        case 'miscChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { leaveChannelId: channelId },\n          });\n          break;\n        case 'modChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { modChannelId: channelId },\n          });\n          break;\n      }\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } else if (interaction.isRoleSelectMenu()) {\n      const guildId = interaction.guildId;\n      const roleId = interaction.values[0];\n      switch (interaction.customId) {\n        case 'modRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { modRoleId: roleId },\n          });\n          break;\n        case 'adminRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { adminRoleId: roleId },\n          });\n          break;\n        case 'verifiedMemberRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { verifiedMemberRoleId: roleId },\n          });\n          break;\n        case 'unverifiedMemberRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { unverifiedMemberRoleId: roleId },\n          });\n          break;\n      }\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\nExample :                        Preamble  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\nExample :                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\nExample :a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\nExample :a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\nExample :a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nRemote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\nExample :                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\nExample :\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\nhttps://www.gnu.org/licenses/.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuditLogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BotModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildAutoDeleteChannelModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildRestrictedChannelModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildSettingsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildUserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        JwtAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ModerationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuditLogModule\n\n\n\ncluster_AuditLogModule_exports\n\n\n\ncluster_AuditLogModule_providers\n\n\n\ncluster_BotModule\n\n\n\ncluster_BotModule_providers\n\n\n\ncluster_GuildAutoDeleteChannelModule\n\n\n\ncluster_GuildAutoDeleteChannelModule_exports\n\n\n\ncluster_GuildAutoDeleteChannelModule_providers\n\n\n\ncluster_GuildModule\n\n\n\ncluster_GuildModule_imports\n\n\n\ncluster_GuildModule_exports\n\n\n\ncluster_GuildModule_providers\n\n\n\ncluster_GuildRestrictedChannelModule\n\n\n\ncluster_GuildRestrictedChannelModule_exports\n\n\n\ncluster_GuildSettingsModule\n\n\n\ncluster_GuildSettingsModule_exports\n\n\n\ncluster_GuildUserModule\n\n\n\ncluster_GuildUserModule_exports\n\n\n\ncluster_JwtAuthModule\n\n\n\ncluster_JwtAuthModule_exports\n\n\n\ncluster_JwtAuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nBotModule\n\nBotModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBotModule->AppModule\n\n\n\n\n\nGuildModule\n\nGuildModule\n\nAppModule -->\n\nGuildModule->AppModule\n\n\n\n\n\nGuildService \n\nGuildService \n\nGuildService  -->\n\nGuildModule->GuildService \n\n\n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nAppModule -->\n\nJwtAuthModule->AppModule\n\n\n\n\n\nJwtAuthService \n\nJwtAuthService \n\nJwtAuthService  -->\n\nJwtAuthModule->JwtAuthService \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nSelfService \n\nSelfService \n\nSelfService  -->\n\nUserModule->SelfService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nBotModule -->\n\nPrismaService->BotModule\n\n\n\nGuildModule -->\n\nPrismaService->GuildModule\n\n\n\nJwtAuthModule -->\n\nPrismaService->JwtAuthModule\n\n\n\nTasksModule -->\n\nPrismaService->TasksModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nAuditLogModule\n\nAuditLogModule\n\nAuditLogModule -->\n\nPrismaService->AuditLogModule\n\n\n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule -->\n\nPrismaService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule -->\n\nPrismaService->GuildRestrictedChannelModule\n\n\n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildSettingsModule -->\n\nPrismaService->GuildSettingsModule\n\n\n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildUserModule -->\n\nPrismaService->GuildUserModule\n\n\n\n\n\nModerationModule\n\nModerationModule\n\nModerationModule -->\n\nPrismaService->ModerationModule\n\n\n\n\n\nAuditLogService \n\nAuditLogService \n\nAuditLogService  -->\n\nAuditLogModule->AuditLogService \n\n\n\nModerationModule -->\n\nAuditLogModule->ModerationModule\n\n\n\n\n\nAuditEvents\n\nAuditEvents\n\nAuditLogModule -->\n\nAuditEvents->AuditLogModule\n\n\n\n\n\nAuditLogService\n\nAuditLogService\n\nAuditLogModule -->\n\nAuditLogService->AuditLogModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nBotModule -->\n\nGuildRestrictedChannelService->BotModule\n\n\n\nGuildModule -->\n\nGuildRestrictedChannelService->GuildModule\n\n\n\nTasksModule -->\n\nGuildRestrictedChannelService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildRestrictedChannelService->GuildAutoDeleteChannelModule\n\n\n\nGuildRestrictedChannelModule -->\n\nGuildRestrictedChannelService->GuildRestrictedChannelModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nBotModule -->\n\nGuildService->BotModule\n\n\n\nGuildModule -->\n\nGuildService->GuildModule\n\n\n\nTasksModule -->\n\nGuildService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nBotModule -->\n\nGuildSettingsService->BotModule\n\n\n\nTasksModule -->\n\nGuildSettingsService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildSettingsService->GuildAutoDeleteChannelModule\n\n\n\nGuildSettingsModule -->\n\nGuildSettingsService->GuildSettingsModule\n\n\n\nGuildUserModule -->\n\nGuildSettingsService->GuildUserModule\n\n\n\n\n\nGuildAutoDeleteChannelService \n\nGuildAutoDeleteChannelService \n\nGuildModule -->\n\nGuildAutoDeleteChannelModule->GuildModule\n\n\n\nGuildAutoDeleteChannelService  -->\n\nGuildAutoDeleteChannelModule->GuildAutoDeleteChannelService \n\n\n\n\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildAutoDeleteChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nTasksModule -->\n\nGuildUserService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildUserService->GuildAutoDeleteChannelModule\n\n\n\nGuildUserModule -->\n\nGuildUserService->GuildUserModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nTasksService->GuildAutoDeleteChannelModule\n\n\n\nGuildModule -->\n\nGuildRestrictedChannelModule->GuildModule\n\n\n\n\n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService  -->\n\nGuildRestrictedChannelModule->GuildRestrictedChannelService \n\n\n\nGuildModule -->\n\nGuildSettingsModule->GuildModule\n\n\n\n\n\nGuildSettingsService \n\nGuildSettingsService \n\nGuildSettingsService  -->\n\nGuildSettingsModule->GuildSettingsService \n\n\n\nGuildModule -->\n\nGuildUserModule->GuildModule\n\n\n\n\n\nGuildUserService \n\nGuildUserService \n\nGuildUserService  -->\n\nGuildUserModule->GuildUserService \n\n\n\nGuildModule -->\n\nModerationModule->GuildModule\n\n\n\n\n\nDmMessageHandler\n\nDmMessageHandler\n\nGuildModule -->\n\nDmMessageHandler->GuildModule\n\n\n\n\n\nGuildMemberEvents\n\nGuildMemberEvents\n\nGuildModule -->\n\nGuildMemberEvents->GuildModule\n\n\n\n\n\nGuildMessageHandler\n\nGuildMessageHandler\n\nGuildModule -->\n\nGuildMessageHandler->GuildModule\n\n\n\n\n\nModRequestFlow\n\nModRequestFlow\n\nGuildModule -->\n\nModRequestFlow->GuildModule\n\n\n\n\n\nJwtAuthService\n\nJwtAuthService\n\nJwtAuthModule -->\n\nJwtAuthService->JwtAuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nJwtAuthModule -->\n\nJwtAuthStrategy->JwtAuthModule\n\n\n\n\n\nRefreshJwtStrategy\n\nRefreshJwtStrategy\n\nJwtAuthModule -->\n\nRefreshJwtStrategy->JwtAuthModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nJwtAuthModule -->\n\nSelfService->JwtAuthModule\n\n\n\nUserModule -->\n\nSelfService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    52 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : A discord bot for a community with special needs hence the name Mega-Transformers-Bot. Written in Typescript using Nestjs, discordjs and React. It also features a API that is used by the frontend but can also be used standalone\n        \n            License : AGPL-3.0-only\n        \n            Author : 89q12\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (src/.../log.entry.dto.ts)\n                        \n                        \n                            TargetType   (src/.../log.entry.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/dto/log.entry.dto.ts\n    \n    \n        \n            \n                \n                    \n                    Action\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TargetType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            actions   (src/.../log.entry.dto.ts)\n                        \n                        \n                            BOT_EVENT_HANDLER_NAME   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            BOT_EVENT_KEY   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            BotEvent   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            ChannelIdGuard   (src/.../message-in-channel.guard.ts)\n                        \n                        \n                            CommandToExecute   (src/.../user-to-user.dto.ts)\n                        \n                        \n                            InheritedRanks   (src/.../has-required-rank.guard.ts)\n                        \n                        \n                            logger   (src/.../tasks.service.ts)\n                        \n                        \n                            logger   (src/.../request-guild-user.decorator.ts)\n                        \n                        \n                            logger   (src/.../request-user.decorator.ts)\n                        \n                        \n                            logger   (src/.../role.controller.ts)\n                        \n                        \n                            modRequestMenuId   (src/.../menu-helper.ts)\n                        \n                        \n                            needHelpButtonId   (src/.../menu-helper.ts)\n                        \n                        \n                            ReactionChannelIdGuard   (src/.../reaction-in-channel.guard.ts)\n                        \n                        \n                            ReactionEmoteGuard   (src/.../reaction-emote.guard.ts)\n                        \n                        \n                            RequestGuildUser   (src/.../request-guild-user.decorator.ts)\n                        \n                        \n                            RequestUser   (src/.../request-user.decorator.ts)\n                        \n                        \n                            REQUIRED_RANK_KEY   (src/.../requires-rank.decorator.ts)\n                        \n                        \n                            RequiredRank   (src/.../requires-rank.decorator.ts)\n                        \n                        \n                            roleResponseSchema   (src/.../role.ts)\n                        \n                        \n                            rolesResponseSchema   (src/.../role.ts)\n                        \n                        \n                            targetTypes   (src/.../log.entry.dto.ts)\n                        \n                        \n                            userResponseSchema   (src/.../user.ts)\n                        \n                        \n                            usersResponseSchema   (src/.../user.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/dto/log.entry.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'USER_JOINED',\n  'WARN',\n  'ERROR',\n  'USER_LEFT',\n  'USER_BANNED',\n  'USER_UNBANNED',\n  'USER_UPDATED',\n  'GUILD_UPDATED',\n  'INVALID_REQUEST',\n  'INVITE_CREATED',\n  'INVITE_DELETED',\n  'MESSAGE_DELETED',\n  'REACTION_ADDED',\n  'REACTION_REMOVED',\n  'ROLE_CREATED',\n  'ROLE_DELETED',\n  'ROLE_UPDATED',\n  'CHANNEL_CREATED',\n  'CHANNEL_DELETED',\n  'CHANNEL_UPDATED',\n  'WEBHOOKS_UPDATED',\n  'TIMEOUT_EXPIRED',\n  'TIMEOUT',\n  'KICK',\n  'BAN',\n] as const\n                    \n                \n\n            \n                \n                    All possible actions that can occur\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'ERROR',\n  'WARN',\n  'USER',\n  'GUILD',\n  'INVALID_REQUEST',\n  'INVITE',\n  'MESSAGE',\n  'ROLE',\n  'CHANNEL',\n] as const\n                    \n                \n\n            \n                \n                    List of the targets an event can have\n\n                \n            \n\n        \n    \n\n    src/bot/decorators/bot-event.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BOT_EVENT_HANDLER_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__bot_event_handler__'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BOT_EVENT_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__bot_event__'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BotEvent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...event: Array) =>\n  SetMetadata(BOT_EVENT_KEY, event)\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/message-in-channel.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ChannelIdGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (channelId: string) => {\n  class ChannelIdGuardMixin implements CanActivate {\n    async canActivate(context: ExecutionContext) {\n      const message = context.getArgByIndex(0);\n      if (\n        !(message.message instanceof Message) ||\n        !(message.message as Message).inGuild()\n      ) {\n        return false;\n      }\n      return message.channelId === channelId;\n    }\n  }\n\n  const guard = mixin(ChannelIdGuardMixin);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/bot/dto/user-to-user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommandToExecute\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChoiceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  'Einer Person einen Kaffee geben': 'coffee',\n  'Einer Person einen Kuchen geben': 'cake',\n  'Einer Person ein Headpat geben': 'headpat',\n  'Eine Person umarmen': 'hug',\n}\n                    \n                \n\n\n        \n    \n\n    src/util/guards/has-required-rank.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InheritedRanks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  OWNER: ['ADMIN', 'MOD', 'MEMBER'],\n  ADMIN: ['MOD', 'MEMBER'],\n  MOD: ['MEMBER'],\n  MEMBER: [],\n  NEW: [],\n}\n                    \n                \n\n            \n                \n                    Map of ranks that are inherited by any given rank,\nmeaning their lower ranks e.g MOD has MEMBER.\nBut MEMBER has 0 since its the lowest rank a member can have.\n\n                \n            \n\n        \n    \n\n    src/tasks/tasks.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('TaskService')\n                    \n                \n\n\n        \n    \n\n    src/util/decorators/request-guild-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RequestGuildUser')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequestGuildUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx\n      .switchToHttp()\n      .getRequest();\n    const user = request.user;\n\n    if (!user) {\n      logger.error(`${ctx.getHandler().toString()} has a parameter with\n      annotation RequestGuildUser but is NOT guarded by ${\n        JwtAuthGuard.name\n      } AND the request path ${\n        request.path\n      } is not prefixed by \"/guild/:guildId/\n        Please use ${JwtAuthGuard.name} if you want to access a UserId`);\n      throw new InternalServerErrorException();\n    }\n    return user;\n  },\n)\n                    \n                \n\n            \n                \n                    A param decorator to check whether a GuildUser is set on a request,\nif not the route is not guarded by JWT but should be.\nIf the route is guarded it returns the user\n\n                \n            \n\n        \n    \n\n    src/util/decorators/request-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RequestUser')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequestUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const userId = ctx.switchToHttp().getRequest()\n      .user.userId;\n\n    if (!userId) {\n      logger.error(`${ctx.getHandler().toString()} has a parameter with\n    annotation RequestUser but is NOT guarded by ${JwtAuthGuard.name}.\n      Please use ${JwtAuthGuard.name} if you want to access a UserId`);\n      throw new InternalServerErrorException();\n    }\n    return userId;\n  },\n)\n                    \n                \n\n            \n                \n                    A param decorator to check whether a user is set on a request,\nif not the route is not guarded by JWT but should be.\nIt returns the userID.\n\n                \n            \n\n        \n    \n\n    src/guild/moderation/role/role.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RoleController')\n                    \n                \n\n\n        \n    \n\n    src/util/functions/menu-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modRequestMenuId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'modRequestMenu'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        needHelpButtonId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'createTicket'\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/reaction-in-channel.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReactionChannelIdGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (channelId: string) => {\n  class ChannelIdGuardMixin implements CanActivate {\n    async canActivate(context: ExecutionContext) {\n      const reaction = context.getArgByIndex(0);\n      if (reaction.partial) await reaction.fetch();\n      const message = reaction.message;\n      if (\n        message.message instanceof Message &&\n        !(message.message as Message).inGuild()\n      ) {\n        return false;\n      }\n      return message.channelId === channelId;\n    }\n  }\n\n  const guard = mixin(ChannelIdGuardMixin);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/reaction-emote.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReactionEmoteGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (emotes: string[]) => {\n  class ReactionEmote implements CanActivate {\n    canActivate(context: ExecutionContext): boolean {\n      const reaction = context.getArgByIndex(0);\n      if (\n        reaction instanceof MessageReaction &&\n        emotes.includes((reaction as MessageReaction).emoji.name)\n      ) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  const guard = mixin(ReactionEmote);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/util/decorators/requires-rank.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUIRED_RANK_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__rank__'\n                    \n                \n\n            \n                \n                    The constant used in the RequiredRank decorator to store the rank for a function/object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequiredRank\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (rank: Rank) =>\n  SetMetadata(REQUIRED_RANK_KEY, rank)\n                    \n                \n\n            \n                \n                    Sets the required rank for a route or controller\n\n                \n            \n\n        \n    \n\n    src/guild/moderation/dto/role.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roleResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rolesResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/guild/moderation/dto/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    username: { type: 'string' },\n    discriminator: { type: 'string' },\n    avatarURL: { type: 'string' },\n    displayAvatarURL: { type: 'string' },\n    bannerURL: { type: 'string' },\n    bot: { type: 'boolean' },\n    system: { type: 'boolean' },\n    flags: { type: 'number' },\n    createdTimestamp: { type: 'number' },\n    accentColor: { type: 'number' },\n    hexAccentColor: { type: 'string' },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usersResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'array',\n  items: userResponseSchema,\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
