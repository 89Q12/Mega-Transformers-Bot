var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddRoleCommand.html",[0,0.247,1,3.533]],["body/classes/AddRoleCommand.html",[0,0.284,1,5.305,2,0.903,3,0.101,4,0.09,5,0.09,6,6.482,7,4.448,8,0.295,9,0.867,10,1.635,11,6.595,12,1.181,13,2.484,14,3.026,15,4.047,16,2.204,17,0.386,18,5.043,19,0.821,20,0.01,21,0.655,22,0.335,23,0.689,24,5.043,25,4.473,26,0.925,27,3.499,28,5.043,29,3.14,30,0.645,31,0.163,32,3.366,33,2.471,34,3.023,35,0.971,36,1.044,37,1.461,38,0.42,39,0.971,40,1.656,41,4.056,42,1.79,43,5.043,44,4.448,45,2.777,46,3.023,47,2.777,48,1.911,49,0.113,50,1.653,51,2.251,52,5.043,53,5.043,54,3.764,55,2.574,56,4.448,57,4.448,58,1.07,59,5.043,60,0.971,61,4.362,62,1.295,63,4.448,64,4.362,65,1.333,66,4.617,67,1.911,68,5.305,69,5.043,70,2.997,71,5.043,72,1.744,73,0.7,74,2.671,75,5.043,76,2.118,77,1.535,78,4.448,79,0.007,80,0.007]],["title/controllers/AppController.html",[81,1.48,82,3.278]],["body/controllers/AppController.html",[0,0.379,3,0.135,4,0.12,5,0.12,20,0.009,31,0.168,38,0.56,49,0.15,79,0.008,80,0.008,81,2.658,82,5.888,83,2.455,84,5.938,85,3.205,86,3.436,87,5.415,88,3.707,89,5.888,90,2.522,91,3.863]],["title/modules/AppModule.html",[92,1.519,93,3.278]],["body/modules/AppModule.html",[0,0.23,3,0.082,4,0.073,5,0.073,14,2.406,16,2.205,20,0.01,31,0.179,35,0.787,36,1.184,37,1.184,38,0.34,39,0.787,48,1.184,49,0.091,77,2.176,79,0.006,80,0.006,82,4.925,83,2.086,92,2.825,93,6.621,94,1.883,95,1.883,96,2.013,97,2.013,98,1.883,99,3.142,100,1.883,101,3.605,102,3.605,103,3.605,104,5.458,105,5.604,106,5.458,107,5.458,108,5.458,109,5.458,110,2.818,111,2.013,112,1.49,113,4.087,114,3.495,115,5.72,116,5.004,117,2.703,118,4.087,119,4.087,120,4.087,121,4.087,122,4.087,123,2.165,124,4.087,125,5.72,126,4.087,127,4.087,128,4.087,129,3.287,130,3.783,131,4.087,132,3.783,133,5.72,134,1.946,135,3.605,136,3.783,137,4.087,138,4.087,139,2.251,140,2.251,141,3.783,142,2.013,143,3.605,144,4.087,145,4.087,146,3.605,147,4.087,148,4.087,149,4.087,150,4.087,151,4.087,152,4.087,153,3.605,154,4.087,155,4.087,156,4.087,157,4.087,158,4.087,159,4.087,160,4.087,161,4.087,162,4.087,163,4.087,164,4.087,165,4.087,166,4.087,167,4.087,168,5.72,169,4.087,170,4.087,171,4.087,172,4.087,173,4.087,174,4.087,175,4.087,176,4.087,177,4.087,178,4.087,179,4.087,180,4.087,181,4.087,182,4.087,183,4.087,184,4.087,185,3.605,186,4.087,187,4.087,188,4.087,189,4.087,190,4.087,191,4.087,192,6.878,193,3.605,194,4.087,195,3.605,196,1.128,197,2.45,198,4.087]],["title/injectables/AppService.html",[109,3.074,199,0.954]],["body/injectables/AppService.html",[0,0.332,3,0.118,4,0.105,5,0.105,8,0.344,9,0.958,12,1.304,17,0.462,19,0.906,20,0.009,21,0.649,22,0.299,23,0.761,26,1.081,30,0.754,31,0.159,37,1.707,38,0.49,49,0.131,50,1.477,79,0.007,80,0.007,109,5.097,139,3.245,140,3.245,199,1.582,200,2.334,201,5.197,202,1.62,203,2.781,204,7.281,205,5.892,206,5.187,207,7.281,208,4.575,209,7.281,210,6.97,211,5.892,212,4.124,213,2.715,214,2.63,215,2.402,216,1.915,217,7.281,218,3.467,219,5.892,220,2.474,221,3.897,222,1.707,223,5.892]],["title/controllers/AuditLogController.html",[81,1.48,224,3.278]],["body/controllers/AuditLogController.html",[0,0.284,3,0.101,4,0.09,5,0.09,8,0.295,9,0.867,10,1.635,12,0.903,17,0.295,19,0.628,20,0.009,21,0.449,22,0.256,23,0.527,26,0.925,30,0.645,31,0.176,37,1.461,38,0.42,42,1.79,49,0.113,50,1.264,58,1.07,65,1.333,73,1.02,79,0.007,80,0.007,81,2.222,83,1.839,85,2.401,86,2.574,88,2.777,91,2.894,220,2.118,222,1.461,224,4.922,225,4.448,226,7.349,227,5.043,228,4.292,229,5.456,230,4.898,231,2.946,232,6.875,233,5.043,234,2.405,235,2.056,236,7.349,237,4.448,238,3.53,239,4.448,240,4.448,241,4.861,242,4.448,243,3.764,244,5.043,245,5.043,246,3.023,247,3.764,248,3.764,249,4.217,250,4.618,251,4.056,252,2.574,253,3.023,254,3.023,255,3.169,256,3.336,257,3.954,258,3.023,259,2.056,260,3.53,261,5.043,262,5.043,263,3.169,264,5.043,265,5.043,266,5.043,267,5.043,268,4.448,269,5.043,270,4.448,271,5.043,272,1.943,273,5.043,274,5.043,275,5.043,276,3.023,277,5.043,278,3.53,279,5.043,280,2.118,281,5.043,282,3.764,283,5.043,284,5.043]],["title/classes/AuditLogFilterDto.html",[0,0.247,229,3.074]],["body/classes/AuditLogFilterDto.html",[0,0.384,2,0.95,3,0.107,4,0.095,5,0.095,8,0.31,17,0.465,20,0.009,22,0.44,23,0.906,26,1.458,31,0.151,49,0.118,73,1.24,79,0.007,80,0.007,90,1.987,202,1.516,220,3.451,229,4.77,249,4.826,250,5.285,251,4.266,285,7.249,286,4.678,287,7.529,288,7.529,289,7.008,290,4.763,291,5.304,292,5.304,293,5.562,294,4.056,295,6.814,296,5.304,297,5.304,298,5.304,299,5.304,300,3.508,301,4.526,302,3.585,303,2.367,304,5.753,305,4.507,306,4.77,307,3.478,308,5.304,309,5.304]],["title/modules/AuditLogModule.html",[92,1.519,136,2.905]],["body/modules/AuditLogModule.html",[0,0.328,3,0.117,4,0.104,5,0.104,16,2.436,20,0.009,31,0.173,35,1.122,36,1.206,38,0.485,40,1.912,49,0.13,79,0.007,80,0.007,83,2.636,92,2.718,94,2.683,95,2.683,96,2.869,97,2.869,98,2.683,99,3.743,100,3.622,110,3.561,111,2.869,112,2.123,114,3.084,123,3.084,136,5.957,224,5.866,241,5.984,242,5.136,310,5.136,311,5.136,312,5.136,313,6.929,314,5.823,315,5.823,316,5.823,317,3.206]],["title/injectables/AuditLogService.html",[199,0.954,241,2.905]],["body/injectables/AuditLogService.html",[0,0.266,3,0.095,4,0.085,5,0.085,8,0.277,9,0.831,10,1.813,12,0.847,16,2.305,17,0.416,19,0.886,20,0.009,21,0.635,22,0.402,23,0.744,30,0.809,31,0.153,37,1.371,38,0.394,40,1.553,49,0.106,50,1.186,58,1.341,60,0.911,62,1.623,65,1.536,73,0.988,77,2.534,79,0.006,80,0.006,199,1.373,200,1.874,216,1.663,220,1.986,228,3.921,229,5.32,230,2.972,231,2.244,232,4.172,239,4.172,240,4.172,241,4.181,249,4.086,250,4.474,268,4.172,270,4.172,272,2.435,276,4.556,278,4.425,280,2.655,282,4.718,318,4.172,319,3.627,320,6.281,321,4.73,322,4.73,323,6.322,324,5.32,325,4.73,326,4.73,327,2.736,328,7.121,329,5.576,330,4.73,331,4.73,332,4.73,333,4.73,334,4.73,335,4.73,336,4.73,337,4.73,338,4.73,339,4.73,340,5.576,341,4.73,342,2.605,343,4.73,344,6.322,345,6.322,346,3.805,347,4.73,348,2.99,349,4.73,350,4.73,351,4.73,352,4.73,353,4.172,354,4.73,355,3.311,356,4.172,357,4.172,358,4.73,359,4.73,360,2.655,361,4.172,362,4.73]],["title/interfaces/BotEvent.html",[363,2.52,364,3.074]],["body/interfaces/BotEvent.html",[3,0.131,4,0.117,5,0.117,8,0.381,9,1.019,17,0.381,19,0.812,20,0.009,21,0.581,22,0.331,23,0.682,30,0.835,31,0.131,39,1.257,49,0.146,79,0.008,80,0.008,214,2.912,234,2.824,363,3.744,364,5.422,365,4.568,366,6.832,367,5.756,368,7.286,369,6.525,370,7.537,371,6.525,372,7.746,373,6.525]],["title/modules/BotModule.html",[92,1.519,104,3.074]],["body/modules/BotModule.html",[0,0.285,3,0.133,4,0.091,5,0.091,16,2.35,20,0.009,31,0.181,35,0.976,36,1.05,38,0.422,40,1.664,49,0.113,79,0.007,80,0.007,92,2.548,94,2.335,95,2.335,96,2.497,97,2.497,98,2.335,99,3.508,100,3.049,104,6.214,110,3.26,111,2.497,112,1.848,114,2.685,123,3.505,134,2.413,317,2.791,374,4.471,375,4.471,376,4.576,377,4.241,378,3.956,379,5.069,380,4.939,381,5.069,382,2.173,383,2.791,384,4.939,385,5.069,386,4.939,387,5.069,388,5.069,389,3.797,390,2.685,391,3.185,392,4.939,393,5.069,394,5.069,395,4.939,396,5.069,397,5.069,398,4.939,399,6.617,400,6.617,401,4.939,402,3.548,403,3.783,404,1.582,405,4.939,406,5.069,407,5.069,408,3.548,409,4.939,410,5.069,411,4.939,412,5.069,413,5.069]],["title/classes/Channel.html",[0,0.247,414,1.48]],["body/classes/Channel.html",[0,0.337,2,0.506,3,0.057,4,0.051,5,0.051,8,0.165,17,0.481,20,0.009,21,0.634,22,0.465,23,0.852,26,1.51,31,0.107,39,0.545,48,2.423,49,0.063,65,1.076,72,2.787,73,1.245,79,0.004,80,0.004,90,1.06,196,1.204,202,0.97,216,0.744,230,2.741,231,3.054,259,3.355,280,1.188,290,1.695,300,1.871,301,4.487,302,3.837,303,1.262,342,3.56,348,2.868,360,2.513,404,1.868,414,2.951,415,2.111,416,3.345,417,4.525,418,4.282,419,2.717,420,5.726,421,4.282,422,3.973,423,3.973,424,3.521,425,4.282,426,5.726,427,5.984,428,2.885,429,2.503,430,5.01,431,3.508,432,2.828,433,2.828,434,5.278,435,0.903,436,2.885,437,2.828,438,3.508,439,2.828,440,4.362,441,3.053,442,3.508,443,2.828,444,4.362,445,3.762,446,4.466,447,2.828,448,3.508,449,2.828,450,2.868,451,2.828,452,2.615,453,2.828,454,3.973,455,3.508,456,2.828,457,4.189,458,2.828,459,3.521,460,3.508,461,2.828,462,2.828,463,3.255,464,3.053,465,3.508,466,3.345,467,2.828,468,3.508,469,3.053,470,2.741,471,2.828,472,3.508,473,2.828,474,2.828,475,2.828,476,4.129,477,4.282,478,3.345,479,2.275,480,2.275,481,4.473,482,2.741,483,3.508,484,4.282,485,2.064,486,2.275,487,2.275,488,2.885,489,1.262,490,2.275,491,2.111,492,1.777,493,2.275,494,1.871,495,2.275,496,2.275,497,1.98,498,2.275]],["title/classes/ChannelCleaned.html",[0,0.247,499,2.905]],["body/classes/ChannelCleaned.html",[0,0.387,2,0.79,3,0.089,4,0.079,5,0.079,8,0.258,9,0.793,12,1.231,17,0.478,19,0.751,20,0.009,21,0.538,22,0.415,23,0.631,30,0.565,31,0.121,38,0.367,49,0.153,65,1.743,67,2.369,73,1.259,79,0.006,80,0.006,196,1.218,202,1.342,203,2.754,213,3.404,218,3.683,220,1.854,231,3.085,419,2.253,435,1.423,450,3.102,466,3.791,494,4.887,499,4.546,500,3.295,501,2.249,502,5.722,503,4.465,504,6.576,505,3.196,506,3.617,507,6.033,508,4.414,509,4.414,510,4.414,511,4.414,512,3.913,513,4.414,514,2.253,515,3.991,516,6.101,517,4.398,518,6.424,519,4.853,520,4.853,521,3.785,522,3.991,523,3.295,524,4.853,525,3.551,526,3.462,527,3.295]],["title/controllers/ChannelController.html",[81,1.48,528,3.278]],["body/controllers/ChannelController.html",[0,0.167,3,0.059,4,0.053,5,0.053,8,0.173,9,0.594,10,1.846,12,0.53,14,1.996,17,0.386,19,0.821,20,0.009,21,0.588,22,0.425,23,0.689,26,1.21,30,0.844,31,0.163,33,1.691,35,0.57,36,0.612,37,0.857,38,0.246,39,0.57,42,1.05,48,0.857,49,0.066,50,1.131,58,1.161,60,1.436,62,2.035,65,1.678,67,1.912,73,1.228,77,0.9,79,0.005,80,0.005,81,0.996,83,1.078,85,1.408,86,1.51,88,1.629,90,1.108,91,1.697,139,1.629,140,1.629,196,0.816,202,0.658,203,1.521,206,2.836,208,1.858,216,1.735,221,1.956,222,1.308,231,1.943,234,2.843,235,1.206,252,1.51,253,1.773,254,1.773,255,1.858,256,1.956,257,2.706,258,1.773,259,1.206,260,2.07,263,4.145,329,5.403,348,2.572,360,2.299,402,3.832,414,2.916,419,2.304,423,2.207,435,1.703,466,3.44,482,1.858,485,1.464,488,4.052,492,1.858,499,1.956,502,5.063,503,4.329,515,1.956,516,2.207,522,1.956,523,2.207,528,3.369,529,2.609,530,1.697,531,5.474,532,5.474,533,5.474,534,5.474,535,5.474,536,2.958,537,2.958,538,3.631,539,2.958,540,2.958,541,2.958,542,5.474,543,2.958,544,4.514,545,2.958,546,2.958,547,2.958,548,3.631,549,4.927,550,4.927,551,4.927,552,2.958,553,2.958,554,2.379,555,6.133,556,2.958,557,2.958,558,2.958,559,2.958,560,4.288,561,1.956,562,2.207,563,4.514,564,5.593,565,4.403,566,2.379,567,3.981,568,2.958,569,2.986,570,2.958,571,3.369,572,2.207,573,2.609,574,2.958,575,2.07,576,2.207,577,2.07,578,2.07,579,1.697,580,2.958,581,2.958,582,2.207,583,2.958,584,5.306,585,3.369,586,4.145,587,4.572,588,2.59,589,4.514,590,2.958,591,2.958,592,6.126,593,2.958,594,2.958,595,5.474,596,2.958,597,2.958,598,2.958,599,3.785,600,3.631,601,2.958,602,2.958,603,2.958,604,2.958,605,2.958,606,2.07,607,1.773,608,2.958,609,2.609,610,2.379,611,2.379,612,2.958,613,2.958,614,2.958,615,2.609,616,1.567,617,2.958,618,2.958,619,2.958]],["title/classes/ChannelNotTextBasedException.html",[0,0.247,575,3.074]],["body/classes/ChannelNotTextBasedException.html",[0,0.403,2,1.024,3,0.115,4,0.102,5,0.102,12,1.024,17,0.335,19,0.712,20,0.009,21,0.51,22,0.29,23,0.598,31,0.144,38,0.476,49,0.16,60,1.377,70,2.915,72,2.472,73,1.082,76,2.403,79,0.007,80,0.007,228,3.151,414,2.409,485,1.367,501,1.742,575,5.459,576,5.336,577,5.459,578,5.459,579,4.475,588,4.103,620,3.596,621,4.9,622,5.336,623,3.522,624,6.307,625,4.603,626,6.307,627,4.493,628,4.493,629,3.785,630,4.9,631,3.151,632,5.047,633,2.725,634,4.005,635,4.286,636,2.819,637,5.047,638,4.27,639,3.785,640,3.596,641,3.596,642,3.785,643,3.785,644,3.785,645,3.785,646,5.047]],["title/classes/ChannelNotTextBasedExceptionFilter.html",[0,0.247,638,3.278]],["body/classes/ChannelNotTextBasedExceptionFilter.html",[0,0.396,2,0.999,3,0.112,4,0.1,5,0.1,8,0.326,9,0.926,17,0.326,19,0.695,20,0.009,21,0.497,22,0.283,23,0.583,30,0.714,31,0.141,38,0.465,49,0.157,60,1.356,70,2.276,72,1.93,73,0.775,76,3.238,79,0.007,80,0.007,228,3.877,414,1.881,485,1.334,501,2.143,575,5.668,576,5.254,577,5.398,578,5.398,579,4.646,588,3.203,620,3.508,621,4.845,622,4.166,623,2.75,624,4.924,626,4.924,627,4.845,628,5.088,629,3.692,630,5.088,631,3.074,632,4.924,633,3.352,634,4.928,635,4.854,636,3.468,637,4.924,638,5.254,639,4.656,640,4.845,641,3.508,642,3.692,643,3.692,644,3.692,645,3.692,646,4.924,647,5.582]],["title/classes/CleanWfpMember.html",[0,0.247,405,3.278]],["body/classes/CleanWfpMember.html",[0,0.273,2,0.869,3,0.098,4,0.087,5,0.087,8,0.284,9,0.846,10,1.605,12,0.869,17,0.376,19,0.8,20,0.009,21,0.746,22,0.326,23,0.672,25,4.406,26,0.891,27,3.434,29,3.062,30,0.621,31,0.154,32,3.283,34,2.91,35,0.935,36,1.005,37,1.407,38,0.404,39,0.935,45,2.673,46,2.91,47,2.673,48,1.864,49,0.108,50,1.217,55,3.283,60,1.239,62,1.852,77,1.958,79,0.007,80,0.007,215,3.131,216,1.276,360,2.7,377,4.191,405,4.8,408,3.398,470,3.05,485,1.16,489,2.166,538,3.904,648,6.362,649,4.281,650,6.431,651,4.281,652,4.854,653,4.854,654,4.854,655,3.398,656,4.041,657,2.91,658,5.673,659,5.375,660,5.284,661,4.281,662,3.623,663,4.281,664,3.398,665,3.904,666,4.854,667,4.854,668,3.21,669,3.542,670,4.854,671,4.854,672,3.21,673,4.854,674,4.8,675,4.854,676,4.854,677,4.854,678,3.904,679,3.623,680,4.406,681,4.854,682,4.854,683,4.854,684,3.904,685,4.854,686,3.398,687,4.8,688,4.854,689,5.173,690,4.854,691,5.673,692,5.673,693,5.173,694,5.673,695,4.281,696,4.281,697,3.398,698,3.05]],["title/classes/CommandValidationFilter.html",[0,0.247,699,3.074]],["body/classes/CommandValidationFilter.html",[0,0.323,2,1.026,3,0.115,4,0.103,5,0.103,8,0.335,9,0.941,10,1.736,17,0.335,19,0.714,20,0.009,21,0.638,22,0.291,23,0.599,29,2.73,30,0.734,31,0.157,35,1.104,38,0.596,39,1.104,49,0.128,60,1.379,62,1.472,76,3.433,77,1.745,79,0.007,80,0.007,215,2.338,216,1.508,234,2.61,501,2.179,627,4.905,628,5.137,640,4.905,655,4.013,656,4.498,669,3.157,686,4.013,698,4.498,699,5.011,700,6.314,701,5.057,702,5.733,703,8.175,704,5.733,705,7.159,706,5.733,707,5.733,708,5.733,709,5.733,710,4.611,711,5.733,712,5.733,713,2.824,714,5.733,715,5.733,716,4.013,717,5.733,718,5.733,719,4.279]],["title/classes/CommunityQuestionCommand.html",[0,0.247,392,3.278]],["body/classes/CommunityQuestionCommand.html",[0,0.192,2,0.612,3,0.069,4,0.061,5,0.061,8,0.2,9,0.661,10,1.768,12,0.9,13,1.683,14,2.676,16,2.146,17,0.385,19,0.819,20,0.01,21,0.694,22,0.334,23,0.688,25,3.777,26,1.095,27,2.842,29,2.842,30,0.764,31,0.156,32,2.567,33,1.884,34,3.015,35,0.969,36,0.707,37,0.99,38,0.419,39,0.658,40,1.122,45,1.881,46,2.048,47,1.881,48,0.99,49,0.076,50,1.261,51,1.525,58,1.396,60,1.613,62,2.075,65,0.691,72,2.276,77,1.817,79,0.005,80,0.005,85,1.626,215,2.05,216,2.09,222,1.457,238,3.52,272,2.299,276,2.048,294,1.744,355,2.391,370,5.264,392,3.753,485,0.816,569,3.326,588,1.96,656,3.16,662,3.753,669,2.769,672,2.259,686,2.391,698,2.146,719,3.753,720,6.189,721,3.013,722,5.029,723,5.968,724,5.264,725,3.416,726,5.029,727,5.807,728,4.801,729,3.416,730,3.416,731,7.452,732,4.913,733,3.416,734,3.416,735,4.913,736,6.583,737,3.416,738,3.416,739,2.391,740,5.029,741,2.259,742,3.326,743,3.013,744,3.013,745,4.436,746,5.264,747,3.013,748,3.416,749,3.416,750,3.416,751,2.549,752,2.549,753,3.416,754,4.354,755,3.416,756,3.416,757,3.416,758,3.013,759,2.549,760,2.549,761,6.583,762,3.416,763,3.416,764,2.549,765,5.029,766,3.416,767,5.029,768,2.748,769,3.013,770,4.436,771,3.416,772,2.259,773,2.94,774,5.029,775,3.013,776,3.416,777,3.013,778,5.029,779,6.583,780,2.748,781,3.013,782,2.549,783,3.416,784,5.029,785,5.029,786,3.416,787,3.416,788,3.416,789,4.436,790,3.416,791,3.416,792,5.029,793,3.416,794,3.013,795,3.416,796,5.029,797,4.045,798,3.416,799,2.748,800,3.416,801,3.416,802,3.416,803,3.416,804,3.416,805,4.436,806,3.416,807,3.416,808,3.416,809,3.416,810,3.416,811,3.416,812,3.416,813,2.259,814,3.416,815,5.968,816,3.416,817,3.416,818,3.416,819,1.683,820,3.013,821,3.013,822,3.013,823,3.013,824,2.391,825,3.416,826,3.013,827,1.574,828,5.029,829,3.013,830,2.748,831,3.416,832,3.416]],["title/classes/CommunityQuestionDto.html",[0,0.247,732,3.278]],["body/classes/CommunityQuestionDto.html",[0,0.406,2,1.036,3,0.116,4,0.104,5,0.104,8,0.338,17,0.421,20,0.009,22,0.437,26,1.321,31,0.145,35,1.115,36,1.199,49,0.129,73,1.138,77,2.193,79,0.007,80,0.007,202,1.602,235,3.197,259,3.345,302,3.733,303,2.584,348,3.024,485,2.084,577,5.041,710,5.793,731,7.694,732,5.375,754,4.763,758,6.352,759,5.375,833,6.915,834,5.106,835,5.375,836,6.352,837,6.352,838,7.202,839,6.352,840,5.789,841,5.375,842,5.789,843,4.32,844,5.793]],["title/classes/CommunityQuestionFormDto.html",[0,0.247,735,3.278]],["body/classes/CommunityQuestionFormDto.html",[0,0.371,2,1.179,3,0.132,4,0.118,5,0.118,8,0.385,17,0.385,20,0.009,22,0.334,26,1.208,31,0.156,35,1.268,36,1.363,39,1.268,49,0.147,79,0.008,80,0.008,202,1.732,735,5.811,805,7.313,845,6.868,846,5.806,847,8.291,848,7.786,849,6.583,850,5.806]],["title/interfaces/DiscordExecutionContext.html",[363,2.52,851,3.278]],["body/interfaces/DiscordExecutionContext.html",[0,0.333,3,0.119,4,0.106,5,0.106,8,0.346,9,0.96,10,1.316,12,1.059,17,0.346,20,0.009,30,0.757,31,0.159,37,1.714,38,0.492,39,1.139,48,1.714,49,0.132,50,1.483,58,1.548,60,1.139,62,1.519,79,0.007,80,0.007,134,2.817,199,1.585,222,1.714,234,2.157,363,3.394,365,4.141,378,3.475,382,1.942,383,3.257,404,2.763,501,1.801,623,3.596,851,5.908,852,5.447,853,4.758,854,4.746,855,7.291,856,5.915,857,4.376,858,4.141,859,4.415,860,4.141,861,3.546,862,3.717,863,3.717,864,4.141,865,5.218,866,5.218]],["title/classes/DiscordGuildMember.html",[0,0.247,867,3.278]],["body/classes/DiscordGuildMember.html",[0,0.372,2,0.904,3,0.101,4,0.09,5,0.09,8,0.295,17,0.494,20,0.009,22,0.455,23,0.69,26,1.552,31,0.148,49,0.113,65,1.487,67,2.131,73,1.271,79,0.007,80,0.007,90,1.893,196,1.394,202,1.469,293,4.622,294,3.37,301,3.636,302,3.953,303,2.255,304,4.622,307,3.37,450,3.275,476,4.027,478,4.149,827,3.389,867,4.928,868,7.566,869,4.456,870,4.22,871,6.488,872,6.488,873,5.149,874,4.852,875,5.052,876,4.063,877,5.052,878,5.052,879,5.052,880,5.052,881,5.052,882,6.603,883,5.052,884,5.052,885,5.824,886,3.028]],["title/classes/DiscordUser.html",[0,0.247,886,2.633]],["body/classes/DiscordUser.html",[0,0.281,2,0.605,3,0.068,4,0.06,5,0.06,8,0.197,17,0.484,20,0.009,22,0.462,26,1.518,31,0.1,48,1.897,49,0.075,60,0.961,72,2.527,73,1.257,77,1.518,79,0.005,80,0.005,90,1.265,196,2.457,202,1.319,231,3.016,302,3.695,303,1.507,360,3.259,416,4.114,417,5.116,428,3.298,429,2.861,430,4.965,445,1.86,450,3.384,452,3.925,476,3.979,478,3.725,481,4.114,485,2.116,607,2.025,824,5.116,827,3.368,870,3.756,873,5.116,874,4.532,876,4.011,886,3.554,887,2.716,888,5.775,889,5.775,890,6.447,891,5.775,892,5.775,893,4.834,894,4.769,895,6.547,896,4.886,897,3.377,898,6.547,899,3.377,900,4.987,901,3.377,902,3.377,903,3.377,904,4.987,905,4.987,906,4.987,907,4.987,908,3.377,909,4.399,910,3.377,911,3.377,912,4.987,913,4.987,914,3.377,915,3.722,916,3.377,917,3.377,918,4.987,919,4.987,920,3.377,921,4.425,922,3.722,923,2.52]],["title/injectables/DmMessageHandler.html",[199,0.954,924,3.074]],["body/injectables/DmMessageHandler.html",[0,0.304,3,0.108,4,0.096,5,0.096,8,0.315,9,0.905,10,1.688,17,0.403,19,0.671,20,0.009,21,0.48,22,0.274,23,0.563,26,0.989,30,0.69,31,0.166,35,1.038,36,1.116,38,0.449,39,1.038,49,0.12,62,1.384,74,2.855,76,2.263,79,0.007,80,0.007,85,2.567,199,1.496,200,2.136,202,1.532,203,2.693,214,2.406,215,2.198,216,1.995,234,2.511,327,2.332,404,2.578,741,3.565,742,3.565,764,4.023,772,3.565,773,2.655,827,2.484,924,4.82,925,6.102,926,6.102,927,4.336,928,6.885,929,6.885,930,5.39,931,5.39,932,6.885,933,5.39,934,5.39,935,4.023,936,3.565,937,5.39,938,3.773,939,3.387,940,4.023,941,4.754,942,5.39,943,5.39,944,6.885,945,5.39,946,5.39,947,5.39,948,3.773,949,4.754,950,6.885,951,5.39,952,5.39,953,5.39,954,5.39,955,5.39,956,5.39,957,5.39,958,5.39,959,4.336,960,5.39,961,4.754,962,5.39,963,5.39,964,4.336,965,3.565,966,5.39,967,5.39]],["title/classes/EditRoleData.html",[0,0.247,968,3.074]],["body/classes/EditRoleData.html",[0,0.287,2,0.473,3,0.053,4,0.047,5,0.047,8,0.154,17,0.432,20,0.009,21,0.658,22,0.457,23,0.856,26,1.356,31,0.102,39,0.797,48,2.5,49,0.059,60,0.797,61,1.748,72,1.995,73,1.235,77,1.26,79,0.004,80,0.004,90,0.99,100,1.217,202,1.134,214,1.846,216,1.89,231,2.818,259,3.393,272,1.018,280,2.141,290,1.584,300,1.748,301,3.958,302,3.668,303,1.179,342,4.162,348,2.63,360,3.018,416,3.204,424,3.372,428,1.748,429,1.516,430,5.067,435,1.297,436,2.736,445,2.278,450,3.469,452,3.755,459,2.736,469,4.65,476,4.075,478,4.174,481,3.936,485,2.105,489,3.912,606,2.896,607,1.584,655,3.569,665,2.125,824,1.85,874,1.584,896,5.514,915,4.306,923,1.972,968,3.569,969,1.972,970,5.343,971,5.943,972,5.943,973,5.172,974,5.943,975,4.497,976,2.642,977,3.649,978,3.649,979,2.642,980,3.649,981,4.497,982,2.642,983,4.497,984,4.497,985,4.101,986,3.649,987,3.649,988,3.649,989,2.642,990,2.642,991,2.642,992,4.497,993,2.642,994,4.641,995,2.642,996,2.331,997,3.649,998,2.6,999,3.649,1000,2.896,1001,2.642,1002,2.642,1003,2.642,1004,3.649,1005,2.125,1006,2.896,1007,1.748,1008,2.331,1009,3.328,1010,2.48,1011,4.641,1012,2.331,1013,4.641,1014,2.331,1015,3.328,1016,2.331,1017,2.331,1018,2.331,1019,2.331,1020,2.331,1021,2.331,1022,2.125,1023,2.331,1024,3.569,1025,2.331,1026,2.896,1027,1.972,1028,2.125,1029,2.125,1030,2.331,1031,1.972]],["title/interfaces/EventToLog.html",[218,2.091,363,2.52]],["body/interfaces/EventToLog.html",[3,0.117,4,0.105,5,0.105,8,0.342,9,0.953,17,0.342,19,0.728,20,0.009,21,0.521,22,0.297,23,0.611,30,0.748,31,0.117,38,0.487,49,0.13,79,0.007,80,0.007,203,2.976,213,3.338,218,3.45,220,3.456,235,2.383,363,3.354,365,4.092,485,1.731,505,3.838,512,3.838,514,3.698,621,5.172,633,3.919,1032,5.156,1033,8.622,1034,6.621,1035,8.231,1036,8.231,1037,6.391,1038,5.846,1039,4.792,1040,6.391,1041,6.621,1042,7.246,1043,5.828]],["title/classes/Explorer.html",[0,0.247,1044,3.533]],["body/classes/Explorer.html",[0,0.286,2,0.911,3,0.102,4,0.091,5,0.091,8,0.297,9,0.872,12,1.187,13,2.506,14,3.033,17,0.457,19,0.973,20,0.009,21,0.697,22,0.397,23,0.817,27,3.514,30,0.944,31,0.157,33,2.485,35,0.98,36,1.373,39,0.98,49,0.113,50,2.153,58,1.407,60,1.422,70,2.074,79,0.007,80,0.007,99,3.158,213,3.056,216,1.338,222,1.922,364,3.56,450,2.785,616,2.694,1034,4.091,1039,3.364,1044,5.334,1045,4.486,1046,6.632,1047,6.509,1048,6.632,1049,6.632,1050,8.471,1051,5.086,1052,6.632,1053,5.086,1054,8.317,1055,6.632,1056,5.086,1057,6.632,1058,5.086,1059,4.091,1060,5.334,1061,5.086,1062,5.086,1063,5.334,1064,5.086,1065,5.086,1066,5.086,1067,5.086,1068,5.086,1069,5.086,1070,5.086,1071,5.086,1072,5.086,1073,4.486,1074,5.086]],["title/classes/Guild.html",[0,0.247,435,0.909]],["body/classes/Guild.html",[0,0.404,2,1.03,3,0.116,4,0.103,5,0.103,8,0.336,17,0.457,20,0.009,21,0.729,22,0.454,26,1.435,31,0.144,42,2.043,49,0.16,65,1.581,67,1.668,73,1.267,79,0.007,80,0.007,90,2.156,202,1.596,304,5.023,435,1.695,476,4.148,870,3.302,1075,4.629,1076,6.289,1077,5.772,1078,5.836,1079,5.755,1080,5.755,1081,5.755,1082,2.938,1083,3.302,1084,4.629,1085,3.302]],["title/controllers/GuildAutoDeleteChannelController.html",[81,1.48,1086,3.278]],["body/controllers/GuildAutoDeleteChannelController.html",[0,0.347,3,0.091,4,0.081,5,0.081,8,0.266,9,0.81,10,1.89,12,0.815,17,0.408,19,0.869,20,0.009,21,0.622,22,0.354,23,0.73,26,1.281,30,0.893,31,0.15,37,1.318,38,0.379,49,0.102,50,1.14,58,1.481,60,1.345,62,1.792,65,1.694,73,1.179,79,0.006,80,0.006,81,1.533,83,1.659,216,1.967,222,1.318,235,1.855,246,2.727,263,3.87,327,3.021,382,2.456,390,3.963,391,2.859,414,2.776,435,0.942,530,2.61,560,4.887,561,4.618,562,5.21,616,3.963,1086,4.596,1087,5.619,1088,5.148,1089,3.659,1090,7.493,1091,6.981,1092,6.158,1093,6.981,1094,4.55,1095,5.768,1096,4.55,1097,4.55,1098,4.55,1099,4.55,1100,4.55,1101,6.158,1102,6.599,1103,4.618,1104,4.013,1105,4.013,1106,3.395,1107,4.55,1108,4.55,1109,4.55,1110,5.21,1111,4.55,1112,6.981,1113,4.55,1114,4.013,1115,3.659,1116,4.55,1117,6.158]],["title/classes/GuildAutoDeleteChannelDto.html",[0,0.247,1095,3.074]],["body/classes/GuildAutoDeleteChannelDto.html",[0,0.406,2,1.038,3,0.117,4,0.104,5,0.104,8,0.339,17,0.422,20,0.009,22,0.417,26,1.323,31,0.158,42,2.059,49,0.129,73,1.224,79,0.007,80,0.007,90,2.173,202,1.604,302,3.736,303,2.589,382,2.576,404,2.251,476,3.736,501,2.195,503,4.005,874,3.477,1087,5.19,1088,5.159,1095,5.047,1110,4.329,1118,6.921,1119,4.665,1120,4.323,1121,7.847,1122,5.8,1123,5.8,1124,7.211,1125,7.211,1126,7.211,1127,6.36,1128,5.8,1129,5.8,1130,5.8,1131,5.8,1132,5.8]],["title/modules/GuildAutoDeleteChannelModule.html",[92,1.519,1133,3.074]],["body/modules/GuildAutoDeleteChannelModule.html",[0,0.285,3,0.102,4,0.091,5,0.091,16,2.35,20,0.009,31,0.176,35,0.976,36,1.05,38,0.422,40,1.664,49,0.113,79,0.007,80,0.007,83,2.413,92,2.548,94,2.335,95,2.335,96,2.497,97,2.497,98,2.335,99,3.508,100,3.394,110,3.26,111,2.497,112,1.848,114,2.685,123,2.685,134,2.413,142,2.497,317,2.791,376,4.576,377,4.241,378,3.956,382,1.664,383,2.791,389,3.797,390,3.505,391,4.158,435,1.678,1086,5.498,1087,5.166,1088,4.682,1103,5.871,1133,6.374,1134,4.471,1135,4.471,1136,4.471,1137,4.094,1138,5.221,1139,4.471,1140,4.471,1141,4.471,1142,4.077,1143,2.908]],["title/injectables/GuildAutoDeleteChannelService.html",[199,0.954,1103,2.905]],["body/injectables/GuildAutoDeleteChannelService.html",[0,0.235,3,0.084,4,0.075,5,0.075,8,0.244,9,0.764,10,1.879,12,1.04,13,2.059,14,2.863,15,3.678,16,2.041,17,0.443,19,0.831,20,0.009,21,0.595,22,0.339,23,0.698,30,0.855,31,0.158,33,2.177,35,0.805,36,0.865,37,1.211,38,0.348,39,0.805,40,1.372,49,0.093,50,1.674,51,1.865,58,1.232,60,1.552,62,2.016,65,1.66,73,1.09,77,1.272,79,0.006,80,0.006,199,1.262,200,1.656,202,1.292,203,2.432,214,1.865,215,1.704,216,1.528,222,1.211,319,2.398,327,2.514,355,2.925,382,2.578,390,4.159,414,1.957,435,1.203,503,3.872,567,5.124,586,2.626,587,3.119,1085,2.398,1087,5.694,1088,5.2,1090,6.691,1095,5.052,1103,3.843,1104,3.686,1105,3.686,1110,3.119,1138,5.061,1141,3.686,1144,3.361,1145,7.218,1146,4.673,1147,5.81,1148,4.179,1149,5.81,1150,4.179,1151,5.124,1152,3.686,1153,5.81,1154,4.179,1155,4.179,1156,4.179,1157,4.179,1158,2.626,1159,4.179,1160,4.179,1161,4.179,1162,4.179,1163,4.179,1164,4.179,1165,4.179,1166,4.179,1167,4.179,1168,3.361,1169,3.686,1170,4.179,1171,4.179,1172,4.179,1173,3.119,1174,4.179,1175,4.179,1176,4.179,1177,3.686,1178,3.686]],["title/classes/GuildChannelEditOptions.html",[0,0.247,488,2.905]],["body/classes/GuildChannelEditOptions.html",[0,0.361,2,0.58,3,0.065,4,0.058,5,0.058,8,0.189,17,0.436,20,0.009,21,0.665,22,0.458,23,0.874,26,1.368,31,0.116,39,0.624,48,2.505,49,0.072,65,0.654,72,2.579,73,1.242,79,0.005,80,0.005,90,1.213,196,0.894,202,1.075,216,1.271,230,2.034,231,2.97,259,3.506,280,2.428,290,1.941,300,2.141,301,4.607,302,3.947,303,1.445,342,4.107,348,2.029,360,2.029,404,1.509,414,2.96,415,2.416,416,2.034,417,3.383,418,2.604,419,1.652,420,5.999,421,2.604,422,2.416,423,2.416,424,2.141,425,2.604,426,5.999,428,2.141,429,1.858,430,4.756,431,2.604,435,0.67,436,2.141,438,2.604,441,2.266,442,2.604,445,3.184,446,3.607,448,2.604,450,3.022,452,1.941,454,4.786,455,2.604,457,4.048,459,3.197,460,2.604,463,2.416,464,2.266,465,2.604,466,3.634,468,2.604,469,2.266,470,2.034,472,2.604,476,4.197,477,4.651,478,3.634,479,2.604,480,2.604,481,4.686,482,3.634,483,4.651,484,4.651,485,2.138,486,2.604,487,2.604,488,3.825,489,2.157,490,2.604,491,3.607,492,3.037,493,3.887,494,3.197,495,4.651,496,2.604,497,3.383,498,3.887,874,1.941,980,2.856,985,3.887,996,2.856,1179,3.238,1180,3.238,1181,3.238,1182,3.238,1183,3.238,1184,3.238,1185,3.238,1186,3.238,1187,3.238,1188,3.238]],["title/controllers/GuildController.html",[81,1.48,1189,3.278]],["body/controllers/GuildController.html",[0,0.282,3,0.1,4,0.089,5,0.089,8,0.292,9,0.863,10,1.842,12,0.895,14,2.669,17,0.383,19,0.816,20,0.009,21,0.652,22,0.333,23,0.685,26,1.203,30,0.839,31,0.162,33,2.458,35,0.963,36,1.035,37,1.449,38,0.416,39,0.963,49,0.112,50,1.644,58,1.391,60,1.595,62,1.995,65,1.571,73,1.149,79,0.007,80,0.007,81,2.21,83,1.823,85,2.381,86,2.552,88,2.754,91,2.869,235,2.039,253,2.998,272,2.526,327,2.838,377,3.736,414,2.21,441,5.438,464,5.438,530,2.869,716,3.5,1142,4.022,1189,4.895,1190,4.411,1191,6.559,1192,6.559,1193,5.001,1194,7.769,1195,7.769,1196,5.001,1197,5.001,1198,5.276,1199,5.001,1200,4.022,1201,5.001,1202,5.001,1203,7.769,1204,7.769,1205,6.559,1206,5.001,1207,5.001,1208,5.001,1209,5.001,1210,5.001,1211,5.001,1212,5.001]],["title/classes/GuildDoesNotExistException.html",[0,0.247,1213,3.074]],["body/classes/GuildDoesNotExistException.html",[0,0.401,2,1.019,3,0.114,4,0.102,5,0.102,12,1.019,17,0.333,19,0.708,20,0.009,21,0.507,22,0.289,23,0.595,31,0.143,38,0.474,49,0.159,60,1.372,65,1.44,70,2.905,72,2.69,73,1.079,76,2.389,79,0.007,80,0.007,228,3.133,435,1.611,485,1.36,501,1.732,506,4.271,579,4.463,588,4.088,620,3.575,621,4.888,622,5.317,623,3.51,625,4.576,627,4.477,628,4.477,629,3.763,630,4.888,631,3.133,633,2.709,634,3.982,635,4.271,636,2.803,639,3.763,640,3.575,641,3.575,642,3.763,643,3.763,644,3.763,645,3.763,893,3.763,1213,5.445,1214,5.73,1215,5.445,1216,3.763,1217,3.763,1218,5.018,1219,5.018,1220,4.246,1221,5.018]],["title/classes/GuildDoesNotExistExceptionFilter.html",[0,0.247,1220,3.278]],["body/classes/GuildDoesNotExistExceptionFilter.html",[0,0.395,2,0.994,3,0.112,4,0.099,5,0.099,8,0.325,9,0.923,17,0.325,19,0.691,20,0.009,21,0.495,22,0.282,23,0.58,30,0.71,31,0.141,38,0.462,49,0.157,60,1.351,65,1.122,70,2.263,72,2.426,73,0.77,76,3.229,79,0.007,80,0.007,228,3.863,435,1.453,485,1.327,501,2.136,506,3.328,579,4.636,588,3.185,620,3.488,621,4.833,622,4.143,623,2.735,627,4.833,628,5.078,629,3.672,630,5.078,631,3.057,633,3.34,634,4.91,635,4.844,636,3.456,639,4.64,640,4.833,641,3.488,642,3.672,643,3.672,644,3.672,645,3.672,893,3.672,1213,5.656,1214,5.643,1215,5.384,1216,3.672,1217,3.672,1218,4.896,1219,4.896,1220,5.236,1221,4.896,1222,4.896]],["title/injectables/GuildMemberEvents.html",[199,0.954,1223,3.074]],["body/injectables/GuildMemberEvents.html",[0,0.16,3,0.057,4,0.051,5,0.051,8,0.167,9,0.577,10,1.887,12,0.786,13,1.404,14,2.499,15,3.309,16,1.699,17,0.431,19,0.853,20,0.01,21,0.636,22,0.362,23,0.716,26,1.257,30,0.877,31,0.16,33,1.644,35,0.549,36,0.59,37,0.826,38,0.237,39,0.549,40,0.936,42,1.012,48,0.826,49,0.064,50,1.626,51,1.272,55,3.067,58,1.514,60,1.456,61,3.538,62,2.269,63,2.514,64,3.538,65,1.081,66,3.071,67,1.55,72,0.985,73,0.396,74,2.833,76,2.246,77,0.868,78,2.514,79,0.004,80,0.004,85,2.547,134,1.357,142,1.404,196,2.168,199,0.953,200,1.129,202,0.976,203,2.024,214,1.272,215,1.162,216,1.407,222,1.741,234,1.6,252,2.73,348,1.842,377,3.643,378,2.861,382,1.441,383,1.569,404,1.369,408,1.995,414,0.96,435,0.59,489,2.387,502,1.995,569,2.902,587,2.127,616,1.509,859,2.127,860,3.745,886,1.708,893,1.885,965,3.538,1010,1.708,1031,2.127,1137,3.517,1143,1.635,1200,2.292,1223,3.071,1224,6.668,1225,2.514,1226,3.87,1227,4.387,1228,4.833,1229,4.387,1230,4.387,1231,4.387,1232,4.387,1233,4.387,1234,6.493,1235,4.387,1236,2.85,1237,4.387,1238,5.742,1239,4.387,1240,2.85,1241,3.529,1242,4.387,1243,2.85,1244,4.387,1245,4.387,1246,2.85,1247,4.387,1248,3.992,1249,2.85,1250,4.387,1251,5.349,1252,4.387,1253,2.85,1254,2.85,1255,4.387,1256,2.292,1257,2.63,1258,2.85,1259,2.292,1260,3.529,1261,2.85,1262,4.303,1263,2.85,1264,4.387,1265,2.514,1266,1.885,1267,2.292,1268,2.85,1269,2.514,1270,2.514,1271,3.274,1272,2.85,1273,2.292,1274,2.514,1275,2.85,1276,2.292,1277,2.85,1278,2.85,1279,2.514,1280,2.292,1281,2.85,1282,4.387,1283,3.87,1284,2.85,1285,4.387,1286,2.85,1287,3.87,1288,3.87,1289,4.718,1290,2.514,1291,2.85,1292,6.852,1293,2.292,1294,2.85,1295,2.292,1296,2.85,1297,2.85,1298,2.85,1299,2.514,1300,2.85,1301,2.85,1302,2.85,1303,2.85,1304,2.85,1305,2.85,1306,2.85,1307,2.85,1308,2.514,1309,2.514,1310,2.514,1311,2.292,1312,2.85,1313,2.514,1314,2.85,1315,2.85,1316,2.514,1317,2.514,1318,2.292,1319,2.85,1320,2.85,1321,2.85,1322,2.85,1323,2.514,1324,2.85,1325,2.514,1326,2.85,1327,1.995,1328,4.387,1329,5.349,1330,2.85,1331,6.008,1332,2.85,1333,2.85,1334,2.85,1335,2.85,1336,2.85,1337,3.87,1338,2.514,1339,4.718,1340,2.292,1341,2.85,1342,2.85,1343,2.85,1344,4.387,1345,2.85,1346,2.85,1347,2.85,1348,2.85,1349,2.85,1350,2.85]],["title/injectables/GuildMessageHandler.html",[199,0.954,1351,3.074]],["body/injectables/GuildMessageHandler.html",[0,0.246,3,0.088,4,0.078,5,0.078,8,0.255,9,0.788,10,1.814,12,1.073,17,0.4,19,0.851,20,0.01,21,0.609,22,0.391,23,0.715,26,1.099,30,0.767,31,0.164,35,0.842,36,0.905,37,1.266,38,0.364,39,0.842,49,0.097,50,1.095,58,1.45,60,1.417,62,1.538,65,0.883,67,1.266,79,0.006,80,0.006,85,2.08,142,2.152,199,1.301,200,1.731,214,1.95,216,1.149,222,1.266,234,2.682,276,2.619,360,1.835,382,1.435,404,2.66,414,1.472,503,2.23,569,3.962,687,3.261,824,3.058,852,3.261,858,4.786,925,5.917,927,3.514,936,2.89,941,6.03,1082,2.23,1137,3.922,1143,2.507,1266,2.89,1290,3.854,1351,4.194,1352,5.917,1353,5.284,1354,5.991,1355,4.369,1356,4.369,1357,5.991,1358,5.991,1359,4.369,1360,5.991,1361,4.369,1362,6.2,1363,3.261,1364,4.369,1365,4.369,1366,3.514,1367,3.514,1368,3.514,1369,6.837,1370,4.369,1371,6.489,1372,6.489,1373,7.356,1374,3.854,1375,6.03,1376,4.369,1377,4.369,1378,4.369,1379,4.369,1380,5.991,1381,4.369,1382,4.369,1383,4.369,1384,4.369,1385,4.369,1386,4.369,1387,4.369,1388,5.991,1389,4.369,1390,4.369,1391,4.369,1392,4.369,1393,4.369,1394,4.369,1395,4.369,1396,4.369,1397,4.369]],["title/modules/GuildModule.html",[92,1.519,105,3.074]],["body/modules/GuildModule.html",[0,0.254,3,0.091,4,0.081,5,0.081,16,2.273,20,0.009,31,0.178,35,0.868,36,0.933,38,0.375,40,1.48,49,0.101,79,0.006,80,0.006,83,2.232,92,2.403,94,2.077,95,2.077,96,2.221,97,2.221,98,2.077,99,3.309,100,3.202,105,6.423,110,3.015,111,2.221,112,1.644,114,3.242,123,2.388,130,5.315,132,5.315,134,2.147,135,3.976,141,5.315,142,2.221,143,3.976,317,2.483,376,4.425,377,4.45,389,4.276,390,3.68,391,2.833,404,1.91,435,1.614,660,2.982,924,5.625,926,3.626,1087,4.048,1088,3.669,1133,5.625,1142,3.626,1189,5.186,1223,5.625,1351,5.625,1352,3.626,1398,3.976,1399,3.976,1400,3.976,1401,3.976,1402,5.625,1403,5.625,1404,4.508,1405,4.508,1406,4.508,1407,6.12,1408,6.12,1409,4.508,1410,3.626,1411,2.587,1412,3.976,1413,4.508]],["title/controllers/GuildRestrictedChannelController.html",[81,1.48,1414,3.278]],["body/controllers/GuildRestrictedChannelController.html",[0,0.383,3,0.136,4,0.122,5,0.122,20,0.009,31,0.136,38,0.565,49,0.152,79,0.008,80,0.008,81,2.289,83,2.477,382,2.231,389,4.967,390,3.598,414,2.672,435,1.407,530,3.898,1089,5.464,1414,5.919,1415,6.793]],["title/modules/GuildRestrictedChannelModule.html",[92,1.519,1402,3.074]],["body/modules/GuildRestrictedChannelModule.html",[0,0.33,3,0.118,4,0.105,5,0.105,16,2.439,20,0.009,31,0.17,35,1.128,36,1.213,38,0.487,40,1.923,49,0.131,79,0.007,80,0.007,83,2.645,92,2.725,94,2.699,95,2.699,96,2.886,97,2.886,98,2.699,99,3.753,100,3.631,110,3.574,111,2.886,112,2.136,114,3.102,123,3.102,317,3.225,376,4.986,382,1.923,389,4.726,390,3.102,391,3.68,435,1.502,1139,5.166,1140,5.166,1402,6.235,1414,5.882,1416,5.166,1417,5.166,1418,5.857]],["title/injectables/GuildRestrictedChannelService.html",[199,0.954,376,2.419]],["body/injectables/GuildRestrictedChannelService.html",[0,0.25,3,0.089,4,0.08,5,0.08,8,0.26,9,0.798,10,1.935,12,1.086,13,2.191,14,2.919,15,3.8,16,2.096,17,0.453,19,0.965,20,0.009,21,0.691,22,0.394,23,0.811,30,0.948,31,0.156,33,2.272,35,0.857,36,0.921,37,1.289,38,0.37,39,0.857,40,1.46,42,1.579,49,0.099,50,1.52,51,1.985,58,1.572,65,1.759,73,1.229,79,0.006,80,0.006,196,1.227,199,1.317,200,1.762,222,1.289,272,2.987,319,2.552,327,3.207,376,3.339,382,2.628,389,4.992,390,4.239,414,2.325,503,4.47,1082,3.783,1120,4.137,1144,3.577,1146,5.55,1151,3.923,1152,3.923,1158,2.795,1419,6.064,1420,6.064,1421,6.064,1422,4.447,1423,6.064,1424,4.447,1425,6.064,1426,4.447,1427,5.349,1428,5.961,1429,4.447,1430,4.447,1431,4.447,1432,4.447,1433,4.447,1434,4.447]],["title/injectables/GuildService.html",[199,0.954,377,2.242]],["body/injectables/GuildService.html",[0,0.124,3,0.044,4,0.04,5,0.04,8,0.129,9,0.472,10,1.863,12,0.642,14,2.359,15,2.871,16,1.474,17,0.407,19,0.839,20,0.01,21,0.621,22,0.342,23,0.704,26,0.406,27,1.709,30,0.986,31,0.123,33,1.345,35,0.426,36,0.458,37,0.641,38,0.184,39,0.426,40,0.726,42,0.785,48,1.511,49,0.049,50,1.746,51,0.987,54,1.65,55,1.832,58,1.429,60,1.563,62,1.88,65,1.596,67,1.04,72,2.237,73,1.173,74,1.171,76,0.928,77,1.969,79,0.004,80,0.004,195,1.95,196,0.61,197,2.151,199,0.779,200,0.876,212,3.649,214,0.987,215,0.901,216,1.371,234,2.239,235,0.901,272,2.208,276,3.681,294,2.312,319,2.059,327,0.956,346,2.886,355,4.528,356,1.95,357,4.598,360,2.189,376,2.871,377,1.832,389,2.059,390,1.171,391,1.389,404,2.104,414,2.179,419,2.926,429,2.059,435,1.187,441,3.649,445,1.976,450,1.902,464,4.298,485,0.528,503,3.555,586,1.389,658,1.95,660,3.448,662,1.65,663,1.95,680,1.268,687,3.891,799,1.778,827,2.087,998,1.389,1082,2.661,1085,2.599,1110,1.65,1114,3.165,1115,2.886,1120,2.715,1158,1.389,1198,5.603,1215,2.512,1228,4.193,1234,1.778,1270,3.165,1273,1.778,1276,1.778,1372,3.995,1427,1.95,1428,1.778,1435,1.95,1436,4.53,1437,4.53,1438,4.53,1439,4.53,1440,3.995,1441,3.588,1442,3.588,1443,1.778,1444,4.53,1445,2.21,1446,2.21,1447,6.14,1448,2.21,1449,4.193,1450,2.21,1451,2.21,1452,2.21,1453,2.21,1454,6.14,1455,4.582,1456,5.825,1457,3.891,1458,2.373,1459,4.53,1460,6.966,1461,6.14,1462,4.53,1463,5.416,1464,4.53,1465,6.739,1466,4.53,1467,3.995,1468,4.53,1469,6.14,1470,6.14,1471,4.53,1472,6.14,1473,4.53,1474,4.53,1475,4.53,1476,3.995,1477,2.886,1478,2.678,1479,2.678,1480,2.21,1481,2.21,1482,2.21,1483,5.213,1484,2.21,1485,3.165,1486,2.21,1487,3.588,1488,3.588,1489,3.588,1490,3.165,1491,4.53,1492,3.588,1493,2.886,1494,3.588,1495,2.21,1496,3.588,1497,2.21,1498,1.95,1499,3.643,1500,2.21,1501,2.21,1502,2.21,1503,3.588,1504,1.778,1505,1.95,1506,1.95,1507,1.95,1508,2.21,1509,2.21,1510,2.21,1511,2.21,1512,2.21,1513,2.21,1514,2.21,1515,2.21,1516,2.21,1517,2.21,1518,3.588,1519,4.53,1520,2.21,1521,1.95,1522,2.21,1523,4.598,1524,3.165,1525,3.588,1526,3.588,1527,4.53,1528,5.213,1529,2.886,1530,2.21,1531,3.588,1532,2.21,1533,2.21,1534,3.588,1535,3.588,1536,2.21,1537,4.53,1538,3.588,1539,2.21,1540,2.21,1541,2.21,1542,3.588,1543,2.21,1544,2.21,1545,2.21,1546,2.21,1547,2.21,1548,3.588,1549,2.21,1550,2.21,1551,2.21,1552,2.21,1553,2.21,1554,2.21,1555,3.588,1556,2.21,1557,3.588,1558,2.21,1559,2.21,1560,2.21,1561,2.21,1562,1.95,1563,2.21]],["title/controllers/GuildSettingsController.html",[81,1.48,1564,3.278]],["body/controllers/GuildSettingsController.html",[0,0.293,3,0.105,4,0.093,5,0.093,8,0.304,9,0.885,10,1.862,17,0.393,19,0.838,20,0.009,21,0.6,22,0.342,23,0.703,26,1.235,30,0.861,31,0.175,38,0.433,42,1.847,49,0.116,58,1.103,60,1.002,62,1.728,65,1.595,73,1.161,79,0.007,80,0.007,81,2.267,83,1.897,85,2.477,86,2.655,87,4.184,88,2.864,91,2.985,134,3.552,197,4.034,222,1.507,234,2.454,235,2.121,246,3.118,247,3.882,248,3.882,252,2.655,254,3.118,255,3.269,256,3.441,257,4.034,258,3.118,259,2.121,260,3.641,263,3.269,378,3.204,382,2.449,383,2.864,435,1.077,560,5.857,562,5.022,582,3.882,860,3.641,1564,5.022,1565,4.588,1566,5.936,1567,7.46,1568,4.588,1569,5.202,1570,5.202,1571,5.887,1572,5.202,1573,5.202,1574,5.202,1575,5.202,1576,5.202,1577,4.184,1578,4.184,1579,5.202,1580,5.202,1581,5.202,1582,5.202,1583,5.202]],["title/modules/GuildSettingsModule.html",[92,1.519,132,2.905]],["body/modules/GuildSettingsModule.html",[0,0.338,3,0.121,4,0.107,5,0.107,16,2.454,20,0.009,31,0.167,38,0.499,40,1.97,49,0.134,79,0.007,80,0.007,83,2.685,92,2.754,94,2.764,95,2.764,96,2.955,97,2.955,98,2.764,99,3.793,100,3.67,110,3.627,111,2.955,112,2.188,132,5.915,134,2.856,378,4.325,382,1.97,383,3.303,435,1.524,1564,5.945,1584,5.291,1585,5.999,1586,5.291,1587,5.999,1588,5.999]],["title/injectables/GuildSettingsService.html",[199,0.954,378,2.091]],["body/injectables/GuildSettingsService.html",[0,0.185,3,0.066,4,0.059,5,0.059,8,0.192,9,0.643,10,2.004,12,0.875,15,2.692,16,1.827,17,0.481,19,1.024,20,0.009,21,0.733,22,0.418,23,0.86,30,1.04,31,0.155,37,0.953,38,0.274,39,0.633,40,1.08,42,1.167,49,0.073,50,1.225,51,1.467,58,1.698,60,1.124,62,1.659,65,1.696,72,1.137,73,1.246,79,0.005,80,0.005,134,3.959,139,1.81,140,1.81,196,0.907,197,4.8,199,1.062,200,1.303,206,4.06,208,3.667,216,1.286,221,2.174,234,1.783,272,1.266,327,3.405,378,2.328,382,2.73,404,2.404,489,1.467,579,1.886,600,2.644,616,1.741,657,1.971,693,2.644,716,3.422,773,1.62,873,2.301,1120,1.971,1213,2.301,1215,2.301,1217,2.174,1443,2.644,1566,4.312,1568,4.312,1589,2.9,1590,5.836,1591,4.888,1592,4.888,1593,4.888,1594,4.888,1595,4.888,1596,4.888,1597,4.888,1598,4.888,1599,4.888,1600,3.288,1601,3.288,1602,5.836,1603,3.288,1604,4.888,1605,3.288,1606,4.888,1607,3.288,1608,4.888,1609,3.288,1610,4.888,1611,3.288,1612,4.888,1613,3.288,1614,3.288,1615,4.888,1616,3.288,1617,4.888,1618,3.288,1619,4.888,1620,3.288,1621,4.888,1622,3.288,1623,3.288,1624,3.288,1625,2.301,1626,3.288,1627,2.9,1628,3.288,1629,3.288,1630,3.288,1631,3.288,1632,3.288,1633,3.288,1634,2.9,1635,3.288,1636,3.288,1637,3.288,1638,3.288,1639,7.701,1640,3.288,1641,3.288,1642,3.288,1643,3.288,1644,3.288,1645,3.288,1646,3.288,1647,3.288,1648,6.462,1649,2.644,1650,3.288,1651,3.288,1652,2.644,1653,3.288,1654,3.288,1655,3.288,1656,3.288,1657,3.288,1658,3.288,1659,3.288,1660,3.288,1661,3.288]],["title/controllers/GuildUserController.html",[81,1.48,1662,3.278]],["body/controllers/GuildUserController.html",[0,0.378,3,0.104,4,0.093,5,0.093,8,0.303,9,0.882,10,1.655,12,0.926,14,2.713,17,0.303,19,0.644,20,0.009,21,0.701,22,0.263,23,0.541,26,0.949,30,0.662,31,0.173,33,2.513,35,0.997,36,1.071,37,1.5,38,0.431,39,0.997,49,0.115,50,1.681,58,1.097,60,0.997,62,1.329,65,1.649,67,2.156,73,1.16,79,0.007,80,0.007,81,2.26,83,1.887,85,2.464,86,2.641,88,2.85,91,2.969,142,3.304,222,1.943,234,2.446,235,2.11,246,3.102,252,3.423,253,3.102,263,3.252,382,2.443,435,1.071,870,4.27,1083,2.969,1106,3.862,1137,3.304,1143,2.969,1173,3.862,1266,3.423,1662,5.005,1663,4.564,1664,6.563,1665,4.564,1666,6.707,1667,5.175,1668,5.175,1669,5.005,1670,4.162,1671,4.564,1672,4.564,1673,7.441,1674,5.175,1675,5.175,1676,5.175,1677,6.707,1678,5.175,1679,5.175,1680,4.564,1681,4.564,1682,5.175,1683,5.175,1684,4.564]],["title/modules/GuildUserModule.html",[92,1.519,141,2.905]],["body/modules/GuildUserModule.html",[0,0.323,3,0.115,4,0.103,5,0.103,16,2.427,20,0.009,31,0.172,35,1.104,36,1.187,38,0.477,40,1.882,49,0.128,79,0.007,80,0.007,83,2.61,92,2.699,94,2.641,95,2.641,96,2.824,97,2.824,98,2.641,99,3.717,100,3.596,110,3.527,111,2.824,112,2.091,114,3.037,123,3.037,134,2.73,141,5.944,142,2.824,317,3.157,378,4.086,382,1.882,383,3.157,435,1.616,1137,4.448,1143,3.29,1662,5.825,1685,5.057,1686,5.733,1687,5.057,1688,5.733,1689,5.733]],["title/injectables/GuildUserService.html",[199,0.954,1137,2.164]],["body/injectables/GuildUserService.html",[0,0.125,3,0.044,4,0.04,5,0.04,8,0.129,9,0.472,10,1.975,12,0.643,14,2.36,15,1.978,16,1.476,17,0.462,19,0.972,20,0.01,21,0.696,22,0.396,23,0.816,26,0.659,30,0.999,31,0.135,33,1.346,35,0.426,36,0.458,37,0.641,38,0.184,39,0.426,40,0.727,42,0.786,49,0.049,50,1.873,51,0.988,54,1.652,55,2.314,58,1.635,60,1.299,62,2.217,64,3.794,65,1.768,66,3.652,67,2.51,68,1.781,72,0.765,73,1.256,77,0.674,79,0.004,80,0.004,134,1.054,139,1.219,140,1.219,142,3.93,197,2.718,199,0.78,200,0.877,210,1.953,214,0.988,215,0.903,216,1.192,234,2.982,252,2.928,272,3.073,276,1.327,294,1.13,319,2.061,327,0.958,346,1.781,348,3.007,378,2.484,382,2.619,383,1.219,419,2.663,435,1.08,489,0.988,586,1.391,660,1.464,813,1.464,859,1.652,1010,1.327,1063,4.197,1082,1.13,1085,1.27,1120,4.478,1137,1.77,1146,3.647,1158,2.258,1226,3.999,1228,4.197,1234,4.614,1241,1.781,1257,1.327,1273,1.781,1280,1.781,1283,1.953,1338,3.169,1362,1.781,1443,1.781,1449,4.942,1456,2.681,1463,3.169,1485,3.169,1498,1.953,1523,3.169,1524,1.953,1562,1.953,1625,3.652,1627,1.953,1690,1.781,1691,4.534,1692,4.534,1693,3.593,1694,3.593,1695,3.593,1696,4.534,1697,3.999,1698,3.593,1699,4.534,1700,3.593,1701,3.593,1702,4.534,1703,2.214,1704,2.214,1705,6.969,1706,2.214,1707,2.214,1708,2.214,1709,3.593,1710,2.214,1711,2.214,1712,2.214,1713,3.593,1714,2.214,1715,3.593,1716,2.214,1717,2.214,1718,2.214,1719,2.214,1720,2.214,1721,3.593,1722,2.214,1723,2.214,1724,5.218,1725,5.218,1726,4.602,1727,2.214,1728,3.593,1729,2.214,1730,3.593,1731,3.593,1732,2.214,1733,1.652,1734,2.214,1735,2.214,1736,2.214,1737,2.214,1738,2.214,1739,1.781,1740,2.214,1741,2.214,1742,2.214,1743,2.214,1744,2.214,1745,2.214,1746,3.894,1747,3.593,1748,2.214,1749,2.214,1750,2.214,1751,2.214,1752,2.214,1753,3.593,1754,2.214,1755,1.781,1756,2.214,1757,2.214,1758,2.214,1759,1.953,1760,2.214,1761,2.214,1762,2.214,1763,2.214,1764,2.214,1765,4.534,1766,3.593,1767,2.214,1768,2.214,1769,2.214,1770,2.214,1771,2.214]],["title/guards/HasRequiredRank.html",[257,2.633,1772,2.52]],["body/guards/HasRequiredRank.html",[0,0.247,3,0.088,4,0.078,5,0.078,8,0.256,9,0.789,10,1.523,12,1.075,16,2.307,17,0.351,19,0.747,20,0.009,21,0.535,22,0.305,23,0.627,30,0.768,31,0.16,36,0.907,37,1.27,38,0.365,40,1.439,42,1.556,49,0.098,50,1.846,51,1.956,55,4.164,58,1.273,60,1.535,62,1.125,64,2.898,65,0.886,67,1.984,77,1.334,79,0.006,80,0.006,196,2.033,199,1.304,202,0.975,203,2.307,216,1.937,222,1.74,235,1.787,249,3.444,252,3.938,254,3.599,256,2.898,257,3.599,258,4.105,259,3.146,327,1.896,360,1.84,450,2.521,485,1.435,501,1.334,616,3.18,631,2.413,633,2.858,636,3.373,854,4.777,857,4.415,861,3.599,1010,3.599,1039,3.97,1043,4.829,1257,4.415,1293,3.525,1327,4.202,1411,2.514,1458,2.898,1477,3.525,1529,3.525,1755,3.525,1772,4.226,1773,2.754,1774,3.525,1775,6.003,1776,5.295,1777,4.829,1778,6.003,1779,4.382,1780,7.968,1781,4.382,1782,4.382,1783,6.497,1784,6.003,1785,4.48,1786,5.295,1787,6.003,1788,5.295,1789,4.829,1790,4.382,1791,4.382,1792,4.382,1793,4.382,1794,4.382,1795,4.382,1796,3.525,1797,3.865,1798,3.865,1799,4.382,1800,3.865,1801,4.382,1802,4.382,1803,4.382,1804,4.382,1805,5.295,1806,3.865,1807,3.525,1808,3.865,1809,3.525,1810,3.865,1811,3.525]],["title/guards/IsModalInteractionGuard.html",[752,3.278,1772,2.52]],["body/guards/IsModalInteractionGuard.html",[0,0.354,3,0.126,4,0.112,5,0.112,8,0.367,9,0.995,17,0.367,19,0.781,20,0.009,21,0.559,22,0.319,23,0.656,29,2.989,30,0.803,31,0.152,38,0.522,39,1.209,49,0.14,58,1.331,60,1.209,79,0.008,80,0.008,450,3.178,501,2.304,636,3.093,752,5.648,754,5.006,854,5.057,857,5.176,861,4.537,862,3.945,1773,3.945,1812,6.676,1813,5.537,1814,6.277,1815,6.277,1816,6.277,1817,6.277]],["title/guards/IsUserUnlockedGuard.html",[858,3.074,1772,2.52]],["body/guards/IsUserUnlockedGuard.html",[0,0.32,3,0.114,4,0.102,5,0.102,8,0.332,9,0.936,10,1.729,12,1.274,17,0.416,19,0.886,20,0.009,21,0.634,22,0.361,23,0.744,30,0.727,31,0.156,37,1.645,38,0.473,39,1.094,48,1.645,49,0.127,50,1.423,58,1.509,60,1.094,62,1.458,79,0.007,80,0.007,134,2.704,199,1.546,222,1.645,234,2.595,363,3.258,378,3.879,382,1.865,383,3.127,404,2.711,501,1.729,623,2.797,636,2.797,851,6.08,852,5.8,853,4.567,854,4.266,855,5.009,857,4.884,858,4.981,859,4.238,860,4.981,861,4.266,862,3.568,863,3.568,864,3.975,865,5.009,866,5.009,1773,3.568,1818,5.009,1819,5.678,1820,5.678]],["title/controllers/JwtAuthController.html",[81,1.48,1821,3.278]],["body/controllers/JwtAuthController.html",[0,0.296,3,0.105,4,0.094,5,0.094,8,0.307,9,0.89,10,1.866,12,0.94,17,0.396,19,0.842,20,0.009,21,0.668,22,0.266,23,0.707,26,1.242,30,0.866,31,0.169,38,0.437,49,0.117,50,1.984,58,1.435,73,1.04,79,0.007,80,0.007,81,1.768,83,1.914,85,2.499,88,2.89,89,5.051,90,1.966,116,5.244,117,3.471,203,2.28,216,1.78,222,1.521,237,4.629,327,2.929,485,1.617,530,3.011,561,3.471,566,4.221,616,2.78,635,3.146,1649,4.221,1796,6.025,1821,5.051,1822,5.244,1823,4.629,1824,5.248,1825,5.969,1826,5.969,1827,5.248,1828,6.768,1829,5.248,1830,5.906,1831,5.248,1832,5.248,1833,6.768,1834,6.768,1835,5.248,1836,5.248,1837,4.476,1838,3.471,1839,4.629,1840,3.916,1841,5.248,1842,6.768,1843,5.969,1844,3.916,1845,5.248,1846,5.248,1847,5.248,1848,5.248,1849,5.248,1850,5.248,1851,5.248,1852,5.248,1853,5.248,1854,5.248,1855,5.248]],["title/injectables/JwtAuthGuard.html",[86,2.242,199,0.954]],["body/injectables/JwtAuthGuard.html",[0,0.383,3,0.136,4,0.122,5,0.122,20,0.009,31,0.159,38,0.565,49,0.152,79,0.008,80,0.008,86,4.048,199,1.723,200,2.691,253,4.072,623,3.907,1856,5.464,1857,6.996,1858,5.992,1859,4.493]],["title/modules/JwtAuthModule.html",[92,1.519,106,3.074]],["body/modules/JwtAuthModule.html",[0,0.292,3,0.104,4,0.093,5,0.093,16,2.364,20,0.009,31,0.178,35,0.999,36,1.073,38,0.431,40,1.702,49,0.116,79,0.007,80,0.007,83,2.448,92,2.575,94,2.388,95,2.388,96,2.554,97,2.554,98,2.388,99,3.546,100,3.431,106,6.316,110,3.308,111,2.554,112,1.89,114,2.746,123,2.746,317,2.855,1821,5.558,1822,3.628,1837,5.89,1838,4.926,1839,4.572,1844,3.869,1859,3.429,1860,4.572,1861,4.572,1862,4.572,1863,5.852,1864,5.852,1865,5.012,1866,5.184,1867,5.184,1868,5.184,1869,4.169,1870,6.714,1871,5.184,1872,4.169,1873,5.184,1874,6.714,1875,4.572,1876,5.184,1877,4.572,1878,5.184,1879,5.184,1880,4.572,1881,5.184]],["title/injectables/JwtAuthService.html",[199,0.954,1837,2.905]],["body/injectables/JwtAuthService.html",[0,0.21,3,0.075,4,0.067,5,0.067,8,0.218,9,0.705,10,1.877,12,0.96,17,0.443,19,0.905,20,0.01,21,0.648,22,0.384,23,0.76,30,0.878,31,0.16,35,0.719,38,0.311,39,0.719,49,0.083,50,1.955,55,1.905,58,1.456,60,1.401,62,1.612,67,2.193,70,1.522,73,1.171,79,0.005,80,0.005,116,5.459,117,2.469,153,3.293,196,1.894,199,1.165,200,1.479,202,1.193,203,2.313,214,1.666,215,1.522,216,1.912,220,1.568,222,1.989,234,2.503,272,1.438,327,2.321,435,0.773,561,2.469,616,3.326,630,2.346,635,3.764,713,1.839,773,1.839,1449,3.003,1577,3.003,1733,4.004,1788,5.538,1822,5.459,1825,4.732,1826,5.538,1830,4.686,1837,3.548,1843,6.054,1844,2.786,1865,4.115,1869,3.003,1875,3.293,1877,4.732,1880,3.293,1882,3.293,1883,5.364,1884,5.364,1885,3.733,1886,7.569,1887,6.279,1888,5.364,1889,5.364,1890,3.733,1891,5.364,1892,3.733,1893,5.364,1894,3.733,1895,5.364,1896,3.733,1897,5.364,1898,6.279,1899,3.733,1900,6.279,1901,3.733,1902,3.293,1903,5.364,1904,5.364,1905,6.279,1906,3.733,1907,4.732,1908,5.364,1909,5.364,1910,5.364,1911,3.733,1912,3.733,1913,3.733,1914,3.003,1915,5.364,1916,3.733,1917,3.733,1918,3.733,1919,3.733,1920,3.733,1921,3.733,1922,3.733,1923,3.733,1924,3.733,1925,3.733,1926,3.293,1927,3.733,1928,5.364,1929,3.733,1930,3.733,1931,3.293,1932,3.733,1933,5.364,1934,5.364,1935,5.364,1936,3.733,1937,3.733,1938,3.733,1939,3.733,1940,3.733,1941,3.733,1942,3.733,1943,3.293,1944,3.733,1945,3.733,1946,3.733,1947,3.733]],["title/injectables/JwtAuthStrategy.html",[199,0.954,1863,3.074]],["body/injectables/JwtAuthStrategy.html",[0,0.331,3,0.118,4,0.105,5,0.105,8,0.344,9,0.956,10,1.756,12,1.053,17,0.425,19,0.905,20,0.009,21,0.648,22,0.369,23,0.76,30,0.752,31,0.166,38,0.489,48,1.704,49,0.131,58,1.247,79,0.007,80,0.007,116,6.044,117,3.889,199,1.58,200,2.33,222,1.704,327,2.545,623,3.583,1216,3.889,1578,4.73,1733,4.389,1822,5.527,1838,3.889,1859,3.889,1863,5.091,1907,5.187,1948,5.187,1949,7.272,1950,5.849,1951,5.187,1952,5.88,1953,6.415,1954,5.88,1955,5.187,1956,5.187,1957,4.73,1958,5.187,1959,5.187,1960,5.88,1961,5.187,1962,5.187,1963,5.88,1964,5.88,1965,5.187]],["title/classes/LogEntry.html",[0,0.247,324,3.074]],["body/classes/LogEntry.html",[0,0.301,2,0.664,3,0.075,4,0.066,5,0.066,8,0.217,17,0.466,20,0.009,22,0.449,23,0.558,26,1.462,31,0.107,48,1.548,49,0.162,60,1.318,65,1.265,70,2.177,72,3.055,73,1.241,79,0.005,80,0.005,90,1.39,196,2.002,202,1.188,212,5.449,214,1.656,216,1.404,249,4.835,250,4.746,259,2.177,272,2.057,276,3.751,278,4.38,280,3.045,282,4.67,294,3.855,301,2.941,302,3.793,303,1.656,305,3.532,306,2.597,324,3.738,340,5.519,404,1.953,414,2.108,435,1.502,476,3.863,485,2.084,489,2.793,607,4.775,659,2.597,716,3.738,874,4.528,949,4.71,985,2.984,1073,4.71,1158,3.356,1478,5.108,1830,3.986,1966,2.769,1967,4.71,1968,5.34,1969,5.34,1970,3.71,1971,3.71,1972,6.844,1973,3.71,1974,5.34,1975,5.34,1976,4.71,1977,5.34,1978,3.71,1979,3.71,1980,5.34,1981,3.71,1982,4.71,1983,5.34,1984,3.71,1985,6.037,1986,4.296,1987,5.519,1988,5.34,1989,3.71,1990,5.34,1991,3.71,1992,5.34,1993,2.984,1994,3.272,1995,3.272,1996,4.71,1997,3.272,1998,3.272,1999,3.272,2000,3.272,2001,3.272,2002,4.71,2003,3.272,2004,3.272,2005,3.272,2006,2.984,2007,3.272,2008,3.272,2009,3.272,2010,3.272,2011,3.272,2012,3.272,2013,3.272,2014,3.272,2015,3.272,2016,2.597,2017,2.984,2018,3.71,2019,2.769,2020,3.272,2021,3.71]],["title/classes/LogEntryDto.html",[0,0.247,243,3.278]],["body/classes/LogEntryDto.html",[0,0.296,2,0.94,3,0.105,4,0.094,5,0.094,8,0.307,17,0.49,20,0.009,22,0.453,26,1.539,31,0.136,49,0.117,73,1.265,79,0.007,80,0.007,90,1.966,202,1.506,243,5.051,249,4.813,250,5.27,251,4.221,276,4.491,278,5.244,280,3.145,282,5.591,290,4.744,293,4.737,294,4.039,305,4.955,306,5.244,307,3.454,324,3.673,476,4.063,501,2.06,1078,6.26,1120,4.057,2022,7.527,2023,4.629,2024,5.248,2025,5.248,2026,5.248,2027,5.248,2028,5.248,2029,5.248]],["title/guards/MessageFromUserGuard.html",[1363,3.278,1772,2.52]],["body/guards/MessageFromUserGuard.html",[0,0.349,3,0.125,4,0.111,5,0.111,8,0.362,9,0.988,17,0.362,19,0.772,20,0.009,21,0.552,22,0.315,23,0.648,30,0.793,31,0.151,38,0.516,39,1.194,48,1.796,49,0.138,58,1.593,60,1.194,79,0.008,80,0.008,404,2.686,450,3.154,501,2.287,636,3.054,854,5.035,857,5.158,861,4.503,862,3.895,863,3.895,864,4.339,936,4.968,1363,5.606,1773,3.895,2030,5.468,2031,6.199,2032,5.468]],["title/guards/MessageIsDmGuard.html",[935,3.278,1772,2.52]],["body/guards/MessageIsDmGuard.html",[0,0.346,3,0.124,4,0.11,5,0.11,8,0.359,9,0.983,17,0.359,19,0.765,20,0.009,21,0.548,22,0.312,23,0.643,30,0.787,31,0.15,38,0.512,39,1.184,48,1.781,49,0.137,58,1.585,60,1.184,77,1.872,79,0.008,80,0.008,199,1.623,404,2.679,450,3.138,501,1.872,636,3.029,854,5.021,857,5.021,861,4.48,862,3.863,863,3.863,864,4.303,935,5.577,936,4.943,1773,3.863,2032,5.423,2033,5.423,2034,6.148]],["title/classes/ModAnnouncementDto.html",[0,0.247,2035,3.278]],["body/classes/ModAnnouncementDto.html",[0,0.401,2,1.019,3,0.114,4,0.102,5,0.102,8,0.333,17,0.417,20,0.009,21,0.507,22,0.435,26,1.307,31,0.143,35,1.096,36,1.178,48,1.649,49,0.127,72,2.463,73,1.131,77,1.732,79,0.007,80,0.007,202,1.585,235,3.171,259,3.324,301,3.923,302,3.704,303,2.539,348,3.266,404,2.743,485,1.859,679,5.317,684,4.576,819,3.832,827,3.282,835,4.246,839,5.018,843,4.246,844,5.73,2035,5.317,2036,6.861,2037,5.018,2038,7.778,2039,5.317,2040,5.689,2041,5.689,2042,7.124,2043,7.124,2044,5.689,2045,5.689,2046,4.246,2047,4.246,2048,5.689,2049,5.689,2050,5.018]],["title/injectables/ModRequestFlow.html",[199,0.954,1403,3.074]],["body/injectables/ModRequestFlow.html",[0,0.153,3,0.055,4,0.049,5,0.049,8,0.159,9,0.557,10,1.861,12,0.758,13,1.341,14,2.452,16,1.985,17,0.424,19,0.874,20,0.01,21,0.679,22,0.369,23,0.734,26,1.076,29,3.343,30,0.861,31,0.141,33,1.587,35,0.524,36,0.564,37,0.789,38,0.227,39,0.524,40,0.894,49,0.061,50,1.061,51,1.215,58,1.581,60,1.587,62,2.162,65,1.051,67,0.789,72,1.797,73,0.721,74,2.243,76,1.778,77,1.934,79,0.004,80,0.004,142,1.341,185,2.401,199,0.92,200,1.078,202,0.942,203,1.975,214,1.215,215,2.119,216,2.042,222,1.506,228,1.499,272,1.631,280,1.143,307,1.389,327,1.178,348,1.143,360,1.143,382,0.894,414,1.427,422,2.032,429,1.562,435,0.564,454,2.032,482,1.71,492,1.71,586,1.71,656,2.661,657,1.632,664,1.905,668,2.801,669,3.229,672,1.8,678,2.19,686,1.905,698,1.71,727,7.048,728,5.839,741,1.8,742,2.801,743,2.401,744,2.401,745,3.735,746,3.735,747,2.401,754,2.801,769,2.401,772,3.437,773,2.56,775,3.735,777,3.735,789,2.401,794,2.401,797,4.716,813,3.437,829,2.401,830,2.19,939,1.71,940,2.032,965,2.801,1005,2.19,1085,3.644,1137,3.459,1143,1.562,1158,1.71,1257,2.538,1266,1.8,1289,3.735,1323,2.401,1340,2.19,1403,2.964,1410,5.998,1411,4.278,1499,3.406,2051,6.577,2052,2.401,2053,5.197,2054,4.234,2055,4.234,2056,4.234,2057,4.234,2058,4.234,2059,4.234,2060,2.722,2061,2.722,2062,4.234,2063,2.722,2064,4.234,2065,2.722,2066,4.234,2067,2.722,2068,4.234,2069,5.863,2070,2.722,2071,4.234,2072,5.863,2073,2.722,2074,4.234,2075,4.234,2076,2.722,2077,2.722,2078,2.401,2079,4.234,2080,2.19,2081,3.406,2082,3.406,2083,2.19,2084,2.722,2085,2.722,2086,5.197,2087,2.722,2088,4.716,2089,2.722,2090,2.722,2091,2.722,2092,2.722,2093,2.722,2094,2.722,2095,2.722,2096,2.722,2097,4.234,2098,2.722,2099,2.722,2100,5.197,2101,4.584,2102,4.234,2103,4.234,2104,4.234,2105,4.234,2106,2.722,2107,2.722,2108,5.172,2109,2.401,2110,4.234,2111,6.352,2112,2.722,2113,4.234,2114,2.722,2115,2.722,2116,2.401,2117,2.722,2118,2.722,2119,2.722,2120,2.722,2121,4.234,2122,2.722,2123,2.722,2124,2.722,2125,2.722,2126,3.735,2127,2.722,2128,4.234,2129,2.722,2130,2.722,2131,2.722,2132,2.722,2133,2.722,2134,2.722,2135,2.722,2136,2.722,2137,2.722,2138,2.722,2139,2.401,2140,2.401,2141,2.722,2142,2.722,2143,2.722,2144,2.722,2145,2.722,2146,2.722,2147,4.234,2148,2.722,2149,2.401,2150,2.722,2151,2.722,2152,2.722,2153,3.735,2154,2.722,2155,3.406,2156,4.234,2157,2.032,2158,4.234,2159,4.234,2160,4.234,2161,2.401,2162,1.8,2163,2.722,2164,2.722,2165,2.722,2166,2.722,2167,2.722,2168,2.722,2169,2.401,2170,2.19,2171,2.19,2172,2.722]],["title/modules/ModerationModule.html",[92,1.519,130,2.905]],["body/modules/ModerationModule.html",[0,0.33,3,0.118,4,0.105,5,0.105,16,2.441,20,0.009,31,0.176,35,1.13,36,1.215,38,0.488,40,1.927,49,0.131,79,0.007,80,0.007,83,2.649,92,2.728,94,2.704,95,2.704,96,2.891,97,2.891,98,2.704,99,3.756,100,3.347,110,3.578,111,2.891,112,2.14,114,3.847,123,3.108,130,5.846,136,5.709,317,3.232,528,5.887,2173,5.869,2174,5.869,2175,5.869,2176,5.869,2177,5.887,2178,5.887,2179,5.869,2180,5.869,2181,5.869,2182,5.869]],["title/classes/MumVoiceCommand.html",[0,0.247,386,3.278]],["body/classes/MumVoiceCommand.html",[0,0.299,2,0.951,3,0.107,4,0.095,5,0.095,8,0.311,9,0.897,10,1.676,17,0.311,19,0.661,20,0.009,21,0.608,22,0.346,23,0.555,25,4.562,26,0.975,27,3.588,29,3.248,30,0.68,31,0.16,32,3.482,34,4.09,35,1.314,36,1.1,38,0.442,39,1.023,45,2.926,46,3.185,47,2.926,48,1.54,49,0.119,62,1.751,70,2.166,74,2.814,76,2.231,77,2.294,79,0.007,80,0.007,234,2.488,238,4.775,348,2.231,386,5.091,404,2.352,414,1.79,485,1.27,669,3.757,713,2.618,719,5.091,739,3.719,751,3.965,760,3.965,773,3.917,819,2.618,827,2.448,1217,3.514,1353,6.647,2035,5.934,2183,6.017,2184,4.687,2185,5.313,2186,5.624,2187,5.313,2188,4.274,2189,5.313,2190,5.313,2191,5.313,2192,4.687,2193,5.313,2194,7.535,2195,6.017,2196,7.535,2197,5.313,2198,5.313,2199,5.313,2200,4.274,2201,6.017]],["title/classes/PermissionOverwrite.html",[0,0.247,457,3.074]],["body/classes/PermissionOverwrite.html",[0,0.387,2,0.67,3,0.075,4,0.067,5,0.067,8,0.219,17,0.219,20,0.009,21,0.612,22,0.457,26,0.687,31,0.126,39,0.721,48,2.446,49,0.084,65,0.757,72,2.853,73,1.245,79,0.005,80,0.005,90,1.402,196,1.033,202,1.196,216,0.984,230,2.352,231,2.997,259,3.406,280,1.571,290,2.244,300,2.475,301,4.725,302,4.054,303,1.67,342,4.008,360,2.257,404,1.677,414,2.942,415,2.793,416,2.352,417,3.762,418,3.01,419,1.91,420,5.528,421,3.01,422,2.793,423,2.793,424,2.475,425,3.01,426,5.528,428,2.475,429,2.147,430,4.886,431,3.01,434,3.301,435,0.775,436,2.475,438,3.01,441,2.62,442,3.01,445,3.463,446,4.011,448,3.01,450,2.885,452,2.244,454,4.011,455,3.01,457,4.81,459,4.159,460,3.01,463,2.793,464,2.62,465,3.01,466,3.377,468,3.01,469,2.62,470,2.352,472,3.01,476,4.262,477,5.058,478,3.951,479,3.01,480,3.01,481,4.904,482,3.377,483,4.323,484,5.058,485,2.133,486,4.323,487,3.01,488,3.554,489,1.67,490,3.01,491,2.793,492,2.352,493,3.01,494,2.475,495,3.01,496,3.01,497,2.62,498,3.01,2202,3.743]],["title/classes/PingCommand.html",[0,0.247,380,3.278]],["body/classes/PingCommand.html",[0,0.341,2,1.083,3,0.122,4,0.108,5,0.108,8,0.354,9,0.973,12,1.325,13,2.979,14,3.17,17,0.433,19,0.753,20,0.009,21,0.659,22,0.307,23,0.632,26,1.11,27,3.806,30,0.774,31,0.149,32,3.777,33,2.772,35,1.165,36,1.252,39,1.165,45,3.33,47,3.33,48,1.753,49,0.135,50,1.516,58,1.283,73,1.027,79,0.008,80,0.008,222,1.753,380,5.522,485,1.445,1271,4.514,2203,5.334,2204,8.329,2205,6.048,2206,6.048,2207,7.994,2208,6.048,2209,6.048,2210,5.334,2211,6.048,2212,6.048]],["title/injectables/PrismaService.html",[16,1.242,199,0.954]],["body/injectables/PrismaService.html",[0,0.341,3,0.122,4,0.108,5,0.108,8,0.354,9,0.974,10,1.959,16,2.095,17,0.433,19,0.754,20,0.009,21,0.54,22,0.308,23,0.633,30,0.948,31,0.149,38,0.504,42,2.151,49,0.135,62,1.902,79,0.008,80,0.008,199,1.609,200,2.401,501,1.845,623,3.65,1041,4.874,2213,5.345,2214,8.001,2215,7.408,2216,8.698,2217,7.408,2218,8.335,2219,6.06,2220,6.06,2221,6.06,2222,6.06,2223,6.06,2224,6.06]],["title/guards/ReactedMemberIsModOrHigherGuard.html",[1248,3.278,1772,2.52]],["body/guards/ReactedMemberIsModOrHigherGuard.html",[0,0.309,3,0.11,4,0.098,5,0.098,8,0.321,9,0.916,10,1.702,12,1.247,17,0.407,19,0.867,20,0.009,21,0.621,22,0.354,23,0.728,30,0.702,31,0.154,37,1.591,38,0.457,39,1.057,48,2.217,49,0.122,50,1.376,58,1.707,60,1.474,62,1.964,77,1.671,79,0.007,80,0.007,142,2.704,196,2.112,199,1.513,222,1.591,234,2.54,382,1.803,404,2.174,501,1.671,636,2.704,854,4.824,857,4.824,860,4.876,861,4.176,862,3.45,863,3.45,886,3.291,1010,3.291,1137,3.965,1143,3.15,1238,5.603,1248,5.199,1256,6.155,1257,4.824,1266,3.631,1773,3.45,1818,4.842,2225,4.842,2226,5.49,2227,5.49,2228,5.49,2229,5.49,2230,5.49,2231,5.49,2232,5.49,2233,5.49,2234,5.49,2235,4.842,2236,5.49,2237,5.49]],["title/injectables/RefreshJwtGuard.html",[199,0.954,1840,3.278]],["body/injectables/RefreshJwtGuard.html",[0,0.381,3,0.136,4,0.121,5,0.121,20,0.009,31,0.159,38,0.563,49,0.151,79,0.008,80,0.008,199,1.718,200,2.679,623,3.897,1840,5.904,1856,5.439,1857,6.977,1858,5.965,1859,4.473,1872,6.363,2238,5.965]],["title/injectables/RefreshJwtStrategy.html",[199,0.954,1864,3.074]],["body/injectables/RefreshJwtStrategy.html",[0,0.325,3,0.116,4,0.103,5,0.103,8,0.338,9,0.946,10,1.743,12,1.034,17,0.421,19,0.895,20,0.009,21,0.641,22,0.365,23,0.752,30,0.739,31,0.165,38,0.481,48,1.674,49,0.129,58,1.225,79,0.007,80,0.007,116,6.018,117,3.821,196,1.595,199,1.562,200,2.289,222,1.674,327,2.5,623,3.544,1216,3.821,1578,4.647,1733,4.312,1838,5.181,1859,3.821,1864,5.035,1872,5.786,1950,5.786,1951,5.096,1953,6.345,1955,5.096,1956,6.909,1957,4.647,1958,6.909,1959,5.096,1961,5.096,1962,5.096,1965,5.096,2239,6.909,2240,5.096,2241,5.778,2242,5.778,2243,5.778,2244,5.778]],["title/classes/RestrictedChannelDto.html",[0,0.247,2245,3.533]],["body/classes/RestrictedChannelDto.html",[0,0.418,2,1.089,3,0.122,4,0.109,5,0.109,8,0.356,17,0.434,20,0.009,22,0.424,26,1.363,31,0.161,42,2.16,49,0.136,73,1.158,79,0.008,80,0.008,90,2.28,202,1.652,231,2.963,302,3.536,303,2.716,382,2.632,476,3.817,481,4.667,501,2.261,503,4.091,874,3.648,894,4.894,1119,4.894,1120,4.452,1428,4.894,2245,5.974,2246,7.07,2247,8.016,2248,6.085,2249,6.085]],["title/controllers/RoleController.html",[81,1.48,2177,3.278]],["body/controllers/RoleController.html",[0,0.186,3,0.066,4,0.059,5,0.059,8,0.193,9,0.644,10,1.831,12,0.591,14,2.132,17,0.378,19,0.806,20,0.009,21,0.577,22,0.418,23,0.676,26,1.188,30,0.828,31,0.161,33,1.836,35,0.635,36,0.683,37,0.956,38,0.275,39,0.635,42,1.171,49,0.074,50,1.228,58,1.24,60,1.485,61,4.963,62,1.979,65,1.664,73,1.197,79,0.005,80,0.005,81,1.111,83,1.203,85,1.571,86,1.684,88,1.816,89,3.657,90,1.236,91,1.893,139,1.816,140,1.816,203,1.651,206,3.079,208,2.073,216,0.867,221,2.182,222,1.42,234,2.811,235,1.345,252,1.684,253,1.977,254,1.977,255,2.073,256,2.182,257,2.938,258,1.977,259,1.345,260,2.309,263,3.674,319,2.812,348,1.385,429,3.355,435,1.705,485,2.036,489,3.984,527,4.364,530,1.893,548,5.206,549,6.2,550,6.855,551,4.703,554,2.653,560,4.093,561,3.241,562,2.462,564,5.563,565,6.334,566,2.653,582,2.462,584,5.206,585,5.753,586,4.067,606,5.073,968,5.252,994,4.703,1006,5.396,1024,4.841,1026,4.093,1088,3.505,1158,3.079,1318,6.2,2177,3.657,2250,2.653,2251,5.847,2252,5.847,2253,4.901,2254,5.847,2255,3.299,2256,7.247,2257,3.299,2258,3.299,2259,3.299,2260,3.299,2261,6.392,2262,3.299,2263,3.299,2264,3.299,2265,3.299,2266,3.299,2267,3.299,2268,3.299,2269,3.299,2270,3.299,2271,3.299,2272,3.299,2273,2.909,2274,3.299,2275,3.299,2276,3.299,2277,3.299,2278,3.299,2279,3.299,2280,3.299,2281,3.299,2282,5.847,2283,3.299,2284,4.901,2285,4.901,2286,3.299,2287,3.299,2288,3.299,2289,3.299,2290,3.299]],["title/classes/RoleResponse.html",[0,0.247,1006,3.074]],["body/classes/RoleResponse.html",[0,0.283,2,0.463,3,0.052,4,0.046,5,0.046,8,0.151,17,0.462,20,0.009,21,0.654,22,0.459,26,1.449,31,0.101,39,0.784,48,2.434,49,0.058,60,0.784,61,1.711,72,2.382,73,1.245,77,0.788,79,0.004,80,0.004,90,0.969,100,1.192,202,1.119,214,1.155,216,1.5,231,2.922,259,2.993,272,0.997,280,1.086,290,1.551,300,1.711,301,3.929,302,3.647,303,1.155,342,3.929,348,1.086,360,3.216,416,3.896,424,4.101,428,2.692,429,2.335,430,5.153,435,1.477,436,2.692,445,2.241,450,3.506,452,4.129,459,1.711,469,3.992,476,4.063,478,4.137,481,3.896,485,2.119,489,3.933,606,2.848,607,1.551,655,2.848,665,2.081,824,1.811,874,3.947,876,4.046,894,4.046,896,5.478,915,4.914,923,1.931,968,2.848,969,1.931,970,5.296,971,5.904,972,5.904,973,5.138,974,5.904,975,3.589,977,2.282,978,2.282,981,4.437,983,3.589,984,3.589,986,2.282,987,2.282,988,2.282,992,3.589,994,3.273,997,2.282,998,1.626,999,2.282,1000,1.811,1004,3.589,1005,2.081,1006,3.521,1007,2.692,1008,3.589,1009,4.046,1010,3.015,1011,5.54,1012,3.589,1013,5.54,1014,3.589,1015,4.046,1016,2.282,1017,2.282,1018,2.282,1019,2.282,1020,2.282,1021,2.282,1022,2.081,1023,2.282,1024,3.521,1025,2.282,1026,2.848,1027,1.931,1028,2.081,1029,2.081,1030,2.282,1031,1.931,2291,2.587,2292,2.587,2293,2.587,2294,2.587,2295,2.587,2296,2.587,2297,2.587,2298,2.587,2299,2.587,2300,2.587,2301,2.587,2302,2.587,2303,2.587,2304,2.587]],["title/controllers/SelfController.html",[81,1.48,2305,3.278]],["body/controllers/SelfController.html",[0,0.294,3,0.105,4,0.093,5,0.093,8,0.305,9,0.887,10,1.662,17,0.305,19,0.65,20,0.009,21,0.465,22,0.265,23,0.546,26,0.958,30,0.863,31,0.164,35,1.521,37,1.513,38,0.434,49,0.116,50,1.308,58,1.107,67,2.165,72,2.731,73,1.037,79,0.007,80,0.007,81,2.517,83,1.903,85,2.485,86,2.664,87,4.199,88,2.875,91,2.995,196,2.46,222,1.513,234,2.459,235,2.128,272,2.598,485,1.612,530,2.995,1007,4.461,1083,2.995,1271,5.034,1411,3.87,1664,5.949,1665,4.604,1669,3.896,1671,4.604,1783,6.967,1785,5.034,1865,4.479,2305,5.034,2306,4.604,2307,7.472,2308,7.898,2309,5.425,2310,6.745,2311,6.353,2312,8.376,2313,5.22,2314,5.949,2315,5.949,2316,6.745,2317,4.604,2318,5.22,2319,4.604,2320,5.22,2321,5.22,2322,5.22,2323,5.22]],["title/classes/SelfDto.html",[0,0.247,1083,2.52]],["body/classes/SelfDto.html",[0,0.399,2,1.009,3,0.113,4,0.101,5,0.101,8,0.329,17,0.475,20,0.009,21,0.724,22,0.455,26,1.491,31,0.142,42,2.001,49,0.158,65,1.139,67,2.244,73,1.264,79,0.007,80,0.007,90,2.111,202,1.575,289,4.971,304,4.957,348,2.366,435,1.682,476,4.129,870,4.444,1075,4.533,1076,4.533,1077,4.533,1078,5.78,1082,2.876,1083,4.063,1084,5.696,1085,4.444,2324,5.635,2325,5.635,2326,5.635,2327,5.635]],["title/classes/SelfDto-1.html",[0,0.206,813,2.42,1083,2.1]],["body/classes/SelfDto-1.html",[0,0.318,2,1.011,3,0.113,4,0.101,5,0.101,8,0.33,17,0.49,20,0.009,21,0.691,22,0.453,26,1.537,31,0.142,42,2.004,49,0.126,65,1.567,67,2.246,73,1.26,79,0.007,80,0.007,90,2.116,202,1.577,252,3.956,382,2.807,476,4.07,870,4.448,1077,5.703,1078,6.251,1082,2.882,1083,4.068,1084,5.703,2328,4.98,2329,5.646,2330,5.646,2331,5.646,2332,7.09,2333,5.646,2334,5.646]],["title/injectables/SelfService.html",[199,0.954,1865,2.633]],["body/injectables/SelfService.html",[0,0.236,3,0.084,4,0.075,5,0.075,8,0.245,9,0.766,10,1.748,12,1.042,14,2.635,15,3.98,16,2.044,17,0.391,19,0.832,20,0.009,21,0.677,22,0.34,23,0.699,30,1.052,31,0.162,33,2.181,35,1.645,36,0.868,37,1.214,38,0.349,39,0.807,41,5.38,42,1.488,49,0.094,50,1.903,51,1.87,58,1.235,60,0.807,62,1.076,65,0.847,67,2.336,72,2.499,79,0.006,80,0.006,146,3.696,196,2.511,199,1.264,200,1.66,222,1.687,234,2.635,235,2.373,246,2.512,247,3.128,248,3.128,272,2.784,435,1.572,446,4.344,485,1.598,633,2.772,870,2.405,886,2.512,1076,3.371,1083,2.405,1085,4.147,1173,4.344,1276,3.371,1680,5.134,1681,5.134,1684,3.696,1865,3.489,2019,4.344,2186,4.344,2235,3.696,2311,4.682,2315,5.134,2317,3.696,2335,3.696,2336,4.682,2337,5.134,2338,5.821,2339,5.821,2340,4.191,2341,4.191,2342,5.821,2343,4.191,2344,7.859,2345,5.821,2346,5.821,2347,5.134,2348,5.821,2349,4.191,2350,5.134,2351,5.821,2352,5.134,2353,5.821,2354,4.191,2355,4.191,2356,4.191,2357,4.191,2358,4.191,2359,4.191,2360,4.191,2361,4.191,2362,4.191,2363,4.191,2364,4.191,2365,4.191]],["title/classes/SendDirectMessageToUserException.html",[0,0.247,2366,3.074]],["body/classes/SendDirectMessageToUserException.html",[0,0.394,2,0.988,3,0.111,4,0.099,5,0.099,12,0.988,17,0.323,19,0.687,20,0.009,21,0.492,22,0.28,23,0.577,31,0.14,38,0.459,49,0.156,60,1.347,65,1.413,67,2.337,70,3.128,73,1.18,76,2.318,79,0.007,80,0.007,196,2.296,228,3.04,404,2.395,435,1.143,485,1.319,501,1.681,506,4.19,579,4.402,620,3.469,621,4.393,623,3.444,625,4.44,627,4.393,628,4.393,629,3.651,630,4.82,631,3.04,633,2.628,635,4.19,636,2.72,639,3.651,640,3.469,641,3.469,642,3.651,643,3.651,644,3.651,645,3.651,713,2.72,819,2.72,827,3.221,1007,3.651,1216,3.651,1411,3.167,2366,5.37,2367,5.217,2368,5.725,2369,6.166,2370,4.011,2371,5.623,2372,4.869,2373,4.869,2374,4.869,2375,4.12,2376,4.869]],["title/classes/SendDirectMessageToUserExceptionFilter.html",[0,0.247,2375,3.278]],["body/classes/SendDirectMessageToUserExceptionFilter.html",[0,0.389,2,0.969,3,0.109,4,0.097,5,0.097,8,0.316,9,0.908,17,0.316,19,0.673,20,0.009,21,0.482,22,0.275,23,0.565,30,0.692,31,0.139,38,0.45,49,0.154,60,1.329,65,1.094,67,2,70,3.099,73,0.958,76,3.191,79,0.007,80,0.007,196,2.209,228,3.8,404,2.372,435,1.12,485,1.293,501,2.101,506,3.243,579,4.593,620,3.399,621,3.399,623,2.665,627,4.775,628,5.03,629,3.578,630,5.03,631,2.979,633,3.286,635,4.798,636,3.4,639,4.565,640,4.775,641,3.399,642,3.578,643,3.578,644,3.578,645,3.578,713,2.665,819,2.665,827,2.493,1007,4.565,1216,3.578,1222,4.772,1411,3.96,2366,5.603,2367,5.151,2368,5.672,2369,4.772,2370,3.104,2371,4.351,2372,6.087,2373,6.087,2374,4.772,2375,5.151,2376,4.772]],["title/classes/SetFirstMessageUICommand.html",[0,0.247,401,3.278]],["body/classes/SetFirstMessageUICommand.html",[0,0.294,2,0.935,3,0.105,4,0.093,5,0.093,8,0.305,9,0.887,10,1.662,12,1.208,13,2.572,14,3.054,16,2.41,17,0.394,19,0.839,20,0.009,21,0.666,22,0.379,23,0.705,26,0.958,27,3.558,29,2.485,30,0.668,31,0.159,32,3.443,33,2.527,35,1.006,36,1.081,37,1.513,38,0.434,39,1.006,40,1.714,45,2.875,46,3.129,49,0.116,50,1.691,51,2.33,58,1.107,60,1.006,62,1.918,64,3.453,65,1.055,67,1.513,77,2.053,79,0.007,80,0.007,222,1.513,272,2.011,401,5.034,402,5.724,403,6.103,404,2.614,657,4.043,668,3.453,669,3.714,697,3.654,773,2.572,1295,4.199,1371,5.949,1375,4.604,2188,4.199,2377,6.01,2378,4.199,2379,5.949,2380,5.22,2381,5.949,2382,6.967,2383,5.22,2384,5.22,2385,4.604,2386,5.22,2387,5.949,2388,5.22]],["title/classes/SettingsChanged.html",[0,0.247,1625,3.074]],["body/classes/SettingsChanged.html",[0,0.289,2,0.918,3,0.103,4,0.092,5,0.092,8,0.3,9,0.877,12,1.194,17,0.476,19,0.83,20,0.009,21,0.594,22,0.398,23,0.697,30,0.656,31,0.149,38,0.427,42,1.821,49,0.114,65,1.685,72,2.883,73,1.218,79,0.007,80,0.007,197,4.442,202,1.484,203,2.74,213,3.073,215,3.461,218,3.528,220,2.154,231,2.888,382,2.737,450,3.415,489,3.721,501,2.03,505,3.532,506,3.075,512,3.532,514,2.618,517,2.825,1625,4.668,1634,5.882,1739,6.706,2389,4.525,2390,8.488,2391,6.669,2392,5.13,2393,5.13,2394,5.13,2395,6.669,2396,6.669,2397,5.13,2398,5.13]],["title/classes/SettingsDto.html",[0,0.247,1571,3.278]],["body/classes/SettingsDto.html",[0,0.342,2,0.797,3,0.089,4,0.08,5,0.08,8,0.26,17,0.505,20,0.009,22,0.46,26,1.584,31,0.139,42,1.581,49,0.099,73,1.289,79,0.006,80,0.006,90,1.669,197,2.67,202,1.35,301,4.792,302,4.143,303,1.988,304,6.091,382,2.857,501,1.848,530,3.962,1120,3.639,1571,4.53,2399,3.929,2400,6.091,2401,6.091,2402,6.091,2403,6.906,2404,6.091,2405,6.091,2406,6.091,2407,6.091,2408,6.091,2409,6.906,2410,8.634,2411,4.454,2412,4.454,2413,4.454,2414,4.454,2415,4.454,2416,4.454,2417,4.454,2418,4.454,2419,4.454,2420,4.454,2421,4.454]],["title/classes/SlowmodeDisabled.html",[0,0.247,522,2.905]],["body/classes/SlowmodeDisabled.html",[0,0.394,2,0.817,3,0.092,4,0.082,5,0.082,8,0.267,9,0.812,12,1.252,17,0.457,19,0.768,20,0.009,21,0.55,22,0.397,23,0.645,30,0.584,31,0.124,38,0.38,49,0.156,65,1.753,67,2.026,73,1.254,79,0.006,80,0.006,196,1.259,202,1.373,203,2.778,213,3.451,218,3.726,220,1.916,231,2.863,419,2.329,435,1.448,450,3.462,466,3.878,494,4.954,499,4.082,500,3.406,501,2.28,502,4.894,503,4.488,504,5.624,505,3.269,506,3.699,512,3.968,514,2.329,515,4.082,516,6.471,517,4.441,518,6.487,519,4.964,520,4.964,521,3.85,522,4.625,523,3.406,524,4.964,525,3.671,526,3.541,527,3.406,2422,6.171,2423,4.563,2424,4.563,2425,4.563]],["title/classes/SlowmodeEnabled.html",[0,0.247,515,2.905]],["body/classes/SlowmodeEnabled.html",[0,0.39,2,0.803,3,0.09,4,0.08,5,0.08,8,0.262,9,0.802,12,1.241,17,0.469,19,0.759,20,0.009,21,0.544,22,0.407,23,0.638,30,0.574,31,0.123,38,0.374,49,0.155,65,1.748,67,2.009,73,1.252,79,0.006,80,0.006,196,1.239,202,1.357,203,2.766,213,3.427,218,3.704,220,1.884,231,3.007,419,2.291,435,1.435,450,3.447,466,3.834,494,5.526,499,4.036,500,3.349,501,2.265,502,4.853,503,4.476,504,5.576,505,3.232,506,3.658,512,3.94,514,2.291,515,4.585,516,6.452,517,4.419,518,6.455,519,4.908,520,4.908,521,3.818,522,4.036,523,3.349,524,4.908,525,3.61,526,3.501,527,3.349,2426,6.102,2427,4.488,2428,4.488,2429,4.488,2430,4.488]],["title/classes/SpecialCommand.html",[0,0.247,409,3.278]],["body/classes/SpecialCommand.html",[0,0.225,2,0.716,3,0.08,4,0.072,5,0.072,8,0.234,9,0.741,10,1.451,17,0.436,19,0.701,20,0.009,21,0.581,22,0.379,23,0.589,25,4.063,26,0.734,27,3.105,29,2.682,30,0.721,31,0.156,32,2.875,34,3.377,35,1.085,36,0.828,38,0.469,39,0.77,47,2.202,48,1.159,49,0.089,58,1.583,60,0.77,62,1.027,73,1.146,79,0.006,80,0.006,196,1.104,202,1.253,214,3.16,215,2.659,234,2.054,238,3.943,409,4.204,470,4.449,485,0.956,497,3.943,657,2.397,699,2.799,739,2.799,751,2.985,760,2.985,813,3.726,948,3.943,2101,3.527,2157,4.204,2162,4.683,2186,4.868,2431,3.527,2432,6.522,2433,6.522,2434,6.522,2435,6.522,2436,5.634,2437,5.634,2438,5.634,2439,5.634,2440,5.634,2441,4.531,2442,3.999,2443,5.634,2444,5.634,2445,5.634,2446,5.634,2447,5.634,2448,5.634,2449,4.531,2450,5.634,2451,5.634,2452,5.634,2453,5.634,2454,3.999,2455,8.124,2456,5.634,2457,7.166,2458,7.743,2459,5.634,2460,5.634,2461,5.634,2462,7.081,2463,5.695,2464,5.634,2465,3.999,2466,3.999,2467,5.284,2468,3.999,2469,5.634,2470,6.522,2471,6.522,2472,3.999,2473,3.217,2474,3.999,2475,3.527,2476,3.527,2477,3.527,2478,3.217,2479,3.217,2480,4.531,2481,4.531,2482,3.999,2483,4.531,2484,3.527,2485,3.999,2486,3.527,2487,3.999,2488,3.999,2489,3.999,2490,3.999,2491,3.999,2492,3.527,2493,5.695,2494,3.999,2495,7.081,2496,7.081,2497,7.081,2498,7.081,2499,5.634,2500,3.999,2501,3.999,2502,3.999,2503,3.999,2504,3.999,2505,3.999,2506,3.999,2507,3.527]],["title/modules/TasksModule.html",[92,1.519,107,3.074]],["body/modules/TasksModule.html",[0,0.299,3,0.107,4,0.095,5,0.095,16,2.38,20,0.009,31,0.174,35,1.023,36,1.1,38,0.442,40,1.745,49,0.119,79,0.007,80,0.007,92,2.843,94,2.448,95,2.448,96,2.618,97,2.618,98,2.448,99,3.588,100,2.448,107,6.354,110,3.361,111,2.618,112,1.937,114,2.814,123,2.814,134,2.53,142,2.618,317,2.926,376,4.634,377,4.295,378,4.007,382,2.474,383,2.926,389,3.914,390,2.814,391,3.339,408,3.719,485,1.27,1137,4.146,1138,5.288,1143,3.049,2508,5.313,2509,5.313,2510,5.313,2511,6.017,2512,6.822,2513,6.822,2514,6.822,2515,5.091,2516,6.017,2517,5.313]],["title/injectables/TasksService.html",[199,0.954,1138,2.76]],["body/injectables/TasksService.html",[0,0.165,3,0.059,4,0.052,5,0.052,8,0.171,9,0.59,10,1.807,12,0.803,14,2.629,16,2.039,17,0.405,19,0.862,20,0.01,21,0.705,22,0.228,23,0.469,26,1.119,30,0.887,31,0.159,33,1.68,35,0.565,36,0.607,37,0.849,38,0.244,39,0.565,40,0.963,42,1.041,49,0.065,50,1.647,51,1.308,55,3.112,58,1.293,60,1.175,62,1.957,74,2.884,76,1.882,77,0.892,79,0.005,80,0.005,112,1.069,129,2.358,139,1.614,140,1.614,142,1.444,196,1.503,199,0.974,200,1.161,203,1.51,206,3.831,208,3.421,215,1.828,216,1.896,221,1.939,222,1.578,235,1.195,252,2.288,272,1.129,294,1.496,307,2.288,319,3.499,342,1.614,360,2.759,377,3.537,382,0.963,408,2.052,414,1.51,419,2.288,435,1.263,485,1.071,521,1.614,555,3.954,569,2.965,651,2.586,655,2.052,656,1.842,657,1.757,659,3.138,660,4.346,661,2.586,664,2.052,674,2.188,687,4.063,689,2.358,691,2.586,692,3.954,693,3.606,694,3.954,695,2.586,696,2.586,698,1.842,827,2.809,965,2.965,973,3.138,1039,2.965,1082,2.779,1085,2.572,1127,3.954,1137,3.004,1138,2.817,1143,1.682,1168,3.606,1177,6.359,1178,6.359,1198,3.606,1200,2.358,1266,1.939,1267,5.285,1274,3.954,1293,2.358,1337,2.586,1340,2.358,1440,5.378,1455,3.346,1457,2.188,1458,2.965,1479,3.346,1493,4.904,1499,2.358,1504,2.358,1505,2.586,1506,2.586,1507,2.586,1672,4.802,1746,3.346,1777,3.606,1914,2.358,2088,2.358,2108,2.586,2116,2.586,2139,2.586,2140,2.586,2149,2.586,2171,3.606,2309,3.606,2336,3.606,2350,3.954,2511,5.378,2515,3.346,2516,3.954,2518,2.358,2519,4.483,2520,4.483,2521,4.483,2522,3.606,2523,6.929,2524,6.097,2525,6.929,2526,4.483,2527,2.931,2528,6.571,2529,2.931,2530,4.483,2531,4.483,2532,3.606,2533,2.931,2534,3.954,2535,5.444,2536,3.954,2537,2.931,2538,2.931,2539,2.931,2540,2.931,2541,2.931,2542,2.931,2543,2.931,2544,4.483,2545,6.097,2546,2.931,2547,3.954,2548,4.483,2549,4.483,2550,7.436,2551,4.483,2552,3.954,2553,4.483,2554,4.483,2555,1.553,2556,2.586,2557,2.586,2558,2.931,2559,2.931,2560,2.931,2561,2.931,2562,2.931,2563,4.483,2564,2.931,2565,2.586,2566,2.931,2567,2.931,2568,2.931,2569,2.931,2570,6.097,2571,2.358,2572,2.931,2573,1.757,2574,2.188,2575,2.586,2576,2.931,2577,2.931,2578,2.931,2579,2.931,2580,2.931,2581,2.931,2582,2.586,2583,2.931,2584,2.931,2585,2.931,2586,4.483]],["title/classes/TicketSystemSetupCommand.html",[0,0.247,411,3.278]],["body/classes/TicketSystemSetupCommand.html",[0,0.298,2,0.948,3,0.106,4,0.095,5,0.095,8,0.31,9,0.895,10,1.674,12,1.219,13,2.608,14,3.066,17,0.398,19,0.847,20,0.009,21,0.67,22,0.346,23,0.711,25,4.556,26,0.971,27,3.582,29,3.241,30,0.677,31,0.151,32,3.474,33,2.55,34,4.08,35,1.02,36,1.096,39,1.02,45,2.915,47,2.915,48,1.534,49,0.118,50,1.327,62,1.747,74,2.804,76,2.223,77,2.072,79,0.007,80,0.007,216,1.392,222,1.534,319,3.038,404,2.125,411,5.08,414,1.784,485,1.265,669,3.748,719,5.08,741,3.502,742,3.502,764,3.951,772,3.502,773,3.706,782,3.951,819,2.608,938,3.706,939,3.327,940,3.951,948,4.764,959,4.259,964,4.259,2088,5.475,2192,4.67,2195,4.67,2200,4.259,2210,4.67,2587,6.635,2588,4.67,2589,7.523,2590,5.294,2591,5.294,2592,5.294,2593,5.294,2594,4.67,2595,5.294,2596,5.08,2597,4.259,2598,5.294,2599,5.294,2600,4.67,2601,5.294,2602,4.67,2603,5.294,2604,5.294]],["title/classes/TimeOutCommand.html",[0,0.247,384,3.278]],["body/classes/TimeOutCommand.html",[0,0.225,2,0.716,3,0.08,4,0.072,5,0.072,8,0.234,9,0.741,10,1.451,12,1.009,13,1.97,14,2.824,17,0.329,19,0.701,20,0.009,21,0.665,22,0.286,23,0.589,25,4.063,26,0.734,27,2.682,29,2.682,30,0.512,31,0.166,32,2.875,33,2.111,34,3.377,35,1.085,36,0.828,38,0.469,39,0.77,45,2.202,46,2.397,47,2.202,48,1.159,49,0.089,50,1.412,58,1.195,60,1.364,62,1.916,70,2.297,74,2.984,76,2.365,77,1.715,79,0.006,80,0.006,139,2.202,140,2.202,196,2.137,206,4.449,208,4.098,215,1.631,216,2.201,222,1.633,238,3.943,294,3.952,360,1.679,384,4.204,445,2.202,485,0.956,616,2.118,656,3.54,657,2.397,668,2.645,669,3.102,672,4.314,674,4.204,678,3.217,679,2.985,697,2.799,698,2.513,699,2.799,713,2.775,739,2.799,741,2.645,742,2.645,751,2.985,760,2.985,772,2.645,773,1.97,782,2.985,820,3.527,821,3.527,822,3.527,823,3.527,830,3.217,863,2.513,938,2.799,939,2.513,940,2.985,964,3.217,965,2.645,998,2.513,1000,2.799,1327,2.799,1339,3.527,2016,4.956,2039,2.985,2046,2.985,2047,2.985,2162,2.645,2186,4.868,2201,6.245,2370,3.232,2473,3.217,2475,3.527,2476,3.527,2477,3.527,2484,3.527,2486,3.527,2532,4.531,2536,3.527,2555,2.118,2556,3.527,2571,3.217,2574,4.204,2575,4.969,2596,2.985,2597,3.217,2605,3.527,2606,6.522,2607,3.999,2608,3.999,2609,5.284,2610,3.999,2611,3.999,2612,3.999,2613,2.295,2614,3.232,2615,3.999,2616,3.999,2617,3.999,2618,7.081,2619,5.634,2620,6.522,2621,3.999,2622,6.522,2623,3.999,2624,3.527,2625,3.999,2626,3.527,2627,6.522,2628,3.999,2629,3.527,2630,3.527,2631,3.527,2632,3.527,2633,3.527,2634,3.999,2635,3.999,2636,3.999,2637,3.999,2638,5.634,2639,3.527,2640,3.527,2641,3.999,2642,3.999,2643,3.999,2644,3.999,2645,3.527,2646,3.999]],["title/classes/UnverifyByRoleCommand.html",[0,0.247,2647,3.533]],["body/classes/UnverifyByRoleCommand.html",[0,0.286,2,0.911,3,0.102,4,0.091,5,0.091,8,0.297,9,0.872,10,1.131,12,1.187,13,2.506,14,3.033,15,4.064,16,2.211,17,0.388,19,0.825,20,0.01,21,0.658,22,0.337,23,0.693,25,4.487,26,0.933,27,3.514,30,0.651,31,0.163,32,3.385,33,2.485,35,0.98,36,1.053,37,1.474,38,0.423,39,0.98,40,1.67,41,4.091,42,1.806,44,4.486,47,2.801,48,1.474,49,0.113,50,1.662,51,2.27,54,3.796,55,2.596,56,4.486,57,4.486,58,1.079,60,0.98,61,4.386,62,1.895,65,1.028,66,3.56,67,1.474,68,5.334,72,2.293,73,0.706,79,0.007,80,0.007,213,2.343,272,2.555,319,2.918,489,2.27,739,3.56,1299,4.486,2647,5.334,2648,6.509,2649,4.486,2650,6.632,2651,5.086,2652,5.086,2653,5.086,2654,6.632,2655,5.086,2656,5.086,2657,5.086,2658,5.086,2659,5.086,2660,5.086,2661,5.086,2662,5.086,2663,5.086,2664,5.086,2665,5.086,2666,5.086,2667,5.086,2668,5.086,2669,5.086]],["title/classes/UserBanEvent.html",[0,0.247,2670,2.52]],["body/classes/UserBanEvent.html",[0,0.43,2,0.687,3,0.077,4,0.069,5,0.069,8,0.224,9,0.72,12,1.142,17,0.43,19,0.681,20,0.009,21,0.488,22,0.373,23,0.572,30,0.491,31,0.11,38,0.32,49,0.17,65,1.804,67,2.54,70,3.458,73,1.278,79,0.006,80,0.006,112,1.996,202,1.218,203,2.796,213,3.623,218,3.828,220,1.612,231,2.468,280,3.711,307,1.96,435,1.582,501,2.394,505,2.899,512,4.165,514,1.96,517,4.67,521,3.014,526,4.866,599,4.384,680,2.203,713,2.696,819,1.891,2370,2.203,2555,2.899,2573,2.301,2613,3.14,2614,3.14,2670,3.14,2671,2.412,2672,4.861,2673,5.473,2674,3.839,2675,3.839,2676,3.839,2677,4.861,2678,2.539,2679,2.412,2680,2.203,2681,2.539,2682,3.62,2683,3.62,2684,3.62,2685,3.62,2686,3.14,2687,2.412]],["title/controllers/UserController.html",[81,1.48,2178,3.278]],["body/controllers/UserController.html",[0,0.14,3,0.05,4,0.045,5,0.045,8,0.146,9,0.52,10,1.832,12,0.446,14,1.79,17,0.379,19,0.806,20,0.009,21,0.577,22,0.368,23,0.677,26,1.189,30,0.829,31,0.163,33,1.48,35,0.48,36,0.516,37,0.722,38,0.207,39,0.48,42,0.885,48,0.722,49,0.056,50,0.99,55,3.108,58,0.838,60,1.397,62,2.13,65,1.688,66,1.744,67,2.447,73,1.209,74,1.32,76,1.659,79,0.004,80,0.004,81,0.84,83,0.909,85,1.186,86,1.272,88,1.372,89,2.948,90,0.934,91,1.43,112,0.909,139,1.372,140,1.372,196,2.403,203,1.331,206,2.482,208,1.566,216,1.994,221,1.648,222,1.145,230,1.566,234,2.812,235,1.016,246,1.494,247,1.86,248,1.86,252,1.272,253,1.494,254,1.494,255,1.566,256,1.648,257,2.368,258,1.494,259,1.016,260,1.744,263,3.826,294,1.272,348,1.659,404,0.778,414,1.882,435,1.729,463,1.86,482,1.566,485,1.843,492,1.566,530,1.43,548,4.898,549,6.204,550,6.204,551,4.492,554,3.178,561,1.648,564,5.461,565,5.461,571,2.948,572,1.86,573,2.198,579,1.43,582,1.86,584,5.211,585,4.835,586,3.826,587,2.948,588,2.267,599,3.494,600,4.492,606,3.91,609,4.329,610,2.004,611,2.004,615,2.198,616,2.092,631,1.372,659,2.765,660,2.613,679,1.86,680,2.267,713,1.228,782,1.86,819,1.228,827,1.148,867,3.663,870,1.43,871,2.198,872,2.198,873,1.744,886,2.942,921,3.663,922,3.663,1082,2.016,1102,2.198,1169,2.198,1279,3.485,1280,2.004,1308,2.198,1316,2.198,1317,2.198,1318,2.004,1411,3.205,1504,2.004,1697,4.329,1746,4.168,1759,2.198,1796,3.178,2016,3.436,2017,3.178,2109,3.485,2162,1.648,2178,2.948,2366,1.744,2367,1.86,2368,1.86,2473,2.004,2555,2.092,2573,2.942,2596,1.86,2597,2.004,2626,2.198,2629,2.198,2630,2.198,2631,2.198,2632,2.198,2645,2.198,2670,1.43,2679,2.482,2680,1.43,2686,1.43,2687,2.482,2688,2.198,2689,4.908,2690,4.908,2691,4.908,2692,4.908,2693,4.908,2694,2.492,2695,2.492,2696,2.492,2697,2.492,2698,2.492,2699,2.492,2700,2.492,2701,2.492,2702,2.492,2703,2.492,2704,2.492,2705,2.492,2706,4.908,2707,3.95,2708,3.95,2709,3.178,2710,2.492,2711,2.492,2712,2.492,2713,2.492,2714,3.95,2715,2.492,2716,2.492,2717,2.492,2718,2.492,2719,2.492,2720,2.492,2721,2.492,2722,2.492,2723,2.492,2724,2.492,2725,2.492,2726,2.492,2727,2.492,2728,2.492,2729,2.492,2730,2.492,2731,2.492,2732,2.492,2733,2.492,2734,5.585,2735,2.492,2736,2.492,2737,2.492,2738,2.492,2739,5.585,2740,5.585,2741,2.492,2742,2.492,2743,2.492,2744,2.492,2745,2.492,2746,2.492,2747,2.492,2748,2.492,2749,2.492,2750,3.95,2751,2.198,2752,2.492,2753,2.492,2754,2.492,2755,2.492,2756,3.95,2757,2.492,2758,2.492,2759,2.492,2760,2.492,2761,2.492,2762,2.492,2763,2.492,2764,2.492,2765,2.492]],["title/classes/UserInfoUiCommand.html",[0,0.247,398,3.278]],["body/classes/UserInfoUiCommand.html",[0,0.236,2,0.751,3,0.162,4,0.075,5,0.075,8,0.245,9,0.766,10,1.749,12,1.043,13,2.067,14,2.867,15,3.209,16,2.28,17,0.391,19,0.833,20,0.009,21,0.719,22,0.367,23,0.7,26,0.77,27,3.187,29,1.998,30,0.746,31,0.145,32,2.974,33,2.183,35,0.808,36,0.869,37,1.216,38,0.349,39,0.808,40,1.378,45,2.311,46,2.516,49,0.094,50,1.461,51,1.873,58,1.668,60,1.515,62,2.111,64,2.776,65,1.589,67,1.688,73,1.091,74,2.223,76,1.762,77,2.038,79,0.006,80,0.006,196,1.608,215,2.729,216,1.104,222,1.216,231,1.49,249,2.408,278,2.938,327,2.521,342,3.209,353,3.702,398,4.349,404,2.606,414,1.414,419,2.142,435,0.869,588,3.343,656,3.661,657,2.516,668,2.776,669,3.686,672,4.783,674,4.349,686,2.938,697,4.079,698,2.637,773,2.067,1082,2.974,1295,3.376,1311,3.376,1726,3.702,1800,3.702,2006,3.376,2188,3.376,2377,5.816,2378,3.376,2379,5.139,2381,5.139,2382,6.378,2385,3.702,2387,5.904,2639,3.702,2766,5.827,2767,4.197,2768,5.827,2769,4.197,2770,5.827,2771,4.197,2772,4.197,2773,4.197,2774,4.197,2775,4.197,2776,4.197,2777,4.197,2778,4.197,2779,4.197,2780,4.197,2781,4.197,2782,3.702,2783,4.197,2784,4.197,2785,4.197,2786,4.197,2787,4.197,2788,4.197,2789,4.197,2790,4.197,2791,4.197]],["title/classes/UserKickEvent.html",[0,0.247,2680,2.52]],["body/classes/UserKickEvent.html",[0,0.43,2,0.687,3,0.077,4,0.069,5,0.069,8,0.224,9,0.72,12,1.142,17,0.43,19,0.681,20,0.009,21,0.488,22,0.373,23,0.572,30,0.491,31,0.11,38,0.32,49,0.17,65,1.804,67,2.54,70,3.458,73,1.278,79,0.006,80,0.006,112,1.996,202,1.218,203,2.796,213,3.623,218,3.828,220,1.612,231,2.468,280,3.711,307,1.96,435,1.582,501,2.394,505,2.899,512,4.165,514,1.96,517,4.67,521,3.014,526,4.866,599,4.384,680,2.203,713,2.696,819,1.891,2370,2.203,2555,2.899,2573,2.301,2613,3.14,2614,3.14,2670,2.203,2671,2.412,2672,4.861,2677,4.861,2678,2.539,2679,2.412,2680,3.14,2681,2.539,2682,3.62,2683,3.62,2684,3.62,2685,3.62,2686,3.14,2687,2.412,2792,5.473,2793,3.839,2794,3.839,2795,3.839]],["title/modules/UserModule.html",[92,1.519,108,3.074]],["body/modules/UserModule.html",[0,0.31,3,0.154,4,0.099,5,0.099,16,2.402,20,0.009,31,0.167,35,1.476,36,1.141,38,0.459,40,1.809,49,0.123,79,0.007,80,0.007,83,2.546,92,2.984,94,2.539,95,2.539,96,2.715,97,2.715,98,2.539,99,3.65,100,3.531,108,6.169,110,3.44,111,2.715,112,2.009,114,2.919,123,2.919,196,2.345,317,3.034,485,1.317,633,3.325,827,3.217,998,4.387,1082,3.564,1690,5.616,1785,5.211,1865,5.384,2305,5.72,2319,4.86,2796,4.86,2797,5.51,2798,4.86,2799,5.51,2800,6.982,2801,6.982,2802,6.159,2803,6.982,2804,5.51]],["title/classes/UserPurgeEvent.html",[0,0.247,2686,2.52]],["body/classes/UserPurgeEvent.html",[0,0.43,2,0.687,3,0.077,4,0.069,5,0.069,8,0.224,9,0.72,12,1.142,17,0.43,19,0.681,20,0.009,21,0.488,22,0.373,23,0.572,30,0.491,31,0.11,38,0.32,49,0.17,65,1.804,67,2.54,70,3.458,73,1.278,79,0.006,80,0.006,112,1.996,202,1.218,203,2.796,213,3.623,218,3.828,220,1.612,231,2.468,280,3.711,307,1.96,435,1.582,501,2.394,505,2.899,512,4.165,514,1.96,517,4.67,521,3.014,526,4.866,599,4.384,680,2.203,713,2.696,819,1.891,2370,2.203,2555,2.899,2573,2.301,2613,3.14,2614,3.14,2670,2.203,2671,2.412,2672,4.861,2677,4.861,2678,2.539,2679,2.412,2680,2.203,2681,2.539,2682,3.62,2683,3.62,2684,3.62,2685,3.62,2686,3.659,2687,2.412,2805,5.473,2806,3.839,2807,3.839,2808,3.839]],["title/classes/UserSendDMFailedEvent.html",[0,0.247,2613,2.52]],["body/classes/UserSendDMFailedEvent.html",[0,0.43,2,0.687,3,0.077,4,0.069,5,0.069,8,0.224,9,0.72,12,1.142,17,0.43,19,0.681,20,0.009,21,0.488,22,0.373,23,0.572,30,0.491,31,0.11,38,0.32,49,0.17,65,1.804,67,2.54,70,3.604,73,1.275,79,0.006,80,0.006,112,1.996,202,1.218,203,2.796,213,3.623,218,3.828,220,1.612,231,2.468,280,3.641,307,1.96,435,1.582,501,2.394,505,2.899,512,4.165,514,1.96,517,4.67,521,3.014,526,4.866,599,4.384,680,2.203,713,2.696,819,1.891,2370,2.203,2555,2.899,2573,2.301,2613,3.659,2614,3.14,2670,2.203,2671,2.412,2672,4.861,2677,4.861,2678,2.539,2679,2.412,2680,2.203,2681,2.539,2682,3.62,2683,3.62,2684,3.62,2685,3.62,2686,3.14,2687,2.412,2809,5.473,2810,3.839,2811,3.839,2812,3.839]],["title/classes/UserTimeOutDto.html",[0,0.247,2609,3.278]],["body/classes/UserTimeOutDto.html",[0,0.38,2,0.762,3,0.086,4,0.076,5,0.076,8,0.249,17,0.394,20,0.009,22,0.425,26,1.237,31,0.146,35,0.82,36,0.881,39,0.82,49,0.095,58,1.248,60,1.299,73,1.06,77,2.325,79,0.006,80,0.006,196,2.311,202,1.309,214,1.9,215,2.75,216,1.119,231,2.089,235,2.966,259,3.22,280,3.316,293,4.119,294,2.173,303,1.9,342,2.344,348,3.316,360,3.316,404,1.837,485,1.612,599,4.532,684,3.424,710,4.733,835,5.033,843,3.177,844,4.733,885,5.19,959,3.424,1106,3.177,1457,4.392,1950,3.424,1986,3.424,2016,5.934,2039,5.894,2046,5.033,2047,5.033,2050,3.755,2169,3.755,2170,4.733,2457,5.19,2522,3.424,2532,3.424,2534,5.19,2571,3.424,2609,4.392,2633,3.755,2751,3.755,2813,5.43,2814,3.755,2815,7.275,2816,4.257,2817,5.884,2818,5.884,2819,5.884,2820,5.884,2821,5.884,2822,5.884,2823,5.884,2824,4.257,2825,4.257,2826,4.257,2827,4.257,2828,4.257,2829,4.257,2830,3.755,2831,4.257,2832,4.257,2833,3.755,2834,4.257,2835,3.755,2836,4.257,2837,4.257,2838,5.884,2839,5.884,2840,5.884,2841,4.257,2842,4.257,2843,4.257,2844,4.257,2845,4.257,2846,4.257,2847,4.257,2848,4.257,2849,4.257,2850,4.257,2851,5.884,2852,4.257,2853,4.257,2854,4.257,2855,4.257,2856,4.257]],["title/classes/UserTimeOutEvent.html",[0,0.247,2555,2.326]],["body/classes/UserTimeOutEvent.html",[0,0.428,2,0.678,3,0.076,4,0.068,5,0.068,8,0.221,9,0.713,12,1.133,17,0.445,19,0.674,20,0.009,21,0.483,22,0.386,23,0.566,30,0.484,31,0.109,38,0.315,49,0.17,65,1.802,67,2.535,70,3.449,73,1.277,79,0.005,80,0.005,112,1.976,202,1.205,203,2.787,213,3.608,218,3.813,220,1.589,231,2.78,280,3.705,307,1.932,435,1.575,501,2.384,505,2.87,512,4.148,514,1.932,517,4.658,521,2.984,526,4.853,599,4.747,680,2.172,713,2.669,819,1.865,2370,2.172,2555,3.352,2573,2.269,2613,3.109,2614,3.109,2670,2.172,2671,2.379,2672,4.835,2677,4.835,2678,2.504,2679,2.379,2680,2.172,2681,2.504,2682,3.584,2683,3.584,2684,3.584,2685,3.584,2686,3.109,2687,2.379,2857,5.418,2858,3.785,2859,3.785,2860,3.785,2861,3.785]],["title/classes/UserTimeOutFailedEvent.html",[0,0.247,2614,2.52]],["body/classes/UserTimeOutFailedEvent.html",[0,0.426,2,0.668,3,0.075,4,0.067,5,0.067,8,0.218,9,0.705,12,1.124,17,0.456,19,0.668,20,0.009,21,0.478,22,0.396,23,0.561,30,0.478,31,0.108,38,0.311,49,0.169,65,1.799,67,2.53,70,3.591,73,1.276,79,0.005,80,0.005,112,1.956,202,1.193,203,2.779,213,3.593,218,3.799,220,1.568,231,2.769,280,3.698,307,1.905,435,1.567,501,2.374,505,2.841,512,4.131,514,1.905,517,4.646,521,2.954,526,4.841,599,4.732,680,2.142,713,2.643,819,1.839,2370,2.142,2555,2.841,2573,2.238,2613,3.078,2614,3.603,2670,2.142,2671,2.346,2672,4.809,2677,4.809,2678,2.469,2679,2.346,2680,2.142,2681,2.469,2682,3.548,2683,3.548,2684,3.548,2685,3.548,2686,3.078,2687,2.346,2862,5.364,2863,3.733,2864,3.733,2865,3.733,2866,3.733,2867,3.733]],["title/classes/UserToUser.html",[0,0.247,2467,3.278]],["body/classes/UserToUser.html",[0,0.302,2,0.96,3,0.108,4,0.096,5,0.096,8,0.313,17,0.401,20,0.009,22,0.405,26,1.259,31,0.152,35,1.322,36,1.11,39,1.033,49,0.12,60,1.033,73,0.952,77,2.429,79,0.007,80,0.007,196,2.421,202,1.526,235,3.085,259,3.253,348,2.881,485,1.64,497,5.297,768,6.785,835,4.001,841,5.648,843,4.001,948,3.753,2039,5.121,2046,4.001,2047,4.001,2155,4.312,2157,4.001,2162,4.538,2441,4.312,2449,4.312,2463,5.519,2467,5.121,2479,6.087,2480,4.312,2481,4.312,2483,4.312,2596,5.648,2602,6.052,2813,5.648,2830,4.729,2868,4.312,2869,5.361,2870,7.273,2871,7.564,2872,5.361,2873,7.567,2874,5.361,2875,5.361,2876,6.052,2877,5.361,2878,4.312,2879,4.729,2880,5.361,2881,5.361,2882,5.361,2883,5.361]],["title/coverage.html",[2884,4.487]],["body/coverage.html",[0,0.505,1,1.821,3,0.045,5,0.041,6,1.997,7,1.997,16,0.64,20,0.009,22,0.234,72,0.783,79,0.004,80,0.004,81,2.533,82,1.69,84,1.997,86,1.156,98,1.043,109,1.585,134,1.742,142,1.803,196,1.01,199,1.784,201,1.997,203,1.781,216,0.595,218,1.078,220,0.951,224,1.69,225,1.997,229,1.585,241,1.498,243,1.69,246,1.357,249,1.299,250,1.423,253,1.357,254,1.357,255,2.299,257,1.357,258,2.193,259,1.492,285,1.997,286,1.997,305,1.498,306,1.585,313,1.821,318,1.997,324,1.585,360,3.876,363,2.642,364,2.561,366,1.997,367,1.997,376,1.247,377,1.156,378,1.078,380,1.69,382,2.509,384,1.69,386,1.69,389,3.034,390,2.801,392,1.69,395,1.69,398,1.69,401,1.69,402,1.585,403,1.69,404,1.437,405,1.69,409,1.69,411,1.69,414,0.763,415,3.436,435,0.953,457,1.585,488,1.498,489,1.011,499,1.498,500,3.436,514,1.156,515,1.498,522,1.498,528,1.69,529,1.997,571,1.69,572,1.69,575,1.585,576,2.731,577,2.561,578,2.561,620,3.901,638,1.69,648,1.997,649,1.997,699,1.585,700,1.997,701,1.997,720,1.997,721,1.997,732,1.69,735,1.69,752,1.69,754,1.498,833,1.997,834,1.997,845,1.997,846,1.997,851,1.69,852,2.731,853,2.943,858,1.585,867,1.69,868,1.997,869,1.997,886,1.357,887,3.704,921,1.69,922,1.69,924,1.585,925,2.943,926,1.821,927,2.943,935,1.69,936,3.045,938,1.585,939,3.647,968,1.585,969,3.946,1006,1.585,1024,1.585,1026,1.585,1032,1.997,1039,4.498,1044,1.821,1045,1.997,1059,1.821,1060,1.821,1075,2.943,1083,2.099,1086,1.69,1087,3.839,1088,3.722,1089,2.943,1095,1.585,1103,1.498,1118,1.997,1119,2.943,1137,1.115,1138,1.423,1144,2.943,1189,1.69,1190,1.997,1213,1.585,1214,2.943,1215,2.561,1220,1.69,1223,1.585,1224,1.997,1225,1.997,1248,1.69,1256,1.821,1257,1.357,1259,1.821,1260,2.943,1262,1.821,1351,1.585,1352,1.821,1363,1.69,1366,1.821,1367,1.821,1368,1.821,1403,1.585,1410,1.821,1411,1.299,1414,1.69,1435,1.997,1456,1.69,1564,1.69,1565,1.997,1571,1.69,1589,1.997,1625,1.585,1662,1.69,1663,1.997,1669,1.69,1670,4.253,1690,1.821,1739,1.821,1772,3.562,1774,2.943,1786,1.997,1789,1.821,1811,1.821,1812,1.997,1813,1.997,1821,1.69,1822,3.223,1823,1.997,1837,1.498,1840,1.69,1856,2.943,1863,1.585,1864,1.585,1865,1.357,1882,1.997,1948,1.997,1966,4.332,2022,1.997,2023,1.997,2030,1.997,2033,1.997,2035,1.69,2036,1.997,2037,1.997,2051,1.997,2052,1.997,2080,1.821,2081,1.821,2082,1.821,2083,1.821,2177,1.69,2178,1.69,2183,1.997,2184,1.997,2203,1.997,2213,1.997,2225,1.997,2238,1.997,2239,1.997,2240,1.997,2245,1.821,2246,1.997,2250,2.943,2305,1.69,2306,1.997,2328,1.997,2335,1.997,2366,1.585,2367,2.731,2368,2.731,2375,1.69,2377,2.943,2378,2.943,2389,1.997,2399,1.997,2431,1.997,2467,1.69,2518,2.943,2555,1.199,2587,1.997,2588,1.997,2605,1.997,2609,1.69,2613,1.299,2614,1.299,2647,1.821,2648,1.997,2649,1.997,2670,1.299,2671,3.901,2680,1.299,2686,1.299,2688,1.997,2813,3.436,2814,1.997,2868,2.943,2878,1.821,2884,1.69,2885,2.264,2886,2.264,2887,8.444,2888,6.801,2889,7.376,2890,2.264,2891,2.264,2892,5.804,2893,5.804,2894,8.265,2895,1.997,2896,1.997,2897,7.376,2898,4.061,2899,4.061,2900,8.404,2901,3.227,2902,1.997,2903,1.997,2904,3.659,2905,2.264,2906,3.659,2907,2.264,2908,2.264,2909,2.264,2910,5.287,2911,2.264,2912,2.264,2913,1.997,2914,2.264,2915,2.264,2916,7.849,2917,3.659,2918,2.264,2919,2.264,2920,1.997,2921,1.997,2922,1.997,2923,4.664,2924,1.997,2925,7.642,2926,3.227,2927,1.997,2928,2.264,2929,3.659,2930,6.534,2931,6.208,2932,1.997,2933,1.997,2934,4.668,2935,1.997,2936,1.997,2937,2.264,2938,2.264,2939,2.264]],["title/dependencies.html",[95,2.436,2940,3.227]],["body/dependencies.html",[0,0.412,20,0.009,22,0.302,35,1.409,36,1.515,38,0.609,39,1.144,42,2.109,79,0.007,80,0.007,90,2.225,95,2.736,117,3.928,129,4.777,139,3.27,140,3.27,303,2.651,631,3.27,1063,4.777,1106,4.432,1265,5.239,1577,4.777,1838,3.928,1844,4.432,1859,3.928,1869,4.777,1902,5.239,1957,6.379,2941,5.939,2942,5.939,2943,5.939,2944,7.93,2945,5.939,2946,5.939,2947,7.317,2948,5.939,2949,5.939,2950,5.939,2951,5.939,2952,5.939,2953,5.939,2954,5.939,2955,5.939,2956,5.939,2957,5.939,2958,5.239,2959,5.939,2960,5.939,2961,5.939,2962,5.939,2963,5.939,2964,5.939,2965,5.939,2966,5.939,2967,5.939,2968,5.939,2969,5.939,2970,5.939]],["title/miscellaneous/functions.html",[2971,2.299,2972,4.664]],["body/miscellaneous/functions.html",[0,0.344,8,0.262,12,1.241,19,0.999,20,0.009,21,0.715,22,0.445,23,0.839,30,1.106,39,1.335,48,1.3,58,0.952,73,1.114,79,0.006,80,0.006,98,3.194,112,1.636,203,2.621,215,2.488,220,2.562,228,2.471,234,1.636,246,3.658,290,2.69,404,1.401,414,2.336,419,3.538,435,0.929,445,2.471,485,1.859,538,3.61,569,4.585,571,4.554,572,3.349,607,4.664,633,3.821,742,4.036,764,3.349,773,2.211,850,3.958,938,4.853,939,2.82,961,3.958,1039,5.146,1085,2.575,1088,2.69,1168,3.61,1271,3.349,1327,4.853,1362,3.61,1366,4.908,1367,3.61,1368,4.908,1458,4.585,1478,3.349,1479,3.349,1809,3.61,1985,3.958,2078,6.562,2080,4.908,2083,4.908,2161,3.958,2547,6.862,2574,3.349,2913,3.958,2920,3.958,2921,5.382,2922,5.382,2932,5.382,2933,5.382,2934,5.984,2935,3.958,2936,5.382,2971,2.82,2972,3.958,2973,4.488,2974,4.488,2975,4.488,2976,4.488,2977,6.115,2978,4.488,2979,4.488,2980,6.932,2981,6.932,2982,4.488,2983,4.488,2984,6.102,2985,3.958,2986,4.488,2987,4.488,2988,4.488,2989,4.488,2990,4.488,2991,6.102,2992,4.488,2993,6.102,2994,4.488,2995,6.102,2996,4.488,2997,4.488,2998,6.102,2999,6.115,3000,4.488,3001,4.488,3002,4.488,3003,3.958,3004,4.488,3005,4.488,3006,7.439,3007,6.102,3008,4.488,3009,4.488,3010,6.932,3011,6.102,3012,4.488]],["title/index.html",[8,0.214,3013,3.227,3014,3.227]],["body/index.html",[4,0.105,20,0.009,79,0.007,80,0.007,430,4.526,485,1.402,664,4.108,780,4.721,998,3.688,1031,4.38,1041,4.721,1467,5.177,2515,6.441,2600,6.407,2884,4.38,3015,5.869,3016,5.869,3017,7.263,3018,5.869,3019,5.869,3020,5.869,3021,5.869,3022,5.869,3023,7.888,3024,5.177,3025,5.869,3026,5.869,3027,5.177,3028,8.748,3029,5.869,3030,5.869,3031,5.177,3032,5.869,3033,6.407,3034,5.869,3035,5.869,3036,5.869,3037,5.869,3038,7.263,3039,7.263,3040,5.869,3041,5.869,3042,5.869,3043,6.407,3044,5.177,3045,5.869,3046,5.869,3047,5.869,3048,5.869,3049,4.721,3050,5.869,3051,5.869,3052,5.869,3053,5.869,3054,5.869,3055,5.869,3056,4.721,3057,5.869,3058,5.869,3059,5.869,3060,5.869,3061,5.869,3062,5.869,3063,4.38]],["title/classes/initGuildCommand.html",[0,0.247,395,3.278]],["body/classes/initGuildCommand.html",[0,0.171,2,0.544,3,0.061,4,0.054,5,0.054,8,0.178,9,0.606,10,1.563,12,0.825,16,1.757,17,0.325,19,0.693,20,0.01,21,0.686,22,0.283,23,0.582,25,3.564,26,0.846,27,2.65,29,2.958,30,0.59,31,0.125,32,2.352,34,1.822,35,0.585,36,0.629,37,0.881,38,0.253,39,0.585,40,0.998,45,1.674,46,1.822,47,1.674,48,0.881,49,0.068,50,0.762,51,1.356,55,2.352,58,0.645,60,1.607,62,2.22,65,1.731,77,2.139,79,0.005,80,0.005,197,3.724,216,2.065,222,0.881,272,2.897,348,1.276,355,5.264,395,3.439,414,2.249,482,1.91,485,0.726,489,2.98,492,3.903,503,3.408,610,4.997,611,4.997,668,3.048,669,3.87,672,3.682,697,4.348,724,4.91,728,3.707,741,2.01,754,2.01,770,4.065,772,3.048,773,3.06,797,3.707,827,2.123,1000,3.226,1010,1.822,1173,2.268,1257,2.763,1313,2.681,2126,4.91,2200,3.707,2261,5.889,2400,4.065,2401,4.065,2402,2.681,2404,4.065,2405,4.065,2406,4.065,2407,4.065,2408,4.065,2492,4.065,2493,6.049,2507,6.633,2594,7.513,2895,5.479,2896,2.681,2971,1.91,3044,2.681,3064,4.608,3065,3.039,3066,3.039,3067,4.608,3068,3.039,3069,3.039,3070,3.039,3071,6.212,3072,6.212,3073,3.039,3074,6.677,3075,3.039,3076,6.677,3077,3.039,3078,3.039,3079,3.039,3080,3.039,3081,4.608,3082,3.039,3083,6.212,3084,7.521,3085,7.521,3086,7.521,3087,3.039,3088,4.608,3089,4.608,3090,3.039,3091,3.039,3092,4.608,3093,3.039,3094,3.039,3095,4.608,3096,3.039,3097,3.039,3098,4.608,3099,3.039,3100,3.039,3101,4.608,3102,3.039,3103,3.039,3104,4.608,3105,3.039,3106,3.039,3107,3.039,3108,4.608,3109,3.039,3110,3.039,3111,4.608,3112,4.608,3113,4.608,3114,4.608,3115,3.039,3116,3.039,3117,3.039,3118,4.608,3119,7.521,3120,3.039,3121,3.039]],["title/license.html",[3013,3.227,3014,3.227,3063,2.731]],["body/license.html",[0,0.05,4,0.143,5,0.029,9,0.116,17,0.052,20,0.004,29,1.064,31,0.018,50,0.221,58,0.187,79,0.002,80,0.002,112,0.322,196,1.591,212,0.618,213,0.407,216,1.127,230,1.016,231,0.574,259,1.127,272,0.861,280,0.371,293,0.618,294,0.451,305,0.584,307,1.411,320,1.426,361,0.779,363,2.28,365,1.565,403,0.659,430,3.119,452,1.657,459,3.185,470,2.497,491,2.063,560,0.618,578,2.535,585,0.659,588,0.507,607,3.896,631,0.89,633,2.499,634,1.132,636,0.435,662,2.405,664,3.529,689,1.3,716,0.618,759,1.207,773,0.435,781,0.779,799,2.224,813,2.131,836,0.779,837,1.972,841,1.207,893,2.131,909,1.972,965,1.069,973,3.371,998,2.276,1000,0.618,1022,0.711,1027,1.207,1034,0.711,1037,0.779,1040,1.426,1047,6.337,1115,0.711,1217,1.828,1267,0.711,1309,4.629,1310,1.972,1311,1.798,1412,0.779,1455,2.063,1456,0.659,1457,1.207,1458,1.479,1476,1.426,1478,1.207,1479,3.594,1493,0.711,1521,1.426,1649,4.372,1746,3.763,1776,0.779,1777,2.224,1785,2.063,1807,0.711,1830,5.655,1926,0.779,1931,4.447,1943,0.779,1967,0.779,1976,0.779,1982,3.194,1986,2.913,1993,0.711,2019,1.207,2155,0.711,2170,0.711,2171,0.711,2309,0.711,2314,0.779,2336,1.3,2347,4.447,2352,1.426,2371,0.711,2478,1.3,2479,2.592,2493,2.224,2515,2.965,2522,3.196,2552,5.547,2565,0.779,2574,0.659,2582,1.972,2624,1.972,2640,3.78,2709,5.228,2782,1.426,2802,1.426,2833,0.779,2835,1.972,2884,1.207,2927,1.426,2958,0.779,2985,2.438,2999,1.426,3003,1.426,3027,2.438,3031,0.779,3033,0.779,3043,1.972,3049,1.798,3056,1.3,3063,6.499,3122,6.047,3123,5.912,3124,6.684,3125,6.568,3126,0.883,3127,0.883,3128,2.236,3129,7.124,3130,3.222,3131,5.912,3132,6.768,3133,3.222,3134,0.883,3135,0.883,3136,3.222,3137,6.847,3138,2.236,3139,2.236,3140,5.248,3141,2.236,3142,0.883,3143,2.236,3144,0.883,3145,0.883,3146,1.617,3147,5.248,3148,3.222,3149,3.973,3150,2.765,3151,1.617,3152,5.608,3153,4.286,3154,0.883,3155,0.883,3156,3.621,3157,1.617,3158,0.883,3159,0.883,3160,0.883,3161,5.042,3162,7.761,3163,2.236,3164,0.883,3165,0.883,3166,2.765,3167,4.565,3168,0.883,3169,4.565,3170,0.883,3171,3.222,3172,0.883,3173,0.883,3174,2.765,3175,0.883,3176,5.766,3177,0.883,3178,0.883,3179,0.883,3180,4.815,3181,2.236,3182,5.042,3183,3.222,3184,5.248,3185,0.883,3186,1.617,3187,0.883,3188,0.883,3189,2.236,3190,0.883,3191,0.883,3192,0.883,3193,5.042,3194,0.883,3195,1.617,3196,0.883,3197,0.883,3198,2.765,3199,0.883,3200,1.617,3201,0.883,3202,0.883,3203,2.236,3204,4.565,3205,6.047,3206,0.883,3207,3.78,3208,4.286,3209,0.883,3210,2.236,3211,0.883,3212,0.883,3213,0.883,3214,3.621,3215,2.765,3216,2.236,3217,1.617,3218,0.883,3219,2.765,3220,0.883,3221,2.236,3222,0.883,3223,1.617,3224,1.617,3225,2.236,3226,7.794,3227,0.883,3228,7.242,3229,5.436,3230,3.222,3231,3.222,3232,3.621,3233,2.236,3234,0.883,3235,2.236,3236,6.289,3237,1.617,3238,5.248,3239,0.883,3240,0.883,3241,0.883,3242,8.646,3243,0.883,3244,0.883,3245,1.617,3246,3.621,3247,0.883,3248,1.617,3249,0.883,3250,4.815,3251,0.883,3252,2.765,3253,0.883,3254,1.617,3255,7.727,3256,2.236,3257,4.565,3258,2.765,3259,0.883,3260,1.617,3261,2.236,3262,4.565,3263,4.815,3264,2.765,3265,0.883,3266,2.765,3267,1.617,3268,2.765,3269,2.765,3270,0.883,3271,2.236,3272,6.922,3273,1.617,3274,0.883,3275,4.286,3276,0.883,3277,3.621,3278,5.766,3279,2.236,3280,1.617,3281,3.973,3282,5.042,3283,3.621,3284,0.883,3285,1.617,3286,0.883,3287,0.883,3288,3.973,3289,0.883,3290,5.436,3291,1.617,3292,0.883,3293,0.883,3294,2.236,3295,0.883,3296,0.883,3297,0.883,3298,0.883,3299,2.236,3300,4.286,3301,2.765,3302,0.883,3303,0.883,3304,0.883,3305,1.617,3306,4.815,3307,0.883,3308,1.617,3309,0.883,3310,0.883,3311,2.236,3312,2.236,3313,3.973,3314,2.236,3315,2.236,3316,0.883,3317,0.883,3318,3.222,3319,3.222,3320,3.621,3321,0.883,3322,0.883,3323,1.617,3324,2.236,3325,0.883,3326,0.883,3327,0.883,3328,0.883,3329,0.883,3330,6.993,3331,2.236,3332,4.286,3333,0.883,3334,3.621,3335,1.617,3336,2.765,3337,0.883,3338,0.883,3339,1.617,3340,1.617,3341,2.765,3342,0.883,3343,0.883,3344,0.883,3345,0.883,3346,1.617,3347,3.222,3348,0.883,3349,1.617,3350,0.883,3351,0.883,3352,3.222,3353,2.765,3354,0.883,3355,2.765,3356,2.765,3357,0.883,3358,3.973,3359,2.765,3360,0.883,3361,3.222,3362,0.883,3363,1.617,3364,0.883,3365,0.883,3366,1.617,3367,0.883,3368,0.883,3369,0.883,3370,2.236,3371,2.236,3372,3.621,3373,0.883,3374,1.617,3375,0.883,3376,1.617,3377,1.617,3378,1.617,3379,0.883,3380,5.436,3381,1.617,3382,0.883,3383,0.883,3384,0.883,3385,0.883,3386,0.883,3387,0.883,3388,0.883,3389,2.236,3390,0.883,3391,5.766,3392,2.236,3393,0.883,3394,0.883,3395,0.883,3396,0.883,3397,3.222,3398,3.621,3399,0.883,3400,0.883,3401,2.236,3402,0.883,3403,0.883,3404,2.765,3405,0.883,3406,0.883,3407,0.883,3408,0.883,3409,0.779,3410,0.883,3411,0.883,3412,1.617,3413,0.883,3414,2.236,3415,0.883,3416,0.883,3417,1.617,3418,0.883,3419,0.883,3420,0.883,3421,0.883,3422,0.883,3423,1.617,3424,1.617,3425,1.617,3426,4.565,3427,0.883,3428,3.621,3429,0.883,3430,0.883,3431,1.617,3432,2.236,3433,2.236,3434,2.765,3435,2.765,3436,2.765,3437,0.883,3438,3.222,3439,0.883,3440,2.236,3441,2.236,3442,0.883,3443,1.617,3444,0.883,3445,1.617,3446,3.222,3447,1.617,3448,2.765,3449,2.765,3450,2.236,3451,5.608,3452,3.222,3453,0.883,3454,0.883,3455,2.236,3456,3.973,3457,1.617,3458,0.883,3459,0.883,3460,0.883,3461,0.883,3462,2.236,3463,0.883,3464,0.883,3465,0.883,3466,2.236,3467,0.883,3468,0.883,3469,1.617,3470,0.883,3471,0.883,3472,1.617,3473,0.883,3474,2.236,3475,0.883,3476,0.883,3477,2.236,3478,1.617,3479,3.621,3480,6.499,3481,2.236,3482,1.617,3483,1.617,3484,1.617,3485,1.617,3486,2.765,3487,1.617,3488,0.883,3489,0.883,3490,0.883,3491,0.883,3492,0.883,3493,3.621,3494,1.617,3495,0.883,3496,0.883,3497,0.883,3498,0.883,3499,1.617,3500,0.883,3501,1.617,3502,0.883,3503,3.222,3504,0.883,3505,4.286,3506,0.883,3507,5.042,3508,1.617,3509,0.883,3510,0.883,3511,0.883,3512,0.883,3513,0.883,3514,0.883,3515,1.617,3516,0.883,3517,2.236,3518,3.222,3519,2.765,3520,1.617,3521,0.883,3522,0.883,3523,0.883,3524,0.883,3525,0.883,3526,1.617,3527,0.883,3528,0.883,3529,0.883,3530,2.765,3531,0.883,3532,1.617,3533,0.883,3534,1.617,3535,0.883,3536,0.883,3537,2.236,3538,0.883,3539,0.883,3540,0.883,3541,0.883,3542,0.883,3543,0.883,3544,0.883,3545,0.883,3546,0.883,3547,0.883,3548,2.236,3549,0.883,3550,0.883,3551,0.883,3552,0.883,3553,0.883,3554,3.222,3555,0.883,3556,0.883,3557,0.883,3558,0.883,3559,0.883,3560,0.883,3561,0.883,3562,0.883,3563,0.883,3564,0.883,3565,0.883,3566,3.973,3567,2.236,3568,0.883,3569,2.765,3570,0.883,3571,0.883,3572,2.236,3573,0.883,3574,0.883,3575,2.236,3576,0.883,3577,1.617,3578,0.883,3579,0.883,3580,0.883,3581,0.883,3582,0.883,3583,0.883,3584,0.883,3585,0.883,3586,0.883,3587,0.883,3588,0.883,3589,0.883,3590,1.617,3591,1.617,3592,0.883,3593,0.883,3594,2.765,3595,0.883,3596,2.236,3597,1.617,3598,0.883,3599,1.617,3600,2.236,3601,2.236,3602,0.883,3603,1.617,3604,0.883,3605,2.236,3606,3.973,3607,0.883,3608,1.617,3609,1.617,3610,0.883,3611,0.883,3612,0.883,3613,0.883,3614,0.883,3615,0.883,3616,1.617,3617,0.883,3618,2.765,3619,2.236,3620,0.883,3621,3.222,3622,0.883,3623,0.883,3624,0.883,3625,0.883,3626,0.883,3627,0.883,3628,1.617,3629,1.617,3630,1.617,3631,2.236,3632,0.883,3633,1.617,3634,2.236,3635,0.883,3636,1.617,3637,0.883,3638,1.617,3639,0.883,3640,0.883,3641,1.617,3642,6.684,3643,2.236,3644,0.883,3645,3.222,3646,4.815,3647,2.236,3648,0.883,3649,0.883,3650,0.883,3651,2.765,3652,0.883,3653,2.236,3654,0.883,3655,0.883,3656,0.883,3657,0.883,3658,0.883,3659,0.883,3660,0.883,3661,2.765,3662,1.617,3663,0.883,3664,0.883,3665,2.236,3666,0.883,3667,1.617,3668,2.236,3669,1.617,3670,0.883,3671,0.883,3672,0.883,3673,0.883,3674,1.617,3675,2.236,3676,0.883,3677,0.883,3678,1.617,3679,0.883,3680,1.617,3681,0.883,3682,0.883,3683,0.883,3684,0.883,3685,0.883,3686,0.883,3687,2.236,3688,1.617,3689,0.883,3690,0.883,3691,0.883,3692,2.765,3693,0.883,3694,2.236,3695,0.883,3696,0.883,3697,0.883,3698,1.617,3699,0.883,3700,0.883,3701,0.883,3702,2.236,3703,1.617,3704,1.617,3705,0.883,3706,1.617,3707,3.973,3708,1.617,3709,2.236,3710,2.765,3711,0.883,3712,0.883,3713,1.617,3714,0.883,3715,2.236,3716,0.883,3717,1.617,3718,0.883,3719,0.883,3720,0.883,3721,0.883,3722,2.765,3723,0.883,3724,2.236,3725,1.617,3726,0.883,3727,1.617,3728,0.883,3729,0.883,3730,0.883,3731,1.617,3732,1.617,3733,0.883,3734,1.617,3735,0.883,3736,0.883,3737,0.883,3738,0.883,3739,0.883,3740,2.236,3741,0.883,3742,0.883,3743,0.883,3744,1.617,3745,2.765,3746,1.617,3747,2.236,3748,0.883,3749,0.883,3750,0.883,3751,0.883,3752,1.617,3753,0.883,3754,0.883,3755,0.883,3756,0.883,3757,0.883,3758,0.883,3759,0.883,3760,0.883,3761,0.883,3762,0.883,3763,0.883,3764,0.883,3765,0.883,3766,0.883,3767,2.765,3768,0.883,3769,0.883,3770,1.617,3771,0.883,3772,0.883,3773,0.883,3774,0.883,3775,0.883,3776,0.883,3777,0.883,3778,0.883,3779,0.883,3780,0.883,3781,0.883,3782,0.883,3783,1.617,3784,0.883,3785,0.883,3786,0.883,3787,0.883,3788,0.883,3789,0.883,3790,1.617,3791,0.883,3792,0.883,3793,0.883,3794,0.883,3795,0.883,3796,0.883,3797,0.883,3798,0.883,3799,1.617,3800,1.617,3801,3.222,3802,0.883,3803,0.883,3804,0.883,3805,0.883,3806,0.883,3807,0.883,3808,0.883,3809,2.236,3810,1.617,3811,0.883,3812,1.617,3813,1.617,3814,1.617,3815,0.883,3816,0.883,3817,0.883,3818,0.883,3819,0.883,3820,0.883,3821,1.617,3822,0.883,3823,0.883,3824,0.883,3825,1.617,3826,0.883,3827,2.236,3828,0.883,3829,0.883,3830,0.883,3831,0.883,3832,0.883,3833,0.883,3834,0.883,3835,0.883,3836,0.883,3837,0.883,3838,0.883,3839,1.617,3840,0.883,3841,0.883,3842,0.883,3843,0.883,3844,0.883,3845,0.883,3846,0.883,3847,0.883,3848,0.883,3849,0.883,3850,0.883,3851,0.883,3852,0.883,3853,0.883,3854,0.883,3855,0.883,3856,0.883,3857,0.883,3858,0.883,3859,1.617,3860,1.617,3861,0.883,3862,0.883,3863,0.883,3864,0.883,3865,0.883,3866,0.883,3867,0.883,3868,0.883,3869,0.883,3870,0.883,3871,0.883,3872,0.883,3873,0.883,3874,0.883,3875,0.883,3876,0.883,3877,0.883,3878,0.883,3879,0.883,3880,0.883,3881,0.883,3882,0.883,3883,0.883,3884,0.883,3885,0.883,3886,0.883,3887,0.779,3888,0.883]],["title/modules.html",[94,2.77]],["body/modules.html",[20,0.008,79,0.008,80,0.008,93,4.695,94,2.898,104,4.403,105,4.403,106,4.403,107,4.403,108,4.403,130,4.161,132,4.161,136,4.161,141,4.161,1133,4.403,1402,4.403,3049,7.348,3889,9.136,3890,9.136,3891,9.136]],["title/overview.html",[3892,5.303]],["body/overview.html",[2,0.674,16,2.429,20,0.009,79,0.005,80,0.005,83,1.373,92,1.302,93,6.49,94,1.735,95,1.735,96,1.855,97,1.855,98,1.735,99,1.793,100,1.735,101,3.322,102,3.322,103,3.322,104,5.855,105,6.324,106,6.012,107,6.052,108,5.599,109,4.417,110,2.66,111,1.855,112,1.373,130,5.172,132,5.29,136,5.466,141,5.466,200,1.492,241,5.172,310,3.322,311,3.322,312,3.322,313,5.075,365,2.636,374,3.322,375,3.322,376,4.606,377,4.218,378,3.983,470,2.367,924,4.417,1103,5.172,1133,6.147,1134,3.322,1135,3.322,1136,3.322,1137,4.012,1138,4.331,1223,4.417,1351,4.417,1398,3.322,1399,3.322,1400,3.322,1401,3.322,1402,5.599,1403,4.417,1416,3.322,1417,3.322,1584,3.322,1586,3.322,1685,3.322,1687,3.322,1773,2.367,1837,5.172,1860,3.322,1861,3.322,1862,3.322,1863,4.417,1864,4.417,1865,4.795,2796,3.322,2798,3.322,3409,3.322,3892,3.322,3893,5.398,3894,3.766,3895,3.766]],["title/properties.html",[202,1.176,2940,3.227]],["body/properties.html",[20,0.009,21,0.593,35,1.282,79,0.008,80,0.008,202,1.481,485,1.591,633,3.732,759,4.968,826,5.871,827,3.611,1007,4.403,1043,5.354,1217,4.403,1269,5.871,1455,4.968,2311,5.354,2337,5.871,2478,5.354,3024,5.871,3056,5.354,3063,4.968,3125,5.871,3887,5.871,3896,6.657,3897,6.657,3898,6.657,3899,6.657,3900,6.657,3901,6.657,3902,6.657,3903,6.657]],["title/miscellaneous/typealiases.html",[2971,2.299,3904,5.287]],["body/miscellaneous/typealiases.html",[8,0.411,20,0.008,22,0.357,79,0.008,80,0.008,249,4.644,250,5.086,1966,5.25,2971,4.42,3905,7.034,3906,7.139]],["title/miscellaneous/variables.html",[1652,4.253,2971,2.299]],["body/miscellaneous/variables.html",[0,0.272,8,0.142,10,0.863,20,0.01,21,0.346,22,0.451,30,0.497,48,2.086,55,3.435,58,1.598,60,1.477,62,0.626,67,1.859,70,1.582,72,1.672,73,1.168,77,0.742,79,0.004,80,0.004,81,0.821,192,2.149,193,2.149,196,1.771,202,0.863,203,2.354,212,3.385,214,3.792,215,3.465,216,1.77,231,2.278,235,1.582,252,3.435,254,2.899,255,1.531,258,1.461,259,1.972,272,1.495,305,3.199,306,2.717,327,1.679,342,3.037,360,2.694,364,2.717,368,2.149,402,2.717,404,1.88,414,0.821,416,3.039,417,1.706,424,2.567,430,4.526,435,1.329,436,2.567,445,2.663,450,2.694,452,2.326,489,1.088,501,1.472,503,2.815,607,3.846,616,2.056,633,1.16,641,3.039,659,1.706,768,3.89,780,3.122,827,1.123,841,2.896,854,3.61,857,2.899,861,2.899,862,3.039,863,3.039,864,2.717,870,1.398,873,1.706,887,1.96,888,2.149,889,2.149,890,2.149,891,2.149,892,2.149,893,1.612,896,2.896,915,2.896,921,3.609,922,2.896,923,2.896,936,1.612,939,1.531,948,1.706,969,1.819,970,3.122,971,3.122,972,3.122,973,2.717,974,3.122,1009,1.96,1010,2.899,1011,3.122,1013,3.122,1015,1.96,1024,3.385,1026,2.717,1027,1.819,1028,1.96,1029,1.96,1059,3.122,1060,3.122,1082,1.244,1238,1.96,1241,3.89,1257,3.306,1259,3.122,1260,3.122,1262,3.122,1287,2.149,1288,2.149,1325,2.149,1327,2.717,1374,3.423,1411,3.165,1458,1.612,1477,1.96,1490,2.149,1529,1.96,1652,1.96,1669,3.609,1670,3.122,1755,1.96,1772,3.681,1774,3.122,1789,3.122,1797,2.149,1798,2.149,1805,3.423,1806,2.149,1807,1.96,1808,2.149,1809,1.96,1810,2.149,1811,3.122,1838,2.567,1914,1.96,1966,1.819,1987,2.149,1993,1.96,1994,2.149,1995,2.149,1996,3.423,1997,2.149,1998,2.149,1999,2.149,2000,2.149,2001,2.149,2002,3.423,2003,2.149,2004,2.149,2005,2.149,2006,1.96,2007,2.149,2008,2.149,2009,2.149,2010,2.149,2011,2.149,2012,2.149,2013,2.149,2014,2.149,2015,2.149,2016,1.706,2017,1.96,2019,1.819,2020,2.149,2081,3.122,2082,3.122,2153,2.149,2157,1.819,2162,2.567,2250,1.96,2273,2.149,2441,1.96,2449,1.96,2463,3.122,2480,1.96,2481,1.96,2483,1.96,2518,1.96,2557,2.149,2709,3.122,2813,1.819,2868,3.122,2870,4.266,2871,4.865,2876,2.149,2878,3.122,2879,2.149,2898,2.149,2899,4.865,2901,4.865,2902,3.423,2903,3.423,2923,5.659,2924,4.266,2926,4.266,2934,3.89,2971,1.531,2977,3.423,3207,3.423,3906,3.423,3907,4.836,3908,2.437,3909,2.437,3910,2.437,3911,2.437,3912,5.515,3913,2.437,3914,3.881,3915,3.881,3916,3.881,3917,3.881,3918,2.437,3919,2.437,3920,3.881,3921,5.515,3922,3.881,3923,2.437,3924,3.881,3925,2.437,3926,3.881,3927,3.881,3928,3.881,3929,6.023,3930,5.515,3931,2.437,3932,2.437,3933,3.881,3934,4.836,3935,5.515,3936,2.437,3937,2.437,3938,2.437,3939,2.437,3940,2.437,3941,2.437,3942,2.437,3943,2.437,3944,2.437,3945,2.437,3946,2.437,3947,2.437,3948,2.437]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":360,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":3896,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":2954,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2968,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2953,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2961,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2887,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2911,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2905,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2906,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2912,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2909,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2907,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2889,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":2891,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2894,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2888,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2892,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2897,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2893,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2910,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2904,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":913,"title":{},"body":{"classes/DiscordUser.html":{}}}],["00:00:00",{"_index":2530,"title":{},"body":{"injectables/TasksService.html":{}}}],["1",{"_index":813,"title":{"classes/SelfDto-1.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"license.html":{}}}],["1.7.0",{"_index":2964,"title":{},"body":{"dependencies.html":{}}}],["1.7.7",{"_index":2952,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2925,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2931,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":2928,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":3392,"title":{},"body":{"license.html":{}}}],["10.0.3",{"_index":2947,"title":{},"body":{"dependencies.html":{}}}],["10.4.2",{"_index":2944,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":2916,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":2169,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/UserTimeOutDto.html":{}}}],["1011511871297302608",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"injectables/ModRequestFlow.html":{}}}],["1011513775054143632",{"_index":2106,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["1011529685357838376",{"_index":1389,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["1011532621412577350",{"_index":2098,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["1042351896",{"_index":1315,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["1051979218164125826",{"_index":1390,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["1056592866660581456",{"_index":438,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["1080070968900333578",{"_index":442,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["11",{"_index":2927,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["1132244079242133555",{"_index":1391,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["12",{"_index":3893,"title":{},"body":{"overview.html":{}}}],["123",{"_index":1471,"title":{},"body":{"injectables/GuildService.html":{}}}],["1234",{"_index":906,"title":{},"body":{"classes/DiscordUser.html":{}}}],["123456789012345678",{"_index":915,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["128",{"_index":1681,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["13",{"_index":3882,"title":{},"body":{"license.html":{}}}],["14",{"_index":1507,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["14.16.2",{"_index":2955,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":3608,"title":{},"body":{"license.html":{}}}],["1567081521233",{"_index":1029,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":3609,"title":{},"body":{"license.html":{}}}],["1600000000000",{"_index":1015,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["1671981769958",{"_index":431,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["19",{"_index":3126,"title":{},"body":{"license.html":{}}}],["1996",{"_index":3411,"title":{},"body":{"license.html":{}}}],["2",{"_index":662,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["2.0.3",{"_index":2946,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":2917,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":2937,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3409,"title":{},"body":{"license.html":{},"overview.html":{}}}],["200",{"_index":549,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["2007",{"_index":3128,"title":{},"body":{"license.html":{}}}],["24",{"_index":2854,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["28",{"_index":3763,"title":{},"body":{"license.html":{}}}],["3",{"_index":470,"title":{},"body":{"classes/Channel.html":{},"classes/CleanWfpMember.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SpecialCommand.html":{},"license.html":{},"overview.html":{}}}],["3.0",{"_index":3902,"title":{},"body":{"properties.html":{}}}],["3.0.3",{"_index":2943,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":2945,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":2908,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2919,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1456,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"coverage.html":{},"license.html":{}}}],["322822954796974080",{"_index":1770,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["4",{"_index":3441,"title":{},"body":{"license.html":{}}}],["4.0.0",{"_index":2959,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":2962,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":2949,"title":{},"body":{"dependencies.html":{}}}],["4.26.1",{"_index":2970,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":2171,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["5,7",{"_index":1125,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["5.2.5",{"_index":2941,"title":{},"body":{"dependencies.html":{}}}],["5.3.7",{"_index":2942,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":2915,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2930,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":1318,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["500ms",{"_index":1308,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["51",{"_index":3894,"title":{},"body":{"overview.html":{}}}],["559623534870528",{"_index":1028,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":3895,"title":{},"body":{"overview.html":{}}}],["6.0.1",{"_index":2951,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2170,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["616609333832187924",{"_index":436,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["63",{"_index":2096,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["6b",{"_index":3500,"title":{},"body":{"license.html":{}}}],["6d",{"_index":3524,"title":{},"body":{"license.html":{}}}],["7",{"_index":2582,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["7.2.0",{"_index":2969,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":2914,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":2918,"title":{},"body":{"coverage.html":{}}}],["8.0.7",{"_index":2950,"title":{},"body":{"dependencies.html":{}}}],["832170662491062333",{"_index":455,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["89q12",{"_index":3903,"title":{},"body":{"properties.html":{}}}],["9.4.0",{"_index":2966,"title":{},"body":{"dependencies.html":{}}}],["900s",{"_index":1881,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["__bot_event__",{"_index":3918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__bot_event_handler__",{"_index":368,"title":{},"body":{"interfaces/BotEvent.html":{},"miscellaneous/variables.html":{}}}],["__bot_event_handler__(...args",{"_index":369,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["__rank__",{"_index":3944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_addmembertochanneloverwrite",{"_index":1436,"title":{},"body":{"injectables/GuildService.html":{}}}],["_addmembertochanneloverwrite(user_id",{"_index":1446,"title":{},"body":{"injectables/GuildService.html":{}}}],["_count",{"_index":1527,"title":{},"body":{"injectables/GuildService.html":{}}}],["_days",{"_index":2838,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_fetchguilds",{"_index":2338,"title":{},"body":{"injectables/SelfService.html":{}}}],["_fetchguilds(userid",{"_index":2342,"title":{},"body":{"injectables/SelfService.html":{}}}],["_getguildidfromselectmenu",{"_index":2053,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["_getguildidfromselectmenu(interaction",{"_index":2060,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["_getmessage",{"_index":2766,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["_getmessage(msgid",{"_index":2768,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["_hours",{"_index":2839,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_ismemberadmin",{"_index":1691,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberadmin(user_id",{"_index":1704,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismembermod",{"_index":1692,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismembermod(user_id",{"_index":1707,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberverified",{"_index":1693,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberverified(user_id",{"_index":1709,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_minutes",{"_index":2840,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_removememberfromchanneloverwrite",{"_index":1437,"title":{},"body":{"injectables/GuildService.html":{}}}],["_removememberfromchanneloverwrite(user_id",{"_index":1450,"title":{},"body":{"injectables/GuildService.html":{}}}],["aber",{"_index":954,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["abgeschickt",{"_index":832,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["ability",{"_index":3574,"title":{},"body":{"license.html":{}}}],["above",{"_index":837,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"license.html":{}}}],["absence",{"_index":3437,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":3849,"title":{},"body":{"license.html":{}}}],["acc",{"_index":1537,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[channelid",{"_index":1535,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[channelid][userid",{"_index":1536,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[date",{"_index":1548,"title":{},"body":{"injectables/GuildService.html":{}}}],["accent",{"_index":895,"title":{},"body":{"classes/DiscordUser.html":{}}}],["accentcolor",{"_index":888,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["accept",{"_index":3662,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":3661,"title":{},"body":{"license.html":{}}}],["accepted",{"_index":1300,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["access",{"_index":3207,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":3217,"title":{},"body":{"license.html":{}}}],["accesstoken",{"_index":1904,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["accompanied",{"_index":3481,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":3853,"title":{},"body":{"license.html":{}}}],["accomplish",{"_index":3220,"title":{},"body":{"license.html":{}}}],["accord",{"_index":3436,"title":{},"body":{"license.html":{}}}],["according",{"_index":3844,"title":{},"body":{"license.html":{}}}],["account",{"_index":2827,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["accumulator",{"_index":1547,"title":{},"body":{"injectables/GuildService.html":{}}}],["achieve",{"_index":3858,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":3368,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":3713,"title":{},"body":{"license.html":{}}}],["action",{"_index":249,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["actionrowbuilder",{"_index":741,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["actionrowbuilder().addcomponents",{"_index":797,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["actionrowbuilder().addcomponents(button",{"_index":771,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["actionrowbuilder().addcomponents(needhelpbutton",{"_index":964,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{}}}],["actions",{"_index":305,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["actions)[number",{"_index":2018,"title":{},"body":{"classes/LogEntry.html":{}}}],["actions})@isoptional()@isstring()@isin(actions",{"_index":291,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["activities",{"_index":3271,"title":{},"body":{"license.html":{}}}],["activity",{"_index":2565,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["actual",{"_index":3738,"title":{},"body":{"license.html":{}}}],["actually",{"_index":3547,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":3249,"title":{},"body":{"license.html":{}}}],["add",{"_index":799,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["addchanneltypes",{"_index":3083,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["added",{"_index":1311,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["addfields",{"_index":686,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/UserInfoUiCommand.html":{}}}],["additional",{"_index":3451,"title":{},"body":{"license.html":{}}}],["addmember",{"_index":1226,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["addmember(member",{"_index":1233,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["addmember(userid",{"_index":1711,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addmembers",{"_index":1694,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addmembers(guildid",{"_index":1713,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addreactions",{"_index":1019,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["address",{"_index":3795,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":3244,"title":{},"body":{"license.html":{}}}],["addrolecommand",{"_index":1,"title":{"classes/AddRoleCommand.html":{}},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["admin",{"_index":1010,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RoleResponse.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["administrator",{"_index":2210,"title":{},"body":{"classes/PingCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["adminroleid",{"_index":2400,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["adopted",{"_index":3408,"title":{},"body":{"license.html":{}}}],["adversely",{"_index":3581,"title":{},"body":{"license.html":{}}}],["advised",{"_index":3840,"title":{},"body":{"license.html":{}}}],["affects",{"_index":3582,"title":{},"body":{"license.html":{}}}],["affero",{"_index":3123,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":3693,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":3364,"title":{},"body":{"license.html":{}}}],["against",{"_index":3425,"title":{},"body":{"license.html":{}}}],["agb",{"_index":1301,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["aggregate",{"_index":3466,"title":{},"body":{"license.html":{}}}],["agpl",{"_index":3887,"title":{},"body":{"license.html":{},"properties.html":{}}}],["agree",{"_index":3776,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3826,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3724,"title":{},"body":{"license.html":{}}}],["aka",{"_index":465,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["algorithm",{"_index":1909,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["alias",{"_index":2929,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3905,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":3701,"title":{},"body":{"license.html":{}}}],["allow",{"_index":2102,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["allowed",{"_index":3143,"title":{},"body":{"license.html":{}}}],["along",{"_index":3438,"title":{},"body":{"license.html":{}}}],["already",{"_index":1115,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["alternate",{"_index":3190,"title":{},"body":{"license.html":{}}}],["alternative",{"_index":3496,"title":{},"body":{"license.html":{}}}],["always",{"_index":905,"title":{},"body":{"classes/DiscordUser.html":{}}}],["amazing",{"_index":3050,"title":{},"body":{"index.html":{}}}],["americano",{"_index":2443,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["ancillary",{"_index":3663,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":3183,"title":{},"body":{"license.html":{}}}],["anfrage",{"_index":2111,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["anliegen",{"_index":2598,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["annotation",{"_index":3928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anouncement.command",{"_index":388,"title":{},"body":{"modules/BotModule.html":{}}}],["anouncement.command.ts",{"_index":2184,"title":{},"body":{"classes/MumVoiceCommand.html":{},"coverage.html":{}}}],["anouncement.command.ts:15",{"_index":2187,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["anouncement.dto",{"_index":2190,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["anouncement.dto.ts",{"_index":2037,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"coverage.html":{}}}],["anouncement.dto.ts:15",{"_index":2040,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["anouncement.dto.ts:25",{"_index":2045,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["answer",{"_index":805,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{}}}],["answer.value",{"_index":815,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answercomponentrow",{"_index":796,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answerinput",{"_index":792,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answers",{"_index":811,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["anti",{"_index":3396,"title":{},"body":{"license.html":{}}}],["antwort",{"_index":828,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["anyone",{"_index":3449,"title":{},"body":{"license.html":{}}}],["anything",{"_index":3258,"title":{},"body":{"license.html":{}}}],["apfelkuchen",{"_index":2438,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["api",{"_index":1007,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"properties.html":{}}}],["apibearerauth",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apibody",{"_index":563,"title":{},"body":{"controllers/ChannelController.html":{}}}],["apiheader",{"_index":1842,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["apioperation",{"_index":564,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":476,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["apiproperty({type",{"_index":1078,"title":{},"body":{"classes/Guild.html":{},"classes/LogEntryDto.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["apipropertyoptional",{"_index":304,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SettingsDto.html":{}}}],["apipropertyoptional({type",{"_index":289,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/SelfDto.html":{}}}],["apiresponse",{"_index":565,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":566,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{}}}],["apitags('/channel",{"_index":580,"title":{},"body":{"controllers/ChannelController.html":{}}}],["apitags('/role",{"_index":2274,"title":{},"body":{"controllers/RoleController.html":{}}}],["apitags('auth/jwt",{"_index":1846,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["app",{"_index":1041,"title":{},"body":{"interfaces/EventToLog.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":2224,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":82,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":3262,"title":{},"body":{"license.html":{}}}],["application",{"_index":1037,"title":{},"body":{"interfaces/EventToLog.html":{},"license.html":{}}}],["application/x",{"_index":1929,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["applicationcommandtype",{"_index":2188,"title":{},"body":{"classes/MumVoiceCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["applicationcommandtype.chatinput",{"_index":2193,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["applicationcommandtype.message",{"_index":2384,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["applicationcommandtype.user",{"_index":2773,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["applications",{"_index":3022,"title":{},"body":{"index.html":{}}}],["applies",{"_index":3802,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3238,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":93,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":3281,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":3430,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":3848,"title":{},"body":{"license.html":{}}}],["apps",{"_index":2987,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appservice",{"_index":109,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archive",{"_index":3879,"title":{},"body":{"license.html":{}}}],["args",{"_index":372,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["argumentshost",{"_index":628,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["arising",{"_index":3830,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":3734,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":3747,"title":{},"body":{"license.html":{}}}],["array",{"_index":445,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["article",{"_index":3405,"title":{},"body":{"license.html":{}}}],["ask",{"_index":758,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{}}}],["assert",{"_index":3179,"title":{},"body":{"license.html":{}}}],["assets",{"_index":3682,"title":{},"body":{"license.html":{}}}],["associated",{"_index":3342,"title":{},"body":{"license.html":{}}}],["assume",{"_index":3820,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":3852,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":3630,"title":{},"body":{"license.html":{}}}],["async",{"_index":10,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["at(unixtimestamp",{"_index":1014,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["attach",{"_index":3860,"title":{},"body":{"license.html":{}}}],["attaches",{"_index":2595,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["attachment",{"_index":1362,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"injectables/GuildUserService.html":{},"miscellaneous/functions.html":{}}}],["attachment.url",{"_index":1381,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["attachments",{"_index":1725,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["attachmenttype",{"_index":2993,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attachtment",{"_index":1368,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["attempt",{"_index":3640,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":3611,"title":{},"body":{"license.html":{}}}],["auditevents",{"_index":313,"title":{},"body":{"modules/AuditLogModule.html":{},"coverage.html":{},"overview.html":{}}}],["auditlog",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"injectables/GuildService.html":{}}}],["auditlog.controller",{"_index":315,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["auditlog.events",{"_index":316,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["auditlog.service",{"_index":242,"title":{},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{}}}],["auditlog/auditlog.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["auditlogcontroller",{"_index":224,"title":{"controllers/AuditLogController.html":{}},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"coverage.html":{}}}],["auditlogfilterdto",{"_index":229,"title":{"classes/AuditLogFilterDto.html":{}},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"coverage.html":{}}}],["auditlogmodule",{"_index":136,"title":{"modules/AuditLogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/ModerationModule.html":{},"modules.html":{},"overview.html":{}}}],["auditlogservice",{"_index":241,"title":{"injectables/AuditLogService.html":{}},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"coverage.html":{},"overview.html":{}}}],["auf",{"_index":958,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["aus",{"_index":2158,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["auth",{"_index":1824,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.controller",{"_index":1871,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.controller.ts",{"_index":1823,"title":{},"body":{"controllers/JwtAuthController.html":{},"coverage.html":{}}}],["auth.controller.ts:35",{"_index":1835,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.controller.ts:40",{"_index":1829,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.guard",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":1856,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["auth.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.module.ts",{"_index":1866,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.service",{"_index":1839,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{}}}],["auth.service.ts",{"_index":1882,"title":{},"body":{"injectables/JwtAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:12",{"_index":1888,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:21",{"_index":1892,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:45",{"_index":1894,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:57",{"_index":1896,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:66",{"_index":1890,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.strategy",{"_index":1867,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.strategy.ts",{"_index":1948,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:17",{"_index":1954,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:7",{"_index":1952,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth/jwt/guards/jwt",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"controllers/GuildSettingsController.html":{},"controllers/SelfController.html":{}}}],["auth/jwt/jwt",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":1858,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{}}}],["authguard('jwt",{"_index":1857,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{}}}],["author",{"_index":3056,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["authorization",{"_index":1943,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["authorization_code",{"_index":1923,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["authorized",{"_index":3602,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":3708,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":3751,"title":{},"body":{"license.html":{}}}],["authors",{"_index":3619,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":1848,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auto",{"_index":1087,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["autodeletechannel",{"_index":1090,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["autodeletechannel.channelid",{"_index":1156,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["autodeletechannels",{"_index":1110,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{}}}],["automatic",{"_index":3672,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":3355,"title":{},"body":{"license.html":{}}}],["available",{"_index":3193,"title":{},"body":{"license.html":{}}}],["avatar",{"_index":898,"title":{},"body":{"classes/DiscordUser.html":{}}}],["avatarurl",{"_index":870,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/Guild.html":{},"controllers/GuildUserController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["average",{"_index":1454,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperchannellastmonth",{"_index":1438,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperchannellastmonth(guildid",{"_index":1452,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperdaylastmonth",{"_index":1439,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperdaylastmonth(guildid",{"_index":1480,"title":{},"body":{"injectables/GuildService.html":{}}}],["avg(subquery.messagecount",{"_index":1464,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecount",{"_index":1465,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecounts",{"_index":1538,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecounts[channelid",{"_index":1544,"title":{},"body":{"injectables/GuildService.html":{}}}],["avoid",{"_index":2762,"title":{},"body":{"controllers/UserController.html":{}}}],["await",{"_index":62,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":3155,"title":{},"body":{"license.html":{}}}],["axios",{"_index":1577,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":1898,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["b",{"_index":3320,"title":{},"body":{"license.html":{}}}],["b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/.test",{"_index":2836,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/g",{"_index":2842,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["backers",{"_index":3051,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":1836,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["badrequestexception('no",{"_index":1853,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["ban",{"_index":2017,"title":{},"body":{"classes/LogEntry.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["banned",{"_index":2679,"title":{},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["banner",{"_index":900,"title":{},"body":{"classes/DiscordUser.html":{}}}],["bannerurl",{"_index":889,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["banuser",{"_index":2689,"title":{},"body":{"controllers/UserController.html":{}}}],["banuser(guildid",{"_index":2694,"title":{},"body":{"controllers/UserController.html":{}}}],["base64",{"_index":986,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["base64resolvable",{"_index":983,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["based",{"_index":578,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{},"license.html":{}}}],["baseguildtextchannel",{"_index":1499,"title":{},"body":{"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["baseguildtextchannel).permissionoverwrites.delete",{"_index":2584,"title":{},"body":{"injectables/TasksService.html":{}}}],["baseinteraction",{"_index":2654,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["basic",{"_index":3357,"title":{},"body":{"license.html":{}}}],["bearbeiten",{"_index":788,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["bearer",{"_index":1944,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["become",{"_index":3192,"title":{},"body":{"license.html":{}}}],["becomes",{"_index":3211,"title":{},"body":{"license.html":{}}}],["before",{"_index":502,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"injectables/GuildMemberEvents.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["behalf",{"_index":3382,"title":{},"body":{"license.html":{}}}],["bei",{"_index":2629,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["being",{"_index":1521,"title":{},"body":{"injectables/GuildService.html":{},"license.html":{}}}],["bekommen",{"_index":963,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["believe",{"_index":3743,"title":{},"body":{"license.html":{}}}],["belongs",{"_index":1008,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["below",{"_index":1000,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["benefit",{"_index":3186,"title":{},"body":{"license.html":{}}}],["benötigt",{"_index":3002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["besprechen",{"_index":2601,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["best",{"_index":3857,"title":{},"body":{"license.html":{}}}],["beta1",{"_index":2960,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":3881,"title":{},"body":{"license.html":{}}}],["between",{"_index":3351,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":3468,"title":{},"body":{"license.html":{}}}],["bienenstich",{"_index":2439,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["bin",{"_index":945,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["binarytotextencoding",{"_index":2075,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["bis",{"_index":2626,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["bit",{"_index":1346,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["body",{"_index":560,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"license.html":{}}}],["boolean",{"_index":450,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bot",{"_index":827,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildService.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/initGuildCommand.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["bot/bot.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["bot_event_handler_name",{"_index":1060,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bot_event_key",{"_index":1059,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["botevent",{"_index":364,"title":{"interfaces/BotEvent.html":{}},"body":{"interfaces/BotEvent.html":{},"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["boteventdecorator",{"_index":1046,"title":{},"body":{"classes/Explorer.html":{}}}],["boteventdecorator(provider",{"_index":1052,"title":{},"body":{"classes/Explorer.html":{}}}],["both",{"_index":2833,"title":{},"body":{"classes/UserTimeOutDto.html":{},"license.html":{}}}],["botmodule",{"_index":104,"title":{"modules/BotModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BotModule.html":{},"modules.html":{},"overview.html":{}}}],["bots",{"_index":2345,"title":{},"body":{"injectables/SelfService.html":{}}}],["break",{"_index":2507,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{}}}],["browse",{"_index":3891,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3889,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":3000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["building",{"_index":3018,"title":{},"body":{"index.html":{}}}],["business",{"_index":3755,"title":{},"body":{"license.html":{}}}],["button",{"_index":764,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"miscellaneous/functions.html":{}}}],["buttonbuilder",{"_index":742,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{}}}],["buttoninteraction",{"_index":727,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["buttonstyle",{"_index":743,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["bzw",{"_index":682,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["c",{"_index":3130,"title":{},"body":{"license.html":{}}}],["cake",{"_index":2481,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["cakes",{"_index":2432,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["call",{"_index":1937,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["callback",{"_index":2984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["called",{"_index":2985,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["canactivate",{"_index":857,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["canactivate(context",{"_index":861,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["cappuccino",{"_index":2444,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["cardinal",{"_index":1218,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["carry",{"_index":3443,"title":{},"body":{"license.html":{}}}],["case",{"_index":2493,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["cases",{"_index":3210,"title":{},"body":{"license.html":{}}}],["catch",{"_index":76,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"injectables/DmMessageHandler.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["catch(channelnottextbasedexception",{"_index":637,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["catch(exception",{"_index":639,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["catch(exceptionlist",{"_index":702,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["catch(guilddoesnotexistexception",{"_index":1219,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["catch(senddirectmessagetouserexception",{"_index":2374,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["catch(wrongargsexception",{"_index":706,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["catcherror",{"_index":1901,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["catcherror((error",{"_index":1934,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["category",{"_index":497,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SpecialCommand.html":{},"classes/UserToUser.html":{}}}],["categorychannel",{"_index":484,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["categorychannel'])@isoptional()@apiproperty({type",{"_index":1182,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["categorychannelresolvable",{"_index":483,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["categoryid",{"_index":2085,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["categoryid.replace('modrequest",{"_index":2114,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["cause",{"_index":3472,"title":{},"body":{"license.html":{}}}],["caution",{"_index":2755,"title":{},"body":{"controllers/UserController.html":{}}}],["caution'})@apiresponse({status",{"_index":2710,"title":{},"body":{"controllers/UserController.html":{}}}],["cease",{"_index":3644,"title":{},"body":{"license.html":{}}}],["certain",{"_index":3599,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":3654,"title":{},"body":{"license.html":{}}}],["change",{"_index":491,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"license.html":{}}}],["changed",{"_index":2398,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event",{"_index":1627,"title":{},"body":{"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{}}}],["changed.event.ts",{"_index":2389,"title":{},"body":{"classes/SettingsChanged.html":{},"coverage.html":{}}}],["changed.event.ts:20",{"_index":2394,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:6",{"_index":2392,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:7",{"_index":2393,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:8",{"_index":2391,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changing",{"_index":3142,"title":{},"body":{"license.html":{}}}],["channel",{"_index":414,"title":{"classes/Channel.html":{}},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildRestrictedChannelController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["channel'})@apibody({schema",{"_index":539,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.channelid",{"_index":1114,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildService.html":{}}}],["channel.clean",{"_index":618,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.clone",{"_index":1171,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.controller",{"_index":1140,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildRestrictedChannelModule.html":{}}}],["channel.controller.ts",{"_index":1089,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildRestrictedChannelController.html":{},"coverage.html":{}}}],["channel.controller.ts:24",{"_index":1098,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.controller.ts:34",{"_index":1096,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.controller.ts:54",{"_index":1100,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.delete",{"_index":1172,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.edit",{"_index":604,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.edit(channeldata",{"_index":596,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.guard",{"_index":1261,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["channel.guard.ts",{"_index":2901,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["channel.id",{"_index":2109,"title":{},"body":{"injectables/ModRequestFlow.html":{},"controllers/UserController.html":{}}}],["channel.istextbased",{"_index":2790,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["channel.messages.fetch(msgid",{"_index":2791,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["channel.module",{"_index":1407,"title":{},"body":{"modules/GuildModule.html":{}}}],["channel.module.ts",{"_index":1139,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildRestrictedChannelModule.html":{}}}],["channel.parentid",{"_index":1388,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["channel.permissionoverwrites.delete(ticket.userid",{"_index":2143,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["channel.requiredpoints",{"_index":1434,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.send",{"_index":1323,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{}}}],["channel.send(usermention(interaction.user.id",{"_index":2119,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["channel.service",{"_index":391,"title":{},"body":{"modules/BotModule.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{}}}],["channel.service.ts",{"_index":1144,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"coverage.html":{}}}],["channel.service.ts:10",{"_index":1147,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:14",{"_index":1426,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:17",{"_index":1150,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:22",{"_index":1152,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:40",{"_index":1148,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:44",{"_index":1424,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:52",{"_index":1429,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:8",{"_index":1422,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.setparent('1014456370860404756",{"_index":2144,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["channel.slowmode.${duration",{"_index":601,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.type",{"_index":609,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["channel/channel.controller",{"_index":2181,"title":{},"body":{"modules/ModerationModule.html":{}}}],["channel/dto/auto",{"_index":1118,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"coverage.html":{}}}],["channel/guild",{"_index":390,"title":{},"body":{"modules/BotModule.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["channel_created",{"_index":2011,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channel_deleted",{"_index":2012,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channel_id",{"_index":1447,"title":{},"body":{"injectables/GuildService.html":{}}}],["channel_updated",{"_index":2013,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channelcleaned",{"_index":499,"title":{"classes/ChannelCleaned.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["channelcleaned(guildid",{"_index":619,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelcontroller",{"_index":528,"title":{"controllers/ChannelController.html":{}},"body":{"controllers/ChannelController.html":{},"modules/ModerationModule.html":{},"coverage.html":{}}}],["channeldata",{"_index":542,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelid",{"_index":503,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/RestrictedChannelDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["channelidguard",{"_index":2902,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["channelidguardmixin",{"_index":3920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["channelname",{"_index":626,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["channelnottextbasedexception",{"_index":575,"title":{"classes/ChannelNotTextBasedException.html":{}},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["channelnottextbasedexception(channel.name",{"_index":617,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelnottextbasedexceptionfilter",{"_index":638,"title":{"classes/ChannelNotTextBasedExceptionFilter.html":{}},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["channelrows",{"_index":3113,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channels",{"_index":555,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/TasksService.html":{}}}],["channels.dto",{"_index":1105,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["channels.dto.ts",{"_index":1119,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["channels.dto.ts:10",{"_index":1122,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["channels.dto.ts:12",{"_index":2248,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["channels.dto.ts:16",{"_index":1129,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["channels.dto.ts:17",{"_index":2249,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["channels.fetch('1195024829544411168",{"_index":818,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["channels.fetch(ticket.ticketid",{"_index":2581,"title":{},"body":{"injectables/TasksService.html":{}}}],["channels.fetch(ticketid",{"_index":2142,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["channels.foreach((channel",{"_index":1550,"title":{},"body":{"injectables/GuildService.html":{}}}],["channelselectmenubuilder",{"_index":3074,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channelselectmenuinteraction",{"_index":3071,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channeltype",{"_index":482,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.guildannouncement",{"_index":493,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["channeltype.guildtext",{"_index":492,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.privatethread",{"_index":611,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.publicthread",{"_index":610,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["characterized",{"_index":3571,"title":{},"body":{"license.html":{}}}],["charge",{"_index":3167,"title":{},"body":{"license.html":{}}}],["check",{"_index":1327,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["checkactiveusers",{"_index":2523,"title":{},"body":{"injectables/TasksService.html":{}}}],["checked",{"_index":2542,"title":{},"body":{"injectables/TasksService.html":{}}}],["checkifpersonwasverifiedbefore",{"_index":1227,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["checkifpersonwasverifiedbefore(reaction",{"_index":1237,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["checklimits(message",{"_index":1393,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["checkproviders",{"_index":1048,"title":{},"body":{"classes/Explorer.html":{}}}],["checkproviders(providers",{"_index":1055,"title":{},"body":{"classes/Explorer.html":{}}}],["checks",{"_index":2350,"title":{},"body":{"injectables/SelfService.html":{},"injectables/TasksService.html":{}}}],["checktimeouts",{"_index":2524,"title":{},"body":{"injectables/TasksService.html":{}}}],["children",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["choice",{"_index":2875,"title":{},"body":{"classes/UserToUser.html":{}}}],["choice(commandtoexecute",{"_index":2883,"title":{},"body":{"classes/UserToUser.html":{}}}],["choice(commandtoexecute)@param({description",{"_index":2869,"title":{},"body":{"classes/UserToUser.html":{}}}],["choiceoptions",{"_index":2876,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["choose",{"_index":3003,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["chooserandomcoffee",{"_index":2435,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["chooserandomcoffee(interaction",{"_index":2466,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["choosing",{"_index":3808,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":3388,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":3397,"title":{},"body":{"license.html":{}}}],["civil",{"_index":3851,"title":{},"body":{"license.html":{}}}],["claim",{"_index":3698,"title":{},"body":{"license.html":{}}}],["claims",{"_index":3710,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddRoleCommand.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["classdecorator",{"_index":2989,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"overview.html":{}}}],["clean",{"_index":538,"title":{},"body":{"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"miscellaneous/functions.html":{}}}],["cleanchannel",{"_index":531,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleanchannel(guildid",{"_index":536,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleaning",{"_index":608,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleantextchannel",{"_index":571,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["cleantextchannel(channel",{"_index":2979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cleanwfpmember",{"_index":405,"title":{"classes/CleanWfpMember.html":{}},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["cleanwfpmembers",{"_index":1440,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["cleanwfpmembers(guildid",{"_index":1482,"title":{},"body":{"injectables/GuildService.html":{}}}],["clear",{"_index":3510,"title":{},"body":{"license.html":{}}}],["click",{"_index":2784,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["client",{"_index":14,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["client.setmaxlisteners(30",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["client_id",{"_index":1918,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["client_secret",{"_index":1920,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["clientevents",{"_index":370,"title":{},"body":{"interfaces/BotEvent.html":{},"classes/CommunityQuestionCommand.html":{}}}],["clientevents['interactioncreate",{"_index":806,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["clientevents[keyof",{"_index":373,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["closed",{"_index":2140,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["closely",{"_index":3847,"title":{},"body":{"license.html":{}}}],["closestaletickets",{"_index":2525,"title":{},"body":{"injectables/TasksService.html":{}}}],["cls",{"_index":3010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule",{"_index":310,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule_exports",{"_index":311,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule_providers",{"_index":312,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_botmodule",{"_index":374,"title":{},"body":{"modules/BotModule.html":{},"overview.html":{}}}],["cluster_botmodule_providers",{"_index":375,"title":{},"body":{"modules/BotModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule",{"_index":1134,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule_exports",{"_index":1135,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule_providers",{"_index":1136,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildmodule",{"_index":1398,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_exports",{"_index":1400,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_imports",{"_index":1401,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_providers",{"_index":1399,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule",{"_index":1416,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule_exports",{"_index":1417,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule_providers",{"_index":1418,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{}}}],["cluster_guildsettingsmodule",{"_index":1584,"title":{},"body":{"modules/GuildSettingsModule.html":{},"overview.html":{}}}],["cluster_guildsettingsmodule_exports",{"_index":1586,"title":{},"body":{"modules/GuildSettingsModule.html":{},"overview.html":{}}}],["cluster_guildsettingsmodule_providers",{"_index":1585,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["cluster_guildusermodule",{"_index":1685,"title":{},"body":{"modules/GuildUserModule.html":{},"overview.html":{}}}],["cluster_guildusermodule_exports",{"_index":1687,"title":{},"body":{"modules/GuildUserModule.html":{},"overview.html":{}}}],["cluster_guildusermodule_providers",{"_index":1686,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["cluster_jwtauthmodule",{"_index":1860,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_jwtauthmodule_exports",{"_index":1861,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_jwtauthmodule_providers",{"_index":1862,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_moderationmodule",{"_index":2173,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_moderationmodule_imports",{"_index":2175,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_moderationmodule_providers",{"_index":2174,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_tasksmodule",{"_index":2508,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":2509,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_usermodule",{"_index":2796,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2798,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2797,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":1830,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"license.html":{}}}],["coffee",{"_index":2480,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["coffees",{"_index":2433,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["collect",{"_index":3778,"title":{},"body":{"license.html":{}}}],["color",{"_index":896,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["colorresolvable",{"_index":975,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["colors",{"_index":655,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{}}}],["combine",{"_index":3789,"title":{},"body":{"license.html":{}}}],["combined",{"_index":3462,"title":{},"body":{"license.html":{}}}],["come",{"_index":3202,"title":{},"body":{"license.html":{}}}],["comes",{"_index":2314,"title":{},"body":{"controllers/SelfController.html":{},"license.html":{}}}],["command",{"_index":32,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["commandinteraction",{"_index":25,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{}}}],["commands",{"_index":1776,"title":{},"body":{"guards/HasRequiredRank.html":{},"license.html":{}}}],["commands/clean",{"_index":406,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/community",{"_index":393,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/init",{"_index":396,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/mod",{"_index":387,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/ping.command",{"_index":381,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/special.command",{"_index":410,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/ticket",{"_index":412,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/timeout.command",{"_index":385,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/user",{"_index":399,"title":{},"body":{"modules/BotModule.html":{}}}],["commandtoexecute",{"_index":2878,"title":{},"body":{"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commandvalidationfilter",{"_index":699,"title":{"classes/CommandValidationFilter.html":{}},"body":{"classes/CommandValidationFilter.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["commercial",{"_index":3552,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":3725,"title":{},"body":{"license.html":{}}}],["common",{"_index":3546,"title":{},"body":{"license.html":{}}}],["communication",{"_index":3349,"title":{},"body":{"license.html":{}}}],["communicationdisableduntil",{"_index":871,"title":{},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{}}}],["community",{"_index":759,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"license.html":{},"properties.html":{}}}],["communityquestioncommand",{"_index":392,"title":{"classes/CommunityQuestionCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["communityquestiondto",{"_index":732,"title":{"classes/CommunityQuestionDto.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["communityquestionformdto",{"_index":735,"title":{"classes/CommunityQuestionFormDto.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["compilation",{"_index":3457,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":3467,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":3760,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":3328,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":3677,"title":{},"body":{"license.html":{}}}],["comply",{"_index":3379,"title":{},"body":{"license.html":{}}}],["component",{"_index":3319,"title":{},"body":{"license.html":{}}}],["components",{"_index":772,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["componenttype",{"_index":2079,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["componenttype.stringselect",{"_index":2166,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["computer",{"_index":3266,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":3797,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":3754,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":3229,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["configservice.get('jwt_access_secret",{"_index":1963,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('jwt_issuer",{"_index":1964,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":2244,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["configservice.get('token",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":3114,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["conflictexception",{"_index":1101,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["confused",{"_index":2800,"title":{},"body":{"modules/UserModule.html":{}}}],["connection",{"_index":3745,"title":{},"body":{"license.html":{}}}],["consequence",{"_index":3665,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":3829,"title":{},"body":{"license.html":{}}}],["considered",{"_index":3632,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3717,"title":{},"body":{"license.html":{}}}],["console.log(category",{"_index":2489,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["console.log(e",{"_index":2586,"title":{},"body":{"injectables/TasksService.html":{}}}],["console.log(fromuserid",{"_index":2490,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["console.log(outcome",{"_index":673,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["console.log(touserid",{"_index":2491,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["conspicuously",{"_index":3429,"title":{},"body":{"license.html":{}}}],["const",{"_index":60,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":3945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constitutes",{"_index":3367,"title":{},"body":{"license.html":{}}}],["constructchanneldeletejobs",{"_index":1145,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["constructed",{"_index":3009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["constructor(@inject(guildservice",{"_index":666,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["constructor(@inject(prismaservice",{"_index":332,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["constructor(@inject(selfservice",{"_index":2321,"title":{},"body":{"controllers/SelfController.html":{}}}],["constructor(channelname",{"_index":624,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["constructor(client",{"_index":13,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["constructor(configservice",{"_index":1951,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["constructor(database",{"_index":1443,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{}}}],["constructor(discord",{"_index":2340,"title":{},"body":{"injectables/SelfService.html":{}}}],["constructor(eventemitter",{"_index":205,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(guildid",{"_index":506,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["constructor(guildservice",{"_index":651,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["constructor(guilduserservice",{"_index":1355,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["constructor(jwtservice",{"_index":1885,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["constructor(prismaserver",{"_index":3065,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["constructor(prismaservice",{"_index":321,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["constructor(private",{"_index":1578,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["constructor(reflector",{"_index":1779,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["constructor(settingsservice",{"_index":1818,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["constructor(userid",{"_index":2672,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["construed",{"_index":3765,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":3530,"title":{},"body":{"license.html":{}}}],["contact",{"_index":781,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"license.html":{}}}],["contain",{"_index":3761,"title":{},"body":{"license.html":{}}}],["containing",{"_index":3612,"title":{},"body":{"license.html":{}}}],["contains",{"_index":1478,"title":{},"body":{"injectables/GuildService.html":{},"classes/LogEntry.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["content",{"_index":773,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildSettingsService.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["contents",{"_index":3721,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":2991,"title":{},"body":{"miscellaneous/functions.html":{}}}],["context",{"_index":636,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"license.html":{}}}],["context.getargbyindex(0",{"_index":862,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getargbyindex(1",{"_index":2228,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["context.getclass",{"_index":1795,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["context.gethandler",{"_index":1794,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["contextmenucommandinteraction",{"_index":2382,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["continue",{"_index":3577,"title":{},"body":{"license.html":{}}}],["continued",{"_index":3561,"title":{},"body":{"license.html":{}}}],["contractual",{"_index":3629,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":3772,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":3158,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3707,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":3709,"title":{},"body":{"license.html":{}}}],["control",{"_index":3334,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3712,"title":{},"body":{"license.html":{}}}],["controller",{"_index":81,"title":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('/channel",{"_index":581,"title":{},"body":{"controllers/ChannelController.html":{}}}],["controller('/role",{"_index":2275,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller('/user",{"_index":2718,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('/user/self",{"_index":2320,"title":{},"body":{"controllers/SelfController.html":{}}}],["controller('auth",{"_index":1845,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["controller('autodeletechannel",{"_index":1107,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["controller('guild",{"_index":1415,"title":{},"body":{"controllers/GuildRestrictedChannelController.html":{}}}],["controllers",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convenient",{"_index":3284,"title":{},"body":{"license.html":{}}}],["convert",{"_index":3008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["convey",{"_index":3272,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":3749,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":3572,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":3278,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":3628,"title":{},"body":{"license.html":{}}}],["cooperation",{"_index":3151,"title":{},"body":{"license.html":{}}}],["copies",{"_index":3140,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3137,"title":{},"body":{"license.html":{}}}],["copying",{"_index":3230,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":3145,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3129,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":3241,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":3385,"title":{},"body":{"license.html":{}}}],["correction",{"_index":3824,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":3330,"title":{},"body":{"license.html":{}}}],["cost",{"_index":3494,"title":{},"body":{"license.html":{}}}],["couldn't",{"_index":694,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["count",{"_index":687,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["count(m.messageid",{"_index":1462,"title":{},"body":{"injectables/GuildService.html":{}}}],["count(messageid",{"_index":1468,"title":{},"body":{"injectables/GuildService.html":{}}}],["counterclaim",{"_index":3699,"title":{},"body":{"license.html":{}}}],["countries",{"_index":3270,"title":{},"body":{"license.html":{}}}],["country",{"_index":3740,"title":{},"body":{"license.html":{}}}],["court",{"_index":3771,"title":{},"body":{"license.html":{}}}],["courts",{"_index":3846,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":3729,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":2884,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["covered",{"_index":3255,"title":{},"body":{"license.html":{}}}],["craft",{"_index":2372,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["create",{"_index":319,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["create(entry",{"_index":323,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["create/dm",{"_index":926,"title":{},"body":{"injectables/DmMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["create/guild",{"_index":1352,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["create/mod",{"_index":1410,"title":{},"body":{"modules/GuildModule.html":{},"injectables/ModRequestFlow.html":{},"coverage.html":{}}}],["createautodeletechannel",{"_index":1091,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["createautodeletechannel(guildid",{"_index":1094,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["created",{"_index":429,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{}}}],["created'})@apiresponse({status",{"_index":2258,"title":{},"body":{"controllers/RoleController.html":{}}}],["createdat",{"_index":276,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{}}}],["createdfrom",{"_index":287,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["createdtill",{"_index":288,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["createdtimestamp",{"_index":416,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["createdynamicscheduledjob",{"_index":2526,"title":{},"body":{"injectables/TasksService.html":{}}}],["createdynamicscheduledjob(joboptions",{"_index":2544,"title":{},"body":{"injectables/TasksService.html":{}}}],["createhash",{"_index":2076,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["createhash('sha256",{"_index":2089,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["createparamdecorator",{"_index":3924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrole",{"_index":2251,"title":{},"body":{"controllers/RoleController.html":{}}}],["createrole(guildid",{"_index":2255,"title":{},"body":{"controllers/RoleController.html":{}}}],["createticket",{"_index":3938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creation/execution",{"_index":2513,"title":{},"body":{"modules/TasksModule.html":{}}}],["criterion",{"_index":3297,"title":{},"body":{"license.html":{}}}],["cron",{"_index":1127,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"injectables/TasksService.html":{}}}],["cron('*/5",{"_index":2531,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron('0",{"_index":2528,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjob",{"_index":2550,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjobparams",{"_index":2545,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjobs",{"_index":2548,"title":{},"body":{"injectables/TasksService.html":{}}}],["crontime",{"_index":1163,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["cross",{"_index":3697,"title":{},"body":{"license.html":{}}}],["crypto",{"_index":2077,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["ctx",{"_index":641,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getresponse",{"_index":643,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cure",{"_index":3657,"title":{},"body":{"license.html":{}}}],["curr",{"_index":1531,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr._count?.messageid",{"_index":1534,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.channelid.tostring",{"_index":1532,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.createdat.toisostring().split('t')[0",{"_index":1546,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.userid.tostring",{"_index":1533,"title":{},"body":{"injectables/GuildService.html":{}}}],["current",{"_index":1783,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/SelfController.html":{}}}],["customarily",{"_index":3484,"title":{},"body":{"license.html":{}}}],["customary",{"_index":3786,"title":{},"body":{"license.html":{}}}],["customer",{"_index":3490,"title":{},"body":{"license.html":{}}}],["d",{"_index":2835,"title":{},"body":{"classes/UserTimeOutDto.html":{},"license.html":{}}}],["d+)|\\d",{"_index":1124,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["damages",{"_index":3827,"title":{},"body":{"license.html":{}}}],["dann",{"_index":2603,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["data",{"_index":272,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"classes/EditRoleData.html":{},"controllers/GuildController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["data.roles",{"_index":2665,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["database",{"_index":15,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/SelfService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["date",{"_index":294,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["date().getdate",{"_index":1506,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["date().gettime",{"_index":2750,"title":{},"body":{"controllers/UserController.html":{}}}],["date().getutcdate",{"_index":2092,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["date().setdate(new",{"_index":1505,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["date(channel.lastmessage.createdtimestamp",{"_index":2583,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(dto.duration).gettime",{"_index":2616,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["date(filter.createdfrom).toisostring",{"_index":347,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["date(filter.createdtill).toisostring",{"_index":350,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["date(member.joinedtimestamp",{"_index":1511,"title":{},"body":{"injectables/GuildService.html":{}}}],["date(message.createdtimestamp",{"_index":1376,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["date(new",{"_index":1504,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["date.now",{"_index":2571,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["date_sub(now",{"_index":1469,"title":{},"body":{"injectables/GuildService.html":{}}}],["dauer",{"_index":2855,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["day",{"_index":1198,"title":{},"body":{"controllers/GuildController.html":{},"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["days",{"_index":1457,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["dbuser",{"_index":1337,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["dbuser.guildid",{"_index":1344,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["dbuser.userid",{"_index":2572,"title":{},"body":{"injectables/TasksService.html":{}}}],["de",{"_index":2047,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["dearv8protectmefromparameterswithnonevalue",{"_index":2922,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dearv8protectmefromparameterswithnonevalue(target",{"_index":2988,"title":{},"body":{"miscellaneous/functions.html":{}}}],["december",{"_index":3410,"title":{},"body":{"license.html":{}}}],["decide",{"_index":3805,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declining",{"_index":3620,"title":{},"body":{"license.html":{}}}],["decorator",{"_index":3934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":26,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsDto.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["decorators/bot",{"_index":1061,"title":{},"body":{"classes/Explorer.html":{}}}],["decorators/requires",{"_index":1790,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["deemed",{"_index":3399,"title":{},"body":{"license.html":{}}}],["default",{"_index":214,"title":{},"body":{"injectables/AppService.html":{},"interfaces/BotEvent.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/RoleResponse.html":{},"classes/SpecialCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["defaultmemberpermissions",{"_index":45,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["defective",{"_index":3819,"title":{},"body":{"license.html":{}}}],["defending",{"_index":3187,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":3768,"title":{},"body":{"license.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["definition",{"_index":3340,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3234,"title":{},"body":{"license.html":{}}}],["deine",{"_index":2121,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["delete",{"_index":1088,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["delete(':roleid",{"_index":2288,"title":{},"body":{"controllers/RoleController.html":{}}}],["delete(':roleid')@apioperation({summary",{"_index":2262,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleteatcron",{"_index":1121,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["deletechannel.channelid",{"_index":1166,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deletechannel.deleteatcron",{"_index":1164,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deletechannel.guildid",{"_index":1167,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deleted",{"_index":527,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/RoleController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["deleted'})@apiresponse({status",{"_index":2263,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleteone",{"_index":1695,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["deleteone(userid",{"_index":1715,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["deleterole",{"_index":2252,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleterole(guildid",{"_index":2260,"title":{},"body":{"controllers/RoleController.html":{}}}],["deletes",{"_index":2982,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deleting",{"_index":1168,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["den",{"_index":959,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["denied",{"_index":3578,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":3726,"title":{},"body":{"license.html":{}}}],["deny",{"_index":2099,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["dependencies",{"_index":95,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":907,"title":{},"body":{"classes/DiscordUser.html":{}}}],["deprive",{"_index":3735,"title":{},"body":{"license.html":{}}}],["der",{"_index":2828,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["des",{"_index":2856,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["desc",{"_index":357,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{}}}],["describe",{"_index":1990,"title":{},"body":{"classes/LogEntry.html":{}}}],["description",{"_index":485,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"properties.html":{}}}],["descriptionlocalizations",{"_index":2039,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["designated",{"_index":3502,"title":{},"body":{"license.html":{}}}],["designed",{"_index":3149,"title":{},"body":{"license.html":{}}}],["detail",{"_index":3794,"title":{},"body":{"license.html":{}}}],["details",{"_index":3871,"title":{},"body":{"license.html":{}}}],["determined",{"_index":2983,"title":{},"body":{"miscellaneous/functions.html":{}}}],["determining",{"_index":3541,"title":{},"body":{"license.html":{}}}],["develop",{"_index":3855,"title":{},"body":{"license.html":{}}}],["developers",{"_index":3174,"title":{},"body":{"license.html":{}}}],["development",{"_index":3030,"title":{},"body":{"index.html":{}}}],["dich",{"_index":2632,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["die",{"_index":679,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["differ",{"_index":3793,"title":{},"body":{"license.html":{}}}],["different",{"_index":1982,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["differently",{"_index":3607,"title":{},"body":{"license.html":{}}}],["digest('hex",{"_index":2094,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["diplomatenkaffee",{"_index":2445,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["dir",{"_index":955,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["direct",{"_index":2368,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["direction",{"_index":3383,"title":{},"body":{"license.html":{}}}],["directions",{"_index":3511,"title":{},"body":{"license.html":{}}}],["directly",{"_index":2999,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["disabled",{"_index":523,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["disclaim",{"_index":3421,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":3809,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":3604,"title":{},"body":{"license.html":{}}}],["discord",{"_index":35,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"injectables/DmMessageHandler.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{},"properties.html":{}}}],["discord.js",{"_index":39,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["discordapierror",{"_index":934,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["discordapierror).message",{"_index":967,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["discordclientoptions",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["discordexecutioncontext",{"_index":851,"title":{"interfaces/DiscordExecutionContext.html":{}},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["discordguildmember",{"_index":867,"title":{"classes/DiscordGuildMember.html":{}},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["discordjs",{"_index":1269,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"properties.html":{}}}],["discordmodule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["discordmodule.forfeature",{"_index":317,"title":{},"body":{"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["discordmodule.forrootasync",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["discorduser",{"_index":886,"title":{"classes/DiscordUser.html":{}},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["discorduser.avatarurl",{"_index":2356,"title":{},"body":{"injectables/SelfService.html":{}}}],["discorduser.fetch",{"_index":2230,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["discorduser.globalname",{"_index":2357,"title":{},"body":{"injectables/SelfService.html":{}}}],["discorduser.id",{"_index":2235,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/SelfService.html":{}}}],["discorduser.partial",{"_index":2229,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["discorduser.roles.add(role.id",{"_index":1349,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser.roles.cache.has('1121823930085285938",{"_index":1343,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser.roles.remove('1121823930085285938",{"_index":1350,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser['id",{"_index":882,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["discriminator",{"_index":890,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["discriminatory",{"_index":3752,"title":{},"body":{"license.html":{}}}],["display",{"_index":909,"title":{},"body":{"classes/DiscordUser.html":{},"license.html":{}}}],["displayavatarurl",{"_index":891,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["displayed",{"_index":836,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"license.html":{}}}],["displayname",{"_index":872,"title":{},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{}}}],["displays",{"_index":3280,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":3798,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":3138,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3868,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":3756,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3231,"title":{},"body":{"license.html":{}}}],["dm",{"_index":2370,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["dm.guard",{"_index":937,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dm.guard.ts",{"_index":2033,"title":{},"body":{"guards/MessageIsDmGuard.html":{},"coverage.html":{}}}],["dm.guard.ts:7",{"_index":2034,"title":{},"body":{"guards/MessageIsDmGuard.html":{}}}],["dmmessagehandler",{"_index":924,"title":{"injectables/DmMessageHandler.html":{}},"body":{"injectables/DmMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["dmmessagetomodteam",{"_index":928,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dmmessagetomodteam(message",{"_index":929,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dmpermission",{"_index":47,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{}}}],["docs",{"_index":1020,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["document",{"_index":3141,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":1786,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{}}}],["documented",{"_index":3586,"title":{},"body":{"license.html":{}}}],["doe",{"_index":919,"title":{},"body":{"classes/DiscordUser.html":{}}}],["done",{"_index":2200,"title":{},"body":{"classes/MumVoiceCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/initGuildCommand.html":{}}}],["dont",{"_index":1492,"title":{},"body":{"injectables/GuildService.html":{}}}],["doubtful",{"_index":3542,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":3674,"title":{},"body":{"license.html":{}}}],["dry",{"_index":1516,"title":{},"body":{"injectables/GuildService.html":{}}}],["dryrun",{"_index":1483,"title":{},"body":{"injectables/GuildService.html":{}}}],["dto",{"_index":2186,"title":{},"body":{"classes/MumVoiceCommand.html":{},"injectables/SelfService.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["dto.duration",{"_index":2627,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["dto.message",{"_index":2196,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["dto.reason",{"_index":2618,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["dto.replytomessage",{"_index":2194,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["dto/audit",{"_index":239,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["dto/auto",{"_index":1104,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["dto/channel",{"_index":570,"title":{},"body":{"controllers/ChannelController.html":{}}}],["dto/commmunity",{"_index":748,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["dto/community",{"_index":756,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["dto/guild",{"_index":2717,"title":{},"body":{"controllers/UserController.html":{}}}],["dto/log",{"_index":244,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["dto/mod",{"_index":2189,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["dto/role",{"_index":2272,"title":{},"body":{"controllers/RoleController.html":{}}}],["dto/settings.dto",{"_index":1575,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["dto/user",{"_index":2473,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["du",{"_index":2596,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserToUser.html":{}}}],["durable",{"_index":3483,"title":{},"body":{"license.html":{}}}],["duration",{"_index":599,"title":{},"body":{"controllers/ChannelController.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["duration).getmilliseconds",{"_index":2753,"title":{},"body":{"controllers/UserController.html":{}}}],["dwelling",{"_index":3540,"title":{},"body":{"license.html":{}}}],["dynamically",{"_index":3344,"title":{},"body":{"license.html":{}}}],["e",{"_index":965,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"license.html":{}}}],["e.g",{"_index":1809,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["e.message",{"_index":2644,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["e.name",{"_index":2643,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["e2e",{"_index":3040,"title":{},"body":{"index.html":{}}}],["each",{"_index":1479,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["earlier",{"_index":3254,"title":{},"body":{"license.html":{}}}],["early",{"_index":1515,"title":{},"body":{"injectables/GuildService.html":{}}}],["edit",{"_index":544,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editchannel",{"_index":532,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editchannel(guildid",{"_index":541,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editroledata",{"_index":968,"title":{"classes/EditRoleData.html":{}},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{}}}],["editsettings",{"_index":1590,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["editsettings(guildid",{"_index":1601,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["effect",{"_index":3843,"title":{},"body":{"license.html":{}}}],["effected",{"_index":3418,"title":{},"body":{"license.html":{}}}],["effective",{"_index":3400,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":3862,"title":{},"body":{"license.html":{}}}],["efficient",{"_index":3019,"title":{},"body":{"index.html":{}}}],["efforts",{"_index":3691,"title":{},"body":{"license.html":{}}}],["ein",{"_index":948,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["eine",{"_index":2157,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einen",{"_index":2162,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einer",{"_index":2870,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einspänner",{"_index":2446,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["eiskaffee",{"_index":2447,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["electronic",{"_index":3872,"title":{},"body":{"license.html":{}}}],["embed",{"_index":674,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embed.addfields",{"_index":2641,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["embedbuilder",{"_index":656,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embeds",{"_index":698,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embodied",{"_index":3478,"title":{},"body":{"license.html":{}}}],["emitter",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["emoji",{"_index":1383,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["emojiresolvable",{"_index":984,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["emote.guard",{"_index":1263,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["emote.guard.ts",{"_index":2903,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["emotes",{"_index":3939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emotes.includes((reaction",{"_index":3941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["employer",{"_index":3883,"title":{},"body":{"license.html":{}}}],["en",{"_index":2046,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["enable",{"_index":3322,"title":{},"body":{"license.html":{}}}],["enabled",{"_index":516,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["enables",{"_index":3274,"title":{},"body":{"license.html":{}}}],["enableshutdownhooks",{"_index":2215,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":2217,"title":{},"body":{"injectables/PrismaService.html":{}}}],["encoded",{"_index":987,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["encouraged",{"_index":3197,"title":{},"body":{"license.html":{}}}],["end",{"_index":3854,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":2308,"title":{},"body":{"controllers/SelfController.html":{}}}],["enforce",{"_index":3727,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":3424,"title":{},"body":{"license.html":{}}}],["ensure",{"_index":3150,"title":{},"body":{"license.html":{}}}],["enter",{"_index":2655,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["entered",{"_index":3762,"title":{},"body":{"license.html":{}}}],["entire",{"_index":3448,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":3780,"title":{},"body":{"license.html":{}}}],["entity",{"_index":3678,"title":{},"body":{"license.html":{}}}],["entry",{"_index":326,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.action",{"_index":334,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.createdat",{"_index":343,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.dto",{"_index":245,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["entry.dto.ts",{"_index":2023,"title":{},"body":{"classes/LogEntryDto.html":{},"coverage.html":{}}}],["entry.dto.ts:11",{"_index":2024,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:13",{"_index":2025,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:15",{"_index":2026,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:17",{"_index":2027,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:19",{"_index":2028,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:21",{"_index":2029,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.extrainfo",{"_index":341,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.guildid",{"_index":335,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.invokerid",{"_index":336,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.reason",{"_index":337,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.targetid",{"_index":338,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.targettype",{"_index":339,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["enum",{"_index":290,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/functions.html":{}}}],["ephemeral",{"_index":669,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["equivalent",{"_index":3370,"title":{},"body":{"license.html":{}}}],["erfolgreich",{"_index":2123,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["err",{"_index":2201,"title":{},"body":{"classes/MumVoiceCommand.html":{},"classes/TimeOutCommand.html":{}}}],["error",{"_index":70,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/Explorer.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/MumVoiceCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["error('timeout",{"_index":2623,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.length",{"_index":2622,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.map((e",{"_index":2642,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.message",{"_index":1946,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["error.push(err",{"_index":2619,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.response.data.error",{"_index":1939,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["erstelle",{"_index":2604,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["espresso",{"_index":2448,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["essential",{"_index":3324,"title":{},"body":{"license.html":{}}}],["etc",{"_index":2554,"title":{},"body":{"injectables/TasksService.html":{}}}],["etwas",{"_index":2881,"title":{},"body":{"classes/UserToUser.html":{}}}],["europe/berlin",{"_index":1178,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{}}}],["even",{"_index":3839,"title":{},"body":{"license.html":{}}}],["event",{"_index":212,"title":{},"body":{"injectables/AppService.html":{},"injectables/GuildService.html":{},"classes/LogEntry.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["event.decorator",{"_index":1062,"title":{},"body":{"classes/Explorer.html":{}}}],["event.decorator.ts",{"_index":2899,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["event.interface.ts",{"_index":367,"title":{},"body":{"interfaces/BotEvent.html":{},"coverage.html":{}}}],["event.interface.ts:4",{"_index":371,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["event.toformattedlog(this.logger",{"_index":223,"title":{},"body":{"injectables/AppService.html":{}}}],["eventargs",{"_index":736,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["eventemitter",{"_index":208,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["eventemitter2",{"_index":206,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["eventemittermodule",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["eventparams",{"_index":740,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["events",{"_index":1033,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["events/channel.event",{"_index":574,"title":{},"body":{"controllers/ChannelController.html":{}}}],["events/guild",{"_index":1413,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/interaction",{"_index":1409,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/message",{"_index":1408,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/settings",{"_index":1626,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["events/user.events",{"_index":2716,"title":{},"body":{"controllers/UserController.html":{}}}],["eventtolog",{"_index":218,"title":{"interfaces/EventToLog.html":{}},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["eventtype",{"_index":2390,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["everyday",{"_index":2538,"title":{},"body":{"injectables/TasksService.html":{}}}],["everyone",{"_index":1027,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["exact",{"_index":3253,"title":{},"body":{"license.html":{}}}],["example",{"_index":430,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["examples",{"_index":978,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["except",{"_index":3264,"title":{},"body":{"license.html":{}}}],["exception",{"_index":579,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{}}}],["exception.constraints[key",{"_index":717,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exception.message",{"_index":645,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exception.property",{"_index":711,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exception.ts",{"_index":620,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"coverage.html":{}}}],["exception.ts:12",{"_index":625,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/GuildDoesNotExistException.html":{},"classes/SendDirectMessageToUserException.html":{}}}],["exception.ts:23",{"_index":647,"title":{},"body":{"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["exception.ts:25",{"_index":1222,"title":{},"body":{"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exceptionfilter",{"_index":627,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exceptionlist",{"_index":705,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exceptionlist.geterror().map((exception",{"_index":708,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exceptions",{"_index":3591,"title":{},"body":{"license.html":{}}}],["excluded",{"_index":3528,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":3766,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":3864,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3718,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":3377,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":3773,"title":{},"body":{"license.html":{}}}],["executable",{"_index":3312,"title":{},"body":{"license.html":{}}}],["execute",{"_index":3559,"title":{},"body":{"license.html":{}}}],["executing",{"_index":3265,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":854,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":3692,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3419,"title":{},"body":{"license.html":{}}}],["exist",{"_index":1215,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["exists",{"_index":1116,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["expected",{"_index":3550,"title":{},"body":{"license.html":{}}}],["expects",{"_index":3549,"title":{},"body":{"license.html":{}}}],["expensiveeeeee",{"_index":2708,"title":{},"body":{"controllers/UserController.html":{}}}],["expiresin",{"_index":1880,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["explicitly",{"_index":3363,"title":{},"body":{"license.html":{}}}],["explorer",{"_index":1044,"title":{"classes/Explorer.html":{}},"body":{"classes/Explorer.html":{},"coverage.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["exports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"classes/EditRoleData.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"classes/RoleResponse.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exposes",{"_index":2521,"title":{},"body":{"injectables/TasksService.html":{}}}],["express",{"_index":631,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":3811,"title":{},"body":{"license.html":{}}}],["expression",{"_index":1132,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["expression'})@apiproperty({type",{"_index":1128,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["expressly",{"_index":3639,"title":{},"body":{"license.html":{}}}],["extend",{"_index":3737,"title":{},"body":{"license.html":{}}}],["extended",{"_index":2958,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":623,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["extensions",{"_index":3461,"title":{},"body":{"license.html":{}}}],["extent",{"_index":3283,"title":{},"body":{"license.html":{}}}],["externalcontextcreator",{"_index":1050,"title":{},"body":{"classes/Explorer.html":{}}}],["externaldocs",{"_index":988,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["extractjwt",{"_index":1955,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1960,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["extractjwt.fromheader('refresh_token",{"_index":2243,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["extrainfo",{"_index":340,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/LogEntry.html":{}}}],["f",{"_index":3626,"title":{},"body":{"license.html":{}}}],["facilitating",{"_index":3787,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":3378,"title":{},"body":{"license.html":{}}}],["fail",{"_index":3201,"title":{},"body":{"license.html":{}}}],["failed",{"_index":713,"title":{},"body":{"classes/CommandValidationFilter.html":{},"injectables/JwtAuthService.html":{},"classes/MumVoiceCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["failifnotexists",{"_index":2199,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["failonlogin",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["fails",{"_index":2371,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"license.html":{}}}],["failure",{"_index":3837,"title":{},"body":{"license.html":{}}}],["fair",{"_index":3369,"title":{},"body":{"license.html":{}}}],["false",{"_index":48,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RoleResponse.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["false})@isoptional()@isstring",{"_index":2044,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["family",{"_index":3535,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":3251,"title":{},"body":{"license.html":{}}}],["favor",{"_index":3544,"title":{},"body":{"license.html":{}}}],["feature",{"_index":3287,"title":{},"body":{"license.html":{}}}],["features",{"_index":3900,"title":{},"body":{"properties.html":{}}}],["fee",{"_index":3440,"title":{},"body":{"license.html":{}}}],["fest",{"_index":1265,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"dependencies.html":{}}}],["fetch",{"_index":2315,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{}}}],["fetch(guildid",{"_index":1676,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["fetched",{"_index":551,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["fetched'})@apiresponse({status",{"_index":2266,"title":{},"body":{"controllers/RoleController.html":{}}}],["fetches",{"_index":2344,"title":{},"body":{"injectables/SelfService.html":{}}}],["fetchself",{"_index":2339,"title":{},"body":{"injectables/SelfService.html":{}}}],["fetchself(userid",{"_index":2348,"title":{},"body":{"injectables/SelfService.html":{}}}],["field",{"_index":850,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"miscellaneous/functions.html":{}}}],["field('answer",{"_index":848,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["files",{"_index":3341,"title":{},"body":{"license.html":{}}}],["filter",{"_index":228,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/ModRequestFlow.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["filter.action",{"_index":351,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.createdfrom",{"_index":344,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.createdtill",{"_index":345,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.dto",{"_index":240,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["filter.dto.ts",{"_index":286,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:13",{"_index":296,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:16",{"_index":297,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:21",{"_index":299,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:26",{"_index":292,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.targettype",{"_index":352,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filtercb",{"_index":2981,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filters/command",{"_index":2476,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["finally",{"_index":3649,"title":{},"body":{"license.html":{}}}],["find",{"_index":320,"title":{},"body":{"injectables/AuditLogService.html":{},"license.html":{}}}],["find(guildid",{"_index":268,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["findall",{"_index":1696,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["findall(guildid",{"_index":1717,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["findmany",{"_index":2362,"title":{},"body":{"injectables/SelfService.html":{}}}],["fired",{"_index":1489,"title":{},"body":{"injectables/GuildService.html":{}}}],["first",{"_index":403,"title":{},"body":{"modules/BotModule.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{},"license.html":{}}}],["firstmessageid",{"_index":1295,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["firstvaluefrom",{"_index":1900,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["fitness",{"_index":3814,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":3482,"title":{},"body":{"license.html":{}}}],["flags",{"_index":417,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"miscellaneous/variables.html":{}}}],["flow",{"_index":3350,"title":{},"body":{"license.html":{}}}],["fly",{"_index":2549,"title":{},"body":{"injectables/TasksService.html":{}}}],["follow",{"_index":3233,"title":{},"body":{"license.html":{}}}],["following",{"_index":3722,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":3417,"title":{},"body":{"license.html":{}}}],["forbiddenexception",{"_index":1787,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["force",{"_index":3373,"title":{},"body":{"license.html":{}}}],["foreach((match",{"_index":2843,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["forguild",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["form",{"_index":1931,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["format",{"_index":293,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/LogEntryDto.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["forms",{"_index":3473,"title":{},"body":{"license.html":{}}}],["found",{"_index":588,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["foundation",{"_index":3133,"title":{},"body":{"license.html":{}}}],["frage",{"_index":784,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["fragen",{"_index":2630,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["framework",{"_index":3017,"title":{},"body":{"index.html":{}}}],["free",{"_index":3131,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":3156,"title":{},"body":{"license.html":{}}}],["fromuserid",{"_index":2470,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["frontend",{"_index":2311,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{},"properties.html":{}}}],["fulfilling",{"_index":3403,"title":{},"body":{"license.html":{}}}],["full",{"_index":3867,"title":{},"body":{"license.html":{}}}],["fun",{"_index":1517,"title":{},"body":{"injectables/GuildService.html":{}}}],["function",{"_index":1039,"title":{},"body":{"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function/object",{"_index":3947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functionality",{"_index":2997,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functioning",{"_index":3562,"title":{},"body":{"license.html":{}}}],["functions",{"_index":2972,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3505,"title":{},"body":{"license.html":{}}}],["future",{"_index":3806,"title":{},"body":{"license.html":{}}}],["führen",{"_index":953,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["für",{"_index":2831,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["ganzen",{"_index":2461,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["gateway",{"_index":2209,"title":{},"body":{"classes/PingCommand.html":{}}}],["gatewayintentbits",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.automoderationconfiguration",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.automoderationexecution",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessagereactions",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessages",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessagetyping",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildemojisandstickers",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildintegrations",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildinvites",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmembers",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessagereactions",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessages",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessagetyping",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmoderation",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildpresences",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guilds",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildvoicestates",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildwebhooks",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.messagecontent",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["geben",{"_index":768,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["gemutet",{"_index":2829,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["general",{"_index":3124,"title":{},"body":{"license.html":{}}}],["generally",{"_index":3338,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1022,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"license.html":{}}}],["generic",{"_index":3012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gesendet",{"_index":2049,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["get('/')@apioperation({summary",{"_index":554,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["get(':channelid",{"_index":591,"title":{},"body":{"controllers/ChannelController.html":{}}}],["get(':channelid')@apioperation({summary",{"_index":547,"title":{},"body":{"controllers/ChannelController.html":{}}}],["get('https://discordapp.com/api/users/@me",{"_index":1942,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["get('login",{"_index":1828,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["get('messages",{"_index":1194,"title":{},"body":{"controllers/GuildController.html":{}}}],["get('self",{"_index":1666,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["get(dbuser.guildid",{"_index":1341,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["get(guild.id",{"_index":2568,"title":{},"body":{"injectables/TasksService.html":{}}}],["get(guildid",{"_index":1149,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["get(ticket.guildid",{"_index":2141,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["getadminroleid",{"_index":1591,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getadminroleid(guildid",{"_index":1604,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getall",{"_index":1419,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getall(guildid",{"_index":1423,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getattachmenttype",{"_index":1366,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getattachmenttype(attachment.contenttype",{"_index":1380,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["getattachmenttype(contenttype",{"_index":2990,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getauditlog",{"_index":226,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["getauditlog(guildid",{"_index":227,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["getautodeletechannel",{"_index":1092,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getautodeletechannel(@param('guildid",{"_index":1109,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getautodeletechannel(guildid",{"_index":1097,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getguildchannel",{"_index":533,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannel(guildid",{"_index":546,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannels",{"_index":534,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannels(guildid",{"_index":553,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildroles",{"_index":2253,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguildroles(@param('guildid",{"_index":2276,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguildroles(guildid",{"_index":2265,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguilduser",{"_index":1697,"title":{},"body":{"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["getguilduser(request",{"_index":2697,"title":{},"body":{"controllers/UserController.html":{}}}],["getguilduser(userid",{"_index":1719,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getguildusers",{"_index":2690,"title":{},"body":{"controllers/UserController.html":{}}}],["getguildusers(guildid",{"_index":2699,"title":{},"body":{"controllers/UserController.html":{}}}],["getintrochannelid",{"_index":1592,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getintrochannelid(guildid",{"_index":1606,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmessage",{"_index":855,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["getmodchannelid",{"_index":1593,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodchannelid(guildid",{"_index":1608,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodroleid",{"_index":1594,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodroleid(guildid",{"_index":1610,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getopenintrochannelid",{"_index":1595,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getopenintrochannelid(guildid",{"_index":1612,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getrank",{"_index":1698,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getrank(member",{"_index":1721,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getrequest",{"_index":1798,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["getrestrictedchannel",{"_index":1420,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getrestrictedchannel(guildid",{"_index":1425,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["gets",{"_index":1271,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/PingCommand.html":{},"controllers/SelfController.html":{},"miscellaneous/functions.html":{}}}],["getself",{"_index":1664,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["getself(@requestuser",{"_index":2322,"title":{},"body":{"controllers/SelfController.html":{}}}],["getself(userid",{"_index":1665,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["getsettings",{"_index":1566,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{}}}],["getsettings(@param('guildid",{"_index":1579,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["getsettings(guildid",{"_index":1568,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{}}}],["getting",{"_index":3013,"title":{"index.html":{},"license.html":{}},"body":{}}],["getunverifiedmemberroleid",{"_index":1596,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getunverifiedmemberroleid(guildid",{"_index":1615,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getuserfromcode",{"_index":1883,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["getuserfromcode(code",{"_index":1889,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["getverifiedmemberroleid",{"_index":1597,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getverifiedmemberroleid(guildid",{"_index":1617,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getwelcomemessageformat",{"_index":1598,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getwelcomemessageformat(guildid",{"_index":1619,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["gibt",{"_index":2462,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["give",{"_index":2479,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"license.html":{}}}],["given",{"_index":1458,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["gives",{"_index":3181,"title":{},"body":{"license.html":{}}}],["giving",{"_index":3444,"title":{},"body":{"license.html":{}}}],["gnu",{"_index":3122,"title":{},"body":{"license.html":{}}}],["goals",{"_index":3222,"title":{},"body":{"license.html":{}}}],["governed",{"_index":3594,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":3223,"title":{},"body":{"license.html":{}}}],["grant",{"_index":3621,"title":{},"body":{"license.html":{}}}],["grant_type",{"_index":1922,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["granted",{"_index":3358,"title":{},"body":{"license.html":{}}}],["grants",{"_index":3668,"title":{},"body":{"license.html":{}}}],["gratis",{"_index":3504,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":3856,"title":{},"body":{"license.html":{}}}],["group",{"_index":1472,"title":{},"body":{"injectables/GuildService.html":{}}}],["grow",{"_index":3046,"title":{},"body":{"index.html":{}}}],["grund",{"_index":2633,"title":{},"body":{"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["gte",{"_index":346,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guarantee",{"_index":3160,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1772,"title":{"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["guarded",{"_index":3929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":1773,"title":{},"body":{"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"overview.html":{}}}],["guards/is",{"_index":753,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["guards/refresh",{"_index":1841,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["guild",{"_index":435,"title":{"classes/Guild.html":{}},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["guild'})@apiresponse({status",{"_index":548,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["guild.autodeletechannels.foreach((deletechannel",{"_index":1161,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["guild.channels.cache.foreach(async",{"_index":2758,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.channels.cache.get(channelid",{"_index":595,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.cache.size",{"_index":589,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.create",{"_index":2087,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guild.channels.fetch",{"_index":1169,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"controllers/UserController.html":{}}}],["guild.channels.fetch()).foreach(async",{"_index":2789,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["guild.channels.fetch()).tojson",{"_index":590,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.fetch(channelid",{"_index":593,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.command",{"_index":397,"title":{},"body":{"modules/BotModule.html":{}}}],["guild.command.ts",{"_index":2896,"title":{},"body":{"coverage.html":{},"classes/initGuildCommand.html":{}}}],["guild.command.ts:156",{"_index":3073,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.command.ts:21",{"_index":3066,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.command.ts:26",{"_index":3069,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.controller",{"_index":1405,"title":{},"body":{"modules/GuildModule.html":{}}}],["guild.iconurl",{"_index":2360,"title":{},"body":{"injectables/SelfService.html":{}}}],["guild.id",{"_index":2359,"title":{},"body":{"injectables/SelfService.html":{}}}],["guild.members.ban(userid",{"_index":2735,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.fetch",{"_index":1759,"title":{},"body":{"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["guild.members.fetch().then((members",{"_index":2658,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["guild.members.fetch(request.user.userid",{"_index":2730,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.fetch(userid",{"_index":2748,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.kick(userid",{"_index":2742,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.name",{"_index":1276,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/SelfService.html":{}}}],["guild.ownerid",{"_index":2659,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["guild.roles.cache.get(roleid",{"_index":2285,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.cache.size",{"_index":2278,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.create(roledata",{"_index":2280,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.fetch()).tojson",{"_index":2279,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.service",{"_index":1142,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"modules/GuildModule.html":{}}}],["guild/:guildid",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["guild/guild",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["guild/guild.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["guild/moderation/moderation.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["guild_id",{"_index":1705,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["guild_updated",{"_index":2001,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["guildautodeletechannelcontroller",{"_index":1086,"title":{"controllers/GuildAutoDeleteChannelController.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"coverage.html":{}}}],["guildautodeletechanneldto",{"_index":1095,"title":{"classes/GuildAutoDeleteChannelDto.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"coverage.html":{}}}],["guildautodeletechannelmodule",{"_index":1133,"title":{"modules/GuildAutoDeleteChannelModule.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules.html":{},"overview.html":{}}}],["guildautodeletechannelservice",{"_index":1103,"title":{"injectables/GuildAutoDeleteChannelService.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"coverage.html":{},"overview.html":{}}}],["guildbasedchannel",{"_index":568,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guildchannel",{"_index":567,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["guildchanneleditoptions",{"_index":488,"title":{"classes/GuildChannelEditOptions.html":{}},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["guildcontroller",{"_index":1189,"title":{"controllers/GuildController.html":{}},"body":{"controllers/GuildController.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["guilddoesnotexistexception",{"_index":1213,"title":{"classes/GuildDoesNotExistException.html":{}},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["guilddoesnotexistexception(guildid",{"_index":1637,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["guilddoesnotexistexceptionfilter",{"_index":1220,"title":{"classes/GuildDoesNotExistExceptionFilter.html":{}},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"coverage.html":{}}}],["guildid",{"_index":65,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/initGuildCommand.html":{}}}],["guildid_userid",{"_index":64,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["guildids",{"_index":3004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guildmember",{"_index":1234,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guildmemberevents",{"_index":1223,"title":{"injectables/GuildMemberEvents.html":{}},"body":{"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildmenu",{"_index":2160,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guildmessagehandler",{"_index":1351,"title":{"injectables/GuildMessageHandler.html":{}},"body":{"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildmodule",{"_index":105,"title":{"modules/GuildModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules.html":{},"overview.html":{}}}],["guildname",{"_index":1673,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["guildquestionid",{"_index":816,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["guildrestrictedchannelcontroller",{"_index":1414,"title":{"controllers/GuildRestrictedChannelController.html":{}},"body":{"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"coverage.html":{}}}],["guildrestrictedchannelmodule",{"_index":1402,"title":{"modules/GuildRestrictedChannelModule.html":{}},"body":{"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules.html":{},"overview.html":{}}}],["guildrestrictedchannelservice",{"_index":376,"title":{"injectables/GuildRestrictedChannelService.html":{}},"body":{"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["guilds",{"_index":1085,"title":{},"body":{"classes/Guild.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["guilds.foreach((guild",{"_index":1160,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["guilds.foreach(async",{"_index":1562,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guilds.length",{"_index":2150,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guilds.map((guild",{"_index":2358,"title":{},"body":{"injectables/SelfService.html":{}}}],["guilds/:guildid/roles/:roleid",{"_index":1023,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["guilds[0",{"_index":2152,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guildservice",{"_index":377,"title":{"injectables/GuildService.html":{}},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["guildsettingscontroller",{"_index":1564,"title":{"controllers/GuildSettingsController.html":{}},"body":{"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"coverage.html":{}}}],["guildsettingsmodule",{"_index":132,"title":{"modules/GuildSettingsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/GuildSettingsModule.html":{},"modules.html":{},"overview.html":{}}}],["guildsettingsservice",{"_index":378,"title":{"injectables/GuildSettingsService.html":{}},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildtextbasedchannel",{"_index":569,"title":{},"body":{"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["guilduser",{"_index":1082,"title":{},"body":{"classes/Guild.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["guilduser.firstmessageid",{"_index":2774,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["guilduser['guildid",{"_index":1077,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["guilduser['rank",{"_index":2332,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["guilduser['userid",{"_index":1084,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["guildusercontroller",{"_index":1662,"title":{"controllers/GuildUserController.html":{}},"body":{"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"coverage.html":{}}}],["guildusermodule",{"_index":141,"title":{"modules/GuildUserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/GuildUserModule.html":{},"modules.html":{},"overview.html":{}}}],["guildusers.map((guilduser",{"_index":2364,"title":{},"body":{"injectables/SelfService.html":{}}}],["guilduserservice",{"_index":1137,"title":{"injectables/GuildUserService.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["hacky",{"_index":2832,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["handleevent",{"_index":204,"title":{},"body":{"injectables/AppService.html":{}}}],["handleevent(event",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["handler",{"_index":27,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildService.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["handler()@usefilters(commandvalidationfilter",{"_index":2610,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["hasattachments",{"_index":1394,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["hashandlermethod",{"_index":1049,"title":{},"body":{"classes/Explorer.html":{}}}],["hashandlermethod(provider",{"_index":1057,"title":{},"body":{"classes/Explorer.html":{}}}],["hasrequiredrank",{"_index":257,"title":{"guards/HasRequiredRank.html":{}},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["hast",{"_index":2597,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["haven't",{"_index":2541,"title":{},"body":{"injectables/TasksService.html":{}}}],["having",{"_index":3376,"title":{},"body":{"license.html":{}}}],["headers",{"_index":1928,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["headpat",{"_index":2463,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["heartened",{"_index":3196,"title":{},"body":{"license.html":{}}}],["helfen",{"_index":956,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["helper",{"_index":940,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{}}}],["helper.ts",{"_index":2934,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["hence",{"_index":3897,"title":{},"body":{"properties.html":{}}}],["here",{"_index":1031,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"classes/RoleResponse.html":{},"index.html":{}}}],["here](${message.url",{"_index":2785,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["hereafter",{"_index":3714,"title":{},"body":{"license.html":{}}}],["hex",{"_index":912,"title":{},"body":{"classes/DiscordUser.html":{}}}],["hexaccentcolor",{"_index":892,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["hier",{"_index":2132,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["higher",{"_index":997,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["higher.guard",{"_index":1258,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["higher.guard.ts",{"_index":2225,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["higher.guard.ts:11",{"_index":2226,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["higher.guard.ts:16",{"_index":2227,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["hilfe",{"_index":961,"title":{},"body":{"injectables/DmMessageHandler.html":{},"miscellaneous/functions.html":{}}}],["hoist",{"_index":970,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["hoisted",{"_index":981,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["holder",{"_index":3646,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3603,"title":{},"body":{"license.html":{}}}],["hope",{"_index":3869,"title":{},"body":{"license.html":{}}}],["host",{"_index":640,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["host.getargbyindex(0",{"_index":707,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["host.switchtohttp",{"_index":642,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["hosts",{"_index":3514,"title":{},"body":{"license.html":{}}}],["hours",{"_index":2851,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["household",{"_index":3536,"title":{},"body":{"license.html":{}}}],["hs256",{"_index":1910,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["http",{"_index":635,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["httpcode",{"_index":1574,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["httpcode(httpstatuscode.accepted",{"_index":1582,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["httpmodule",{"_index":1874,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["https://cdn.discordapp.com/emojis/859111454677139476.webp",{"_index":1009,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["https://discordapp.com/api/oauth2/token",{"_index":1916,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["https://fsf.org",{"_index":3135,"title":{},"body":{"license.html":{}}}],["https://github.com/89q12/mega",{"_index":825,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["https://github.com/discordjs/discord.js/issues/4930#issuecomment",{"_index":1314,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["https://nestjs.com",{"_index":3060,"title":{},"body":{"index.html":{}}}],["https://old.discordjs.dev/#/docs/discord.js/main/class/role?scrollto=seticon",{"_index":1021,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["https://www.gnu.org/licenses",{"_index":3888,"title":{},"body":{"license.html":{}}}],["httpservice",{"_index":1843,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["httpstatus",{"_index":629,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["httpstatuscode",{"_index":1576,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["hug",{"_index":2483,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["i.customid",{"_index":2167,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["ia",{"_index":739,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["ia(modalfieldstransformpipe",{"_index":804,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["ia(slashcommandpipe",{"_index":760,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["ich",{"_index":944,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["icon",{"_index":971,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["iconurl",{"_index":822,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["id",{"_index":72,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/Channel.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SettingsChanged.html":{},"classes/UnverifyByRoleCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifiable",{"_index":3742,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":2885,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1927,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["ids",{"_index":446,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"injectables/SelfService.html":{}}}],["iffy",{"_index":1347,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ignoreenvvars",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":1961,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["image",{"_index":1076,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{}}}],["images",{"_index":448,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["implement",{"_index":1034,"title":{},"body":{"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"license.html":{}}}],["implementation",{"_index":3323,"title":{},"body":{"license.html":{}}}],["implemented",{"_index":2740,"title":{},"body":{"controllers/UserController.html":{}}}],["implements",{"_index":501,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RestrictedChannelDto.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["implied",{"_index":3767,"title":{},"body":{"license.html":{}}}],["import",{"_index":31,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["importing",{"_index":3705,"title":{},"body":{"license.html":{}}}],["imports",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["impose",{"_index":3631,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":3770,"title":{},"body":{"license.html":{}}}],["improvements",{"_index":3188,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3831,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":3834,"title":{},"body":{"license.html":{}}}],["inc",{"_index":3134,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3828,"title":{},"body":{"license.html":{}}}],["include",{"_index":3313,"title":{},"body":{"license.html":{}}}],["included",{"_index":3315,"title":{},"body":{"license.html":{}}}],["includes",{"_index":3269,"title":{},"body":{"license.html":{}}}],["including",{"_index":3332,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":3471,"title":{},"body":{"license.html":{}}}],["incorporate",{"_index":3194,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3788,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":3539,"title":{},"body":{"license.html":{}}}],["indemnification",{"_index":3627,"title":{},"body":{"license.html":{}}}],["independent",{"_index":3459,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":3671,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":3637,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3469,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":3247,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":3553,"title":{},"body":{"license.html":{}}}],["inestapplication",{"_index":2218,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["inform",{"_index":3521,"title":{},"body":{"license.html":{}}}],["information",{"_index":2640,"title":{},"body":{"classes/TimeOutCommand.html":{},"license.html":{}}}],["infringe",{"_index":3669,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3702,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3261,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":1806,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["inheritedranks",{"_index":1811,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inheritedranks[user.rank",{"_index":1803,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["initguildcommand",{"_index":395,"title":{"classes/initGuildCommand.html":{}},"body":{"modules/BotModule.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["initiate",{"_index":3695,"title":{},"body":{"license.html":{}}}],["initiatemodrequestflow",{"_index":2054,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["initiatemodrequestflow(interaction",{"_index":2062,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["inject",{"_index":37,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["inject(auditlogservice",{"_index":262,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["inject(eventemitter2",{"_index":221,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["inject(guildautodeletechannelservice",{"_index":1108,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["inject(guildrestrictedchannelservice",{"_index":1500,"title":{},"body":{"injectables/GuildService.html":{}}}],["inject(guildservice",{"_index":1200,"title":{},"body":{"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["inject(guildsettingsservice",{"_index":859,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["inject(guilduserservice",{"_index":1266,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/TasksService.html":{}}}],["inject(prismaservice",{"_index":51,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["inject(reflector",{"_index":1792,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["inject(tasksservice",{"_index":1154,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["injectable",{"_index":199,"title":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":200,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectdiscordclient",{"_index":33,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["input",{"_index":710,"title":{},"body":{"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionDto.html":{},"classes/UserTimeOutDto.html":{}}}],["inputs",{"_index":800,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["insertmessage",{"_index":1699,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["insertmessage(data",{"_index":1723,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["install",{"_index":3331,"title":{},"body":{"license.html":{}}}],["installation",{"_index":3027,"title":{},"body":{"index.html":{},"license.html":{}}}],["installed",{"_index":3575,"title":{},"body":{"license.html":{}}}],["installrunning",{"_index":3029,"title":{},"body":{"index.html":{}}}],["instance",{"_index":248,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildSettingsController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{}}}],["instance.ts",{"_index":2936,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["instanceof",{"_index":863,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/variables.html":{}}}],["int",{"_index":838,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["intact",{"_index":3433,"title":{},"body":{"license.html":{}}}],["integration",{"_index":1012,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["intended",{"_index":3159,"title":{},"body":{"license.html":{}}}],["intention",{"_index":3422,"title":{},"body":{"license.html":{}}}],["intents",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["interact",{"_index":3875,"title":{},"body":{"license.html":{}}}],["interacting",{"_index":3782,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":29,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"guards/IsModalInteractionGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["interaction.channel.messages.fetch",{"_index":2386,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["interaction.channel.send",{"_index":2195,"title":{},"body":{"classes/MumVoiceCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["interaction.customid",{"_index":2126,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["interaction.customid.endswith",{"_index":3115,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.customid.includes('community",{"_index":776,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.customid.split",{"_index":777,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["interaction.customid.startswith('closeticket",{"_index":2137,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.deferreply",{"_index":668,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/ModRequestFlow.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.deletereply",{"_index":2136,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.editreply",{"_index":2120,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.editreply(options",{"_index":2159,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.fields.gettextinputvalue('modrequestmessage",{"_index":2112,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.followup",{"_index":697,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.guard",{"_index":755,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.guard.ts",{"_index":1813,"title":{},"body":{"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["interaction.guard.ts:5",{"_index":1814,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interaction.guild.channels.fetch(settings.introchannelid",{"_index":3091,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.leavechannelid",{"_index":3094,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.modchannelid)).name",{"_index":3097,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.openintrochannelid",{"_index":3087,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.members.fetch().then((members",{"_index":53,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["interaction.guild.members.fetch(dto.user",{"_index":2486,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["interaction.guild.roles.fetch(settings.adminroleid)).name",{"_index":3103,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.modroleid)).name",{"_index":3100,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.unverifiedmemberroleid",{"_index":3110,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.verifiedmemberroleid",{"_index":3106,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guildid",{"_index":672,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.isanyselectmenu",{"_index":3116,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.isbutton",{"_index":775,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["interaction.ischannelselectmenu",{"_index":3117,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.iscontextmenucommand",{"_index":2385,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["interaction.ismodalsubmit",{"_index":2084,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.isrepliable",{"_index":718,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["interaction.isroleselectmenu",{"_index":3121,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.isstringselectmenu",{"_index":2125,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.reply",{"_index":719,"title":{},"body":{"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["interaction.showmodal(modal",{"_index":802,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.showmodal(modrequestmodal",{"_index":2135,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.targetid",{"_index":2387,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["interaction.type",{"_index":1816,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interaction.user.displayname",{"_index":2091,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.user.id",{"_index":2101,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{}}}],["interaction.values[0",{"_index":3118,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.values[0].split",{"_index":2128,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction?.guildid",{"_index":2147,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interactionevent",{"_index":34,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["interactiontype",{"_index":1815,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interactiontype.modalsubmit",{"_index":1817,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interactive",{"_index":3279,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":3485,"title":{},"body":{"license.html":{}}}],["interest",{"_index":3688,"title":{},"body":{"license.html":{}}}],["interface",{"_index":363,"title":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{}},"body":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{},"license.html":{}}}],["interfaces",{"_index":365,"title":{},"body":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{},"license.html":{},"overview.html":{}}}],["interfered",{"_index":3564,"title":{},"body":{"license.html":{}}}],["internalservererrorexception",{"_index":3933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interpretation",{"_index":3842,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":3329,"title":{},"body":{"license.html":{}}}],["interval",{"_index":1470,"title":{},"body":{"injectables/GuildService.html":{}}}],["intimate",{"_index":3348,"title":{},"body":{"license.html":{}}}],["intro",{"_index":3088,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["introchannelid",{"_index":2401,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["introduction",{"_index":2783,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["invalid",{"_index":1126,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["invalid_grant",{"_index":1940,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["invalid_request",{"_index":2002,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invalidate",{"_index":3454,"title":{},"body":{"license.html":{}}}],["invite",{"_index":1987,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invite_created",{"_index":2003,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invite_deleted",{"_index":2004,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invoker",{"_index":1980,"title":{},"body":{"classes/LogEntry.html":{}}}],["invokerid",{"_index":278,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/UserInfoUiCommand.html":{}}}],["involved",{"_index":1974,"title":{},"body":{"classes/LogEntry.html":{}}}],["irrevocable",{"_index":3360,"title":{},"body":{"license.html":{}}}],["isactive",{"_index":1700,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["isactive(userid",{"_index":1728,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["isarray",{"_index":477,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isarray()@isstring()@isoptional()@apiproperty({description",{"_index":444,"title":{},"body":{"classes/Channel.html":{}}}],["isavailable",{"_index":1553,"title":{},"body":{"injectables/GuildService.html":{}}}],["isboolean",{"_index":478,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["isboolean()@apiproperty({type",{"_index":876,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/RoleResponse.html":{}}}],["isboolean()@isoptional()@apiproperty({description",{"_index":451,"title":{},"body":{"classes/Channel.html":{}}}],["isboolean()@isoptional()@apiproperty({type",{"_index":980,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{}}}],["ischannelavailabletouser",{"_index":1421,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["ischannelavailabletouser(user",{"_index":1427,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{}}}],["isdate",{"_index":1992,"title":{},"body":{"classes/LogEntry.html":{}}}],["isdate()@apiproperty({type",{"_index":1971,"title":{},"body":{"classes/LogEntry.html":{}}}],["isdatestring",{"_index":885,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/UserTimeOutDto.html":{}}}],["isdatestring()@isoptional()@apipropertyoptional({type",{"_index":878,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["isenum",{"_index":479,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isenum(channeltype",{"_index":490,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isenum(channeltype)@isoptional()@apiproperty({enum",{"_index":1186,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["isglobal",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":300,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["isin(['string",{"_index":1181,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["isin([string",{"_index":496,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isin(actions",{"_index":309,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["isin(object.keys(colors",{"_index":1016,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isin(object.keys(permissionflagsbits",{"_index":1018,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isin(targettypes",{"_index":308,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["isin(undefined)@apiproperty({enum",{"_index":976,"title":{},"body":{"classes/EditRoleData.html":{}}}],["isin(undefined)@isoptional()@apiproperty({type",{"_index":993,"title":{},"body":{"classes/EditRoleData.html":{}}}],["isinstance",{"_index":480,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isinstance(permissionoverwrite",{"_index":487,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isinstance(permissionoverwrite)@isoptional()@apiproperty({description",{"_index":458,"title":{},"body":{"classes/Channel.html":{}}}],["ismodalinteractionguard",{"_index":752,"title":{"guards/IsModalInteractionGuard.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["isn't",{"_index":622,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["isnumber",{"_index":481,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isnumber()@apiproperty({description",{"_index":427,"title":{},"body":{"classes/Channel.html":{}}}],["isnumber()@apiproperty({type",{"_index":894,"title":{},"body":{"classes/DiscordUser.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isnumber()@isoptional()@apiproperty({description",{"_index":462,"title":{},"body":{"classes/Channel.html":{}}}],["isnumber()@isoptional()@apiproperty({type",{"_index":996,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{}}}],["isoptional",{"_index":301,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{}}}],["isstring",{"_index":302,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{}}}],["isstring()@apiproperty({description",{"_index":434,"title":{},"body":{"classes/Channel.html":{},"classes/PermissionOverwrite.html":{}}}],["isstring()@apiproperty({type",{"_index":874,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isstring()@isoptional()@apiproperty({description",{"_index":440,"title":{},"body":{"classes/Channel.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":985,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{}}}],["isstring()@isoptional()@apipropertyoptional({type",{"_index":2410,"title":{},"body":{"classes/SettingsDto.html":{}}}],["isstring()@matches(/^(((\\d+,)+\\d+|(\\d",{"_index":1123,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["issuer",{"_index":1907,"title":{},"body":{"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["isurl",{"_index":1004,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isurl()@apiproperty({type",{"_index":2295,"title":{},"body":{"classes/RoleResponse.html":{}}}],["isuserunlockedguard",{"_index":858,"title":{"guards/IsUserUnlockedGuard.html":{}},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMessageHandler.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["it.action",{"_index":275,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.adminroleid",{"_index":1643,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.avatarurl",{"_index":1679,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.createdat",{"_index":277,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.displayname",{"_index":1682,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.guild.name",{"_index":1683,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.introchannelid",{"_index":1646,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.invokerid",{"_index":279,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.members.fetch(userid",{"_index":1678,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.modchannelid",{"_index":1647,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.modroleid",{"_index":1642,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.openintrochannelid",{"_index":1645,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.reason",{"_index":281,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.targetid",{"_index":283,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.targettype",{"_index":284,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.unverifiedmemberroleid",{"_index":1641,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.verifiedmemberroleid",{"_index":1640,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.welcomemessageformat",{"_index":1644,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["item",{"_index":3295,"title":{},"body":{"license.html":{}}}],["items",{"_index":923,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["itself",{"_index":3579,"title":{},"body":{"license.html":{}}}],["jest",{"_index":2956,"title":{},"body":{"dependencies.html":{}}}],["joboptions",{"_index":2551,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.crontime",{"_index":2558,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.oncomplete",{"_index":2560,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.ontick",{"_index":2559,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.start",{"_index":2561,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.timezone",{"_index":2562,"title":{},"body":{"injectables/TasksService.html":{}}}],["jobs",{"_index":2514,"title":{},"body":{"modules/TasksModule.html":{}}}],["jobs/tasks",{"_index":2520,"title":{},"body":{"injectables/TasksService.html":{}}}],["john",{"_index":918,"title":{},"body":{"classes/DiscordUser.html":{}}}],["join",{"_index":1467,"title":{},"body":{"injectables/GuildService.html":{},"index.html":{}}}],["join('\\n",{"_index":693,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildSettingsService.html":{},"injectables/TasksService.html":{}}}],["json.stringify",{"_index":2090,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["json.stringify(error.response.data",{"_index":1938,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["jsonarray",{"_index":1264,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["jwt",{"_index":1838,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtauthcontroller",{"_index":1821,"title":{"controllers/JwtAuthController.html":{}},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"coverage.html":{}}}],["jwtauthguard",{"_index":86,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtauthguard.name",{"_index":3930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthmodule",{"_index":106,"title":{"modules/JwtAuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/JwtAuthModule.html":{},"modules.html":{},"overview.html":{}}}],["jwtauthservice",{"_index":1837,"title":{"injectables/JwtAuthService.html":{}},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"coverage.html":{},"overview.html":{}}}],["jwtauthstrategy",{"_index":1863,"title":{"injectables/JwtAuthStrategy.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtconstants.secret",{"_index":1878,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtfromrequest",{"_index":1959,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["jwtmodule",{"_index":1868,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtmodule.register",{"_index":1876,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtservice",{"_index":1886,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["kaffee",{"_index":2449,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["kamil",{"_index":3057,"title":{},"body":{"index.html":{}}}],["kann",{"_index":950,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kategorie",{"_index":2113,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["keep",{"_index":3432,"title":{},"body":{"license.html":{}}}],["kein",{"_index":951,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kernel",{"_index":3325,"title":{},"body":{"license.html":{}}}],["key",{"_index":716,"title":{},"body":{"classes/CommandValidationFilter.html":{},"controllers/GuildController.html":{},"injectables/GuildSettingsService.html":{},"classes/LogEntry.html":{},"license.html":{}}}],["key.endswith('roleid",{"_index":1630,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["keyof",{"_index":1634,"title":{},"body":{"injectables/GuildSettingsService.html":{},"classes/SettingsChanged.html":{}}}],["keys",{"_index":3558,"title":{},"body":{"license.html":{}}}],["kick",{"_index":659,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/LogEntry.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["kicked",{"_index":680,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["kickmembers",{"_index":665,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["kicks",{"_index":2540,"title":{},"body":{"injectables/TasksService.html":{}}}],["kickuser",{"_index":2691,"title":{},"body":{"controllers/UserController.html":{}}}],["kickuser(guildid",{"_index":2701,"title":{},"body":{"controllers/UserController.html":{}}}],["kind",{"_index":3273,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":3146,"title":{},"body":{"license.html":{}}}],["klicke",{"_index":957,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["know",{"_index":3172,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":3731,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":3739,"title":{},"body":{"license.html":{}}}],["konnten",{"_index":685,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["konsul",{"_index":2450,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["koverstionen",{"_index":952,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kuchen",{"_index":2441,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["käsekuchen",{"_index":2437,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["labels",{"_index":1203,"title":{},"body":{"controllers/GuildController.html":{}}}],["labels.push",{"_index":1207,"title":{},"body":{"controllers/GuildController.html":{}}}],["labels.push(key",{"_index":1212,"title":{},"body":{"controllers/GuildController.html":{}}}],["language",{"_index":3308,"title":{},"body":{"license.html":{}}}],["larger",{"_index":3463,"title":{},"body":{"license.html":{}}}],["last",{"_index":441,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{}}}],["lastmessageid",{"_index":418,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["later",{"_index":3801,"title":{},"body":{"license.html":{}}}],["latte",{"_index":2451,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["law",{"_index":3263,"title":{},"body":{"license.html":{}}}],["laws",{"_index":3237,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3700,"title":{},"body":{"license.html":{}}}],["leads",{"_index":3878,"title":{},"body":{"license.html":{}}}],["leavechannelid",{"_index":2402,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["leavemessageformat",{"_index":2403,"title":{},"body":{"classes/SettingsDto.html":{}}}],["legal",{"_index":3182,"title":{},"body":{"license.html":{}}}],["legend",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1377,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["letting",{"_index":3206,"title":{},"body":{"license.html":{}}}],["liability",{"_index":3606,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3260,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3311,"title":{},"body":{"license.html":{}}}],["library",{"_index":3529,"title":{},"body":{"license.html":{}}}],["license",{"_index":3063,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3043,"title":{},"body":{"index.html":{},"license.html":{}}}],["licensee",{"_index":3243,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":3245,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":3153,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":3673,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":3618,"title":{},"body":{"license.html":{}}}],["lift",{"_index":43,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["likewise",{"_index":3666,"title":{},"body":{"license.html":{}}}],["limit",{"_index":230,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"license.html":{}}}],["limitation",{"_index":3825,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3812,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":3605,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1502,"title":{},"body":{"injectables/GuildService.html":{}}}],["line",{"_index":3865,"title":{},"body":{"license.html":{}}}],["link",{"_index":2782,"title":{},"body":{"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["linked",{"_index":3345,"title":{},"body":{"license.html":{}}}],["list",{"_index":2019,"title":{},"body":{"classes/LogEntry.html":{},"injectables/SelfService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["listens",{"_index":1487,"title":{},"body":{"injectables/GuildService.html":{}}}],["literal",{"_index":329,"title":{},"body":{"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{}}}],["litigation",{"_index":3696,"title":{},"body":{"license.html":{}}}],["local",{"_index":2802,"title":{},"body":{"modules/UserModule.html":{},"license.html":{}}}],["lockdown",{"_index":44,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["log",{"_index":220,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"injectables/JwtAuthService.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["log.ts",{"_index":1032,"title":{},"body":{"interfaces/EventToLog.html":{},"coverage.html":{}}}],["log.ts:11",{"_index":1038,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["logchannel.send",{"_index":2576,"title":{},"body":{"injectables/TasksService.html":{}}}],["logentries",{"_index":1968,"title":{},"body":{"classes/LogEntry.html":{}}}],["logentry",{"_index":324,"title":{"classes/LogEntry.html":{}},"body":{"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{}}}],["logentrydto",{"_index":243,"title":{"classes/LogEntryDto.html":{}},"body":{"controllers/AuditLogController.html":{},"classes/LogEntryDto.html":{},"coverage.html":{}}}],["logged",{"_index":2312,"title":{},"body":{"controllers/SelfController.html":{}}}],["logger",{"_index":203,"title":{},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"controllers/RoleController.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["logger('appservice",{"_index":217,"title":{},"body":{"injectables/AppService.html":{}}}],["logger('requestguilduser",{"_index":3923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('requestuser",{"_index":3936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('rolecontroller",{"_index":2273,"title":{},"body":{"controllers/RoleController.html":{},"miscellaneous/variables.html":{}}}],["logger('taskservice",{"_index":2557,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["logger(channelcontroller.name",{"_index":583,"title":{},"body":{"controllers/ChannelController.html":{}}}],["logger(dmmessagehandler.name",{"_index":932,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["logger(guildautodeletechannelservice.name",{"_index":1153,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["logger(guildmemberevents.name",{"_index":1255,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["logger(hasrequiredrank.name",{"_index":1791,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["logger(jwtauthcontroller.name",{"_index":1847,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["logger(jwtauthservice.name",{"_index":1897,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["logger(modrequestflow.name",{"_index":2074,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["logger(usercontroller.name",{"_index":2719,"title":{},"body":{"controllers/UserController.html":{}}}],["logger.error",{"_index":2684,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.error(`${ctx.gethandler().tostring",{"_index":3926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger.log",{"_index":521,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.log(`checking",{"_index":2564,"title":{},"body":{"injectables/TasksService.html":{}}}],["logger.log(`created",{"_index":2281,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`deleted",{"_index":2289,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`found",{"_index":2277,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`settingschanged",{"_index":2397,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["logger.log(`updated",{"_index":2287,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`userbanevent",{"_index":2678,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.log(`userkickevent",{"_index":2681,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logging",{"_index":1042,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["login",{"_index":1825,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["login(@query('code",{"_index":1852,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["login(code",{"_index":1827,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["login(userid",{"_index":1891,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["long",{"_index":3371,"title":{},"body":{"license.html":{}}}],["longer",{"_index":661,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["loss",{"_index":3832,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3835,"title":{},"body":{"license.html":{}}}],["lower",{"_index":1808,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["lowest",{"_index":1810,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["lte",{"_index":349,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["m",{"_index":1466,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.channelid",{"_index":1460,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.createdat",{"_index":1475,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.userid",{"_index":1461,"title":{},"body":{"injectables/GuildService.html":{}}}],["macchiato",{"_index":2452,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["machine",{"_index":3475,"title":{},"body":{"license.html":{}}}],["made",{"_index":3189,"title":{},"body":{"license.html":{}}}],["mail",{"_index":3874,"title":{},"body":{"license.html":{}}}],["maintain",{"_index":3509,"title":{},"body":{"license.html":{}}}],["major",{"_index":3318,"title":{},"body":{"license.html":{}}}],["make",{"_index":1309,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["makes",{"_index":3393,"title":{},"body":{"license.html":{}}}],["making",{"_index":3204,"title":{},"body":{"license.html":{}}}],["manage",{"_index":2801,"title":{},"body":{"modules/UserModule.html":{}}}],["managed",{"_index":1011,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["manages",{"_index":2512,"title":{},"body":{"modules/TasksModule.html":{}}}],["managing",{"_index":2519,"title":{},"body":{"injectables/TasksService.html":{}}}],["manner",{"_index":3715,"title":{},"body":{"license.html":{}}}],["many",{"_index":3195,"title":{},"body":{"license.html":{}}}],["map",{"_index":1477,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["map((it",{"_index":1656,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["map((member",{"_index":691,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["map((row",{"_index":3112,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["map((user",{"_index":2148,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["march",{"_index":3764,"title":{},"body":{"license.html":{}}}],["marked",{"_index":3615,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3625,"title":{},"body":{"license.html":{}}}],["masks",{"_index":3240,"title":{},"body":{"license.html":{}}}],["match",{"_index":2841,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('d",{"_index":2844,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('h",{"_index":2846,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('m",{"_index":2848,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('d",{"_index":2845,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('h",{"_index":2847,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('m",{"_index":2849,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["matches",{"_index":1130,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["matches(/^(((\\d+,)+\\d+|(\\d",{"_index":1131,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["matching",{"_index":80,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":3380,"title":{},"body":{"license.html":{}}}],["materially",{"_index":3580,"title":{},"body":{"license.html":{}}}],["maybe",{"_index":2482,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["meaning",{"_index":1807,"title":{},"body":{"guards/HasRequiredRank.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":3236,"title":{},"body":{"license.html":{}}}],["measure",{"_index":3402,"title":{},"body":{"license.html":{}}}],["measures",{"_index":3414,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3428,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3442,"title":{},"body":{"license.html":{}}}],["meets",{"_index":3296,"title":{},"body":{"license.html":{}}}],["mega",{"_index":3898,"title":{},"body":{"properties.html":{}}}],["member",{"_index":55,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["member.communicationdisableduntiltimestamp",{"_index":2570,"title":{},"body":{"injectables/TasksService.html":{}}}],["member.displayavatarurl",{"_index":2724,"title":{},"body":{"controllers/UserController.html":{}}}],["member.displayname",{"_index":2727,"title":{},"body":{"controllers/UserController.html":{}}}],["member.guild.id",{"_index":66,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{}}}],["member.guild.ownerid",{"_index":1754,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["member.id",{"_index":68,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.kick",{"_index":1520,"title":{},"body":{"injectables/GuildService.html":{}}}],["member.roles.add",{"_index":2669,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.add('1014066383912439809",{"_index":1306,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.add('1121823930085285938",{"_index":2668,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.add(role.id",{"_index":75,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["member.roles.add(verifiedroleid",{"_index":1304,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.cache.foreach((role",{"_index":2660,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1011513775054143632",{"_index":57,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1011563978956226560",{"_index":56,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1070116538083975309",{"_index":1513,"title":{},"body":{"injectables/GuildService.html":{}}}],["member.roles.cache.has('1121823930085285938",{"_index":59,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["member.roles.cache.has('1226585753253843014",{"_index":1299,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.remove",{"_index":1319,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.remove(role.id",{"_index":2667,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.timeout(parseint(duration",{"_index":2749,"title":{},"body":{"controllers/UserController.html":{}}}],["member.ts",{"_index":869,"title":{},"body":{"classes/DiscordGuildMember.html":{},"coverage.html":{}}}],["member.ts:11",{"_index":881,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:15",{"_index":879,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:18",{"_index":880,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:21",{"_index":884,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:24",{"_index":875,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:27",{"_index":877,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:8",{"_index":883,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.user",{"_index":2732,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.bot",{"_index":1280,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["member.user.globalname",{"_index":2728,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.id",{"_index":2725,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.username",{"_index":1279,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["member?.communicationdisableduntil?.tojson",{"_index":2726,"title":{},"body":{"controllers/UserController.html":{}}}],["members",{"_index":660,"title":{},"body":{"classes/CleanWfpMember.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["members.fetch(dbuser.userid.tostring",{"_index":2569,"title":{},"body":{"injectables/TasksService.html":{}}}],["members.fetch(user.id",{"_index":1342,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members.fetch(user.userid",{"_index":1298,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members.foreach(async",{"_index":54,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["members.map((member",{"_index":2722,"title":{},"body":{"controllers/UserController.html":{}}}],["members.push(member",{"_index":1514,"title":{},"body":{"injectables/GuildService.html":{}}}],["members.size",{"_index":2721,"title":{},"body":{"controllers/UserController.html":{}}}],["members/index.ts",{"_index":1225,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{}}}],["members/index.ts:125",{"_index":1253,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:143",{"_index":1240,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:23",{"_index":1232,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:37",{"_index":1243,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:48",{"_index":1236,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:58",{"_index":1246,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:69",{"_index":1249,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["memberstokick",{"_index":1518,"title":{},"body":{"injectables/GuildService.html":{}}}],["membersunfiltered",{"_index":1508,"title":{},"body":{"injectables/GuildService.html":{}}}],["membersunfiltered.foreach(async",{"_index":1510,"title":{},"body":{"injectables/GuildService.html":{}}}],["mentionable",{"_index":972,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["menu",{"_index":1412,"title":{},"body":{"modules/GuildModule.html":{},"license.html":{}}}],["menu/index.ts",{"_index":2052,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{}}}],["menu/index.ts:131",{"_index":2070,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:157",{"_index":2067,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:185",{"_index":2065,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:194",{"_index":2063,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:218",{"_index":2061,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:34",{"_index":2059,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:44",{"_index":2073,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["merchantability",{"_index":3813,"title":{},"body":{"license.html":{}}}],["mere",{"_index":3276,"title":{},"body":{"license.html":{}}}],["merging",{"_index":3684,"title":{},"body":{"license.html":{}}}],["message",{"_index":404,"title":{},"body":{"modules/BotModule.html":{},"classes/Channel.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["message).inguild",{"_index":864,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"miscellaneous/variables.html":{}}}],["message.attachments.map",{"_index":1397,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.attachments.map((attachment",{"_index":1379,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.attachments.size",{"_index":1395,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.author.bot",{"_index":2032,"title":{},"body":{"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{}}}],["message.author.id",{"_index":1371,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["message.channel",{"_index":1387,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.channelid",{"_index":1374,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"miscellaneous/variables.html":{}}}],["message.content",{"_index":1654,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["message.content.length",{"_index":1378,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.fetch",{"_index":2232,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.guildid",{"_index":1375,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["message.id",{"_index":1373,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.member.roles.cache.has",{"_index":865,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["message.message",{"_index":3921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message.message.guildid",{"_index":2236,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.message.inguild",{"_index":2233,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.partial",{"_index":2231,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.react('1194715694948946030",{"_index":1392,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.reactions.cache.map((reaction",{"_index":1382,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.reply",{"_index":943,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts",{"_index":927,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"coverage.html":{}}}],["message/index.ts:10",{"_index":1356,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message/index.ts:14",{"_index":933,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts:17",{"_index":1359,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message/index.ts:18",{"_index":931,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts:53",{"_index":1361,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message_deleted",{"_index":2005,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["messageactionrowcomponentbuilder",{"_index":3075,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["messagecount",{"_index":1463,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["messagecountbucket",{"_index":1753,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["messagecounts",{"_index":1528,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagefromuserguard",{"_index":1363,"title":{"guards/MessageFromUserGuard.html":{}},"body":{"injectables/GuildMessageHandler.html":{},"guards/MessageFromUserGuard.html":{},"coverage.html":{}}}],["messageid",{"_index":1372,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{}}}],["messageisdmguard",{"_index":935,"title":{"guards/MessageIsDmGuard.html":{}},"body":{"injectables/DmMessageHandler.html":{},"guards/MessageIsDmGuard.html":{},"coverage.html":{}}}],["messagemetadata",{"_index":1724,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["messagereaction",{"_index":1238,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["messagereaction).emoji.name",{"_index":3942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagereference",{"_index":2198,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["messages",{"_index":419,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{}}}],["messages.last().createdtimestamp",{"_index":612,"title":{},"body":{"controllers/ChannelController.html":{}}}],["messagesdeleted",{"_index":504,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["messagesperchannellastmonth",{"_index":1191,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperchannellastmonth(@param('guildid",{"_index":1201,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperchannellastmonth(guildid",{"_index":1193,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth",{"_index":1192,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth(@param('guildid",{"_index":1209,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth(guildid",{"_index":1197,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagestats",{"_index":1525,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagestats.reduce",{"_index":1545,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagestats.reduce((acc",{"_index":1530,"title":{},"body":{"injectables/GuildService.html":{}}}],["met",{"_index":3362,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1063,"title":{},"body":{"classes/Explorer.html":{},"injectables/GuildUserService.html":{},"dependencies.html":{}}}],["method",{"_index":1067,"title":{},"body":{"classes/Explorer.html":{}}}],["methods",{"_index":9,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["midnight",{"_index":2539,"title":{},"body":{"injectables/TasksService.html":{}}}],["minutes",{"_index":2534,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{}}}],["miscchannelid",{"_index":3120,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["miscellaneous",{"_index":2971,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misrepresentation",{"_index":3613,"title":{},"body":{"license.html":{}}}],["mit",{"_index":2600,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"index.html":{}}}],["mixin(channelidguardmixin",{"_index":3922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mixin(reactionemote",{"_index":3943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mock",{"_index":2957,"title":{},"body":{"dependencies.html":{}}}],["mod",{"_index":1257,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["modal",{"_index":754,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"guards/IsModalInteractionGuard.html":{},"injectables/ModRequestFlow.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["modal.addcomponents(questioncomponentrow",{"_index":801,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.customid.split",{"_index":809,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.customid.startswith('community",{"_index":808,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.ismodalsubmit",{"_index":807,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.reply",{"_index":831,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modalactionrowcomponentbuilder",{"_index":744,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["modalbuilder",{"_index":745,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["modalfieldstransformpipe",{"_index":750,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modalsubmitinteraction",{"_index":2072,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modannouncementdto",{"_index":2035,"title":{"classes/ModAnnouncementDto.html":{}},"body":{"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"coverage.html":{}}}],["modchannelid",{"_index":2404,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["mode",{"_index":3033,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":3491,"title":{},"body":{"license.html":{}}}],["moderatemembers",{"_index":46,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["moderation",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["moderation/moderation.module",{"_index":1406,"title":{},"body":{"modules/GuildModule.html":{}}}],["moderationmodule",{"_index":130,"title":{"modules/ModerationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/ModerationModule.html":{},"modules.html":{},"overview.html":{}}}],["modification",{"_index":3232,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":3299,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3205,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":3447,"title":{},"body":{"license.html":{}}}],["modify",{"_index":3184,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":3267,"title":{},"body":{"license.html":{}}}],["modrequest",{"_index":2996,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modrequestcategoryselect",{"_index":2080,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["modrequestcategoryselect(guildid",{"_index":2154,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modrequestcategoryselect(suffix",{"_index":2994,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modrequestflow",{"_index":1403,"title":{"injectables/ModRequestFlow.html":{}},"body":{"modules/GuildModule.html":{},"injectables/ModRequestFlow.html":{},"coverage.html":{},"overview.html":{}}}],["modrequestmenu",{"_index":2153,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/variables.html":{}}}],["modrequestmenuid",{"_index":2081,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modrequestmodal",{"_index":2086,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modrequestmodal.addcomponents",{"_index":2129,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modroleid",{"_index":2405,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["mods",{"_index":782,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["module",{"_index":92,"title":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":94,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mokka",{"_index":2453,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["month",{"_index":1195,"title":{},"body":{"controllers/GuildController.html":{}}}],["more",{"_index":998,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildService.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"modules/UserModule.html":{},"index.html":{},"license.html":{}}}],["moreover",{"_index":3655,"title":{},"body":{"license.html":{}}}],["ms",{"_index":2212,"title":{},"body":{"classes/PingCommand.html":{}}}],["msg",{"_index":2759,"title":{},"body":{"controllers/UserController.html":{}}}],["msg.author.id",{"_index":2760,"title":{},"body":{"controllers/UserController.html":{}}}],["msg.createdtimestamp",{"_index":614,"title":{},"body":{"controllers/ChannelController.html":{}}}],["msg.deletable",{"_index":613,"title":{},"body":{"controllers/ChannelController.html":{}}}],["msgid",{"_index":2770,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["mumvoice",{"_index":2191,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["mumvoicecommand",{"_index":386,"title":{"classes/MumVoiceCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/MumVoiceCommand.html":{},"coverage.html":{}}}],["muten",{"_index":2615,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["myśliwiec",{"_index":3058,"title":{},"body":{"index.html":{}}}],["möchtest",{"_index":2602,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/UserToUser.html":{}}}],["n\\n${quotedmessage",{"_index":1661,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["nachricht",{"_index":2048,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":3001,"title":{},"body":{"miscellaneous/functions.html":{}}}],["names",{"_index":689,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["nature",{"_index":3460,"title":{},"body":{"license.html":{}}}],["nchannel",{"_index":1170,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setname(channel.name",{"_index":1176,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setparent(channel.parentid",{"_index":1175,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setposition(channel.position",{"_index":1174,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["necessary",{"_index":3821,"title":{},"body":{"license.html":{}}}],["need",{"_index":3353,"title":{},"body":{"license.html":{}}}],["needed",{"_index":2352,"title":{},"body":{"injectables/SelfService.html":{},"license.html":{}}}],["needhelpbutton",{"_index":938,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["needhelpbuttonid",{"_index":2082,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":2337,"title":{},"body":{"injectables/SelfService.html":{},"properties.html":{}}}],["nest",{"_index":3023,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":3062,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1043,"title":{},"body":{"interfaces/EventToLog.html":{},"guards/HasRequiredRank.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":1844,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{}}}],["nestjs/config",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":36,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"injectables/DmMessageHandler.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{}}}],["nestjs/core/dist/decorators/option/choice/choice",{"_index":2877,"title":{},"body":{"classes/UserToUser.html":{}}}],["nestjs/event",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1869,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1859,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2948,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["network",{"_index":3152,"title":{},"body":{"license.html":{}}}],["never",{"_index":2223,"title":{},"body":{"injectables/PrismaService.html":{}}}],["new",{"_index":216,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newmember",{"_index":1251,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newmember.guild.id",{"_index":1335,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newmember.user.username",{"_index":1333,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newrank",{"_index":1331,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["next",{"_index":3512,"title":{},"body":{"license.html":{}}}],["nicht",{"_index":683,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["node.js",{"_index":3016,"title":{},"body":{"index.html":{}}}],["non",{"_index":3300,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":3498,"title":{},"body":{"license.html":{}}}],["normal",{"_index":3316,"title":{},"body":{"license.html":{}}}],["normally",{"_index":3534,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":1102,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/UserController.html":{}}}],["notfoundexception('guild",{"_index":2757,"title":{},"body":{"controllers/UserController.html":{}}}],["nothing",{"_index":3667,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3288,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3282,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":3656,"title":{},"body":{"license.html":{}}}],["notify",{"_index":3652,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":3600,"title":{},"body":{"license.html":{}}}],["november",{"_index":3127,"title":{},"body":{"license.html":{}}}],["now",{"_index":904,"title":{},"body":{"classes/DiscordUser.html":{}}}],["nsfw",{"_index":420,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["null",{"_index":342,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":231,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["numbered",{"_index":3800,"title":{},"body":{"license.html":{}}}],["nummessages",{"_index":2776,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["nummessages.tostring",{"_index":2786,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["numreactions",{"_index":2778,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["numreactions.tostring",{"_index":2787,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["nur",{"_index":947,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["nutzer:in",{"_index":830,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{}}}],["oauth",{"_index":1936,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["oauth2",{"_index":2963,"title":{},"body":{"dependencies.html":{}}}],["oautherrordata",{"_index":1899,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["object",{"_index":607,"title":{},"body":{"controllers/ChannelController.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/LogEntry.html":{},"classes/RoleResponse.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.keys(colors",{"_index":1017,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["object.keys(data).foreach((key",{"_index":1211,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.keys(data).foreach(async",{"_index":1206,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.keys(exception.constraints).map((key",{"_index":715,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["object.keys(settings).foreach(async",{"_index":1629,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["object.values(data",{"_index":1205,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.values(messagecounts[channelid",{"_index":1540,"title":{},"body":{"injectables/GuildService.html":{}}}],["obligate",{"_index":3777,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":3516,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":3404,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":3497,"title":{},"body":{"license.html":{}}}],["occur",{"_index":1994,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["occurred",{"_index":1972,"title":{},"body":{"classes/LogEntry.html":{}}}],["occurring",{"_index":3664,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":3565,"title":{},"body":{"license.html":{}}}],["offer",{"_index":3180,"title":{},"body":{"license.html":{}}}],["offered",{"_index":3523,"title":{},"body":{"license.html":{}}}],["offering",{"_index":3501,"title":{},"body":{"license.html":{}}}],["official",{"_index":3302,"title":{},"body":{"license.html":{}}}],["offset",{"_index":232,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["old",{"_index":1975,"title":{},"body":{"classes/LogEntry.html":{}}}],["old/new",{"_index":1977,"title":{},"body":{"classes/LogEntry.html":{}}}],["older",{"_index":3218,"title":{},"body":{"license.html":{}}}],["oldmember",{"_index":1254,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["oldrank",{"_index":1329,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["omit",{"_index":1120,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntryDto.html":{},"classes/RestrictedChannelDto.html":{},"classes/SettingsDto.html":{}}}],["omit(['guildid",{"_index":1638,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["on('guildmemberadd",{"_index":1235,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('guildmemberremove",{"_index":1245,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('guildmemberupdate",{"_index":1252,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('interactioncreate",{"_index":728,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["on('interactioncreate')@useguards(ismodalinteractionguard",{"_index":737,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["on('messagecreate",{"_index":941,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{}}}],["on('messagecreate')@useguards(messagefromuserguard",{"_index":1358,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["on('messagecreate')@useguards(messageisdmguard",{"_index":930,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["on('messagereactionadd",{"_index":1285,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('messagereactionadd')@useguards(undefined",{"_index":1239,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('ready",{"_index":1242,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["onadminroleidchanged",{"_index":1701,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["onadminroleidchanged(payload",{"_index":1730,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["onbuttoncloseticket",{"_index":2055,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onbuttoncloseticket(interaction",{"_index":2064,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onbuttonneedhelpbutton",{"_index":2056,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onbuttonneedhelpbutton(interaction",{"_index":2066,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onbuttonpress",{"_index":722,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["onbuttonpress(interaction",{"_index":726,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["once",{"_index":1498,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["once('ready",{"_index":1485,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["oncleanwfpmembers",{"_index":650,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncleanwfpmembers(@interactionevent",{"_index":667,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncleanwfpmembers(interaction",{"_index":653,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncommunityquestion",{"_index":723,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["oncommunityquestion(interaction",{"_index":730,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["oncomplete",{"_index":2553,"title":{},"body":{"injectables/TasksService.html":{}}}],["one",{"_index":1986,"title":{},"body":{"classes/LogEntry.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["onevent",{"_index":210,"title":{},"body":{"injectables/AppService.html":{},"injectables/GuildUserService.html":{}}}],["onevent('settings.role.*.changed",{"_index":1731,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["oninitguild",{"_index":3064,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninitguild(@interactionevent",{"_index":3079,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninitguild(interaction",{"_index":3068,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninteraction",{"_index":724,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/initGuildCommand.html":{}}}],["oninteraction(interaction",{"_index":3070,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninteraction(undefined",{"_index":734,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["onmenuselect",{"_index":2057,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmenuselect(interaction",{"_index":2068,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmessage",{"_index":1353,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/MumVoiceCommand.html":{}}}],["onmessage(interaction",{"_index":2185,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["onmessage(message",{"_index":1357,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["onmodalsubmit",{"_index":2058,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmodalsubmit(interaction",{"_index":2071,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmoduleinit",{"_index":2216,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onplaycommand",{"_index":2204,"title":{},"body":{"classes/PingCommand.html":{}}}],["onready",{"_index":1228,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["onroleadd",{"_index":11,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onroleadd(@interactionevent",{"_index":52,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onroleadd(interaction",{"_index":24,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onshowinfo",{"_index":2379,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["onshowinfo(interaction",{"_index":2381,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["ontick",{"_index":1165,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["onticketsystemsetupcommand",{"_index":2589,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["onticketsystemsetupcommand(interaction",{"_index":2591,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["ontimeoutcommand",{"_index":2606,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["ontimeoutcommand(interaction",{"_index":2608,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["onunverifybyrole",{"_index":2650,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["onunverifybyrole(@ia",{"_index":2656,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["onunverifybyrole(baseinteraction",{"_index":2652,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["open",{"_index":3044,"title":{},"body":{"index.html":{},"classes/initGuildCommand.html":{}}}],["openintrochannelid",{"_index":2406,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["operate",{"_index":3838,"title":{},"body":{"license.html":{}}}],["operated",{"_index":3506,"title":{},"body":{"license.html":{}}}],["operating",{"_index":3327,"title":{},"body":{"license.html":{}}}],["operation",{"_index":3423,"title":{},"body":{"license.html":{}}}],["operator",{"_index":3213,"title":{},"body":{"license.html":{}}}],["opportunity",{"_index":3784,"title":{},"body":{"license.html":{}}}],["option",{"_index":3596,"title":{},"body":{"license.html":{}}}],["optional",{"_index":23,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["options",{"_index":2155,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/UserToUser.html":{},"license.html":{}}}],["order",{"_index":1476,"title":{},"body":{"injectables/GuildService.html":{},"license.html":{}}}],["orderby",{"_index":356,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{}}}],["organization",{"_index":3680,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":3248,"title":{},"body":{"license.html":{}}}],["origin",{"_index":3614,"title":{},"body":{"license.html":{}}}],["original",{"_index":3616,"title":{},"body":{"license.html":{}}}],["others",{"_index":3374,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":3372,"title":{},"body":{"license.html":{}}}],["out",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"license.html":{},"overview.html":{}}}],["outcome",{"_index":670,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['memberstokick",{"_index":690,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['memberstokick'].length.tostring",{"_index":688,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['unkickablemembers",{"_index":696,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["outcome['unkickablemembers'].length.tostring",{"_index":695,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["outed",{"_index":2714,"title":{},"body":{"controllers/UserController.html":{}}}],["output",{"_index":3366,"title":{},"body":{"license.html":{}}}],["outside",{"_index":3386,"title":{},"body":{"license.html":{}}}],["overview",{"_index":3892,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":486,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["overwrites",{"_index":460,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["owned",{"_index":3711,"title":{},"body":{"license.html":{}}}],["ownedranks",{"_index":1802,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["ownedranks.includes(requiredrank",{"_index":1804,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["owner",{"_index":1755,"title":{},"body":{"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["owner'].includes(user.rank",{"_index":2237,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["package",{"_index":2940,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packaged",{"_index":3453,"title":{},"body":{"license.html":{}}}],["packaging",{"_index":3317,"title":{},"body":{"license.html":{}}}],["pagination",{"_index":328,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["pagination.limit",{"_index":362,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["pagination.offset",{"_index":359,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["paper",{"_index":3873,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":3643,"title":{},"body":{"license.html":{}}}],["paragraphs",{"_index":3723,"title":{},"body":{"license.html":{}}}],["param",{"_index":235,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"interfaces/EventToLog.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"guards/HasRequiredRank.html":{},"classes/ModAnnouncementDto.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["param('channelid",{"_index":592,"title":{},"body":{"controllers/ChannelController.html":{}}}],["param('duration",{"_index":2747,"title":{},"body":{"controllers/UserController.html":{}}}],["param('guildid",{"_index":263,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["param('roleid",{"_index":2284,"title":{},"body":{"controllers/RoleController.html":{}}}],["param('userid",{"_index":2734,"title":{},"body":{"controllers/UserController.html":{}}}],["param({description",{"_index":835,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["param({name",{"_index":2041,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["parameter",{"_index":3927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["paramtype",{"_index":843,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["paramtype.string",{"_index":844,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["paramtype.user",{"_index":2830,"title":{},"body":{"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["parent",{"_index":454,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{}}}],["parentid",{"_index":421,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["parseint(_days",{"_index":2850,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(_hours",{"_index":2852,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(_minutes",{"_index":2853,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(questionid",{"_index":779,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["parseintpipe",{"_index":236,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["part",{"_index":3250,"title":{},"body":{"license.html":{}}}],["partial",{"_index":1602,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["partials",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.channel",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.guildmember",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.guildscheduledevent",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.message",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.reaction",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.threadmember",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.user",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["particular",{"_index":3306,"title":{},"body":{"license.html":{}}}],["parties",{"_index":3275,"title":{},"body":{"license.html":{}}}],["parts",{"_index":3352,"title":{},"body":{"license.html":{}}}],["party",{"_index":3507,"title":{},"body":{"license.html":{}}}],["party's",{"_index":3686,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1957,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":1870,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["passportstrategy",{"_index":1958,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1949,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["password",{"_index":3587,"title":{},"body":{"license.html":{}}}],["patent",{"_index":3642,"title":{},"body":{"license.html":{}}}],["patents",{"_index":3706,"title":{},"body":{"license.html":{}}}],["path",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":1733,"title":{},"body":{"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["payload.sub",{"_index":1965,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["payment",{"_index":3757,"title":{},"body":{"license.html":{}}}],["peer",{"_index":3519,"title":{},"body":{"license.html":{}}}],["peers",{"_index":3522,"title":{},"body":{"license.html":{}}}],["per",{"_index":464,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{}}}],["perform",{"_index":1784,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["performance",{"_index":3817,"title":{},"body":{"license.html":{}}}],["performed",{"_index":1969,"title":{},"body":{"classes/LogEntry.html":{}}}],["performing",{"_index":3339,"title":{},"body":{"license.html":{}}}],["periodically",{"_index":2516,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["permanently",{"_index":3651,"title":{},"body":{"license.html":{}}}],["permission",{"_index":459,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"license.html":{}}}],["permissionflagsbits",{"_index":1005,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/ModRequestFlow.html":{},"classes/RoleResponse.html":{}}}],["permissionflagsbits.addreactions",{"_index":2105,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionflagsbits.readmessagehistory",{"_index":2104,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionflagsbits.sendmessages",{"_index":2103,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionflagsbits.viewchannel",{"_index":2100,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionoverwrite",{"_index":457,"title":{"classes/PermissionOverwrite.html":{}},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["permissionoverwrites",{"_index":422,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{}}}],["permissionoverwrites.create(user_id",{"_index":1558,"title":{},"body":{"injectables/GuildService.html":{}}}],["permissionoverwrites.delete(user_id",{"_index":1561,"title":{},"body":{"injectables/GuildService.html":{}}}],["permissionresolvable",{"_index":992,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["permissions",{"_index":973,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["permissive",{"_index":3435,"title":{},"body":{"license.html":{}}}],["permit",{"_index":3470,"title":{},"body":{"license.html":{}}}],["permits",{"_index":3203,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":3136,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":3570,"title":{},"body":{"license.html":{}}}],["person",{"_index":2871,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["personal",{"_index":3532,"title":{},"body":{"license.html":{}}}],["pertinent",{"_index":3775,"title":{},"body":{"license.html":{}}}],["physical",{"_index":3479,"title":{},"body":{"license.html":{}}}],["physically",{"_index":3495,"title":{},"body":{"license.html":{}}}],["pick",{"_index":3007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pieces",{"_index":3170,"title":{},"body":{"license.html":{}}}],["ping",{"_index":2207,"title":{},"body":{"classes/PingCommand.html":{}}}],["pingcommand",{"_index":380,"title":{"classes/PingCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/PingCommand.html":{},"coverage.html":{}}}],["pipe",{"_index":1933,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["place",{"_index":3503,"title":{},"body":{"license.html":{}}}],["plain",{"_index":3006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintoinstance",{"_index":246,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["plaintoinstance(cls",{"_index":3005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintoinstance(discordguildmember",{"_index":2723,"title":{},"body":{"controllers/UserController.html":{}}}],["plaintoinstance(guildautodeletechanneldto",{"_index":1112,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["plaintoinstance(logentrydto",{"_index":274,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["plaintoinstance(selfdto",{"_index":1684,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["plaintoinstance(settingsdto",{"_index":1581,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["please",{"_index":780,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["plus",{"_index":3690,"title":{},"body":{"license.html":{}}}],["pointer",{"_index":3866,"title":{},"body":{"license.html":{}}}],["portion",{"_index":3526,"title":{},"body":{"license.html":{}}}],["position",{"_index":469,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["possesses",{"_index":3492,"title":{},"body":{"license.html":{}}}],["possession",{"_index":3450,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":3841,"title":{},"body":{"license.html":{}}}],["possible",{"_index":1993,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["possibleanswers",{"_index":2434,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["post",{"_index":561,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["post('/')@apioperation({summary",{"_index":2257,"title":{},"body":{"controllers/RoleController.html":{}}}],["post(':channelid/clean",{"_index":605,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/clean')@apioperation({summary",{"_index":537,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/slowmode",{"_index":598,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/slowmode')@apioperation({summary",{"_index":558,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':userid/ban",{"_index":2733,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/ban')@apioperation({summary",{"_index":2695,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/kick",{"_index":2741,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/kick')@apioperation({summary",{"_index":2702,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/purge",{"_index":2754,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/purge')@apioperation({summary",{"_index":2705,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/timeout/:duration",{"_index":2746,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/timeout/:duration')@apioperation({summary",{"_index":2713,"title":{},"body":{"controllers/UserController.html":{}}}],["post('refresh",{"_index":1834,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["power",{"_index":3416,"title":{},"body":{"license.html":{}}}],["practical",{"_index":3154,"title":{},"body":{"license.html":{}}}],["practice",{"_index":3728,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":3144,"title":{},"body":{"license.html":{}}}],["precise",{"_index":3227,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":3687,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":3298,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":530,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"classes/SettingsDto.html":{},"controllers/UserController.html":{}}}],["prefixed",{"_index":3932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["present",{"_index":3792,"title":{},"body":{"license.html":{}}}],["presents",{"_index":3293,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":3610,"title":{},"body":{"license.html":{}}}],["pretty",{"_index":1035,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["prevented",{"_index":3563,"title":{},"body":{"license.html":{}}}],["previous",{"_index":3689,"title":{},"body":{"license.html":{}}}],["price",{"_index":3166,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":3758,"title":{},"body":{"license.html":{}}}],["print",{"_index":1036,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["prior",{"_index":3653,"title":{},"body":{"license.html":{}}}],["prisma",{"_index":41,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/SelfService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["prisma.jsonarray",{"_index":69,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["prisma.jsonarray).foreach",{"_index":2666,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["prisma.service",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/SelfService.html":{}}}],["prisma/client",{"_index":42,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/PrismaService.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":2214,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaserver",{"_index":3067,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["prismaservice",{"_index":16,"title":{"injectables/PrismaService.html":{}},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"injectables/PrismaService.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"overview.html":{}}}],["private",{"_index":50,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["problems",{"_index":3796,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":3557,"title":{},"body":{"license.html":{}}}],["procuring",{"_index":3748,"title":{},"body":{"license.html":{}}}],["produce",{"_index":634,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"license.html":{}}}],["product",{"_index":3480,"title":{},"body":{"license.html":{}}}],["production",{"_index":3035,"title":{},"body":{"index.html":{}}}],["products",{"_index":3759,"title":{},"body":{"license.html":{}}}],["program",{"_index":3162,"title":{},"body":{"license.html":{}}}],["program's",{"_index":3427,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":3884,"title":{},"body":{"license.html":{}}}],["programming",{"_index":3307,"title":{},"body":{"license.html":{}}}],["programs",{"_index":3171,"title":{},"body":{"license.html":{}}}],["progressive",{"_index":3015,"title":{},"body":{"index.html":{}}}],["prohibit",{"_index":3384,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":3412,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":3753,"title":{},"body":{"license.html":{}}}],["project",{"_index":3045,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":3294,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":3285,"title":{},"body":{"license.html":{}}}],["promise",{"_index":234,"title":{},"body":{"controllers/AuditLogController.html":{},"interfaces/BotEvent.html":{},"controllers/ChannelController.html":{},"classes/CommandValidationFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/MumVoiceCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SpecialCommand.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1316,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["promise.all",{"_index":1173,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildUserController.html":{},"injectables/SelfService.html":{},"classes/initGuildCommand.html":{}}}],["promoted",{"_index":1328,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["propagate",{"_index":3257,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":3670,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":3268,"title":{},"body":{"license.html":{}}}],["properties",{"_index":202,"title":{"properties.html":{}},"body":{"injectables/AppService.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":3533,"title":{},"body":{"license.html":{}}}],["protect",{"_index":3175,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":3395,"title":{},"body":{"license.html":{}}}],["protection",{"_index":3439,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":3585,"title":{},"body":{"license.html":{}}}],["prove",{"_index":3818,"title":{},"body":{"license.html":{}}}],["provide",{"_index":3214,"title":{},"body":{"license.html":{}}}],["provided",{"_index":1649,"title":{},"body":{"injectables/GuildSettingsService.html":{},"controllers/JwtAuthController.html":{},"license.html":{}}}],["provider",{"_index":1054,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.name",{"_index":1066,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.prototype.handler",{"_index":1074,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.prototype.hasownproperty(bot_event_handler_name",{"_index":1072,"title":{},"body":{"classes/Explorer.html":{}}}],["provider[bot_event_handler_name",{"_index":1069,"title":{},"body":{"classes/Explorer.html":{}}}],["providers",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["provides",{"_index":3876,"title":{},"body":{"license.html":{}}}],["providing",{"_index":3785,"title":{},"body":{"license.html":{}}}],["provision",{"_index":3601,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":3648,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":3804,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":3807,"title":{},"body":{"license.html":{}}}],["public",{"_index":1047,"title":{},"body":{"classes/Explorer.html":{},"license.html":{}}}],["publicity",{"_index":3617,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":3216,"title":{},"body":{"license.html":{}}}],["publish",{"_index":3431,"title":{},"body":{"license.html":{}}}],["published",{"_index":3219,"title":{},"body":{"license.html":{}}}],["purge",{"_index":2706,"title":{},"body":{"controllers/UserController.html":{}}}],["purged",{"_index":2687,"title":{},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["purgeuserfromguild",{"_index":2692,"title":{},"body":{"controllers/UserController.html":{}}}],["purgeuserfromguild(guildid",{"_index":2704,"title":{},"body":{"controllers/UserController.html":{}}}],["purpose",{"_index":3336,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":3537,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":3744,"title":{},"body":{"license.html":{}}}],["put",{"_index":562,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{}}}],["put(':channelid",{"_index":594,"title":{},"body":{"controllers/ChannelController.html":{}}}],["put(':channelid')@apioperation({summary",{"_index":543,"title":{},"body":{"controllers/ChannelController.html":{}}}],["put(':roleid",{"_index":2283,"title":{},"body":{"controllers/RoleController.html":{}}}],["put(':roleid')@apioperation({summary",{"_index":2269,"title":{},"body":{"controllers/RoleController.html":{}}}],["put()@httpcode(httpstatuscode.accepted",{"_index":1572,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["putsettings",{"_index":1567,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["putsettings(guildid",{"_index":1570,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["qualify",{"_index":3660,"title":{},"body":{"license.html":{}}}],["quality",{"_index":3816,"title":{},"body":{"license.html":{}}}],["query",{"_index":237,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/JwtAuthController.html":{}}}],["query('limit",{"_index":265,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["query('offset",{"_index":266,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["query(validationpipe",{"_index":264,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["question",{"_index":731,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{}}}],["question.answers",{"_index":812,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command",{"_index":394,"title":{},"body":{"modules/BotModule.html":{}}}],["question.command.ts",{"_index":721,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["question.command.ts:120",{"_index":738,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:41",{"_index":725,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:48",{"_index":733,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:73",{"_index":729,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.description",{"_index":763,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.dto",{"_index":749,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.dto.ts",{"_index":834,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:11",{"_index":842,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["question.dto.ts:20",{"_index":840,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["question.form.dto",{"_index":757,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.form.dto.ts",{"_index":846,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["question.form.dto.ts:6",{"_index":849,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["question.question",{"_index":774,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questioncomponentrow",{"_index":798,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionfield",{"_index":785,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionid",{"_index":761,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionid.id",{"_index":766,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["quote",{"_index":1628,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["quote(it",{"_index":1657,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["quotedmessage",{"_index":1653,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["rambda",{"_index":2965,"title":{},"body":{"dependencies.html":{}}}],["rambda/immutable",{"_index":1624,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["rank",{"_index":252,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"classes/SelfDto-1.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["rank(s",{"_index":1778,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.decorator",{"_index":256,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rank.decorator.ts",{"_index":2926,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank.guard",{"_index":260,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rank.guard.ts",{"_index":1774,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank.guard.ts:21",{"_index":1781,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.guard.ts:33",{"_index":1782,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.new",{"_index":1282,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ranks",{"_index":1805,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["rate",{"_index":463,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{}}}],["ratelimitperuser",{"_index":423,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["raw",{"_index":468,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["rawposition",{"_index":424,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["react",{"_index":3899,"title":{},"body":{"properties.html":{}}}],["reactedmemberismodorhigherguard",{"_index":1248,"title":{"guards/ReactedMemberIsModOrHigherGuard.html":{}},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["reaction",{"_index":1241,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"miscellaneous/variables.html":{}}}],["reaction.count",{"_index":1385,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["reaction.emoji.name",{"_index":1305,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.emoji.tostring",{"_index":1384,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["reaction.fetch",{"_index":1288,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.message",{"_index":1325,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.message.author.id",{"_index":1291,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.guild.channels.fetch",{"_index":1321,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.guildid",{"_index":1292,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.id",{"_index":1296,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.partial",{"_index":1287,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.remove",{"_index":1326,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction_added",{"_index":2006,"title":{},"body":{"classes/LogEntry.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/variables.html":{}}}],["reaction_removed",{"_index":2007,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["reactionchannelidguard",{"_index":1259,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reactionchannelidguard('1121822614374060175",{"_index":1286,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reactionchannelidguard('1226574989147508746",{"_index":1336,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reactionemote",{"_index":3940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reactionemoteguard",{"_index":1262,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reactions",{"_index":1726,"title":{},"body":{"injectables/GuildUserService.html":{},"classes/UserInfoUiCommand.html":{}}}],["read",{"_index":3053,"title":{},"body":{"index.html":{}}}],["readable",{"_index":3476,"title":{},"body":{"license.html":{}}}],["readily",{"_index":3733,"title":{},"body":{"license.html":{}}}],["reading",{"_index":3589,"title":{},"body":{"license.html":{}}}],["readmessagehistory",{"_index":1560,"title":{},"body":{"injectables/GuildService.html":{}}}],["readonly",{"_index":222,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["ready",{"_index":1488,"title":{},"body":{"injectables/GuildService.html":{}}}],["reason",{"_index":280,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["reasonable",{"_index":3493,"title":{},"body":{"license.html":{}}}],["receipt",{"_index":3658,"title":{},"body":{"license.html":{}}}],["receive",{"_index":3169,"title":{},"body":{"license.html":{}}}],["received",{"_index":3456,"title":{},"body":{"license.html":{}}}],["receives",{"_index":3675,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":3750,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":3569,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":3741,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":3246,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":3303,"title":{},"body":{"license.html":{}}}],["record",{"_index":1529,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["recreated",{"_index":1272,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["redirect_uri",{"_index":1924,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["redistribute",{"_index":3859,"title":{},"body":{"license.html":{}}}],["referring",{"_index":3165,"title":{},"body":{"license.html":{}}}],["refers",{"_index":3235,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":2967,"title":{},"body":{"dependencies.html":{}}}],["reflect.getmetadata(bot_event_key",{"_index":1071,"title":{},"body":{"classes/Explorer.html":{}}}],["reflector",{"_index":1780,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["refrain",{"_index":3779,"title":{},"body":{"license.html":{}}}],["refresh",{"_index":1872,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["refresh_token",{"_index":1833,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshjwtguard",{"_index":1840,"title":{"injectables/RefreshJwtGuard.html":{}},"body":{"controllers/JwtAuthController.html":{},"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["refreshjwtstrategy",{"_index":1864,"title":{"injectables/RefreshJwtStrategy.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/RefreshJwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtoken",{"_index":1826,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["refreshtoken(@req",{"_index":1850,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshtoken(req",{"_index":1831,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshtoken(userid",{"_index":1893,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["regard",{"_index":3595,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":3452,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":3354,"title":{},"body":{"license.html":{}}}],["registercommandoptions",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["rein",{"_index":2133,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["reinstated",{"_index":3647,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":3387,"title":{},"body":{"license.html":{}}}],["relative",{"_index":999,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["released",{"_index":3224,"title":{},"body":{"license.html":{}}}],["releasing",{"_index":3209,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":3445,"title":{},"body":{"license.html":{}}}],["relicensing",{"_index":3225,"title":{},"body":{"license.html":{}}}],["relying",{"_index":3732,"title":{},"body":{"license.html":{}}}],["remain",{"_index":3515,"title":{},"body":{"license.html":{}}}],["remains",{"_index":3163,"title":{},"body":{"license.html":{}}}],["remote",{"_index":3781,"title":{},"body":{"license.html":{}}}],["remotely",{"_index":3783,"title":{},"body":{"license.html":{}}}],["removal",{"_index":3598,"title":{},"body":{"license.html":{}}}],["remove",{"_index":3597,"title":{},"body":{"license.html":{}}}],["removecommandsbefore",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["removemember",{"_index":1229,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["removemember(member",{"_index":1244,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["removing",{"_index":1312,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["rendered",{"_index":3833,"title":{},"body":{"license.html":{}}}],["repair",{"_index":3823,"title":{},"body":{"license.html":{}}}],["replace",{"_index":2499,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('x",{"_index":2497,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('y",{"_index":2495,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('{message",{"_index":1660,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["replace('{user",{"_index":1658,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["reply",{"_index":2197,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["reply(optional",{"_index":2043,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["replyto",{"_index":2042,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["replytomessage",{"_index":2038,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["report",{"_index":676,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["repository",{"_index":3026,"title":{},"body":{"index.html":{}}}],["represent",{"_index":3555,"title":{},"body":{"license.html":{}}}],["req",{"_index":1796,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"controllers/UserController.html":{}}}],["req.params.guildid",{"_index":1801,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["req.user.userid",{"_index":1799,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["request",{"_index":1411,"title":{},"body":{"modules/GuildModule.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"controllers/SelfController.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.path",{"_index":3931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":3925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.guildid",{"_index":2731,"title":{},"body":{"controllers/UserController.html":{}}}],["requestguilduser",{"_index":2924,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["requestuser",{"_index":1669,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":3347,"title":{},"body":{"license.html":{}}}],["required",{"_index":259,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["required_rank_key",{"_index":1789,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredpoints",{"_index":2247,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["requiredrank",{"_index":254,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredrank(rank.member",{"_index":261,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["requiredrank(rank.mod",{"_index":582,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["requirement",{"_index":3446,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":3518,"title":{},"body":{"license.html":{}}}],["requires",{"_index":3212,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":3252,"title":{},"body":{"license.html":{}}}],["reset",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolved",{"_index":3543,"title":{},"body":{"license.html":{}}}],["respect",{"_index":3420,"title":{},"body":{"license.html":{}}}],["response",{"_index":630,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["response.data.access_token",{"_index":1945,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["response.sendstatus(httpstatus.bad_request",{"_index":646,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["response.sendstatus(httpstatus.forbidden",{"_index":1221,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["response.sendstatus(httpstatus.internal_server_error",{"_index":2376,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["response.statusmessage",{"_index":644,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["responsible",{"_index":2309,"title":{},"body":{"controllers/SelfController.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["restricted",{"_index":389,"title":{},"body":{"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["restrictedchanneldto",{"_index":2245,"title":{"classes/RestrictedChannelDto.html":{}},"body":{"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["restrictedchannels",{"_index":1428,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/RestrictedChannelDto.html":{}}}],["restrictedchannelservice",{"_index":1444,"title":{},"body":{"injectables/GuildService.html":{}}}],["restricting",{"_index":3413,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":3634,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":3633,"title":{},"body":{"license.html":{}}}],["result",{"_index":3200,"title":{},"body":{"license.html":{}}}],["result.data.map((it",{"_index":273,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["result.total",{"_index":271,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["resulting",{"_index":3198,"title":{},"body":{"license.html":{}}}],["results",{"_index":79,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":3573,"title":{},"body":{"license.html":{}}}],["retrieving",{"_index":1025,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["return",{"_index":58,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["reviewing",{"_index":3845,"title":{},"body":{"license.html":{}}}],["revised",{"_index":3790,"title":{},"body":{"license.html":{}}}],["right",{"_index":3567,"title":{},"body":{"license.html":{}}}],["rights",{"_index":3176,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3815,"title":{},"body":{"license.html":{}}}],["role",{"_index":489,"title":{},"body":{"classes/Channel.html":{},"classes/CleanWfpMember.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/UnverifyByRoleCommand.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["role.command.ts",{"_index":7,"title":{},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["role.command.ts:17",{"_index":18,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["role.command.ts:23",{"_index":28,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["role.conmand.ts",{"_index":2649,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["role.conmand.ts:16",{"_index":2651,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.conmand.ts:22",{"_index":2653,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.delete",{"_index":2290,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.edit(roledata",{"_index":2286,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.id",{"_index":2662,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.name",{"_index":2282,"title":{},"body":{"controllers/RoleController.html":{}}}],["role/role.controller",{"_index":2179,"title":{},"body":{"modules/ModerationModule.html":{}}}],["role_created",{"_index":2008,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["role_deleted",{"_index":2009,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["role_updated",{"_index":2010,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["rolecontroller",{"_index":2177,"title":{"controllers/RoleController.html":{}},"body":{"modules/ModerationModule.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["roledata",{"_index":2256,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleid",{"_index":2261,"title":{},"body":{"controllers/RoleController.html":{},"classes/initGuildCommand.html":{}}}],["roleresponse",{"_index":1006,"title":{"classes/RoleResponse.html":{}},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{}}}],["roleresponseschema",{"_index":1024,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolerows",{"_index":3111,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["roles",{"_index":61,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["roles.cache.has",{"_index":1766,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["roles.cache.has((await",{"_index":1768,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["roles.fetch('1121823930085285938",{"_index":1509,"title":{},"body":{"injectables/GuildService.html":{}}}],["roles.foreach",{"_index":1348,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["roles.foreach((role",{"_index":71,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["roles.push",{"_index":2661,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["roleselectmenubuilder",{"_index":3076,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["roleselectmenuinteraction",{"_index":3072,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["rolesresponseschema",{"_index":1026,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rom",{"_index":3576,"title":{},"body":{"license.html":{}}}],["route",{"_index":3935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routermodule",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule.register",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/controller(http",{"_index":1775,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["row",{"_index":770,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/initGuildCommand.html":{}}}],["royalty",{"_index":3694,"title":{},"body":{"license.html":{}}}],["rules",{"_index":3584,"title":{},"body":{"license.html":{}}}],["run",{"_index":2515,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"index.html":{},"license.html":{}}}],["running",{"_index":3215,"title":{},"body":{"license.html":{}}}],["runs",{"_index":1267,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["rxjs",{"_index":1902,"title":{},"body":{"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["rüber",{"_index":2459,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["safest",{"_index":3861,"title":{},"body":{"license.html":{}}}],["sale",{"_index":3704,"title":{},"body":{"license.html":{}}}],["same",{"_index":3356,"title":{},"body":{"license.html":{}}}],["satisfy",{"_index":3517,"title":{},"body":{"license.html":{}}}],["saying",{"_index":3513,"title":{},"body":{"license.html":{}}}],["scalable",{"_index":3020,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["schema",{"_index":606,"title":{},"body":{"controllers/ChannelController.html":{},"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/UserController.html":{}}}],["schenkt",{"_index":2460,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["schiebt",{"_index":2456,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["schließen",{"_index":2118,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["school",{"_index":3885,"title":{},"body":{"license.html":{}}}],["scope",{"_index":1926,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["scripts",{"_index":3333,"title":{},"body":{"license.html":{}}}],["secondarily",{"_index":3259,"title":{},"body":{"license.html":{}}}],["secondary",{"_index":3185,"title":{},"body":{"license.html":{}}}],["seconds",{"_index":494,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["secret",{"_index":1877,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["secretorkey",{"_index":1962,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["section",{"_index":3391,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3474,"title":{},"body":{"license.html":{}}}],["see",{"_index":1785,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/SelfController.html":{},"modules/UserModule.html":{},"license.html":{}}}],["select",{"_index":355,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"classes/initGuildCommand.html":{}}}],["selectguild",{"_index":2168,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectguildmenu",{"_index":2083,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectguildmenu(guilds",{"_index":2161,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["selection",{"_index":2164,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selection.values[0",{"_index":2172,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectioninteraction",{"_index":2163,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectioninteraction.awaitmessagecomponent",{"_index":2165,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectmenu",{"_index":2995,"title":{},"body":{"miscellaneous/functions.html":{}}}],["self.controller",{"_index":2804,"title":{},"body":{"modules/UserModule.html":{}}}],["self.controller.ts",{"_index":2803,"title":{},"body":{"modules/UserModule.html":{}}}],["self.dto",{"_index":2317,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{}}}],["self.service",{"_index":2319,"title":{},"body":{"controllers/SelfController.html":{},"modules/UserModule.html":{}}}],["self.service.ts",{"_index":2316,"title":{},"body":{"controllers/SelfController.html":{}}}],["selfcontroller",{"_index":2305,"title":{"controllers/SelfController.html":{}},"body":{"controllers/SelfController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["selfdto",{"_index":1083,"title":{"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}},"body":{"classes/Guild.html":{},"controllers/GuildUserController.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"coverage.html":{}}}],["selfservice",{"_index":1865,"title":{"injectables/SelfService.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["sell",{"_index":3720,"title":{},"body":{"license.html":{}}}],["selling",{"_index":3703,"title":{},"body":{"license.html":{}}}],["semiconductor",{"_index":3239,"title":{},"body":{"license.html":{}}}],["send",{"_index":819,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["senddirectmessagetouserexception",{"_index":2366,"title":{"classes/SendDirectMessageToUserException.html":{}},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["senddirectmessagetouserexception(guildid",{"_index":2752,"title":{},"body":{"controllers/UserController.html":{}}}],["senddirectmessagetouserexceptionfilter",{"_index":2375,"title":{"classes/SendDirectMessageToUserExceptionFilter.html":{}},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"coverage.html":{}}}],["sends",{"_index":2192,"title":{},"body":{"classes/MumVoiceCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["sent",{"_index":2639,"title":{},"body":{"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["separable",{"_index":3525,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3458,"title":{},"body":{"license.html":{}}}],["separately",{"_index":3455,"title":{},"body":{"license.html":{}}}],["server",{"_index":664,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"index.html":{},"license.html":{}}}],["servers",{"_index":3199,"title":{},"body":{"license.html":{}}}],["serves",{"_index":3321,"title":{},"body":{"license.html":{}}}],["service",{"_index":2336,"title":{},"body":{"injectables/SelfService.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["servicing",{"_index":3822,"title":{},"body":{"license.html":{}}}],["set",{"_index":402,"title":{},"body":{"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["set/update",{"_index":3078,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setadminroleid",{"_index":3101,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setauthor",{"_index":820,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["setcolor(colors.blue",{"_index":677,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["setcolor(colors.red",{"_index":714,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["setcustomid",{"_index":2127,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setcustomid('adminroleid",{"_index":3102,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('answer",{"_index":793,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid('introchannelid",{"_index":3090,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('miscchannelid",{"_index":3093,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('modchannelid",{"_index":3096,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('modrequestmessage",{"_index":2130,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setcustomid('modroleid",{"_index":3099,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('openintrochannelid",{"_index":3082,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('question",{"_index":786,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid('unverifiedmemberroleid",{"_index":3109,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('verifiedmemberroleid",{"_index":3105,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid(`closeticket",{"_index":2115,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setcustomid(`community",{"_index":765,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setdescription",{"_index":678,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{}}}],["setdescription(`for",{"_index":709,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["setdescription(`user",{"_index":2780,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["setfirstmessageuicommand",{"_index":401,"title":{"classes/SetFirstMessageUICommand.html":{}},"body":{"modules/BotModule.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{}}}],["setintrochannelid",{"_index":3089,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setlabel('antwort",{"_index":767,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setlabel('frage(nicht",{"_index":787,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setlabel('mod",{"_index":2134,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setlabel('ticket",{"_index":2117,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setmaxvalues(1",{"_index":3084,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmetadata(bot_event_key",{"_index":3919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(required_rank_key",{"_index":3948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setminvalues(0",{"_index":3085,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmiscchannelid",{"_index":3092,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmodchannelid",{"_index":3095,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmodroleid",{"_index":3098,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setopenintrochannelid",{"_index":3081,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setplaceholder",{"_index":3086,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setplaceholder('antwort",{"_index":795,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setplaceholder('schreibe",{"_index":2131,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setrequired(false",{"_index":791,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setrequired(true",{"_index":794,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["sets",{"_index":1490,"title":{},"body":{"injectables/GuildService.html":{},"miscellaneous/variables.html":{}}}],["setslowmode",{"_index":535,"title":{},"body":{"controllers/ChannelController.html":{}}}],["setslowmode(guildid",{"_index":557,"title":{},"body":{"controllers/ChannelController.html":{}}}],["setstyle(buttonstyle.primary",{"_index":769,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["setstyle(textinputstyle.paragraph",{"_index":789,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["settimeout(resolve",{"_index":1317,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["settings",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["settings.controller",{"_index":1588,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["settings.controller.ts",{"_index":1565,"title":{},"body":{"controllers/GuildSettingsController.html":{},"coverage.html":{}}}],["settings.controller.ts:26",{"_index":1569,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["settings.controller.ts:33",{"_index":1573,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["settings.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{}}}],["settings.module.ts",{"_index":1587,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["settings.role.${key}.changed",{"_index":1631,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service",{"_index":383,"title":{},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{}}}],["settings.service.ts",{"_index":1589,"title":{},"body":{"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["settings.service.ts:11",{"_index":1600,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:16",{"_index":1603,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:31",{"_index":1614,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:41",{"_index":1618,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:45",{"_index":1616,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:49",{"_index":1611,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:53",{"_index":1605,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:57",{"_index":1620,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:61",{"_index":1613,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:65",{"_index":1607,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:68",{"_index":1609,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:71",{"_index":1622,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings/dto/restricted",{"_index":2246,"title":{},"body":{"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["settings/dto/settings.dto.ts",{"_index":2399,"title":{},"body":{"classes/SettingsDto.html":{},"coverage.html":{}}}],["settings/dto/settings.dto.ts:14",{"_index":2421,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:19",{"_index":2417,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:24",{"_index":2412,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:29",{"_index":2414,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:34",{"_index":2413,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:39",{"_index":2419,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:44",{"_index":2420,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:49",{"_index":2416,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:54",{"_index":2411,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:59",{"_index":2415,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:9",{"_index":2418,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/events/settings",{"_index":1739,"title":{},"body":{"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"coverage.html":{}}}],["settings/guild",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["settings[key",{"_index":1633,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settingschanged",{"_index":1625,"title":{"classes/SettingsChanged.html":{}},"body":{"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"coverage.html":{}}}],["settingschanged(guildid",{"_index":1632,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settingsdto",{"_index":1571,"title":{"classes/SettingsDto.html":{}},"body":{"controllers/GuildSettingsController.html":{},"classes/SettingsDto.html":{},"coverage.html":{}}}],["settingsservice",{"_index":860,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["settitle('community",{"_index":783,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["settitle('mod",{"_index":2110,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["settitle('user",{"_index":2779,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["settitle('validation",{"_index":712,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["settitle('wfp",{"_index":675,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["settitle(`timeout",{"_index":2636,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["setunverifiedroleid",{"_index":3108,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setup",{"_index":2594,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/initGuildCommand.html":{}}}],["setupclientfactory",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["setvalue(question.question",{"_index":790,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setverifiedmemberroleid",{"_index":3104,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["shall",{"_index":3398,"title":{},"body":{"license.html":{}}}],["share",{"_index":3157,"title":{},"body":{"license.html":{}}}],["shared",{"_index":3343,"title":{},"body":{"license.html":{}}}],["show",{"_index":2772,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["shows",{"_index":3077,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["side",{"_index":3021,"title":{},"body":{"index.html":{}}}],["sign",{"_index":3886,"title":{},"body":{"license.html":{}}}],["significant",{"_index":3556,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":1879,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["similar",{"_index":3221,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":3774,"title":{},"body":{"license.html":{}}}],["single",{"_index":3746,"title":{},"body":{"license.html":{}}}],["size",{"_index":1680,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["skip",{"_index":358,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["slashcommandpipe",{"_index":751,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["sleep",{"_index":2761,"title":{},"body":{"controllers/UserController.html":{}}}],["slice(0",{"_index":2095,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["slowmode",{"_index":466,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["slowmodedisabled",{"_index":522,"title":{"classes/SlowmodeDisabled.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["slowmodedisabled(guildid",{"_index":603,"title":{},"body":{"controllers/ChannelController.html":{}}}],["slowmodeenabled",{"_index":515,"title":{"classes/SlowmodeEnabled.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["slowmodeenabled(guildid",{"_index":602,"title":{},"body":{"controllers/ChannelController.html":{}}}],["software",{"_index":3132,"title":{},"body":{"license.html":{}}}],["sold",{"_index":3538,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3375,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3389,"title":{},"body":{"license.html":{}}}],["soll",{"_index":2050,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["solutions",{"_index":3880,"title":{},"body":{"license.html":{}}}],["something",{"_index":2873,"title":{},"body":{"classes/UserToUser.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["spare",{"_index":3489,"title":{},"body":{"license.html":{}}}],["speak",{"_index":3164,"title":{},"body":{"license.html":{}}}],["special",{"_index":2478,"title":{},"body":{"classes/SpecialCommand.html":{},"license.html":{},"properties.html":{}}}],["specialcommand",{"_index":409,"title":{"classes/SpecialCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/SpecialCommand.html":{},"coverage.html":{}}}],["specific",{"_index":1777,"title":{},"body":{"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["specifically",{"_index":3148,"title":{},"body":{"license.html":{}}}],["specified",{"_index":3305,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":3799,"title":{},"body":{"license.html":{}}}],["specify",{"_index":3803,"title":{},"body":{"license.html":{}}}],["spirit",{"_index":3791,"title":{},"body":{"license.html":{}}}],["split('\\n",{"_index":1655,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["sponsors",{"_index":3048,"title":{},"body":{"index.html":{}}}],["sql",{"_index":1459,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/.../bot",{"_index":3907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../channel",{"_index":2974,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":2976,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../has",{"_index":3910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../log.entry.dto.ts",{"_index":3906,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2973,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../menu",{"_index":2977,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../message",{"_index":3908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../parameter",{"_index":2975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plain",{"_index":2978,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../reaction",{"_index":3914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request",{"_index":3912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../requires",{"_index":3915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.controller.ts",{"_index":3913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.ts",{"_index":3916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tasks.service.ts",{"_index":3911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":3909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.ts",{"_index":3917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":201,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:13",{"_index":211,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":207,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auditlog/auditlog.controller.ts",{"_index":225,"title":{},"body":{"controllers/AuditLogController.html":{},"coverage.html":{}}}],["src/auditlog/auditlog.controller.ts:30",{"_index":233,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["src/auditlog/auditlog.events.ts",{"_index":2890,"title":{},"body":{"coverage.html":{}}}],["src/auditlog/auditlog.module",{"_index":2182,"title":{},"body":{"modules/ModerationModule.html":{}}}],["src/auditlog/auditlog.module.ts",{"_index":314,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["src/auditlog/auditlog.service.ts",{"_index":318,"title":{},"body":{"injectables/AuditLogService.html":{},"coverage.html":{}}}],["src/auditlog/auditlog.service.ts:10",{"_index":325,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/auditlog.service.ts:25",{"_index":330,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/auditlog.service.ts:7",{"_index":322,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/dto/audit",{"_index":285,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"coverage.html":{}}}],["src/auditlog/dto/log",{"_index":2022,"title":{},"body":{"classes/LogEntryDto.html":{},"coverage.html":{}}}],["src/auth/jwt/guards/jwt",{"_index":253,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/jwt/guards/refresh",{"_index":2238,"title":{},"body":{"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["src/auth/jwt/jwt",{"_index":1822,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt/refresh",{"_index":2239,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{},"coverage.html":{}}}],["src/bot/bot.module.ts",{"_index":379,"title":{},"body":{"modules/BotModule.html":{}}}],["src/bot/commands/add",{"_index":6,"title":{},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["src/bot/commands/clean",{"_index":648,"title":{},"body":{"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["src/bot/commands/community",{"_index":720,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["src/bot/commands/init",{"_index":2895,"title":{},"body":{"coverage.html":{},"classes/initGuildCommand.html":{}}}],["src/bot/commands/mod",{"_index":2183,"title":{},"body":{"classes/MumVoiceCommand.html":{},"coverage.html":{}}}],["src/bot/commands/ping.command.ts",{"_index":2203,"title":{},"body":{"classes/PingCommand.html":{},"coverage.html":{}}}],["src/bot/commands/ping.command.ts:10",{"_index":2205,"title":{},"body":{"classes/PingCommand.html":{}}}],["src/bot/commands/ping.command.ts:16",{"_index":2206,"title":{},"body":{"classes/PingCommand.html":{}}}],["src/bot/commands/special.command.ts",{"_index":2431,"title":{},"body":{"classes/SpecialCommand.html":{},"coverage.html":{}}}],["src/bot/commands/special.command.ts:16",{"_index":2454,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:27",{"_index":2465,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:33",{"_index":2442,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:41",{"_index":2468,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:50",{"_index":2472,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/ticket",{"_index":2587,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["src/bot/commands/timeout.command.ts",{"_index":2605,"title":{},"body":{"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["src/bot/commands/timeout.command.ts:38",{"_index":2607,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["src/bot/commands/timeout.command.ts:46",{"_index":2611,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["src/bot/commands/unverify",{"_index":2648,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["src/bot/commands/user",{"_index":2377,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["src/bot/decorators/bot",{"_index":2898,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/dto/commmunity",{"_index":833,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["src/bot/dto/community",{"_index":845,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["src/bot/dto/mod",{"_index":2036,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"coverage.html":{}}}],["src/bot/dto/user",{"_index":2813,"title":{},"body":{"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/explorers/event.explorer.ts",{"_index":1045,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{}}}],["src/bot/explorers/event.explorer.ts:15",{"_index":1056,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:34",{"_index":1053,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:38",{"_index":1058,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:9",{"_index":1051,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/filters/command",{"_index":700,"title":{},"body":{"classes/CommandValidationFilter.html":{},"coverage.html":{}}}],["src/bot/guards/is",{"_index":1812,"title":{},"body":{"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["src/bot/guards/member",{"_index":1256,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["src/bot/guards/message",{"_index":936,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/guards/reaction",{"_index":1260,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/guards/user",{"_index":852,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMessageHandler.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["src/bot/interfaces/bot",{"_index":366,"title":{},"body":{"interfaces/BotEvent.html":{},"coverage.html":{}}}],["src/guild/events/guild",{"_index":1224,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{}}}],["src/guild/events/interaction",{"_index":2051,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{}}}],["src/guild/events/message",{"_index":925,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"coverage.html":{}}}],["src/guild/guild",{"_index":382,"title":{},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RestrictedChannelDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["src/guild/guild.controller.ts",{"_index":1190,"title":{},"body":{"controllers/GuildController.html":{},"coverage.html":{}}}],["src/guild/guild.controller.ts:16",{"_index":1196,"title":{},"body":{"controllers/GuildController.html":{}}}],["src/guild/guild.controller.ts:33",{"_index":1199,"title":{},"body":{"controllers/GuildController.html":{}}}],["src/guild/guild.module.ts",{"_index":1404,"title":{},"body":{"modules/GuildModule.html":{}}}],["src/guild/guild.service",{"_index":408,"title":{},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"injectables/GuildMemberEvents.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["src/guild/guild.service.ts",{"_index":1435,"title":{},"body":{"injectables/GuildService.html":{},"coverage.html":{}}}],["src/guild/guild.service.ts:107",{"_index":1453,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:165",{"_index":1481,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:17",{"_index":1497,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:198",{"_index":1495,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:218",{"_index":1448,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:229",{"_index":1451,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:242",{"_index":1486,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:42",{"_index":1484,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:9",{"_index":1445,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/moderation/channel/channel.controller.ts",{"_index":529,"title":{},"body":{"controllers/ChannelController.html":{},"coverage.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:133",{"_index":540,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:55",{"_index":556,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:72",{"_index":552,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:85",{"_index":545,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:99",{"_index":559,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/dto/channel.ts",{"_index":415,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["src/guild/moderation/dto/channel.ts:100",{"_index":449,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:108",{"_index":471,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:116",{"_index":456,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:125",{"_index":474,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:134",{"_index":443,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:143",{"_index":467,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:151",{"_index":432,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:162",{"_index":1179,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:171",{"_index":1187,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:180",{"_index":1185,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:189",{"_index":1180,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:198",{"_index":1188,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:207",{"_index":1183,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:21",{"_index":2202,"title":{},"body":{"classes/PermissionOverwrite.html":{}}}],["src/guild/moderation/dto/channel.ts:215",{"_index":1184,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:27",{"_index":475,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:35",{"_index":437,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:44",{"_index":461,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:55",{"_index":447,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:66",{"_index":473,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:76",{"_index":453,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:84",{"_index":433,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:92",{"_index":439,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/guild",{"_index":868,"title":{},"body":{"classes/DiscordGuildMember.html":{},"coverage.html":{}}}],["src/guild/moderation/dto/role.ts",{"_index":969,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/dto/role.ts:106",{"_index":2299,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:114",{"_index":2303,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:122",{"_index":2292,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:133",{"_index":991,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:143",{"_index":979,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:151",{"_index":1002,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:160",{"_index":982,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:170",{"_index":1001,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:181",{"_index":995,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:190",{"_index":990,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:203",{"_index":989,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:212",{"_index":1003,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:26",{"_index":2293,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:34",{"_index":2296,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:42",{"_index":2304,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:50",{"_index":2297,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:58",{"_index":2300,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:66",{"_index":2291,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:74",{"_index":2294,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:82",{"_index":2302,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:90",{"_index":2301,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:98",{"_index":2298,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/user.ts",{"_index":887,"title":{},"body":{"classes/DiscordUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/dto/user.ts:11",{"_index":916,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:19",{"_index":920,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:28",{"_index":908,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:35",{"_index":899,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:42",{"_index":910,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:49",{"_index":901,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:57",{"_index":902,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:65",{"_index":917,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:73",{"_index":911,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:81",{"_index":903,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:89",{"_index":897,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:97",{"_index":914,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/events/channel.event.ts",{"_index":500,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["src/guild/moderation/events/channel.event.ts:22",{"_index":2430,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:30",{"_index":2424,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:31",{"_index":2423,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:32",{"_index":2422,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:40",{"_index":2425,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:48",{"_index":510,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:49",{"_index":509,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:5",{"_index":2429,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:50",{"_index":511,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:51",{"_index":508,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:52",{"_index":507,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:6",{"_index":2427,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:68",{"_index":513,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:7",{"_index":2428,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:8",{"_index":2426,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/user.events",{"_index":2556,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["src/guild/moderation/events/user.events.ts",{"_index":2671,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["src/guild/moderation/events/user.events.ts:100",{"_index":2808,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:108",{"_index":2811,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:109",{"_index":2810,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:110",{"_index":2809,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:118",{"_index":2812,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:15",{"_index":2676,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:21",{"_index":2794,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:22",{"_index":2793,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:23",{"_index":2792,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:31",{"_index":2795,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:37",{"_index":2860,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:38",{"_index":2858,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:39",{"_index":2859,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:40",{"_index":2857,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:5",{"_index":2675,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:54",{"_index":2861,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:6",{"_index":2674,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:62",{"_index":2866,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:63",{"_index":2864,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:64",{"_index":2865,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:65",{"_index":2863,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:66",{"_index":2862,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:7",{"_index":2673,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:82",{"_index":2867,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:90",{"_index":2807,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:91",{"_index":2806,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:92",{"_index":2805,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/moderation.module.ts",{"_index":2176,"title":{},"body":{"modules/ModerationModule.html":{}}}],["src/guild/moderation/role/role.controller.ts",{"_index":2250,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/role/role.controller.ts:119",{"_index":2264,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:58",{"_index":2267,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:75",{"_index":2259,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:96",{"_index":2271,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/user/user.controller.ts",{"_index":2688,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/guild/moderation/user/user.controller.ts:103",{"_index":2696,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:122",{"_index":2703,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:141",{"_index":2715,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:180",{"_index":2711,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:58",{"_index":2700,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:86",{"_index":2698,"title":{},"body":{"controllers/UserController.html":{}}}],["src/main.ts",{"_index":2913,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma.service",{"_index":40,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/SetFirstMessageUICommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/initGuildCommand.html":{}}}],["src/prisma.service.ts",{"_index":2213,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:10",{"_index":2219,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:6",{"_index":2220,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/tasks/tasks.module.ts",{"_index":2510,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service",{"_index":1141,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["src/tasks/tasks.service.ts",{"_index":2518,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/tasks.service.ts:128",{"_index":2537,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:173",{"_index":2543,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:27",{"_index":2527,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:41",{"_index":2546,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:60",{"_index":2529,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:80",{"_index":2533,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/user/self.controller.ts",{"_index":2306,"title":{},"body":{"controllers/SelfController.html":{},"coverage.html":{}}}],["src/user/self.controller.ts:21",{"_index":2313,"title":{},"body":{"controllers/SelfController.html":{}}}],["src/user/self.dto.ts",{"_index":1075,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"coverage.html":{}}}],["src/user/self.dto.ts:11",{"_index":2327,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:12",{"_index":2324,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:13",{"_index":2326,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:14",{"_index":2325,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:5",{"_index":1079,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.dto.ts:6",{"_index":1081,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.dto.ts:7",{"_index":1080,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.service",{"_index":1875,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["src/user/self.service.ts",{"_index":2335,"title":{},"body":{"injectables/SelfService.html":{},"coverage.html":{}}}],["src/user/self.service.ts:13",{"_index":2341,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/self.service.ts:25",{"_index":2349,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/self.service.ts:48",{"_index":2343,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/user.module.ts",{"_index":2799,"title":{},"body":{"modules/UserModule.html":{}}}],["src/util/decorators/parameter",{"_index":2920,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/decorators/request",{"_index":1670,"title":{},"body":{"controllers/GuildUserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/decorators/requires",{"_index":255,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/dto/log.entry.dto",{"_index":331,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/util/dto/log.entry.dto.ts",{"_index":1966,"title":{},"body":{"classes/LogEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/util/dto/log.entry.dto.ts:106",{"_index":1978,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:61",{"_index":1979,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:64",{"_index":1981,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:67",{"_index":1970,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:74",{"_index":1984,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:77",{"_index":1973,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:91",{"_index":1989,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:97",{"_index":1991,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/exception/channel",{"_index":576,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["src/util/exception/guild",{"_index":1214,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"coverage.html":{}}}],["src/util/exception/send",{"_index":2367,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/util/functions/channel",{"_index":572,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/functions/get",{"_index":1367,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/functions/menu",{"_index":939,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/util/functions/plain",{"_index":2935,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/guards/has",{"_index":258,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/interfaces/event",{"_index":514,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["standalone",{"_index":3901,"title":{},"body":{"properties.html":{}}}],["standard",{"_index":3301,"title":{},"body":{"license.html":{}}}],["standards",{"_index":3304,"title":{},"body":{"license.html":{}}}],["start",{"_index":3031,"title":{},"body":{"index.html":{},"license.html":{}}}],["start:dev",{"_index":3034,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":3036,"title":{},"body":{"index.html":{}}}],["started",{"_index":3014,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":3025,"title":{},"body":{"index.html":{}}}],["state",{"_index":3863,"title":{},"body":{"license.html":{}}}],["stated",{"_index":3361,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3636,"title":{},"body":{"license.html":{}}}],["statements",{"_index":2886,"title":{},"body":{"coverage.html":{}}}],["stating",{"_index":3434,"title":{},"body":{"license.html":{}}}],["status",{"_index":585,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"license.html":{}}}],["stay",{"_index":3054,"title":{},"body":{"index.html":{}}}],["step",{"_index":2834,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["steps",{"_index":3178,"title":{},"body":{"license.html":{}}}],["still",{"_index":2535,"title":{},"body":{"injectables/TasksService.html":{}}}],["stop",{"_index":2986,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stopcb",{"_index":2980,"title":{},"body":{"miscellaneous/functions.html":{}}}],["storage",{"_index":3465,"title":{},"body":{"license.html":{}}}],["store",{"_index":3946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":1956,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["streuselkuchen",{"_index":2440,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["string",{"_index":73,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringselectmenubuilder",{"_index":2078,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["stringselectmenuinteraction",{"_index":2069,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["sub",{"_index":1903,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["subdividing",{"_index":3683,"title":{},"body":{"license.html":{}}}],["subject",{"_index":3676,"title":{},"body":{"license.html":{}}}],["sublicenses",{"_index":3716,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":3390,"title":{},"body":{"license.html":{}}}],["subprograms",{"_index":3346,"title":{},"body":{"license.html":{}}}],["subquery",{"_index":1473,"title":{},"body":{"injectables/GuildService.html":{}}}],["subquery.channelid",{"_index":1474,"title":{},"body":{"injectables/GuildService.html":{}}}],["subsection",{"_index":3499,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":3551,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":3681,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":550,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["such",{"_index":2552,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["sue",{"_index":3730,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":3560,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":2998,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sum",{"_index":1542,"title":{},"body":{"injectables/GuildService.html":{}}}],["summary",{"_index":584,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":1216,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["super(`channel",{"_index":632,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["supplement",{"_index":3590,"title":{},"body":{"license.html":{}}}],["support",{"_index":3049,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["supports",{"_index":3508,"title":{},"body":{"license.html":{}}}],["sure",{"_index":1310,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["surrender",{"_index":3769,"title":{},"body":{"license.html":{}}}],["survive",{"_index":3635,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":3836,"title":{},"body":{"license.html":{}}}],["svg",{"_index":3890,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2492,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{}}}],["switchtohttp",{"_index":1797,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":893,"title":{},"body":{"classes/DiscordUser.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["system.command",{"_index":413,"title":{},"body":{"modules/BotModule.html":{}}}],["system.command.ts",{"_index":2588,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["system.command.ts:21",{"_index":2590,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["system.command.ts:28",{"_index":2592,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["t",{"_index":3011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":2939,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2938,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":1013,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["take",{"_index":361,"title":{},"body":{"injectables/AuditLogService.html":{},"license.html":{}}}],["takes",{"_index":2346,"title":{},"body":{"injectables/SelfService.html":{}}}],["tangible",{"_index":3531,"title":{},"body":{"license.html":{}}}],["target",{"_index":1985,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/functions.html":{}}}],["targetid",{"_index":282,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{}}}],["targets",{"_index":2020,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["targettype",{"_index":250,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["targettypes",{"_index":306,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targettypes)[number",{"_index":2021,"title":{},"body":{"classes/LogEntry.html":{}}}],["targettypes})@isoptional()@isstring()@isin(targettypes",{"_index":298,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["tasks",{"_index":2511,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["tasks.service",{"_index":2517,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["tasksmodule",{"_index":107,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":1138,"title":{"injectables/TasksService.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["technological",{"_index":3401,"title":{},"body":{"license.html":{}}}],["telling",{"_index":2310,"title":{},"body":{"controllers/SelfController.html":{}}}],["tells",{"_index":3289,"title":{},"body":{"license.html":{}}}],["template",{"_index":1648,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["templateanswer",{"_index":2436,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["templateanswer(category",{"_index":2469,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["templatemessage",{"_index":1599,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["templatemessage(message",{"_index":1621,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["term",{"_index":3359,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":3641,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":3659,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":3650,"title":{},"body":{"license.html":{}}}],["termination",{"_index":3638,"title":{},"body":{"license.html":{}}}],["terms",{"_index":3228,"title":{},"body":{"license.html":{}}}],["test",{"_index":3039,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":3042,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":3041,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3038,"title":{},"body":{"index.html":{}}}],["text",{"_index":577,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["textinputbuilder",{"_index":746,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["textinputmodaldata",{"_index":847,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["textinputstyle",{"_index":747,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["thanks",{"_index":3047,"title":{},"body":{"index.html":{}}}],["then((guildusers",{"_index":2363,"title":{},"body":{"injectables/SelfService.html":{}}}],["then((isavailable",{"_index":1552,"title":{},"body":{"injectables/GuildService.html":{}}}],["then((it",{"_index":1677,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["then((result",{"_index":269,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["then(async",{"_index":2664,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["therefore",{"_index":2624,"title":{},"body":{"classes/TimeOutCommand.html":{},"license.html":{}}}],["things",{"_index":3173,"title":{},"body":{"license.html":{}}}],["third",{"_index":3426,"title":{},"body":{"license.html":{}}}],["thirtydaysago",{"_index":1523,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["thirtydaysago.setdate(thirtydaysago.getdate",{"_index":1524,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["this.$connect",{"_index":2221,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":2222,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._addmembertochanneloverwrite",{"_index":1556,"title":{},"body":{"injectables/GuildService.html":{}}}],["this._fetchguilds(userid",{"_index":2355,"title":{},"body":{"injectables/SelfService.html":{}}}],["this._getguildidfromselectmenu(interaction",{"_index":2151,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this._getmessage(firstmessageid",{"_index":2775,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this._ismemberadmin(member.id",{"_index":1756,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._ismembermod(member.id",{"_index":1757,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._ismemberverified(member.id",{"_index":1758,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._removememberfromchanneloverwrite",{"_index":1554,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.addmember(member.id",{"_index":1761,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.addmembers(guild.id",{"_index":1740,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.addmembers(payload.guildid",{"_index":1764,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.auditlogservice",{"_index":267,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["this.authservice.getuserfromcode(code",{"_index":1855,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.authservice.login(await",{"_index":1854,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.authservice.refreshtoken(req.user",{"_index":1851,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.before",{"_index":525,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.boteventdecorator(provider",{"_index":1064,"title":{},"body":{"classes/Explorer.html":{}}}],["this.cakes.length",{"_index":2504,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.cakes[math.ceil(math.random",{"_index":2503,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.channelid",{"_index":518,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.client.channels.fetch(channel_id",{"_index":1557,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.client.guilds",{"_index":1675,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["this.client.guilds.cache",{"_index":1340,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["this.client.guilds.cache.foreach(async",{"_index":1274,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["this.client.guilds.fetch",{"_index":1273,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["this.client.guilds.fetch(baseinteraction.guildid).then((guild",{"_index":2657,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["this.client.guilds.fetch(eventargs[0].guildid",{"_index":817,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.client.guilds.fetch(guild_id)).members.fetch(user_id",{"_index":1765,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.client.guilds.fetch(guildid",{"_index":586,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["this.client.guilds.fetch(guildid)).channels.fetch(key",{"_index":1208,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.client.guilds.fetch(guildid).then(async",{"_index":2788,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this.client.guilds.fetch(reaction.message.guildid",{"_index":1297,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.client.guilds.fetch(request.user.guildid",{"_index":2729,"title":{},"body":{"controllers/UserController.html":{}}}],["this.client.guilds.fetch(ticket.guildid",{"_index":2580,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.client.on(metadata",{"_index":1070,"title":{},"body":{"classes/Explorer.html":{}}}],["this.client.user.avatarurl",{"_index":823,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["this.client.user.username",{"_index":821,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["this.client.ws.ping",{"_index":2211,"title":{},"body":{"classes/PingCommand.html":{}}}],["this.coffees.length",{"_index":2501,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.coffees[math.ceil(math.random",{"_index":2500,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.configservice.get('discord_callback_url",{"_index":1925,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('discord_oauth_client_id",{"_index":1919,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('discord_oauth_secret",{"_index":1921,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":1906,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_issuer",{"_index":1908,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_refresh_expiration",{"_index":1911,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":1912,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.database.attachment.createmany",{"_index":1743,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.autodeletechannels.findmany",{"_index":1155,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.autodeletechannels.upsert",{"_index":1157,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.guild.findmany",{"_index":1159,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.guild.upsert",{"_index":1501,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.database.guilduser.delete",{"_index":1748,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.findmany",{"_index":1747,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.findunique",{"_index":1338,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["this.database.guilduser.update",{"_index":1752,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.upsert",{"_index":1741,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.lockdownrolebackup",{"_index":2663,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["this.database.lockdownrolebackup.delete",{"_index":78,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{}}}],["this.database.lockdownrolebackup.findunique",{"_index":63,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{}}}],["this.database.messagemetadata.create",{"_index":1742,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.count",{"_index":1751,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.create",{"_index":1745,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.groupby",{"_index":1526,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.database.reaction.createmany",{"_index":1744,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.restrictedchannels.findmany",{"_index":1432,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.restrictedchannels.findunique",{"_index":1430,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.restrictedchannels.upsert",{"_index":1431,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.settings.findunique",{"_index":1636,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.database.settings.update",{"_index":1635,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.database.user.delete",{"_index":1750,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.user.upsert",{"_index":1762,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.discord.guilds.fetch(guilduser.guildid",{"_index":2365,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.discord.users.fetch(userid",{"_index":2354,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.duration",{"_index":2682,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.enabled",{"_index":519,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.error",{"_index":2683,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.error.message",{"_index":2685,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.eventemitter.emit",{"_index":2620,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["this.eventemitter.emitasync",{"_index":600,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/UserController.html":{}}}],["this.eventtype",{"_index":2396,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["this.externalcontextcreator.create",{"_index":1068,"title":{},"body":{"classes/Explorer.html":{}}}],["this.getrank(member",{"_index":1760,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.getsettings(guildid).then((it",{"_index":1639,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.getwelcomemessageformat(message.guildid",{"_index":1650,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.guildautodeletechannelservice.get(guildid",{"_index":1111,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildautodeletechannelservice.get(guildid).then",{"_index":1113,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildautodeletechannelservice.upsert",{"_index":1117,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildid",{"_index":517,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.guildservice.averagemessagesperchannellastmonth(guildid",{"_index":1202,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.guildservice.averagemessagesperdaylastmonth(guildid",{"_index":1210,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.guildservice.cleanwfpmembers",{"_index":671,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["this.guildservice.updatechannelpermissions(user",{"_index":2567,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.guildservice.upsertguild(guild.id",{"_index":1275,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.addmember(member.id",{"_index":1281,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.addmembers(guild.id",{"_index":1277,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.deleteone(member.id",{"_index":1284,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.findall",{"_index":2146,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.guilduserservice.getguilduser",{"_index":1290,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.getrank(newmember",{"_index":1332,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.getrank(oldmember",{"_index":1330,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.insertmessage",{"_index":1370,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.updatemessagecountbucket",{"_index":1386,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.upsert(newmember.id",{"_index":1334,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.upsert(user.userid",{"_index":1294,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.hashandlermethod(provider",{"_index":1065,"title":{},"body":{"classes/Explorer.html":{}}}],["this.http",{"_index":1915,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.initiatemodrequestflow(interaction",{"_index":2145,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.jwtservice.sign(payload",{"_index":1905,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.logger",{"_index":615,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["this.logger.debug(`found",{"_index":2720,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.error",{"_index":2763,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.error((e",{"_index":966,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["this.logger.error(e",{"_index":1289,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{}}}],["this.logger.log",{"_index":587,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["this.logger.log(`adding",{"_index":1278,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.logger.log(`banned",{"_index":2736,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.log(`edited",{"_index":597,"title":{},"body":{"controllers/ChannelController.html":{}}}],["this.logger.log(`kicked",{"_index":2743,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.log(`purging",{"_index":2756,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.warn",{"_index":1935,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.messagesdeleted",{"_index":524,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.possibleanswers[0",{"_index":2494,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[1",{"_index":2502,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[2",{"_index":2505,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[3",{"_index":2506,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.prisma.guilduser",{"_index":2361,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.prismaserver.settings.findunique",{"_index":3080,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["this.prismaserver.settings.update",{"_index":3119,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["this.prismaservice.auditlog.count",{"_index":353,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.auditlog.create",{"_index":333,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["this.prismaservice.auditlog.findmany",{"_index":354,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["this.prismaservice.guildquestion.create",{"_index":762,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestion.findunique",{"_index":778,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestion.update",{"_index":810,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestionanswer.create",{"_index":814,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guilduser.findunique",{"_index":1800,"title":{},"body":{"guards/HasRequiredRank.html":{},"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.guilduser.update",{"_index":2388,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["this.prismaservice.messages.count",{"_index":2777,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.tickets.create",{"_index":2107,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.prismaservice.tickets.findmany",{"_index":2578,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.tickets.findunique",{"_index":2138,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.prismaservice.tickets.update",{"_index":2139,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["this.reason",{"_index":2677,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.reflector.getallandoverride",{"_index":1793,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["this.restrictedchannelservice",{"_index":1551,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.restrictedchannelservice.getall(user.guildid).then((channels",{"_index":1549,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.seconds",{"_index":520,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.selfservice.fetchself(userid",{"_index":2323,"title":{},"body":{"controllers/SelfController.html":{}}}],["this.settings.getadminroleid(guild_id)).tostring",{"_index":1771,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settings.getmodroleid(guild_id)).tostring",{"_index":1769,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settings.getverifiedmemberroleid(guild_id)).tostring",{"_index":1767,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settingsservice.editsettings(guildid",{"_index":1583,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["this.settingsservice.getguilduser",{"_index":2234,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["this.settingsservice.getopenintrochannelid",{"_index":1322,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getsettings(guildid",{"_index":1580,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["this.settingsservice.getunverifiedmemberroleid",{"_index":1320,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getverifiedmemberroleid",{"_index":1303,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getverifiedmemberroleid(message.guildid",{"_index":866,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["this.settingsservice.templatemessage",{"_index":1324,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.tasksservice.createdynamicscheduledjob",{"_index":1162,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.templateanswer(dto.category",{"_index":2487,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.upsert(userid",{"_index":1763,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.upsertguild(guild.id",{"_index":1563,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.userid",{"_index":526,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.userservice.findall(guild.id)).foreach",{"_index":2563,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.userservice.getguilduser(userid",{"_index":1674,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["this.userservice.updatemessagecountbucket(user.userid",{"_index":2566,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.usersservice.fetchself(userid",{"_index":1913,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.validateuser(data.id",{"_index":1947,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.value",{"_index":2395,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["those",{"_index":2347,"title":{},"body":{"injectables/SelfService.html":{},"license.html":{}}}],["though",{"_index":3593,"title":{},"body":{"license.html":{}}}],["thread",{"_index":472,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["threads",{"_index":425,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["three",{"_index":3487,"title":{},"body":{"license.html":{}}}],["through",{"_index":3277,"title":{},"body":{"license.html":{}}}],["throw",{"_index":616,"title":{},"body":{"controllers/ChannelController.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildSettingsService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["thrown",{"_index":621,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/EventToLog.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["thus",{"_index":3381,"title":{},"body":{"license.html":{}}}],["ticket",{"_index":2088,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["ticket.ticketid",{"_index":2116,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["ticket.userid",{"_index":2585,"title":{},"body":{"injectables/TasksService.html":{}}}],["ticketid",{"_index":2108,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["tickets",{"_index":2577,"title":{},"body":{"injectables/TasksService.html":{}}}],["tickets.foreach(async",{"_index":2579,"title":{},"body":{"injectables/TasksService.html":{}}}],["ticketsystem",{"_index":2593,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["ticketsystemsetupcommand",{"_index":411,"title":{"classes/TicketSystemSetupCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["time",{"_index":307,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/LogEntryDto.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["time'})@isoptional",{"_index":295,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["timed",{"_index":2573,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["timeout",{"_index":2016,"title":{},"body":{"classes/LogEntry.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["timeout.dto",{"_index":2612,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["timeout.dto.ts",{"_index":2814,"title":{},"body":{"classes/UserTimeOutDto.html":{},"coverage.html":{}}}],["timeout.dto.ts:16",{"_index":2826,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout.dto.ts:27",{"_index":2825,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout.dto.ts:72",{"_index":2824,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout_expired",{"_index":2015,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["timeoutcommand",{"_index":384,"title":{"classes/TimeOutCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["timeouted",{"_index":2536,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["timeouts",{"_index":2532,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["timeoutuser",{"_index":2693,"title":{},"body":{"controllers/UserController.html":{}}}],["timeoutuser(guildid",{"_index":2712,"title":{},"body":{"controllers/UserController.html":{}}}],["timestamp",{"_index":428,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["timezone",{"_index":1177,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{}}}],["todo",{"_index":2739,"title":{},"body":{"controllers/UserController.html":{}}}],["toformattedlog",{"_index":505,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["toformattedlog(logger",{"_index":512,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["toisostring",{"_index":2751,"title":{},"body":{"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{}}}],["token",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthService.html":{}}}],["token.strategy",{"_index":1873,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["token.strategy.ts",{"_index":2240,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:10",{"_index":2241,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["token.strategy.ts:19",{"_index":2242,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["tolocalestring",{"_index":2575,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["tonimsgstobird",{"_index":1354,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["tonimsgstobird(message",{"_index":1360,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["tools",{"_index":3337,"title":{},"body":{"license.html":{}}}],["topic",{"_index":426,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["tostring",{"_index":2628,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["total",{"_index":270,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["touch",{"_index":3055,"title":{},"body":{"index.html":{}}}],["touser",{"_index":2485,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["touser.id",{"_index":2488,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["touserid",{"_index":2471,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["trade",{"_index":3623,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3622,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3624,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":3566,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1967,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["transferred",{"_index":3568,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":3679,"title":{},"body":{"license.html":{}}}],["transform",{"_index":2815,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["transformer",{"_index":1106,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildUserController.html":{},"classes/UserTimeOutDto.html":{},"dependencies.html":{}}}],["transformers",{"_index":826,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"properties.html":{}}}],["transmission",{"_index":3520,"title":{},"body":{"license.html":{}}}],["treated",{"_index":3592,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":3407,"title":{},"body":{"license.html":{}}}],["tries",{"_index":2369,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["triggered",{"_index":2373,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["true",{"_index":77,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RoleResponse.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["true})@isdatestring",{"_index":2816,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["true})@isstring",{"_index":839,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{}}}],["try",{"_index":74,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["trying",{"_index":1941,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["twitter",{"_index":3061,"title":{},"body":{"index.html":{}}}],["two",{"_index":3177,"title":{},"body":{"license.html":{}}}],["twoweekdate",{"_index":1503,"title":{},"body":{"injectables/GuildService.html":{}}}],["tyep",{"_index":1345,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["type",{"_index":22,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":2933,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typealiases",{"_index":3904,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1073,"title":{},"body":{"classes/Explorer.html":{},"classes/LogEntry.html":{}}}],["typeofattachments",{"_index":1396,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["typescript",{"_index":3024,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typical",{"_index":3545,"title":{},"body":{"license.html":{}}}],["ui.command",{"_index":400,"title":{},"body":{"modules/BotModule.html":{}}}],["ui.command.ts",{"_index":2378,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["ui.command.ts:16",{"_index":2380,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["ui.command.ts:18",{"_index":2767,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["ui.command.ts:24",{"_index":2383,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["ui.command.ts:26",{"_index":2771,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["ui.command.ts:80",{"_index":2769,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["um",{"_index":960,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["umarmen",{"_index":2879,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["umarmung",{"_index":2464,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["unauthorizedexception",{"_index":1788,"title":{},"body":{"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{}}}],["und",{"_index":949,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/LogEntry.html":{}}}],["undefined",{"_index":348,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["undefined.ts",{"_index":2921,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":3226,"title":{},"body":{"license.html":{}}}],["unicodeemoji",{"_index":974,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":3037,"title":{},"body":{"index.html":{}}}],["unkickablemembers",{"_index":1519,"title":{},"body":{"injectables/GuildService.html":{}}}],["unkickablemembers.push(member",{"_index":1522,"title":{},"body":{"injectables/GuildService.html":{}}}],["unknown",{"_index":327,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":3554,"title":{},"body":{"license.html":{}}}],["unlimited",{"_index":3365,"title":{},"body":{"license.html":{}}}],["unlocked",{"_index":1283,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["unlocked.guard",{"_index":1365,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["unlocked.guard.ts",{"_index":853,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["unlocked.guard.ts:11",{"_index":856,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{}}}],["unlocked.guard.ts:14",{"_index":1819,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{}}}],["unlocked.guard.ts:19",{"_index":1820,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{}}}],["unlockuser",{"_index":1230,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["unlockuser(reaction",{"_index":1247,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["unmodified",{"_index":3256,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":3394,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":3588,"title":{},"body":{"license.html":{}}}],["until",{"_index":2574,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["unverified",{"_index":1313,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/initGuildCommand.html":{}}}],["unverifiedmemberroleid",{"_index":2407,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["unverifybyrolecommand",{"_index":2647,"title":{"classes/UnverifyByRoleCommand.html":{}},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["up",{"_index":1491,"title":{},"body":{"injectables/GuildService.html":{}}}],["update",{"_index":1158,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"controllers/RoleController.html":{}}}],["updateautodeletechannel",{"_index":1093,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["updateautodeletechannel(guildid",{"_index":1099,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["updatechannelpermissions",{"_index":1441,"title":{},"body":{"injectables/GuildService.html":{}}}],["updatechannelpermissions(user",{"_index":1494,"title":{},"body":{"injectables/GuildService.html":{}}}],["updated",{"_index":994,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{}}}],["updated'})@apiresponse({status",{"_index":2270,"title":{},"body":{"controllers/RoleController.html":{}}}],["updated/created",{"_index":498,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["updatemessagecountbucket",{"_index":1702,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["updatemessagecountbucket(userid",{"_index":1735,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["updaterank",{"_index":1231,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["updaterank(oldmember",{"_index":1250,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["updaterole",{"_index":2254,"title":{},"body":{"controllers/RoleController.html":{}}}],["updaterole(guildid",{"_index":2268,"title":{},"body":{"controllers/RoleController.html":{}}}],["updates",{"_index":1493,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["upsert",{"_index":1146,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildUserService.html":{}}}],["upsert(guildid",{"_index":1151,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{}}}],["upsert(userid",{"_index":1737,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["upsertguild",{"_index":1442,"title":{},"body":{"injectables/GuildService.html":{}}}],["upsertguild(guildid",{"_index":1496,"title":{},"body":{"injectables/GuildService.html":{}}}],["url",{"_index":824,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"injectables/GuildMessageHandler.html":{},"classes/RoleResponse.html":{}}}],["urlencoded",{"_index":1932,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["urlsearchparams",{"_index":1917,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["usable",{"_index":1651,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["use",{"_index":2709,"title":{},"body":{"controllers/UserController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":633,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/EventToLog.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"modules/UserModule.html":{},"miscellaneous/functions.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["usefilters",{"_index":2475,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["usefilters(commandvalidationfilter",{"_index":2484,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["useful",{"_index":3870,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["useguards(ismodalinteractionguard",{"_index":803,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["useguards(jwtauthguard",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["useguards(messagefromuserguard",{"_index":1369,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["useguards(messageisdmguard",{"_index":942,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["useguards(refreshjwtguard",{"_index":1849,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["useguards(refreshjwtguard)@apiheader({name",{"_index":1832,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["user",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/PermissionOverwrite.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user.ban",{"_index":2737,"title":{},"body":{"controllers/UserController.html":{}}}],["user.controller",{"_index":1689,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["user.controller.ts",{"_index":1663,"title":{},"body":{"controllers/GuildUserController.html":{},"coverage.html":{}}}],["user.controller.ts:19",{"_index":1667,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["user.decorator",{"_index":1671,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["user.decorator.ts",{"_index":2923,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":2474,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["user.dto.ts",{"_index":2868,"title":{},"body":{"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:21",{"_index":2874,"title":{},"body":{"classes/UserToUser.html":{}}}],["user.dto.ts:28",{"_index":2872,"title":{},"body":{"classes/UserToUser.html":{}}}],["user.guard",{"_index":1364,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["user.guard.ts",{"_index":2030,"title":{},"body":{"guards/MessageFromUserGuard.html":{},"coverage.html":{}}}],["user.guard.ts:5",{"_index":2031,"title":{},"body":{"guards/MessageFromUserGuard.html":{}}}],["user.guildid",{"_index":2149,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["user.id",{"_index":1339,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/TimeOutCommand.html":{}}}],["user.kick",{"_index":2744,"title":{},"body":{"controllers/UserController.html":{}}}],["user.messagecountbucket",{"_index":1433,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["user.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{}}}],["user.module.ts",{"_index":1688,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["user.purge",{"_index":2764,"title":{},"body":{"controllers/UserController.html":{}}}],["user.rank",{"_index":1293,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{}}}],["user.send",{"_index":2625,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.send.failed",{"_index":2634,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.service",{"_index":1143,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["user.service.ts",{"_index":1690,"title":{},"body":{"injectables/GuildUserService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["user.service.ts:100",{"_index":1736,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:122",{"_index":1729,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:137",{"_index":1722,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:150",{"_index":1714,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:163",{"_index":1712,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:177",{"_index":1732,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:18",{"_index":1703,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:181",{"_index":1710,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:189",{"_index":1708,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:197",{"_index":1706,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:26",{"_index":1734,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:33",{"_index":1720,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:42",{"_index":1738,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:54",{"_index":1727,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:78",{"_index":1716,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:89",{"_index":1718,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.timeout(date",{"_index":2617,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.timeout.created",{"_index":2645,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["user.timeout.failed",{"_index":2621,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.user.username",{"_index":2637,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.userid",{"_index":1914,"title":{},"body":{"injectables/JwtAuthService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["user.userid.tostring",{"_index":1555,"title":{},"body":{"injectables/GuildService.html":{}}}],["user/dto/self.dto",{"_index":1668,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["user/dto/self.dto.ts",{"_index":2328,"title":{},"body":{"classes/SelfDto-1.html":{},"coverage.html":{}}}],["user/dto/self.dto.ts:5",{"_index":2334,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:6",{"_index":2330,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:7",{"_index":2333,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:8",{"_index":2329,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:9",{"_index":2331,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/guild",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["user/self",{"_index":2307,"title":{},"body":{"controllers/SelfController.html":{}}}],["user/user.controller",{"_index":2180,"title":{},"body":{"modules/ModerationModule.html":{}}}],["user/user.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["user['userid",{"_index":2353,"title":{},"body":{"injectables/SelfService.html":{}}}],["user_banned",{"_index":1998,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_id",{"_index":1449,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{}}}],["user_joined",{"_index":1995,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_left",{"_index":1997,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_unbanned",{"_index":1999,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_updated",{"_index":2000,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["userbanevent",{"_index":2670,"title":{"classes/UserBanEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userbanevent(userid",{"_index":2738,"title":{},"body":{"controllers/UserController.html":{}}}],["usercontroller",{"_index":2178,"title":{"controllers/UserController.html":{}},"body":{"modules/ModerationModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["usercounts",{"_index":1539,"title":{},"body":{"injectables/GuildService.html":{}}}],["usercounts.length",{"_index":1543,"title":{},"body":{"injectables/GuildService.html":{}}}],["usercounts.reduce((sum",{"_index":1541,"title":{},"body":{"injectables/GuildService.html":{}}}],["userid",{"_index":67,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["userinfouicommand",{"_index":398,"title":{"classes/UserInfoUiCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["userkickevent",{"_index":2680,"title":{"classes/UserKickEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userkickevent(userid",{"_index":2745,"title":{},"body":{"controllers/UserController.html":{}}}],["userlimit",{"_index":495,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["usermention",{"_index":657,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildSettingsService.html":{},"injectables/ModRequestFlow.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["usermention(fromuserid",{"_index":2496,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["usermention(interaction.targetid",{"_index":2781,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["usermention(interaction.user.id",{"_index":2097,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["usermention(member.id",{"_index":692,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["usermention(message.author.id",{"_index":1659,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["usermention(touserid",{"_index":2498,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["usermention(user.id",{"_index":2638,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["usermodule",{"_index":108,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":873,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/GuildSettingsService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["userpurgeevent",{"_index":2686,"title":{"classes/UserPurgeEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userpurgeevent(userid",{"_index":2765,"title":{},"body":{"controllers/UserController.html":{}}}],["userresponseschema",{"_index":921,"title":{},"body":{"classes/DiscordUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":1746,"title":{},"body":{"injectables/GuildUserService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"license.html":{}}}],["users.length",{"_index":1749,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["usersenddmfailedevent",{"_index":2613,"title":{"classes/UserSendDMFailedEvent.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usersenddmfailedevent(user.id",{"_index":2635,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["userservice",{"_index":1672,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/TasksService.html":{}}}],["usersresponseschema",{"_index":922,"title":{},"body":{"classes/DiscordUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice",{"_index":1887,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["usertimeoutdto",{"_index":2609,"title":{"classes/UserTimeOutDto.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{}}}],["usertimeoutevent",{"_index":2555,"title":{"classes/UserTimeOutEvent.html":{}},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usertimeoutevent(user.id",{"_index":2646,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["usertimeoutfailedevent",{"_index":2614,"title":{"classes/UserTimeOutFailedEvent.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usertouser",{"_index":2467,"title":{"classes/UserToUser.html":{}},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"coverage.html":{}}}],["uses",{"_index":3548,"title":{},"body":{"license.html":{}}}],["using",{"_index":1217,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"classes/MumVoiceCommand.html":{},"license.html":{},"properties.html":{}}}],["utf8",{"_index":2093,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["util/decorators/request",{"_index":2318,"title":{},"body":{"controllers/SelfController.html":{}}}],["util/dto/log.entry.dto",{"_index":251,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"classes/LogEntryDto.html":{}}}],["util/exception/guild",{"_index":1623,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["util/functions/plain",{"_index":247,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildSettingsController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{}}}],["util/interfaces/event",{"_index":219,"title":{},"body":{"injectables/AppService.html":{}}}],["utility",{"_index":2547,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["utils",{"_index":573,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["utils.ts",{"_index":2932,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["valid",{"_index":3486,"title":{},"body":{"license.html":{}}}],["validate",{"_index":1950,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/UserTimeOutDto.html":{}}}],["validate(payload",{"_index":1953,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["validateuser",{"_index":1884,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["validateuser(userid",{"_index":1895,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["validation",{"_index":2477,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["validation.ts",{"_index":701,"title":{},"body":{"classes/CommandValidationFilter.html":{},"coverage.html":{}}}],["validation.ts:7",{"_index":704,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["validationpipe",{"_index":238,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["validator",{"_index":303,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{},"classes/UserTimeOutDto.html":{},"dependencies.html":{}}}],["value",{"_index":215,"title":{},"body":{"injectables/AppService.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/SettingsChanged.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.trim",{"_index":2837,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["values",{"_index":1204,"title":{},"body":{"controllers/GuildController.html":{}}}],["variable",{"_index":2900,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1652,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/GuildSettingsService.html":{},"miscellaneous/variables.html":{}}}],["verbatim",{"_index":3139,"title":{},"body":{"license.html":{}}}],["vereinsmitglied",{"_index":1512,"title":{},"body":{"injectables/GuildService.html":{}}}],["verified",{"_index":3107,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["verifiedmemberroleid",{"_index":2408,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["verifiedroleid",{"_index":1302,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["versendet",{"_index":2124,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["version",{"_index":3125,"title":{},"body":{"license.html":{},"properties.html":{}}}],["versions",{"_index":3161,"title":{},"body":{"license.html":{}}}],["very",{"_index":2707,"title":{},"body":{"controllers/UserController.html":{}}}],["via",{"_index":2351,"title":{},"body":{"injectables/SelfService.html":{}}}],["vide/mp4",{"_index":2992,"title":{},"body":{"miscellaneous/functions.html":{}}}],["view",{"_index":3292,"title":{},"body":{"license.html":{}}}],["viewchannel",{"_index":1559,"title":{},"body":{"injectables/GuildService.html":{}}}],["violates",{"_index":3583,"title":{},"body":{"license.html":{}}}],["violation",{"_index":3645,"title":{},"body":{"license.html":{}}}],["visible",{"_index":3286,"title":{},"body":{"license.html":{}}}],["void",{"_index":213,"title":{},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["volume",{"_index":3464,"title":{},"body":{"license.html":{}}}],["von",{"_index":829,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["wait",{"_index":1307,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["waive",{"_index":3415,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":3850,"title":{},"body":{"license.html":{}}}],["want",{"_index":841,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/UserToUser.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["warn",{"_index":1996,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":3291,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3290,"title":{},"body":{"license.html":{}}}],["watch",{"_index":3032,"title":{},"body":{"index.html":{}}}],["way",{"_index":2522,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["ways",{"_index":3477,"title":{},"body":{"license.html":{}}}],["web",{"_index":3877,"title":{},"body":{"license.html":{}}}],["webhook",{"_index":1988,"title":{},"body":{"classes/LogEntry.html":{}}}],["webhooks_updated",{"_index":2014,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":3059,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":1270,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{}}}],["weeks",{"_index":663,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{}}}],["welcher",{"_index":2880,"title":{},"body":{"classes/UserToUser.html":{}}}],["welches",{"_index":2599,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["welcomemessageformat",{"_index":2409,"title":{},"body":{"classes/SettingsDto.html":{}}}],["well",{"_index":1976,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["wende",{"_index":2631,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["werden",{"_index":684,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["wfp",{"_index":658,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{}}}],["wfp.command",{"_index":407,"title":{},"body":{"modules/BotModule.html":{}}}],["wfp.command.ts",{"_index":649,"title":{},"body":{"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["wfp.command.ts:18",{"_index":652,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["wfp.command.ts:21",{"_index":654,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["whatever",{"_index":3685,"title":{},"body":{"license.html":{}}}],["whenever",{"_index":1268,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["whether",{"_index":452,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["white",{"_index":977,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["whole",{"_index":3314,"title":{},"body":{"license.html":{}}}],["whose",{"_index":3527,"title":{},"body":{"license.html":{}}}],["widely",{"_index":3309,"title":{},"body":{"license.html":{}}}],["widespread",{"_index":3191,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["willst",{"_index":2882,"title":{},"body":{"classes/UserToUser.html":{}}}],["window",{"_index":3326,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":3406,"title":{},"body":{"license.html":{}}}],["wish",{"_index":3168,"title":{},"body":{"license.html":{}}}],["within",{"_index":1040,"title":{},"body":{"interfaces/EventToLog.html":{},"license.html":{}}}],["without",{"_index":3208,"title":{},"body":{"license.html":{}}}],["wording",{"_index":1983,"title":{},"body":{"classes/LogEntry.html":{}}}],["work",{"_index":3242,"title":{},"body":{"license.html":{}}}],["work's",{"_index":3335,"title":{},"body":{"license.html":{}}}],["working",{"_index":3310,"title":{},"body":{"license.html":{}}}],["works",{"_index":3147,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3719,"title":{},"body":{"license.html":{}}}],["write",{"_index":1030,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["writing",{"_index":3810,"title":{},"body":{"license.html":{}}}],["written",{"_index":1455,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"license.html":{},"properties.html":{}}}],["wrongargsexception",{"_index":703,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["ws",{"_index":2208,"title":{},"body":{"classes/PingCommand.html":{}}}],["wurde",{"_index":2122,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["wurden",{"_index":681,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["www",{"_index":1930,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["wähle",{"_index":2156,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["x",{"_index":2457,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["xd",{"_index":2817,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxh",{"_index":2820,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxhxm",{"_index":2823,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxm",{"_index":2822,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xh",{"_index":2818,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xhxm",{"_index":2821,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xm",{"_index":2819,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["y",{"_index":2455,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["yarn",{"_index":3028,"title":{},"body":{"index.html":{}}}],["years",{"_index":3488,"title":{},"body":{"license.html":{}}}],["you'd",{"_index":3052,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":3736,"title":{},"body":{"license.html":{}}}],["z",{"_index":2458,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["zoom",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["zu",{"_index":962,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["zwar",{"_index":946,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddRoleCommand.html":{"url":"classes/AddRoleCommand.html","title":"class - AddRoleCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddRoleCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/add-role.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onRoleAdd\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/add-role.command.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onRoleAdd\n                        \n                    \n                \n            \n            \n                \n                        \n                    onRoleAdd(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/add-role.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport { Client, CommandInteraction } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { Prisma } from '@prisma/client';\n\n@Command({\n  name: 'lift-lockdown',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class AddRoleCommand {\n  constructor(\n    @InjectDiscordClient() private client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  @Handler()\n  async onRoleAdd(@InteractionEvent() interaction: CommandInteraction) {\n    interaction.guild.members.fetch().then((members) =>\n      members.forEach(async (member) => {\n        if (\n          member.roles.cache.has('1011563978956226560') ||\n          member.roles.cache.has('1011513775054143632')\n        )\n          return;\n        if (member.roles.cache.has('1121823930085285938')) {\n          const roles = (\n            await this.database.lockdownRoleBackup.findUnique({\n              where: {\n                guildId_userId: { guildId: member.guild.id, userId: member.id },\n              },\n            })\n          ).roles as Prisma.JsonArray;\n          let error = false;\n          roles.forEach((role: { id: string }) => {\n            try {\n              member.roles.add(role.id);\n            } catch {\n              error = true;\n            }\n          });\n          if (!error)\n            this.database.lockdownRoleBackup.delete({\n              where: {\n                guildId_userId: {\n                  guildId: member.guild.id,\n                  userId: member.id,\n                },\n              },\n            });\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt/guards/jwt-auth.guard';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller()\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class AppController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nBotModule\n\nBotModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBotModule->AppModule\n\n\n\n\n\nGuildModule\n\nGuildModule\n\nAppModule -->\n\nGuildModule->AppModule\n\n\n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nAppModule -->\n\nJwtAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BotModule\n                        \n                        \n                            GuildModule\n                        \n                        \n                            JwtAuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { JwtAuthModule } from './auth/jwt/jwt-auth.module';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { Client, GatewayIntentBits, Partials } from 'discord.js';\nimport { BotModule } from './bot/bot.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { ModerationModule } from './guild/moderation/moderation.module';\nimport { GuildSettingsModule } from './guild/guild-settings/guild-settings.module';\nimport { AuditLogModule } from './auditlog/auditlog.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { GuildUserModule } from './guild/guild-user/guild-user.module';\nimport { GuildModule } from './guild/guild.module';\nimport { RouterModule } from '@nestjs/core';\nimport { PrismaService } from './prisma.service';\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    ConfigModule.forRoot({\n      isGlobal: true,\n      ignoreEnvVars: false,\n    }),\n    DiscordModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        token: configService.get('TOKEN'),\n        discordClientOptions: {\n          intents: [\n            GatewayIntentBits.AutoModerationConfiguration,\n            GatewayIntentBits.AutoModerationExecution,\n            GatewayIntentBits.GuildPresences,\n            GatewayIntentBits.Guilds,\n            GatewayIntentBits.GuildMessages,\n            GatewayIntentBits.MessageContent,\n            GatewayIntentBits.GuildMembers,\n            GatewayIntentBits.GuildMessageReactions,\n            GatewayIntentBits.GuildModeration,\n            GatewayIntentBits.GuildInvites,\n            GatewayIntentBits.GuildVoiceStates,\n            GatewayIntentBits.GuildMessageTyping,\n            GatewayIntentBits.GuildWebhooks,\n            GatewayIntentBits.GuildIntegrations,\n            GatewayIntentBits.GuildMessageTyping,\n            GatewayIntentBits.GuildEmojisAndStickers,\n            GatewayIntentBits.DirectMessageTyping,\n            GatewayIntentBits.DirectMessages,\n            GatewayIntentBits.DirectMessageReactions,\n          ],\n          partials: [\n            Partials.GuildMember,\n            Partials.ThreadMember,\n            Partials.User,\n            Partials.Message,\n            Partials.Channel,\n            Partials.Reaction,\n            Partials.GuildScheduledEvent,\n          ],\n        },\n\n        registerCommandOptions: [\n          {\n            removeCommandsBefore: true,\n            forGuild: '1011511871297302608',\n          },\n        ],\n\n        failOnLogin: true,\n      }),\n      inject: [ConfigService],\n      setupClientFactory: (client: Client) => {\n        client.setMaxListeners(30);\n      },\n    }),\n    EventEmitterModule.forRoot({\n      wildcard: true,\n    }),\n    RouterModule.register([\n      {\n        path: 'guild/:guildId',\n        children: [\n          {\n            path: '/',\n            module: GuildModule,\n          },\n          {\n            path: '/auditlog',\n            module: AuditLogModule,\n          },\n          {\n            path: '/user',\n            module: GuildUserModule,\n          },\n          {\n            path: '/settings',\n            module: GuildSettingsModule,\n          },\n          {\n            path: '/moderation',\n            module: ModerationModule,\n          },\n        ],\n      },\n    ]),\n    UserModule,\n    JwtAuthModule,\n    GuildModule,\n    BotModule,\n    TasksModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, PrismaService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleEvent(event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('**')\n                \n            \n\n                    \n                        \n                            Defined in src/app.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('AppService')\n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { EventToLog } from './util/interfaces/event-to-log';\n\n@Injectable()\nexport class AppService {\n  logger = new Logger('AppService');\n  constructor(\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @OnEvent('**')\n  handleEvent(event: any & EventToLog) {\n    event.toFormattedLog(this.logger);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuditLogController.html":{"url":"controllers/AuditLogController.html","title":"controller - AuditLogController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuditLogController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/auditlog.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getAuditLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAuditLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuditLog(guildId: string, filter: AuditLogFilterDto, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auditlog/auditlog.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            AuditLogFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Param,\n  ParseIntPipe,\n  Query,\n  UseGuards,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuditLogFilterDto } from './dto/audit-log-filter.dto';\nimport { AuditLogService } from './auditlog.service';\nimport { LogEntryDto } from './dto/log-entry.dto';\nimport { plainToInstance } from '../util/functions/plain-to-instance';\nimport { Action, TargetType } from '../util/dto/log.entry.dto';\nimport { Rank } from '@prisma/client';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller()\n@RequiredRank(Rank.MEMBER)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class AuditLogController {\n  constructor(\n    @Inject(AuditLogService) private readonly auditLogService: AuditLogService,\n  ) {}\n\n  @Get()\n  async getAuditLog(\n    @Param('guildId') guildId: string,\n    @Query(ValidationPipe) filter: AuditLogFilterDto,\n    @Query('limit', ParseIntPipe) limit: number,\n    @Query('offset', ParseIntPipe) offset: number,\n  ): Promise {\n    return this.auditLogService\n      .find(guildId, filter, { offset, limit })\n      .then((result) => ({\n        total: result.total,\n        data: result.data.map((it) =>\n          plainToInstance(LogEntryDto, {\n            action: it.action as Action,\n            createdAt: it.createdAt,\n            invokerId: it.invokerId,\n            reason: it.reason,\n            targetId: it.targetId,\n            targetType: it.targetType as TargetType,\n          }),\n        ),\n      }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuditLogFilterDto.html":{"url":"classes/AuditLogFilterDto.html","title":"class - AuditLogFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuditLogFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/dto/audit-log-filter.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                action\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdFrom\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdTill\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', enum: actions})@IsOptional()@IsString()@IsIn(actions)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdFrom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', format: 'date-time'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdTill\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', format: 'date-time'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', enum: targetTypes})@IsOptional()@IsString()@IsIn(targetTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  Action,\n  actions,\n  TargetType,\n  targetTypes,\n} from '../../util/dto/log.entry.dto';\n\nexport class AuditLogFilterDto {\n  @ApiPropertyOptional({ type: 'string', format: 'date-time' })\n  @IsOptional()\n  createdFrom?: string;\n  @ApiPropertyOptional({ type: 'string', format: 'date-time' })\n  @IsOptional()\n  createdTill?: string;\n  @ApiPropertyOptional({ type: 'string', enum: targetTypes })\n  @IsOptional()\n  @IsString()\n  @IsIn(targetTypes)\n  targetType?: TargetType;\n  @ApiPropertyOptional({ type: 'string', enum: actions })\n  @IsOptional()\n  @IsString()\n  @IsIn(actions)\n  action?: Action;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuditLogModule.html":{"url":"modules/AuditLogModule.html","title":"module - AuditLogModule","body":"\n                   \n\n\n\n\n    Modules\n    AuditLogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuditLogModule\n\n\n\ncluster_AuditLogModule_exports\n\n\n\ncluster_AuditLogModule_providers\n\n\n\n\nAuditLogService \n\nAuditLogService \n\n\n\nAuditLogModule\n\nAuditLogModule\n\nAuditLogService  -->\n\nAuditLogModule->AuditLogService \n\n\n\n\n\nAuditEvents\n\nAuditEvents\n\nAuditLogModule -->\n\nAuditEvents->AuditLogModule\n\n\n\n\n\nAuditLogService\n\nAuditLogService\n\nAuditLogModule -->\n\nAuditLogService->AuditLogModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuditLogModule -->\n\nPrismaService->AuditLogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auditlog/auditlog.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuditEvents\n                        \n                        \n                            AuditLogService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuditLogController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuditLogService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuditLogController } from './auditlog.controller';\nimport { AuditLogService } from './auditlog.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\nimport AuditEvents from './auditlog.events';\n\n@Module({\n  controllers: [AuditLogController],\n  providers: [AuditLogService, PrismaService, AuditEvents],\n  imports: [DiscordModule.forFeature()],\n  exports: [AuditLogService],\n})\nexport class AuditLogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditLogService.html":{"url":"injectables/AuditLogService.html","title":"injectable - AuditLogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditLogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/auditlog.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auditlog/auditlog.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(entry: LogEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auditlog/auditlog.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            LogEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                        \n                    find(guildId: string, filter: AuditLogFilterDto, pagination: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auditlog/auditlog.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            AuditLogFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport LogEntry from 'src/util/dto/log.entry.dto';\nimport { PrismaService } from 'src/prisma.service';\nimport { AuditLogFilterDto } from './dto/audit-log-filter.dto';\n\n@Injectable()\nexport class AuditLogService {\n  constructor(@Inject(PrismaService) private prismaService: PrismaService) {}\n\n  async create(entry: LogEntry) {\n    return this.prismaService.auditLog.create({\n      data: {\n        action: entry.action,\n        guildId: entry.guildId,\n        invokerId: entry.invokerId,\n        reason: entry.reason,\n        targetId: entry.targetId,\n        targetType: entry.targetType,\n        extraInfo: entry.extraInfo || null,\n        createdAt: entry.createdAt,\n      },\n    });\n  }\n\n  async find(\n    guildId: string,\n    filter: AuditLogFilterDto,\n    pagination: { offset?: number; limit?: number },\n  ) {\n    const where = {\n      guildId,\n      createdAt:\n        filter.createdFrom || filter.createdTill\n          ? {\n              gte: filter.createdFrom\n                ? new Date(filter.createdFrom).toISOString()\n                : undefined,\n              lte: filter.createdTill\n                ? new Date(filter.createdTill).toISOString()\n                : undefined,\n            }\n          : undefined,\n      action: filter.action,\n      targetType: filter.targetType,\n    };\n\n    return {\n      total: await this.prismaService.auditLog.count({ where }),\n      data: await this.prismaService.auditLog.findMany({\n        select: {\n          action: true,\n          invokerId: true,\n          reason: true,\n          targetId: true,\n          targetType: true,\n          extraInfo: true,\n          createdAt: true,\n        },\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        skip: pagination.offset ?? 0,\n        take: pagination.limit ?? 0,\n      }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BotEvent.html":{"url":"interfaces/BotEvent.html","title":"interface - BotEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BotEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/interfaces/bot-event.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        __bot_event_handler__\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        __bot_event_handler__\n                        \n                    \n                \n            \n            \n                \n__bot_event_handler__(...args: ClientEvents)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/interfaces/bot-event.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ClientEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ClientEvents } from 'discord.js';\n\nexport default interface BotEvent {\n  __bot_event_handler__(\n    ...args: ClientEvents[keyof ClientEvents]\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BotModule.html":{"url":"modules/BotModule.html","title":"module - BotModule","body":"\n                   \n\n\n\n\n    Modules\n    BotModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BotModule\n\n\n\ncluster_BotModule_providers\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\n\n\nBotModule\n\nBotModule\n\nBotModule -->\n\nGuildRestrictedChannelService->BotModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nBotModule -->\n\nGuildService->BotModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nBotModule -->\n\nGuildSettingsService->BotModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nBotModule -->\n\nPrismaService->BotModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bot/bot.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { DiscordModule } from '@discord-nestjs/core';\nimport { Module } from '@nestjs/common';\nimport { PingCommand } from './commands/ping.command';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { TimeOutCommand } from './commands/timeout.command';\nimport { MumVoiceCommand } from './commands/mod-anouncement.command';\nimport { GuildRestrictedChannelService } from 'src/guild/guild-restricted-channel/guild-restricted-channel.service';\nimport { CommunityQuestionCommand } from './commands/community-question.command';\nimport { initGuildCommand } from './commands/init-guild.command';\nimport { UserInfoUiCommand } from './commands/user-info-ui.command';\nimport { SetFirstMessageUICommand } from './commands/user-set-first-message-ui.command';\nimport { CleanWfpMember } from './commands/clean-wfp.command';\nimport { GuildService } from 'src/guild/guild.service';\nimport { SpecialCommand } from './commands/special.command';\nimport { TicketSystemSetupCommand } from './commands/ticket-system.command';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [\n    PingCommand,\n    TimeOutCommand,\n    MumVoiceCommand,\n    CommunityQuestionCommand,\n    initGuildCommand,\n    PrismaService,\n    GuildSettingsService,\n    GuildRestrictedChannelService,\n    UserInfoUiCommand,\n    SetFirstMessageUICommand,\n    CleanWfpMember,\n    GuildService,\n    SpecialCommand,\n    TicketSystemSetupCommand,\n  ],\n  exports: [DiscordModule],\n})\nexport class BotModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Channel.html":{"url":"classes/Channel.html","title":"class - Channel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Channel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                flags\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastMessageId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                messages\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nsfw\n                            \n                            \n                                    \n                                    \n                                parentId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                permissionOverwrites\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                rateLimitPerUser\n                            \n                            \n                                    \n                                    \n                                rawPosition\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                threads\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                topic\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Timestamp when the channel was created', example: 1671981769958, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Flags for the channel', example: 0, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the guild', example: '616609333832187924', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the channel', example: '1056592866660581456', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastMessageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'ID of the last message', example: '1080070968900333578', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString()@IsOptional()@ApiProperty({description: 'Array of message IDs', type: undefined, example: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'Name of the channel', example: 'images', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nsfw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({description: 'Whether the channel is NSFW', example: false, type: Boolean, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the parent channel', example: '832170662491062333', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        permissionOverwrites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionOverwrite[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInstance(PermissionOverwrite)@IsOptional()@ApiProperty({description: 'Array of permission overwrites', type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        rateLimitPerUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({description: 'Rate limit per user aka slowmode', example: 0, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rawPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Raw position of the channel', example: 3, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        threads\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString()@IsOptional()@ApiProperty({description: 'Array of thread IDs', type: undefined, example: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'Topic of the channel', example: undefined, type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Type of the channel', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelCleaned.html":{"url":"classes/ChannelCleaned.html","title":"class - ChannelCleaned","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelCleaned\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                before\n                            \n                            \n                                channelId\n                            \n                            \n                                guildId\n                            \n                            \n                                messagesDeleted\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, messagesDeleted: number, before: number, userId: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesDeleted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        before\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        before\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messagesDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:52\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChannelController.html":{"url":"controllers/ChannelController.html","title":"controller - ChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/channel/channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /channel\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                cleanChannel\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editChannel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildChannel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildChannels\n                            \n                            \n                                    \n                                    \n                                    Async\n                                setSlowmode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        cleanChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanChannel(guildId: string, channelId: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channelId/clean')@ApiOperation({summary: 'Clean a channel'})@ApiBody({schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        editChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    editChannel(guildId: string, channelId: string, channelData: GuildChannelEditOptions)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':channelId')@ApiOperation({summary: 'Edit a channel for a guild'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelData\n                                            \n                                                            GuildChannelEditOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildChannel(guildId: string, channelId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':channelId')@ApiOperation({summary: 'Get a channel for a guild'})@ApiResponse({status: 200, type: Channel, description: 'Channel was successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildChannels\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildChannels(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all channels for a guild'})@ApiResponse({status: 200, type: undefined, description: 'Channels were successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        setSlowmode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSlowmode(guildId: string, channelId: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channelId/slowmode')@ApiOperation({summary: 'Set slowmode for a channel'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport {\n  Client,\n  GuildChannel,\n  GuildChannelEditOptions,\n  GuildBasedChannel,\n  ChannelType,\n  GuildTextBasedChannel,\n} from 'discord.js';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { Channel } from '../dto/channel';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  ChannelCleaned,\n  SlowmodeDisabled,\n  SlowmodeEnabled,\n} from '../events/channel.event';\nimport { ChannelNotTextBasedException } from 'src/util/exception/channel-not-text-based-exception';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { Rank } from '@prisma/client';\n\n@ApiTags('/channel')\n@Controller('/channel')\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class ChannelController {\n  logger = new Logger(ChannelController.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all channels for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: [Channel],\n    description: 'Channels were successfully fetched',\n  })\n  async getGuildChannels(\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(\n      `Found ${guild.channels.cache.size} channels in guild ${guildId}`,\n    );\n    return (await guild.channels.fetch()).toJSON();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get a channel for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: Channel,\n    description: 'Channel was successfully fetched',\n  })\n  async getGuildChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(\n      `Found ${guild.channels.cache.size} channels in guild ${guildId}`,\n    );\n    return await guild.channels.fetch(channelId);\n  }\n\n  @Put(':channelId')\n  @ApiOperation({ summary: 'Edit a channel for a guild' })\n  async editChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() channelData: GuildChannelEditOptions,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId);\n    await channel.edit(channelData);\n    this.logger.log(`Edited channel ${channelId} in guild ${guildId}`);\n    return channel;\n  }\n\n  @Post(':channelId/slowmode')\n  @ApiOperation({ summary: 'Set slowmode for a channel' })\n  async setSlowmode(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() { duration }: { duration: number },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId) as GuildChannel;\n    this.logger.log(\n      `Set slowmode for channel ${channelId} in guild ${guildId}`,\n    );\n    await this.eventEmitter.emitAsync(\n      `channel.slowmode.${duration > 0 ? 'enabled' : 'disabled'}`,\n      duration > 0\n        ? new SlowmodeEnabled(guildId, channelId, true, duration)\n        : new SlowmodeDisabled(guildId, channelId, false),\n    );\n    await channel.edit({ rateLimitPerUser: duration });\n  }\n\n  @Post(':channelId/clean')\n  @ApiOperation({ summary: 'Clean a channel' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        userId: {\n          type: 'string',\n        },\n        before: {\n          type: 'number',\n        },\n      },\n    },\n  })\n  async cleanChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() { userId, before }: { userId: string; before: number },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId);\n    this.logger.log(\n      `Cleaning channel ${channelId} in guild ${guildId} from messages before ${before} of user ${userId}`,\n    );\n    if (\n      channel.type in\n      [\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ]\n    ) {\n      cleanTextChannel(\n        channel as GuildTextBasedChannel,\n        (messages) => messages.last().createdTimestamp  msg.deletable && msg.createdTimestamp > before,\n        this.logger,\n      );\n    } else {\n      throw new ChannelNotTextBasedException(channel.name);\n    }\n    await this.eventEmitter.emitAsync(\n      'channel.clean',\n      new ChannelCleaned(guildId, channelId, 0, before, userId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelNotTextBasedException.html":{"url":"classes/ChannelNotTextBasedException.html","title":"class - ChannelNotTextBasedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelNotTextBasedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/channel-not-text-based-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when a channel isn't found by ID\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(channelName: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/channel-not-text-based-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        channelName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a channel isn't found by ID\n */\nexport class ChannelNotTextBasedException extends Error {\n  constructor(channelName: string) {\n    super(`Channel ${channelName} is not text based.`);\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(ChannelNotTextBasedException)\nexport class ChannelNotTextBasedExceptionFilter implements ExceptionFilter {\n  catch(exception: ChannelNotTextBasedException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelNotTextBasedExceptionFilter.html":{"url":"classes/ChannelNotTextBasedExceptionFilter.html","title":"class - ChannelNotTextBasedExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelNotTextBasedExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/channel-not-text-based-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to produce the http response when the exception is thrown in a http context\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: ChannelNotTextBasedException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/channel-not-text-based-exception.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            ChannelNotTextBasedException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a channel isn't found by ID\n */\nexport class ChannelNotTextBasedException extends Error {\n  constructor(channelName: string) {\n    super(`Channel ${channelName} is not text based.`);\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(ChannelNotTextBasedException)\nexport class ChannelNotTextBasedExceptionFilter implements ExceptionFilter {\n  catch(exception: ChannelNotTextBasedException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CleanWfpMember.html":{"url":"classes/CleanWfpMember.html","title":"class - CleanWfpMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CleanWfpMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/clean-wfp.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onCleanWfpMembers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildService: GuildService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/clean-wfp.command.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onCleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    onCleanWfpMembers(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/clean-wfp.command.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InteractionEvent } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  Colors,\n  CommandInteraction,\n  EmbedBuilder,\n  userMention,\n} from 'discord.js';\nimport { GuildService } from 'src/guild/guild.service';\n\n@Command({\n  name: 'clean-wfp',\n  description:\n    'Kick all members with the role `wfp` if they are longer than 2 weeks on the server.',\n  defaultMemberPermissions: ['ModerateMembers', 'KickMembers'],\n  dmPermission: false,\n})\nexport class CleanWfpMember {\n  constructor(@Inject(GuildService) private guildService: GuildService) {}\n  @Handler()\n  async onCleanWfpMembers(@InteractionEvent() interaction: CommandInteraction) {\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const outCome = await this.guildService.cleanWfpMembers(\n      interaction.guildId,\n      false,\n    );\n    console.log(outCome);\n    const embed = new EmbedBuilder()\n      .setTitle('wfp kick member report :3')\n      .setColor(Colors.Blue)\n      .setDescription(\n        'Member die kicked wurden bzw. nicht kicked werden konnten',\n      )\n      .addFields([\n        {\n          name: 'Kicked members count',\n          value: outCome['membersToKick'].length.toString() || '0',\n        },\n        {\n          name: 'Kicked members names',\n          value:\n            outCome['membersToKick']\n              .map((member) => userMention(member.id))\n              .join('\\n') || '',\n        },\n        {\n          name: \"Couldn't kick members count\",\n          value: outCome['unkickableMembers'].length.toString() || '0',\n        },\n        {\n          name: \"Couldn't kick members names\",\n          value:\n            outCome['unkickableMembers']\n              .map((member) => userMention(member.id))\n              .join('\\n') || '',\n        },\n      ]);\n    await interaction.followUp({\n      ephemeral: true,\n      embeds: [embed],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommandValidationFilter.html":{"url":"classes/CommandValidationFilter.html","title":"class - CommandValidationFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommandValidationFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/filters/command-validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(exceptionList: WrongArgsException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/filters/command-validation.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exceptionList\n                                            \n                                                        WrongArgsException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WrongArgsException } from '@discord-nestjs/common';\nimport { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { Colors, EmbedBuilder } from 'discord.js';\n\n@Catch(WrongArgsException)\nexport class CommandValidationFilter implements ExceptionFilter {\n  async catch(\n    exceptionList: WrongArgsException,\n    host: ArgumentsHost,\n  ): Promise {\n    const interaction = host.getArgByIndex(0);\n    const embeds = exceptionList.getError().map((exception) =>\n      new EmbedBuilder()\n        .setDescription(`For input: ${exception.property}`)\n        .setTitle('Validation failed')\n        .setColor(Colors.Red)\n        .addFields(\n          Object.keys(exception.constraints).map((key) => ({\n            name: key,\n            value: exception.constraints[key],\n          })),\n        ),\n    );\n\n    if (interaction.isRepliable())\n      await interaction.reply({ embeds, ephemeral: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionCommand.html":{"url":"classes/CommunityQuestionCommand.html","title":"class - CommunityQuestionCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/community-question.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onButtonPress\n                            \n                            \n                                    \n                                    Async\n                                onCommunityQuestion\n                            \n                            \n                                    \n                                    \n                                    Async\n                                onInteraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/community-question.command.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonPress\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonPress(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onCommunityQuestion\n                        \n                    \n                \n            \n            \n                \n                        \n                    onCommunityQuestion(interaction: CommandInteraction, question: CommunityQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                question\n                                            \n                                                            CommunityQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onInteraction\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInteraction(undefined: CommunityQuestionFormDto, eventArgs: ClientEvents)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')@UseGuards(IsModalInteractionGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CommunityQuestionFormDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventArgs\n                                            \n                                                        ClientEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n  IA,\n  On,\n  EventParams,\n} from '@discord-nestjs/core';\nimport { Inject, UseGuards, ValidationPipe } from '@nestjs/common';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  ButtonInteraction,\n  ButtonStyle,\n  Client,\n  ClientEvents,\n  CommandInteraction,\n  EmbedBuilder,\n  GuildTextBasedChannel,\n  ModalActionRowComponentBuilder,\n  ModalBuilder,\n  TextInputBuilder,\n  TextInputStyle,\n} from 'discord.js';\nimport { CommunityQuestionDto } from '../dto/commmunity-question.dto';\nimport {\n  ModalFieldsTransformPipe,\n  SlashCommandPipe,\n} from '@discord-nestjs/common';\nimport { IsModalInteractionGuard } from '../guards/is-modal-interaction.guard';\nimport { CommunityQuestionFormDto } from '../dto/community-question.form.dto';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'question',\n  description: 'Ask the community a question',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class CommunityQuestionCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private readonly prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onCommunityQuestion(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) question: CommunityQuestionDto,\n  ) {\n    const questionId = await this.prismaService.guildQuestion.create({\n      data: {\n        question: question.description,\n        guildId: interaction.guildId,\n      },\n      select: {\n        id: true,\n      },\n    });\n    const button = new ButtonBuilder()\n      .setCustomId(`community-question-${questionId.id}`)\n      .setLabel('Antwort geben')\n      .setStyle(ButtonStyle.Primary);\n\n    const row = new ActionRowBuilder().addComponents(button);\n    interaction.reply({\n      components: [row],\n      content: question.question,\n    });\n  }\n  @On('interactionCreate')\n  async onButtonPress(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (!interaction.customId.includes('community-question')) return;\n    const questionId = interaction.customId.split('-')[2];\n    const question = await this.prismaService.guildQuestion.findUnique({\n      where: {\n        id: parseInt(questionId),\n      },\n    });\n    if (!question) {\n      await interaction.reply({\n        content: 'Question not found, please contact the mods',\n        ephemeral: true,\n      });\n      return;\n    }\n    const modal = new ModalBuilder()\n      .setCustomId(`community-question-${questionId}`)\n      .setTitle('Community Frage');\n    const questionField = new TextInputBuilder()\n      .setCustomId('question')\n      .setLabel('Frage(Nicht bearbeiten)')\n      .setStyle(TextInputStyle.Paragraph)\n      .setValue(question.question)\n      .setRequired(false);\n    const answerInput = new TextInputBuilder()\n      .setCustomId('answer')\n      .setLabel('Antwort')\n      .setStyle(TextInputStyle.Paragraph)\n      .setRequired(true)\n      .setPlaceholder('Antwort');\n    const answerComponentRow =\n      new ActionRowBuilder().addComponents(\n        answerInput,\n      );\n    const questionComponentRow =\n      new ActionRowBuilder().addComponents(\n        questionField,\n      );\n\n    // Add inputs to the modal\n    modal.addComponents(questionComponentRow, answerComponentRow);\n    await interaction.showModal(modal);\n  }\n\n  @On('interactionCreate')\n  @UseGuards(IsModalInteractionGuard)\n  async onInteraction(\n    @IA(ModalFieldsTransformPipe) { answer }: CommunityQuestionFormDto,\n    @EventParams() eventArgs: ClientEvents['interactionCreate'],\n  ) {\n    const [modal] = eventArgs;\n    if (\n      !modal.isModalSubmit() ||\n      !modal.customId.startsWith('community-question')\n    )\n      return;\n    const questionId = modal.customId.split('-')[2];\n    const question = await this.prismaService.guildQuestion.findUnique({\n      where: {\n        id: parseInt(questionId),\n      },\n    });\n    await this.prismaService.guildQuestion.update({\n      where: {\n        id: parseInt(questionId),\n      },\n      data: {\n        answers: question.answers + 1,\n      },\n    });\n    await this.prismaService.guildQuestionAnswer.create({\n      data: {\n        answer: answer.value,\n        createdAt: new Date(),\n        guildQuestionId: parseInt(questionId),\n      },\n    });\n    if (answer.value != '')\n      (\n        (await (\n          await this.client.guilds.fetch(eventArgs[0].guildId)\n        ).channels.fetch('1195024829544411168')) as GuildTextBasedChannel\n      ).send({\n        embeds: [\n          new EmbedBuilder()\n            .setAuthor({\n              name: this.client.user.username,\n              iconURL: this.client.user.avatarURL(),\n              url: 'https://github.com/89Q12/Mega-Transformers-bot',\n            })\n            .addFields([\n              {\n                name: 'Antwort von nutzer:in',\n                value: answer.value,\n              },\n              {\n                name: 'Frage',\n                value: question.question,\n              },\n            ]),\n        ],\n      });\n    await modal.reply({ content: 'Antwort abgeschickt', ephemeral: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionDto.html":{"url":"classes/CommunityQuestionDto.html","title":"class - CommunityQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/commmunity-question.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'Description about the question displayed above the text input int the modal', type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/commmunity-question.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The question you want to ask the community', type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/commmunity-question.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { IsString } from 'class-validator';\n\nexport class CommunityQuestionDto {\n  @Param({\n    description: 'The question you want to ask the community',\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  question: string;\n\n  @Param({\n    description:\n      'Description about the question displayed above the text input int the modal',\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionFormDto.html":{"url":"classes/CommunityQuestionFormDto.html","title":"class - CommunityQuestionFormDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionFormDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/community-question.form.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                answer\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TextInputModalData\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field('answer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/community-question.form.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field } from '@discord-nestjs/core';\nimport { TextInputModalData } from 'discord.js';\n\nexport class CommunityQuestionFormDto {\n  @Field('answer')\n  answer: TextInputModalData;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiscordExecutionContext.html":{"url":"interfaces/DiscordExecutionContext.html","title":"interface - DiscordExecutionContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiscordExecutionContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/guards/user-is-unlocked.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ExecutionContext\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getMessage\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMessage\n                        \n                    \n                \n            \n            \n                \ngetMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/user-is-unlocked.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Message\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { Message } from 'discord.js';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\n\ninterface DiscordExecutionContext extends ExecutionContext {\n  getMessage(): Message;\n}\n@Injectable()\nexport class IsUserUnlockedGuard implements CanActivate {\n  constructor(\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n  ) {}\n  async canActivate(context: DiscordExecutionContext): Promise {\n    const message: Message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return message.member.roles.cache.has(\n      await this.settingsService.getVerifiedMemberRoleId(message.guildId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordGuildMember.html":{"url":"classes/DiscordGuildMember.html","title":"class - DiscordGuildMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordGuildMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/guild-member.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                    \n                                bot\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                communicationDisabledUntil\n                            \n                            \n                                    \n                                    \n                                displayName\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        communicationDisabledUntil\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()@IsOptional()@ApiPropertyOptional({type: String, format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiscordUser['id']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsDateString, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { DiscordUser } from './user';\n\nexport class DiscordGuildMember {\n  @IsString()\n  @ApiProperty({ type: String })\n  userId: DiscordUser['id'];\n  @IsString()\n  @ApiProperty({ type: String })\n  guildId: string;\n  @IsDateString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String, format: 'date-time' })\n  communicationDisabledUntil?: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  displayName: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  username: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  avatarUrl: string;\n  @IsBoolean()\n  @ApiProperty({ type: Boolean })\n  bot: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordUser.html":{"url":"classes/DiscordUser.html","title":"class - DiscordUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accentColor\n                            \n                            \n                                    \n                                    \n                                avatarURL\n                            \n                            \n                                    \n                                    \n                                bannerURL\n                            \n                            \n                                    \n                                    \n                                bot\n                            \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                discriminator\n                            \n                            \n                                    \n                                    \n                                displayAvatarURL\n                            \n                            \n                                    \n                                    \n                                flags\n                            \n                            \n                                    \n                                    \n                                hexAccentColor\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                system\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accentColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The accent color of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatarURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The avatar url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bannerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The banner url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the user is a bot', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The created timestamp of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        discriminator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The discriminator of the user but now ITS ALWAYS 0', example: '1234', deprecated: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        displayAvatarURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The display avatar url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The flags of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hexAccentColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The hex accent color of the user', example: '#000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the user', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        system\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the user is a system user', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The username of the user', example: 'John Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsNumber, IsString } from 'class-validator';\n\nclass DiscordUser {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the user',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The username of the user',\n    example: 'John Doe',\n  })\n  username: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The discriminator of the user but now ITS ALWAYS 0',\n    example: '1234',\n    deprecated: true,\n  })\n  discriminator: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The avatar url of the user',\n  })\n  avatarURL: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The display avatar url of the user',\n  })\n  displayAvatarURL: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The banner url of the user',\n  })\n  bannerURL: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the user is a bot',\n    example: false,\n  })\n  bot: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the user is a system user',\n    example: false,\n  })\n  system: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The flags of the user',\n    example: 0,\n  })\n  flags: number;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The created timestamp of the user',\n    example: 0,\n  })\n  createdTimestamp: number;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The accent color of the user',\n    example: 0,\n  })\n  accentColor: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The hex accent color of the user',\n    example: '#000000',\n  })\n  hexAccentColor: string;\n}\nconst userResponseSchema = {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    username: { type: 'string' },\n    discriminator: { type: 'string' },\n    avatarURL: { type: 'string' },\n    displayAvatarURL: { type: 'string' },\n    bannerURL: { type: 'string' },\n    bot: { type: 'boolean' },\n    system: { type: 'boolean' },\n    flags: { type: 'number' },\n    createdTimestamp: { type: 'number' },\n    accentColor: { type: 'number' },\n    hexAccentColor: { type: 'string' },\n  },\n};\nconst usersResponseSchema = {\n  type: 'array',\n  items: userResponseSchema,\n};\nexport { DiscordUser, userResponseSchema, usersResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DmMessageHandler.html":{"url":"injectables/DmMessageHandler.html","title":"injectable - DmMessageHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DmMessageHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/message-create/dm-message/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                dmMessageToModTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        dmMessageToModTeam\n                        \n                    \n                \n            \n            \n                \n                        \n                    dmMessageToModTeam(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageIsDmGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/dm-message/index.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DmMessageHandler.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/message-create/dm-message/index.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { On } from '@discord-nestjs/core';\nimport { Injectable, Logger, UseGuards } from '@nestjs/common';\nimport {\n  Message,\n  ActionRowBuilder,\n  ButtonBuilder,\n  DiscordAPIError,\n} from 'discord.js';\nimport { MessageIsDmGuard } from 'src/bot/guards/message-is-dm.guard';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Injectable()\nexport class DmMessageHandler {\n  logger = new Logger(DmMessageHandler.name);\n\n  @On('messageCreate')\n  @UseGuards(MessageIsDmGuard)\n  async dmMessageToModTeam(message: Message): Promise {\n    try {\n      await message.reply({\n        content:\n          'Ich bin zwar nur ein Bot und kann kein Koverstionen führen, aber ich kann dir helfen. Klicke auf den Button, um Hilfe zu bekommen.',\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n    } catch (e: unknown) {\n      this.logger.error((e as DiscordAPIError).message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditRoleData.html":{"url":"classes/EditRoleData.html","title":"class - EditRoleData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditRoleData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                color\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                hoist\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                icon\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                mentionable\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                permissions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                position\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                unicodeEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ColorResolvable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(undefined)@ApiProperty({enum: Colors, required: false, example: 'White', examples: undefined, description: 'New color of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        hoist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Whether or not the role should be hoisted'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:160\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Base64Resolvable | EmojiResolvable | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New Icon of the role, base64 encoded string', externalDocs: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:203\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        mentionable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Should the role be mentionable or not'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:190\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New name of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PermissionResolvable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(undefined)@IsOptional()@ApiProperty({type: undefined, required: false, description: 'Updated Permission', default: undefined, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({type: Number, required: false, description: 'The position of the role; Higher = more permissions relative to the role below'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, required: true, description: 'Why was the role updated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        unicodeEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'The new unicodeEmoji of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:212\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nimport {\n  Base64Resolvable,\n  ColorResolvable,\n  Colors,\n  EmojiResolvable,\n  PermissionFlagsBits,\n  PermissionResolvable,\n} from 'discord.js';\n\nclass RoleResponse {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild the api belongs to',\n    example: '123456789012345678',\n  })\n  guild: string;\n\n  @IsUrl()\n  @ApiProperty({\n    type: String,\n    description: 'The icon of the role',\n    example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n  })\n  icon: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The unicodeEmoji of the role',\n    example: '👑',\n  })\n  unicodeEmoji: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the role',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The name of the role',\n    example: 'Admin',\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The color of the role',\n    example: 0,\n  })\n  color: number;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is hoisted',\n    example: false,\n  })\n  hoist: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The position of the role',\n    example: 0,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The permissions of the role',\n    example: '0',\n  })\n  permissions: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is managed by an integration',\n    example: false,\n  })\n  managed: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is mentionable',\n    example: false,\n  })\n  mentionable: boolean;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The tags of the role',\n    example: null,\n  })\n  tags: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The timestamp the role was created at(Unixtimestamp)',\n    example: 1600000000000,\n  })\n  createdTimestamp: number;\n}\n\nclass EditRoleData {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsIn(Object.keys(Colors))\n  @ApiProperty({\n    enum: Colors,\n    required: false,\n    example: 'White',\n    examples: Object.keys(Colors),\n    description: 'New color of the role',\n  })\n  color?: ColorResolvable;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'Why was the role updated',\n  })\n  reason: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Whether or not the role should be hoisted',\n  })\n  hoist?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description:\n      'The position of the role; Higher = more permissions relative to the role below',\n  })\n  position?: number;\n\n  @IsIn(Object.keys(PermissionFlagsBits))\n  @IsOptional()\n  @ApiProperty({\n    type: Array,\n    required: false,\n    description: 'Updated Permission',\n    default: null,\n    example: ['AddReactions', 'KickMembers'],\n  })\n  permissions?: PermissionResolvable;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the role be mentionable or not',\n  })\n  mentionable?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New Icon of the role, base64 encoded string',\n    externalDocs: {\n      description: 'Discord.js docs',\n      url: 'https://old.discordjs.dev/#/docs/discord.js/main/class/Role?scrollTo=setIcon',\n    },\n  })\n  icon?: Base64Resolvable | EmojiResolvable | null;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'The new unicodeEmoji of the role',\n  })\n  unicodeEmoji?: string | null;\n}\n// Generate example schema for get /guilds/:guildId/roles/:roleId\nconst roleResponseSchema = {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n};\n// Schema for retrieving all roles from a guild with example data\nconst rolesResponseSchema = {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n};\n\n// Write exports here\nexport { RoleResponse, EditRoleData, roleResponseSchema, rolesResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventToLog.html":{"url":"interfaces/EventToLog.html","title":"interface - EventToLog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventToLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/interfaces/event-to-log.ts\n        \n\n\n            \n                Description\n            \n            \n                Thrown events that implement this can be used to pretty print into the application log\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toFormattedLog\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/interfaces/event-to-log.ts:11\n                        \n                    \n\n\n            \n                \n                        Pretty print function on thrown events within the app, not all events implement this!!\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Logger which is used for logging to the nestjs app log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\n\n/**\n * Thrown events that implement this can be used to pretty print into the application log\n */\nexport interface EventToLog {\n  /**\n   * Pretty print function on thrown events within the app, not all events implement this!!\n   * @param logger Logger which is used for logging to the nestjs app log\n   */\n  toFormattedLog(logger: Logger): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Explorer.html":{"url":"classes/Explorer.html","title":"class - Explorer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Explorer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/explorers/event.explorer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                botEventDecorator\n                            \n                            \n                                    Public\n                                checkProviders\n                            \n                            \n                                    Private\n                                hasHandlerMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, externalContextCreator: ExternalContextCreator)\n                    \n                \n                        \n                            \n                                Defined in src/bot/explorers/event.explorer.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        externalContextCreator\n                                                  \n                                                        \n                                                                    ExternalContextCreator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        botEventDecorator\n                        \n                    \n                \n            \n            \n                \n                        \n                    botEventDecorator(provider: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        checkProviders\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkProviders(providers: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                providers\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasHandlerMethod\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasHandlerMethod(provider: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\nimport {\n  BOT_EVENT_KEY,\n  BOT_EVENT_HANDLER_NAME,\n} from '../decorators/bot-event.decorator';\nimport { ExternalContextCreator } from '@nestjs/core';\n\nexport class Explorer {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    private readonly externalContextCreator: ExternalContextCreator,\n  ) {}\n  public checkProviders(providers: any[]): void {\n    for (const provider of providers) {\n      const metadata = this.botEventDecorator(provider);\n      if (metadata) {\n        if (!this.hasHandlerMethod(provider)) {\n          throw new Error(\n            `The provider ${provider.name} does not have a handler method, does it implement BotEvent?`,\n          );\n        }\n        const handler = this.externalContextCreator.create(\n          provider,\n          provider[BOT_EVENT_HANDLER_NAME],\n          BOT_EVENT_HANDLER_NAME,\n        );\n        this.client.on(metadata, handler);\n      }\n    }\n  }\n\n  private botEventDecorator(provider: any) {\n    return Reflect.getMetadata(BOT_EVENT_KEY, provider);\n  }\n\n  private hasHandlerMethod(provider: any): boolean {\n    return (\n      provider.prototype.hasOwnProperty(BOT_EVENT_HANDLER_NAME) &&\n      typeof provider.prototype.handler === 'function'\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Guild.html":{"url":"classes/Guild.html","title":"class - Guild","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Guild\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                guildId\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['guildId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { GuildUser } from '@prisma/client';\n\nexport class Guild {\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) name: string;\n  @ApiProperty({ type: String }) image: string;\n}\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n  @ApiPropertyOptional({ type: [Guild] }) guilds: Guild[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildAutoDeleteChannelController.html":{"url":"controllers/GuildAutoDeleteChannelController.html","title":"controller - GuildAutoDeleteChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildAutoDeleteChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                autodeletechannel\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createAutoDeleteChannel\n                            \n                            \n                                    \n                                    Async\n                                getAutoDeleteChannel\n                            \n                            \n                                    \n                                    Async\n                                updateAutoDeleteChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAutoDeleteChannel(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAutoDeleteChannel(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAutoDeleteChannel(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { GuildAutoDeleteChannelService } from './guild-auto-delete-channel.service';\nimport { GuildAutoDeleteChannelDto } from './dto/auto-delete-channels.dto';\nimport { plainToInstance } from 'class-transformer';\n\n@Controller('autodeletechannel')\nexport class GuildAutoDeleteChannelController {\n  constructor(\n    @Inject(GuildAutoDeleteChannelService)\n    private readonly guildAutoDeleteChannelService: GuildAutoDeleteChannelService,\n  ) {}\n\n  @Get()\n  async getAutoDeleteChannel(@Param('guildId') guildId: string) {\n    const autoDeleteChannels =\n      await this.guildAutoDeleteChannelService.get(guildId);\n    if (!autoDeleteChannels) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, autoDeleteChannels);\n  }\n\n  @Post()\n  async createAutoDeleteChannel(\n    @Param('guildId') guildId: string,\n    @Body() autoDeleteChannel: GuildAutoDeleteChannelDto,\n  ) {\n    this.guildAutoDeleteChannelService.get(guildId).then(() => {\n      throw new ConflictException(\n        `Channel ${channel.channelId} already exists`,\n      );\n    });\n    const channel = await this.guildAutoDeleteChannelService.upsert(\n      guildId,\n      autoDeleteChannel,\n    );\n    if (!channel) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, channel);\n  }\n\n  @Put()\n  async updateAutoDeleteChannel(\n    @Param('guildId') guildId: string,\n    @Body() autoDeleteChannel: GuildAutoDeleteChannelDto,\n  ) {\n    const channel = await this.guildAutoDeleteChannelService.upsert(\n      guildId,\n      autoDeleteChannel,\n    );\n    if (!channel) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, channel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildAutoDeleteChannelDto.html":{"url":"classes/GuildAutoDeleteChannelDto.html","title":"class - GuildAutoDeleteChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildAutoDeleteChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                    \n                                deleteAtCron\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deleteAtCron\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(/^(((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7}$/, {message: 'Invalid cron expression'})@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { AutoDeleteChannels } from '@prisma/client';\nimport { IsString, Matches } from 'class-validator';\n\nexport class GuildAutoDeleteChannelDto\n  implements Omit\n{\n  @IsString()\n  @ApiProperty({ type: String })\n  channelId: string;\n  @IsString()\n  @Matches(/^(((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7}$/, {\n    message: 'Invalid cron expression',\n  })\n  @ApiProperty({ type: String })\n  deleteAtCron: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildAutoDeleteChannelModule.html":{"url":"modules/GuildAutoDeleteChannelModule.html","title":"module - GuildAutoDeleteChannelModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildAutoDeleteChannelModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildAutoDeleteChannelModule\n\n\n\ncluster_GuildAutoDeleteChannelModule_exports\n\n\n\ncluster_GuildAutoDeleteChannelModule_providers\n\n\n\n\nGuildAutoDeleteChannelService \n\nGuildAutoDeleteChannelService \n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelService  -->\n\nGuildAutoDeleteChannelModule->GuildAutoDeleteChannelService \n\n\n\n\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildAutoDeleteChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildRestrictedChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nGuildAutoDeleteChannelModule -->\n\nGuildService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildAutoDeleteChannelModule -->\n\nGuildSettingsService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nGuildAutoDeleteChannelModule -->\n\nGuildUserService->GuildAutoDeleteChannelModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildAutoDeleteChannelModule -->\n\nPrismaService->GuildAutoDeleteChannelModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nGuildAutoDeleteChannelModule -->\n\nTasksService->GuildAutoDeleteChannelModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildAutoDeleteChannelService\n                        \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildAutoDeleteChannelController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildAutoDeleteChannelService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildAutoDeleteChannelService } from './guild-auto-delete-channel.service';\nimport { GuildAutoDeleteChannelController } from './guild-auto-delete-channel.controller';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\nimport { TasksService } from 'src/tasks/tasks.service';\nimport { GuildService } from '../guild.service';\nimport { GuildUserService } from '../guild-user/guild-user.service';\nimport { GuildRestrictedChannelService } from '../guild-restricted-channel/guild-restricted-channel.service';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [\n    GuildAutoDeleteChannelService,\n    PrismaService,\n    TasksService,\n    GuildService,\n    GuildUserService,\n    GuildRestrictedChannelService,\n    GuildSettingsService,\n  ],\n  controllers: [GuildAutoDeleteChannelController],\n  exports: [GuildAutoDeleteChannelService],\n})\nexport class GuildAutoDeleteChannelModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildAutoDeleteChannelService.html":{"url":"injectables/GuildAutoDeleteChannelService.html","title":"injectable - GuildAutoDeleteChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildAutoDeleteChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                constructChannelDeleteJobs\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService, tasksService: TasksService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tasksService\n                                                  \n                                                        \n                                                                        TasksService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        constructChannelDeleteJobs\n                        \n                    \n                \n            \n            \n                \n                        \n                    constructChannelDeleteJobs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GuildAutoDeleteChannelService.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Client, GuildChannel } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { TasksService } from 'src/tasks/tasks.service';\nimport { GuildAutoDeleteChannelDto } from './dto/auto-delete-channels.dto';\n\n@Injectable()\nexport class GuildAutoDeleteChannelService {\n  logger = new Logger(GuildAutoDeleteChannelService.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(TasksService) private tasksService: TasksService,\n  ) {}\n  async get(guildId: string) {\n    return await this.database.autoDeleteChannels.findMany({\n      where: { guildId },\n    });\n  }\n  async upsert(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto) {\n    const channelId = autoDeleteChannel.channelId;\n    return this.database.autoDeleteChannels.upsert({\n      where: {\n        channelId,\n        guildId,\n      },\n      create: {\n        ...autoDeleteChannel,\n        guildId,\n      },\n      update: {\n        ...autoDeleteChannel,\n        guildId,\n      },\n    });\n  }\n\n  async constructChannelDeleteJobs() {\n    const guilds = await this.database.guild.findMany({\n      select: {\n        AutoDeleteChannels: true,\n      },\n    });\n    guilds.forEach((guild) => {\n      guild.AutoDeleteChannels.forEach((deleteChannel) => {\n        this.tasksService.createDynamicScheduledJob({\n          cronTime: deleteChannel.deleteAtCron,\n          onTick: async () => {\n            const channelId = deleteChannel.channelId;\n            const guildId = deleteChannel.guildId;\n            this.logger.log(\n              `Deleting channel ${channelId} in guild ${guildId}`,\n            );\n            const guild = await this.client.guilds.fetch(guildId);\n            const channel = (await guild.channels.fetch(\n              channelId,\n            )) as GuildChannel;\n            const nChannel = await channel.clone();\n            await channel.delete();\n            Promise.all([\n              nChannel.setPosition(channel.position),\n              nChannel.setParent(channel.parentId),\n              nChannel.setName(channel.name),\n            ]);\n          },\n          timeZone: 'Europe/Berlin',\n        });\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildChannelEditOptions.html":{"url":"classes/GuildChannelEditOptions.html","title":"class - GuildChannelEditOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildChannelEditOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nsfw\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                parent\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                topic\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                userLimit\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New name of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nsfw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Should the channel be NSFW'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:189\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryChannelResolvable | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['String', 'undefined', 'CategoryChannel'])@IsOptional()@ApiProperty({type: undefined, required: false, description: 'Category of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, required: false, description: 'Why was the channel updated/created'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:215\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'Topic of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:180\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChannelType.GuildText | ChannelType.GuildAnnouncement\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ChannelType)@IsOptional()@ApiProperty({enum: ChannelType, required: false, description: 'Change the type of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        userLimit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({type: Number, required: false, description: 'Slowmode for the channel in seconds'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:198\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildController.html":{"url":"controllers/GuildController.html","title":"controller - GuildController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                messagesPerChannelLastMonth\n                            \n                            \n                                    \n                                    Async\n                                messagesPerDayLastMonth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        messagesPerChannelLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    messagesPerChannelLastMonth(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('messages-per-channel-last-month')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        messagesPerDayLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    messagesPerDayLastMonth(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('messages-per-day-last-month')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, Param, UseGuards } from '@nestjs/common';\nimport { GuildService } from './guild.service';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\n\n@Controller('/')\n@UseGuards(JwtAuthGuard)\nexport class GuildController {\n  constructor(\n    @Inject(GuildService) private guildService: GuildService,\n    @InjectDiscordClient() private client: Client,\n  ) {}\n\n  @Get('messages-per-channel-last-month')\n  async messagesPerChannelLastMonth(@Param('guildId') guildId: string) {\n    const data =\n      await this.guildService.averageMessagesPerChannelLastMonth(guildId);\n    const labels = [];\n    const values = Object.values(data);\n    Object.keys(data).forEach(async (key) => {\n      labels.push(\n        (await (await this.client.guilds.fetch(guildId)).channels.fetch(key))\n          .name,\n      );\n    });\n    return {\n      labels,\n      values,\n    };\n  }\n  @Get('messages-per-day-last-month')\n  async messagesPerDayLastMonth(@Param('guildId') guildId: string) {\n    const data =\n      await this.guildService.averageMessagesPerDayLastMonth(guildId);\n    const labels = [];\n    const values = Object.values(data);\n    Object.keys(data).forEach((key) => {\n      labels.push(key);\n    });\n    return {\n      labels,\n      values,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildDoesNotExistException.html":{"url":"classes/GuildDoesNotExistException.html","title":"class - GuildDoesNotExistException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildDoesNotExistException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/guild-does-not-exist-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when a Guild isn't found by ID\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/guild-does-not-exist-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a Guild isn't found by ID\n */\nexport class GuildDoesNotExistException extends Error {\n  constructor(guildId: string) {\n    super(\n      `Guild with the id ${guildId} does not exist or is not using Cardinal System.`,\n    );\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(GuildDoesNotExistException)\nexport class GuildDoesNotExistExceptionFilter implements ExceptionFilter {\n  catch(exception: GuildDoesNotExistException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildDoesNotExistExceptionFilter.html":{"url":"classes/GuildDoesNotExistExceptionFilter.html","title":"class - GuildDoesNotExistExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildDoesNotExistExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/guild-does-not-exist-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to produce the http response when the exception is thrown in a http context\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: GuildDoesNotExistException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/guild-does-not-exist-exception.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            GuildDoesNotExistException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a Guild isn't found by ID\n */\nexport class GuildDoesNotExistException extends Error {\n  constructor(guildId: string) {\n    super(\n      `Guild with the id ${guildId} does not exist or is not using Cardinal System.`,\n    );\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(GuildDoesNotExistException)\nexport class GuildDoesNotExistExceptionFilter implements ExceptionFilter {\n  catch(exception: GuildDoesNotExistException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildMemberEvents.html":{"url":"injectables/GuildMemberEvents.html","title":"injectable - GuildMemberEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildMemberEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/guild-members/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addMember\n                            \n                            \n                                    \n                                    \n                                    Async\n                                checkIfPersonWasVerifiedBefore\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    \n                                    Async\n                                removeMember\n                            \n                            \n                                    \n                                    \n                                    Async\n                                unlockUser\n                            \n                            \n                                    \n                                    Async\n                                updateRank\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, guildUserService: GuildUserService, settingsService: GuildSettingsService, guildService: GuildService, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/guild-members/index.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(member: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberAdd')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        checkIfPersonWasVerifiedBefore\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfPersonWasVerifiedBefore(reaction: MessageReaction, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageReactionAdd')@UseGuards(undefined, undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:143\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                        MessageReaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeMember(member: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberRemove')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        unlockUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unlockUser(reaction: MessageReaction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageReactionAdd')@UseGuards(undefined, undefined, ReactedMemberIsModOrHigherGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                        MessageReaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateRank\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRank(oldMember: GuildMember, newMember: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberUpdate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldMember\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newMember\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GuildMemberEvents.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/guild-members/index.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, On } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger, UseGuards } from '@nestjs/common';\nimport { Rank } from '@prisma/client';\nimport {\n  Client,\n  GuildMember,\n  MessageReaction,\n  GuildTextBasedChannel,\n  Message,\n  User,\n} from 'discord.js';\nimport { ReactedMemberIsModOrHigherGuard } from 'src/bot/guards/member-is-mod-or-higher.guard';\nimport { ReactionChannelIdGuard } from 'src/bot/guards/reaction-in-channel.guard';\nimport { ReactionEmoteGuard } from 'src/bot/guards/reaction-emote.guard';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { JsonArray } from 'type-fest';\n\n@Injectable()\nexport class GuildMemberEvents {\n  logger = new Logger(GuildMemberEvents.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n    @Inject(GuildService) private readonly guildService: GuildService,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n\n  // Runs whenever the discordjs websocket gets recreated\n  @On('ready')\n  async onReady(): Promise {\n    await this.client.guilds.fetch();\n    this.client.guilds.cache.forEach(async (guild) => {\n      await this.guildService.upsertGuild(guild.id, {\n        name: guild.name,\n      });\n      this.guildUserService.addMembers(guild.id);\n    });\n  }\n\n  @On('guildMemberAdd')\n  async addMember(member: GuildMember) {\n    this.logger.log(`Adding member ${member.user.username} to database.`);\n    if (member.user.bot) return;\n    await this.guildUserService.addMember(member.id, member.guild.id, {\n      rank: Rank.NEW,\n      unlocked: false,\n    });\n  }\n\n  @On('guildMemberRemove')\n  async removeMember(member: GuildMember) {\n    await this.guildUserService.deleteOne(member.id, member.guild.id);\n  }\n\n  @On('messageReactionAdd')\n  @UseGuards(\n    ReactionChannelIdGuard('1121822614374060175'),\n\n    ReactionEmoteGuard(['✅', '☑️']),\n    ReactedMemberIsModOrHigherGuard,\n  )\n  async unlockUser(reaction: MessageReaction) {\n    if (reaction.partial) {\n      try {\n        await reaction.fetch();\n      } catch (e) {\n        this.logger.error(e);\n        return;\n      }\n    }\n    const user = await this.guildUserService.getGuildUser(\n      reaction.message.author.id,\n      reaction.message.guildId,\n    );\n    if (!user && user.rank !== Rank.NEW) return;\n    await this.guildUserService.upsert(user.userId, reaction.message.guildId, {\n      unlocked: true,\n      firstMessageId: reaction.message.id,\n    });\n    const member = await (\n      await this.client.guilds.fetch(reaction.message.guildId)\n    ).members.fetch(user.userId);\n    try {\n      if (!member.roles.cache.has('1226585753253843014'))\n        throw 'Has not accepted AGB';\n      const verifiedRoleId = await this.settingsService.getVerifiedMemberRoleId(\n        reaction.message.guildId,\n      );\n      await member.roles.add(verifiedRoleId);\n      if (reaction.emoji.name === '☑️')\n        await member.roles.add('1014066383912439809');\n      // Wait 500ms to make sure the role is added before removing the unverified role\n      //https://github.com/discordjs/discord.js/issues/4930#issuecomment-1042351896\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      await member.roles.remove(\n        await this.settingsService.getUnverifiedMemberRoleId(\n          reaction.message.guildId,\n        ),\n      );\n    } catch (e) {\n      this.logger.error(e);\n      return;\n    }\n    const channel = (await reaction.message.guild.channels.fetch(\n      await this.settingsService.getOpenIntroChannelId(\n        reaction.message.guildId,\n      ),\n    )) as GuildTextBasedChannel;\n    await channel.send(\n      await this.settingsService.templateMessage(\n        reaction.message as Message,\n      ),\n    );\n    await reaction.remove();\n  }\n\n  @On('guildMemberUpdate')\n  async updateRank(oldMember: GuildMember, newMember: GuildMember) {\n    // check if user has been promoted to mod or admin\n    const oldRank = await this.guildUserService.getRank(oldMember);\n    const newRank = await this.guildUserService.getRank(newMember);\n    if (oldRank === newRank) return;\n    this.logger.log(\n      `User ${newMember.user.username} has been promoted from ${oldRank} to ${newRank}`,\n    );\n    await this.guildUserService.upsert(newMember.id, newMember.guild.id, {\n      rank: newRank,\n    });\n  }\n\n  @On('messageReactionAdd')\n  @UseGuards(\n    ReactionChannelIdGuard('1226574989147508746'),\n    ReactionEmoteGuard(['👍']),\n  )\n  async checkIfPersonWasVerifiedBefore(reaction: MessageReaction, user: User) {\n    if (reaction.partial) {\n      try {\n        await reaction.fetch();\n      } catch (e) {\n        this.logger.error(e);\n        return;\n      }\n    }\n    const dbUser = await this.database.guildUser.findUnique({\n      where: {\n        guildId_userId: { guildId: reaction.message.guildId, userId: user.id },\n      },\n    });\n    const discordUser = await this.client.guilds.cache\n      .get(dbUser.guildId)\n      .members.fetch(user.id);\n    if (!dbUser && discordUser.roles.cache.has('1121823930085285938')) {\n      const roles = (\n        await this.database.lockdownRoleBackup.findUnique({\n          where: {\n            guildId_userId: { guildId: dbUser.guildId, userId: user.id },\n          },\n        })\n      ).roles as JsonArray;\n      if (!roles) return;\n      // Tyep system gets a bit iffy here :/\n      roles.forEach(\n        async (role: { id: string }) => await discordUser.roles.add(role.id),\n      );\n      await discordUser.roles.remove('1121823930085285938');\n      await this.database.lockdownRoleBackup.delete({\n        where: { guildId_userId: { userId: user.id, guildId: dbUser.guildId } },\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildMessageHandler.html":{"url":"injectables/GuildMessageHandler.html","title":"injectable - GuildMessageHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildMessageHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/message-create/guild-message/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                onMessage\n                            \n                            \n                                    \n                                    \n                                    Async\n                                toniMsgsToBird\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildUserService: GuildUserService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/message-create/guild-message/index.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageFromUserGuard, IsUserUnlockedGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/guild-message/index.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        toniMsgsToBird\n                        \n                    \n                \n            \n            \n                \n                        \n                    toniMsgsToBird(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageFromUserGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/guild-message/index.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { On } from '@discord-nestjs/core';\nimport { Inject, Injectable, UseGuards } from '@nestjs/common';\nimport { Attachment, GuildTextBasedChannel, Message } from 'discord.js';\nimport { MessageFromUserGuard } from 'src/bot/guards/message-from-user.guard';\nimport { IsUserUnlockedGuard } from 'src/bot/guards/user-is-unlocked.guard';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport getAttachmentType from 'src/util/functions/get-attachtment-type';\n\n@Injectable()\nexport default class GuildMessageHandler {\n  constructor(\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n  ) {}\n  @On('messageCreate')\n  @UseGuards(MessageFromUserGuard, IsUserUnlockedGuard)\n  async onMessage(message: Message): Promise {\n    await this.guildUserService.insertMessage(\n      {\n        userId: message.author.id,\n        messageId: message.id,\n        channelId: message.channelId,\n        guildId: message.guildId,\n        createdAt: new Date(message.createdTimestamp),\n      },\n      {\n        messageId: message.id,\n        length: message.content.length,\n      },\n      message.attachments.map((attachment: Attachment) => {\n        return {\n          type: getAttachmentType(attachment.contentType),\n          url: attachment.url,\n          messageId: message.id,\n        };\n      }),\n      message.reactions.cache.map((reaction) => {\n        return {\n          messageId: message.id,\n          emoji: reaction.emoji.toString(),\n          count: reaction.count,\n        };\n      }),\n    );\n    await this.guildUserService.updateMessageCountBucket(\n      message.author.id,\n      message.guildId,\n    );\n  }\n\n  @On('messageCreate')\n  @UseGuards(MessageFromUserGuard)\n  async toniMsgsToBird(message: Message): Promise {\n    const channel = message.channel as GuildTextBasedChannel;\n    if (\n      channel.parentId !== '1011529685357838376' &&\n      channel.parentId !== '1051979218164125826'\n    ) {\n      if (message.author.id === '1132244079242133555')\n        message.react('1194715694948946030');\n    }\n  }\n\n  // @On('messageCreate')\n  // @UseGuards(MessageFromUserGuard)\n  // async checkLimits(message: Message) {\n  //   const guildUser = this.guildUserService.getGuildUser(\n  //     message.author.id,\n  //     message.guildId,\n  //   );\n  //   const hasAttachments = message.attachments.size > 0;\n  //   const typeOfAttachments = message.attachments.map(\n  //     (attachment: Attachment) => {\n  //       return ({}[getAttachmentType(attachment.contentType)] = attachment);\n  //     },\n  //   );\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildModule.html":{"url":"modules/GuildModule.html","title":"module - GuildModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildModule\n\n\n\ncluster_GuildModule_providers\n\n\n\ncluster_GuildModule_exports\n\n\n\ncluster_GuildModule_imports\n\n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\n\n\nGuildModule\n\nGuildModule\n\nGuildModule -->\n\nGuildAutoDeleteChannelModule->GuildModule\n\n\n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildModule -->\n\nGuildRestrictedChannelModule->GuildModule\n\n\n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildModule -->\n\nGuildSettingsModule->GuildModule\n\n\n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildModule -->\n\nGuildUserModule->GuildModule\n\n\n\n\n\nModerationModule\n\nModerationModule\n\nGuildModule -->\n\nModerationModule->GuildModule\n\n\n\n\n\nGuildService \n\nGuildService \n\nGuildService  -->\n\nGuildModule->GuildService \n\n\n\n\n\nDmMessageHandler\n\nDmMessageHandler\n\nGuildModule -->\n\nDmMessageHandler->GuildModule\n\n\n\n\n\nGuildMemberEvents\n\nGuildMemberEvents\n\nGuildModule -->\n\nGuildMemberEvents->GuildModule\n\n\n\n\n\nGuildMessageHandler\n\nGuildMessageHandler\n\nGuildModule -->\n\nGuildMessageHandler->GuildModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildModule -->\n\nGuildRestrictedChannelService->GuildModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nGuildModule -->\n\nGuildService->GuildModule\n\n\n\n\n\nModRequestFlow\n\nModRequestFlow\n\nGuildModule -->\n\nModRequestFlow->GuildModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildModule -->\n\nPrismaService->GuildModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DmMessageHandler\n                        \n                        \n                            GuildMemberEvents\n                        \n                        \n                            GuildMessageHandler\n                        \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            ModRequestFlow\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GuildAutoDeleteChannelModule\n                        \n                        \n                            GuildRestrictedChannelModule\n                        \n                        \n                            GuildSettingsModule\n                        \n                        \n                            GuildUserModule\n                        \n                        \n                            ModerationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildController } from './guild.controller';\nimport { GuildService } from './guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildSettingsModule } from './guild-settings/guild-settings.module';\nimport { ModerationModule } from './moderation/moderation.module';\nimport { GuildUserModule } from './guild-user/guild-user.module';\nimport { GuildAutoDeleteChannelModule } from './guild-auto-delete-channel/guild-auto-delete-channel.module';\nimport { GuildRestrictedChannelModule } from './guild-restricted-channel/guild-restricted-channel.module';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel/guild-restricted-channel.service';\nimport GuildMessageHandler from './events/message-create/guild-message';\nimport { DmMessageHandler } from './events/message-create/dm-message';\nimport { ModRequestFlow } from './events/interaction-create/mod-request-menu';\nimport { GuildMemberEvents } from './events/guild-members';\n\n@Module({\n  imports: [\n    DiscordModule.forFeature(),\n    GuildUserModule,\n    GuildSettingsModule,\n    ModerationModule,\n    GuildAutoDeleteChannelModule,\n    GuildRestrictedChannelModule,\n  ],\n  controllers: [GuildController],\n  providers: [\n    GuildService,\n    PrismaService,\n    GuildRestrictedChannelService,\n    GuildMessageHandler,\n    DmMessageHandler,\n    ModRequestFlow,\n    GuildMemberEvents,\n  ],\n  exports: [GuildService],\n})\nexport class GuildModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildRestrictedChannelController.html":{"url":"controllers/GuildRestrictedChannelController.html","title":"controller - GuildRestrictedChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildRestrictedChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                guild-restricted-channel\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('guild-restricted-channel')\nexport class GuildRestrictedChannelController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildRestrictedChannelModule.html":{"url":"modules/GuildRestrictedChannelModule.html","title":"module - GuildRestrictedChannelModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildRestrictedChannelModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildRestrictedChannelModule\n\n\n\ncluster_GuildRestrictedChannelModule_exports\n\n\n\ncluster_GuildRestrictedChannelModule_providers\n\n\n\n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService \n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelService  -->\n\nGuildRestrictedChannelModule->GuildRestrictedChannelService \n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelModule -->\n\nGuildRestrictedChannelService->GuildRestrictedChannelModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildRestrictedChannelModule -->\n\nPrismaService->GuildRestrictedChannelModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildRestrictedChannelController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildRestrictedChannelController } from './guild-restricted-channel.controller';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  controllers: [GuildRestrictedChannelController],\n  providers: [GuildRestrictedChannelService, PrismaService],\n  exports: [GuildRestrictedChannelService],\n})\nexport class GuildRestrictedChannelModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildRestrictedChannelService.html":{"url":"injectables/GuildRestrictedChannelService.html","title":"injectable - GuildRestrictedChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildRestrictedChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getRestrictedChannel\n                            \n                            \n                                    Async\n                                isChannelAvailableToUser\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRestrictedChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRestrictedChannel(guildId: string, channelId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isChannelAvailableToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    isChannelAvailableToUser(user: GuildUser, channel: RestrictedChannels)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            GuildUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel\n                                            \n                                                            RestrictedChannels\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(guildId: string, channelId: string, data: Omit, guildId> | channelId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, guildId> | channelId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { GuildUser, RestrictedChannels } from '@prisma/client';\nimport { Client } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Injectable()\nexport class GuildRestrictedChannelService {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  async getRestrictedChannel(guildId: string, channelId: string) {\n    return this.database.restrictedChannels.findUnique({\n      where: {\n        guildId,\n        channelId,\n      },\n    });\n  }\n  async upsert(\n    guildId: string,\n    channelId: string,\n    data: Omit, 'guildId'>, 'channelId'>,\n  ) {\n    return this.database.restrictedChannels.upsert({\n      where: {\n        channelId,\n        guildId,\n      },\n      create: {\n        ...data,\n        channelId,\n        guildId,\n      },\n      update: {\n        ...data,\n        channelId,\n        guildId,\n      },\n    });\n  }\n  async getAll(guildId: string) {\n    return this.database.restrictedChannels.findMany({\n      where: {\n        guildId,\n      },\n    });\n  }\n\n  async isChannelAvailableToUser(user: GuildUser, channel: RestrictedChannels) {\n    return user.messageCountBucket >= channel.requiredPoints;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildService.html":{"url":"injectables/GuildService.html","title":"injectable - GuildService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _addMemberToChannelOverwrite\n                            \n                            \n                                    Private\n                                    Async\n                                _removeMemberFromChannelOverwrite\n                            \n                            \n                                    Async\n                                averageMessagesPerChannelLastMonth\n                            \n                            \n                                    Async\n                                averageMessagesPerDayLastMonth\n                            \n                            \n                                    Async\n                                cleanWfpMembers\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    Async\n                                updateChannelPermissions\n                            \n                            \n                                    Async\n                                upsertGuild\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, restrictedChannelService: GuildRestrictedChannelService, client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        restrictedChannelService\n                                                  \n                                                        \n                                                                        GuildRestrictedChannelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _addMemberToChannelOverwrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    _addMemberToChannelOverwrite(user_id: string, channel_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _removeMemberFromChannelOverwrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    _removeMemberFromChannelOverwrite(user_id: string, channel_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:229\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        averageMessagesPerChannelLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    averageMessagesPerChannelLastMonth(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Returns the average written messages per channel for last 30 days for the given guild.\nSQL:\n SELECT\n  m.channelId,\n  m.userId,\n  COUNT(m.messageId) AS messageCount,\n  AVG(subquery.messageCount) AS avgMessageCount\nFROM\n  Message m\nJOIN\n  (SELECT channelId, COUNT(messageId) / 30 AS messageCount\n  FROM Message\n  WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\n  GROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\nWHERE\n  m.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY\n  m.channelId, m.userId\nORDER BY\n avgMessageCount DESC;\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A map that contains each channel ID and the average written messages\nSQL:\nSELECT\nm.channelId,\nm.userId,\nCOUNT(m.messageId) AS messageCount,\nAVG(subquery.messageCount) AS avgMessageCount\nFROM\nMessage m\nJOIN\n(SELECT channelId, COUNT(messageId) / 30 AS messageCount\nFROM Message\nWHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\nGROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\nWHERE\nm.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY\nm.channelId, m.userId\nORDER BY\navgMessageCount DESC;\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        averageMessagesPerDayLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    averageMessagesPerDayLastMonth(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:165\n                        \n                    \n\n\n            \n                \n                        Returns the average written message per day in the last 30 days per channel\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanWfpMembers(guildID: string, dryRun: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                guildID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                dryRun\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Once('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:242\n                        \n                    \n\n\n            \n                \n                        Event handler that listens to the ready event which is fired when the bot websocket has been created.\nSets up all guilds in the database if they dont already exist there or updates them.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateChannelPermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateChannelPermissions(user: GuildUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            GuildUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsertGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsertGuild(guildId: string, data: Omit | id>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit | id>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, Once } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { Guild, GuildUser } from '@prisma/client';\nimport { Client, BaseGuildTextChannel, GuildMember } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel/guild-restricted-channel.service';\n\n@Injectable()\nexport class GuildService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(GuildRestrictedChannelService)\n    private restrictedChannelService: GuildRestrictedChannelService,\n    @InjectDiscordClient() private client: Client,\n  ) {}\n\n  async upsertGuild(guildId: string, data: Omit, 'id'>) {\n    return await this.database.guild.upsert({\n      where: {\n        id: guildId,\n      },\n      select: {\n        AuditLog: true,\n        Settings: true,\n        AutoDeleteChannels: true,\n        RestrictedChannels: true,\n        Limits: true,\n      },\n      create: {\n        id: guildId,\n        Settings: {\n          create: {},\n        },\n        ...data,\n      },\n      update: {\n        ...data,\n      },\n    });\n  }\n\n  async cleanWfpMembers(\n    guildID: string,\n    dryRun: boolean = false,\n  ): Promise>> {\n    const twoWeekDate = new Date(new Date().setDate(new Date().getDate() - 14));\n    const membersUnfiltered = (\n      await (\n        await this.client.guilds.fetch(guildID)\n      ).roles.fetch('1121823930085285938')\n    ).members;\n    const members: Array = [];\n    membersUnfiltered.forEach(async (member) => {\n      if (\n        twoWeekDate > new Date(member.joinedTimestamp) &&\n        // Has not VereinsMitglied\n        !member.roles.cache.has('1070116538083975309')\n      ) {\n        members.push(member);\n      }\n    });\n    // Return early if we are in a dry fun\n    if (dryRun)\n      return {\n        membersToKick: members,\n      };\n    const unkickableMembers: Array = [];\n    members.forEach(async (member) => {\n      try {\n        await member.kick(\n          'Kicked by the bot for being in wfp for more than 2 weeks',\n        );\n      } catch {\n        unkickableMembers.push(member);\n      }\n    });\n    return {\n      membersToKick: members,\n      unkickableMembers: unkickableMembers,\n    };\n  }\n\n  /**\n   * Returns the average written messages per channel for last 30 days for the given guild.\n   * @returns A map that contains each channel ID and the average written messages\n   *\n   * SQL:\n   *  SELECT\n   *   m.channelId,\n   *   m.userId,\n   *   COUNT(m.messageId) AS messageCount,\n   *   AVG(subquery.messageCount) AS avgMessageCount\n   * FROM\n   *   Message m\n   * JOIN\n   *   (SELECT channelId, COUNT(messageId) / 30 AS messageCount\n   *   FROM Message\n   *   WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\n   *   GROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\n   * WHERE\n   *   m.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\n   * GROUP BY\n   *   m.channelId, m.userId\n   * ORDER BY\n   *  avgMessageCount DESC;\n   */\n  async averageMessagesPerChannelLastMonth(\n    guildId: string,\n  ): Promise> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageStats = await this.database.messages.groupBy({\n      by: ['channelId', 'userId'],\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        AND: {\n          guildId: guildId,\n        },\n      },\n      _count: {\n        messageId: true,\n      },\n      orderBy: {\n        _count: {\n          messageId: 'desc',\n        },\n      },\n    });\n\n    const messageCounts: Record\n    > = messageStats.reduce((acc, curr) => {\n      const channelId = curr.channelId.toString();\n      const userId = curr.userId.toString();\n      const count = curr._count?.messageId ?? 0;\n\n      if (!acc[channelId]) {\n        acc[channelId] = {};\n      }\n\n      acc[channelId][userId] = count;\n\n      return acc;\n    }, {});\n\n    const avgMessageCounts = {};\n\n    for (const channelId in messageCounts) {\n      const userCounts = Object.values(messageCounts[channelId]);\n      const avgMessageCount =\n        userCounts.reduce((sum, count) => sum + count, 0) / userCounts.length;\n      avgMessageCounts[channelId] = avgMessageCount;\n    }\n\n    return avgMessageCounts;\n  }\n  /**\n   * Returns the average written message per day in the last 30 days per channel\n   * @param guildId string\n   * @returns\n   */\n  async averageMessagesPerDayLastMonth(\n    guildId: string,\n  ): Promise> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageStats = await this.database.messages.groupBy({\n      by: 'createdAt',\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        AND: {\n          guildId,\n        },\n      },\n      _count: {\n        messageId: true,\n      },\n    });\n    const messageCounts: Record = messageStats.reduce(\n      (acc, curr) => {\n        const date = curr.createdAt.toISOString().split('T')[0];\n        // sum up all the messages for that day and add it to the accumulator\n        acc[date] = (acc[date] ?? 0) + (curr._count?.messageId ?? 0);\n\n        return acc;\n      },\n      {},\n    );\n\n    return messageCounts;\n  }\n\n  async updateChannelPermissions(user: GuildUser) {\n    this.restrictedChannelService.getAll(user.guildId).then((channels) =>\n      channels.forEach((channel) =>\n        this.restrictedChannelService\n          .isChannelAvailableToUser(user, channel)\n          .then((isAvailable) => {\n            if (isAvailable)\n              this._removeMemberFromChannelOverwrite(\n                user.userId.toString(),\n                channel.channelId,\n              );\n            else\n              this._addMemberToChannelOverwrite(\n                user.userId.toString(),\n                channel.channelId,\n              );\n          }),\n      ),\n    );\n  }\n  private async _addMemberToChannelOverwrite(\n    user_id: string,\n    channel_id: string,\n  ) {\n    await (\n      (await this.client.channels.fetch(channel_id)) as BaseGuildTextChannel\n    ).permissionOverwrites.create(user_id, {\n      ViewChannel: false,\n      ReadMessageHistory: false,\n    });\n  }\n  private async _removeMemberFromChannelOverwrite(\n    user_id: string,\n    channel_id: string,\n  ) {\n    await (\n      (await this.client.channels.fetch(channel_id)) as BaseGuildTextChannel\n    ).permissionOverwrites.delete(user_id);\n  }\n  /**\n   * Event handler that listens to the ready event which is fired when the bot websocket has been created.\n   * Sets up all guilds in the database if they dont already exist there or updates them.\n   */\n  @Once('ready')\n  async onReady() {\n    const guilds = await this.client.guilds.fetch();\n    guilds.forEach(async (guild) => {\n      this.upsertGuild(guild.id, {\n        name: guild.name,\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildSettingsController.html":{"url":"controllers/GuildSettingsController.html","title":"controller - GuildSettingsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildSettingsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSettings\n                            \n                            \n                                    \n                                    \n                                    Async\n                                putSettings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSettings(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        putSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    putSettings(guildId: string, body: SettingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatusCode.Accepted)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            SettingsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Param,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../../auth/jwt/guards/jwt-auth.guard';\nimport { SettingsDto } from './dto/settings.dto';\nimport { GuildSettingsService } from './guild-settings.service';\nimport { plainToInstance } from '../../util/functions/plain-to-instance';\nimport { HttpStatusCode } from 'axios';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { Rank } from '@prisma/client';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller()\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class GuildSettingsController {\n  constructor(private readonly settingsService: GuildSettingsService) {}\n\n  @Get()\n  async getSettings(@Param('guildId') guildId: string): Promise {\n    const settings = await this.settingsService.getSettings(guildId);\n    return plainToInstance(SettingsDto, settings);\n  }\n\n  @Put()\n  @HttpCode(HttpStatusCode.Accepted)\n  async putSettings(\n    @Param('guildId') guildId: string,\n    @Body() body: SettingsDto,\n  ) {\n    await this.settingsService.editSettings(guildId, body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildSettingsModule.html":{"url":"modules/GuildSettingsModule.html","title":"module - GuildSettingsModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildSettingsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildSettingsModule\n\n\n\ncluster_GuildSettingsModule_providers\n\n\n\ncluster_GuildSettingsModule_exports\n\n\n\n\nGuildSettingsService \n\nGuildSettingsService \n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildSettingsService  -->\n\nGuildSettingsModule->GuildSettingsService \n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildSettingsModule -->\n\nGuildSettingsService->GuildSettingsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildSettingsModule -->\n\nPrismaService->GuildSettingsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildSettingsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildSettingsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildSettingsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildSettingsService } from './guild-settings.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsController } from './guild-settings.controller';\n\n@Module({\n  providers: [GuildSettingsService, PrismaService],\n  controllers: [GuildSettingsController],\n  exports: [GuildSettingsService],\n})\nexport class GuildSettingsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildSettingsService.html":{"url":"injectables/GuildSettingsService.html","title":"injectable - GuildSettingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildSettingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editSettings\n                            \n                            \n                                    Async\n                                getAdminRoleId\n                            \n                            \n                                    Async\n                                getIntroChannelId\n                            \n                            \n                                    Async\n                                getModChannelId\n                            \n                            \n                                    Async\n                                getModRoleId\n                            \n                            \n                                    Async\n                                getOpenIntroChannelId\n                            \n                            \n                                    Async\n                                getSettings\n                            \n                            \n                                    Async\n                                getUnverifiedMemberRoleId\n                            \n                            \n                                    Async\n                                getVerifiedMemberRoleId\n                            \n                            \n                                    Async\n                                getWelcomeMessageFormat\n                            \n                            \n                                    Async\n                                templateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-settings/guild-settings.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    editSettings(guildId: string, settings: Partial>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                settings\n                                            \n                                                        Partial>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAdminRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdminRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIntroChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntroChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getModChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getModChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getModRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getModRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOpenIntroChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOpenIntroChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSettings(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUnverifiedMemberRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUnverifiedMemberRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVerifiedMemberRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVerifiedMemberRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getWelcomeMessageFormat\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWelcomeMessageFormat(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        templateMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    templateMessage(message: Message)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { Settings } from '@prisma/client';\nimport { GuildDoesNotExistException } from '../../util/exception/guild-does-not-exist-exception';\nimport { omit } from 'rambda/immutable';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { SettingsChanged } from './events/settings-role-id-changed.event';\nimport { Message, userMention, quote } from 'discord.js';\n\n@Injectable()\nexport class GuildSettingsService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(EventEmitter2) private eventEmitter: EventEmitter2,\n  ) {}\n  async editSettings(\n    guildId: string,\n    settings: Partial>,\n  ) {\n    Object.keys(settings).forEach(async (key) => {\n      if (key.endsWith('RoleId')) {\n        await this.eventEmitter.emitAsync(\n          `settings.role.${key}.changed`,\n          new SettingsChanged(guildId, settings[key], key as keyof Settings),\n        );\n      }\n    });\n    await this.database.settings.update({ where: { guildId }, data: settings });\n  }\n\n  async getSettings(guildId: string) {\n    const settings = await this.database.settings.findUnique({\n      where: { guildId: guildId },\n    });\n    if (!settings) {\n      throw new GuildDoesNotExistException(guildId);\n    }\n    return omit(['guildId'], settings);\n  }\n\n  async getVerifiedMemberRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.verifiedMemberRoleId);\n  }\n\n  async getUnverifiedMemberRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.unverifiedMemberRoleId);\n  }\n\n  async getModRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.modRoleId);\n  }\n\n  async getAdminRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.adminRoleId);\n  }\n\n  async getWelcomeMessageFormat(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.welcomeMessageFormat);\n  }\n\n  async getOpenIntroChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.openIntroChannelId);\n  }\n\n  async getIntroChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.introChannelId);\n  }\n  async getModChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.modChannelId);\n  }\n  async templateMessage(message: Message): Promise {\n    // template message using the template string provided in the settings\n    const template = await this.getWelcomeMessageFormat(message.guildId);\n    // Usable variables:\n    // ${user} - username\n    // ${message} - message content\n    const quotedMessage = message.content\n      .split('\\n')\n      .map((it) => quote(it))\n      .join('\\n');\n    return template\n      .replace('{user}', userMention(message.author.id))\n      .replace('{message}', `\\n\\n${quotedMessage}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildUserController.html":{"url":"controllers/GuildUserController.html","title":"controller - GuildUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(userId: string, guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('self')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Controller, Get, Inject, Param, UseGuards } from '@nestjs/common';\nimport { plainToInstance } from 'class-transformer';\nimport { Client } from 'discord.js';\nimport { SelfDto } from 'src/guild/guild-user/dto/self.dto';\nimport { RequestUser } from 'src/util/decorators/request-user.decorator';\nimport { GuildUserService } from './guild-user.service';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\n\n@Controller()\n@UseGuards(JwtAuthGuard)\nexport class GuildUserController {\n  constructor(\n    @Inject(GuildUserService) private readonly userService: GuildUserService,\n    @InjectDiscordClient() private readonly client: Client,\n  ) {}\n\n  @Get('self')\n  async getSelf(\n    @RequestUser() userId: string,\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const [{ rank }, { avatarUrl, name, guildName }] = await Promise.all([\n      this.userService.getGuildUser(userId, guildId),\n      this.client.guilds\n        .fetch(guildId)\n        .then((it) => it.members.fetch(userId))\n        .then((it) => ({\n          avatarUrl: it.avatarURL({ size: 128 }),\n          name: it.displayName,\n          guildName: it.guild.name,\n        })),\n    ]);\n    return plainToInstance(SelfDto, {\n      userId,\n      guildId,\n      avatarUrl,\n      name,\n      rank,\n      guildName,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildUserModule.html":{"url":"modules/GuildUserModule.html","title":"module - GuildUserModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildUserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildUserModule\n\n\n\ncluster_GuildUserModule_providers\n\n\n\ncluster_GuildUserModule_exports\n\n\n\n\nGuildUserService \n\nGuildUserService \n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildUserService  -->\n\nGuildUserModule->GuildUserService \n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildUserModule -->\n\nGuildSettingsService->GuildUserModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nGuildUserModule -->\n\nGuildUserService->GuildUserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildUserModule -->\n\nPrismaService->GuildUserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildUserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildUserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildUserController } from './guild-user.controller';\nimport { GuildUserService } from './guild-user.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  controllers: [GuildUserController],\n  providers: [GuildUserService, PrismaService, GuildSettingsService],\n  exports: [GuildUserService],\n})\nexport class GuildUserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildUserService.html":{"url":"injectables/GuildUserService.html","title":"injectable - GuildUserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildUserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _isMemberAdmin\n                            \n                            \n                                    Private\n                                    Async\n                                _isMemberMod\n                            \n                            \n                                    Private\n                                    Async\n                                _isMemberVerified\n                            \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                addMembers\n                            \n                            \n                                    Async\n                                deleteOne\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getGuildUser\n                            \n                            \n                                    Async\n                                getRank\n                            \n                            \n                                    Async\n                                insertMessage\n                            \n                            \n                                    Async\n                                isActive\n                            \n                            \n                                    \n                                    Async\n                                onAdminRoleIdChanged\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    Async\n                                updateMessageCountBucket\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, client: Client, settings: GuildSettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-user/guild-user.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        settings\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberAdmin(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:197\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberMod\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberMod(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberVerified\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberVerified(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(userId: string, guildId: string, data: Omit, userId> | guildId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, userId> | guildId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMembers(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteOne(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(guildId: string | undefined, userId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                        \n                                                userId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getGuildUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUser(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRank\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRank(member: GuildMember)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        insertMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertMessage(data: Messages, metadata: MessageMetadata, attachments: Omit[], reactions: Omit[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Messages\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        MessageMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                attachments\n                                            \n                                                        Omit[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reactions\n                                            \n                                                        Omit[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    isActive(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onAdminRoleIdChanged\n                        \n                    \n                \n            \n            \n                \n                        \n                    onAdminRoleIdChanged(payload: SettingsChanged)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('settings.role.*.changed')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            SettingsChanged\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Once('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateMessageCountBucket\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMessageCountBucket(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(userId: string, guildId: string, data: Omit, userId> | guildId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, userId> | guildId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, Once } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport {\n  Attachment,\n  GuildUser,\n  MessageMetadata,\n  Messages,\n  Rank,\n  Reaction,\n} from '@prisma/client';\nimport { Client, GuildMember } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\nimport { SettingsChanged } from '../guild-settings/events/settings-role-id-changed.event';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class GuildUserService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @InjectDiscordClient() private client: Client,\n    @Inject(GuildSettingsService) private settings: GuildSettingsService,\n  ) {}\n\n  @Once('ready')\n  async onReady() {\n    const guilds = await this.client.guilds.fetch();\n    guilds.forEach(async (guild) => {\n      await this.addMembers(guild.id);\n    });\n  }\n\n  async getGuildUser(\n    userId: string,\n    guildId: string,\n  ): Promise {\n    return this.database.guildUser.findUnique({\n      where: { guildId_userId: { userId, guildId } },\n    });\n  }\n\n  async upsert(\n    userId: string,\n    guildId: string,\n    data: Omit, 'userId'>, 'guildId'>,\n  ): Promise {\n    return await this.database.guildUser.upsert({\n      where: { guildId_userId: { userId, guildId } },\n      create: { ...data, userId, guildId },\n      update: { ...data, userId, guildId },\n    });\n  }\n\n  async insertMessage(\n    data: Messages,\n    metadata: MessageMetadata,\n    attachments: Omit[],\n    reactions: Omit[],\n  ): Promise {\n    await this.database.messageMetadata.create({\n      data: {\n        ...metadata,\n      },\n    });\n    await this.database.attachment.createMany({\n      data: attachments,\n    });\n    await this.database.reaction.createMany({\n      data: reactions,\n    });\n    await this.database.messages.create({\n      data: {\n        ...data,\n      },\n    });\n  }\n\n  async deleteOne(userId: string, guildId: string): Promise {\n    const users = await this.database.guildUser.findMany({\n      where: { userId },\n    });\n    await this.database.guildUser.delete({\n      where: { guildId_userId: { userId, guildId } },\n    });\n    if (users.length === 1) {\n      await this.database.user.delete({ where: { userId } });\n    }\n  }\n  async findAll(\n    guildId: string | undefined = undefined,\n    userId: string | undefined = undefined,\n  ): Promise> {\n    const users = await this.database.guildUser.findMany({\n      where: { OR: [{ userId }, { guildId }] },\n    });\n    if (!users) return [];\n    return users;\n  }\n\n  async updateMessageCountBucket(\n    userId: string,\n    guildId: string,\n  ): Promise {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageCount = await this.database.messages.count({\n      where: {\n        AND: {\n          userId,\n          guildId,\n        },\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n      },\n    });\n    await this.database.guildUser.update({\n      where: { guildId_userId: { userId, guildId } },\n      data: { messageCountBucket: messageCount },\n    });\n  }\n  async isActive(userId: string, guildId: string): Promise {\n    return (\n      (\n        await this.database.guildUser.findUnique({\n          where: {\n            guildId_userId: {\n              userId,\n              guildId,\n            },\n          },\n        })\n      ).messageCountBucket >= 30\n    );\n  }\n\n  async getRank(member: GuildMember): Promise {\n    if (member.guild.ownerId === member.id) {\n      return 'OWNER';\n    } else if (await this._isMemberAdmin(member.id, member.guild.id)) {\n      return 'ADMIN';\n    } else if (await this._isMemberMod(member.id, member.guild.id)) {\n      return 'MOD';\n    } else if (await this._isMemberVerified(member.id, member.guild.id)) {\n      return 'MEMBER';\n    } else {\n      return 'NEW';\n    }\n  }\n  async addMembers(guildId: string) {\n    const guild = await this.client.guilds.fetch(guildId);\n    const members = await guild.members.fetch();\n    members.forEach(async (member: GuildMember) => {\n      if (!member.user.bot) {\n        const rank = await this.getRank(member);\n        await this.addMember(member.id, member.guild.id, {\n          rank: rank,\n          unlocked: rank !== 'NEW',\n        });\n      }\n    });\n  }\n  async addMember(\n    userId: string,\n    guildId: string,\n    data: Omit, 'userId'>, 'guildId'>,\n  ) {\n    await this.database.user.upsert({\n      where: { userId },\n      create: { userId },\n      update: { userId },\n    });\n    await this.upsert(userId, guildId, data);\n  }\n\n  @OnEvent('settings.role.*.changed')\n  async onAdminRoleIdChanged(payload: SettingsChanged) {\n    await this.addMembers(payload.guildId);\n  }\n\n  private async _isMemberVerified(user_id: string, guild_id: string) {\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has(\n      (await this.settings.getVerifiedMemberRoleId(guild_id)).toString(),\n    );\n  }\n\n  private async _isMemberMod(\n    user_id: string,\n    guild_id: string,\n  ): Promise {\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has((await this.settings.getModRoleId(guild_id)).toString());\n  }\n  private async _isMemberAdmin(\n    user_id: string,\n    guild_id: string,\n  ): Promise {\n    if (user_id == '322822954796974080') return true;\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has(\n      (await this.settings.getAdminRoleId(guild_id)).toString(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/HasRequiredRank.html":{"url":"guards/HasRequiredRank.html","title":"guard - HasRequiredRank","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    HasRequiredRank\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/util/guards/has-required-rank.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    This guard can be used to guard routes/controller(HTTP ONLY NOT COMMANDS) with specific RANK(s)\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/util/guards/has-required-rank.guard.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/guards/has-required-rank.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Function to check if the current user has the required rank to perform the current action.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ExecutionContext see nestjs documentation\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { Reflector } from '@nestjs/core';\nimport { REQUIRED_RANK_KEY } from '../decorators/requires-rank.decorator';\nimport { PrismaService } from 'src/prisma.service';\nimport { Rank } from '@prisma/client';\n\n/**\n * This guard can be used to guard routes/controller(HTTP ONLY NOT COMMANDS) with specific RANK(s)\n */\n@Injectable()\nexport class HasRequiredRank implements CanActivate {\n  private readonly logger = new Logger(HasRequiredRank.name);\n\n  constructor(\n    @Inject(Reflector)\n    private reflector: Reflector,\n    @Inject(PrismaService) private prismaService: PrismaService,\n  ) {}\n  /**\n   * Function to check if the current user has the required rank to perform the current action.\n   * @param context ExecutionContext see nestjs documentation\n   * @returns boolean\n   */\n  async canActivate(context: ExecutionContext) {\n    const requiredRank = this.reflector.getAllAndOverride(\n      REQUIRED_RANK_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    const req = context\n      .switchToHttp()\n      .getRequest();\n    const userId = req.user.userId;\n    if (!userId) throw new UnauthorizedException();\n    const user = await this.prismaService.guildUser.findUnique({\n      where: { guildId_userId: { userId, guildId: req.params.guildId } },\n    });\n    if (!user) throw new ForbiddenException();\n    if (!requiredRank) {\n      return true;\n    }\n\n    const ownedRanks = [user.rank, ...InheritedRanks[user.rank]];\n    return ownedRanks.includes(requiredRank);\n  }\n}\n\n/**\n * Map of ranks that are inherited by any given rank,\n * meaning their lower ranks e.g MOD has MEMBER.\n * But MEMBER has 0 since its the lowest rank a member can have.\n */\nconst InheritedRanks: Record = {\n  OWNER: ['ADMIN', 'MOD', 'MEMBER'],\n  ADMIN: ['MOD', 'MEMBER'],\n  MOD: ['MEMBER'],\n  MEMBER: [],\n  NEW: [],\n};\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsModalInteractionGuard.html":{"url":"guards/IsModalInteractionGuard.html","title":"guard - IsModalInteractionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsModalInteractionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/is-modal-interaction.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/is-modal-interaction.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { InteractionType } from 'discord.js';\n\nexport class IsModalInteractionGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const interaction = context.getArgByIndex(0);\n\n    return interaction.type === InteractionType.ModalSubmit;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsUserUnlockedGuard.html":{"url":"guards/IsUserUnlockedGuard.html","title":"guard - IsUserUnlockedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsUserUnlockedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(settingsService: GuildSettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/guards/user-is-unlocked.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: DiscordExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/user-is-unlocked.guard.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            DiscordExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { Message } from 'discord.js';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\n\ninterface DiscordExecutionContext extends ExecutionContext {\n  getMessage(): Message;\n}\n@Injectable()\nexport class IsUserUnlockedGuard implements CanActivate {\n  constructor(\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n  ) {}\n  async canActivate(context: DiscordExecutionContext): Promise {\n    const message: Message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return message.member.roles.cache.has(\n      await this.settingsService.getVerifiedMemberRoleId(message.guildId),\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/JwtAuthController.html":{"url":"controllers/JwtAuthController.html","title":"controller - JwtAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  JwtAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshJwtGuard)@ApiHeader({name: 'refresh_token', description: ''})@Post('refresh')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Get,\n  Logger,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { RefreshJwtGuard } from './guards/refresh-auth.guard';\nimport { ApiBearerAuth, ApiHeader, ApiTags } from '@nestjs/swagger';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller('auth')\n@ApiTags('auth/jwt')\n@ApiBearerAuth()\nexport class JwtAuthController {\n  private readonly logger = new Logger(JwtAuthController.name);\n\n  constructor(\n    private authService: JwtAuthService,\n    private http: HttpService,\n    private configService: ConfigService,\n  ) {}\n\n  @UseGuards(RefreshJwtGuard)\n  @ApiHeader({\n    name: 'refresh_token',\n    description: '',\n  })\n  @Post('refresh')\n  async refreshToken(@Req() req) {\n    return this.authService.refreshToken(req.user);\n  }\n\n  @Get('login')\n  async login(@Query('code') code: string) {\n    if (!code) {\n      throw new BadRequestException('No code provided');\n    }\n\n    return this.authService.login(await this.authService.getUserFromCode(code));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JwtAuthModule.html":{"url":"modules/JwtAuthModule.html","title":"module - JwtAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    JwtAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JwtAuthModule\n\n\n\ncluster_JwtAuthModule_exports\n\n\n\ncluster_JwtAuthModule_providers\n\n\n\n\nJwtAuthService \n\nJwtAuthService \n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nJwtAuthService  -->\n\nJwtAuthModule->JwtAuthService \n\n\n\n\n\nJwtAuthService\n\nJwtAuthService\n\nJwtAuthModule -->\n\nJwtAuthService->JwtAuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nJwtAuthModule -->\n\nJwtAuthStrategy->JwtAuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nJwtAuthModule -->\n\nPrismaService->JwtAuthModule\n\n\n\n\n\nRefreshJwtStrategy\n\nRefreshJwtStrategy\n\nJwtAuthModule -->\n\nRefreshJwtStrategy->JwtAuthModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nJwtAuthModule -->\n\nSelfService->JwtAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthService\n                        \n                        \n                            JwtAuthStrategy\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RefreshJwtStrategy\n                        \n                        \n                            SelfService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            JwtAuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { JwtAuthStrategy } from './jwt-auth.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtAuthController } from './jwt-auth.controller';\nimport { RefreshJwtStrategy } from './refresh-token.strategy';\nimport { HttpModule } from '@nestjs/axios';\nimport { PrismaService } from 'src/prisma.service';\nimport { SelfService } from 'src/user/self.service';\nimport { DiscordModule } from '@discord-nestjs/core';\n\n@Module({\n  imports: [\n    DiscordModule.forFeature(),\n    PassportModule,\n    HttpModule,\n    JwtModule.register({\n      secret: 'jwtConstants.secret',\n      signOptions: { expiresIn: '900s' },\n    }),\n  ],\n  controllers: [JwtAuthController],\n  providers: [\n    JwtAuthStrategy,\n    RefreshJwtStrategy,\n    JwtAuthService,\n    PrismaService,\n    SelfService,\n  ],\n  exports: [JwtAuthService],\n})\nexport class JwtAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthService.html":{"url":"injectables/JwtAuthService.html","title":"injectable - JwtAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserFromCode\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, usersService: SelfService, http: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt-auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        SelfService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFromCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFromCode(code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(JwtAuthService.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/jwt/jwt-auth.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { AxiosError } from 'axios';\nimport { OAuthErrorData } from 'discord.js';\nimport { firstValueFrom, catchError } from 'rxjs';\nimport { SelfService } from 'src/user/self.service';\n\n@Injectable()\nexport class JwtAuthService {\n  private readonly logger = new Logger(JwtAuthService.name);\n\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private readonly usersService: SelfService,\n    private http: HttpService,\n  ) {}\n\n  async login(userId: string) {\n    const payload = {\n      sub: {\n        userId,\n      },\n    };\n    return {\n      user: {\n        user_id: userId,\n      },\n      accessToken: this.jwtService.sign(payload, {\n        secret: this.configService.get('JWT_ACCESS_SECRET'),\n        issuer: this.configService.get('JWT_ISSUER'),\n        algorithm: 'HS256',\n      }),\n      refreshToken: this.jwtService.sign(payload, {\n        expiresIn: this.configService.get('JWT_REFRESH_EXPIRATION'),\n        secret: this.configService.get('JWT_REFRESH_SECRET'),\n        issuer: this.configService.get('JWT_ISSUER'),\n        algorithm: 'HS256',\n      }),\n    };\n  }\n\n  async refreshToken(userId: string) {\n    const payload = {\n      sub: {\n        userId,\n      },\n    };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  async validateUser(userId: string): Promise {\n    const user = await this.usersService.fetchSelf(userId);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user.userId;\n  }\n\n  async getUserFromCode(code: string): Promise {\n    const response = await firstValueFrom(\n      this.http\n        .post(\n          'https://discordapp.com/api/oauth2/token',\n          new URLSearchParams({\n            client_id: this.configService.get('DISCORD_OAUTH_CLIENT_ID'),\n            client_secret: this.configService.get('DISCORD_OAUTH_SECRET'),\n            code: code,\n            grant_type: 'authorization_code',\n            redirect_uri: this.configService.get('DISCORD_CALLBACK_URL'),\n            scope: 'identify',\n          }),\n          {\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n          },\n        )\n        .pipe(\n          catchError((error: AxiosError) => {\n            this.logger.warn(\n              'OAuth token call to Discord failed: ' +\n                JSON.stringify(error.response.data),\n            );\n            if (error.response.data.error === 'invalid_grant') {\n              this.logger.warn(\n                'Is the user trying to log in not member of the guild?',\n              );\n            }\n            throw new UnauthorizedException();\n          }),\n        ),\n    );\n    const { data } = await firstValueFrom(\n      this.http\n        .get('https://discordapp.com/api/users/@me', {\n          headers: { Authorization: `Bearer ${response.data.access_token}` },\n        })\n        .pipe(\n          catchError((error: AxiosError) => {\n            throw `Error: ${error.message} `;\n          }),\n        ),\n    );\n    return this.validateUser(data.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthStrategy.html":{"url":"injectables/JwtAuthStrategy.html","title":"injectable - JwtAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt-auth.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_ACCESS_SECRET'),\n      issuer: configService.get('JWT_ISSUER'),\n    });\n  }\n\n  async validate(payload: any) {\n    return payload.sub;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogEntry.html":{"url":"classes/LogEntry.html","title":"class - LogEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/dto/log.entry.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for LogEntries\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                action\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                extraInfo\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                invokerId\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                            \n                                    \n                                    \n                                targetId\n                            \n                            \n                                    \n                                    \n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The action that was performed'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@ApiProperty({type: Date, description: 'The date when the event occurred'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        extraInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'Contains the involved object, if its an update event it contains the old object as well as the new object und old/new key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The guild id where the event occurred'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        invokerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The user id of the invoker'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The reason for the action, most likely just a different wording of action'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the target, can be one of:         message id,         channel id,         role id,         guild id,         user id,         invite code         or a webhook id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'Describe the type of the target id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:97\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsOptional, IsString } from 'class-validator';\n\n/**\n * All possible actions that can occur\n */\nexport const actions = [\n  'USER_JOINED',\n  'WARN',\n  'ERROR',\n  'USER_LEFT',\n  'USER_BANNED',\n  'USER_UNBANNED',\n  'USER_UPDATED',\n  'GUILD_UPDATED',\n  'INVALID_REQUEST',\n  'INVITE_CREATED',\n  'INVITE_DELETED',\n  'MESSAGE_DELETED',\n  'REACTION_ADDED',\n  'REACTION_REMOVED',\n  'ROLE_CREATED',\n  'ROLE_DELETED',\n  'ROLE_UPDATED',\n  'CHANNEL_CREATED',\n  'CHANNEL_DELETED',\n  'CHANNEL_UPDATED',\n  'WEBHOOKS_UPDATED',\n  'TIMEOUT_EXPIRED',\n  'TIMEOUT',\n  'KICK',\n  'BAN',\n] as const;\nexport type Action = (typeof actions)[number];\n\n/**\n * List of the targets an event can have\n */\nexport const targetTypes = [\n  'ERROR',\n  'WARN',\n  'USER',\n  'GUILD',\n  'INVALID_REQUEST',\n  'INVITE',\n  'MESSAGE',\n  'ROLE',\n  'CHANNEL',\n] as const;\nexport type TargetType = (typeof targetTypes)[number];\n\n/**\n * Data transfer object for LogEntries\n */\nexport default class LogEntry {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild id where the event occurred',\n  })\n  guildId: string;\n  @IsString()\n  @ApiProperty({ type: String, description: 'The user id of the invoker' })\n  invokerId: string;\n  @IsString()\n  @ApiProperty({ type: String, description: 'The action that was performed' })\n  action: Action;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description:\n      'The reason for the action, most likely just a different wording of action',\n  })\n  reason: string;\n  @IsDate()\n  @ApiProperty({ type: Date, description: 'The date when the event occurred' })\n  createdAt: Date;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description:\n      'The id of the target, can be one of: \\\n        message id, \\\n        channel id, \\\n        role id, \\\n        guild id, \\\n        user id, \\\n        invite code \\\n        or a webhook id',\n  })\n  targetId: string;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'Describe the type of the target id',\n  })\n  targetType: TargetType;\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description:\n      'Contains the involved object, if its an update event it contains the old object as well as the new object und old/new key',\n  })\n  extraInfo?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogEntryDto.html":{"url":"classes/LogEntryDto.html","title":"class - LogEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/dto/log-entry.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                action\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                invokerId\n                            \n                            \n                                    \n                                reason\n                            \n                            \n                                    \n                                targetId\n                            \n                            \n                                    \n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', enum: actions})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        invokerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', enum: targetTypes})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import LogEntry, {\n  Action,\n  actions,\n  TargetType,\n  targetTypes,\n} from '../../util/dto/log.entry.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LogEntryDto implements Omit {\n  @ApiProperty({ type: 'string', enum: actions })\n  action: Action;\n  @ApiProperty({ type: 'string', format: 'date-time' })\n  createdAt: Date;\n  @ApiProperty({ type: 'string' })\n  invokerId: string;\n  @ApiProperty({ type: 'string' })\n  reason: string;\n  @ApiProperty({ type: 'string' })\n  targetId: string;\n  @ApiProperty({ type: 'string', enum: targetTypes })\n  targetType: TargetType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MessageFromUserGuard.html":{"url":"guards/MessageFromUserGuard.html","title":"guard - MessageFromUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MessageFromUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/message-from-user.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/message-from-user.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Message } from 'discord.js';\n\nexport class MessageFromUserGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return !message.author.bot;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MessageIsDmGuard.html":{"url":"guards/MessageIsDmGuard.html","title":"guard - MessageIsDmGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MessageIsDmGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/message-is-dm.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/message-is-dm.guard.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\nimport { Message } from 'discord.js';\n\n@Injectable()\nexport class MessageIsDmGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const message = context.getArgByIndex(0);\n    if (\n      message instanceof Message &&\n      !(message as Message).inGuild() &&\n      !message.author.bot\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ModAnnouncementDto.html":{"url":"classes/ModAnnouncementDto.html","title":"class - ModAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ModAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/mod-anouncement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                replyToMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The message to send', descriptionLocalizations: undefined, type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/mod-anouncement.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        replyToMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({name: 'replyto', description: 'Message ID to which the bot should reply(optional)', type: undefined, required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/mod-anouncement.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ModAnnouncementDto {\n  @Param({\n    description: 'The message to send',\n    descriptionLocalizations: {\n      'en-US': 'The message to send',\n      de: 'Die Nachricht die gesendet werden soll',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  message: string;\n\n  @Param({\n    name: 'replyto',\n    description: 'Message ID to which the bot should reply(optional)',\n    type: ParamType.STRING,\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  replyToMessage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ModRequestFlow.html":{"url":"injectables/ModRequestFlow.html","title":"injectable - ModRequestFlow","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ModRequestFlow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/interaction-create/mod-request-menu/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getGuildIdFromSelectMenu\n                            \n                            \n                                    Async\n                                initiateModRequestFlow\n                            \n                            \n                                    \n                                    Async\n                                onButtonCloseTicket\n                            \n                            \n                                    \n                                    Async\n                                onButtonNeedHelpButton\n                            \n                            \n                                    \n                                    Async\n                                onMenuSelect\n                            \n                            \n                                    \n                                    Async\n                                onModalSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, guildUserService: GuildUserService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _getGuildIdFromSelectMenu\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getGuildIdFromSelectMenu(interaction: ButtonInteraction, guilds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guilds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initiateModRequestFlow\n                        \n                    \n                \n            \n            \n                \n                        \n                    initiateModRequestFlow(interaction: ButtonInteraction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:194\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonCloseTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonCloseTicket(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:185\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonNeedHelpButton\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonNeedHelpButton(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMenuSelect\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMenuSelect(interaction: StringSelectMenuInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        StringSelectMenuInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onModalSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModalSubmit(interaction: ModalSubmitInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ModalSubmitInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ModRequestFlow.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:34\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, On } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { BinaryToTextEncoding, createHash } from 'crypto';\nimport {\n  ModalSubmitInteraction,\n  EmbedBuilder,\n  userMention,\n  StringSelectMenuInteraction,\n  ModalBuilder,\n  ActionRowBuilder,\n  ModalActionRowComponentBuilder,\n  TextInputBuilder,\n  TextInputStyle,\n  ButtonInteraction,\n  StringSelectMenuBuilder,\n  ComponentType,\n  Client,\n  ChannelType,\n  PermissionFlagsBits,\n  ButtonBuilder,\n  ButtonStyle,\n  BaseGuildTextChannel,\n} from 'discord.js';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { PrismaService } from 'src/prisma.service';\nimport {\n  modRequestCategorySelect,\n  modRequestMenuId,\n  needHelpButtonId,\n  selectGuildMenu,\n} from 'src/util/functions/menu-helper';\n@Injectable()\nexport class ModRequestFlow {\n  logger = new Logger(ModRequestFlow.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n    @Inject(PrismaService) readonly prismaService: PrismaService,\n  ) {}\n\n  @On('interactionCreate')\n  async onModalSubmit(interaction: ModalSubmitInteraction) {\n    if (!interaction.isModalSubmit()) return;\n    const [modal, guildId, categoryId] = interaction.customId.split('-');\n    if (modal != 'modRequestModal') return;\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = await guild.channels.create({\n      name: `Ticket-${createHash('sha256')\n        .update(\n          JSON.stringify(\n            interaction.user.displayName + new Date().getUTCDate(),\n          ),\n          'utf8',\n        )\n        .digest('hex' as BinaryToTextEncoding)\n        .slice(0, 63)}`,\n      reason: `${userMention(interaction.user.id)} created a ticket`,\n      type: ChannelType.GuildText,\n      parent: '1011532621412577350',\n      permissionOverwrites: [\n        {\n          id: '1011511871297302608',\n          deny: [PermissionFlagsBits.ViewChannel],\n        },\n        {\n          id: interaction.user.id,\n          allow: [\n            PermissionFlagsBits.ViewChannel,\n            PermissionFlagsBits.SendMessages,\n            PermissionFlagsBits.ReadMessageHistory,\n            PermissionFlagsBits.AddReactions,\n          ],\n        },\n        {\n          id: '1011513775054143632',\n          allow: [\n            PermissionFlagsBits.ViewChannel,\n            PermissionFlagsBits.SendMessages,\n            PermissionFlagsBits.ReadMessageHistory,\n            PermissionFlagsBits.AddReactions,\n          ],\n        },\n      ],\n    });\n    const ticket = await this.prismaService.tickets.create({\n      data: {\n        userId: interaction.user.id,\n        guildId,\n        ticketId: channel.id,\n      },\n    });\n    await channel.send({\n      embeds: [\n        new EmbedBuilder()\n          .setTitle('Mod Anfrage')\n          .setDescription(\n            interaction.fields.getTextInputValue('modRequestMessage'),\n          )\n          .addFields(\n            {\n              name: 'Kategorie',\n              value: categoryId.replace('modRequest', ''),\n            },\n            {\n              name: 'Von Nutzer:in',\n              value: userMention(interaction.user.id),\n            },\n          ),\n      ],\n      components: [\n        new ActionRowBuilder().addComponents(\n          new ButtonBuilder()\n            .setCustomId(`closeTicket-${ticket.ticketId}`)\n            .setLabel('Ticket schließen')\n            .setStyle(ButtonStyle.Primary),\n        ),\n      ],\n    });\n    await channel.send(userMention(interaction.user.id));\n    await interaction.editReply({\n      content: 'Deine Mod Anfrage wurde erfolgreich versendet.',\n    });\n  }\n\n  @On('interactionCreate')\n  async onMenuSelect(interaction: StringSelectMenuInteraction) {\n    if (!interaction.isStringSelectMenu()) return;\n    if (interaction.customId != modRequestMenuId) return;\n    const modRequestModal = new ModalBuilder()\n      .setCustomId(\n        `modRequestModal-${\n          interaction.guildId ?? interaction.values[0].split('-')[1]\n        }-${interaction.values[0].split('-')[0]}`,\n      )\n      .setTitle('Mod Anfrage');\n\n    modRequestModal.addComponents(\n      new ActionRowBuilder().addComponents(\n        new TextInputBuilder()\n          .setCustomId('modRequestMessage')\n          .setPlaceholder('Schreibe deine Mod Anfrage hier rein.')\n          .setRequired(true)\n          .setStyle(TextInputStyle.Paragraph)\n          .setLabel('Mod Anfrage'),\n      ),\n    );\n    await interaction.showModal(modRequestModal);\n    await interaction.deleteReply();\n  }\n\n  @On('interactionCreate')\n  async onButtonNeedHelpButton(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (!interaction.customId.startsWith('closeTicket')) return;\n    const ticketId = interaction.customId.split('-')[1];\n    try {\n      const ticket = await this.prismaService.tickets.findUnique({\n        where: {\n          ticketId,\n        },\n      });\n      await this.prismaService.tickets.update({\n        where: {\n          ticketId,\n        },\n        data: {\n          closed: true,\n        },\n      });\n      const channel = (await this.client.guilds.cache\n        .get(ticket.guildId)\n        .channels.fetch(ticketId)) as BaseGuildTextChannel;\n      channel.permissionOverwrites.delete(ticket.userId);\n      await channel.setParent('1014456370860404756');\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n  @On('interactionCreate')\n  async onButtonCloseTicket(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (interaction.customId != needHelpButtonId) return;\n    try {\n      this.initiateModRequestFlow(interaction);\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n  async initiateModRequestFlow(interaction: ButtonInteraction) {\n    await interaction.deferReply({ ephemeral: true });\n    const guilds = (\n      await this.guildUserService.findAll(\n        interaction?.guildId ?? undefined,\n        interaction.user.id,\n      )\n    ).map((user) => user.guildId);\n    const guildId =\n      guilds.length > 1\n        ? await this._getGuildIdFromSelectMenu(interaction, guilds)\n        : (interaction?.guildId ?? guilds[0]);\n    const modRequestMenu = modRequestCategorySelect(guildId);\n    const options = {\n      content: 'Wähle eine Kategorie aus:',\n      components: [\n        new ActionRowBuilder().addComponents(\n          modRequestMenu,\n        ),\n      ],\n      ephemeral: true,\n    };\n    await interaction.editReply(options);\n  }\n  async _getGuildIdFromSelectMenu(\n    interaction: ButtonInteraction,\n    guilds: string[],\n  ) {\n    const guildMenu = selectGuildMenu(guilds);\n    const options = {\n      content: 'Wähle einen Server aus:',\n      components: [\n        new ActionRowBuilder().addComponents(\n          guildMenu,\n        ),\n      ],\n      ephemeral: true,\n    };\n    const selectionInteraction = await interaction.editReply(options);\n    const selection = await selectionInteraction.awaitMessageComponent({\n      componentType: ComponentType.StringSelect,\n      filter: (i) => i.customId === 'selectGuild',\n      time: 1000 * 60 * 5,\n    });\n    return selection.values[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ModerationModule.html":{"url":"modules/ModerationModule.html","title":"module - ModerationModule","body":"\n                   \n\n\n\n\n    Modules\n    ModerationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ModerationModule\n\n\n\ncluster_ModerationModule_providers\n\n\n\ncluster_ModerationModule_imports\n\n\n\n\nAuditLogModule\n\nAuditLogModule\n\n\n\nModerationModule\n\nModerationModule\n\nModerationModule -->\n\nAuditLogModule->ModerationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nModerationModule -->\n\nPrismaService->ModerationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/moderation/moderation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                        \n                            UserController\n                        \n                        \n                            ChannelController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuditLogModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoleController } from './role/role.controller';\nimport { UserController } from './user/user.controller';\nimport { ChannelController } from './channel/channel.controller';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { AuditLogModule } from 'src/auditlog/auditlog.module';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  imports: [DiscordModule.forFeature(), AuditLogModule],\n  controllers: [RoleController, UserController, ChannelController],\n  providers: [PrismaService],\n  exports: [],\n})\nexport class ModerationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MumVoiceCommand.html":{"url":"classes/MumVoiceCommand.html","title":"class - MumVoiceCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MumVoiceCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/mod-anouncement.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(interaction: CommandInteraction, dto: ModAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/mod-anouncement.command.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ModAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, IA, InteractionEvent } from '@discord-nestjs/core';\nimport { ApplicationCommandType, CommandInteraction } from 'discord.js';\nimport { ModAnnouncementDto } from '../dto/mod-anouncement.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\n\n@Command({\n  name: 'mumvoice',\n  description: 'Sends your message using the bot',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.ChatInput,\n  dmPermission: false,\n})\nexport class MumVoiceCommand {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) dto: ModAnnouncementDto,\n  ): Promise {\n    try {\n      if (dto.replyToMessage != '' || dto.replyToMessage != undefined)\n        await interaction.channel.send({\n          content: dto.message,\n          reply: {\n            messageReference: dto.replyToMessage,\n            failIfNotExists: true,\n          },\n        });\n      else\n        await interaction.channel.send({\n          content: dto.message,\n        });\n      interaction.reply({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${dto.message}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PermissionOverwrite.html":{"url":"classes/PermissionOverwrite.html","title":"class - PermissionOverwrite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PermissionOverwrite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the permission overwrite'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PingCommand.html":{"url":"classes/PingCommand.html","title":"class - PingCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PingCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/ping.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onPlayCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/ping.command.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onPlayCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onPlayCommand()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/ping.command.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\n\n@Command({\n  name: 'ping',\n  description: 'Gets the ws gateway ping',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class PingCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n  @Handler()\n  onPlayCommand(): string {\n    return `Ping is ${this.client.ws.ping} ms.`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit' as never, async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ReactedMemberIsModOrHigherGuard.html":{"url":"guards/ReactedMemberIsModOrHigherGuard.html","title":"guard - ReactedMemberIsModOrHigherGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ReactedMemberIsModOrHigherGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/member-is-mod-or-higher.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(settingsService: GuildUserService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/guards/member-is-mod-or-higher.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/member-is-mod-or-higher.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { MessageReaction, User } from 'discord.js';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\n\n@Injectable()\nexport class ReactedMemberIsModOrHigherGuard implements CanActivate {\n  constructor(\n    @Inject(GuildUserService)\n    private readonly settingsService: GuildUserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const message = context.getArgByIndex(0);\n    const discordUser: User = context.getArgByIndex(1);\n    if (discordUser.partial) await discordUser.fetch();\n    if (message.partial) await message.fetch();\n    if (!(message instanceof MessageReaction)) return false;\n    if (!message.message.inGuild()) {\n      return false;\n    }\n    const user = await this.settingsService.getGuildUser(\n      discordUser.id,\n      message.message.guildId,\n    );\n    if (['MOD', 'ADMIN', 'OWNER'].includes(user.rank)) {\n      return true;\n    }\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJwtGuard.html":{"url":"injectables/RefreshJwtGuard.html","title":"injectable - RefreshJwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/guards/refresh-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt-refresh')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshJwtGuard extends AuthGuard('jwt-refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJwtStrategy.html":{"url":"injectables/RefreshJwtStrategy.html","title":"injectable - RefreshJwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/refresh-token.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/refresh-token.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/refresh-token.strategy.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class RefreshJwtStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromHeader('refresh_token'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { user: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestrictedChannelDto.html":{"url":"classes/RestrictedChannelDto.html","title":"class - RestrictedChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestrictedChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/dto/restricted-channels.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                requiredPoints\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/restricted-channels.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        requiredPoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/restricted-channels.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { RestrictedChannels } from '@prisma/client';\nimport { IsNumber, IsString } from 'class-validator';\n\nexport class RestrictedChannelDto\n  implements Omit\n{\n  @IsString()\n  @ApiProperty({\n    type: String,\n  })\n  channelId: string;\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n  })\n  requiredPoints: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /role\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildRoles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRole(guildId: string, roleData: EditRoleData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({summary: 'Create a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, schema: roleResponseSchema, description: 'Role was successfully created'})@ApiResponse({status: 500, description: 'Role could not be successfully created'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleData\n                                            \n                                                            EditRoleData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        deleteRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRole(guildId: string, roleId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':roleId')@ApiOperation({summary: 'Delete a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, description: 'Role was successfully deleted'})@ApiResponse({status: 500, description: 'Role could not be successfully deleted'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getGuildRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildRoles(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all roles for a guild'})@ApiResponse({status: 200, type: undefined, schema: rolesResponseSchema, description: 'Roles were successfully fetched'})@ApiResponse({status: 500, description: 'Roles could not be successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(guildId: string, roleId: string, roleData: EditRoleData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':roleId')@ApiOperation({summary: 'Update a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, schema: roleResponseSchema, description: 'Role was successfully updated'})@ApiResponse({status: 500, description: 'Role could not be successfully updated'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleData\n                                            \n                                                            EditRoleData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Inject,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Client, Role } from 'discord.js';\nimport {\n  RoleResponse,\n  rolesResponseSchema,\n  roleResponseSchema,\n  EditRoleData,\n} from '../dto/role';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { Rank } from '@prisma/client';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\nconst logger = new Logger('RoleController');\n@ApiTags('/role')\n@Controller('/role')\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\n@ApiBearerAuth()\nexport class RoleController {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all roles for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: [RoleResponse],\n    schema: rolesResponseSchema,\n    description: 'Roles were successfully fetched',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Roles could not be successfully fetched',\n  })\n  async getGuildRoles(@Param('guildId') guildId: string): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    logger.log(`Found ${guild.roles.cache.size} roles in guild ${guildId}`);\n    return (await guild.roles.fetch()).toJSON();\n  }\n  @Post('/')\n  @ApiOperation({ summary: 'Create a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    schema: roleResponseSchema,\n    description: 'Role was successfully created',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully created',\n  })\n  async createRole(\n    @Param('guildId') guildId: string,\n    @Body() roleData: EditRoleData,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = await guild.roles.create(roleData);\n    logger.log(`Created role ${role.name} in guild ${guildId}`);\n    return role;\n  }\n  @Put(':roleId')\n  @ApiOperation({ summary: 'Update a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    schema: roleResponseSchema,\n    description: 'Role was successfully updated',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully updated',\n  })\n  async updateRole(\n    @Param('guildId') guildId: string,\n    @Param('roleId') roleId: string,\n    @Body() roleData: EditRoleData,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = guild.roles.cache.get(roleId);\n    await role.edit(roleData);\n    logger.log(`Updated role ${role.name} in guild ${guildId}`);\n    return role;\n  }\n\n  @Delete(':roleId')\n  @ApiOperation({ summary: 'Delete a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    description: 'Role was successfully deleted',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully deleted',\n  })\n  async deleteRole(\n    @Param('guildId') guildId: string,\n    @Param('roleId') roleId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = guild.roles.cache.get(roleId);\n    logger.log(`Deleted role ${role.name} in guild ${guildId}`);\n    await role.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleResponse.html":{"url":"classes/RoleResponse.html","title":"class - RoleResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                color\n                            \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                guild\n                            \n                            \n                                    \n                                    \n                                hoist\n                            \n                            \n                                    \n                                    \n                                icon\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                managed\n                            \n                            \n                                    \n                                    \n                                mentionable\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                permissions\n                            \n                            \n                                    \n                                    \n                                rawPosition\n                            \n                            \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                unicodeEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The color of the role', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The timestamp the role was created at(Unixtimestamp)', example: 1600000000000})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guild\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The guild the api belongs to', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hoist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is hoisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@ApiProperty({type: String, description: 'The icon of the role', example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the role', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        managed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is managed by an integration', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        mentionable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is mentionable', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The name of the role', example: 'Admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The permissions of the role', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rawPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The position of the role', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The tags of the role', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        unicodeEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The unicodeEmoji of the role', example: '👑'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nimport {\n  Base64Resolvable,\n  ColorResolvable,\n  Colors,\n  EmojiResolvable,\n  PermissionFlagsBits,\n  PermissionResolvable,\n} from 'discord.js';\n\nclass RoleResponse {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild the api belongs to',\n    example: '123456789012345678',\n  })\n  guild: string;\n\n  @IsUrl()\n  @ApiProperty({\n    type: String,\n    description: 'The icon of the role',\n    example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n  })\n  icon: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The unicodeEmoji of the role',\n    example: '👑',\n  })\n  unicodeEmoji: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the role',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The name of the role',\n    example: 'Admin',\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The color of the role',\n    example: 0,\n  })\n  color: number;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is hoisted',\n    example: false,\n  })\n  hoist: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The position of the role',\n    example: 0,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The permissions of the role',\n    example: '0',\n  })\n  permissions: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is managed by an integration',\n    example: false,\n  })\n  managed: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is mentionable',\n    example: false,\n  })\n  mentionable: boolean;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The tags of the role',\n    example: null,\n  })\n  tags: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The timestamp the role was created at(Unixtimestamp)',\n    example: 1600000000000,\n  })\n  createdTimestamp: number;\n}\n\nclass EditRoleData {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsIn(Object.keys(Colors))\n  @ApiProperty({\n    enum: Colors,\n    required: false,\n    example: 'White',\n    examples: Object.keys(Colors),\n    description: 'New color of the role',\n  })\n  color?: ColorResolvable;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'Why was the role updated',\n  })\n  reason: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Whether or not the role should be hoisted',\n  })\n  hoist?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description:\n      'The position of the role; Higher = more permissions relative to the role below',\n  })\n  position?: number;\n\n  @IsIn(Object.keys(PermissionFlagsBits))\n  @IsOptional()\n  @ApiProperty({\n    type: Array,\n    required: false,\n    description: 'Updated Permission',\n    default: null,\n    example: ['AddReactions', 'KickMembers'],\n  })\n  permissions?: PermissionResolvable;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the role be mentionable or not',\n  })\n  mentionable?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New Icon of the role, base64 encoded string',\n    externalDocs: {\n      description: 'Discord.js docs',\n      url: 'https://old.discordjs.dev/#/docs/discord.js/main/class/Role?scrollTo=setIcon',\n    },\n  })\n  icon?: Base64Resolvable | EmojiResolvable | null;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'The new unicodeEmoji of the role',\n  })\n  unicodeEmoji?: string | null;\n}\n// Generate example schema for get /guilds/:guildId/roles/:roleId\nconst roleResponseSchema = {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n};\n// Schema for retrieving all roles from a guild with example data\nconst rolesResponseSchema = {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n};\n\n// Write exports here\nexport { RoleResponse, EditRoleData, roleResponseSchema, rolesResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SelfController.html":{"url":"controllers/SelfController.html","title":"controller - SelfController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SelfController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user/self\n            \n\n\n            \n                Description\n            \n            \n                The controller for the /user/self endpoint.\nThis endpoint is responsible for telling the frontend the current logged in user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/self.controller.ts:21\n                        \n                    \n\n\n            \n                \n                        Gets the current logged in user for the frontend.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the user ID, this is the discord user ID and it comes from the request if a user is logged in\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the user with data fetch from the discord api, see self.service.ts\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, UseGuards } from '@nestjs/common';\nimport { SelfDto } from './self.dto';\nimport { RequestUser } from '../util/decorators/request-user.decorator';\nimport { JwtAuthGuard } from '../auth/jwt/guards/jwt-auth.guard';\nimport { SelfService } from './self.service';\n\n/**\n * The controller for the /user/self endpoint.\n * This endpoint is responsible for telling the frontend the current logged in user.\n */\n@Controller('/user/self')\n@UseGuards(JwtAuthGuard)\nexport class SelfController {\n  constructor(@Inject(SelfService) private readonly selfService: SelfService) {}\n  /**\n   * Gets the current logged in user for the frontend.\n   * @param userId the user ID, this is the discord user ID and it comes from the request if a user is logged in\n   * @returns the user with data fetch from the discord api, see self.service.ts\n   */\n  @Get()\n  async getSelf(@RequestUser() userId: string): Promise {\n    return this.selfService.fetchSelf(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfDto.html":{"url":"classes/SelfDto.html","title":"class - SelfDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                guilds\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guilds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Guild[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['userId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { GuildUser } from '@prisma/client';\n\nexport class Guild {\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) name: string;\n  @ApiProperty({ type: String }) image: string;\n}\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n  @ApiPropertyOptional({ type: [Guild] }) guilds: Guild[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfDto-1.html":{"url":"classes/SelfDto-1.html","title":"class - SelfDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/dto/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                guildId\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                rank\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['guildId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['rank']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['userId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GuildUser } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) rank: GuildUser['rank'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SelfService.html":{"url":"injectables/SelfService.html","title":"injectable - SelfService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SelfService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service used to fetch the user data that the frontend needs.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _fetchGuilds\n                            \n                            \n                                    Async\n                                fetchSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discord: Client, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/self.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discord\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _fetchGuilds\n                        \n                    \n                \n            \n            \n                \n                        \n                    _fetchGuilds(userId: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/self.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Fetches the user from the bots database and\ntakes the guild ids and fetches those from discord, then returns them.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the discord user id of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                a list of guilds that the user is in\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        fetchSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchSelf(userId: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/self.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Fetches the user from discord and\nchecks the guild that the user is in via the database\nand returns the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the discord user id of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the user dto with all needed data\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client, Guild } from 'discord.js';\nimport { PrismaService } from '../prisma.service';\nimport { SelfDto } from './self.dto';\nimport { User } from '@prisma/client';\nimport { plainToInstance } from '../util/functions/plain-to-instance';\n\n/**\n * Service used to fetch the user data that the frontend needs.\n */\n@Injectable()\nexport class SelfService {\n  constructor(\n    @InjectDiscordClient() private readonly discord: Client,\n    @Inject(PrismaService) private readonly prisma: PrismaService,\n  ) {}\n  /**\n   * Fetches the user from discord and\n   * checks the guild that the user is in via the database\n   * and returns the user.\n   * @param userId the discord user id of the user\n   * @returns the user dto with all needed data\n   */\n  async fetchSelf(userId: User['userId']): Promise {\n    const [discordUser, guilds] = await Promise.all([\n      this.discord.users.fetch(userId),\n      this._fetchGuilds(userId),\n    ]);\n\n    return plainToInstance(SelfDto, {\n      userId: discordUser.id,\n      avatarUrl: discordUser.avatarURL({ size: 128 }),\n      name: discordUser.globalName,\n      guilds: guilds.map((guild) => ({\n        guildId: guild.id,\n        name: guild.name,\n        image: guild.iconURL({ size: 128 }),\n      })),\n    });\n  }\n  /**\n   * Fetches the user from the bots database and\n   * takes the guild ids and fetches those from discord, then returns them.\n   * @param userId the discord user id of the user\n   * @returns a list of guilds that the user is in\n   */\n  private async _fetchGuilds(userId: User['userId']): Promise {\n    return this.prisma.guildUser\n      .findMany({ where: { userId: userId } })\n      .then((guildUsers) =>\n        Promise.all(\n          guildUsers.map((guildUser) =>\n            this.discord.guilds.fetch(guildUser.guildId),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendDirectMessageToUserException.html":{"url":"classes/SendDirectMessageToUserException.html","title":"class - SendDirectMessageToUserException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendDirectMessageToUserException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/send-direct-message-to-user-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when the bot tries to DM a user but fails\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, userId: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/send-direct-message-to-user-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when the bot tries to DM a user but fails\n */\nexport class SendDirectMessageToUserException extends Error {\n  constructor(guildId: string, userId: string) {\n    super(\n      `Failed to send direct message to user ${userId} in guild ${guildId}.`,\n    );\n  }\n}\n\n/**\n * Filter used to craft the http api error response when the exception is triggered in a http request context.\n */\n@Catch(SendDirectMessageToUserException)\nexport class SendDirectMessageToUserExceptionFilter implements ExceptionFilter {\n  catch(exception: SendDirectMessageToUserException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendDirectMessageToUserExceptionFilter.html":{"url":"classes/SendDirectMessageToUserExceptionFilter.html","title":"class - SendDirectMessageToUserExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendDirectMessageToUserExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/send-direct-message-to-user-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to craft the http api error response when the exception is triggered in a http request context.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: SendDirectMessageToUserException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/send-direct-message-to-user-exception.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            SendDirectMessageToUserException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when the bot tries to DM a user but fails\n */\nexport class SendDirectMessageToUserException extends Error {\n  constructor(guildId: string, userId: string) {\n    super(\n      `Failed to send direct message to user ${userId} in guild ${guildId}.`,\n    );\n  }\n}\n\n/**\n * Filter used to craft the http api error response when the exception is triggered in a http request context.\n */\n@Catch(SendDirectMessageToUserException)\nexport class SendDirectMessageToUserExceptionFilter implements ExceptionFilter {\n  catch(exception: SendDirectMessageToUserException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetFirstMessageUICommand.html":{"url":"classes/SetFirstMessageUICommand.html","title":"class - SetFirstMessageUICommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetFirstMessageUICommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/user-set-first-message-ui.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onShowInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/user-set-first-message-ui.command.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onShowInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    onShowInfo(interaction: ContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/user-set-first-message-ui.command.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ApplicationCommandType,\n  Client,\n  ContextMenuCommandInteraction,\n  userMention,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'Set first message',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class SetFirstMessageUICommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService)\n    private prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onShowInfo(interaction: ContextMenuCommandInteraction) {\n    if (!interaction.isContextMenuCommand()) return;\n    await interaction.deferReply({ ephemeral: true });\n    const message = await interaction.channel.messages.fetch(\n      interaction.targetId,\n    );\n    await this.prismaService.guildUser.update({\n      where: {\n        guildId_userId: {\n          guildId: message.guildId,\n          userId: message.author.id,\n        },\n      },\n      data: {\n        firstMessageId: interaction.targetId,\n      },\n    });\n    interaction.followUp({\n      content: `First message for ${userMention(\n        message.author.id,\n      )} has been set.`,\n      ephemeral: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingsChanged.html":{"url":"classes/SettingsChanged.html","title":"class - SettingsChanged","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingsChanged\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/events/settings-role-id-changed.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventType\n                            \n                            \n                                guildId\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, value: string | number | boolean, eventType)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string | number | boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventType\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventType\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { Settings } from '@prisma/client';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SettingsChanged implements EventToLog {\n  guildId: string;\n  value: string | number | boolean;\n  eventType: keyof Settings;\n\n  constructor(\n    guildId: string,\n    value: string | number | boolean,\n    eventType: keyof Settings,\n  ) {\n    this.guildId = guildId;\n    this.value = value;\n    this.eventType = eventType;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`SettingsChanged: ${this.eventType} changed to ${this.value}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingsDto.html":{"url":"classes/SettingsDto.html","title":"class - SettingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/dto/settings.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                adminRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                introChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveMessageFormat\n                            \n                            \n                                    \n                                    \n                                    \n                                modChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                modRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                openIntroChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                prefix\n                            \n                            \n                                    \n                                    \n                                    \n                                unverifiedMemberRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                verifiedMemberRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                welcomeMessageFormat\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        adminRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        introChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveMessageFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        modChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        modRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        openIntroChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        unverifiedMemberRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        verifiedMemberRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        welcomeMessageFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Settings } from '@prisma/client';\nimport { IsOptional, IsString } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class SettingsDto implements Omit {\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  prefix: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  welcomeMessageFormat: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  openIntroChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  introChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  leaveMessageFormat: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  leaveChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  unverifiedMemberRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  verifiedMemberRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  modRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  adminRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  modChannelId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlowmodeDisabled.html":{"url":"classes/SlowmodeDisabled.html","title":"class - SlowmodeDisabled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlowmodeDisabled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                enabled\n                            \n                            \n                                guildId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, enabled: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        enabled\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlowmodeEnabled.html":{"url":"classes/SlowmodeEnabled.html","title":"class - SlowmodeEnabled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlowmodeEnabled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                enabled\n                            \n                            \n                                guildId\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, enabled: boolean, seconds: number)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        enabled\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seconds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpecialCommand.html":{"url":"classes/SpecialCommand.html","title":"class - SpecialCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpecialCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/special.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cakes\n                            \n                            \n                                coffees\n                            \n                            \n                                possibleAnswers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                chooseRandomCoffee\n                            \n                            \n                                templateAnswer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cakes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'Käsekuchen',\n    'Apfelkuchen',\n    'Bienenstich',\n    'Streuselkuchen',\n    'Kuchen',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coffees\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'Americano',\n    'Cappuccino',\n    'Diplomatenkaffee',\n    'Einspänner',\n    'Eiskaffee',\n    'Espresso',\n    'Kaffee Konsul',\n    'Latte Macchiato',\n    'Mokka',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        possibleAnswers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    '*Y schiebt X einen Z rüber!*',\n    '*Y schenkt X einen ganzen Z!*',\n    '*Y gibt X ein headpat :3*',\n    '*Y gibt X eine Umarmung :3*',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        chooseRandomCoffee\n                        \n                    \n                \n            \n            \n                \n                        \n                    chooseRandomCoffee(interaction: CommandInteraction, dto: UserToUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/special.command.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserToUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateAnswer\n                        \n                    \n                \n            \n            \n                \ntemplateAnswer(category: string, fromUserId: string, toUserId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/commands/special.command.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fromUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                toUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, IA, InteractionEvent } from '@discord-nestjs/core';\nimport { CommandInteraction, userMention } from 'discord.js';\nimport { UserToUser } from '../dto/user-to-user.dto';\nimport { SlashCommandPipe } from '@discord-nestjs/common';\nimport { UseFilters, ValidationPipe } from '@nestjs/common';\nimport { CommandValidationFilter } from '../filters/command-validation';\n\n@Command({\n  name: 'special',\n  description:\n    'Give a user you like a coffee, a cake or a headpat or maybe just a hug?',\n  dmPermission: false,\n})\n@UseFilters(CommandValidationFilter)\nexport class SpecialCommand {\n  coffees = [\n    'Americano',\n    'Cappuccino',\n    'Diplomatenkaffee',\n    'Einspänner',\n    'Eiskaffee',\n    'Espresso',\n    'Kaffee Konsul',\n    'Latte Macchiato',\n    'Mokka',\n  ];\n  possibleAnswers = [\n    '*Y schiebt X einen Z rüber!*',\n    '*Y schenkt X einen ganzen Z!*',\n    '*Y gibt X ein headpat :3*',\n    '*Y gibt X eine Umarmung :3*',\n  ];\n  cakes = [\n    'Käsekuchen',\n    'Apfelkuchen',\n    'Bienenstich',\n    'Streuselkuchen',\n    'Kuchen',\n  ];\n  @Handler()\n  async chooseRandomCoffee(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: UserToUser,\n  ): Promise {\n    const toUser = await interaction.guild.members.fetch(dto.user);\n    return this.templateAnswer(dto.category, interaction.user.id, toUser.id);\n  }\n\n  templateAnswer(category: string, fromUserId: string, toUserId: string) {\n    console.log(category);\n    console.log(fromUserId);\n    console.log(toUserId);\n\n    switch (category) {\n      case 'coffee':\n        return this.possibleAnswers[0]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId))\n          .replace(\n            'Z',\n            this.coffees[Math.ceil(Math.random() * this.coffees.length - 1)],\n          );\n      case 'cake':\n        return this.possibleAnswers[1]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId))\n          .replace(\n            'Z',\n            this.cakes[Math.ceil(Math.random() * this.cakes.length - 1)],\n          );\n      case 'headpat':\n        return this.possibleAnswers[2]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId));\n      case 'hug':\n        return this.possibleAnswers[3]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId));\n      default:\n        break;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nGuildRestrictedChannelService->TasksModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nTasksModule -->\n\nGuildService->TasksModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nTasksModule -->\n\nGuildSettingsService->TasksModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nTasksModule -->\n\nGuildUserService->TasksModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nTasksModule -->\n\nPrismaService->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The Tasks module manages the creation/execution of jobs that run periodically\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { GuildRestrictedChannelService } from 'src/guild/guild-restricted-channel/guild-restricted-channel.service';\n\n/**\n * The Tasks module manages the creation/execution of jobs that run periodically\n */\n@Module({\n  providers: [\n    TasksService,\n    GuildUserService,\n    GuildService,\n    PrismaService,\n    GuildSettingsService,\n    GuildRestrictedChannelService,\n  ],\n  imports: [DiscordModule.forFeature()],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The tasks service is responsible for managing jobs/tasks that run periodically.\nIt also exposes a way to create tasks but NOT deleting them.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                checkActiveUsers\n                            \n                            \n                                    \n                                    Async\n                                checkTimeouts\n                            \n                            \n                                    \n                                    Async\n                                cleanWfpMembers\n                            \n                            \n                                    \n                                    Async\n                                closeStaleTickets\n                            \n                            \n                                createDynamicScheduledJob\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildService: GuildService, userService: GuildUserService, client: Client, eventEmitter: EventEmitter2, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkActiveUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkActiveUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'checkActiveUsers', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Runs at 00:00:00 every day and\nupdates the written messages count for all users, of all guilds the bot is in, that have the MEMBER rank\nand then updates their permissions on specific channels.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkTimeouts\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeouts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('*/5 * * * *', {name: 'timeouts', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Runs every 5 minutes and checks if members of each given guild the bot is in are still timeouted\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        cleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanWfpMembers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'cleanWfpMembers', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Runs everyday at midnight and kicks members that are longer than 14 days on the server and haven't checked in.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        closeStaleTickets\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeStaleTickets()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'closeStaleTickets', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createDynamicScheduledJob\n                        \n                    \n                \n            \n            \n                \ncreateDynamicScheduledJob(jobOptions: CronJobParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:41\n                        \n                    \n\n\n            \n                \n                        A utility function to create cronjobs on the fly from cronjob parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jobOptions\n                                            \n                                                        CronJobParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    CronJob parameters such as the time. onComplete etc\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                a new cronjob\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { GuildUser } from '@prisma/client';\nimport {\n  BaseGuildTextChannel,\n  Client,\n  Colors,\n  EmbedBuilder,\n  GuildTextBasedChannel,\n  userMention,\n} from 'discord.js';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { UserTimeOutEvent } from 'src/guild/moderation/events/user.events';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { CronJob, CronJobParams } from 'cron';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\n\nconst logger = new Logger('TaskService');\n\n/**\n * The tasks service is responsible for managing jobs/tasks that run periodically.\n * It also exposes a way to create tasks but NOT deleting them.\n */\n@Injectable()\nexport class TasksService {\n  constructor(\n    @Inject(GuildService) private guildService: GuildService,\n    @Inject(GuildUserService) private userService: GuildUserService,\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n    @Inject(PrismaService) private readonly prismaService: PrismaService,\n  ) {}\n  /**\n   * A utility function to create cronjobs on the fly from cronjob parameters\n   * @param jobOptions CronJob parameters such as the time. onComplete etc\n   * @returns a new cronjob\n   */\n  createDynamicScheduledJob(jobOptions: CronJobParams) {\n    return new CronJob(\n      jobOptions.cronTime,\n      jobOptions.onTick,\n      jobOptions.onComplete,\n      jobOptions.start,\n      jobOptions.timeZone,\n    );\n  }\n\n  /**\n   * Runs at 00:00:00 every day and\n   * updates the written messages count for all users, of all guilds the bot is in, that have the MEMBER rank\n   * and then updates their permissions on specific channels.\n   */\n  @Cron('0 0 * * *', {\n    name: 'checkActiveUsers',\n    timeZone: 'Europe/Berlin',\n  })\n  async checkActiveUsers() {\n    this.client.guilds.cache.forEach(async (guild) => {\n      (await this.userService.findAll(guild.id)).forEach(\n        async (user: GuildUser) => {\n          if (user.rank != 'MEMBER') return;\n          logger.log(`Checking user ${user.userId} for activity...`);\n          this.userService.updateMessageCountBucket(user.userId, user.guildId);\n          this.guildService.updateChannelPermissions(user);\n        },\n      );\n    });\n  }\n\n  /**\n   * Runs every 5 minutes and checks if members of each given guild the bot is in are still timeouted\n   */\n  @Cron('*/5 * * * *', {\n    name: 'timeouts',\n    timeZone: 'Europe/Berlin',\n  })\n  async checkTimeouts() {\n    this.client.guilds.cache.forEach(async (guild) => {\n      (await this.userService.findAll(guild.id)).forEach(\n        async (dbUser: GuildUser) => {\n          try {\n            const member = await this.client.guilds.cache\n              .get(guild.id)\n              .members.fetch(dbUser.userId.toString());\n            if (member.communicationDisabledUntilTimestamp == null) {\n              return;\n            } else if (\n              member.communicationDisabledUntilTimestamp > Date.now()\n            ) {\n              logger.log(\n                `User ${dbUser.userId} is still timed out, until ${new Date(\n                  member.communicationDisabledUntilTimestamp,\n                ).toLocaleString()}`,\n              );\n              return;\n            } else if (\n              member.communicationDisabledUntilTimestamp  userMention(member.id))\n            .join('\\n'),\n        },\n        {\n          name: \"Couldn't kick members count\",\n          value: outCome['unkickableMembers'].length.toString(),\n        },\n        {\n          name: \"Couldn't kick members names\",\n          value: outCome['unkickableMembers']\n            .map((member) => userMention(member.id))\n            .join('\\n'),\n        },\n      ]);\n    await logChannel.send({\n      embeds: [embed],\n    });\n  }\n\n  @Cron('0 0 * * *', {\n    name: 'closeStaleTickets',\n    timeZone: 'Europe/Berlin',\n  })\n  async closeStaleTickets() {\n    const tickets = await this.prismaService.tickets.findMany();\n    tickets.forEach(async (ticket) => {\n      try {\n        const channel = (await (\n          await this.client.guilds.fetch(ticket.guildId)\n        ).channels.fetch(ticket.ticketId)) as GuildTextBasedChannel;\n        if (\n          new Date(new Date().setDate(new Date().getDate() - 7)) >\n          new Date(channel.lastMessage.createdTimestamp)\n        ) {\n          try {\n            await (channel as BaseGuildTextChannel).permissionOverwrites.delete(\n              ticket.userId,\n            );\n            await this.prismaService.tickets.update({\n              where: {\n                ticketId: ticket.ticketId,\n              },\n              data: {\n                closed: true,\n              },\n            });\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketSystemSetupCommand.html":{"url":"classes/TicketSystemSetupCommand.html","title":"class - TicketSystemSetupCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketSystemSetupCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/ticket-system.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onTicketsystemSetupCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/ticket-system.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTicketsystemSetupCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTicketsystemSetupCommand(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/ticket-system.command.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  Client,\n  CommandInteraction,\n} from 'discord.js';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Command({\n  name: 'ticketsystem-setup',\n  description: 'Sends a message and attaches the create Ticket button.',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class TicketSystemSetupCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n\n  @Handler()\n  async onTicketsystemSetupCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n  ) {\n    try {\n      await interaction.channel.send({\n        content:\n          'Du hast ein Anliegen welches du mit den Mods besprechen möchtest? Dann erstelle ein Ticket!',\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n      await interaction.reply({\n        ephemeral: true,\n        content: 'Done!',\n      });\n    } catch {\n      interaction.reply({\n        ephemeral: true,\n        content: 'Could not send a message in this channel!',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeOutCommand.html":{"url":"classes/TimeOutCommand.html","title":"class - TimeOutCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeOutCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/timeout.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                onTimeOutCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/timeout.command.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onTimeOutCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTimeOutCommand(interaction: CommandInteraction, dto: UserTimeOutDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()@UseFilters(CommandValidationFilter)\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/timeout.command.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserTimeOutDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  Client,\n  CommandInteraction,\n  EmbedBuilder,\n  userMention,\n} from 'discord.js';\nimport UserTimeOutDto from '../dto/user-timeout.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  UserSendDMFailedEvent,\n  UserTimeOutEvent,\n  UserTimeOutFailedEvent,\n} from 'src/guild/moderation/events/user.events';\nimport { UseFilters } from '@nestjs/common';\nimport { CommandValidationFilter } from '../filters/command-validation';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Command({\n  name: 'timeout',\n  description: 'Timeouts a user',\n  defaultMemberPermissions: ['ModerateMembers'],\n  descriptionLocalizations: {\n    'en-US': 'Timeouts a user',\n    de: 'Nutzer:in muten (Timeout)',\n  },\n  dmPermission: false,\n})\nexport class TimeOutCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    private readonly eventEmitter: EventEmitter2,\n  ) {}\n  @Handler()\n  @UseFilters(CommandValidationFilter)\n  async onTimeOutCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: UserTimeOutDto,\n  ) {\n    const date = new Date(dto.duration).getTime();\n    const user = await interaction.guild.members.fetch(dto.user);\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const error: Array = [];\n    try {\n      await user.timeout(date - Date.now(), dto.reason);\n    } catch (err) {\n      error.push(err);\n      this.eventEmitter.emit(\n        'user.timeout.failed',\n        new UserTimeOutFailedEvent(\n          user.id,\n          interaction.guildId,\n          dto.reason,\n          date,\n          err,\n        ),\n      );\n    }\n    try {\n      if (error.length) throw new Error('Timeout failed, therefore no DM');\n      await user.send({\n        content: `Du hast einen Timeout bis ${new Date(\n          dto.duration,\n        ).toString()}, bei Fragen wende dich an die Mods. \nGrund: ${dto.reason}`,\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n    } catch (err) {\n      error.push(err);\n      this.eventEmitter.emit(\n        'user.send.failed',\n        new UserSendDMFailedEvent(user.id, interaction.guildId, err),\n      );\n    }\n    const embed = new EmbedBuilder()\n      .setAuthor({\n        name: this.client.user.username,\n        iconURL: this.client.user.avatarURL(),\n      })\n      .setTitle(`Timeout user ${user.user.username}`)\n      .setDescription(\n        error.length === 0\n          ? `Timeouted user ${userMention(user.id)} until ${new Date(\n              dto.duration,\n            ).toLocaleString()} and sent them a DM.`\n          : `Failed to timeout user ${userMention(user.id)} until ${new Date(\n              dto.duration,\n            ).toLocaleString()}, check below for more information.`,\n      );\n    if (error.length) {\n      embed.addFields(\n        error.map((e) => {\n          if (!(e instanceof Error)) return;\n          return {\n            name: e.name,\n            value: e.message,\n          };\n        }),\n      );\n    }\n    await interaction.followUp({\n      embeds: [embed],\n      ephemeral: true,\n    });\n    this.eventEmitter.emit(\n      'user.timeout.created',\n      new UserTimeOutEvent(user.id, interaction.guildId, dto.reason, date),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnverifyByRoleCommand.html":{"url":"classes/UnverifyByRoleCommand.html","title":"class - UnverifyByRoleCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnverifyByRoleCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/unverify-by-role.conmand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onUnverifybyRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/unverify-by-role.conmand.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onUnverifybyRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    onUnverifybyRole(baseInteraction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/unverify-by-role.conmand.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                baseInteraction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n} from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { Client, CommandInteraction } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'enter-lockdown',\n  dmPermission: false,\n})\nexport class UnverifyByRoleCommand {\n  constructor(\n    @InjectDiscordClient() private client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  @Handler()\n  onUnverifybyRole(@IA() baseInteraction: CommandInteraction) {\n    this.client.guilds.fetch(baseInteraction.guildId).then((guild) =>\n      guild.members.fetch().then((members) =>\n        members.forEach(async (member) => {\n          if (\n            member.roles.cache.has('1011563978956226560') ||\n            member.roles.cache.has('1011513775054143632') ||\n            guild.ownerId == member.id\n          )\n            return;\n          const roles = [];\n          member.roles.cache.forEach((role) => roles.push({ id: role.id }));\n          this.database.lockdownRoleBackup\n            .create({\n              data: {\n                guildId: member.guild.id,\n                userId: member.id,\n                roles,\n              },\n            })\n            .then(async (data) =>\n              (data.roles as Prisma.JsonArray).forEach(\n                async (role: { id: string }) =>\n                  await member.roles.remove(role.id),\n              ),\n            );\n          if (!member.roles.cache.has('1226585753253843014')) {\n            await member.roles.add('1121823930085285938');\n          } else {\n            //await member.roles.add('')\n          }\n        }),\n      ),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserBanEvent.html":{"url":"classes/UserBanEvent.html","title":"class - UserBanEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserBanEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                banUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                kickUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                purgeUserFromGuild\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                timeoutUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        banUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    banUser(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/ban')@ApiOperation({summary: 'Ban a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully banned'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUser(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get a user for a guild'})@ApiResponse({status: 200, type: DiscordUser, schema: userResponseSchema, description: 'User was successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUsers(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all users for a guild'})@ApiResponse({status: 200, schema: usersResponseSchema, type: DiscordGuildMember, description: 'Users were successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        kickUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    kickUser(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/kick')@ApiOperation({summary: 'Kick a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully kicked'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        purgeUserFromGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    purgeUserFromGuild(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/purge')@ApiOperation({summary: 'Purge a user from a guild VERY EXPENSIVEEEEEE, USE WITH CAUTION'})@ApiResponse({status: 200, description: 'User was successfully purged'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        timeoutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    timeoutUser(guildId: string, userId: string, duration: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/timeout/:duration')@ApiOperation({summary: 'Timeout a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully timed outed'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                duration\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  NotFoundException,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { ChannelType, Client, User } from 'discord.js';\nimport {\n  DiscordUser,\n  userResponseSchema,\n  usersResponseSchema,\n} from '../dto/user';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\nimport { SendDirectMessageToUserException } from 'src/util/exception/send-direct-message-to-user-exception';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  UserBanEvent,\n  UserKickEvent,\n  UserPurgeEvent,\n  UserTimeOutEvent,\n} from '../events/user.events';\nimport { DiscordGuildMember } from '../dto/guild-member';\nimport { plainToInstance } from '../../../util/functions/plain-to-instance';\nimport { Request } from 'express';\nimport { GuildUser, Rank } from '@prisma/client';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller('/user')\n@ApiBearerAuth()\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class UserController {\n  logger = new Logger(UserController.name);\n\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all users for a guild' })\n  @ApiResponse({\n    status: 200,\n    schema: usersResponseSchema,\n    type: DiscordGuildMember,\n    description: 'Users were successfully fetched',\n  })\n  async getGuildUsers(\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const members = await guild.members.fetch();\n    this.logger.debug(`Found ${members.size} members in guild ${guildId}`);\n    return members.map((member) =>\n      plainToInstance(DiscordGuildMember, {\n        avatarUrl: member.displayAvatarURL(),\n        guildId: member.guild.id,\n        bot: member.user.bot,\n        userId: member.user.id,\n        communicationDisabledUntil:\n          member?.communicationDisabledUntil?.toJSON() ?? undefined,\n        displayName: member.displayName ?? member.user.globalName,\n        username: member.user.username,\n      }),\n    );\n  }\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get a user for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: DiscordUser,\n    schema: userResponseSchema,\n    description: 'User was successfully fetched',\n  })\n  async getGuildUser(\n    @Req() request: Request & { user: GuildUser },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(request.user.guildId);\n    const member = await guild.members.fetch(request.user.userId);\n    this.logger.log(\n      `Found member ${member.user.username} in guild ${request.user.guildId}`,\n    );\n    return member.user;\n  }\n\n  @Post(':userId/ban')\n  @ApiOperation({ summary: 'Ban a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully banned',\n  })\n  async banUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    await guild.members.ban(userId);\n    this.logger.log(`Banned user ${userId} from guild ${guildId}`);\n    await this.eventEmitter.emitAsync(\n      'user.ban',\n      new UserBanEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n\n  @Post(':userId/kick')\n  @ApiOperation({ summary: 'Kick a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully kicked',\n  })\n  async kickUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    await guild.members.kick(userId);\n    this.logger.log(`Kicked user ${userId} from guild ${guildId}`);\n    await this.eventEmitter.emitAsync(\n      'user.kick',\n      new UserKickEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n\n  @Post(':userId/timeout/:duration')\n  @ApiOperation({ summary: 'Timeout a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully timed outed',\n  })\n  async timeoutUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n    @Param('duration') duration: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const member = await guild.members.fetch(userId);\n    await member.timeout(parseInt(duration));\n    await member\n      .send(\n        `Du hast einen Timeout bis ${new Date(\n          new Date().getTime() + duration,\n        ).toISOString()}, bei Fragen wende dich an die Mods.`,\n      )\n      .catch(() => {\n        throw new SendDirectMessageToUserException(guildId, userId);\n      });\n    await this.eventEmitter.emitAsync(\n      'user.timeout.created',\n      new UserTimeOutEvent(\n        userId,\n        guildId,\n        'TODO: NOT IMPLEMENTED',\n        new Date(new Date().getTime() + duration).getMilliseconds(),\n      ),\n    );\n    this.logger.log(\n      `Timed out user ${userId} from guild ${guildId} for ${duration}`,\n    );\n  }\n\n  @Post(':userId/purge')\n  @ApiOperation({\n    summary: 'Purge a user from a guild VERY EXPENSIVEEEEEE, USE WITH CAUTION',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully purged',\n  })\n  async purgeUserFromGuild(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(`Purging user ${userId} from guild ${guildId}`);\n    if (guild === undefined) {\n      throw new NotFoundException('Guild not found');\n    }\n    guild.channels.fetch();\n    guild.channels.cache.forEach(async (channel) => {\n      try {\n        if (\n          channel.type === ChannelType.GuildText ||\n          channel.type === ChannelType.PublicThread ||\n          channel.type === ChannelType.PrivateThread\n        ) {\n          this.logger.log(`Purging user ${userId} from channel ${channel.id}`);\n          await cleanTextChannel(\n            channel,\n            () => false,\n            (msg) => msg.author.id === userId,\n            this.logger,\n          );\n          // sleep for 500ms to avoid rate limit\n          await new Promise((resolve) => setTimeout(resolve, 500));\n        }\n      } catch {\n        this.logger.error(\n          `Failed to purge user ${userId} from channel ${channel.id}`,\n        );\n      }\n    });\n    await this.eventEmitter.emitAsync(\n      'user.purge',\n      new UserPurgeEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInfoUiCommand.html":{"url":"classes/UserInfoUiCommand.html","title":"class - UserInfoUiCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInfoUiCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/user-info-ui.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getMessage\n                            \n                            \n                                    \n                                    Async\n                                onShowInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/user-info-ui.command.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _getMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getMessage(msgId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/commands/user-info-ui.command.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                msgId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onShowInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    onShowInfo(interaction: ContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/user-info-ui.command.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ApplicationCommandType,\n  Client,\n  ContextMenuCommandInteraction,\n  EmbedBuilder,\n  Message,\n  userMention,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'Show user info',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.User,\n})\nexport class UserInfoUiCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService)\n    private prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onShowInfo(interaction: ContextMenuCommandInteraction) {\n    if (!interaction.isContextMenuCommand()) return;\n    await interaction.deferReply({ ephemeral: true });\n    const guildUser = await this.prismaService.guildUser.findUnique({\n      where: {\n        guildId_userId: {\n          guildId: interaction.guildId,\n          userId: interaction.targetId,\n        },\n      },\n    });\n    if (!guildUser) {\n      return interaction.followUp({\n        content: 'User not found in database.',\n        ephemeral: true,\n      });\n    }\n    const firstMessageId = guildUser.firstMessageId;\n    const message = await this._getMessage(firstMessageId, interaction.guildId);\n    const numMessages = await this.prismaService.messages.count({\n      where: { userId: interaction.targetId, guildId: interaction.guildId },\n    });\n    const numReactions = await this.prismaService.auditLog.count({\n      where: {\n        invokerId: interaction.targetId,\n        guildId: interaction.guildId,\n        action: 'REACTION_ADDED',\n      },\n    });\n\n    const embed = new EmbedBuilder()\n      .setTitle('User Info')\n      .setDescription(`User: ${userMention(interaction.targetId)}`)\n      .addFields([\n        {\n          name: 'Link to introduction message',\n          value: message\n            ? `$[Click here](${message.url})`\n            : 'No message found in the database',\n        },\n        {\n          name: 'Number of messages sent',\n          value: numMessages.toString(),\n        },\n        {\n          name: 'Reactions added',\n          value: numReactions.toString(),\n        },\n      ]);\n    return interaction.followUp({\n      embeds: [embed],\n      ephemeral: true,\n    });\n  }\n  async _getMessage(msgId: string, guildId: string) {\n    if (!msgId) return null;\n    let message: Message = null;\n    await this.client.guilds.fetch(guildId).then(async (guild) => {\n      (await guild.channels.fetch()).forEach(async (channel) => {\n        if (channel.isTextBased()) {\n          try {\n            message = await channel.messages.fetch(msgId);\n          } catch {\n            return;\n          }\n        }\n      });\n    });\n    return message;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserKickEvent.html":{"url":"classes/UserKickEvent.html","title":"class - UserKickEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserKickEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nSelfService \n\nSelfService \n\n\n\nUserModule\n\nUserModule\n\nSelfService  -->\n\nUserModule->SelfService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nUserModule -->\n\nSelfService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The user module, not to be confused the guildUser module,\nis used to manage the bot local user of a discord user.\nSee user.service.ts and self.controller.ts for more info\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            SelfService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SelfController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SelfService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { SelfController } from './self.controller';\nimport { SelfService } from './self.service';\n\n/**\n * The user module, not to be confused the guildUser module,\n * is used to manage the bot local user of a discord user.\n * See user.service.ts and self.controller.ts for more info\n */\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [PrismaService, SelfService],\n  controllers: [SelfController],\n  exports: [SelfService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPurgeEvent.html":{"url":"classes/UserPurgeEvent.html","title":"class - UserPurgeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPurgeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:92\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:90\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSendDMFailedEvent.html":{"url":"classes/UserSendDMFailedEvent.html","title":"class - UserSendDMFailedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSendDMFailedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                guildId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, error: Error)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:110\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:108\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutDto.html":{"url":"classes/UserTimeOutDto.html","title":"class - UserTimeOutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user-timeout.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                duration\n                            \n                            \n                                    \n                                reason\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Param({description: 'The duration of the timeout', descriptionLocalizations: undefined, type: undefined, required: true})@IsDateString({}, {message: 'The input must be in format: Xd, Xh, Xm or XdXh or XhXm or XdXm or XdXhXm. Where X is a number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The reason for the timeout', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user to timeout', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { Transform } from 'class-transformer';\nimport { IsDateString } from 'class-validator';\nimport { User } from 'discord.js';\n\nexport default class UserTimeOutDto {\n  @Param({\n    description: 'The user to timeout',\n    descriptionLocalizations: {\n      'en-US': 'The user to timeout',\n      de: 'Account der gemutet werden soll',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n\n  @Param({\n    description: 'The reason for the timeout',\n    descriptionLocalizations: {\n      'en-US': 'The reason for the timeout',\n      de: 'Grund für den Timeout',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  reason: string;\n\n  // Hacky way to both transform the value and validate it, in one step :D\n  @Transform(({ value }) => {\n    if (\n      !/\\b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/.test(\n        value.trim(),\n      )\n    )\n      return null;\n    let _days = '0';\n    let _hours = '0';\n    let _minutes = '0';\n    (value as string)\n      .match(\n        /\\b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/g,\n      )\n      .forEach((match) => {\n        if (match.endsWith('d')) _days = match.replace('d', '');\n        else if (match.endsWith('h')) _hours = match.replace('h', '');\n        else if (match.endsWith('m')) _minutes = match.replace('m', '');\n      });\n    const days = parseInt(_days) || 0;\n    const hours = parseInt(_hours) || 0;\n    const minutes = parseInt(_minutes) || 0;\n    return new Date(\n      Date.now() + ((days * 24 + hours) * 60 + minutes) * 60 * 1000,\n    ).toISOString();\n  })\n  @Param({\n    description: 'The duration of the timeout',\n    descriptionLocalizations: {\n      'en-US': 'The duration of the timeout',\n      de: 'Dauer des Timeouts',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsDateString(\n    {},\n    {\n      message:\n        'The input must be in format: Xd, Xh, Xm or XdXh or XhXm or XdXm or XdXhXm. Where X is a number',\n    },\n  )\n  duration: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutEvent.html":{"url":"classes/UserTimeOutEvent.html","title":"class - UserTimeOutEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string, duration: number)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:37\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutFailedEvent.html":{"url":"classes/UserTimeOutFailedEvent.html","title":"class - UserTimeOutFailedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutFailedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                error\n                            \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string, duration: number, error: Error)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:62\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserToUser.html":{"url":"classes/UserToUser.html","title":"class - UserToUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserToUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user-to-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Choice(CommandToExecute)@Param({description: 'Was möchtest du einer Person geben?', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-to-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user you want to give something', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-to-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Choice, Param, ParamType } from '@discord-nestjs/core';\nimport { ChoiceOptions } from '@discord-nestjs/core/dist/decorators/option/choice/choice-options';\nimport { User } from 'discord.js';\n\nconst CommandToExecute: ChoiceOptions = {\n  'Einer Person einen Kaffee geben': 'coffee',\n  'Einer Person einen Kuchen geben': 'cake',\n  'Einer Person ein Headpat geben': 'headpat',\n  'Eine Person umarmen': 'hug',\n};\nexport class UserToUser {\n  @Param({\n    description: 'The user you want to give something',\n    descriptionLocalizations: {\n      'en-US': 'The user you want to give something',\n      de: 'Person welcher du etwas geben willst',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n\n  @Choice(CommandToExecute)\n  @Param({\n    description: 'Was möchtest du einer Person geben?',\n    required: true,\n  })\n  category: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.controller.ts\n            \n            controller\n            AuditLogController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.events.ts\n            \n            injectable\n            AuditEvents\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.service.ts\n            \n            injectable\n            AuditLogService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auditlog/dto/audit-log-filter.dto.ts\n            \n            class\n            AuditLogFilterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auditlog/dto/log-entry.dto.ts\n            \n            class\n            LogEntryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/guards/refresh-auth.guard.ts\n            \n            injectable\n            RefreshJwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.controller.ts\n            \n            controller\n            JwtAuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.service.ts\n            \n            injectable\n            JwtAuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.strategy.ts\n            \n            injectable\n            JwtAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/refresh-token.strategy.ts\n            \n            injectable\n            RefreshJwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/add-role.command.ts\n            \n            class\n            AddRoleCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/clean-wfp.command.ts\n            \n            class\n            CleanWfpMember\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/community-question.command.ts\n            \n            class\n            CommunityQuestionCommand\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bot/commands/init-guild.command.ts\n            \n            class\n            initGuildCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/mod-anouncement.command.ts\n            \n            class\n            MumVoiceCommand\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/commands/ping.command.ts\n            \n            class\n            PingCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/special.command.ts\n            \n            class\n            SpecialCommand\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/bot/commands/ticket-system.command.ts\n            \n            class\n            TicketSystemSetupCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/timeout.command.ts\n            \n            class\n            TimeOutCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/unverify-by-role.conmand.ts\n            \n            class\n            UnverifyByRoleCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/user-info-ui.command.ts\n            \n            class\n            UserInfoUiCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/user-set-first-message-ui.command.ts\n            \n            class\n            SetFirstMessageUICommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BOT_EVENT_HANDLER_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BOT_EVENT_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BotEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/dto/commmunity-question.dto.ts\n            \n            class\n            CommunityQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/dto/community-question.form.dto.ts\n            \n            class\n            CommunityQuestionFormDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/dto/mod-anouncement.dto.ts\n            \n            class\n            ModAnnouncementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/dto/user-timeout.dto.ts\n            \n            class\n            UserTimeOutDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/dto/user-to-user.dto.ts\n            \n            class\n            UserToUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/bot/dto/user-to-user.dto.ts\n            \n            variable\n            CommandToExecute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/explorers/event.explorer.ts\n            \n            class\n            Explorer\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bot/filters/command-validation.ts\n            \n            class\n            CommandValidationFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/is-modal-interaction.guard.ts\n            \n            guard\n            IsModalInteractionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/member-is-mod-or-higher.guard.ts\n            \n            guard\n            ReactedMemberIsModOrHigherGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/guards/message-from-user.guard.ts\n            \n            guard\n            MessageFromUserGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bot/guards/message-in-channel.guard.ts\n            \n            variable\n            ChannelIdGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/guards/message-is-dm.guard.ts\n            \n            guard\n            MessageIsDmGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bot/guards/reaction-emote.guard.ts\n            \n            variable\n            ReactionEmoteGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/guards/reaction-in-channel.guard.ts\n            \n            variable\n            ReactionChannelIdGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n            interface\n            DiscordExecutionContext\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n            guard\n            IsUserUnlockedGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/interfaces/bot-event.interface.ts\n            \n            interface\n            BotEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/events/guild-members/index.ts\n            \n            injectable\n            GuildMemberEvents\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/guild/events/interaction-create/mod-request-menu/index.ts\n            \n            injectable\n            ModRequestFlow\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/guild/events/message-create/dm-message/index.ts\n            \n            injectable\n            DmMessageHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/events/message-create/guild-message/index.ts\n            \n            injectable\n            GuildMessageHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts\n            \n            class\n            GuildAutoDeleteChannelDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts\n            \n            controller\n            GuildAutoDeleteChannelController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts\n            \n            injectable\n            GuildAutoDeleteChannelService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-restricted-channel/guild-restricted-channel.controller.ts\n            \n            controller\n            GuildRestrictedChannelController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/guild-restricted-channel/guild-restricted-channel.service.ts\n            \n            injectable\n            GuildRestrictedChannelService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/dto/restricted-channels.dto.ts\n            \n            class\n            RestrictedChannelDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/dto/settings.dto.ts\n            \n            class\n            SettingsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/events/settings-role-id-changed.event.ts\n            \n            class\n            SettingsChanged\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/guild-settings.controller.ts\n            \n            controller\n            GuildSettingsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/guild-settings.service.ts\n            \n            injectable\n            GuildSettingsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/guild/guild-user/dto/self.dto.ts\n            \n            class\n            SelfDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-user/guild-user.controller.ts\n            \n            controller\n            GuildUserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/guild-user/guild-user.service.ts\n            \n            injectable\n            GuildUserService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/guild/guild.controller.ts\n            \n            controller\n            GuildController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild.service.ts\n            \n            injectable\n            GuildService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/guild/moderation/channel/channel.controller.ts\n            \n            controller\n            ChannelController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            Channel\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            GuildChannelEditOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            PermissionOverwrite\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/guild-member.ts\n            \n            class\n            DiscordGuildMember\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/role.ts\n            \n            class\n            EditRoleData\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/role.ts\n            \n            class\n            RoleResponse\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/role.ts\n            \n            variable\n            roleResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/role.ts\n            \n            variable\n            rolesResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/user.ts\n            \n            class\n            DiscordUser\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/user.ts\n            \n            variable\n            userResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/user.ts\n            \n            variable\n            usersResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            ChannelCleaned\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            SlowmodeDisabled\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            SlowmodeEnabled\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserBanEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserKickEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserPurgeEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserSendDMFailedEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserTimeOutEvent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserTimeOutFailedEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/guild/moderation/role/role.controller.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                        src/tasks/tasks.service.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/self.controller.ts\n            \n            controller\n            SelfController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/self.dto.ts\n            \n            class\n            Guild\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/self.dto.ts\n            \n            class\n            SelfDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/self.service.ts\n            \n            injectable\n            SelfService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/util/decorators/parameter-not-undefined.ts\n            \n            function\n            DearV8ProtectMeFromParametersWithNoneValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-guild-user.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-guild-user.decorator.ts\n            \n            variable\n            RequestGuildUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-user.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-user.decorator.ts\n            \n            variable\n            RequestUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/requires-rank.decorator.ts\n            \n            variable\n            REQUIRED_RANK_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/requires-rank.decorator.ts\n            \n            variable\n            RequiredRank\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/dto/log.entry.dto.ts\n            \n            class\n            LogEntry\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            variable\n            actions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            variable\n            targetTypes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            type alias\n            Action\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            type alias\n            TargetType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/util/exception/channel-not-text-based-exception.ts\n            \n            class\n            ChannelNotTextBasedException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/channel-not-text-based-exception.ts\n            \n            class\n            ChannelNotTextBasedExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/guild-does-not-exist-exception.ts\n            \n            class\n            GuildDoesNotExistException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/guild-does-not-exist-exception.ts\n            \n            class\n            GuildDoesNotExistExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/send-direct-message-to-user-exception.ts\n            \n            class\n            SendDirectMessageToUserException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/send-direct-message-to-user-exception.ts\n            \n            class\n            SendDirectMessageToUserExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/util/functions/channel-utils.ts\n            \n            function\n            cleanTextChannel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/get-attachtment-type.ts\n            \n            function\n            getAttachmentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            modRequestCategorySelect\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            needHelpButton\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            selectGuildMenu\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            variable\n            modRequestMenuId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            variable\n            needHelpButtonId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/functions/plain-to-instance.ts\n            \n            function\n            plainToInstance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/guards/has-required-rank.guard.ts\n            \n            guard\n            HasRequiredRank\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/util/guards/has-required-rank.guard.ts\n            \n            variable\n            InheritedRanks\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/interfaces/event-to-log.ts\n            \n            interface\n            EventToLog\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @discord-nestjs/common : ^5.2.5\n        \n            @discord-nestjs/core : ^5.3.7\n        \n            @nestjs/axios : ^3.0.3\n        \n            @nestjs/common : ^10.4.2\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.4.2\n        \n            @nestjs/event-emitter : ^2.0.3\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.4.2\n        \n            @nestjs/schedule : ^4.1.1\n        \n            @nestjs/swagger : ^8.0.7\n        \n            @prisma/client : ^6.0.1\n        \n            axios : ^1.7.7\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            discord.js : ^14.16.2\n        \n            jest-mock-extended : ^4.0.0-beta1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-oauth2 : ^1.7.0\n        \n            rambda : 9.4.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.2.0\n        \n            type-fest : ^4.26.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            cleanTextChannel   (src/.../channel-utils.ts)\n                        \n                        \n                            DearV8ProtectMeFromParametersWithNoneValue   (src/.../parameter-not-undefined.ts)\n                        \n                        \n                            getAttachmentType   (src/.../get-attachtment-type.ts)\n                        \n                        \n                            modRequestCategorySelect   (src/.../menu-helper.ts)\n                        \n                        \n                            needHelpButton   (src/.../menu-helper.ts)\n                        \n                        \n                            plainToInstance   (src/.../plain-to-instance.ts)\n                        \n                        \n                            selectGuildMenu   (src/.../menu-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/util/functions/channel-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cleanTextChannel\n                        \n                    \n                \n            \n            \n                \ncleanTextChannel(channel: GuildTextBasedChannel, stopCb, filterCb, logger: Logger)\n                \n            \n\n\n\n\n            \n                \n                        Utility function which deletes messages determined by the filterCb in a given channel until the stopCb returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                        GuildTextBasedChannel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GuildTextBasedChannel -- the channel to clean\n\n                                            \n                                        \n                                        \n                                                stopCb\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the callback which gets called to check if we should stop deleting messages\n\n                                            \n                                        \n                                        \n                                                filterCb\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the callback used to filter out messages to delete\n\n                                            \n                                        \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the logger used to log to the apps log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/util/decorators/parameter-not-undefined.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DearV8ProtectMeFromParametersWithNoneValue\n                        \n                    \n                \n            \n            \n                \nDearV8ProtectMeFromParametersWithNoneValue(target: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ClassDecorator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/util/functions/get-attachtment-type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAttachmentType\n                        \n                    \n                \n            \n            \n                \ngetAttachmentType(contentType: string)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to check which type the contentType is,\nused to check the type of a attachment of a message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contentType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string that contains the content type e.g vide/mp4\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AttachmentType\n\n                        \n                            \n                                AttachmentType enum value for the given type\n\n                            \n                \n            \n        \n    \n    src/util/functions/menu-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modRequestCategorySelect\n                        \n                    \n                \n            \n            \n                \nmodRequestCategorySelect(suffix: string)\n                \n            \n\n\n\n\n            \n                \n                        Returns a SelectMenu for the ModRequest functionality\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                suffix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Some string to suffix the the value of each field\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     StringSelectMenuBuilder\n\n                        \n                            \n                                StringSelectMenuBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        needHelpButton\n                        \n                    \n                \n            \n            \n                \nneedHelpButton()\n                \n            \n\n\n\n\n            \n                \n                        Utility function that returns a button builder named \"Hilfe benötigt\"\n\n\n                        \n                            Returns :     ButtonBuilder\n\n                        \n                            \n                                ButtonBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectGuildMenu\n                        \n                    \n                \n            \n            \n                \nselectGuildMenu(guilds)\n                \n            \n\n\n\n\n            \n                \n                        Utility function that returns a SelectMenu to choose a guild.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                guilds\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of guildIDs\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     StringSelectMenuBuilder\n\n                        \n                            \n                                StringSelectMenuBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    src/util/functions/plain-to-instance.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        plainToInstance\n                        \n                    \n                \n            \n            \n                \nplainToInstance(cls: Constructor, plain: Pick)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to convert a plain object to the given type and return a constructed class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cls\n                                            \n                                                            Constructor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A class type, must be a constructor\n\n                                            \n                                        \n                                        \n                                                plain\n                                            \n                                                        Pick\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A plain object that can be the cls type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                the generic T, type of cls\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/initGuildCommand.html":{"url":"classes/initGuildCommand.html","title":"class - initGuildCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  initGuildCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/init-guild.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onInitGuild\n                            \n                            \n                                    \n                                    Async\n                                onInteraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaServer: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/init-guild.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaServer\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onInitGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInitGuild(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/init-guild.command.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onInteraction\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInteraction(interaction: ChannelSelectMenuInteraction | RoleSelectMenuInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/init-guild.command.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                            ChannelSelectMenuInteraction | RoleSelectMenuInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InteractionEvent, On } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ActionRowBuilder,\n  ChannelSelectMenuBuilder,\n  ChannelSelectMenuInteraction,\n  ChannelType,\n  CommandInteraction,\n  MessageActionRowComponentBuilder,\n  RoleSelectMenuBuilder,\n  RoleSelectMenuInteraction,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'setup-bot',\n  description: 'Shows a modal to set/update the bot settings',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class initGuildCommand {\n  constructor(\n    @Inject(PrismaService) private readonly prismaServer: PrismaService,\n  ) {}\n  @Handler()\n  async onInitGuild(@InteractionEvent() interaction: CommandInteraction) {\n    await interaction.deferReply({ ephemeral: true });\n    const settings = await this.prismaServer.settings.findUnique({\n      where: { guildId: interaction.guildId },\n    });\n    const setOpenIntroChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('openIntroChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.openIntroChannelId))\n          .name ?? 'Select the open intro channel',\n      );\n\n    const setIntroChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('IntroChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.introChannelId))\n          .name ?? 'Select the intro channel',\n      );\n    const setMiscChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('miscChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.leaveChannelId))\n          .name ?? 'Select the miscellaneous channel',\n      );\n    const setModChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('modChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.modChannelId)).name ??\n          'Select the mod channel',\n      );\n    const setModRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('modRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.modRoleId)).name ??\n          'Select the mod role',\n      );\n\n    const setAdminRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('adminRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.adminRoleId)).name ??\n          'Select the admin role',\n      );\n\n    const setVerifiedMemberRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('verifiedMemberRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.verifiedMemberRoleId))\n          .name ?? 'Select the verified member role',\n      );\n\n    const setUnverifiedRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('unverifiedMemberRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.unverifiedMemberRoleId))\n          .name ?? 'Select the unverified member role',\n      );\n\n    const roleRows = [\n      setAdminRoleId,\n      setModRoleId,\n      setUnverifiedRoleId,\n      setVerifiedMemberRoleId,\n    ].map((row) =>\n      new ActionRowBuilder().addComponents(\n        row,\n      ),\n    );\n    const channelRows = [\n      setModChannelId,\n      setIntroChannelId,\n      setOpenIntroChannelId,\n      setMiscChannelId,\n    ].map((row) =>\n      new ActionRowBuilder().addComponents(\n        row,\n      ),\n    );\n\n    Promise.all([\n      interaction.followUp({\n        ephemeral: true,\n        content: 'Configure the role settings below',\n        components: [...roleRows],\n      }),\n      interaction.followUp({\n        ephemeral: true,\n        content: 'Configure the channel settings below',\n        components: [...channelRows],\n      }),\n    ]);\n  }\n\n  @On('interactionCreate')\n  async onInteraction(\n    interaction: ChannelSelectMenuInteraction | RoleSelectMenuInteraction,\n  ) {\n    if (\n      !(\n        interaction.customId != undefined &&\n        interaction.customId.endsWith('-setup') &&\n        interaction.isAnySelectMenu()\n      )\n    )\n      return;\n    await interaction.deferReply({ ephemeral: true });\n    if (interaction.isChannelSelectMenu()) {\n      const guildId = interaction.guildId;\n      const channelId = interaction.values[0];\n      switch (interaction.customId) {\n        case 'openIntroChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { openIntroChannelId: channelId },\n          });\n          break;\n        case 'IntroChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { introChannelId: channelId },\n          });\n          break;\n        case 'miscChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { leaveChannelId: channelId },\n          });\n          break;\n        case 'modChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { modChannelId: channelId },\n          });\n          break;\n      }\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } else if (interaction.isRoleSelectMenu()) {\n      const guildId = interaction.guildId;\n      const roleId = interaction.values[0];\n      switch (interaction.customId) {\n        case 'modRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { modRoleId: roleId },\n          });\n          break;\n        case 'adminRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { adminRoleId: roleId },\n          });\n          break;\n        case 'verifiedMemberRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { verifiedMemberRoleId: roleId },\n          });\n          break;\n        case 'unverifiedMemberRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { unverifiedMemberRoleId: roleId },\n          });\n          break;\n      }\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\nExample :                        Preamble  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\nExample :                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\nExample :a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\nExample :a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\nExample :a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nRemote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\nExample :                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\nExample :\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\nhttps://www.gnu.org/licenses/.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuditLogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BotModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildAutoDeleteChannelModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildRestrictedChannelModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildSettingsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildUserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        JwtAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ModerationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuditLogModule\n\n\n\ncluster_AuditLogModule_exports\n\n\n\ncluster_AuditLogModule_providers\n\n\n\ncluster_BotModule\n\n\n\ncluster_BotModule_providers\n\n\n\ncluster_GuildAutoDeleteChannelModule\n\n\n\ncluster_GuildAutoDeleteChannelModule_exports\n\n\n\ncluster_GuildAutoDeleteChannelModule_providers\n\n\n\ncluster_GuildModule\n\n\n\ncluster_GuildModule_imports\n\n\n\ncluster_GuildModule_exports\n\n\n\ncluster_GuildModule_providers\n\n\n\ncluster_GuildRestrictedChannelModule\n\n\n\ncluster_GuildRestrictedChannelModule_exports\n\n\n\ncluster_GuildSettingsModule\n\n\n\ncluster_GuildSettingsModule_exports\n\n\n\ncluster_GuildUserModule\n\n\n\ncluster_GuildUserModule_exports\n\n\n\ncluster_JwtAuthModule\n\n\n\ncluster_JwtAuthModule_exports\n\n\n\ncluster_JwtAuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nBotModule\n\nBotModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBotModule->AppModule\n\n\n\n\n\nGuildModule\n\nGuildModule\n\nAppModule -->\n\nGuildModule->AppModule\n\n\n\n\n\nGuildService \n\nGuildService \n\nGuildService  -->\n\nGuildModule->GuildService \n\n\n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nAppModule -->\n\nJwtAuthModule->AppModule\n\n\n\n\n\nJwtAuthService \n\nJwtAuthService \n\nJwtAuthService  -->\n\nJwtAuthModule->JwtAuthService \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nSelfService \n\nSelfService \n\nSelfService  -->\n\nUserModule->SelfService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nBotModule -->\n\nPrismaService->BotModule\n\n\n\nGuildModule -->\n\nPrismaService->GuildModule\n\n\n\nJwtAuthModule -->\n\nPrismaService->JwtAuthModule\n\n\n\nTasksModule -->\n\nPrismaService->TasksModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nAuditLogModule\n\nAuditLogModule\n\nAuditLogModule -->\n\nPrismaService->AuditLogModule\n\n\n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule -->\n\nPrismaService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule -->\n\nPrismaService->GuildRestrictedChannelModule\n\n\n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildSettingsModule -->\n\nPrismaService->GuildSettingsModule\n\n\n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildUserModule -->\n\nPrismaService->GuildUserModule\n\n\n\n\n\nModerationModule\n\nModerationModule\n\nModerationModule -->\n\nPrismaService->ModerationModule\n\n\n\n\n\nAuditLogService \n\nAuditLogService \n\nAuditLogService  -->\n\nAuditLogModule->AuditLogService \n\n\n\nModerationModule -->\n\nAuditLogModule->ModerationModule\n\n\n\n\n\nAuditEvents\n\nAuditEvents\n\nAuditLogModule -->\n\nAuditEvents->AuditLogModule\n\n\n\n\n\nAuditLogService\n\nAuditLogService\n\nAuditLogModule -->\n\nAuditLogService->AuditLogModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nBotModule -->\n\nGuildRestrictedChannelService->BotModule\n\n\n\nGuildModule -->\n\nGuildRestrictedChannelService->GuildModule\n\n\n\nTasksModule -->\n\nGuildRestrictedChannelService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildRestrictedChannelService->GuildAutoDeleteChannelModule\n\n\n\nGuildRestrictedChannelModule -->\n\nGuildRestrictedChannelService->GuildRestrictedChannelModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nBotModule -->\n\nGuildService->BotModule\n\n\n\nGuildModule -->\n\nGuildService->GuildModule\n\n\n\nTasksModule -->\n\nGuildService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nBotModule -->\n\nGuildSettingsService->BotModule\n\n\n\nTasksModule -->\n\nGuildSettingsService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildSettingsService->GuildAutoDeleteChannelModule\n\n\n\nGuildSettingsModule -->\n\nGuildSettingsService->GuildSettingsModule\n\n\n\nGuildUserModule -->\n\nGuildSettingsService->GuildUserModule\n\n\n\n\n\nGuildAutoDeleteChannelService \n\nGuildAutoDeleteChannelService \n\nGuildModule -->\n\nGuildAutoDeleteChannelModule->GuildModule\n\n\n\nGuildAutoDeleteChannelService  -->\n\nGuildAutoDeleteChannelModule->GuildAutoDeleteChannelService \n\n\n\n\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildAutoDeleteChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nTasksModule -->\n\nGuildUserService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildUserService->GuildAutoDeleteChannelModule\n\n\n\nGuildUserModule -->\n\nGuildUserService->GuildUserModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nTasksService->GuildAutoDeleteChannelModule\n\n\n\nGuildModule -->\n\nGuildRestrictedChannelModule->GuildModule\n\n\n\n\n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService  -->\n\nGuildRestrictedChannelModule->GuildRestrictedChannelService \n\n\n\nGuildModule -->\n\nGuildSettingsModule->GuildModule\n\n\n\n\n\nGuildSettingsService \n\nGuildSettingsService \n\nGuildSettingsService  -->\n\nGuildSettingsModule->GuildSettingsService \n\n\n\nGuildModule -->\n\nGuildUserModule->GuildModule\n\n\n\n\n\nGuildUserService \n\nGuildUserService \n\nGuildUserService  -->\n\nGuildUserModule->GuildUserService \n\n\n\nGuildModule -->\n\nModerationModule->GuildModule\n\n\n\n\n\nDmMessageHandler\n\nDmMessageHandler\n\nGuildModule -->\n\nDmMessageHandler->GuildModule\n\n\n\n\n\nGuildMemberEvents\n\nGuildMemberEvents\n\nGuildModule -->\n\nGuildMemberEvents->GuildModule\n\n\n\n\n\nGuildMessageHandler\n\nGuildMessageHandler\n\nGuildModule -->\n\nGuildMessageHandler->GuildModule\n\n\n\n\n\nModRequestFlow\n\nModRequestFlow\n\nGuildModule -->\n\nModRequestFlow->GuildModule\n\n\n\n\n\nJwtAuthService\n\nJwtAuthService\n\nJwtAuthModule -->\n\nJwtAuthService->JwtAuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nJwtAuthModule -->\n\nJwtAuthStrategy->JwtAuthModule\n\n\n\n\n\nRefreshJwtStrategy\n\nRefreshJwtStrategy\n\nJwtAuthModule -->\n\nRefreshJwtStrategy->JwtAuthModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nJwtAuthModule -->\n\nSelfService->JwtAuthModule\n\n\n\nUserModule -->\n\nSelfService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    51 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : A discord bot for a community with special needs hence the name Mega-Transformers-Bot. Written in Typescript using Nestjs, discordjs and React. It also features a API that is used by the frontend but can also be used standalone\n        \n            License : AGPL-3.0-only\n        \n            Author : 89q12\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (src/.../log.entry.dto.ts)\n                        \n                        \n                            TargetType   (src/.../log.entry.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/dto/log.entry.dto.ts\n    \n    \n        \n            \n                \n                    \n                    Action\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TargetType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            actions   (src/.../log.entry.dto.ts)\n                        \n                        \n                            BOT_EVENT_HANDLER_NAME   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            BOT_EVENT_KEY   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            BotEvent   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            ChannelIdGuard   (src/.../message-in-channel.guard.ts)\n                        \n                        \n                            CommandToExecute   (src/.../user-to-user.dto.ts)\n                        \n                        \n                            InheritedRanks   (src/.../has-required-rank.guard.ts)\n                        \n                        \n                            logger   (src/.../tasks.service.ts)\n                        \n                        \n                            logger   (src/.../request-guild-user.decorator.ts)\n                        \n                        \n                            logger   (src/.../request-user.decorator.ts)\n                        \n                        \n                            logger   (src/.../role.controller.ts)\n                        \n                        \n                            modRequestMenuId   (src/.../menu-helper.ts)\n                        \n                        \n                            needHelpButtonId   (src/.../menu-helper.ts)\n                        \n                        \n                            ReactionChannelIdGuard   (src/.../reaction-in-channel.guard.ts)\n                        \n                        \n                            ReactionEmoteGuard   (src/.../reaction-emote.guard.ts)\n                        \n                        \n                            RequestGuildUser   (src/.../request-guild-user.decorator.ts)\n                        \n                        \n                            RequestUser   (src/.../request-user.decorator.ts)\n                        \n                        \n                            REQUIRED_RANK_KEY   (src/.../requires-rank.decorator.ts)\n                        \n                        \n                            RequiredRank   (src/.../requires-rank.decorator.ts)\n                        \n                        \n                            roleResponseSchema   (src/.../role.ts)\n                        \n                        \n                            rolesResponseSchema   (src/.../role.ts)\n                        \n                        \n                            targetTypes   (src/.../log.entry.dto.ts)\n                        \n                        \n                            userResponseSchema   (src/.../user.ts)\n                        \n                        \n                            usersResponseSchema   (src/.../user.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/dto/log.entry.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'USER_JOINED',\n  'WARN',\n  'ERROR',\n  'USER_LEFT',\n  'USER_BANNED',\n  'USER_UNBANNED',\n  'USER_UPDATED',\n  'GUILD_UPDATED',\n  'INVALID_REQUEST',\n  'INVITE_CREATED',\n  'INVITE_DELETED',\n  'MESSAGE_DELETED',\n  'REACTION_ADDED',\n  'REACTION_REMOVED',\n  'ROLE_CREATED',\n  'ROLE_DELETED',\n  'ROLE_UPDATED',\n  'CHANNEL_CREATED',\n  'CHANNEL_DELETED',\n  'CHANNEL_UPDATED',\n  'WEBHOOKS_UPDATED',\n  'TIMEOUT_EXPIRED',\n  'TIMEOUT',\n  'KICK',\n  'BAN',\n] as const\n                    \n                \n\n            \n                \n                    All possible actions that can occur\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'ERROR',\n  'WARN',\n  'USER',\n  'GUILD',\n  'INVALID_REQUEST',\n  'INVITE',\n  'MESSAGE',\n  'ROLE',\n  'CHANNEL',\n] as const\n                    \n                \n\n            \n                \n                    List of the targets an event can have\n\n                \n            \n\n        \n    \n\n    src/bot/decorators/bot-event.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BOT_EVENT_HANDLER_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__bot_event_handler__'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BOT_EVENT_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__bot_event__'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BotEvent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...event: Array) =>\n  SetMetadata(BOT_EVENT_KEY, event)\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/message-in-channel.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ChannelIdGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (channelId: string) => {\n  class ChannelIdGuardMixin implements CanActivate {\n    async canActivate(context: ExecutionContext) {\n      const message = context.getArgByIndex(0);\n      if (\n        !(message.message instanceof Message) ||\n        !(message.message as Message).inGuild()\n      ) {\n        return false;\n      }\n      return message.channelId === channelId;\n    }\n  }\n\n  const guard = mixin(ChannelIdGuardMixin);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/bot/dto/user-to-user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommandToExecute\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChoiceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  'Einer Person einen Kaffee geben': 'coffee',\n  'Einer Person einen Kuchen geben': 'cake',\n  'Einer Person ein Headpat geben': 'headpat',\n  'Eine Person umarmen': 'hug',\n}\n                    \n                \n\n\n        \n    \n\n    src/util/guards/has-required-rank.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InheritedRanks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  OWNER: ['ADMIN', 'MOD', 'MEMBER'],\n  ADMIN: ['MOD', 'MEMBER'],\n  MOD: ['MEMBER'],\n  MEMBER: [],\n  NEW: [],\n}\n                    \n                \n\n            \n                \n                    Map of ranks that are inherited by any given rank,\nmeaning their lower ranks e.g MOD has MEMBER.\nBut MEMBER has 0 since its the lowest rank a member can have.\n\n                \n            \n\n        \n    \n\n    src/tasks/tasks.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('TaskService')\n                    \n                \n\n\n        \n    \n\n    src/util/decorators/request-guild-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RequestGuildUser')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequestGuildUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx\n      .switchToHttp()\n      .getRequest();\n    const user = request.user;\n\n    if (!user) {\n      logger.error(`${ctx.getHandler().toString()} has a parameter with\n      annotation RequestGuildUser but is NOT guarded by ${\n        JwtAuthGuard.name\n      } AND the request path ${\n        request.path\n      } is not prefixed by \"/guild/:guildId/\n        Please use ${JwtAuthGuard.name} if you want to access a UserId`);\n      throw new InternalServerErrorException();\n    }\n    return user;\n  },\n)\n                    \n                \n\n            \n                \n                    A param decorator to check whether a GuildUser is set on a request,\nif not the route is not guarded by JWT but should be.\nIf the route is guarded it returns the user\n\n                \n            \n\n        \n    \n\n    src/util/decorators/request-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RequestUser')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequestUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const userId = ctx.switchToHttp().getRequest()\n      .user.userId;\n\n    if (!userId) {\n      logger.error(`${ctx.getHandler().toString()} has a parameter with\n    annotation RequestUser but is NOT guarded by ${JwtAuthGuard.name}.\n      Please use ${JwtAuthGuard.name} if you want to access a UserId`);\n      throw new InternalServerErrorException();\n    }\n    return userId;\n  },\n)\n                    \n                \n\n            \n                \n                    A param decorator to check whether a user is set on a request,\nif not the route is not guarded by JWT but should be.\nIt returns the userID.\n\n                \n            \n\n        \n    \n\n    src/guild/moderation/role/role.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RoleController')\n                    \n                \n\n\n        \n    \n\n    src/util/functions/menu-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modRequestMenuId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'modRequestMenu'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        needHelpButtonId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'createTicket'\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/reaction-in-channel.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReactionChannelIdGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (channelId: string) => {\n  class ChannelIdGuardMixin implements CanActivate {\n    async canActivate(context: ExecutionContext) {\n      const reaction = context.getArgByIndex(0);\n      if (reaction.partial) await reaction.fetch();\n      const message = reaction.message;\n      if (\n        message.message instanceof Message &&\n        !(message.message as Message).inGuild()\n      ) {\n        return false;\n      }\n      return message.channelId === channelId;\n    }\n  }\n\n  const guard = mixin(ChannelIdGuardMixin);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/reaction-emote.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReactionEmoteGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (emotes: string[]) => {\n  class ReactionEmote implements CanActivate {\n    canActivate(context: ExecutionContext): boolean {\n      const reaction = context.getArgByIndex(0);\n      if (\n        reaction instanceof MessageReaction &&\n        emotes.includes((reaction as MessageReaction).emoji.name)\n      ) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  const guard = mixin(ReactionEmote);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/util/decorators/requires-rank.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUIRED_RANK_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__rank__'\n                    \n                \n\n            \n                \n                    The constant used in the RequiredRank decorator to store the rank for a function/object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequiredRank\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (rank: Rank) =>\n  SetMetadata(REQUIRED_RANK_KEY, rank)\n                    \n                \n\n            \n                \n                    Sets the required rank for a route or controller\n\n                \n            \n\n        \n    \n\n    src/guild/moderation/dto/role.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roleResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rolesResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/guild/moderation/dto/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    username: { type: 'string' },\n    discriminator: { type: 'string' },\n    avatarURL: { type: 'string' },\n    displayAvatarURL: { type: 'string' },\n    bannerURL: { type: 'string' },\n    bot: { type: 'boolean' },\n    system: { type: 'boolean' },\n    flags: { type: 'number' },\n    createdTimestamp: { type: 'number' },\n    accentColor: { type: 'number' },\n    hexAccentColor: { type: 'string' },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usersResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'array',\n  items: userResponseSchema,\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
