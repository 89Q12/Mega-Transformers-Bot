var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddRoleCommand.html",[0,0.247,1,3.533]],["body/classes/AddRoleCommand.html",[0,0.284,1,5.302,2,0.902,3,0.101,4,0.09,5,0.09,6,6.48,7,4.445,8,0.295,9,0.867,10,1.634,11,6.592,12,1.18,13,2.482,14,3.025,15,4.045,16,2.204,17,0.385,18,5.039,19,0.82,20,0.01,21,0.655,22,0.335,23,0.689,24,5.039,25,4.471,26,0.925,27,3.498,28,5.039,29,3.139,30,0.645,31,0.162,32,3.365,33,2.47,34,3.021,35,0.971,36,1.043,37,1.46,38,0.419,39,0.971,40,1.655,41,4.053,42,1.789,43,5.039,44,4.445,45,2.775,46,3.021,47,2.775,48,1.91,49,0.112,50,1.652,51,2.249,52,5.039,53,5.039,54,3.761,55,2.572,56,4.445,57,4.445,58,1.069,59,5.039,60,0.971,61,4.36,62,1.294,63,4.445,64,4.36,65,1.333,66,4.614,67,1.91,68,5.302,69,5.039,70,2.995,71,5.039,72,1.742,73,0.699,74,2.669,75,5.039,76,2.116,77,1.534,78,4.445,79,0.007,80,0.007]],["title/controllers/AppController.html",[81,1.48,82,3.278]],["body/controllers/AppController.html",[0,0.379,3,0.135,4,0.12,5,0.12,20,0.009,31,0.168,38,0.56,49,0.15,79,0.008,80,0.008,81,2.658,82,5.887,83,2.454,84,5.937,85,3.205,86,3.435,87,5.414,88,3.706,89,5.887,90,2.522,91,3.862]],["title/modules/AppModule.html",[92,1.519,93,3.278]],["body/modules/AppModule.html",[0,0.23,3,0.082,4,0.073,5,0.073,14,2.405,16,2.204,20,0.01,31,0.179,35,0.786,36,1.184,37,1.183,38,0.34,39,0.786,48,1.183,49,0.091,77,2.175,79,0.006,80,0.006,82,4.922,83,2.084,92,2.824,93,6.62,94,1.881,95,1.881,96,2.011,97,2.011,98,1.881,99,3.14,100,1.881,101,3.601,102,3.601,103,3.601,104,5.456,105,5.602,106,5.456,107,5.456,108,5.456,109,5.456,110,2.816,111,2.011,112,1.489,113,4.082,114,3.493,115,5.716,116,5.001,117,2.7,118,4.082,119,4.082,120,4.082,121,4.082,122,4.082,123,2.162,124,4.082,125,5.716,126,4.082,127,4.082,128,4.082,129,3.284,130,3.78,131,4.082,132,3.78,133,5.716,134,1.944,135,3.601,136,3.78,137,4.082,138,4.082,139,2.248,140,2.248,141,3.78,142,2.011,143,3.601,144,4.082,145,4.082,146,3.601,147,4.082,148,4.082,149,4.082,150,4.082,151,4.082,152,4.082,153,3.601,154,4.082,155,4.082,156,4.082,157,4.082,158,4.082,159,4.082,160,4.082,161,4.082,162,4.082,163,4.082,164,4.082,165,4.082,166,4.082,167,4.082,168,5.716,169,4.082,170,4.082,171,4.082,172,4.082,173,4.082,174,4.082,175,4.082,176,4.082,177,4.082,178,4.082,179,4.082,180,4.082,181,4.082,182,4.082,183,4.082,184,4.082,185,4.082,186,4.082,187,4.082,188,4.082,189,4.082,190,4.082,191,4.082,192,6.875,193,3.601,194,4.082,195,3.601,196,1.127,197,2.447,198,4.082]],["title/injectables/AppService.html",[109,3.074,199,0.954]],["body/injectables/AppService.html",[0,0.332,3,0.118,4,0.105,5,0.105,8,0.344,9,0.957,12,1.303,17,0.462,19,0.906,20,0.009,21,0.649,22,0.299,23,0.761,26,1.081,30,0.754,31,0.159,37,1.707,38,0.49,49,0.131,50,1.476,79,0.007,80,0.007,109,5.095,139,3.243,140,3.243,199,1.581,200,2.333,201,5.194,202,1.619,203,2.78,204,7.279,205,5.889,206,5.186,207,7.279,208,4.574,209,7.279,210,6.969,211,5.889,212,4.122,213,2.713,214,2.628,215,2.401,216,1.914,217,7.279,218,3.466,219,5.889,220,2.473,221,3.895,222,1.707,223,5.889]],["title/controllers/AuditLogController.html",[81,1.48,224,3.278]],["body/controllers/AuditLogController.html",[0,0.284,3,0.101,4,0.09,5,0.09,8,0.295,9,0.867,10,1.634,12,0.902,17,0.295,19,0.627,20,0.009,21,0.449,22,0.256,23,0.527,26,0.925,30,0.645,31,0.176,37,1.46,38,0.419,42,1.789,49,0.112,50,1.263,58,1.069,65,1.333,73,1.02,79,0.007,80,0.007,81,2.221,83,1.837,85,2.399,86,2.572,88,2.775,91,2.891,220,2.116,222,1.46,224,4.92,225,4.445,226,7.346,227,5.039,228,4.291,229,5.455,230,4.896,231,2.945,232,6.873,233,5.039,234,2.34,235,2.055,236,7.346,237,4.445,238,3.527,239,4.445,240,4.445,241,4.859,242,4.445,243,3.761,244,5.039,245,5.039,246,3.021,247,3.761,248,3.761,249,4.215,250,4.616,251,4.053,252,2.572,253,3.021,254,3.021,255,3.166,256,3.333,257,3.952,258,3.021,259,2.055,260,3.527,261,5.039,262,5.039,263,3.166,264,5.039,265,5.039,266,5.039,267,5.039,268,4.445,269,5.039,270,4.445,271,5.039,272,1.941,273,5.039,274,5.039,275,5.039,276,3.021,277,5.039,278,3.527,279,5.039,280,2.116,281,5.039,282,3.761,283,5.039,284,5.039]],["title/classes/AuditLogFilterDto.html",[0,0.247,229,3.074]],["body/classes/AuditLogFilterDto.html",[0,0.384,2,0.949,3,0.106,4,0.095,5,0.095,8,0.31,17,0.464,20,0.009,22,0.44,23,0.905,26,1.458,31,0.151,49,0.118,73,1.24,79,0.007,80,0.007,90,1.986,202,1.515,220,3.45,229,4.768,249,4.825,250,5.284,251,4.263,285,7.248,286,4.675,287,7.526,288,7.526,289,7.007,290,4.762,291,5.3,292,5.3,293,5.56,294,4.055,295,6.811,296,5.3,297,5.3,298,5.3,299,5.3,300,3.505,301,4.525,302,3.584,303,2.365,304,5.752,305,4.505,306,4.768,307,3.476,308,5.3,309,5.3]],["title/modules/AuditLogModule.html",[92,1.519,136,2.905]],["body/modules/AuditLogModule.html",[0,0.328,3,0.117,4,0.104,5,0.104,16,2.436,20,0.009,31,0.173,35,1.121,36,1.205,38,0.484,40,1.911,49,0.13,79,0.007,80,0.007,83,2.635,92,2.717,94,2.681,95,2.681,96,2.867,97,2.867,98,2.681,99,3.742,100,3.621,110,3.56,111,2.867,112,2.122,114,3.083,123,3.083,136,5.957,224,5.865,241,5.984,242,5.133,310,5.133,311,5.133,312,5.133,313,6.928,314,5.82,315,5.82,316,5.82,317,3.205]],["title/injectables/AuditLogService.html",[199,0.954,241,2.905]],["body/injectables/AuditLogService.html",[0,0.266,3,0.095,4,0.085,5,0.085,8,0.276,9,0.831,10,1.813,12,0.846,16,2.304,17,0.416,19,0.886,20,0.009,21,0.634,22,0.402,23,0.744,30,0.808,31,0.153,37,1.37,38,0.393,40,1.552,49,0.105,50,1.185,58,1.34,60,0.91,62,1.622,65,1.536,73,0.988,77,2.533,79,0.006,80,0.006,199,1.372,200,1.872,216,1.662,220,1.984,228,3.919,229,5.318,230,2.97,231,2.243,232,4.169,239,4.169,240,4.169,241,4.179,249,4.084,250,4.472,268,4.169,270,4.169,272,2.434,276,4.555,278,4.423,280,2.653,282,4.715,318,4.169,319,3.625,320,6.278,321,4.726,322,4.726,323,6.318,324,5.318,325,4.726,326,4.726,327,2.734,328,7.117,329,5.573,330,4.726,331,4.726,332,4.726,333,4.726,334,4.726,335,4.726,336,4.726,337,4.726,338,4.726,339,4.726,340,5.573,341,4.726,342,2.602,343,4.726,344,6.318,345,6.318,346,3.801,347,4.726,348,2.988,349,4.726,350,4.726,351,4.726,352,4.726,353,4.169,354,4.726,355,3.308,356,4.169,357,4.169,358,4.726,359,4.726,360,2.653,361,4.169,362,4.726]],["title/interfaces/BotEvent.html",[363,2.52,364,3.074]],["body/interfaces/BotEvent.html",[3,0.131,4,0.117,5,0.117,8,0.381,9,1.018,17,0.381,19,0.812,20,0.009,21,0.581,22,0.331,23,0.682,30,0.835,31,0.131,39,1.257,49,0.146,79,0.008,80,0.008,214,2.911,234,2.749,363,3.743,364,5.421,365,4.566,366,6.831,367,5.754,368,7.285,369,6.523,370,7.536,371,6.523,372,7.744,373,6.523]],["title/modules/BotModule.html",[92,1.519,104,3.074]],["body/modules/BotModule.html",[0,0.285,3,0.133,4,0.091,5,0.091,16,2.349,20,0.009,31,0.181,35,0.976,36,1.049,38,0.422,40,1.663,49,0.113,79,0.007,80,0.007,92,2.547,94,2.334,95,2.334,96,2.495,97,2.495,98,2.334,99,3.507,100,3.047,104,6.213,110,3.258,111,2.495,112,1.847,114,2.683,123,3.503,134,2.412,317,2.789,374,4.467,375,4.467,376,4.575,377,4.24,378,3.956,379,5.065,380,4.936,381,5.065,382,2.172,383,2.789,384,4.936,385,5.065,386,4.936,387,5.065,388,5.065,389,3.795,390,2.683,391,3.183,392,4.936,393,5.065,394,5.065,395,4.936,396,5.065,397,5.065,398,4.936,399,6.614,400,6.614,401,4.936,402,3.545,403,3.78,404,1.581,405,4.936,406,5.065,407,5.065,408,3.545,409,4.936,410,5.065,411,4.936,412,5.065,413,5.065]],["title/classes/Channel.html",[0,0.247,414,1.48]],["body/classes/Channel.html",[0,0.337,2,0.506,3,0.057,4,0.051,5,0.051,8,0.165,17,0.481,20,0.009,21,0.634,22,0.465,23,0.851,26,1.509,31,0.107,39,0.544,48,2.423,49,0.063,65,1.075,72,2.786,73,1.245,79,0.004,80,0.004,90,1.058,196,1.202,202,0.969,216,0.743,230,2.737,231,3.053,259,3.354,280,1.186,290,1.693,300,1.868,301,4.486,302,3.836,303,1.26,342,3.557,348,2.866,360,2.51,404,1.866,414,2.95,415,2.107,416,3.342,417,4.522,418,4.278,419,2.715,420,5.723,421,4.278,422,3.969,423,3.969,424,3.518,425,4.278,426,5.723,427,5.979,428,2.881,429,2.5,430,5.009,431,3.504,432,2.824,433,2.824,434,5.274,435,0.902,436,2.881,437,2.824,438,3.504,439,2.824,440,4.356,441,3.049,442,3.504,443,2.824,444,4.356,445,3.759,446,4.462,447,2.824,448,3.504,449,2.824,450,2.866,451,2.824,452,2.611,453,2.824,454,3.969,455,3.504,456,2.824,457,4.185,458,2.824,459,3.518,460,3.504,461,2.824,462,2.824,463,3.251,464,3.049,465,3.504,466,3.342,467,2.824,468,3.504,469,3.049,470,2.737,471,2.824,472,3.504,473,2.824,474,2.824,475,2.824,476,4.128,477,4.278,478,3.342,479,2.271,480,2.271,481,4.471,482,2.737,483,3.504,484,4.278,485,2.064,486,2.271,487,2.271,488,2.881,489,1.26,490,2.271,491,2.107,492,1.774,493,2.271,494,1.868,495,2.271,496,2.271,497,1.977,498,2.271]],["title/classes/ChannelCleaned.html",[0,0.247,499,2.905]],["body/classes/ChannelCleaned.html",[0,0.387,2,0.79,3,0.089,4,0.079,5,0.079,8,0.258,9,0.793,12,1.23,17,0.478,19,0.75,20,0.009,21,0.537,22,0.415,23,0.63,30,0.564,31,0.121,38,0.367,49,0.153,65,1.742,67,2.368,73,1.259,79,0.006,80,0.006,196,1.217,202,1.341,203,2.753,213,3.403,218,3.682,220,1.852,231,3.084,419,2.251,435,1.423,450,3.101,466,3.789,494,4.885,499,4.544,500,3.291,501,2.248,502,5.721,503,4.464,504,6.574,505,3.193,506,3.614,507,6.029,508,4.41,509,4.41,510,4.41,511,4.41,512,3.912,513,4.41,514,2.251,515,3.988,516,6.099,517,4.396,518,6.422,519,4.85,520,4.85,521,3.783,522,3.988,523,3.291,524,4.85,525,3.547,526,3.459,527,3.291]],["title/controllers/ChannelController.html",[81,1.48,528,3.278]],["body/controllers/ChannelController.html",[0,0.166,3,0.059,4,0.053,5,0.053,8,0.173,9,0.593,10,1.846,12,0.529,14,1.994,17,0.385,19,0.82,20,0.009,21,0.587,22,0.425,23,0.689,26,1.21,30,0.844,31,0.163,33,1.689,35,0.569,36,0.611,37,0.856,38,0.246,39,0.569,42,1.048,48,0.856,49,0.066,50,1.13,58,1.16,60,1.436,62,2.034,65,1.677,67,1.91,73,1.228,77,0.899,79,0.005,80,0.005,81,0.995,83,1.077,85,1.406,86,1.507,88,1.626,90,1.106,91,1.694,139,1.626,140,1.626,196,0.815,202,0.657,203,1.519,206,2.833,208,1.856,216,1.734,221,1.953,222,1.306,231,1.942,234,2.767,235,1.204,252,1.507,253,1.77,254,1.77,255,1.856,256,1.953,257,2.703,258,1.77,259,1.204,260,2.067,263,4.142,329,5.399,348,2.57,360,2.296,402,3.828,414,2.915,419,2.301,423,2.204,435,1.702,466,3.436,482,1.856,485,1.463,488,4.048,492,1.856,499,1.953,502,5.06,503,4.328,515,1.953,516,2.204,522,1.953,523,2.204,528,3.365,529,2.605,530,1.694,531,5.469,532,5.469,533,5.469,534,5.469,535,5.469,536,2.953,537,2.953,538,3.626,539,2.953,540,2.953,541,2.953,542,5.469,543,2.953,544,4.509,545,2.953,546,2.953,547,2.953,548,3.626,549,4.923,550,4.923,551,4.923,552,2.953,553,2.953,554,2.375,555,6.129,556,2.953,557,2.953,558,2.953,559,2.953,560,4.284,561,1.953,562,2.204,563,4.509,564,5.589,565,4.399,566,2.375,567,3.977,568,2.953,569,2.982,570,2.953,571,3.365,572,2.204,573,2.605,574,2.953,575,2.067,576,2.204,577,2.067,578,2.067,579,1.694,580,2.953,581,2.953,582,2.204,583,2.953,584,5.302,585,3.365,586,4.142,587,4.568,588,2.587,589,4.509,590,2.953,591,2.953,592,6.121,593,2.953,594,2.953,595,5.469,596,2.953,597,2.953,598,2.953,599,3.782,600,3.626,601,2.953,602,2.953,603,2.953,604,2.953,605,2.953,606,2.067,607,1.77,608,2.953,609,2.605,610,2.375,611,2.375,612,2.953,613,2.953,614,2.953,615,2.605,616,1.564,617,2.953,618,2.953,619,2.953]],["title/classes/ChannelNotTextBasedException.html",[0,0.247,575,3.074]],["body/classes/ChannelNotTextBasedException.html",[0,0.402,2,1.024,3,0.115,4,0.102,5,0.102,12,1.024,17,0.334,19,0.712,20,0.009,21,0.51,22,0.29,23,0.598,31,0.144,38,0.476,49,0.159,60,1.377,70,2.914,72,2.472,73,1.082,76,2.401,79,0.007,80,0.007,228,3.149,414,2.408,485,1.367,501,1.741,575,5.458,576,5.334,577,5.458,578,5.458,579,4.474,588,4.101,620,3.593,621,4.899,622,5.334,623,3.521,624,6.304,625,4.6,626,6.304,627,4.491,628,4.491,629,3.782,630,4.899,631,3.149,632,5.044,633,2.723,634,4.003,635,4.285,636,2.817,637,5.044,638,4.268,639,3.782,640,3.593,641,3.593,642,3.782,643,3.782,644,3.782,645,3.782,646,5.044]],["title/classes/ChannelNotTextBasedExceptionFilter.html",[0,0.247,638,3.278]],["body/classes/ChannelNotTextBasedExceptionFilter.html",[0,0.396,2,0.999,3,0.112,4,0.1,5,0.1,8,0.326,9,0.925,17,0.326,19,0.694,20,0.009,21,0.497,22,0.283,23,0.583,30,0.714,31,0.141,38,0.464,49,0.157,60,1.356,70,2.275,72,1.929,73,0.774,76,3.237,79,0.007,80,0.007,228,3.875,414,1.88,485,1.333,501,2.142,575,5.667,576,5.252,577,5.396,578,5.396,579,4.645,588,3.201,620,3.506,621,4.844,622,4.164,623,2.748,624,4.921,626,4.921,627,4.844,628,5.087,629,3.69,630,5.087,631,3.072,632,4.921,633,3.351,634,4.926,635,4.853,636,3.467,637,4.921,638,5.252,639,4.655,640,4.844,641,3.506,642,3.69,643,3.69,644,3.69,645,3.69,646,4.921,647,5.579]],["title/classes/CleanWfpMember.html",[0,0.247,405,3.278]],["body/classes/CleanWfpMember.html",[0,0.273,2,0.868,3,0.097,4,0.087,5,0.087,8,0.284,9,0.845,10,1.604,12,0.868,17,0.376,19,0.8,20,0.009,21,0.746,22,0.326,23,0.672,25,4.405,26,0.89,27,3.433,29,3.06,30,0.621,31,0.154,32,3.281,34,2.907,35,0.934,36,1.004,37,1.405,38,0.404,39,0.934,45,2.671,46,2.907,47,2.671,48,1.863,49,0.108,50,1.216,55,3.281,60,1.238,62,1.851,77,1.957,79,0.007,80,0.007,215,3.13,216,1.275,360,2.699,377,4.189,405,4.797,408,3.395,470,3.047,485,1.159,489,2.164,538,3.901,648,6.359,649,4.278,650,6.428,651,4.278,652,4.85,653,4.85,654,4.85,655,3.395,656,4.039,657,2.907,658,5.669,659,5.373,660,5.283,661,4.278,662,3.619,663,4.278,664,3.395,665,3.901,666,4.85,667,4.85,668,3.208,669,3.539,670,4.85,671,4.85,672,3.208,673,4.85,674,4.797,675,4.85,676,4.85,677,4.85,678,3.901,679,3.619,680,4.405,681,4.85,682,4.85,683,4.85,684,3.901,685,4.85,686,3.395,687,4.797,688,4.85,689,5.17,690,4.85,691,5.669,692,5.669,693,5.17,694,5.669,695,4.278,696,4.278,697,3.395,698,3.047]],["title/classes/CommandValidationFilter.html",[0,0.247,699,3.074]],["body/classes/CommandValidationFilter.html",[0,0.323,2,1.026,3,0.115,4,0.103,5,0.103,8,0.335,9,0.941,10,1.736,17,0.335,19,0.713,20,0.009,21,0.638,22,0.291,23,0.599,29,2.728,30,0.733,31,0.157,35,1.104,38,0.596,39,1.104,49,0.128,60,1.378,62,1.471,76,3.432,77,1.744,79,0.007,80,0.007,215,2.336,216,1.507,234,2.541,501,2.179,627,4.903,628,5.136,640,4.903,655,4.011,656,4.497,669,3.155,686,4.011,698,4.497,699,5.009,700,6.312,701,5.054,702,5.73,703,8.173,704,5.73,705,7.156,706,5.73,707,5.73,708,5.73,709,5.73,710,4.609,711,5.73,712,5.73,713,2.823,714,5.73,715,5.73,716,4.011,717,5.73,718,5.73,719,4.276]],["title/classes/CommunityQuestionCommand.html",[0,0.247,392,3.278]],["body/classes/CommunityQuestionCommand.html",[0,0.192,2,0.611,3,0.069,4,0.061,5,0.061,8,0.199,9,0.661,10,1.767,12,0.899,13,1.681,14,2.675,16,2.145,17,0.385,19,0.819,20,0.01,21,0.694,22,0.334,23,0.688,25,3.775,26,1.094,27,2.839,29,2.839,30,0.763,31,0.156,32,2.564,33,1.882,34,3.012,35,0.968,36,0.706,37,0.989,38,0.418,39,0.657,40,1.12,45,1.878,46,2.045,47,1.878,48,0.989,49,0.076,50,1.259,51,1.522,58,1.395,60,1.613,62,2.074,65,0.69,72,2.275,77,1.816,79,0.005,80,0.005,85,1.624,215,2.048,216,2.089,222,1.456,238,3.517,272,2.297,276,2.045,294,1.741,355,2.388,370,5.26,392,3.749,485,0.815,569,3.323,588,1.957,656,3.157,662,3.749,669,2.766,672,2.256,686,2.388,698,2.144,719,3.749,720,6.186,721,3.009,722,5.024,723,5.963,724,5.26,725,3.411,726,5.024,727,5.803,728,4.797,729,3.411,730,3.411,731,7.45,732,4.91,733,3.411,734,3.411,735,4.91,736,6.579,737,3.411,738,3.411,739,2.388,740,5.024,741,2.256,742,3.323,743,3.009,744,3.009,745,4.431,746,5.26,747,3.009,748,3.411,749,3.411,750,3.411,751,2.546,752,2.546,753,3.411,754,4.351,755,3.411,756,3.411,757,3.411,758,3.009,759,2.546,760,2.546,761,6.579,762,3.411,763,3.411,764,2.546,765,5.024,766,3.411,767,5.024,768,2.744,769,3.009,770,4.431,771,3.411,772,2.256,773,2.938,774,5.024,775,3.009,776,3.411,777,3.009,778,5.024,779,6.579,780,2.744,781,3.009,782,2.546,783,3.411,784,5.024,785,5.024,786,3.411,787,3.411,788,3.411,789,4.431,790,3.411,791,3.411,792,5.024,793,3.411,794,3.009,795,3.411,796,5.024,797,4.041,798,3.411,799,2.744,800,3.411,801,3.411,802,3.411,803,3.411,804,3.411,805,4.431,806,3.411,807,3.411,808,3.411,809,3.411,810,3.411,811,3.411,812,3.411,813,2.256,814,3.411,815,5.963,816,3.411,817,3.411,818,3.411,819,1.681,820,3.009,821,3.009,822,3.009,823,3.009,824,2.388,825,3.411,826,3.009,827,1.572,828,5.024,829,3.009,830,2.744,831,3.411,832,3.411]],["title/classes/CommunityQuestionDto.html",[0,0.247,732,3.278]],["body/classes/CommunityQuestionDto.html",[0,0.405,2,1.036,3,0.116,4,0.104,5,0.104,8,0.338,17,0.421,20,0.009,22,0.437,26,1.321,31,0.145,35,1.114,36,1.198,49,0.129,73,1.138,77,2.192,79,0.007,80,0.007,202,1.602,235,3.196,259,3.344,302,3.732,303,2.582,348,3.023,485,2.084,577,5.04,710,5.791,731,7.693,732,5.373,754,4.762,758,6.35,759,5.373,833,6.913,834,5.103,835,5.373,836,6.35,837,6.35,838,7.199,839,6.35,840,5.786,841,5.373,842,5.786,843,4.318,844,5.791]],["title/classes/CommunityQuestionFormDto.html",[0,0.247,735,3.278]],["body/classes/CommunityQuestionFormDto.html",[0,0.371,2,1.178,3,0.132,4,0.118,5,0.118,8,0.385,17,0.385,20,0.009,22,0.334,26,1.208,31,0.156,35,1.268,36,1.363,39,1.268,49,0.147,79,0.008,80,0.008,202,1.732,735,5.81,805,7.313,845,6.867,846,5.805,847,8.29,848,7.785,849,6.581,850,5.805]],["title/interfaces/DiscordExecutionContext.html",[363,2.52,851,3.278]],["body/interfaces/DiscordExecutionContext.html",[0,0.333,3,0.119,4,0.106,5,0.106,8,0.346,9,0.96,10,1.315,12,1.059,17,0.346,20,0.009,30,0.757,31,0.159,37,1.713,38,0.492,39,1.139,48,1.713,49,0.132,50,1.482,58,1.548,60,1.139,62,1.518,79,0.007,80,0.007,134,2.815,199,1.585,222,1.713,234,2.099,363,3.392,365,4.139,378,3.474,382,1.941,383,3.256,404,2.763,501,1.8,623,3.595,851,5.907,852,5.446,853,4.756,854,4.744,855,7.29,856,5.912,857,4.374,858,4.139,859,4.413,860,4.139,861,3.544,862,3.715,863,3.715,864,4.139,865,5.215,866,5.215]],["title/classes/DiscordGuildMember.html",[0,0.247,867,3.278]],["body/classes/DiscordGuildMember.html",[0,0.372,2,0.904,3,0.101,4,0.09,5,0.09,8,0.295,17,0.494,20,0.009,22,0.455,23,0.69,26,1.551,31,0.148,49,0.113,65,1.486,67,2.131,73,1.271,79,0.007,80,0.007,90,1.891,196,1.393,202,1.468,293,4.619,294,3.368,301,3.634,302,3.952,303,2.253,304,4.619,307,3.368,450,3.274,476,4.026,478,4.147,827,3.388,867,4.925,868,7.565,869,4.452,870,4.219,871,6.485,872,6.485,873,5.147,874,4.85,875,5.048,876,4.06,877,5.048,878,5.048,879,5.048,880,5.048,881,5.048,882,6.599,883,5.048,884,5.048,885,5.821,886,3.026]],["title/classes/DiscordUser.html",[0,0.247,886,2.633]],["body/classes/DiscordUser.html",[0,0.281,2,0.604,3,0.068,4,0.06,5,0.06,8,0.197,17,0.483,20,0.009,22,0.462,26,1.517,31,0.1,48,1.896,49,0.075,60,0.96,72,2.526,73,1.257,77,1.517,79,0.005,80,0.005,90,1.264,196,2.457,202,1.318,231,3.016,302,3.694,303,1.505,360,3.257,416,4.111,417,5.114,428,3.295,429,2.858,430,4.964,445,1.857,450,3.383,452,3.922,476,3.978,478,3.722,481,4.111,485,2.116,607,2.022,824,5.114,827,3.366,870,3.754,873,5.114,874,4.53,876,4.007,886,3.551,887,2.713,888,5.771,889,5.771,890,6.444,891,5.771,892,5.771,893,4.832,894,4.765,895,6.542,896,4.883,897,3.372,898,6.542,899,3.372,900,4.982,901,3.372,902,3.372,903,3.372,904,4.982,905,4.982,906,4.982,907,4.982,908,3.372,909,4.394,910,3.372,911,3.372,912,4.982,913,4.982,914,3.372,915,3.718,916,3.372,917,3.372,918,4.982,919,4.982,920,3.372,921,4.421,922,3.718,923,2.517]],["title/injectables/DmMessageHandler.html",[199,0.954,924,3.074]],["body/injectables/DmMessageHandler.html",[0,0.303,3,0.108,4,0.096,5,0.096,8,0.315,9,0.905,10,1.687,17,0.402,19,0.67,20,0.009,21,0.48,22,0.273,23,0.563,26,0.988,30,0.689,31,0.166,35,1.038,36,1.115,38,0.448,39,1.038,49,0.12,62,1.383,74,2.853,76,2.262,79,0.007,80,0.007,85,2.565,199,1.495,200,2.134,202,1.531,203,2.692,214,2.404,215,2.196,216,1.994,234,2.443,327,2.331,404,2.578,741,3.563,742,3.563,764,4.02,772,3.563,773,2.654,827,2.482,924,4.817,925,6.1,926,6.1,927,4.333,928,6.882,929,6.882,930,5.387,931,5.387,932,6.882,933,5.387,934,5.387,935,4.02,936,3.563,937,5.387,938,3.771,939,3.385,940,4.02,941,4.751,942,5.387,943,5.387,944,6.882,945,5.387,946,5.387,947,5.387,948,3.771,949,4.751,950,6.882,951,5.387,952,5.387,953,5.387,954,5.387,955,5.387,956,5.387,957,5.387,958,5.387,959,4.333,960,5.387,961,4.751,962,5.387,963,5.387,964,4.333,965,3.563,966,5.387,967,5.387]],["title/classes/EditRoleData.html",[0,0.247,968,3.074]],["body/classes/EditRoleData.html",[0,0.287,2,0.472,3,0.053,4,0.047,5,0.047,8,0.154,17,0.432,20,0.009,21,0.658,22,0.457,23,0.856,26,1.355,31,0.102,39,0.796,48,2.5,49,0.059,60,0.796,61,1.745,72,1.993,73,1.235,77,1.258,79,0.004,80,0.004,90,0.988,100,1.215,202,1.133,214,1.844,216,1.889,231,2.817,259,3.392,272,1.016,280,2.139,290,1.581,300,1.745,301,3.955,302,3.666,303,1.177,342,4.16,348,2.628,360,3.016,416,3.201,424,3.369,428,1.745,429,1.514,430,5.066,435,1.296,436,2.733,445,2.275,450,3.468,452,3.752,459,2.733,469,4.647,476,4.074,478,4.171,481,3.933,485,2.105,489,3.912,606,2.892,607,1.581,655,3.565,665,2.122,824,1.847,874,1.581,896,5.511,915,4.302,923,1.969,968,3.565,969,1.969,970,5.339,971,5.94,972,5.94,973,5.169,974,5.94,975,4.493,976,2.638,977,3.645,978,3.645,979,2.638,980,3.645,981,4.493,982,2.638,983,4.493,984,4.493,985,4.097,986,3.645,987,3.645,988,3.645,989,2.638,990,2.638,991,2.638,992,4.493,993,2.638,994,4.636,995,2.638,996,2.327,997,3.645,998,2.596,999,3.645,1000,2.892,1001,2.638,1002,2.638,1003,2.638,1004,3.645,1005,2.122,1006,2.892,1007,1.745,1008,2.327,1009,3.324,1010,2.477,1011,4.636,1012,2.327,1013,4.636,1014,2.327,1015,3.324,1016,2.327,1017,2.327,1018,2.327,1019,2.327,1020,2.327,1021,2.327,1022,2.122,1023,2.327,1024,3.565,1025,2.327,1026,2.892,1027,1.969,1028,2.122,1029,2.122,1030,2.327,1031,1.969]],["title/interfaces/EventToLog.html",[218,2.091,363,2.52]],["body/interfaces/EventToLog.html",[3,0.117,4,0.105,5,0.105,8,0.342,9,0.953,17,0.342,19,0.727,20,0.009,21,0.521,22,0.297,23,0.611,30,0.748,31,0.117,38,0.486,49,0.13,79,0.007,80,0.007,203,2.975,213,3.337,218,3.449,220,3.456,235,2.382,363,3.352,365,4.09,485,1.731,505,3.837,512,3.837,514,3.697,621,5.171,633,3.919,1032,5.153,1033,8.621,1034,6.62,1035,8.23,1036,8.23,1037,6.389,1038,5.843,1039,4.791,1040,6.389,1041,6.62,1042,7.243,1043,5.826]],["title/classes/Explorer.html",[0,0.247,1044,3.533]],["body/classes/Explorer.html",[0,0.286,2,0.91,3,0.102,4,0.091,5,0.091,8,0.297,9,0.872,12,1.187,13,2.504,14,3.032,17,0.457,19,0.973,20,0.009,21,0.697,22,0.397,23,0.817,27,3.512,30,0.944,31,0.157,33,2.484,35,0.979,36,1.373,39,0.979,49,0.113,50,2.153,58,1.406,60,1.421,70,2.072,79,0.007,80,0.007,99,3.156,213,3.054,216,1.336,222,1.921,364,3.557,450,2.783,616,2.692,1034,4.088,1039,3.361,1044,5.332,1045,4.483,1046,6.629,1047,6.507,1048,6.629,1049,6.629,1050,8.469,1051,5.082,1052,6.629,1053,5.082,1054,8.315,1055,6.629,1056,5.082,1057,6.629,1058,5.082,1059,4.088,1060,5.332,1061,5.082,1062,5.082,1063,5.332,1064,5.082,1065,5.082,1066,5.082,1067,5.082,1068,5.082,1069,5.082,1070,5.082,1071,5.082,1072,5.082,1073,4.483,1074,5.082]],["title/classes/Guild.html",[0,0.247,435,0.909]],["body/classes/Guild.html",[0,0.404,2,1.03,3,0.116,4,0.103,5,0.103,8,0.336,17,0.457,20,0.009,21,0.729,22,0.454,26,1.434,31,0.144,42,2.042,49,0.16,65,1.58,67,1.667,73,1.267,79,0.007,80,0.007,90,2.155,202,1.596,304,5.021,435,1.695,476,4.148,870,3.3,1075,4.627,1076,6.288,1077,5.77,1078,5.834,1079,5.752,1080,5.752,1081,5.752,1082,2.936,1083,3.3,1084,4.627,1085,3.3]],["title/controllers/GuildAutoDeleteChannelController.html",[81,1.48,1086,3.278]],["body/controllers/GuildAutoDeleteChannelController.html",[0,0.347,3,0.091,4,0.081,5,0.081,8,0.266,9,0.809,10,1.889,12,0.814,17,0.408,19,0.868,20,0.009,21,0.622,22,0.354,23,0.729,26,1.28,30,0.893,31,0.15,37,1.317,38,0.378,49,0.101,50,1.139,58,1.48,60,1.344,62,1.791,65,1.694,73,1.179,79,0.006,80,0.006,81,1.531,83,1.657,216,1.967,222,1.317,235,1.853,246,2.725,263,3.867,327,3.019,382,2.455,390,3.961,391,2.856,414,2.775,435,0.941,530,2.608,560,4.884,561,4.615,562,5.208,616,3.961,1086,4.593,1087,5.617,1088,5.147,1089,3.656,1090,7.491,1091,6.978,1092,6.154,1093,6.978,1094,4.545,1095,5.766,1096,4.545,1097,4.545,1098,4.545,1099,4.545,1100,4.545,1101,6.154,1102,6.596,1103,4.615,1104,4.009,1105,4.009,1106,3.392,1107,4.545,1108,4.545,1109,4.545,1110,5.208,1111,4.545,1112,6.978,1113,4.545,1114,4.009,1115,3.656,1116,4.545,1117,6.154]],["title/classes/GuildAutoDeleteChannelDto.html",[0,0.247,1095,3.074]],["body/classes/GuildAutoDeleteChannelDto.html",[0,0.406,2,1.038,3,0.116,4,0.104,5,0.104,8,0.339,17,0.421,20,0.009,22,0.417,26,1.323,31,0.158,42,2.058,49,0.129,73,1.224,79,0.007,80,0.007,90,2.172,202,1.604,302,3.735,303,2.587,382,2.576,404,2.25,476,3.735,501,2.195,503,4.004,874,3.475,1087,5.189,1088,5.158,1095,5.046,1110,4.326,1118,6.919,1119,4.663,1120,4.321,1121,7.845,1122,5.797,1123,5.797,1124,7.208,1125,7.208,1126,7.208,1127,6.358,1128,5.797,1129,5.797,1130,5.797,1131,5.797,1132,5.797]],["title/modules/GuildAutoDeleteChannelModule.html",[92,1.519,1133,3.074]],["body/modules/GuildAutoDeleteChannelModule.html",[0,0.285,3,0.102,4,0.091,5,0.091,16,2.349,20,0.009,31,0.176,35,0.976,36,1.049,38,0.422,40,1.663,49,0.113,79,0.007,80,0.007,83,2.412,92,2.547,94,2.334,95,2.334,96,2.495,97,2.495,98,2.334,99,3.507,100,3.393,110,3.258,111,2.495,112,1.847,114,2.683,123,2.683,134,2.412,142,2.495,317,2.789,376,4.575,377,4.24,378,3.956,382,1.663,383,2.789,389,3.795,390,3.503,391,4.156,435,1.677,1086,5.496,1087,5.164,1088,4.68,1103,5.871,1133,6.374,1134,4.467,1135,4.467,1136,4.467,1137,4.093,1138,5.22,1139,4.467,1140,4.467,1141,4.467,1142,4.074,1143,2.906]],["title/injectables/GuildAutoDeleteChannelService.html",[199,0.954,1103,2.905]],["body/injectables/GuildAutoDeleteChannelService.html",[0,0.235,3,0.084,4,0.075,5,0.075,8,0.244,9,0.763,10,1.879,12,1.039,13,2.056,14,2.862,15,3.675,16,2.04,17,0.443,19,0.831,20,0.009,21,0.595,22,0.339,23,0.698,30,0.854,31,0.158,33,2.175,35,0.804,36,0.864,37,1.21,38,0.347,39,0.804,40,1.371,49,0.093,50,1.673,51,1.863,58,1.231,60,1.551,62,2.015,65,1.66,73,1.089,77,1.271,79,0.006,80,0.006,199,1.261,200,1.654,202,1.291,203,2.431,214,1.863,215,1.702,216,1.527,222,1.21,319,2.395,327,2.512,355,2.922,382,2.577,390,4.158,414,1.956,435,1.202,503,3.87,567,5.12,586,2.623,587,3.115,1085,2.395,1087,5.693,1088,5.199,1090,6.688,1095,5.05,1103,3.84,1104,3.682,1105,3.682,1110,3.115,1138,5.06,1141,3.682,1144,3.358,1145,7.214,1146,4.669,1147,5.805,1148,4.174,1149,5.805,1150,4.174,1151,5.12,1152,3.682,1153,5.805,1154,4.174,1155,4.174,1156,4.174,1157,4.174,1158,2.761,1159,4.174,1160,4.174,1161,4.174,1162,4.174,1163,4.174,1164,4.174,1165,4.174,1166,4.174,1167,4.174,1168,3.358,1169,3.682,1170,4.174,1171,4.174,1172,4.174,1173,3.115,1174,4.174,1175,4.174,1176,4.174,1177,3.682,1178,3.682]],["title/classes/GuildChannelEditOptions.html",[0,0.247,488,2.905]],["body/classes/GuildChannelEditOptions.html",[0,0.361,2,0.579,3,0.065,4,0.058,5,0.058,8,0.189,17,0.436,20,0.009,21,0.664,22,0.458,23,0.874,26,1.368,31,0.116,39,0.623,48,2.504,49,0.072,65,0.654,72,2.578,73,1.242,79,0.005,80,0.005,90,1.211,196,0.892,202,1.074,216,1.27,230,2.031,231,2.97,259,3.506,280,2.426,290,1.938,300,2.138,301,4.606,302,3.946,303,1.443,342,4.105,348,2.027,360,2.027,404,1.507,414,2.959,415,2.413,416,2.031,417,3.379,418,2.6,419,1.65,420,5.996,421,2.6,422,2.413,423,2.413,424,2.138,425,2.6,426,5.996,428,2.138,429,1.855,430,4.755,431,2.6,435,0.669,436,2.138,438,2.6,441,2.263,442,2.6,445,3.182,446,3.603,448,2.6,450,3.02,452,1.938,454,4.783,455,2.6,457,4.044,459,3.193,460,2.6,463,2.413,464,2.263,465,2.6,466,3.631,468,2.6,469,2.263,470,2.031,472,2.6,476,4.196,477,4.647,478,3.631,479,2.6,480,2.6,481,4.684,482,3.631,483,4.647,484,4.647,485,2.138,486,2.6,487,2.6,488,3.821,489,2.155,490,2.6,491,3.603,492,3.034,493,3.883,494,3.193,495,4.647,496,2.6,497,3.379,498,3.883,874,1.938,980,2.852,985,3.883,996,2.852,1179,3.233,1180,3.233,1181,3.233,1182,3.233,1183,3.233,1184,3.233,1185,3.233,1186,3.233,1187,3.233,1188,3.233]],["title/controllers/GuildController.html",[81,1.48,1189,3.278]],["body/controllers/GuildController.html",[0,0.281,3,0.1,4,0.089,5,0.089,8,0.292,9,0.862,10,1.841,12,0.895,14,2.668,17,0.383,19,0.816,20,0.009,21,0.652,22,0.333,23,0.685,26,1.203,30,0.839,31,0.162,33,2.456,35,0.962,36,1.035,37,1.448,38,0.416,39,0.962,49,0.111,50,1.643,58,1.39,60,1.594,62,1.994,65,1.57,73,1.149,79,0.007,80,0.007,81,2.209,83,1.822,85,2.379,86,2.55,88,2.751,91,2.867,235,2.037,253,2.995,272,2.525,327,2.837,377,3.734,414,2.209,441,5.437,464,5.437,530,2.867,716,3.498,1142,4.019,1189,4.892,1190,4.407,1191,6.555,1192,6.555,1193,4.997,1194,7.767,1195,7.767,1196,4.997,1197,4.997,1198,5.273,1199,4.997,1200,4.019,1201,4.997,1202,4.997,1203,7.767,1204,7.767,1205,6.555,1206,4.997,1207,4.997,1208,4.997,1209,4.997,1210,4.997,1211,4.997,1212,4.997]],["title/classes/GuildDoesNotExistException.html",[0,0.247,1213,3.074]],["body/classes/GuildDoesNotExistException.html",[0,0.401,2,1.018,3,0.114,4,0.102,5,0.102,12,1.018,17,0.332,19,0.708,20,0.009,21,0.507,22,0.289,23,0.594,31,0.143,38,0.473,49,0.159,60,1.372,65,1.44,70,2.904,72,2.689,73,1.079,76,2.387,79,0.007,80,0.007,228,3.131,435,1.61,485,1.359,501,1.731,506,4.269,579,4.462,588,4.086,620,3.573,621,4.886,622,5.315,623,3.508,625,4.573,627,4.475,628,4.475,629,3.761,630,4.886,631,3.131,633,2.707,634,3.98,635,4.269,636,2.801,639,3.761,640,3.573,641,3.573,642,3.761,643,3.761,644,3.761,645,3.761,893,3.761,1213,5.443,1214,5.728,1215,5.443,1216,3.761,1217,3.761,1218,5.015,1219,5.015,1220,4.244,1221,5.015]],["title/classes/GuildDoesNotExistExceptionFilter.html",[0,0.247,1220,3.278]],["body/classes/GuildDoesNotExistExceptionFilter.html",[0,0.395,2,0.993,3,0.111,4,0.099,5,0.099,8,0.324,9,0.922,17,0.324,19,0.69,20,0.009,21,0.494,22,0.282,23,0.58,30,0.71,31,0.141,38,0.462,49,0.156,60,1.351,65,1.121,70,2.262,72,2.425,73,0.77,76,3.229,79,0.007,80,0.007,228,3.861,435,1.452,485,1.326,501,2.135,506,3.326,579,4.635,588,3.183,620,3.486,621,4.831,622,4.14,623,2.733,627,4.831,628,5.076,629,3.669,630,5.076,631,3.055,633,3.339,634,4.909,635,4.843,636,3.455,639,4.638,640,4.831,641,3.486,642,3.669,643,3.669,644,3.669,645,3.669,893,3.669,1213,5.655,1214,5.64,1215,5.382,1216,3.669,1217,3.669,1218,4.893,1219,4.893,1220,5.233,1221,4.893,1222,4.893]],["title/injectables/GuildMemberEvents.html",[199,0.954,1223,3.074]],["body/injectables/GuildMemberEvents.html",[0,0.16,3,0.057,4,0.051,5,0.051,8,0.166,9,0.576,10,1.886,12,0.785,13,1.402,14,2.497,15,3.306,16,1.698,17,0.431,19,0.852,20,0.01,21,0.636,22,0.362,23,0.716,26,1.256,30,0.876,31,0.16,33,1.642,35,0.548,36,0.589,37,0.825,38,0.237,39,0.548,40,0.934,42,1.01,48,0.825,49,0.063,50,1.625,51,1.27,55,3.064,58,1.513,60,1.456,61,3.535,62,2.269,63,2.51,64,3.535,65,1.08,66,3.067,67,1.549,72,0.984,73,0.395,74,2.831,76,2.244,77,0.866,78,2.51,79,0.004,80,0.004,85,2.545,134,1.355,142,1.402,196,2.167,199,0.952,200,1.127,202,0.975,203,2.022,214,1.27,215,1.16,216,1.405,222,1.74,234,1.556,252,2.728,348,1.84,377,3.641,378,2.858,382,1.439,383,1.567,404,1.368,408,1.992,414,0.959,435,0.589,489,2.385,502,1.992,569,2.898,587,2.124,616,1.507,859,2.124,860,3.741,886,1.706,893,1.882,965,3.535,1010,1.706,1031,2.124,1137,3.515,1143,1.633,1200,2.289,1223,3.067,1224,6.665,1225,2.51,1226,3.865,1227,4.382,1228,4.829,1229,4.382,1230,4.382,1231,4.382,1232,4.382,1233,4.382,1234,6.491,1235,4.382,1236,2.845,1237,4.382,1238,5.738,1239,4.382,1240,2.845,1241,3.525,1242,4.382,1243,2.845,1244,4.382,1245,4.382,1246,2.845,1247,4.382,1248,3.988,1249,2.845,1250,4.382,1251,5.344,1252,4.382,1253,2.845,1254,2.845,1255,4.382,1256,2.289,1257,2.627,1258,2.845,1259,2.289,1260,3.525,1261,2.845,1262,4.299,1263,2.845,1264,4.382,1265,2.51,1266,1.882,1267,2.289,1268,2.845,1269,2.51,1270,2.51,1271,3.27,1272,2.845,1273,2.289,1274,2.51,1275,2.845,1276,2.289,1277,2.845,1278,2.845,1279,2.51,1280,2.289,1281,2.845,1282,4.382,1283,3.865,1284,2.845,1285,4.382,1286,2.845,1287,3.865,1288,3.865,1289,4.714,1290,2.51,1291,2.845,1292,6.847,1293,2.289,1294,2.845,1295,2.289,1296,2.845,1297,2.845,1298,2.845,1299,2.51,1300,2.845,1301,2.845,1302,2.845,1303,2.845,1304,2.845,1305,2.845,1306,2.845,1307,2.845,1308,2.51,1309,2.51,1310,2.51,1311,2.289,1312,2.845,1313,2.51,1314,2.845,1315,2.845,1316,2.51,1317,2.51,1318,2.289,1319,2.845,1320,2.845,1321,2.845,1322,2.845,1323,2.51,1324,2.845,1325,2.51,1326,2.845,1327,1.992,1328,4.382,1329,5.344,1330,2.845,1331,6.003,1332,2.845,1333,2.845,1334,2.845,1335,2.845,1336,2.845,1337,3.865,1338,2.51,1339,4.714,1340,2.51,1341,2.845,1342,2.845,1343,2.845,1344,4.382,1345,2.845,1346,2.845,1347,2.845,1348,2.845,1349,2.845,1350,2.845]],["title/injectables/GuildMessageHandler.html",[199,0.954,1351,3.074]],["body/injectables/GuildMessageHandler.html",[0,0.246,3,0.088,4,0.078,5,0.078,8,0.255,9,0.787,10,1.813,12,1.072,17,0.4,19,0.85,20,0.01,21,0.609,22,0.391,23,0.714,26,1.098,30,0.766,31,0.164,35,0.841,36,0.904,37,1.265,38,0.363,39,0.841,49,0.097,50,1.094,58,1.449,60,1.416,62,1.537,65,0.882,67,1.265,79,0.006,80,0.006,85,2.078,142,2.15,199,1.3,200,1.729,214,1.948,216,1.148,222,1.265,234,2.611,276,2.616,360,1.833,382,1.433,404,2.659,414,1.47,503,2.228,569,3.96,687,3.257,824,3.055,852,3.257,858,4.783,925,5.914,927,3.511,936,2.887,941,6.027,1082,2.228,1137,3.921,1143,2.504,1266,2.887,1290,3.85,1351,4.191,1352,5.914,1353,5.281,1354,5.987,1355,4.365,1356,4.365,1357,5.987,1358,5.987,1359,4.365,1360,5.987,1361,4.365,1362,6.197,1363,3.257,1364,4.365,1365,4.365,1366,3.511,1367,3.511,1368,3.511,1369,6.833,1370,4.365,1371,6.486,1372,6.486,1373,7.353,1374,3.85,1375,6.027,1376,4.365,1377,4.365,1378,4.365,1379,4.365,1380,5.987,1381,4.365,1382,4.365,1383,4.365,1384,4.365,1385,4.365,1386,4.365,1387,4.365,1388,5.987,1389,4.365,1390,4.365,1391,4.365,1392,4.365,1393,4.365,1394,4.365,1395,4.365,1396,4.365,1397,4.365]],["title/modules/GuildModule.html",[92,1.519,105,3.074]],["body/modules/GuildModule.html",[0,0.254,3,0.09,4,0.081,5,0.081,16,2.272,20,0.009,31,0.178,35,0.868,36,0.933,38,0.375,40,1.479,49,0.1,79,0.006,80,0.006,83,2.23,92,2.402,94,2.075,95,2.075,96,2.219,97,2.219,98,2.075,99,3.307,100,3.2,105,6.422,110,3.013,111,2.219,112,1.642,114,3.24,123,2.385,130,5.314,132,5.314,134,2.144,135,3.972,141,5.314,142,2.219,143,3.972,317,2.48,376,4.424,377,4.449,389,4.275,390,3.679,391,2.83,404,1.909,435,1.613,660,2.979,924,5.624,926,3.623,1087,4.045,1088,3.666,1133,5.624,1142,3.623,1189,5.183,1223,5.624,1351,5.624,1352,3.623,1398,3.972,1399,3.972,1400,3.972,1401,3.972,1402,5.624,1403,5.624,1404,4.504,1405,4.504,1406,4.504,1407,6.116,1408,6.116,1409,4.504,1410,3.623,1411,2.584,1412,3.972,1413,4.504]],["title/controllers/GuildRestrictedChannelController.html",[81,1.48,1414,3.278]],["body/controllers/GuildRestrictedChannelController.html",[0,0.382,3,0.136,4,0.122,5,0.122,20,0.009,31,0.136,38,0.565,49,0.152,79,0.008,80,0.008,81,2.288,83,2.477,382,2.23,389,4.967,390,3.598,414,2.672,435,1.406,530,3.897,1089,5.463,1414,5.919,1415,6.792]],["title/modules/GuildRestrictedChannelModule.html",[92,1.519,1402,3.074]],["body/modules/GuildRestrictedChannelModule.html",[0,0.33,3,0.118,4,0.105,5,0.105,16,2.439,20,0.009,31,0.17,35,1.128,36,1.212,38,0.487,40,1.922,49,0.131,79,0.007,80,0.007,83,2.645,92,2.725,94,2.697,95,2.697,96,2.884,97,2.884,98,2.697,99,3.752,100,3.63,110,3.573,111,2.884,112,2.135,114,3.101,123,3.101,317,3.224,376,4.986,382,1.922,389,4.725,390,3.101,391,3.679,435,1.502,1139,5.164,1140,5.164,1402,6.235,1414,5.881,1416,5.164,1417,5.164,1418,5.854]],["title/injectables/GuildRestrictedChannelService.html",[199,0.954,376,2.419]],["body/injectables/GuildRestrictedChannelService.html",[0,0.25,3,0.089,4,0.079,5,0.079,8,0.26,9,0.797,10,1.935,12,1.085,13,2.189,14,2.918,15,3.798,16,2.095,17,0.453,19,0.965,20,0.009,21,0.691,22,0.394,23,0.81,30,0.948,31,0.156,33,2.271,35,0.856,36,0.92,37,1.287,38,0.37,39,0.856,40,1.459,42,1.577,49,0.099,50,1.519,51,1.983,58,1.571,65,1.758,73,1.229,79,0.006,80,0.006,196,1.226,199,1.316,200,1.76,222,1.287,272,2.986,319,2.549,327,3.206,376,3.337,382,2.627,389,4.991,390,4.238,414,2.324,503,4.47,1082,3.781,1120,4.134,1144,3.574,1146,5.547,1151,3.919,1152,3.919,1158,2.939,1419,6.06,1420,6.06,1421,6.06,1422,4.443,1423,6.06,1424,4.443,1425,6.06,1426,4.443,1427,5.345,1428,5.959,1429,4.443,1430,4.443,1431,4.443,1432,4.443,1433,4.443,1434,4.443]],["title/injectables/GuildService.html",[199,0.954,377,2.242]],["body/injectables/GuildService.html",[0,0.124,3,0.044,4,0.039,5,0.039,8,0.129,9,0.471,10,1.862,12,0.642,14,2.357,15,2.868,16,1.473,17,0.407,19,0.838,20,0.01,21,0.62,22,0.342,23,0.704,26,0.405,27,1.706,30,0.986,31,0.123,33,1.343,35,0.425,36,0.457,37,0.639,38,0.184,39,0.425,40,0.724,42,0.783,48,1.509,49,0.049,50,1.745,51,0.985,54,1.647,55,1.829,58,1.428,60,1.562,62,1.879,65,1.595,67,1.038,72,2.235,73,1.173,74,1.169,76,0.926,77,1.968,79,0.004,80,0.004,195,1.946,196,0.609,197,2.148,199,0.778,200,0.874,212,3.645,214,0.985,215,0.9,216,1.37,234,2.178,235,0.9,272,2.206,276,3.678,294,2.309,319,2.056,327,0.955,346,2.882,355,4.525,356,1.946,357,4.593,360,2.187,376,2.868,377,1.829,389,2.056,390,1.169,391,1.386,404,2.102,414,2.178,419,2.923,429,2.056,435,1.186,441,3.645,445,1.973,450,1.9,464,4.294,485,0.527,503,3.553,586,1.386,658,1.946,660,3.444,662,1.647,663,1.946,680,1.266,687,3.887,799,1.775,827,2.084,998,1.386,1082,2.658,1085,2.596,1110,1.647,1114,3.16,1115,2.882,1120,2.712,1158,1.459,1198,5.599,1215,2.508,1228,4.189,1234,1.775,1270,3.16,1273,1.775,1276,1.775,1372,3.99,1427,1.946,1428,1.775,1435,1.946,1436,4.524,1437,4.524,1438,4.524,1439,4.524,1440,3.99,1441,3.583,1442,3.583,1443,1.775,1444,4.524,1445,2.206,1446,2.206,1447,6.135,1448,2.206,1449,4.189,1450,2.206,1451,2.206,1452,2.206,1453,2.206,1454,6.135,1455,4.579,1456,5.823,1457,3.887,1458,2.37,1459,4.524,1460,6.961,1461,6.135,1462,4.524,1463,5.411,1464,4.524,1465,6.734,1466,4.524,1467,3.99,1468,4.524,1469,6.135,1470,6.135,1471,4.524,1472,6.135,1473,4.524,1474,4.524,1475,4.524,1476,3.99,1477,2.882,1478,2.674,1479,2.674,1480,2.206,1481,2.206,1482,2.206,1483,5.208,1484,2.206,1485,3.16,1486,2.206,1487,3.583,1488,3.583,1489,3.583,1490,3.16,1491,4.524,1492,3.583,1493,2.882,1494,3.583,1495,2.206,1496,3.583,1497,2.206,1498,1.946,1499,3.99,1500,2.206,1501,2.206,1502,2.206,1503,3.583,1504,1.775,1505,1.946,1506,1.946,1507,1.946,1508,2.206,1509,2.206,1510,2.206,1511,2.206,1512,2.206,1513,2.206,1514,2.206,1515,2.206,1516,2.206,1517,2.206,1518,3.583,1519,4.524,1520,2.206,1521,1.946,1522,2.206,1523,4.593,1524,3.16,1525,3.583,1526,3.583,1527,4.524,1528,5.208,1529,2.674,1530,2.206,1531,3.583,1532,2.206,1533,2.206,1534,3.583,1535,3.583,1536,2.206,1537,4.524,1538,3.583,1539,2.206,1540,2.206,1541,2.206,1542,3.583,1543,2.206,1544,2.206,1545,2.206,1546,2.206,1547,2.206,1548,3.583,1549,2.206,1550,2.206,1551,2.206,1552,2.206,1553,2.206,1554,2.206,1555,3.583,1556,2.206,1557,3.583,1558,2.206,1559,2.206,1560,2.206,1561,2.206,1562,1.946,1563,2.206]],["title/controllers/GuildSettingsController.html",[81,1.48,1564,3.278]],["body/controllers/GuildSettingsController.html",[0,0.293,3,0.104,4,0.093,5,0.093,8,0.304,9,0.885,10,1.861,17,0.393,19,0.837,20,0.009,21,0.599,22,0.341,23,0.703,26,1.234,30,0.861,31,0.175,38,0.433,42,1.845,49,0.116,58,1.102,60,1.001,62,1.727,65,1.594,73,1.161,79,0.007,80,0.007,81,2.266,83,1.895,85,2.475,86,2.653,87,4.181,88,2.862,91,2.982,134,3.551,197,4.032,222,1.506,234,2.388,235,2.119,246,3.116,247,3.879,248,3.879,252,2.653,254,3.116,255,3.266,256,3.438,257,4.032,258,3.116,259,2.119,260,3.638,263,3.266,378,3.203,382,2.449,383,2.862,435,1.076,560,5.856,562,5.02,582,3.879,860,3.638,1564,5.02,1565,4.585,1566,5.933,1567,7.457,1568,4.585,1569,5.198,1570,5.198,1571,5.885,1572,5.198,1573,5.198,1574,5.198,1575,5.198,1576,5.198,1577,4.181,1578,4.181,1579,5.198,1580,5.198,1581,5.198,1582,5.198,1583,5.198]],["title/modules/GuildSettingsModule.html",[92,1.519,132,2.905]],["body/modules/GuildSettingsModule.html",[0,0.338,3,0.12,4,0.107,5,0.107,16,2.453,20,0.009,31,0.167,38,0.499,40,1.969,49,0.134,79,0.007,80,0.007,83,2.684,92,2.754,94,2.763,95,2.763,96,2.954,97,2.954,98,2.763,99,3.792,100,3.669,110,3.626,111,2.954,112,2.186,132,5.915,134,2.855,378,4.324,382,1.969,383,3.302,435,1.524,1564,5.944,1584,5.289,1585,5.289,1586,5.996,1587,5.996,1588,5.996]],["title/injectables/GuildSettingsService.html",[199,0.954,378,2.091]],["body/injectables/GuildSettingsService.html",[0,0.185,3,0.066,4,0.059,5,0.059,8,0.192,9,0.642,10,2.004,12,0.874,15,2.689,16,1.826,17,0.481,19,1.024,20,0.009,21,0.733,22,0.418,23,0.86,30,1.039,31,0.155,37,0.951,38,0.273,39,0.632,40,1.078,42,1.166,49,0.073,50,1.224,51,1.465,58,1.698,60,1.123,62,1.658,65,1.696,72,1.135,73,1.246,79,0.005,80,0.005,134,3.957,139,1.808,140,1.808,196,0.906,197,4.799,199,1.061,200,1.301,206,4.057,208,3.664,216,1.284,221,2.171,234,1.734,272,1.265,327,3.403,378,2.325,382,2.729,404,2.403,489,1.465,579,1.884,600,2.641,616,1.739,657,1.968,693,2.641,716,3.418,773,1.617,873,2.298,1120,1.968,1213,2.298,1215,2.298,1217,2.171,1443,2.641,1566,4.307,1568,4.307,1589,2.896,1590,5.831,1591,4.883,1592,4.883,1593,4.883,1594,4.883,1595,4.883,1596,4.883,1597,4.883,1598,4.883,1599,4.883,1600,3.283,1601,3.283,1602,5.831,1603,3.283,1604,4.883,1605,3.283,1606,4.883,1607,3.283,1608,4.883,1609,3.283,1610,4.883,1611,3.283,1612,4.883,1613,3.283,1614,3.283,1615,4.883,1616,3.283,1617,4.883,1618,3.283,1619,4.883,1620,3.283,1621,4.883,1622,3.283,1623,3.283,1624,3.283,1625,2.298,1626,3.283,1627,2.896,1628,3.283,1629,3.283,1630,3.283,1631,3.283,1632,3.283,1633,3.283,1634,2.641,1635,3.283,1636,3.283,1637,3.283,1638,3.283,1639,7.697,1640,3.283,1641,3.283,1642,3.283,1643,3.283,1644,3.283,1645,3.283,1646,3.283,1647,3.283,1648,6.457,1649,2.641,1650,3.283,1651,3.283,1652,2.641,1653,3.283,1654,3.283,1655,3.283,1656,3.283,1657,3.283,1658,3.283,1659,3.283,1660,3.283,1661,3.283]],["title/controllers/GuildUserController.html",[81,1.48,1662,3.278]],["body/controllers/GuildUserController.html",[0,0.377,3,0.104,4,0.093,5,0.093,8,0.302,9,0.882,10,1.655,12,0.926,14,2.712,17,0.302,19,0.644,20,0.009,21,0.701,22,0.263,23,0.54,26,0.949,30,0.662,31,0.173,33,2.512,35,0.996,36,1.071,37,1.498,38,0.43,39,0.996,49,0.115,50,1.68,58,1.097,60,0.996,62,1.328,65,1.648,67,2.155,73,1.159,79,0.007,80,0.007,81,2.258,83,1.885,85,2.462,86,2.639,88,2.847,91,2.967,142,3.302,222,1.943,234,2.38,235,2.108,246,3.1,252,3.422,253,3.1,263,3.249,382,2.442,435,1.071,870,4.268,1083,2.967,1106,3.859,1137,3.302,1143,2.967,1173,3.859,1266,3.42,1662,5.003,1663,4.561,1664,6.561,1665,4.561,1666,6.703,1667,5.171,1668,5.171,1669,5.003,1670,4.159,1671,4.561,1672,4.561,1673,7.438,1674,5.171,1675,5.171,1676,5.171,1677,6.703,1678,5.171,1679,5.171,1680,4.561,1681,4.561,1682,5.171,1683,5.171,1684,4.561]],["title/modules/GuildUserModule.html",[92,1.519,141,2.905]],["body/modules/GuildUserModule.html",[0,0.323,3,0.115,4,0.103,5,0.103,16,2.426,20,0.009,31,0.172,35,1.104,36,1.186,38,0.477,40,1.881,49,0.128,79,0.007,80,0.007,83,2.609,92,2.698,94,2.64,95,2.64,96,2.823,97,2.823,98,2.64,99,3.716,100,3.595,110,3.525,111,2.823,112,2.089,114,3.035,123,3.035,134,2.728,141,5.944,142,2.823,317,3.155,378,4.085,382,1.881,383,3.155,435,1.616,1137,4.448,1143,3.288,1662,5.824,1685,5.054,1686,5.73,1687,5.054,1688,5.73,1689,5.73]],["title/injectables/GuildUserService.html",[199,0.954,1137,2.164]],["body/injectables/GuildUserService.html",[0,0.124,3,0.044,4,0.04,5,0.04,8,0.129,9,0.472,10,1.974,12,0.642,14,2.358,15,1.976,16,1.474,17,0.462,19,0.971,20,0.01,21,0.695,22,0.396,23,0.816,26,0.658,30,0.999,31,0.135,33,1.344,35,0.426,36,0.458,37,0.64,38,0.184,39,0.426,40,0.726,42,0.785,49,0.049,50,1.872,51,0.986,54,1.649,55,2.311,58,1.634,60,1.298,62,2.217,64,3.791,65,1.768,66,3.649,67,2.509,68,1.777,72,0.764,73,1.256,77,0.673,79,0.004,80,0.004,134,1.052,139,1.217,140,1.217,142,3.928,197,2.715,199,0.779,200,0.875,210,1.949,214,0.986,215,0.901,216,1.191,234,2.902,252,2.925,272,3.072,276,1.325,294,1.128,319,2.058,327,0.956,346,1.777,348,3.005,378,2.482,382,2.618,383,1.217,419,2.66,435,1.079,489,0.986,586,1.389,660,1.462,813,1.462,859,1.649,1010,1.325,1063,4.193,1082,1.128,1085,1.268,1120,4.476,1137,1.767,1146,3.643,1158,2.373,1226,3.994,1228,4.193,1234,4.61,1241,1.777,1257,1.325,1273,1.777,1280,1.777,1283,1.949,1338,3.164,1362,1.777,1443,1.777,1449,4.938,1456,2.677,1463,3.164,1485,3.164,1498,1.949,1523,3.164,1524,1.949,1562,1.949,1625,3.649,1627,1.949,1690,1.777,1691,4.529,1692,4.529,1693,3.587,1694,3.587,1695,3.587,1696,4.529,1697,3.994,1698,3.587,1699,4.529,1700,3.587,1701,3.587,1702,4.529,1703,2.21,1704,2.21,1705,6.965,1706,2.21,1707,2.21,1708,2.21,1709,3.587,1710,2.21,1711,2.21,1712,2.21,1713,3.587,1714,2.21,1715,3.587,1716,2.21,1717,2.21,1718,2.21,1719,2.21,1720,2.21,1721,3.587,1722,2.21,1723,2.21,1724,5.212,1725,5.212,1726,4.597,1727,2.21,1728,3.587,1729,2.21,1730,3.587,1731,3.587,1732,2.21,1733,1.649,1734,2.21,1735,2.21,1736,2.21,1737,2.21,1738,2.21,1739,1.777,1740,2.21,1741,2.21,1742,2.21,1743,2.21,1744,2.21,1745,2.21,1746,3.89,1747,3.587,1748,2.21,1749,2.21,1750,2.21,1751,2.21,1752,2.21,1753,3.587,1754,2.21,1755,1.777,1756,2.21,1757,2.21,1758,2.21,1759,1.949,1760,2.21,1761,2.21,1762,2.21,1763,2.21,1764,2.21,1765,4.529,1766,3.587,1767,2.21,1768,2.21,1769,2.21,1770,2.21,1771,2.21]],["title/guards/HasRequiredRank.html",[257,2.633,1772,2.52]],["body/guards/HasRequiredRank.html",[0,0.247,3,0.088,4,0.078,5,0.078,8,0.256,9,0.789,10,1.522,12,1.074,16,2.307,17,0.351,19,0.747,20,0.009,21,0.535,22,0.305,23,0.627,30,0.768,31,0.16,36,0.906,37,1.268,38,0.364,40,1.437,42,1.554,49,0.098,50,1.845,51,1.954,55,4.163,58,1.272,60,1.534,62,1.124,64,2.895,65,0.885,67,1.983,77,1.333,79,0.006,80,0.006,196,2.032,199,1.303,202,0.974,203,2.306,216,1.936,222,1.738,235,1.785,249,3.442,252,3.937,254,3.596,256,2.895,257,3.596,258,4.103,259,3.145,327,1.894,360,1.838,450,2.519,485,1.433,501,1.333,616,3.177,631,2.411,633,2.856,636,3.371,854,4.775,857,4.413,861,3.596,1010,3.596,1039,3.968,1043,4.825,1257,4.413,1293,3.521,1327,4.199,1411,2.512,1458,2.895,1477,3.521,1529,3.267,1755,3.521,1772,4.224,1773,2.751,1774,3.521,1775,5.999,1776,5.291,1777,4.825,1778,5.999,1779,4.377,1780,7.966,1781,4.377,1782,4.377,1783,6.494,1784,5.999,1785,4.477,1786,5.291,1787,5.999,1788,5.291,1789,4.825,1790,4.377,1791,4.377,1792,4.377,1793,4.377,1794,4.377,1795,4.377,1796,3.521,1797,3.861,1798,3.861,1799,4.377,1800,3.861,1801,4.377,1802,4.377,1803,4.377,1804,4.377,1805,5.291,1806,3.861,1807,3.521,1808,3.861,1809,3.521,1810,3.861,1811,3.521]],["title/guards/IsModalInteractionGuard.html",[752,3.278,1772,2.52]],["body/guards/IsModalInteractionGuard.html",[0,0.353,3,0.126,4,0.112,5,0.112,8,0.367,9,0.995,17,0.367,19,0.781,20,0.009,21,0.559,22,0.319,23,0.656,29,2.988,30,0.803,31,0.152,38,0.522,39,1.209,49,0.14,58,1.331,60,1.209,79,0.008,80,0.008,450,3.177,501,2.304,636,3.091,752,5.647,754,5.005,854,5.056,857,5.175,861,4.536,862,3.943,1773,3.943,1812,6.674,1813,5.535,1814,6.275,1815,6.275,1816,6.275,1817,6.275]],["title/guards/IsUserUnlockedGuard.html",[858,3.074,1772,2.52]],["body/guards/IsUserUnlockedGuard.html",[0,0.32,3,0.114,4,0.102,5,0.102,8,0.332,9,0.935,10,1.728,12,1.274,17,0.416,19,0.885,20,0.009,21,0.634,22,0.361,23,0.743,30,0.726,31,0.156,37,1.645,38,0.472,39,1.093,48,1.645,49,0.127,50,1.423,58,1.509,60,1.093,62,1.457,79,0.007,80,0.007,134,2.702,199,1.545,222,1.645,234,2.525,363,3.256,378,3.878,382,1.863,383,3.125,404,2.711,501,1.728,623,2.796,636,2.796,851,6.079,852,5.799,853,4.565,854,4.264,855,5.006,857,4.883,858,4.979,859,4.235,860,4.979,861,4.264,862,3.566,863,3.566,864,3.972,865,5.006,866,5.006,1773,3.566,1818,5.006,1819,5.675,1820,5.675]],["title/controllers/JwtAuthController.html",[81,1.48,1821,3.278]],["body/controllers/JwtAuthController.html",[0,0.295,3,0.105,4,0.094,5,0.094,8,0.307,9,0.89,10,1.866,12,0.939,17,0.395,19,0.842,20,0.009,21,0.667,22,0.266,23,0.707,26,1.241,30,0.866,31,0.168,38,0.436,49,0.117,50,1.983,58,1.435,73,1.039,79,0.007,80,0.007,81,1.767,83,1.912,85,2.497,88,2.888,89,5.049,90,1.965,116,5.242,117,3.468,203,2.279,216,1.779,222,1.52,237,4.625,327,2.927,485,1.616,530,3.009,561,3.468,566,4.218,616,2.777,635,3.143,1649,4.218,1796,6.023,1821,5.049,1822,5.242,1823,4.625,1824,5.244,1825,5.967,1826,5.967,1827,5.244,1828,6.765,1829,5.244,1830,5.905,1831,5.244,1832,5.244,1833,6.765,1834,6.765,1835,5.244,1836,5.244,1837,4.474,1838,3.468,1839,4.625,1840,3.914,1841,5.244,1842,6.765,1843,5.967,1844,3.914,1845,5.244,1846,5.244,1847,5.244,1848,5.244,1849,5.244,1850,5.244,1851,5.244,1852,5.244,1853,5.244,1854,5.244,1855,5.244]],["title/injectables/JwtAuthGuard.html",[86,2.242,199,0.954]],["body/injectables/JwtAuthGuard.html",[0,0.382,3,0.136,4,0.122,5,0.122,20,0.009,31,0.159,38,0.565,49,0.152,79,0.008,80,0.008,86,4.048,199,1.723,200,2.691,253,4.072,623,3.907,1856,5.463,1857,6.995,1858,5.991,1859,4.492]],["title/modules/JwtAuthModule.html",[92,1.519,106,3.074]],["body/modules/JwtAuthModule.html",[0,0.292,3,0.104,4,0.093,5,0.093,16,2.364,20,0.009,31,0.178,35,0.998,36,1.073,38,0.431,40,1.701,49,0.116,79,0.007,80,0.007,83,2.447,92,2.574,94,2.387,95,2.387,96,2.552,97,2.552,98,2.387,99,3.545,100,3.43,106,6.316,110,3.306,111,2.552,112,1.889,114,2.744,123,2.744,317,2.852,1821,5.556,1822,3.626,1837,5.89,1838,4.924,1839,4.569,1844,3.866,1859,3.426,1860,4.569,1861,4.569,1862,4.569,1863,5.851,1864,5.851,1865,5.011,1866,5.18,1867,5.18,1868,5.18,1869,4.166,1870,6.711,1871,5.18,1872,4.166,1873,5.18,1874,6.711,1875,4.569,1876,5.18,1877,4.569,1878,5.18,1879,5.18,1880,4.569,1881,5.18]],["title/injectables/JwtAuthService.html",[199,0.954,1837,2.905]],["body/injectables/JwtAuthService.html",[0,0.21,3,0.075,4,0.067,5,0.067,8,0.218,9,0.705,10,1.876,12,0.96,17,0.442,19,0.904,20,0.01,21,0.648,22,0.384,23,0.759,30,0.878,31,0.16,35,0.718,38,0.31,39,0.718,49,0.083,50,1.954,55,1.903,58,1.455,60,1.4,62,1.611,67,2.193,70,1.52,73,1.171,79,0.005,80,0.005,116,5.457,117,2.466,153,3.289,196,1.893,199,1.164,200,1.477,202,1.192,203,2.311,214,1.664,215,1.52,216,1.911,220,1.566,222,1.988,234,2.436,272,1.436,327,2.319,435,0.772,561,2.466,616,3.323,630,2.343,635,3.761,713,1.837,773,1.837,1449,2.999,1577,2.999,1733,4,1788,5.534,1822,5.457,1825,4.727,1826,5.534,1830,4.683,1837,3.545,1843,6.051,1844,2.783,1865,4.112,1869,2.999,1875,3.289,1877,4.727,1880,3.289,1882,3.289,1883,5.36,1884,5.36,1885,3.728,1886,7.566,1887,6.275,1888,5.36,1889,5.36,1890,3.728,1891,5.36,1892,3.728,1893,5.36,1894,3.728,1895,5.36,1896,3.728,1897,5.36,1898,6.275,1899,3.728,1900,6.275,1901,3.728,1902,3.289,1903,5.36,1904,5.36,1905,6.275,1906,3.728,1907,4.727,1908,5.36,1909,5.36,1910,5.36,1911,3.728,1912,3.728,1913,3.728,1914,2.999,1915,5.36,1916,3.728,1917,3.728,1918,3.728,1919,3.728,1920,3.728,1921,3.728,1922,3.728,1923,3.728,1924,3.728,1925,3.728,1926,3.289,1927,3.728,1928,5.36,1929,3.728,1930,3.728,1931,3.289,1932,3.728,1933,5.36,1934,5.36,1935,5.36,1936,3.728,1937,3.728,1938,3.728,1939,3.728,1940,3.728,1941,3.728,1942,3.728,1943,3.289,1944,3.728,1945,3.728,1946,3.728,1947,3.728]],["title/injectables/JwtAuthStrategy.html",[199,0.954,1863,3.074]],["body/injectables/JwtAuthStrategy.html",[0,0.331,3,0.118,4,0.105,5,0.105,8,0.344,9,0.956,10,1.756,12,1.052,17,0.425,19,0.905,20,0.009,21,0.648,22,0.369,23,0.76,30,0.752,31,0.166,38,0.489,48,1.703,49,0.131,58,1.247,79,0.007,80,0.007,116,6.044,117,3.887,199,1.579,200,2.329,222,1.703,327,2.543,623,3.582,1216,3.887,1578,4.727,1733,4.386,1822,5.525,1838,3.887,1859,3.887,1863,5.089,1907,5.184,1948,5.184,1949,7.27,1950,5.848,1951,5.184,1952,5.877,1953,6.412,1954,5.877,1955,5.184,1956,5.184,1957,4.727,1958,5.184,1959,5.184,1960,5.877,1961,5.184,1962,5.184,1963,5.877,1964,5.877,1965,5.184]],["title/classes/LogEntry.html",[0,0.247,324,3.074]],["body/classes/LogEntry.html",[0,0.3,2,0.663,3,0.074,4,0.066,5,0.066,8,0.217,17,0.466,20,0.009,22,0.448,23,0.558,26,1.461,31,0.107,48,1.546,49,0.162,60,1.318,65,1.264,70,2.175,72,3.055,73,1.241,79,0.005,80,0.005,90,1.388,196,2.001,202,1.187,212,5.446,214,1.654,216,1.403,249,4.834,250,4.744,259,2.175,272,2.055,276,3.748,278,4.377,280,3.044,282,4.666,294,3.854,301,2.938,302,3.792,303,1.654,305,3.529,306,2.594,324,3.735,340,5.515,404,1.952,414,2.106,435,1.501,476,3.862,485,2.084,489,2.791,607,4.774,659,2.594,716,3.735,874,4.526,949,4.706,985,2.98,1073,4.706,1158,3.529,1478,5.105,1830,3.982,1966,2.765,1967,4.706,1968,5.335,1969,5.335,1970,3.705,1971,3.705,1972,6.84,1973,3.705,1974,5.335,1975,5.335,1976,4.706,1977,5.335,1978,3.705,1979,3.705,1980,5.335,1981,3.705,1982,4.706,1983,5.335,1984,3.705,1985,6.033,1986,4.292,1987,5.515,1988,5.335,1989,3.705,1990,5.335,1991,3.705,1992,5.335,1993,2.98,1994,3.268,1995,3.268,1996,4.706,1997,3.268,1998,3.268,1999,3.268,2000,3.268,2001,3.268,2002,4.706,2003,3.268,2004,3.268,2005,3.268,2006,2.98,2007,3.268,2008,3.268,2009,3.268,2010,3.268,2011,3.268,2012,3.268,2013,3.268,2014,3.268,2015,3.268,2016,2.594,2017,2.98,2018,3.705,2019,2.765,2020,3.268,2021,3.705]],["title/classes/LogEntryDto.html",[0,0.247,243,3.278]],["body/classes/LogEntryDto.html",[0,0.295,2,0.939,3,0.105,4,0.094,5,0.094,8,0.307,17,0.49,20,0.009,22,0.453,26,1.539,31,0.136,49,0.117,73,1.265,79,0.007,80,0.007,90,1.965,202,1.505,243,5.049,249,4.812,250,5.269,251,4.218,276,4.489,278,5.242,280,3.144,282,5.589,290,4.743,293,4.735,294,4.038,305,4.953,306,5.242,307,3.453,324,3.671,476,4.062,501,2.059,1078,6.259,1120,4.055,2022,7.526,2023,4.625,2024,5.244,2025,5.244,2026,5.244,2027,5.244,2028,5.244,2029,5.244]],["title/guards/MessageFromUserGuard.html",[1363,3.278,1772,2.52]],["body/guards/MessageFromUserGuard.html",[0,0.349,3,0.124,4,0.111,5,0.111,8,0.362,9,0.988,17,0.362,19,0.771,20,0.009,21,0.552,22,0.315,23,0.648,30,0.793,31,0.151,38,0.516,39,1.194,48,1.796,49,0.138,58,1.593,60,1.194,79,0.008,80,0.008,404,2.685,450,3.153,501,2.286,636,3.053,854,5.035,857,5.157,861,4.502,862,3.894,863,3.894,864,4.337,936,4.967,1363,5.604,1773,3.894,2030,5.466,2031,6.196,2032,5.466]],["title/guards/MessageIsDmGuard.html",[935,3.278,1772,2.52]],["body/guards/MessageIsDmGuard.html",[0,0.346,3,0.123,4,0.11,5,0.11,8,0.359,9,0.983,17,0.359,19,0.765,20,0.009,21,0.548,22,0.312,23,0.642,30,0.786,31,0.15,38,0.511,39,1.184,48,1.781,49,0.137,58,1.585,60,1.184,77,1.871,79,0.008,80,0.008,199,1.623,404,2.679,450,3.137,501,1.871,636,3.027,854,5.021,857,5.021,861,4.479,862,3.861,863,3.861,864,4.301,935,5.576,936,4.942,1773,3.861,2032,5.42,2033,5.42,2034,6.145]],["title/classes/ModAnnouncementDto.html",[0,0.247,2035,3.278]],["body/classes/ModAnnouncementDto.html",[0,0.401,2,1.018,3,0.114,4,0.102,5,0.102,8,0.332,17,0.416,20,0.009,21,0.507,22,0.435,26,1.307,31,0.143,35,1.095,36,1.177,48,1.648,49,0.127,72,2.463,73,1.131,77,1.731,79,0.007,80,0.007,202,1.584,235,3.171,259,3.323,301,3.922,302,3.703,303,2.538,348,3.265,404,2.742,485,1.858,679,5.315,684,4.573,819,3.831,827,3.281,835,4.244,839,5.015,843,4.244,844,5.728,2035,5.315,2036,6.859,2037,5.015,2038,7.776,2039,5.315,2040,5.686,2041,5.686,2042,7.122,2043,7.122,2044,5.686,2045,5.686,2046,4.244,2047,4.244,2048,5.686,2049,5.686,2050,5.015]],["title/injectables/ModRequestFlow.html",[199,0.954,1403,3.074]],["body/injectables/ModRequestFlow.html",[0,0.165,3,0.059,4,0.053,5,0.053,8,0.172,9,0.591,10,1.859,12,0.804,13,1.448,14,2.529,16,2.041,17,0.422,19,0.863,20,0.01,21,0.68,22,0.378,23,0.725,26,1,29,3.302,30,0.842,31,0.145,33,1.683,35,0.566,36,0.608,37,0.851,38,0.245,39,0.566,40,0.965,49,0.066,50,1.126,51,1.311,58,1.53,60,1.582,62,2.128,65,1.102,67,0.851,72,1.016,73,0.847,74,1.556,76,1.234,77,1.859,79,0.005,80,0.005,142,1.448,199,0.976,200,1.164,202,0.999,203,2.057,214,1.311,215,2.223,216,2.047,222,1.58,228,1.618,234,1.043,272,1.132,280,1.234,307,1.5,327,1.271,348,1.234,360,1.234,382,0.965,414,0.99,422,2.193,429,1.686,435,0.608,454,2.193,482,1.846,492,1.846,586,1.846,656,2.822,657,1.761,664,2.057,668,2.971,669,3.362,672,1.943,678,2.363,686,2.057,698,1.846,727,6.864,728,5.579,741,1.943,742,2.971,743,2.592,744,2.592,745,3.962,746,3.962,747,2.592,754,2.971,769,2.592,772,3.606,773,2.686,775,2.592,777,2.592,789,2.592,794,2.592,797,4.911,813,2.971,829,2.592,830,2.363,939,1.846,940,2.193,965,1.943,1005,2.363,1085,3.774,1137,3.555,1143,1.686,1257,2.693,1266,1.943,1289,2.592,1323,2.592,1403,3.144,1410,5.986,1411,4.27,1529,2.193,1634,2.363,2051,6.564,2052,2.592,2053,5.452,2054,4.492,2055,4.492,2056,4.492,2057,4.492,2058,4.492,2059,2.938,2060,2.938,2061,4.492,2062,2.938,2063,4.492,2064,2.938,2065,4.492,2066,6.105,2067,2.938,2068,4.492,2069,6.105,2070,2.938,2071,4.492,2072,4.492,2073,2.938,2074,2.938,2075,2.592,2076,4.492,2077,2.363,2078,3.613,2079,3.613,2080,2.363,2081,2.938,2082,2.938,2083,5.452,2084,2.938,2085,4.385,2086,2.938,2087,2.938,2088,2.938,2089,2.938,2090,4.492,2091,2.938,2092,4.809,2093,2.938,2094,2.938,2095,2.938,2096,2.938,2097,2.938,2098,2.592,2099,2.592,2100,4.492,2101,6.578,2102,2.938,2103,4.492,2104,2.938,2105,2.938,2106,2.592,2107,2.938,2108,2.938,2109,2.938,2110,2.938,2111,4.492,2112,2.938,2113,2.938,2114,2.938,2115,2.938,2116,3.962,2117,2.938,2118,4.492,2119,2.938,2120,2.938,2121,2.938,2122,2.938,2123,2.938,2124,2.938,2125,2.938,2126,2.938,2127,2.938,2128,3.962,2129,2.592,2130,2.938,2131,2.938,2132,2.938,2133,2.938,2134,4.492,2135,2.938,2136,2.592,2137,2.938,2138,2.938,2139,2.938,2140,3.962,2141,2.938,2142,3.613,2143,4.492,2144,2.193,2145,4.492,2146,4.492,2147,4.492,2148,2.592,2149,1.943,2150,2.938,2151,2.938,2152,2.938,2153,2.938,2154,2.938,2155,2.938,2156,2.592,2157,2.363,2158,2.363,2159,2.938]],["title/modules/ModerationModule.html",[92,1.519,130,2.905]],["body/modules/ModerationModule.html",[0,0.33,3,0.118,4,0.105,5,0.105,16,2.44,20,0.009,31,0.176,35,1.13,36,1.215,38,0.488,40,1.926,49,0.131,79,0.007,80,0.007,83,2.648,92,2.727,94,2.703,95,2.703,96,2.89,97,2.89,98,2.703,99,3.755,100,3.346,110,3.577,111,2.89,112,2.139,114,3.846,123,3.107,130,5.846,136,5.708,317,3.23,528,5.886,2160,5.866,2161,5.866,2162,5.866,2163,5.866,2164,5.886,2165,5.886,2166,5.866,2167,5.866,2168,5.866,2169,5.866]],["title/classes/MumVoiceCommand.html",[0,0.247,386,3.278]],["body/classes/MumVoiceCommand.html",[0,0.299,2,0.951,3,0.107,4,0.095,5,0.095,8,0.31,9,0.897,10,1.676,17,0.31,19,0.661,20,0.009,21,0.608,22,0.346,23,0.555,25,4.561,26,0.974,27,3.587,29,3.247,30,0.679,31,0.16,32,3.48,34,4.088,35,1.314,36,1.099,38,0.442,39,1.023,45,2.924,46,3.183,47,2.924,48,1.539,49,0.118,62,1.751,70,2.165,74,2.812,76,2.229,77,2.293,79,0.007,80,0.007,234,2.421,238,4.773,348,2.229,386,5.089,404,2.351,414,1.789,485,1.269,669,3.755,713,2.616,719,5.089,739,3.717,751,3.963,760,3.963,773,3.916,819,2.616,827,2.446,1217,3.512,1353,6.644,2035,5.932,2170,6.015,2171,4.683,2172,5.309,2173,5.622,2174,5.309,2175,4.271,2176,5.309,2177,5.309,2178,5.309,2179,4.683,2180,5.309,2181,7.533,2182,6.015,2183,7.533,2184,5.309,2185,5.309,2186,5.309,2187,4.271,2188,6.015]],["title/classes/PermissionOverwrite.html",[0,0.247,457,3.074]],["body/classes/PermissionOverwrite.html",[0,0.387,2,0.669,3,0.075,4,0.067,5,0.067,8,0.219,17,0.219,20,0.009,21,0.612,22,0.456,26,0.686,31,0.126,39,0.72,48,2.445,49,0.083,65,0.756,72,2.853,73,1.245,79,0.005,80,0.005,90,1.401,196,1.032,202,1.194,216,0.983,230,2.349,231,2.996,259,3.405,280,1.569,290,2.241,300,2.472,301,4.724,302,4.054,303,1.668,342,4.006,360,2.254,404,1.676,414,2.942,415,2.79,416,2.349,417,3.758,418,3.007,419,1.908,420,5.524,421,3.007,422,2.79,423,2.79,424,2.472,425,3.007,426,5.524,428,2.472,429,2.145,430,4.885,431,3.007,434,3.297,435,0.774,436,2.472,438,3.007,441,2.616,442,3.007,445,3.46,446,4.007,448,3.007,450,2.884,452,2.241,454,4.007,455,3.007,457,4.808,459,4.156,460,3.007,463,2.79,464,2.616,465,3.007,466,3.374,468,3.007,469,2.616,470,2.349,472,3.007,476,4.261,477,5.054,478,3.948,479,3.007,480,3.007,481,4.902,482,3.374,483,4.319,484,5.054,485,2.133,486,4.319,487,3.007,488,3.551,489,1.668,490,3.007,491,2.79,492,2.349,493,3.007,494,2.472,495,3.007,496,3.007,497,2.616,498,3.007,2189,3.738]],["title/classes/PingCommand.html",[0,0.247,380,3.278]],["body/classes/PingCommand.html",[0,0.34,2,1.082,3,0.121,4,0.108,5,0.108,8,0.353,9,0.973,12,1.324,13,2.978,14,3.17,17,0.432,19,0.752,20,0.009,21,0.659,22,0.307,23,0.632,26,1.109,27,3.806,30,0.773,31,0.149,32,3.775,33,2.772,35,1.164,36,1.252,39,1.164,45,3.329,47,3.329,48,1.752,49,0.135,50,1.515,58,1.282,73,1.027,79,0.008,80,0.008,222,1.752,380,5.52,485,1.445,1271,4.511,2190,5.332,2191,8.328,2192,6.045,2193,6.045,2194,7.993,2195,6.045,2196,6.045,2197,5.332,2198,6.045,2199,6.045]],["title/injectables/PrismaService.html",[16,1.242,199,0.954]],["body/injectables/PrismaService.html",[0,0.341,3,0.122,4,0.108,5,0.108,8,0.354,9,0.974,10,1.959,16,2.094,17,0.433,19,0.754,20,0.009,21,0.54,22,0.308,23,0.633,30,0.948,31,0.149,38,0.504,42,2.151,49,0.135,62,1.901,79,0.008,80,0.008,199,1.609,200,2.4,501,1.844,623,3.649,1041,4.872,2200,5.343,2201,8,2202,7.406,2203,8.697,2204,7.406,2205,8.334,2206,6.057,2207,6.057,2208,6.057,2209,6.057,2210,6.057,2211,6.057]],["title/guards/ReactedMemberIsModOrHigherGuard.html",[1248,3.278,1772,2.52]],["body/guards/ReactedMemberIsModOrHigherGuard.html",[0,0.309,3,0.11,4,0.098,5,0.098,8,0.321,9,0.916,10,1.702,12,1.247,17,0.407,19,0.867,20,0.009,21,0.62,22,0.353,23,0.728,30,0.702,31,0.154,37,1.59,38,0.457,39,1.057,48,2.217,49,0.122,50,1.375,58,1.706,60,1.473,62,1.964,77,1.67,79,0.007,80,0.007,142,2.703,196,2.111,199,1.512,222,1.59,234,2.472,382,1.801,404,2.173,501,1.67,636,2.703,854,4.823,857,4.823,860,4.874,861,4.174,862,3.447,863,3.447,886,3.289,1010,3.289,1137,3.964,1143,3.148,1238,5.601,1248,5.197,1256,6.153,1257,4.823,1266,3.629,1773,3.447,1818,4.839,2212,4.839,2213,5.486,2214,5.486,2215,5.486,2216,5.486,2217,5.486,2218,5.486,2219,5.486,2220,5.486,2221,5.486,2222,4.839,2223,5.486,2224,5.486]],["title/injectables/RefreshJwtGuard.html",[199,0.954,1840,3.278]],["body/injectables/RefreshJwtGuard.html",[0,0.381,3,0.136,4,0.121,5,0.121,20,0.009,31,0.159,38,0.563,49,0.151,79,0.008,80,0.008,199,1.718,200,2.679,623,3.897,1840,5.903,1856,5.438,1857,6.977,1858,5.964,1859,4.472,1872,6.362,2225,5.964]],["title/injectables/RefreshJwtStrategy.html",[199,0.954,1864,3.074]],["body/injectables/RefreshJwtStrategy.html",[0,0.325,3,0.116,4,0.103,5,0.103,8,0.338,9,0.946,10,1.742,12,1.034,17,0.42,19,0.895,20,0.009,21,0.641,22,0.365,23,0.752,30,0.739,31,0.165,38,0.481,48,1.673,49,0.129,58,1.225,79,0.007,80,0.007,116,6.017,117,3.819,196,1.594,199,1.562,200,2.288,222,1.673,327,2.499,623,3.542,1216,3.819,1578,4.645,1733,4.31,1838,5.179,1859,3.819,1864,5.033,1872,5.784,1950,5.784,1951,5.093,1953,6.343,1955,5.093,1956,6.907,1957,4.645,1958,6.907,1959,5.093,1961,5.093,1962,5.093,1965,5.093,2226,6.907,2227,5.093,2228,5.774,2229,5.774,2230,5.774,2231,5.774]],["title/classes/RestrictedChannelDto.html",[0,0.247,2232,3.533]],["body/classes/RestrictedChannelDto.html",[0,0.418,2,1.089,3,0.122,4,0.109,5,0.109,8,0.356,17,0.434,20,0.009,22,0.424,26,1.362,31,0.161,42,2.159,49,0.136,73,1.158,79,0.008,80,0.008,90,2.279,202,1.652,231,2.963,302,3.535,303,2.715,382,2.632,476,3.816,481,4.665,501,2.26,503,4.091,874,3.646,894,4.892,1119,4.892,1120,4.451,1428,4.892,2232,5.972,2233,7.069,2234,8.014,2235,6.082,2236,6.082]],["title/controllers/RoleController.html",[81,1.48,2164,3.278]],["body/controllers/RoleController.html",[0,0.185,3,0.066,4,0.059,5,0.059,8,0.193,9,0.644,10,1.831,12,0.59,14,2.13,17,0.378,19,0.805,20,0.009,21,0.576,22,0.418,23,0.676,26,1.187,30,0.828,31,0.161,33,1.834,35,0.634,36,0.682,37,0.954,38,0.274,39,0.634,42,1.169,49,0.073,50,1.227,58,1.239,60,1.484,61,4.961,62,1.978,65,1.664,73,1.196,79,0.005,80,0.005,81,1.11,83,1.201,85,1.568,86,1.681,88,1.814,89,3.653,90,1.234,91,1.89,139,1.814,140,1.814,203,1.649,206,3.076,208,2.07,216,0.866,221,2.179,222,1.419,234,2.735,235,1.343,252,1.681,253,1.975,254,1.975,255,2.07,256,2.179,257,2.935,258,1.975,259,1.343,260,2.306,263,3.671,319,2.809,348,1.383,429,3.352,435,1.704,485,2.036,489,3.983,527,4.36,530,1.89,548,5.202,549,6.197,550,6.853,551,4.699,554,2.649,560,4.089,561,3.238,562,2.458,564,5.559,565,6.332,566,2.649,582,2.458,584,5.202,585,5.75,586,4.064,606,5.07,968,5.25,994,4.699,1006,5.393,1024,4.838,1026,4.089,1088,3.502,1158,3.238,1318,6.197,2164,3.653,2237,2.649,2238,5.842,2239,5.842,2240,4.895,2241,5.842,2242,3.294,2243,7.243,2244,3.294,2245,3.294,2246,3.294,2247,3.294,2248,6.389,2249,3.294,2250,3.294,2251,3.294,2252,3.294,2253,3.294,2254,3.294,2255,3.294,2256,3.294,2257,3.294,2258,3.294,2259,3.294,2260,2.905,2261,3.294,2262,3.294,2263,3.294,2264,3.294,2265,3.294,2266,3.294,2267,3.294,2268,3.294,2269,5.842,2270,3.294,2271,4.895,2272,4.895,2273,3.294,2274,3.294,2275,3.294,2276,3.294,2277,3.294]],["title/classes/RoleResponse.html",[0,0.247,1006,3.074]],["body/classes/RoleResponse.html",[0,0.283,2,0.462,3,0.052,4,0.046,5,0.046,8,0.151,17,0.462,20,0.009,21,0.654,22,0.459,26,1.449,31,0.101,39,0.783,48,2.434,49,0.058,60,0.783,61,1.708,72,2.38,73,1.244,77,0.786,79,0.004,80,0.004,90,0.968,100,1.19,202,1.118,214,1.153,216,1.498,231,2.921,259,2.991,272,0.995,280,1.085,290,1.548,300,1.708,301,3.927,302,3.645,303,1.153,342,3.927,348,1.085,360,3.215,416,3.893,424,4.098,428,2.688,429,2.332,430,5.152,435,1.477,436,2.688,445,2.238,450,3.505,452,4.126,459,1.708,469,3.988,476,4.062,478,4.134,481,3.893,485,2.119,489,3.932,606,2.845,607,1.548,655,2.845,665,2.078,824,1.808,874,3.944,876,4.041,894,4.041,896,5.475,915,4.91,923,1.928,968,2.845,969,1.928,970,5.292,971,5.901,972,5.901,973,5.135,974,5.901,975,3.585,977,2.278,978,2.278,981,4.432,983,3.585,984,3.585,986,2.278,987,2.278,988,2.278,992,3.585,994,3.269,997,2.278,998,1.623,999,2.278,1000,1.808,1004,3.585,1005,2.078,1006,3.517,1007,2.688,1008,3.585,1009,4.041,1010,3.012,1011,5.537,1012,3.585,1013,5.537,1014,3.585,1015,4.041,1016,2.278,1017,2.278,1018,2.278,1019,2.278,1020,2.278,1021,2.278,1022,2.078,1023,2.278,1024,3.517,1025,2.278,1026,2.845,1027,1.928,1028,2.078,1029,2.078,1030,2.278,1031,1.928,2278,2.583,2279,2.583,2280,2.583,2281,2.583,2282,2.583,2283,2.583,2284,2.583,2285,2.583,2286,2.583,2287,2.583,2288,2.583,2289,2.583,2290,2.583,2291,2.583]],["title/controllers/SelfController.html",[81,1.48,2292,3.278]],["body/controllers/SelfController.html",[0,0.294,3,0.105,4,0.093,5,0.093,8,0.305,9,0.887,10,1.662,17,0.305,19,0.649,20,0.009,21,0.465,22,0.265,23,0.545,26,0.957,30,0.863,31,0.164,35,1.521,37,1.512,38,0.434,49,0.116,50,1.307,58,1.106,67,2.165,72,2.73,73,1.037,79,0.007,80,0.007,81,2.517,83,1.902,85,2.484,86,2.662,87,4.196,88,2.872,91,2.993,196,2.46,222,1.512,234,2.393,235,2.127,272,2.597,485,1.611,530,2.993,1007,4.459,1083,2.993,1271,5.031,1411,3.868,1664,5.946,1665,4.601,1669,3.893,1671,4.601,1783,6.965,1785,5.031,1865,4.478,2292,5.031,2293,4.601,2294,7.47,2295,7.896,2296,5.423,2297,6.741,2298,6.351,2299,8.374,2300,5.216,2301,5.946,2302,5.946,2303,6.741,2304,4.601,2305,5.216,2306,4.601,2307,5.216,2308,5.216,2309,5.216,2310,5.216]],["title/classes/SelfDto.html",[0,0.247,1083,2.52]],["body/classes/SelfDto.html",[0,0.399,2,1.008,3,0.113,4,0.101,5,0.101,8,0.329,17,0.475,20,0.009,21,0.724,22,0.455,26,1.49,31,0.142,42,1.999,49,0.158,65,1.139,67,2.244,73,1.264,79,0.007,80,0.007,90,2.11,202,1.575,289,4.968,304,4.955,348,2.365,435,1.682,476,4.129,870,4.442,1075,4.53,1076,4.53,1077,4.53,1078,5.778,1082,2.875,1083,4.062,1084,5.694,1085,4.442,2311,5.632,2312,5.632,2313,5.632,2314,5.632]],["title/classes/SelfDto-1.html",[0,0.206,813,2.42,1083,2.1]],["body/classes/SelfDto-1.html",[0,0.318,2,1.01,3,0.113,4,0.101,5,0.101,8,0.33,17,0.49,20,0.009,21,0.691,22,0.453,26,1.537,31,0.142,42,2.003,49,0.126,65,1.567,67,2.246,73,1.26,79,0.007,80,0.007,90,2.114,202,1.577,252,3.955,382,2.806,476,4.07,870,4.446,1077,5.701,1078,6.25,1082,2.88,1083,4.067,1084,5.701,2315,4.977,2316,5.643,2317,5.643,2318,5.643,2319,7.088,2320,5.643,2321,5.643]],["title/injectables/SelfService.html",[199,0.954,1865,2.633]],["body/injectables/SelfService.html",[0,0.236,3,0.084,4,0.075,5,0.075,8,0.245,9,0.765,10,1.748,12,1.041,14,2.634,15,3.978,16,2.043,17,0.391,19,0.832,20,0.009,21,0.676,22,0.339,23,0.699,30,1.051,31,0.162,33,2.179,35,1.645,36,0.867,37,1.213,38,0.348,39,0.806,41,5.377,42,1.486,49,0.093,50,1.903,51,1.868,58,1.234,60,0.806,62,1.075,65,0.846,67,2.335,72,2.498,79,0.006,80,0.006,146,3.692,196,2.511,199,1.263,200,1.658,222,1.686,234,2.564,235,2.372,246,2.509,247,3.124,248,3.124,272,2.782,435,1.572,446,4.341,485,1.597,633,2.769,870,2.402,886,2.509,1076,3.367,1083,2.402,1085,4.145,1173,4.341,1276,3.367,1680,5.13,1681,5.13,1684,3.692,1865,3.487,2019,4.341,2173,4.341,2222,3.692,2298,4.679,2302,5.13,2304,3.692,2322,3.692,2323,4.679,2324,5.13,2325,5.817,2326,5.817,2327,4.186,2328,4.186,2329,5.817,2330,4.186,2331,7.857,2332,5.817,2333,5.817,2334,5.13,2335,5.817,2336,4.186,2337,5.13,2338,5.817,2339,5.13,2340,5.817,2341,4.186,2342,4.186,2343,4.186,2344,4.186,2345,4.186,2346,4.186,2347,4.186,2348,4.186,2349,4.186,2350,4.186,2351,4.186,2352,4.186]],["title/classes/SendDirectMessageToUserException.html",[0,0.247,2353,3.074]],["body/classes/SendDirectMessageToUserException.html",[0,0.393,2,0.988,3,0.111,4,0.099,5,0.099,12,0.988,17,0.323,19,0.687,20,0.009,21,0.492,22,0.28,23,0.577,31,0.14,38,0.459,49,0.156,60,1.346,65,1.413,67,2.336,70,3.127,73,1.179,76,2.316,79,0.007,80,0.007,196,2.296,228,3.038,404,2.394,435,1.142,485,1.318,501,1.68,506,4.189,579,4.4,620,3.467,621,4.391,623,3.442,625,4.437,627,4.391,628,4.391,629,3.649,630,4.819,631,3.038,633,2.627,635,4.189,636,2.718,639,3.649,640,3.467,641,3.467,642,3.649,643,3.649,644,3.649,645,3.649,713,2.718,819,2.718,827,3.219,1007,3.649,1216,3.649,1411,3.165,2353,5.368,2354,5.215,2355,5.724,2356,6.163,2357,4.009,2358,5.62,2359,4.866,2360,4.866,2361,4.866,2362,4.117,2363,4.866]],["title/classes/SendDirectMessageToUserExceptionFilter.html",[0,0.247,2362,3.278]],["body/classes/SendDirectMessageToUserExceptionFilter.html",[0,0.388,2,0.968,3,0.109,4,0.097,5,0.097,8,0.316,9,0.907,17,0.316,19,0.673,20,0.009,21,0.482,22,0.274,23,0.565,30,0.692,31,0.139,38,0.45,49,0.154,60,1.329,65,1.093,67,1.999,70,3.098,73,0.957,76,3.19,79,0.007,80,0.007,196,2.209,228,3.799,404,2.371,435,1.119,485,1.292,501,2.1,506,3.241,579,4.592,620,3.397,621,3.397,623,2.663,627,4.774,628,5.028,629,3.576,630,5.028,631,2.977,633,3.285,635,4.797,636,3.398,639,4.563,640,4.774,641,3.397,642,3.576,643,3.576,644,3.576,645,3.576,713,2.663,819,2.663,827,2.491,1007,4.563,1216,3.576,1222,4.769,1411,3.958,2353,5.602,2354,5.148,2355,5.67,2356,4.769,2357,3.102,2358,4.348,2359,6.085,2360,6.085,2361,4.769,2362,5.148,2363,4.769]],["title/classes/SetFirstMessageUICommand.html",[0,0.247,401,3.278]],["body/classes/SetFirstMessageUICommand.html",[0,0.294,2,0.934,3,0.105,4,0.093,5,0.093,8,0.305,9,0.887,10,1.662,12,1.207,13,2.57,14,3.054,16,2.41,17,0.394,19,0.839,20,0.009,21,0.666,22,0.379,23,0.705,26,0.957,27,3.557,29,2.484,30,0.667,31,0.159,32,3.441,33,2.526,35,1.005,36,1.08,37,1.512,38,0.434,39,1.005,40,1.713,45,2.872,46,3.127,49,0.116,50,1.69,51,2.328,58,1.106,60,1.005,62,1.918,64,3.45,65,1.054,67,1.512,77,2.052,79,0.007,80,0.007,222,1.512,272,2.009,401,5.031,402,5.723,403,6.102,404,2.614,657,4.041,668,3.45,669,3.712,697,3.651,773,2.57,1295,4.196,1371,5.946,1375,4.601,2175,4.196,2364,6.008,2365,4.196,2366,5.946,2367,5.216,2368,5.946,2369,6.965,2370,5.216,2371,5.216,2372,4.601,2373,5.216,2374,5.946,2375,5.216]],["title/classes/SettingsChanged.html",[0,0.247,1625,3.074]],["body/classes/SettingsChanged.html",[0,0.289,2,0.918,3,0.103,4,0.092,5,0.092,8,0.3,9,0.877,12,1.193,17,0.475,19,0.83,20,0.009,21,0.594,22,0.398,23,0.697,30,0.656,31,0.149,38,0.427,42,1.82,49,0.114,65,1.685,72,2.882,73,1.218,79,0.007,80,0.007,197,4.441,202,1.483,203,2.739,213,3.071,215,3.46,218,3.527,220,2.152,231,2.887,382,2.737,450,3.414,489,3.72,501,2.029,505,3.531,506,3.073,512,3.531,514,2.616,517,2.823,1625,4.666,1634,5.362,1739,6.704,2376,4.521,2377,8.487,2378,6.666,2379,5.126,2380,5.126,2381,5.126,2382,6.666,2383,6.666,2384,5.126,2385,5.126]],["title/classes/SettingsDto.html",[0,0.247,1571,3.278]],["body/classes/SettingsDto.html",[0,0.342,2,0.797,3,0.089,4,0.08,5,0.08,8,0.26,17,0.505,20,0.009,22,0.46,26,1.584,31,0.139,42,1.58,49,0.099,73,1.289,79,0.006,80,0.006,90,1.667,197,2.667,202,1.35,301,4.791,302,4.143,303,1.986,304,6.09,382,2.857,501,1.847,530,3.96,1120,3.636,1571,4.527,2386,3.925,2387,6.088,2388,6.088,2389,6.088,2390,6.902,2391,6.088,2392,6.088,2393,6.088,2394,6.088,2395,6.088,2396,6.902,2397,8.632,2398,4.45,2399,4.45,2400,4.45,2401,4.45,2402,4.45,2403,4.45,2404,4.45,2405,4.45,2406,4.45,2407,4.45,2408,4.45]],["title/classes/SlowmodeDisabled.html",[0,0.247,522,2.905]],["body/classes/SlowmodeDisabled.html",[0,0.394,2,0.816,3,0.092,4,0.082,5,0.082,8,0.267,9,0.811,12,1.251,17,0.457,19,0.768,20,0.009,21,0.55,22,0.397,23,0.645,30,0.583,31,0.124,38,0.379,49,0.156,65,1.752,67,2.025,73,1.254,79,0.006,80,0.006,196,1.258,202,1.372,203,2.777,213,3.45,218,3.725,220,1.914,231,2.863,419,2.327,435,1.447,450,3.462,466,3.875,494,4.952,499,4.079,500,3.402,501,2.28,502,4.892,503,4.487,504,5.621,505,3.266,506,3.697,512,3.966,514,2.327,515,4.079,516,6.47,517,4.44,518,6.486,519,4.96,520,4.96,521,3.849,522,4.622,523,3.402,524,4.96,525,3.667,526,3.539,527,3.402,2409,6.167,2410,4.559,2411,4.559,2412,4.559]],["title/classes/SlowmodeEnabled.html",[0,0.247,515,2.905]],["body/classes/SlowmodeEnabled.html",[0,0.39,2,0.803,3,0.09,4,0.08,5,0.08,8,0.262,9,0.802,12,1.241,17,0.469,19,0.759,20,0.009,21,0.543,22,0.407,23,0.637,30,0.574,31,0.123,38,0.373,49,0.155,65,1.747,67,2.008,73,1.252,79,0.006,80,0.006,196,1.237,202,1.356,203,2.765,213,3.426,218,3.703,220,1.882,231,3.007,419,2.288,435,1.435,450,3.447,466,3.831,494,5.525,499,4.033,500,3.346,501,2.264,502,4.85,503,4.476,504,5.573,505,3.23,506,3.655,512,3.939,514,2.288,515,4.583,516,6.451,517,4.418,518,6.453,519,4.904,520,4.904,521,3.816,522,4.033,523,3.346,524,4.904,525,3.606,526,3.499,527,3.346,2413,6.097,2414,4.483,2415,4.483,2416,4.483,2417,4.483]],["title/classes/SpecialCommand.html",[0,0.247,409,3.278]],["body/classes/SpecialCommand.html",[0,0.225,2,0.715,3,0.08,4,0.071,5,0.071,8,0.234,9,0.74,10,1.45,17,0.436,19,0.701,20,0.009,21,0.581,22,0.379,23,0.588,25,4.061,26,0.733,27,3.103,29,2.68,30,0.72,31,0.156,32,2.873,34,3.374,35,1.084,36,0.827,38,0.468,39,0.769,47,2.2,48,1.158,49,0.089,58,1.582,60,0.769,62,1.026,73,1.146,79,0.006,80,0.006,196,1.102,202,1.252,214,3.158,215,2.658,234,1.998,238,3.94,409,4.201,470,4.447,485,0.955,497,3.94,657,2.395,699,2.796,739,2.796,751,2.981,760,2.981,813,3.723,948,3.94,2092,3.523,2144,4.201,2149,4.681,2173,4.865,2418,3.523,2419,6.518,2420,6.518,2421,6.518,2422,6.518,2423,5.629,2424,5.629,2425,5.629,2426,5.629,2427,5.629,2428,4.528,2429,3.994,2430,5.629,2431,5.629,2432,5.629,2433,5.629,2434,5.629,2435,5.629,2436,4.528,2437,5.629,2438,5.629,2439,5.629,2440,5.629,2441,3.994,2442,8.121,2443,5.629,2444,7.163,2445,7.741,2446,5.629,2447,5.629,2448,5.629,2449,7.077,2450,5.692,2451,5.629,2452,3.994,2453,3.994,2454,5.282,2455,3.994,2456,5.629,2457,6.518,2458,6.518,2459,3.994,2460,3.213,2461,3.994,2462,3.523,2463,3.523,2464,3.523,2465,3.213,2466,3.213,2467,4.528,2468,4.528,2469,3.994,2470,4.528,2471,3.523,2472,3.994,2473,3.523,2474,3.994,2475,3.994,2476,3.994,2477,3.994,2478,3.994,2479,3.523,2480,5.692,2481,3.994,2482,7.077,2483,7.077,2484,7.077,2485,7.077,2486,5.629,2487,3.994,2488,3.994,2489,3.994,2490,3.994,2491,3.994,2492,3.994,2493,3.994,2494,3.523]],["title/modules/TasksModule.html",[92,1.519,107,3.074]],["body/modules/TasksModule.html",[0,0.299,3,0.107,4,0.095,5,0.095,16,2.379,20,0.009,31,0.174,35,1.023,36,1.099,38,0.442,40,1.743,49,0.118,79,0.007,80,0.007,92,2.843,94,2.446,95,2.446,96,2.616,97,2.616,98,2.446,99,3.587,100,2.446,107,6.354,110,3.359,111,2.616,112,1.936,114,2.812,123,2.812,134,2.528,142,2.616,317,2.924,376,4.633,377,4.294,378,4.006,382,2.473,383,2.924,389,3.913,390,2.812,391,3.336,408,3.717,485,1.269,1137,4.145,1138,5.287,1143,3.046,2495,5.309,2496,5.309,2497,5.309,2498,6.015,2499,6.819,2500,6.819,2501,6.819,2502,5.089,2503,6.015,2504,5.309]],["title/injectables/TasksService.html",[199,0.954,1138,2.76]],["body/injectables/TasksService.html",[0,0.165,3,0.059,4,0.052,5,0.052,8,0.171,9,0.589,10,1.806,12,0.802,14,2.628,16,2.038,17,0.405,19,0.862,20,0.01,21,0.705,22,0.227,23,0.468,26,1.118,30,0.886,31,0.159,33,1.678,35,0.564,36,0.606,37,0.848,38,0.244,39,0.564,40,0.961,42,1.039,49,0.065,50,1.646,51,1.306,55,3.11,58,1.292,60,1.174,62,1.956,74,2.881,76,1.88,77,0.891,79,0.005,80,0.005,112,1.067,129,2.354,139,1.612,140,1.612,142,1.442,196,1.501,199,0.973,200,1.16,203,1.509,206,3.828,208,3.418,215,1.826,216,1.895,221,1.936,222,1.576,235,1.193,252,2.286,272,1.127,294,1.494,307,2.286,319,3.496,342,1.612,360,2.757,377,3.534,382,0.961,408,2.049,414,1.509,419,2.286,435,1.262,485,1.07,521,1.612,555,3.95,569,2.962,651,2.582,655,2.049,656,1.839,657,1.755,659,3.135,660,4.343,661,2.582,664,2.049,674,2.184,687,4.059,689,2.354,691,2.582,692,3.95,693,3.602,694,3.95,695,2.582,696,2.582,698,1.839,827,2.807,965,2.962,973,3.135,1039,2.962,1082,2.776,1085,2.569,1127,3.95,1137,3.001,1138,2.814,1143,1.679,1168,3.602,1177,6.356,1178,6.356,1198,3.602,1200,2.354,1266,1.936,1267,5.281,1274,3.95,1293,2.354,1337,2.582,1340,2.582,1440,5.374,1455,3.342,1457,2.184,1458,2.962,1479,3.342,1493,4.9,1499,2.582,1504,2.354,1505,2.582,1506,2.582,1507,2.582,1672,4.797,1746,3.342,1777,3.602,1914,2.354,2085,2.354,2098,2.582,2106,2.582,2136,2.582,2158,3.602,2296,3.602,2323,3.602,2337,3.95,2498,5.374,2502,3.342,2503,3.95,2505,2.354,2506,4.478,2507,4.478,2508,4.478,2509,3.602,2510,6.925,2511,6.092,2512,6.925,2513,4.478,2514,2.927,2515,6.566,2516,2.927,2517,4.478,2518,4.478,2519,3.602,2520,2.927,2521,3.95,2522,5.439,2523,3.95,2524,2.927,2525,2.927,2526,2.927,2527,2.927,2528,2.927,2529,2.927,2530,2.927,2531,4.478,2532,6.092,2533,2.927,2534,3.95,2535,4.478,2536,4.478,2537,7.432,2538,4.478,2539,3.95,2540,4.478,2541,4.478,2542,1.55,2543,2.582,2544,2.582,2545,2.927,2546,2.927,2547,2.927,2548,2.927,2549,2.927,2550,4.478,2551,2.927,2552,2.582,2553,2.927,2554,2.927,2555,2.927,2556,2.927,2557,6.092,2558,2.354,2559,2.927,2560,1.755,2561,2.184,2562,2.582,2563,2.927,2564,2.927,2565,2.927,2566,2.927,2567,2.927,2568,2.927,2569,2.582,2570,2.927,2571,2.927,2572,2.927,2573,2.927,2574,2.927,2575,4.478]],["title/classes/TicketSystemSetupCommand.html",[0,0.247,411,3.278]],["body/classes/TicketSystemSetupCommand.html",[0,0.298,2,0.947,3,0.106,4,0.095,5,0.095,8,0.309,9,0.895,10,1.673,12,1.218,13,2.606,14,3.065,17,0.398,19,0.847,20,0.009,21,0.67,22,0.345,23,0.711,25,4.555,26,0.971,27,3.581,29,3.239,30,0.677,31,0.151,32,3.473,33,2.549,34,4.078,35,1.019,36,1.095,39,1.019,45,2.913,47,2.913,48,1.533,49,0.118,50,1.326,62,1.747,74,2.802,76,2.221,77,2.071,79,0.007,80,0.007,216,1.391,222,1.533,319,3.036,404,2.124,411,5.077,414,1.782,485,1.264,669,3.746,719,5.077,741,3.499,742,3.499,764,3.948,772,3.499,773,3.705,782,3.948,819,2.606,938,3.703,939,3.324,940,3.948,948,4.762,959,4.255,964,4.255,2085,5.472,2179,4.667,2182,4.667,2187,4.255,2197,4.667,2576,6.633,2577,4.667,2578,7.52,2579,5.291,2580,5.291,2581,5.291,2582,5.291,2583,4.667,2584,5.291,2585,5.077,2586,4.255,2587,5.291,2588,5.291,2589,4.667,2590,5.291,2591,4.667,2592,5.291,2593,5.291]],["title/classes/TimeOutCommand.html",[0,0.247,384,3.278]],["body/classes/TimeOutCommand.html",[0,0.225,2,0.715,3,0.08,4,0.071,5,0.071,8,0.234,9,0.74,10,1.45,12,1.008,13,1.968,14,2.823,17,0.329,19,0.701,20,0.009,21,0.665,22,0.286,23,0.588,25,4.061,26,0.733,27,2.68,29,2.68,30,0.511,31,0.166,32,2.873,33,2.109,34,3.374,35,1.084,36,0.827,38,0.468,39,0.769,45,2.2,46,2.395,47,2.2,48,1.158,49,0.089,50,1.411,58,1.194,60,1.363,62,1.915,70,2.295,74,2.981,76,2.364,77,1.714,79,0.006,80,0.006,139,2.2,140,2.2,196,2.136,206,4.447,208,4.096,215,1.629,216,2.201,222,1.631,238,3.94,294,3.951,360,1.677,384,4.201,445,2.2,485,0.955,616,2.116,656,3.537,657,2.395,668,2.642,669,3.1,672,4.311,674,4.201,678,3.213,679,2.981,697,2.796,698,2.51,699,2.796,713,2.773,739,2.796,741,2.642,742,2.642,751,2.981,760,2.981,772,2.642,773,1.968,782,2.981,820,3.523,821,3.523,822,3.523,823,3.523,830,3.213,863,2.51,938,2.796,939,2.51,940,2.981,964,3.213,965,2.642,998,2.51,1000,2.796,1327,2.796,1339,3.523,2016,4.954,2039,2.981,2046,2.981,2047,2.981,2149,2.642,2173,4.865,2188,6.242,2357,3.23,2460,3.213,2462,3.523,2463,3.523,2464,3.523,2471,3.523,2473,3.523,2519,4.528,2523,3.523,2542,2.116,2543,3.523,2558,3.213,2561,4.201,2562,4.965,2585,2.981,2586,3.213,2594,3.523,2595,6.518,2596,3.994,2597,3.994,2598,5.282,2599,3.994,2600,3.994,2601,3.994,2602,2.292,2603,3.23,2604,3.994,2605,3.994,2606,3.994,2607,7.077,2608,5.629,2609,6.518,2610,3.994,2611,6.518,2612,3.994,2613,3.523,2614,3.994,2615,3.523,2616,6.518,2617,3.994,2618,3.523,2619,3.523,2620,3.523,2621,3.523,2622,3.523,2623,3.994,2624,3.994,2625,3.994,2626,3.994,2627,5.629,2628,3.523,2629,3.523,2630,3.994,2631,3.994,2632,3.994,2633,3.994,2634,3.523,2635,3.994]],["title/classes/UnverifyByRoleCommand.html",[0,0.247,2636,3.533]],["body/classes/UnverifyByRoleCommand.html",[0,0.286,2,0.91,3,0.102,4,0.091,5,0.091,8,0.297,9,0.872,10,1.131,12,1.187,13,2.504,14,3.032,15,4.062,16,2.211,17,0.388,19,0.825,20,0.01,21,0.657,22,0.337,23,0.693,25,4.486,26,0.932,27,3.512,30,0.65,31,0.163,32,3.383,33,2.484,35,0.979,36,1.052,37,1.473,38,0.423,39,0.979,40,1.669,41,4.088,42,1.804,44,4.483,47,2.799,48,1.473,49,0.113,50,1.662,51,2.268,54,3.793,55,2.594,56,4.483,57,4.483,58,1.078,60,0.979,61,4.384,62,1.894,65,1.027,66,3.557,67,1.473,68,5.332,72,2.292,73,0.705,79,0.007,80,0.007,213,2.342,272,2.553,319,2.916,489,2.268,739,3.557,1299,4.483,2636,5.332,2637,6.507,2638,4.483,2639,6.629,2640,5.082,2641,5.082,2642,5.082,2643,6.629,2644,5.082,2645,5.082,2646,5.082,2647,5.082,2648,5.082,2649,5.082,2650,5.082,2651,5.082,2652,5.082,2653,5.082,2654,5.082,2655,5.082,2656,5.082,2657,5.082,2658,5.082]],["title/classes/UserBanEvent.html",[0,0.247,2659,2.52]],["body/classes/UserBanEvent.html",[0,0.43,2,0.687,3,0.077,4,0.069,5,0.069,8,0.224,9,0.719,12,1.141,17,0.429,19,0.681,20,0.009,21,0.487,22,0.373,23,0.571,30,0.491,31,0.11,38,0.319,49,0.17,65,1.804,67,2.539,70,3.457,73,1.278,79,0.006,80,0.006,112,1.994,202,1.216,203,2.795,213,3.622,218,3.826,220,1.61,231,2.467,280,3.711,307,1.957,435,1.581,501,2.393,505,2.896,512,4.163,514,1.957,517,4.669,521,3.011,526,4.865,599,4.382,680,2.2,713,2.694,819,1.889,2357,2.2,2542,2.896,2560,2.299,2602,3.138,2603,3.138,2659,3.138,2660,2.409,2661,4.859,2662,5.468,2663,3.834,2664,3.834,2665,3.834,2666,4.859,2667,2.536,2668,2.409,2669,2.2,2670,2.536,2671,3.617,2672,3.617,2673,3.617,2674,3.617,2675,3.138,2676,2.409]],["title/controllers/UserController.html",[81,1.48,2165,3.278]],["body/controllers/UserController.html",[0,0.14,3,0.05,4,0.045,5,0.045,8,0.145,9,0.519,10,1.832,12,0.445,14,1.788,17,0.379,19,0.806,20,0.009,21,0.577,22,0.368,23,0.677,26,1.188,30,0.828,31,0.163,33,1.478,35,0.479,36,0.515,37,0.721,38,0.207,39,0.479,42,0.883,48,0.721,49,0.056,50,0.989,55,3.105,58,0.837,60,1.396,62,2.129,65,1.687,66,1.741,67,2.446,73,1.208,74,1.318,76,1.657,79,0.004,80,0.004,81,0.838,83,0.907,85,1.184,86,1.27,88,1.37,89,2.944,90,0.932,91,1.427,112,0.907,139,1.37,140,1.37,196,2.403,203,1.329,206,2.479,208,1.563,216,1.993,221,1.645,222,1.143,230,1.563,234,2.737,235,1.014,246,1.491,247,1.857,248,1.857,252,1.27,253,1.491,254,1.491,255,1.563,256,1.645,257,2.365,258,1.491,259,1.014,260,1.741,263,3.823,294,1.27,348,1.657,404,0.776,414,1.88,435,1.728,463,1.857,482,1.563,485,1.842,492,1.563,530,1.427,548,4.894,549,6.201,550,6.201,551,4.488,554,3.173,561,1.645,564,5.457,565,5.457,571,2.944,572,1.857,573,2.194,579,1.427,582,1.857,584,5.207,585,4.832,586,3.823,587,2.944,588,2.264,599,3.491,600,4.488,606,3.906,609,4.324,610,2.001,611,2.001,615,2.194,616,2.09,631,1.37,659,2.762,660,2.609,679,1.857,680,2.264,713,1.225,782,1.857,819,1.225,827,1.146,867,3.659,870,1.427,871,2.194,872,2.194,873,1.741,886,2.939,921,3.659,922,3.659,1082,2.014,1102,2.194,1169,2.194,1279,3.48,1280,2.001,1308,2.194,1316,2.194,1317,2.194,1318,2.001,1411,3.202,1504,2.001,1697,4.324,1746,4.164,1759,2.194,1796,3.173,2016,3.432,2017,3.173,2099,3.48,2149,1.645,2165,2.944,2353,1.741,2354,1.857,2355,1.857,2460,2.001,2542,2.09,2560,2.939,2585,1.857,2586,2.001,2615,2.194,2618,2.194,2619,2.194,2620,2.194,2621,2.194,2634,2.194,2659,1.427,2668,2.479,2669,1.427,2675,1.427,2676,2.479,2677,2.194,2678,4.903,2679,4.903,2680,4.903,2681,4.903,2682,4.903,2683,2.488,2684,2.488,2685,2.488,2686,2.488,2687,2.488,2688,2.488,2689,2.488,2690,2.488,2691,2.488,2692,2.488,2693,2.488,2694,2.488,2695,4.903,2696,3.945,2697,3.945,2698,3.173,2699,2.488,2700,2.488,2701,2.488,2702,2.488,2703,3.945,2704,2.488,2705,2.488,2706,2.488,2707,2.488,2708,2.488,2709,2.488,2710,2.488,2711,2.488,2712,2.488,2713,2.488,2714,2.488,2715,2.488,2716,2.488,2717,2.488,2718,2.488,2719,2.488,2720,2.488,2721,2.488,2722,2.488,2723,5.58,2724,2.488,2725,2.488,2726,2.488,2727,2.488,2728,5.58,2729,5.58,2730,2.488,2731,2.488,2732,2.488,2733,2.488,2734,2.488,2735,2.488,2736,2.488,2737,2.488,2738,2.488,2739,3.945,2740,2.194,2741,2.488,2742,2.488,2743,2.488,2744,2.488,2745,3.945,2746,2.488,2747,2.488,2748,2.488,2749,2.488,2750,2.488,2751,2.488,2752,2.488,2753,2.488,2754,2.488]],["title/classes/UserInfoUiCommand.html",[0,0.247,398,3.278]],["body/classes/UserInfoUiCommand.html",[0,0.236,2,0.751,3,0.162,4,0.075,5,0.075,8,0.245,9,0.766,10,1.749,12,1.042,13,2.065,14,2.866,15,3.206,16,2.28,17,0.391,19,0.833,20,0.009,21,0.718,22,0.367,23,0.699,26,0.769,27,3.185,29,1.996,30,0.745,31,0.145,32,2.972,33,2.182,35,0.807,36,0.868,37,1.215,38,0.349,39,0.807,40,1.376,45,2.308,46,2.513,49,0.094,50,1.459,51,1.871,58,1.667,60,1.514,62,2.11,64,2.773,65,1.589,67,1.687,73,1.091,74,2.22,76,1.76,77,2.037,79,0.006,80,0.006,196,1.607,215,2.727,216,1.102,222,1.215,231,1.488,249,2.405,278,2.934,327,2.519,342,3.206,353,3.697,398,4.345,404,2.605,414,1.412,419,2.14,435,0.868,588,3.341,656,3.658,657,2.513,668,2.773,669,3.684,672,4.78,674,4.345,686,2.934,697,4.075,698,2.634,773,2.065,1082,2.972,1295,3.372,1311,3.372,1726,3.697,1800,3.697,2006,3.372,2175,3.372,2364,5.814,2365,3.372,2366,5.135,2368,5.135,2369,6.375,2372,3.697,2374,5.9,2628,3.697,2755,5.822,2756,4.192,2757,5.822,2758,4.192,2759,5.822,2760,4.192,2761,4.192,2762,4.192,2763,4.192,2764,4.192,2765,4.192,2766,4.192,2767,4.192,2768,4.192,2769,4.192,2770,4.192,2771,3.697,2772,4.192,2773,4.192,2774,4.192,2775,4.192,2776,4.192,2777,4.192,2778,4.192,2779,4.192,2780,4.192]],["title/classes/UserKickEvent.html",[0,0.247,2669,2.52]],["body/classes/UserKickEvent.html",[0,0.43,2,0.687,3,0.077,4,0.069,5,0.069,8,0.224,9,0.719,12,1.141,17,0.429,19,0.681,20,0.009,21,0.487,22,0.373,23,0.571,30,0.491,31,0.11,38,0.319,49,0.17,65,1.804,67,2.539,70,3.457,73,1.278,79,0.006,80,0.006,112,1.994,202,1.216,203,2.795,213,3.622,218,3.826,220,1.61,231,2.467,280,3.711,307,1.957,435,1.581,501,2.393,505,2.896,512,4.163,514,1.957,517,4.669,521,3.011,526,4.865,599,4.382,680,2.2,713,2.694,819,1.889,2357,2.2,2542,2.896,2560,2.299,2602,3.138,2603,3.138,2659,2.2,2660,2.409,2661,4.859,2666,4.859,2667,2.536,2668,2.409,2669,3.138,2670,2.536,2671,3.617,2672,3.617,2673,3.617,2674,3.617,2675,3.138,2676,2.409,2781,5.468,2782,3.834,2783,3.834,2784,3.834]],["title/modules/UserModule.html",[92,1.519,108,3.074]],["body/modules/UserModule.html",[0,0.31,3,0.154,4,0.099,5,0.099,16,2.402,20,0.009,31,0.167,35,1.476,36,1.14,38,0.458,40,1.808,49,0.123,79,0.007,80,0.007,83,2.545,92,2.983,94,2.537,95,2.537,96,2.713,97,2.713,98,2.537,99,3.648,100,3.53,108,6.169,110,3.438,111,2.713,112,2.008,114,2.917,123,2.917,196,2.344,317,3.032,485,1.316,633,3.323,827,3.216,998,4.386,1082,3.562,1690,5.614,1785,5.209,1865,5.384,2292,5.719,2306,4.857,2785,4.857,2786,4.857,2787,5.507,2788,5.507,2789,6.979,2790,6.979,2791,6.156,2792,6.979,2793,5.507]],["title/classes/UserPurgeEvent.html",[0,0.247,2675,2.52]],["body/classes/UserPurgeEvent.html",[0,0.43,2,0.687,3,0.077,4,0.069,5,0.069,8,0.224,9,0.719,12,1.141,17,0.429,19,0.681,20,0.009,21,0.487,22,0.373,23,0.571,30,0.491,31,0.11,38,0.319,49,0.17,65,1.804,67,2.539,70,3.457,73,1.278,79,0.006,80,0.006,112,1.994,202,1.216,203,2.795,213,3.622,218,3.826,220,1.61,231,2.467,280,3.711,307,1.957,435,1.581,501,2.393,505,2.896,512,4.163,514,1.957,517,4.669,521,3.011,526,4.865,599,4.382,680,2.2,713,2.694,819,1.889,2357,2.2,2542,2.896,2560,2.299,2602,3.138,2603,3.138,2659,2.2,2660,2.409,2661,4.859,2666,4.859,2667,2.536,2668,2.409,2669,2.2,2670,2.536,2671,3.617,2672,3.617,2673,3.617,2674,3.617,2675,3.657,2676,2.409,2794,5.468,2795,3.834,2796,3.834,2797,3.834]],["title/classes/UserSendDMFailedEvent.html",[0,0.247,2602,2.52]],["body/classes/UserSendDMFailedEvent.html",[0,0.43,2,0.687,3,0.077,4,0.069,5,0.069,8,0.224,9,0.719,12,1.141,17,0.429,19,0.681,20,0.009,21,0.487,22,0.373,23,0.571,30,0.491,31,0.11,38,0.319,49,0.17,65,1.804,67,2.539,70,3.603,73,1.275,79,0.006,80,0.006,112,1.994,202,1.216,203,2.795,213,3.622,218,3.826,220,1.61,231,2.467,280,3.64,307,1.957,435,1.581,501,2.393,505,2.896,512,4.163,514,1.957,517,4.669,521,3.011,526,4.865,599,4.382,680,2.2,713,2.694,819,1.889,2357,2.2,2542,2.896,2560,2.299,2602,3.657,2603,3.138,2659,2.2,2660,2.409,2661,4.859,2666,4.859,2667,2.536,2668,2.409,2669,2.2,2670,2.536,2671,3.617,2672,3.617,2673,3.617,2674,3.617,2675,3.138,2676,2.409,2798,5.468,2799,3.834,2800,3.834,2801,3.834]],["title/classes/UserTimeOutDto.html",[0,0.247,2598,3.278]],["body/classes/UserTimeOutDto.html",[0,0.38,2,0.761,3,0.085,4,0.076,5,0.076,8,0.249,17,0.394,20,0.009,22,0.425,26,1.237,31,0.146,35,0.819,36,0.88,39,0.819,49,0.095,58,1.247,60,1.298,73,1.059,77,2.324,79,0.006,80,0.006,196,2.311,202,1.308,214,1.898,215,2.748,216,1.118,231,2.088,235,2.965,259,3.219,280,3.315,293,4.116,294,2.17,303,1.898,342,2.341,348,3.315,360,3.315,404,1.835,485,1.611,599,4.53,684,3.42,710,4.73,835,5.03,843,3.173,844,4.73,885,5.186,959,3.42,1106,3.173,1457,4.388,1950,3.42,1986,3.42,2016,5.933,2039,5.892,2046,5.03,2047,5.03,2050,3.75,2156,3.75,2157,4.73,2444,5.186,2509,3.42,2519,3.42,2521,5.186,2558,3.42,2598,4.388,2622,3.75,2740,3.75,2802,5.427,2803,3.75,2804,7.272,2805,4.252,2806,5.88,2807,5.88,2808,5.88,2809,5.88,2810,5.88,2811,5.88,2812,5.88,2813,4.252,2814,4.252,2815,4.252,2816,4.252,2817,4.252,2818,4.252,2819,3.75,2820,4.252,2821,4.252,2822,3.75,2823,4.252,2824,3.75,2825,4.252,2826,4.252,2827,5.88,2828,5.88,2829,5.88,2830,4.252,2831,4.252,2832,4.252,2833,4.252,2834,4.252,2835,4.252,2836,4.252,2837,4.252,2838,4.252,2839,4.252,2840,5.88,2841,4.252,2842,4.252,2843,4.252,2844,4.252,2845,4.252]],["title/classes/UserTimeOutEvent.html",[0,0.247,2542,2.326]],["body/classes/UserTimeOutEvent.html",[0,0.428,2,0.677,3,0.076,4,0.068,5,0.068,8,0.221,9,0.712,12,1.132,17,0.444,19,0.674,20,0.009,21,0.482,22,0.386,23,0.566,30,0.484,31,0.109,38,0.315,49,0.17,65,1.802,67,2.534,70,3.448,73,1.277,79,0.005,80,0.005,112,1.974,202,1.204,203,2.786,213,3.607,218,3.812,220,1.587,231,2.779,280,3.704,307,1.93,435,1.574,501,2.383,505,2.867,512,4.146,514,1.93,517,4.657,521,2.981,526,4.852,599,4.745,680,2.169,713,2.667,819,1.863,2357,2.169,2542,3.349,2560,2.266,2602,3.106,2603,3.106,2659,2.169,2660,2.376,2661,4.833,2666,4.833,2667,2.501,2668,2.376,2669,2.169,2670,2.501,2671,3.58,2672,3.58,2673,3.58,2674,3.58,2675,3.106,2676,2.376,2846,5.413,2847,3.781,2848,3.781,2849,3.781,2850,3.781]],["title/classes/UserTimeOutFailedEvent.html",[0,0.247,2603,2.52]],["body/classes/UserTimeOutFailedEvent.html",[0,0.426,2,0.668,3,0.075,4,0.067,5,0.067,8,0.218,9,0.705,12,1.123,17,0.456,19,0.667,20,0.009,21,0.478,22,0.396,23,0.56,30,0.477,31,0.108,38,0.31,49,0.169,65,1.799,67,2.529,70,3.591,73,1.276,79,0.005,80,0.005,112,1.954,202,1.192,203,2.778,213,3.592,218,3.798,220,1.566,231,2.768,280,3.698,307,1.903,435,1.567,501,2.373,505,2.839,512,4.129,514,1.903,517,4.645,521,2.951,526,4.84,599,4.731,680,2.139,713,2.64,819,1.837,2357,2.139,2542,2.839,2560,2.235,2602,3.075,2603,3.6,2659,2.139,2660,2.343,2661,4.806,2666,4.806,2667,2.466,2668,2.343,2669,2.139,2670,2.466,2671,3.545,2672,3.545,2673,3.545,2674,3.545,2675,3.075,2676,2.343,2851,5.36,2852,3.728,2853,3.728,2854,3.728,2855,3.728,2856,3.728]],["title/classes/UserToUser.html",[0,0.247,2454,3.278]],["body/classes/UserToUser.html",[0,0.302,2,0.959,3,0.108,4,0.096,5,0.096,8,0.313,17,0.401,20,0.009,22,0.405,26,1.258,31,0.152,35,1.321,36,1.109,39,1.032,49,0.12,60,1.032,73,0.952,77,2.428,79,0.007,80,0.007,196,2.42,202,1.526,235,3.084,259,3.252,348,2.88,485,1.639,497,5.295,768,6.784,835,3.998,841,5.646,843,3.998,948,3.75,2039,5.119,2046,3.998,2047,3.998,2142,4.309,2144,3.998,2149,4.536,2428,4.309,2436,4.309,2450,5.517,2454,5.119,2466,6.085,2467,4.309,2468,4.309,2470,4.309,2585,5.646,2591,6.049,2802,5.646,2819,4.725,2857,4.309,2858,5.357,2859,7.272,2860,7.563,2861,5.357,2862,7.565,2863,5.357,2864,5.357,2865,6.049,2866,5.357,2867,4.309,2868,4.725,2869,5.357,2870,5.357,2871,5.357,2872,5.357]],["title/coverage.html",[2873,4.487]],["body/coverage.html",[0,0.505,1,1.818,3,0.045,5,0.04,6,1.994,7,1.994,16,0.639,20,0.009,22,0.233,72,0.782,79,0.004,80,0.004,81,2.532,82,1.687,84,1.994,86,1.154,98,1.041,109,1.582,134,1.74,142,1.8,196,1.008,199,1.783,201,1.994,203,1.779,216,0.594,218,1.076,220,0.949,224,1.687,225,1.994,229,1.582,241,1.495,243,1.687,246,1.355,249,1.297,250,1.42,253,1.355,254,1.355,255,2.296,257,1.355,258,2.19,259,1.49,285,1.994,286,1.994,305,1.495,306,1.582,313,1.818,318,1.994,324,1.582,360,3.876,363,2.639,364,2.558,366,1.994,367,1.994,376,1.245,377,1.154,378,1.076,380,1.687,382,2.508,384,1.687,386,1.687,389,3.031,390,2.798,392,1.687,395,1.687,398,1.687,401,1.687,402,1.582,403,1.687,404,1.435,405,1.687,409,1.687,411,1.687,414,0.761,415,3.432,435,0.952,457,1.582,488,1.495,489,1.009,499,1.495,500,3.432,514,1.154,515,1.495,522,1.495,528,1.687,529,1.994,571,1.687,572,1.687,575,1.582,576,2.727,577,2.558,578,2.558,620,3.898,638,1.687,648,1.994,649,1.994,699,1.582,700,1.994,701,1.994,720,1.994,721,1.994,732,1.687,735,1.687,752,1.687,754,1.495,833,1.994,834,1.994,845,1.994,846,1.994,851,1.687,852,2.727,853,2.939,858,1.582,867,1.687,868,1.994,869,1.994,886,1.355,887,3.699,921,1.687,922,1.687,924,1.582,925,2.939,926,1.818,927,2.939,935,1.687,936,3.042,938,1.582,939,3.644,968,1.582,969,3.942,1006,1.582,1024,1.582,1026,1.582,1032,1.994,1039,4.495,1044,1.818,1045,1.994,1059,1.818,1060,1.818,1075,2.939,1083,2.096,1086,1.687,1087,3.835,1088,3.719,1089,2.939,1095,1.582,1103,1.495,1118,1.994,1119,2.939,1137,1.113,1138,1.42,1144,2.939,1189,1.687,1190,1.994,1213,1.582,1214,2.939,1215,2.558,1220,1.687,1223,1.582,1224,1.994,1225,1.994,1248,1.687,1256,1.818,1257,1.355,1259,1.818,1260,2.939,1262,1.818,1351,1.582,1352,1.818,1363,1.687,1366,1.818,1367,1.818,1368,1.818,1403,1.582,1410,1.818,1411,1.297,1414,1.687,1435,1.994,1456,1.687,1564,1.687,1565,1.994,1571,1.687,1589,1.994,1625,1.582,1662,1.687,1663,1.994,1669,1.687,1670,4.248,1690,1.818,1739,1.818,1772,3.559,1774,2.939,1786,1.994,1789,1.818,1811,1.818,1812,1.994,1813,1.994,1821,1.687,1822,3.219,1823,1.994,1837,1.495,1840,1.687,1856,2.939,1863,1.582,1864,1.582,1865,1.355,1882,1.994,1948,1.994,1966,4.328,2022,1.994,2023,1.994,2030,1.994,2033,1.994,2035,1.687,2036,1.994,2037,1.994,2051,1.994,2052,1.994,2077,1.818,2078,1.818,2079,1.818,2080,1.818,2164,1.687,2165,1.687,2170,1.994,2171,1.994,2190,1.994,2200,1.994,2212,1.994,2225,1.994,2226,1.994,2227,1.994,2232,1.818,2233,1.994,2237,2.939,2292,1.687,2293,1.994,2315,1.994,2322,1.994,2353,1.582,2354,2.727,2355,2.727,2362,1.687,2364,2.939,2365,2.939,2376,1.994,2386,1.994,2418,1.994,2454,1.687,2505,2.939,2542,1.197,2576,1.994,2577,1.994,2594,1.994,2598,1.687,2602,1.297,2603,1.297,2636,1.818,2637,1.994,2638,1.994,2659,1.297,2660,3.898,2669,1.297,2675,1.297,2677,1.994,2802,3.432,2803,1.994,2857,2.939,2867,1.818,2873,1.687,2874,2.26,2875,2.26,2876,8.442,2877,6.796,2878,7.373,2879,2.26,2880,2.26,2881,5.799,2882,5.799,2883,8.263,2884,1.994,2885,1.994,2886,7.373,2887,4.056,2888,4.056,2889,8.402,2890,3.223,2891,1.994,2892,1.994,2893,2.26,2894,5.799,2895,2.26,2896,3.654,2897,2.26,2898,2.26,2899,2.26,2900,2.26,2901,2.26,2902,1.994,2903,2.26,2904,2.26,2905,7.846,2906,3.654,2907,2.26,2908,2.26,2909,1.994,2910,1.994,2911,1.994,2912,4.659,2913,1.994,2914,7.638,2915,3.223,2916,1.994,2917,2.26,2918,3.654,2919,6.529,2920,6.203,2921,1.994,2922,1.994,2923,4.664,2924,1.994,2925,1.994,2926,2.26,2927,2.26,2928,2.26]],["title/dependencies.html",[95,2.436,2929,3.227]],["body/dependencies.html",[0,0.412,20,0.009,22,0.301,35,1.409,36,1.515,38,0.609,39,1.143,42,2.107,79,0.007,80,0.007,90,2.224,95,2.735,117,3.926,129,4.775,139,3.269,140,3.269,303,2.649,631,3.269,1063,4.775,1106,4.43,1265,5.236,1577,4.775,1838,3.926,1844,4.43,1859,3.926,1869,4.775,1902,5.236,1957,6.377,2930,5.936,2931,5.936,2932,5.936,2933,7.929,2934,5.936,2935,5.936,2936,7.315,2937,5.936,2938,5.936,2939,5.936,2940,5.936,2941,5.936,2942,5.936,2943,5.936,2944,5.936,2945,5.936,2946,5.936,2947,5.236,2948,5.936,2949,5.936,2950,5.936,2951,5.936,2952,5.936,2953,5.936,2954,5.936,2955,5.936,2956,5.936,2957,5.936,2958,5.936,2959,5.936]],["title/miscellaneous/functions.html",[2960,2.299,2961,4.664]],["body/miscellaneous/functions.html",[0,0.343,8,0.262,12,1.241,19,0.999,20,0.009,21,0.715,22,0.445,23,0.839,30,1.106,39,1.335,48,1.299,58,0.951,73,1.113,79,0.006,80,0.006,98,3.192,112,1.635,203,2.62,215,2.486,220,2.56,228,2.469,234,1.592,246,3.655,290,2.688,404,1.399,414,2.334,419,3.537,435,0.928,445,2.469,485,1.859,538,3.606,569,4.583,571,4.551,572,3.346,607,4.662,633,3.82,742,4.033,764,3.346,773,2.209,850,3.954,938,4.85,939,2.817,961,3.954,1039,5.144,1085,2.572,1088,2.688,1168,3.606,1271,3.346,1327,4.85,1362,3.606,1366,4.904,1367,3.606,1368,4.904,1458,4.583,1478,3.346,1479,3.346,1809,3.606,1985,3.954,2075,6.559,2077,4.904,2080,4.904,2129,5.378,2148,3.954,2534,6.86,2561,3.346,2902,3.954,2909,3.954,2910,5.378,2911,5.378,2921,5.378,2922,5.378,2923,5.981,2924,3.954,2925,5.378,2960,2.817,2961,3.954,2962,4.483,2963,4.483,2964,4.483,2965,4.483,2966,6.112,2967,4.483,2968,4.483,2969,6.929,2970,6.929,2971,4.483,2972,4.483,2973,3.954,2974,4.483,2975,4.483,2976,4.483,2977,4.483,2978,4.483,2979,6.097,2980,4.483,2981,6.097,2982,4.483,2983,6.097,2984,4.483,2985,4.483,2986,6.097,2987,6.112,2988,4.483,2989,4.483,2990,4.483,2991,3.954,2992,4.483,2993,4.483,2994,7.436,2995,6.097,2996,4.483,2997,4.483,2998,6.929,2999,6.097,3000,4.483]],["title/index.html",[8,0.214,3001,3.227,3002,3.227]],["body/index.html",[4,0.105,20,0.009,79,0.007,80,0.007,430,4.525,485,1.402,664,4.106,780,4.718,998,3.686,1031,4.378,1041,4.718,1467,5.174,2502,6.441,2589,6.405,2873,4.378,3003,5.866,3004,5.866,3005,7.261,3006,5.866,3007,5.866,3008,5.866,3009,5.866,3010,5.866,3011,7.886,3012,5.174,3013,5.866,3014,5.866,3015,5.174,3016,8.747,3017,5.866,3018,5.866,3019,5.174,3020,5.866,3021,6.405,3022,5.866,3023,5.866,3024,5.866,3025,5.866,3026,7.261,3027,7.261,3028,5.866,3029,5.866,3030,5.866,3031,6.405,3032,5.174,3033,5.866,3034,5.866,3035,5.866,3036,5.866,3037,4.718,3038,5.866,3039,5.866,3040,5.866,3041,5.866,3042,5.866,3043,5.866,3044,4.718,3045,5.866,3046,5.866,3047,5.866,3048,5.866,3049,5.866,3050,5.866,3051,4.378]],["title/classes/initGuildCommand.html",[0,0.247,395,3.278]],["body/classes/initGuildCommand.html",[0,0.171,2,0.543,3,0.061,4,0.054,5,0.054,8,0.177,9,0.605,10,1.562,12,0.824,16,1.755,17,0.325,19,0.692,20,0.01,21,0.686,22,0.282,23,0.581,25,3.562,26,0.845,27,2.648,29,2.956,30,0.589,31,0.125,32,2.349,34,1.819,35,0.585,36,0.628,37,0.879,38,0.253,39,0.585,40,0.996,45,1.671,46,1.819,47,1.671,48,0.879,49,0.068,50,0.761,51,1.354,55,2.349,58,0.644,60,1.606,62,2.22,65,1.731,77,2.138,79,0.005,80,0.005,197,3.721,216,2.064,222,0.879,272,2.895,348,1.274,355,5.262,395,3.435,414,2.248,482,1.907,485,0.725,489,2.978,492,3.9,503,3.406,610,4.993,611,4.993,668,3.044,669,3.867,672,3.678,697,4.345,724,4.905,728,3.702,741,2.007,754,2.007,770,4.06,772,3.044,773,3.058,797,3.702,827,2.121,1000,3.222,1010,1.819,1173,2.265,1257,2.759,1313,2.677,2116,4.905,2187,3.702,2248,5.885,2387,4.06,2388,4.06,2389,2.677,2391,4.06,2392,4.06,2393,4.06,2394,4.06,2395,4.06,2479,4.06,2480,6.046,2494,6.63,2583,7.511,2884,5.475,2885,2.677,2960,1.907,3032,2.677,3052,4.603,3053,3.035,3054,3.035,3055,4.603,3056,3.035,3057,3.035,3058,3.035,3059,6.207,3060,6.207,3061,3.035,3062,6.672,3063,3.035,3064,6.672,3065,3.035,3066,3.035,3067,3.035,3068,3.035,3069,4.603,3070,3.035,3071,6.207,3072,7.517,3073,7.517,3074,7.517,3075,3.035,3076,4.603,3077,4.603,3078,3.035,3079,3.035,3080,4.603,3081,3.035,3082,3.035,3083,4.603,3084,3.035,3085,3.035,3086,4.603,3087,3.035,3088,3.035,3089,4.603,3090,3.035,3091,3.035,3092,4.603,3093,3.035,3094,3.035,3095,3.035,3096,4.603,3097,3.035,3098,3.035,3099,4.603,3100,4.603,3101,4.603,3102,4.603,3103,3.035,3104,3.035,3105,3.035,3106,4.603,3107,7.517,3108,3.035,3109,3.035]],["title/license.html",[3001,3.227,3002,3.227,3051,2.731]],["body/license.html",[0,0.05,4,0.143,5,0.029,9,0.116,17,0.052,20,0.004,29,1.062,31,0.018,50,0.221,58,0.187,79,0.002,80,0.002,112,0.321,196,1.59,212,0.617,213,0.406,216,1.125,230,1.014,231,0.573,259,1.125,272,0.859,280,0.37,293,0.617,294,0.45,305,0.583,307,1.409,320,1.423,361,0.777,363,2.276,365,1.562,403,0.658,430,3.116,452,1.654,459,3.181,470,2.493,491,2.06,560,0.617,578,2.531,585,0.658,588,0.506,607,3.893,631,0.888,633,2.496,634,1.129,636,0.434,662,2.401,664,3.525,689,1.298,716,0.617,759,1.204,773,0.434,781,0.777,799,2.22,813,2.127,836,0.777,837,1.968,841,1.204,893,2.127,909,1.968,965,1.067,973,3.367,998,2.272,1000,0.617,1022,0.709,1027,1.204,1034,0.709,1037,0.777,1040,1.423,1047,6.333,1115,0.709,1217,1.825,1267,0.709,1309,4.624,1310,1.968,1311,1.795,1412,0.777,1455,2.06,1456,0.658,1457,1.204,1458,1.476,1476,1.423,1478,1.204,1479,3.589,1493,0.709,1521,1.423,1649,4.368,1746,3.759,1776,0.777,1777,2.22,1785,2.06,1807,0.709,1830,5.652,1926,0.777,1931,4.442,1943,0.777,1967,0.777,1976,0.777,1982,3.189,1986,2.908,1993,0.709,2019,1.204,2142,0.709,2157,0.709,2158,0.709,2296,0.709,2301,0.777,2323,1.298,2334,4.442,2339,1.423,2358,0.709,2465,1.298,2466,2.587,2480,2.22,2502,2.961,2509,3.191,2539,5.542,2552,0.777,2561,0.658,2569,1.968,2613,1.968,2629,3.775,2698,5.223,2771,1.423,2791,1.423,2822,0.777,2824,1.968,2873,1.204,2916,1.423,2947,0.777,2973,2.434,2987,1.423,2991,1.423,3015,2.434,3019,0.777,3021,0.777,3031,1.968,3037,1.795,3044,1.298,3051,6.498,3110,6.041,3111,5.906,3112,6.679,3113,6.564,3114,0.881,3115,0.881,3116,2.231,3117,7.119,3118,3.217,3119,5.906,3120,6.763,3121,3.217,3122,0.881,3123,0.881,3124,3.217,3125,6.843,3126,2.231,3127,2.231,3128,5.242,3129,2.231,3130,0.881,3131,2.231,3132,0.881,3133,0.881,3134,1.613,3135,5.242,3136,3.217,3137,3.967,3138,2.76,3139,1.613,3140,5.602,3141,4.28,3142,0.881,3143,0.881,3144,3.616,3145,1.613,3146,0.881,3147,0.881,3148,0.881,3149,5.036,3150,7.758,3151,2.231,3152,0.881,3153,0.881,3154,2.76,3155,4.559,3156,0.881,3157,4.559,3158,0.881,3159,3.217,3160,0.881,3161,0.881,3162,2.76,3163,0.881,3164,5.76,3165,0.881,3166,0.881,3167,0.881,3168,4.809,3169,2.231,3170,5.036,3171,3.217,3172,5.242,3173,0.881,3174,1.613,3175,0.881,3176,0.881,3177,2.231,3178,0.881,3179,0.881,3180,0.881,3181,5.036,3182,0.881,3183,1.613,3184,0.881,3185,0.881,3186,2.76,3187,0.881,3188,1.613,3189,0.881,3190,0.881,3191,2.231,3192,4.559,3193,6.041,3194,0.881,3195,3.775,3196,4.28,3197,0.881,3198,2.231,3199,0.881,3200,0.881,3201,0.881,3202,3.616,3203,2.76,3204,2.231,3205,1.613,3206,0.881,3207,2.76,3208,0.881,3209,2.231,3210,0.881,3211,1.613,3212,1.613,3213,2.231,3214,7.791,3215,0.881,3216,7.237,3217,5.43,3218,3.217,3219,3.217,3220,3.616,3221,2.231,3222,0.881,3223,2.231,3224,6.283,3225,1.613,3226,5.242,3227,0.881,3228,0.881,3229,0.881,3230,8.644,3231,0.881,3232,0.881,3233,1.613,3234,3.616,3235,0.881,3236,1.613,3237,0.881,3238,4.809,3239,0.881,3240,2.76,3241,0.881,3242,1.613,3243,7.724,3244,2.231,3245,4.559,3246,2.76,3247,0.881,3248,1.613,3249,2.231,3250,4.559,3251,4.809,3252,2.76,3253,0.881,3254,2.76,3255,1.613,3256,2.76,3257,2.76,3258,0.881,3259,2.231,3260,6.918,3261,1.613,3262,0.881,3263,4.28,3264,0.881,3265,3.616,3266,5.76,3267,2.231,3268,1.613,3269,3.967,3270,5.036,3271,3.616,3272,0.881,3273,1.613,3274,0.881,3275,0.881,3276,3.967,3277,0.881,3278,5.43,3279,1.613,3280,0.881,3281,0.881,3282,2.231,3283,0.881,3284,0.881,3285,0.881,3286,0.881,3287,2.231,3288,4.28,3289,2.76,3290,0.881,3291,0.881,3292,0.881,3293,1.613,3294,4.809,3295,0.881,3296,1.613,3297,0.881,3298,0.881,3299,2.231,3300,2.231,3301,3.967,3302,2.231,3303,2.231,3304,0.881,3305,0.881,3306,3.217,3307,3.217,3308,3.616,3309,0.881,3310,0.881,3311,1.613,3312,2.231,3313,0.881,3314,0.881,3315,0.881,3316,0.881,3317,0.881,3318,6.988,3319,2.231,3320,4.28,3321,0.881,3322,3.616,3323,1.613,3324,2.76,3325,0.881,3326,0.881,3327,1.613,3328,1.613,3329,2.76,3330,0.881,3331,0.881,3332,0.881,3333,0.881,3334,1.613,3335,3.217,3336,0.881,3337,1.613,3338,0.881,3339,0.881,3340,3.217,3341,2.76,3342,0.881,3343,2.76,3344,2.76,3345,0.881,3346,3.967,3347,2.76,3348,0.881,3349,3.217,3350,0.881,3351,1.613,3352,0.881,3353,0.881,3354,1.613,3355,0.881,3356,0.881,3357,0.881,3358,2.231,3359,2.231,3360,3.616,3361,0.881,3362,1.613,3363,0.881,3364,1.613,3365,1.613,3366,1.613,3367,0.881,3368,5.43,3369,1.613,3370,0.881,3371,0.881,3372,0.881,3373,0.881,3374,0.881,3375,0.881,3376,0.881,3377,2.231,3378,0.881,3379,5.76,3380,2.231,3381,0.881,3382,0.881,3383,0.881,3384,0.881,3385,3.217,3386,3.616,3387,0.881,3388,0.881,3389,2.231,3390,0.881,3391,0.881,3392,2.76,3393,0.881,3394,0.881,3395,0.881,3396,0.881,3397,0.777,3398,0.881,3399,0.881,3400,1.613,3401,0.881,3402,2.231,3403,0.881,3404,0.881,3405,1.613,3406,0.881,3407,0.881,3408,0.881,3409,0.881,3410,0.881,3411,1.613,3412,1.613,3413,1.613,3414,4.559,3415,0.881,3416,3.616,3417,0.881,3418,0.881,3419,1.613,3420,2.231,3421,2.231,3422,2.76,3423,2.76,3424,2.76,3425,0.881,3426,3.217,3427,0.881,3428,2.231,3429,2.231,3430,0.881,3431,1.613,3432,0.881,3433,1.613,3434,3.217,3435,1.613,3436,2.76,3437,2.76,3438,2.231,3439,5.602,3440,3.217,3441,0.881,3442,0.881,3443,2.231,3444,3.967,3445,1.613,3446,0.881,3447,0.881,3448,0.881,3449,0.881,3450,2.231,3451,0.881,3452,0.881,3453,0.881,3454,2.231,3455,0.881,3456,0.881,3457,1.613,3458,0.881,3459,0.881,3460,1.613,3461,0.881,3462,2.231,3463,0.881,3464,0.881,3465,2.231,3466,1.613,3467,3.616,3468,6.494,3469,2.231,3470,1.613,3471,1.613,3472,1.613,3473,1.613,3474,2.76,3475,1.613,3476,0.881,3477,0.881,3478,0.881,3479,0.881,3480,0.881,3481,3.616,3482,1.613,3483,0.881,3484,0.881,3485,0.881,3486,0.881,3487,1.613,3488,0.881,3489,1.613,3490,0.881,3491,3.217,3492,0.881,3493,4.28,3494,0.881,3495,5.036,3496,1.613,3497,0.881,3498,0.881,3499,0.881,3500,0.881,3501,0.881,3502,0.881,3503,1.613,3504,0.881,3505,2.231,3506,3.217,3507,2.76,3508,1.613,3509,0.881,3510,0.881,3511,0.881,3512,0.881,3513,0.881,3514,1.613,3515,0.881,3516,0.881,3517,0.881,3518,2.76,3519,0.881,3520,1.613,3521,0.881,3522,1.613,3523,0.881,3524,0.881,3525,2.231,3526,0.881,3527,0.881,3528,0.881,3529,0.881,3530,0.881,3531,0.881,3532,0.881,3533,0.881,3534,0.881,3535,0.881,3536,2.231,3537,0.881,3538,0.881,3539,0.881,3540,0.881,3541,0.881,3542,3.217,3543,0.881,3544,0.881,3545,0.881,3546,0.881,3547,0.881,3548,0.881,3549,0.881,3550,0.881,3551,0.881,3552,0.881,3553,0.881,3554,3.967,3555,2.231,3556,0.881,3557,2.76,3558,0.881,3559,0.881,3560,2.231,3561,0.881,3562,0.881,3563,2.231,3564,0.881,3565,1.613,3566,0.881,3567,0.881,3568,0.881,3569,0.881,3570,0.881,3571,0.881,3572,0.881,3573,0.881,3574,0.881,3575,0.881,3576,0.881,3577,0.881,3578,1.613,3579,1.613,3580,0.881,3581,0.881,3582,2.76,3583,0.881,3584,2.231,3585,1.613,3586,0.881,3587,1.613,3588,2.231,3589,2.231,3590,0.881,3591,1.613,3592,0.881,3593,2.231,3594,3.967,3595,0.881,3596,1.613,3597,1.613,3598,0.881,3599,0.881,3600,0.881,3601,0.881,3602,0.881,3603,0.881,3604,1.613,3605,0.881,3606,2.76,3607,2.231,3608,0.881,3609,3.217,3610,0.881,3611,0.881,3612,0.881,3613,0.881,3614,0.881,3615,0.881,3616,1.613,3617,1.613,3618,1.613,3619,2.231,3620,0.881,3621,1.613,3622,2.231,3623,0.881,3624,1.613,3625,0.881,3626,1.613,3627,0.881,3628,0.881,3629,1.613,3630,6.679,3631,2.231,3632,0.881,3633,3.217,3634,4.809,3635,2.231,3636,0.881,3637,0.881,3638,0.881,3639,2.76,3640,0.881,3641,2.231,3642,0.881,3643,0.881,3644,0.881,3645,0.881,3646,0.881,3647,0.881,3648,0.881,3649,2.76,3650,1.613,3651,0.881,3652,0.881,3653,2.231,3654,0.881,3655,1.613,3656,2.231,3657,1.613,3658,0.881,3659,0.881,3660,0.881,3661,0.881,3662,1.613,3663,2.231,3664,0.881,3665,0.881,3666,1.613,3667,0.881,3668,1.613,3669,0.881,3670,0.881,3671,0.881,3672,0.881,3673,0.881,3674,0.881,3675,2.231,3676,1.613,3677,0.881,3678,0.881,3679,0.881,3680,2.76,3681,0.881,3682,2.231,3683,0.881,3684,0.881,3685,0.881,3686,1.613,3687,0.881,3688,0.881,3689,0.881,3690,2.231,3691,1.613,3692,1.613,3693,0.881,3694,1.613,3695,3.967,3696,1.613,3697,2.231,3698,2.76,3699,0.881,3700,0.881,3701,1.613,3702,0.881,3703,2.231,3704,0.881,3705,1.613,3706,0.881,3707,0.881,3708,0.881,3709,0.881,3710,2.76,3711,0.881,3712,2.231,3713,1.613,3714,0.881,3715,1.613,3716,0.881,3717,0.881,3718,0.881,3719,1.613,3720,1.613,3721,0.881,3722,1.613,3723,0.881,3724,0.881,3725,0.881,3726,0.881,3727,0.881,3728,2.231,3729,0.881,3730,0.881,3731,0.881,3732,1.613,3733,2.76,3734,1.613,3735,2.231,3736,0.881,3737,0.881,3738,0.881,3739,0.881,3740,1.613,3741,0.881,3742,0.881,3743,0.881,3744,0.881,3745,0.881,3746,0.881,3747,0.881,3748,0.881,3749,0.881,3750,0.881,3751,0.881,3752,0.881,3753,0.881,3754,0.881,3755,2.76,3756,0.881,3757,0.881,3758,1.613,3759,0.881,3760,0.881,3761,0.881,3762,0.881,3763,0.881,3764,0.881,3765,0.881,3766,0.881,3767,0.881,3768,0.881,3769,0.881,3770,0.881,3771,1.613,3772,0.881,3773,0.881,3774,0.881,3775,0.881,3776,0.881,3777,0.881,3778,1.613,3779,0.881,3780,0.881,3781,0.881,3782,0.881,3783,0.881,3784,0.881,3785,0.881,3786,0.881,3787,1.613,3788,1.613,3789,3.217,3790,0.881,3791,0.881,3792,0.881,3793,0.881,3794,0.881,3795,0.881,3796,0.881,3797,2.231,3798,1.613,3799,0.881,3800,1.613,3801,1.613,3802,1.613,3803,0.881,3804,0.881,3805,0.881,3806,0.881,3807,0.881,3808,0.881,3809,1.613,3810,0.881,3811,0.881,3812,0.881,3813,1.613,3814,0.881,3815,2.231,3816,0.881,3817,0.881,3818,0.881,3819,0.881,3820,0.881,3821,0.881,3822,0.881,3823,0.881,3824,0.881,3825,0.881,3826,0.881,3827,1.613,3828,0.881,3829,0.881,3830,0.881,3831,0.881,3832,0.881,3833,0.881,3834,0.881,3835,0.881,3836,0.881,3837,0.881,3838,0.881,3839,0.881,3840,0.881,3841,0.881,3842,0.881,3843,0.881,3844,0.881,3845,0.881,3846,0.881,3847,1.613,3848,1.613,3849,0.881,3850,0.881,3851,0.881,3852,0.881,3853,0.881,3854,0.881,3855,0.881,3856,0.881,3857,0.881,3858,0.881,3859,0.881,3860,0.881,3861,0.881,3862,0.881,3863,0.881,3864,0.881,3865,0.881,3866,0.881,3867,0.881,3868,0.881,3869,0.881,3870,0.881,3871,0.881,3872,0.881,3873,0.881,3874,0.881,3875,0.777,3876,0.881]],["title/modules.html",[94,2.77]],["body/modules.html",[20,0.008,79,0.008,80,0.008,93,4.693,94,2.897,104,4.402,105,4.402,106,4.402,107,4.402,108,4.402,130,4.159,132,4.159,136,4.159,141,4.159,1133,4.402,1402,4.402,3037,7.348,3877,9.135,3878,9.135,3879,9.135]],["title/overview.html",[3880,5.303]],["body/overview.html",[2,0.673,16,2.428,20,0.009,79,0.005,80,0.005,83,1.372,92,1.301,93,6.489,94,1.733,95,1.733,96,1.853,97,1.853,98,1.733,99,1.791,100,1.733,101,3.318,102,3.318,103,3.318,104,5.853,105,6.323,106,6.011,107,6.051,108,5.597,109,4.414,110,2.657,111,1.853,112,1.372,130,5.17,132,5.288,136,5.464,141,5.464,200,1.49,241,5.17,310,3.318,311,3.318,312,3.318,313,5.072,365,2.633,374,3.318,375,3.318,376,4.605,377,4.217,378,3.982,470,2.364,924,4.414,1103,5.17,1133,6.146,1134,3.318,1135,3.318,1136,3.318,1137,4.011,1138,4.328,1223,4.414,1351,4.414,1398,3.318,1399,3.318,1400,3.318,1401,3.318,1402,5.597,1403,4.414,1416,3.318,1417,3.318,1584,3.318,1585,3.318,1685,3.318,1687,3.318,1773,2.364,1837,5.17,1860,3.318,1861,3.318,1862,3.318,1863,4.414,1864,4.414,1865,4.793,2785,3.318,2786,3.318,3397,3.318,3880,3.318,3881,5.394,3882,3.762,3883,3.762]],["title/properties.html",[202,1.176,2929,3.227]],["body/properties.html",[20,0.009,21,0.593,35,1.282,79,0.008,80,0.008,202,1.481,485,1.59,633,3.731,759,4.967,826,5.87,827,3.611,1007,4.402,1043,5.353,1217,4.402,1269,5.87,1455,4.967,2298,5.353,2324,5.87,2465,5.353,3012,5.87,3044,5.353,3051,4.967,3113,5.87,3875,5.87,3884,6.655,3885,6.655,3886,6.655,3887,6.655,3888,6.655,3889,6.655,3890,6.655,3891,6.655]],["title/miscellaneous/typealiases.html",[2960,2.299,3892,5.287]],["body/miscellaneous/typealiases.html",[8,0.411,20,0.008,22,0.357,79,0.008,80,0.008,249,4.644,250,5.085,1966,5.249,2960,4.42,3893,7.034,3894,7.138]],["title/miscellaneous/variables.html",[1652,4.253,2960,2.299]],["body/miscellaneous/variables.html",[0,0.272,8,0.142,10,0.862,20,0.01,21,0.345,22,0.451,30,0.496,48,2.085,55,3.433,58,1.597,60,1.476,62,0.625,67,1.858,70,1.58,72,1.67,73,1.167,77,0.741,79,0.004,80,0.004,81,0.82,192,2.146,193,2.146,196,1.769,202,0.862,203,2.352,212,3.382,214,3.791,215,3.464,216,1.769,231,2.276,235,1.58,252,3.433,254,2.896,255,1.529,258,1.458,259,1.97,272,1.493,305,3.195,306,2.713,327,1.677,342,3.034,360,2.692,364,2.713,368,2.146,402,2.713,404,1.878,414,0.82,416,3.036,417,1.703,424,2.563,430,4.524,435,1.328,436,2.563,445,2.66,450,2.692,452,2.323,489,1.086,501,1.471,503,2.812,607,3.843,616,2.053,633,1.158,641,3.036,659,1.703,768,3.886,780,3.117,827,1.121,841,2.892,854,3.607,857,2.896,861,2.896,862,3.036,863,3.036,864,2.713,870,1.396,873,1.703,887,1.957,888,2.146,889,2.146,890,2.146,891,2.146,892,2.146,893,1.609,896,2.892,915,2.892,921,3.605,922,2.892,923,2.892,936,1.609,939,1.529,948,1.703,969,1.815,970,3.117,971,3.117,972,3.117,973,2.713,974,3.117,1009,1.957,1010,2.896,1011,3.117,1013,3.117,1015,1.957,1024,3.382,1026,2.713,1027,1.815,1028,1.957,1029,1.957,1059,3.117,1060,3.117,1082,1.242,1238,1.957,1241,3.886,1257,3.303,1259,3.117,1260,3.117,1262,3.117,1287,2.146,1288,2.146,1325,2.146,1327,2.713,1374,3.418,1411,3.161,1458,1.609,1477,1.957,1490,2.146,1529,1.815,1652,1.957,1669,3.605,1670,3.117,1755,1.957,1772,3.679,1774,3.117,1789,3.117,1797,2.146,1798,2.146,1805,3.418,1806,2.146,1807,1.957,1808,2.146,1809,1.957,1810,2.146,1811,3.117,1838,2.563,1914,1.957,1966,1.815,1987,2.146,1993,1.957,1994,2.146,1995,2.146,1996,3.418,1997,2.146,1998,2.146,1999,2.146,2000,2.146,2001,2.146,2002,3.418,2003,2.146,2004,2.146,2005,2.146,2006,1.957,2007,2.146,2008,2.146,2009,2.146,2010,2.146,2011,2.146,2012,2.146,2013,2.146,2014,2.146,2015,2.146,2016,1.703,2017,1.957,2019,1.815,2020,2.146,2078,3.117,2079,3.117,2128,2.146,2140,2.146,2144,1.815,2149,2.563,2237,1.957,2260,2.146,2428,1.957,2436,1.957,2450,3.117,2467,1.957,2468,1.957,2470,1.957,2505,1.957,2544,2.146,2698,3.117,2802,1.815,2857,3.117,2859,4.261,2860,4.86,2865,2.146,2867,3.117,2868,2.146,2887,2.146,2888,4.86,2890,4.86,2891,3.418,2892,3.418,2912,5.655,2913,4.261,2915,4.261,2923,3.886,2960,1.529,2966,3.418,3195,3.418,3894,3.418,3895,4.831,3896,2.433,3897,2.433,3898,2.433,3899,2.433,3900,5.51,3901,2.433,3902,3.876,3903,3.876,3904,3.876,3905,3.876,3906,2.433,3907,2.433,3908,3.876,3909,5.51,3910,3.876,3911,2.433,3912,3.876,3913,2.433,3914,3.876,3915,3.876,3916,3.876,3917,6.017,3918,5.51,3919,2.433,3920,2.433,3921,3.876,3922,4.831,3923,5.51,3924,2.433,3925,2.433,3926,2.433,3927,2.433,3928,2.433,3929,2.433,3930,2.433,3931,2.433,3932,2.433,3933,2.433,3934,2.433,3935,2.433]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":360,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":3884,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":2943,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2957,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2942,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2950,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2876,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2900,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2895,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2896,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2901,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2899,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2897,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2878,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":2880,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2883,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2877,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2881,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2886,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2882,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2894,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2893,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":913,"title":{},"body":{"classes/DiscordUser.html":{}}}],["00:00:00",{"_index":2517,"title":{},"body":{"injectables/TasksService.html":{}}}],["1",{"_index":813,"title":{"classes/SelfDto-1.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"license.html":{}}}],["1.7.0",{"_index":2953,"title":{},"body":{"dependencies.html":{}}}],["1.7.7",{"_index":2941,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2914,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2920,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":2917,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":3380,"title":{},"body":{"license.html":{}}}],["10.0.3",{"_index":2936,"title":{},"body":{"dependencies.html":{}}}],["10.4.2",{"_index":2933,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":2905,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":2156,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/UserTimeOutDto.html":{}}}],["1011511871297302608",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["1011529685357838376",{"_index":1389,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["1011532621412577350",{"_index":2091,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["1042351896",{"_index":1315,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["1051979218164125826",{"_index":1390,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["1056592866660581456",{"_index":438,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["1080070968900333578",{"_index":442,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["11",{"_index":2916,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["1132244079242133555",{"_index":1391,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["12",{"_index":3881,"title":{},"body":{"overview.html":{}}}],["123",{"_index":1471,"title":{},"body":{"injectables/GuildService.html":{}}}],["1234",{"_index":906,"title":{},"body":{"classes/DiscordUser.html":{}}}],["123456789012345678",{"_index":915,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["128",{"_index":1681,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["13",{"_index":3870,"title":{},"body":{"license.html":{}}}],["14",{"_index":1507,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["14.16.2",{"_index":2944,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":3596,"title":{},"body":{"license.html":{}}}],["1567081521233",{"_index":1029,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":3597,"title":{},"body":{"license.html":{}}}],["1600000000000",{"_index":1015,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["1671981769958",{"_index":431,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["19",{"_index":3114,"title":{},"body":{"license.html":{}}}],["1996",{"_index":3399,"title":{},"body":{"license.html":{}}}],["2",{"_index":662,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["2.0.3",{"_index":2935,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":2906,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":2926,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3397,"title":{},"body":{"license.html":{},"overview.html":{}}}],["200",{"_index":549,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["2007",{"_index":3116,"title":{},"body":{"license.html":{}}}],["24",{"_index":2843,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["28",{"_index":3751,"title":{},"body":{"license.html":{}}}],["3",{"_index":470,"title":{},"body":{"classes/Channel.html":{},"classes/CleanWfpMember.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SpecialCommand.html":{},"license.html":{},"overview.html":{}}}],["3.0",{"_index":3890,"title":{},"body":{"properties.html":{}}}],["3.0.3",{"_index":2932,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":2934,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":2898,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2908,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1456,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"coverage.html":{},"license.html":{}}}],["322822954796974080",{"_index":1770,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["4",{"_index":3429,"title":{},"body":{"license.html":{}}}],["4.0.0",{"_index":2948,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":2951,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":2938,"title":{},"body":{"dependencies.html":{}}}],["4.26.1",{"_index":2959,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":2158,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["5,7",{"_index":1125,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["5.2.5",{"_index":2930,"title":{},"body":{"dependencies.html":{}}}],["5.3.7",{"_index":2931,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":2904,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2919,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":1318,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["500ms",{"_index":1308,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["51",{"_index":3882,"title":{},"body":{"overview.html":{}}}],["559623534870528",{"_index":1028,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":3883,"title":{},"body":{"overview.html":{}}}],["6.0.1",{"_index":2940,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2157,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["616609333832187924",{"_index":436,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["6b",{"_index":3488,"title":{},"body":{"license.html":{}}}],["6d",{"_index":3512,"title":{},"body":{"license.html":{}}}],["7",{"_index":2569,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["7.2.0",{"_index":2958,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":2903,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":2907,"title":{},"body":{"coverage.html":{}}}],["8.0.7",{"_index":2939,"title":{},"body":{"dependencies.html":{}}}],["832170662491062333",{"_index":455,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["89q12",{"_index":3891,"title":{},"body":{"properties.html":{}}}],["9.4.0",{"_index":2955,"title":{},"body":{"dependencies.html":{}}}],["900s",{"_index":1881,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["__bot_event__",{"_index":3906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__bot_event_handler__",{"_index":368,"title":{},"body":{"interfaces/BotEvent.html":{},"miscellaneous/variables.html":{}}}],["__bot_event_handler__(...args",{"_index":369,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["__rank__",{"_index":3931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_addmembertochanneloverwrite",{"_index":1436,"title":{},"body":{"injectables/GuildService.html":{}}}],["_addmembertochanneloverwrite(user_id",{"_index":1446,"title":{},"body":{"injectables/GuildService.html":{}}}],["_count",{"_index":1527,"title":{},"body":{"injectables/GuildService.html":{}}}],["_days",{"_index":2827,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_fetchguilds",{"_index":2325,"title":{},"body":{"injectables/SelfService.html":{}}}],["_fetchguilds(userid",{"_index":2329,"title":{},"body":{"injectables/SelfService.html":{}}}],["_getguildidfromselectmenu",{"_index":2053,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["_getguildidfromselectmenu(interaction",{"_index":2059,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["_getmessage",{"_index":2755,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["_getmessage(msgid",{"_index":2757,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["_hours",{"_index":2828,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_ismemberadmin",{"_index":1691,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberadmin(user_id",{"_index":1704,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismembermod",{"_index":1692,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismembermod(user_id",{"_index":1707,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberverified",{"_index":1693,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberverified(user_id",{"_index":1709,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_minutes",{"_index":2829,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_removememberfromchanneloverwrite",{"_index":1437,"title":{},"body":{"injectables/GuildService.html":{}}}],["_removememberfromchanneloverwrite(user_id",{"_index":1450,"title":{},"body":{"injectables/GuildService.html":{}}}],["aber",{"_index":954,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["abgeschickt",{"_index":832,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["ability",{"_index":3562,"title":{},"body":{"license.html":{}}}],["above",{"_index":837,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"license.html":{}}}],["absence",{"_index":3425,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":3837,"title":{},"body":{"license.html":{}}}],["acc",{"_index":1537,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[channelid",{"_index":1535,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[channelid][userid",{"_index":1536,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[date",{"_index":1548,"title":{},"body":{"injectables/GuildService.html":{}}}],["accent",{"_index":895,"title":{},"body":{"classes/DiscordUser.html":{}}}],["accentcolor",{"_index":888,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["accept",{"_index":3650,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":3649,"title":{},"body":{"license.html":{}}}],["accepted",{"_index":1300,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["access",{"_index":3195,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":3205,"title":{},"body":{"license.html":{}}}],["accesstoken",{"_index":1904,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["accompanied",{"_index":3469,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":3841,"title":{},"body":{"license.html":{}}}],["accomplish",{"_index":3208,"title":{},"body":{"license.html":{}}}],["accord",{"_index":3424,"title":{},"body":{"license.html":{}}}],["according",{"_index":3832,"title":{},"body":{"license.html":{}}}],["account",{"_index":2816,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["accumulator",{"_index":1547,"title":{},"body":{"injectables/GuildService.html":{}}}],["achieve",{"_index":3846,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":3356,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":3701,"title":{},"body":{"license.html":{}}}],["action",{"_index":249,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["actionrowbuilder",{"_index":741,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["actionrowbuilder().addcomponents",{"_index":797,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["actionrowbuilder().addcomponents(button",{"_index":771,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["actionrowbuilder().addcomponents(needhelpbutton",{"_index":964,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{}}}],["actions",{"_index":305,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["actions)[number",{"_index":2018,"title":{},"body":{"classes/LogEntry.html":{}}}],["actions})@isoptional()@isstring()@isin(actions",{"_index":291,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["activities",{"_index":3259,"title":{},"body":{"license.html":{}}}],["activity",{"_index":2552,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["actual",{"_index":3726,"title":{},"body":{"license.html":{}}}],["actually",{"_index":3535,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":3237,"title":{},"body":{"license.html":{}}}],["add",{"_index":799,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["addchanneltypes",{"_index":3071,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["added",{"_index":1311,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["addfields",{"_index":686,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/UserInfoUiCommand.html":{}}}],["additional",{"_index":3439,"title":{},"body":{"license.html":{}}}],["addmember",{"_index":1226,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["addmember(member",{"_index":1233,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["addmember(userid",{"_index":1711,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addmembers",{"_index":1694,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addmembers(guildid",{"_index":1713,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addreactions",{"_index":1019,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["address",{"_index":3783,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":3232,"title":{},"body":{"license.html":{}}}],["addrolecommand",{"_index":1,"title":{"classes/AddRoleCommand.html":{}},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["admin",{"_index":1010,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RoleResponse.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["administrator",{"_index":2197,"title":{},"body":{"classes/PingCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["adminroleid",{"_index":2387,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["adopted",{"_index":3396,"title":{},"body":{"license.html":{}}}],["adversely",{"_index":3569,"title":{},"body":{"license.html":{}}}],["advised",{"_index":3828,"title":{},"body":{"license.html":{}}}],["affects",{"_index":3570,"title":{},"body":{"license.html":{}}}],["affero",{"_index":3111,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":3681,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":3352,"title":{},"body":{"license.html":{}}}],["against",{"_index":3413,"title":{},"body":{"license.html":{}}}],["agb",{"_index":1301,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["aggregate",{"_index":3454,"title":{},"body":{"license.html":{}}}],["agpl",{"_index":3875,"title":{},"body":{"license.html":{},"properties.html":{}}}],["agree",{"_index":3764,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3814,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3712,"title":{},"body":{"license.html":{}}}],["aka",{"_index":465,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["algorithm",{"_index":1909,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["alias",{"_index":2918,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3893,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":3689,"title":{},"body":{"license.html":{}}}],["allow",{"_index":2093,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["allowed",{"_index":3131,"title":{},"body":{"license.html":{}}}],["along",{"_index":3426,"title":{},"body":{"license.html":{}}}],["already",{"_index":1115,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["alternate",{"_index":3178,"title":{},"body":{"license.html":{}}}],["alternative",{"_index":3484,"title":{},"body":{"license.html":{}}}],["always",{"_index":905,"title":{},"body":{"classes/DiscordUser.html":{}}}],["amazing",{"_index":3038,"title":{},"body":{"index.html":{}}}],["americano",{"_index":2430,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["ancillary",{"_index":3651,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":3171,"title":{},"body":{"license.html":{}}}],["anfrage",{"_index":2101,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["anliegen",{"_index":2587,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["annotation",{"_index":3916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anouncement.command",{"_index":388,"title":{},"body":{"modules/BotModule.html":{}}}],["anouncement.command.ts",{"_index":2171,"title":{},"body":{"classes/MumVoiceCommand.html":{},"coverage.html":{}}}],["anouncement.command.ts:15",{"_index":2174,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["anouncement.dto",{"_index":2177,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["anouncement.dto.ts",{"_index":2037,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"coverage.html":{}}}],["anouncement.dto.ts:15",{"_index":2040,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["anouncement.dto.ts:25",{"_index":2045,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["answer",{"_index":805,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{}}}],["answer.value",{"_index":815,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answercomponentrow",{"_index":796,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answerinput",{"_index":792,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answers",{"_index":811,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["anti",{"_index":3384,"title":{},"body":{"license.html":{}}}],["antwort",{"_index":828,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["anyone",{"_index":3437,"title":{},"body":{"license.html":{}}}],["anything",{"_index":3246,"title":{},"body":{"license.html":{}}}],["apfelkuchen",{"_index":2425,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["api",{"_index":1007,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"properties.html":{}}}],["apibearerauth",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apibody",{"_index":563,"title":{},"body":{"controllers/ChannelController.html":{}}}],["apiheader",{"_index":1842,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["apioperation",{"_index":564,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":476,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["apiproperty({type",{"_index":1078,"title":{},"body":{"classes/Guild.html":{},"classes/LogEntryDto.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["apipropertyoptional",{"_index":304,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SettingsDto.html":{}}}],["apipropertyoptional({type",{"_index":289,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/SelfDto.html":{}}}],["apiresponse",{"_index":565,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":566,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{}}}],["apitags('/channel",{"_index":580,"title":{},"body":{"controllers/ChannelController.html":{}}}],["apitags('/role",{"_index":2261,"title":{},"body":{"controllers/RoleController.html":{}}}],["apitags('auth/jwt",{"_index":1846,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["app",{"_index":1041,"title":{},"body":{"interfaces/EventToLog.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":2211,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":82,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":3250,"title":{},"body":{"license.html":{}}}],["application",{"_index":1037,"title":{},"body":{"interfaces/EventToLog.html":{},"license.html":{}}}],["application/x",{"_index":1929,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["applicationcommandtype",{"_index":2175,"title":{},"body":{"classes/MumVoiceCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["applicationcommandtype.chatinput",{"_index":2180,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["applicationcommandtype.message",{"_index":2371,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["applicationcommandtype.user",{"_index":2762,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["applications",{"_index":3010,"title":{},"body":{"index.html":{}}}],["applies",{"_index":3790,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3226,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":93,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":3269,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":3418,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":3836,"title":{},"body":{"license.html":{}}}],["apps",{"_index":2975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appservice",{"_index":109,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archive",{"_index":3867,"title":{},"body":{"license.html":{}}}],["args",{"_index":372,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["argumentshost",{"_index":628,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["arising",{"_index":3818,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":3722,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":3735,"title":{},"body":{"license.html":{}}}],["array",{"_index":445,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["article",{"_index":3393,"title":{},"body":{"license.html":{}}}],["ask",{"_index":758,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{}}}],["assert",{"_index":3167,"title":{},"body":{"license.html":{}}}],["assets",{"_index":3670,"title":{},"body":{"license.html":{}}}],["associated",{"_index":3330,"title":{},"body":{"license.html":{}}}],["assume",{"_index":3808,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":3840,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":3618,"title":{},"body":{"license.html":{}}}],["async",{"_index":10,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["at(unixtimestamp",{"_index":1014,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["attach",{"_index":3848,"title":{},"body":{"license.html":{}}}],["attaches",{"_index":2584,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["attachment",{"_index":1362,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"injectables/GuildUserService.html":{},"miscellaneous/functions.html":{}}}],["attachment.url",{"_index":1381,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["attachments",{"_index":1725,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["attachmenttype",{"_index":2981,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attachtment",{"_index":1368,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["attempt",{"_index":3628,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":3599,"title":{},"body":{"license.html":{}}}],["auditevents",{"_index":313,"title":{},"body":{"modules/AuditLogModule.html":{},"coverage.html":{},"overview.html":{}}}],["auditlog",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"injectables/GuildService.html":{}}}],["auditlog.controller",{"_index":315,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["auditlog.events",{"_index":316,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["auditlog.service",{"_index":242,"title":{},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{}}}],["auditlog/auditlog.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["auditlogcontroller",{"_index":224,"title":{"controllers/AuditLogController.html":{}},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"coverage.html":{}}}],["auditlogfilterdto",{"_index":229,"title":{"classes/AuditLogFilterDto.html":{}},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"coverage.html":{}}}],["auditlogmodule",{"_index":136,"title":{"modules/AuditLogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/ModerationModule.html":{},"modules.html":{},"overview.html":{}}}],["auditlogservice",{"_index":241,"title":{"injectables/AuditLogService.html":{}},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"coverage.html":{},"overview.html":{}}}],["auf",{"_index":958,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["aus",{"_index":2145,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["auth",{"_index":1824,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.controller",{"_index":1871,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.controller.ts",{"_index":1823,"title":{},"body":{"controllers/JwtAuthController.html":{},"coverage.html":{}}}],["auth.controller.ts:35",{"_index":1835,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.controller.ts:40",{"_index":1829,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.guard",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":1856,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["auth.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.module.ts",{"_index":1866,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.service",{"_index":1839,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{}}}],["auth.service.ts",{"_index":1882,"title":{},"body":{"injectables/JwtAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:12",{"_index":1888,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:21",{"_index":1892,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:45",{"_index":1894,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:57",{"_index":1896,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:66",{"_index":1890,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.strategy",{"_index":1867,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.strategy.ts",{"_index":1948,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:17",{"_index":1954,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:7",{"_index":1952,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth/jwt/guards/jwt",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"controllers/GuildSettingsController.html":{},"controllers/SelfController.html":{}}}],["auth/jwt/jwt",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":1858,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{}}}],["authguard('jwt",{"_index":1857,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{}}}],["author",{"_index":3044,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["authorization",{"_index":1943,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["authorization_code",{"_index":1923,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["authorized",{"_index":3590,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":3696,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":3739,"title":{},"body":{"license.html":{}}}],["authors",{"_index":3607,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":1848,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auto",{"_index":1087,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["autodeletechannel",{"_index":1090,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["autodeletechannel.channelid",{"_index":1156,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["autodeletechannels",{"_index":1110,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{}}}],["automatic",{"_index":3660,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":3343,"title":{},"body":{"license.html":{}}}],["available",{"_index":3181,"title":{},"body":{"license.html":{}}}],["avatar",{"_index":898,"title":{},"body":{"classes/DiscordUser.html":{}}}],["avatarurl",{"_index":870,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/Guild.html":{},"controllers/GuildUserController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["average",{"_index":1454,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperchannellastmonth",{"_index":1438,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperchannellastmonth(guildid",{"_index":1452,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperdaylastmonth",{"_index":1439,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperdaylastmonth(guildid",{"_index":1480,"title":{},"body":{"injectables/GuildService.html":{}}}],["avg(subquery.messagecount",{"_index":1464,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecount",{"_index":1465,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecounts",{"_index":1538,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecounts[channelid",{"_index":1544,"title":{},"body":{"injectables/GuildService.html":{}}}],["avoid",{"_index":2751,"title":{},"body":{"controllers/UserController.html":{}}}],["await",{"_index":62,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":3143,"title":{},"body":{"license.html":{}}}],["axios",{"_index":1577,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":1898,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["b",{"_index":3308,"title":{},"body":{"license.html":{}}}],["b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/.test",{"_index":2825,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/g",{"_index":2831,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["backers",{"_index":3039,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":1836,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["badrequestexception('no",{"_index":1853,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["ban",{"_index":2017,"title":{},"body":{"classes/LogEntry.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["banned",{"_index":2668,"title":{},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["banner",{"_index":900,"title":{},"body":{"classes/DiscordUser.html":{}}}],["bannerurl",{"_index":889,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["banuser",{"_index":2678,"title":{},"body":{"controllers/UserController.html":{}}}],["banuser(guildid",{"_index":2683,"title":{},"body":{"controllers/UserController.html":{}}}],["base64",{"_index":986,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["base64resolvable",{"_index":983,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["based",{"_index":578,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{},"license.html":{}}}],["baseguildtextchannel",{"_index":1499,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["baseguildtextchannel).permissionoverwrites.delete",{"_index":2571,"title":{},"body":{"injectables/TasksService.html":{}}}],["baseinteraction",{"_index":2643,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["basic",{"_index":3345,"title":{},"body":{"license.html":{}}}],["bearbeiten",{"_index":788,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["bearer",{"_index":1944,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["become",{"_index":3180,"title":{},"body":{"license.html":{}}}],["becomes",{"_index":3199,"title":{},"body":{"license.html":{}}}],["before",{"_index":502,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"injectables/GuildMemberEvents.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["behalf",{"_index":3370,"title":{},"body":{"license.html":{}}}],["bei",{"_index":2618,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["being",{"_index":1521,"title":{},"body":{"injectables/GuildService.html":{},"license.html":{}}}],["bekommen",{"_index":963,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["believe",{"_index":3731,"title":{},"body":{"license.html":{}}}],["belongs",{"_index":1008,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["below",{"_index":1000,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["benefit",{"_index":3174,"title":{},"body":{"license.html":{}}}],["benötigt",{"_index":2990,"title":{},"body":{"miscellaneous/functions.html":{}}}],["besprechen",{"_index":2590,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["best",{"_index":3845,"title":{},"body":{"license.html":{}}}],["beta1",{"_index":2949,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":3869,"title":{},"body":{"license.html":{}}}],["between",{"_index":3339,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":3456,"title":{},"body":{"license.html":{}}}],["bienenstich",{"_index":2426,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["bin",{"_index":945,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["binarytotextencoding",{"_index":2072,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["bis",{"_index":2615,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["bit",{"_index":1346,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["body",{"_index":560,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"license.html":{}}}],["boolean",{"_index":450,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bot",{"_index":827,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildService.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/initGuildCommand.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["bot/bot.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["bot_event_handler_name",{"_index":1060,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bot_event_key",{"_index":1059,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["botevent",{"_index":364,"title":{"interfaces/BotEvent.html":{}},"body":{"interfaces/BotEvent.html":{},"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["boteventdecorator",{"_index":1046,"title":{},"body":{"classes/Explorer.html":{}}}],["boteventdecorator(provider",{"_index":1052,"title":{},"body":{"classes/Explorer.html":{}}}],["both",{"_index":2822,"title":{},"body":{"classes/UserTimeOutDto.html":{},"license.html":{}}}],["botmodule",{"_index":104,"title":{"modules/BotModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BotModule.html":{},"modules.html":{},"overview.html":{}}}],["bots",{"_index":2332,"title":{},"body":{"injectables/SelfService.html":{}}}],["break",{"_index":2494,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{}}}],["browse",{"_index":3879,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3877,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":2988,"title":{},"body":{"miscellaneous/functions.html":{}}}],["building",{"_index":3006,"title":{},"body":{"index.html":{}}}],["business",{"_index":3743,"title":{},"body":{"license.html":{}}}],["button",{"_index":764,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"miscellaneous/functions.html":{}}}],["buttonbuilder",{"_index":742,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{}}}],["buttoninteraction",{"_index":727,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["buttonstyle",{"_index":743,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["bzw",{"_index":682,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["c",{"_index":3118,"title":{},"body":{"license.html":{}}}],["cake",{"_index":2468,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["cakes",{"_index":2419,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["call",{"_index":1937,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["callback",{"_index":2129,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["callback[interaction.customid",{"_index":2131,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["called",{"_index":2973,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["canactivate",{"_index":857,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["canactivate(context",{"_index":861,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["cappuccino",{"_index":2431,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["cardinal",{"_index":1218,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["carry",{"_index":3431,"title":{},"body":{"license.html":{}}}],["case",{"_index":2480,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["cases",{"_index":3198,"title":{},"body":{"license.html":{}}}],["catch",{"_index":76,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"injectables/DmMessageHandler.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["catch(channelnottextbasedexception",{"_index":637,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["catch(exception",{"_index":639,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["catch(exceptionlist",{"_index":702,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["catch(guilddoesnotexistexception",{"_index":1219,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["catch(senddirectmessagetouserexception",{"_index":2361,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["catch(wrongargsexception",{"_index":706,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["catcherror",{"_index":1901,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["catcherror((error",{"_index":1934,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["category",{"_index":497,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SpecialCommand.html":{},"classes/UserToUser.html":{}}}],["categorychannel",{"_index":484,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["categorychannel'])@isoptional()@apiproperty({type",{"_index":1182,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["categorychannelresolvable",{"_index":483,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["categoryid",{"_index":2082,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["categoryid.replace('modrequest",{"_index":2104,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["cause",{"_index":3460,"title":{},"body":{"license.html":{}}}],["caution",{"_index":2744,"title":{},"body":{"controllers/UserController.html":{}}}],["caution'})@apiresponse({status",{"_index":2699,"title":{},"body":{"controllers/UserController.html":{}}}],["cease",{"_index":3632,"title":{},"body":{"license.html":{}}}],["certain",{"_index":3587,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":3642,"title":{},"body":{"license.html":{}}}],["change",{"_index":491,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"license.html":{}}}],["changed",{"_index":2385,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event",{"_index":1627,"title":{},"body":{"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{}}}],["changed.event.ts",{"_index":2376,"title":{},"body":{"classes/SettingsChanged.html":{},"coverage.html":{}}}],["changed.event.ts:20",{"_index":2381,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:6",{"_index":2379,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:7",{"_index":2380,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:8",{"_index":2378,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changing",{"_index":3130,"title":{},"body":{"license.html":{}}}],["channel",{"_index":414,"title":{"classes/Channel.html":{}},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildRestrictedChannelController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["channel'})@apibody({schema",{"_index":539,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.channelid",{"_index":1114,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildService.html":{}}}],["channel.clean",{"_index":618,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.clone",{"_index":1171,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.controller",{"_index":1140,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildRestrictedChannelModule.html":{}}}],["channel.controller.ts",{"_index":1089,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildRestrictedChannelController.html":{},"coverage.html":{}}}],["channel.controller.ts:24",{"_index":1098,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.controller.ts:34",{"_index":1096,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.controller.ts:54",{"_index":1100,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.delete",{"_index":1172,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.edit",{"_index":604,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.edit(channeldata",{"_index":596,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.guard",{"_index":1261,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["channel.guard.ts",{"_index":2890,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["channel.id",{"_index":2099,"title":{},"body":{"injectables/ModRequestFlow.html":{},"controllers/UserController.html":{}}}],["channel.istextbased",{"_index":2779,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["channel.messages.fetch(msgid",{"_index":2780,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["channel.module",{"_index":1407,"title":{},"body":{"modules/GuildModule.html":{}}}],["channel.module.ts",{"_index":1139,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildRestrictedChannelModule.html":{}}}],["channel.parentid",{"_index":1388,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["channel.requiredpoints",{"_index":1434,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.send",{"_index":1323,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{}}}],["channel.send(usermention(interaction.user.id",{"_index":2109,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["channel.service",{"_index":391,"title":{},"body":{"modules/BotModule.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{}}}],["channel.service.ts",{"_index":1144,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"coverage.html":{}}}],["channel.service.ts:10",{"_index":1147,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:14",{"_index":1426,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:17",{"_index":1150,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:22",{"_index":1152,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:40",{"_index":1148,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:44",{"_index":1424,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:52",{"_index":1429,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:8",{"_index":1422,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.slowmode.${duration",{"_index":601,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.type",{"_index":609,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["channel/channel.controller",{"_index":2168,"title":{},"body":{"modules/ModerationModule.html":{}}}],["channel/dto/auto",{"_index":1118,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"coverage.html":{}}}],["channel/guild",{"_index":390,"title":{},"body":{"modules/BotModule.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["channel_created",{"_index":2011,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channel_deleted",{"_index":2012,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channel_id",{"_index":1447,"title":{},"body":{"injectables/GuildService.html":{}}}],["channel_updated",{"_index":2013,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channelcleaned",{"_index":499,"title":{"classes/ChannelCleaned.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["channelcleaned(guildid",{"_index":619,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelcontroller",{"_index":528,"title":{"controllers/ChannelController.html":{}},"body":{"controllers/ChannelController.html":{},"modules/ModerationModule.html":{},"coverage.html":{}}}],["channeldata",{"_index":542,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelid",{"_index":503,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/RestrictedChannelDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["channelidguard",{"_index":2891,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["channelidguardmixin",{"_index":3908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["channelname",{"_index":626,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["channelnottextbasedexception",{"_index":575,"title":{"classes/ChannelNotTextBasedException.html":{}},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["channelnottextbasedexception(channel.name",{"_index":617,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelnottextbasedexceptionfilter",{"_index":638,"title":{"classes/ChannelNotTextBasedExceptionFilter.html":{}},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["channelrows",{"_index":3101,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channels",{"_index":555,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/TasksService.html":{}}}],["channels.dto",{"_index":1105,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["channels.dto.ts",{"_index":1119,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["channels.dto.ts:10",{"_index":1122,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["channels.dto.ts:12",{"_index":2235,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["channels.dto.ts:16",{"_index":1129,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["channels.dto.ts:17",{"_index":2236,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["channels.fetch('1195024829544411168",{"_index":818,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["channels.fetch(ticket.ticketid",{"_index":2568,"title":{},"body":{"injectables/TasksService.html":{}}}],["channels.foreach((channel",{"_index":1550,"title":{},"body":{"injectables/GuildService.html":{}}}],["channelselectmenubuilder",{"_index":3062,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channelselectmenuinteraction",{"_index":3059,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channeltype",{"_index":482,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.guildannouncement",{"_index":493,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["channeltype.guildtext",{"_index":492,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.privatethread",{"_index":611,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.publicthread",{"_index":610,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["characterized",{"_index":3559,"title":{},"body":{"license.html":{}}}],["charge",{"_index":3155,"title":{},"body":{"license.html":{}}}],["check",{"_index":1327,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["checkactiveusers",{"_index":2510,"title":{},"body":{"injectables/TasksService.html":{}}}],["checked",{"_index":2529,"title":{},"body":{"injectables/TasksService.html":{}}}],["checkifpersonwasverifiedbefore",{"_index":1227,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["checkifpersonwasverifiedbefore(reaction",{"_index":1237,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["checklimits(message",{"_index":1393,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["checkproviders",{"_index":1048,"title":{},"body":{"classes/Explorer.html":{}}}],["checkproviders(providers",{"_index":1055,"title":{},"body":{"classes/Explorer.html":{}}}],["checks",{"_index":2337,"title":{},"body":{"injectables/SelfService.html":{},"injectables/TasksService.html":{}}}],["checktimeouts",{"_index":2511,"title":{},"body":{"injectables/TasksService.html":{}}}],["children",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["choice",{"_index":2864,"title":{},"body":{"classes/UserToUser.html":{}}}],["choice(commandtoexecute",{"_index":2872,"title":{},"body":{"classes/UserToUser.html":{}}}],["choice(commandtoexecute)@param({description",{"_index":2858,"title":{},"body":{"classes/UserToUser.html":{}}}],["choiceoptions",{"_index":2865,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["choose",{"_index":2991,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["chooserandomcoffee",{"_index":2422,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["chooserandomcoffee(interaction",{"_index":2453,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["choosing",{"_index":3796,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":3376,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":3385,"title":{},"body":{"license.html":{}}}],["civil",{"_index":3839,"title":{},"body":{"license.html":{}}}],["claim",{"_index":3686,"title":{},"body":{"license.html":{}}}],["claims",{"_index":3698,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddRoleCommand.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["classdecorator",{"_index":2977,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"overview.html":{}}}],["clean",{"_index":538,"title":{},"body":{"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"miscellaneous/functions.html":{}}}],["cleanchannel",{"_index":531,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleanchannel(guildid",{"_index":536,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleaning",{"_index":608,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleantextchannel",{"_index":571,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["cleantextchannel(channel",{"_index":2968,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cleanwfpmember",{"_index":405,"title":{"classes/CleanWfpMember.html":{}},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["cleanwfpmembers",{"_index":1440,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["cleanwfpmembers(guildid",{"_index":1482,"title":{},"body":{"injectables/GuildService.html":{}}}],["clear",{"_index":3498,"title":{},"body":{"license.html":{}}}],["click",{"_index":2773,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["client",{"_index":14,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["client.setmaxlisteners(30",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["client_id",{"_index":1918,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["client_secret",{"_index":1920,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["clientevents",{"_index":370,"title":{},"body":{"interfaces/BotEvent.html":{},"classes/CommunityQuestionCommand.html":{}}}],["clientevents['interactioncreate",{"_index":806,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["clientevents[keyof",{"_index":373,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["closed",{"_index":2574,"title":{},"body":{"injectables/TasksService.html":{}}}],["closely",{"_index":3835,"title":{},"body":{"license.html":{}}}],["closestaletickets",{"_index":2512,"title":{},"body":{"injectables/TasksService.html":{}}}],["cls",{"_index":2998,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule",{"_index":310,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule_exports",{"_index":311,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule_providers",{"_index":312,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_botmodule",{"_index":374,"title":{},"body":{"modules/BotModule.html":{},"overview.html":{}}}],["cluster_botmodule_providers",{"_index":375,"title":{},"body":{"modules/BotModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule",{"_index":1134,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule_exports",{"_index":1135,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule_providers",{"_index":1136,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildmodule",{"_index":1398,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_exports",{"_index":1401,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_imports",{"_index":1400,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_providers",{"_index":1399,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule",{"_index":1416,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule_exports",{"_index":1417,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule_providers",{"_index":1418,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{}}}],["cluster_guildsettingsmodule",{"_index":1584,"title":{},"body":{"modules/GuildSettingsModule.html":{},"overview.html":{}}}],["cluster_guildsettingsmodule_exports",{"_index":1585,"title":{},"body":{"modules/GuildSettingsModule.html":{},"overview.html":{}}}],["cluster_guildsettingsmodule_providers",{"_index":1586,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["cluster_guildusermodule",{"_index":1685,"title":{},"body":{"modules/GuildUserModule.html":{},"overview.html":{}}}],["cluster_guildusermodule_exports",{"_index":1687,"title":{},"body":{"modules/GuildUserModule.html":{},"overview.html":{}}}],["cluster_guildusermodule_providers",{"_index":1686,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["cluster_jwtauthmodule",{"_index":1860,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_jwtauthmodule_exports",{"_index":1861,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_jwtauthmodule_providers",{"_index":1862,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_moderationmodule",{"_index":2160,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_moderationmodule_imports",{"_index":2161,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_moderationmodule_providers",{"_index":2162,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_tasksmodule",{"_index":2495,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":2496,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_usermodule",{"_index":2785,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2786,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2787,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":1830,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"license.html":{}}}],["coffee",{"_index":2467,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["coffees",{"_index":2420,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["collect",{"_index":3766,"title":{},"body":{"license.html":{}}}],["color",{"_index":896,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["colorresolvable",{"_index":975,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["colors",{"_index":655,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{}}}],["combine",{"_index":3777,"title":{},"body":{"license.html":{}}}],["combined",{"_index":3450,"title":{},"body":{"license.html":{}}}],["come",{"_index":3190,"title":{},"body":{"license.html":{}}}],["comes",{"_index":2301,"title":{},"body":{"controllers/SelfController.html":{},"license.html":{}}}],["command",{"_index":32,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["commandinteraction",{"_index":25,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{}}}],["commands",{"_index":1776,"title":{},"body":{"guards/HasRequiredRank.html":{},"license.html":{}}}],["commands/clean",{"_index":406,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/community",{"_index":393,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/init",{"_index":396,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/mod",{"_index":387,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/ping.command",{"_index":381,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/special.command",{"_index":410,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/ticket",{"_index":412,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/timeout.command",{"_index":385,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/user",{"_index":399,"title":{},"body":{"modules/BotModule.html":{}}}],["commandtoexecute",{"_index":2867,"title":{},"body":{"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commandvalidationfilter",{"_index":699,"title":{"classes/CommandValidationFilter.html":{}},"body":{"classes/CommandValidationFilter.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["commercial",{"_index":3540,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":3713,"title":{},"body":{"license.html":{}}}],["common",{"_index":3534,"title":{},"body":{"license.html":{}}}],["communication",{"_index":3337,"title":{},"body":{"license.html":{}}}],["communicationdisableduntil",{"_index":871,"title":{},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{}}}],["community",{"_index":759,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"license.html":{},"properties.html":{}}}],["communityquestioncommand",{"_index":392,"title":{"classes/CommunityQuestionCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["communityquestiondto",{"_index":732,"title":{"classes/CommunityQuestionDto.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["communityquestionformdto",{"_index":735,"title":{"classes/CommunityQuestionFormDto.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["compilation",{"_index":3445,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":3455,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":3748,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":3316,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":3665,"title":{},"body":{"license.html":{}}}],["comply",{"_index":3367,"title":{},"body":{"license.html":{}}}],["component",{"_index":3307,"title":{},"body":{"license.html":{}}}],["components",{"_index":772,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["componenttype",{"_index":2076,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["componenttype.stringselect",{"_index":2153,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["computer",{"_index":3254,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":3785,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":3742,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":3217,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["configservice.get('jwt_access_secret",{"_index":1963,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('jwt_issuer",{"_index":1964,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":2231,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["configservice.get('token",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":3102,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["conflictexception",{"_index":1101,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["confused",{"_index":2789,"title":{},"body":{"modules/UserModule.html":{}}}],["connection",{"_index":3733,"title":{},"body":{"license.html":{}}}],["consequence",{"_index":3653,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":3817,"title":{},"body":{"license.html":{}}}],["considered",{"_index":3620,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3705,"title":{},"body":{"license.html":{}}}],["console.log(category",{"_index":2476,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["console.log(e",{"_index":2575,"title":{},"body":{"injectables/TasksService.html":{}}}],["console.log(fromuserid",{"_index":2477,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["console.log(outcome",{"_index":673,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["console.log(touserid",{"_index":2478,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["conspicuously",{"_index":3417,"title":{},"body":{"license.html":{}}}],["const",{"_index":60,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":3932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constitutes",{"_index":3355,"title":{},"body":{"license.html":{}}}],["constructchanneldeletejobs",{"_index":1145,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["constructed",{"_index":2997,"title":{},"body":{"miscellaneous/functions.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["constructor(@inject(guildservice",{"_index":666,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["constructor(@inject(prismaservice",{"_index":332,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["constructor(@inject(selfservice",{"_index":2308,"title":{},"body":{"controllers/SelfController.html":{}}}],["constructor(channelname",{"_index":624,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["constructor(client",{"_index":13,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["constructor(configservice",{"_index":1951,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["constructor(database",{"_index":1443,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{}}}],["constructor(discord",{"_index":2327,"title":{},"body":{"injectables/SelfService.html":{}}}],["constructor(eventemitter",{"_index":205,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(guildid",{"_index":506,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["constructor(guildservice",{"_index":651,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["constructor(guilduserservice",{"_index":1355,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["constructor(jwtservice",{"_index":1885,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["constructor(prismaserver",{"_index":3053,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["constructor(prismaservice",{"_index":321,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["constructor(private",{"_index":1578,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["constructor(reflector",{"_index":1779,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["constructor(settingsservice",{"_index":1818,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["constructor(userid",{"_index":2661,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["construed",{"_index":3753,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":3518,"title":{},"body":{"license.html":{}}}],["contact",{"_index":781,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"license.html":{}}}],["contain",{"_index":3749,"title":{},"body":{"license.html":{}}}],["containing",{"_index":3600,"title":{},"body":{"license.html":{}}}],["contains",{"_index":1478,"title":{},"body":{"injectables/GuildService.html":{},"classes/LogEntry.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["content",{"_index":773,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildSettingsService.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["contents",{"_index":3709,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":2979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["context",{"_index":636,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"license.html":{}}}],["context.getargbyindex(0",{"_index":862,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getargbyindex(1",{"_index":2215,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["context.getclass",{"_index":1795,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["context.gethandler",{"_index":1794,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["contextmenucommandinteraction",{"_index":2369,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["continue",{"_index":3565,"title":{},"body":{"license.html":{}}}],["continued",{"_index":3549,"title":{},"body":{"license.html":{}}}],["contractual",{"_index":3617,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":3760,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":3146,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3695,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":3697,"title":{},"body":{"license.html":{}}}],["control",{"_index":3322,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3700,"title":{},"body":{"license.html":{}}}],["controller",{"_index":81,"title":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('/channel",{"_index":581,"title":{},"body":{"controllers/ChannelController.html":{}}}],["controller('/role",{"_index":2262,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller('/user",{"_index":2707,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('/user/self",{"_index":2307,"title":{},"body":{"controllers/SelfController.html":{}}}],["controller('auth",{"_index":1845,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["controller('autodeletechannel",{"_index":1107,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["controller('guild",{"_index":1415,"title":{},"body":{"controllers/GuildRestrictedChannelController.html":{}}}],["controllers",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convenient",{"_index":3272,"title":{},"body":{"license.html":{}}}],["convert",{"_index":2996,"title":{},"body":{"miscellaneous/functions.html":{}}}],["convey",{"_index":3260,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":3737,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":3560,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":3266,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":3616,"title":{},"body":{"license.html":{}}}],["cooperation",{"_index":3139,"title":{},"body":{"license.html":{}}}],["copies",{"_index":3128,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3125,"title":{},"body":{"license.html":{}}}],["copying",{"_index":3218,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":3133,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3117,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":3229,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":3373,"title":{},"body":{"license.html":{}}}],["correction",{"_index":3812,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":3318,"title":{},"body":{"license.html":{}}}],["cost",{"_index":3482,"title":{},"body":{"license.html":{}}}],["couldn't",{"_index":694,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["count",{"_index":687,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["count(m.messageid",{"_index":1462,"title":{},"body":{"injectables/GuildService.html":{}}}],["count(messageid",{"_index":1468,"title":{},"body":{"injectables/GuildService.html":{}}}],["counterclaim",{"_index":3687,"title":{},"body":{"license.html":{}}}],["countries",{"_index":3258,"title":{},"body":{"license.html":{}}}],["country",{"_index":3728,"title":{},"body":{"license.html":{}}}],["court",{"_index":3759,"title":{},"body":{"license.html":{}}}],["courts",{"_index":3834,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":3717,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":2873,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["covered",{"_index":3243,"title":{},"body":{"license.html":{}}}],["craft",{"_index":2359,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["create",{"_index":319,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["create(entry",{"_index":323,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["create/dm",{"_index":926,"title":{},"body":{"injectables/DmMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["create/guild",{"_index":1352,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["create/mod",{"_index":1410,"title":{},"body":{"modules/GuildModule.html":{},"injectables/ModRequestFlow.html":{},"coverage.html":{}}}],["createautodeletechannel",{"_index":1091,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["createautodeletechannel(guildid",{"_index":1094,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["created",{"_index":429,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{}}}],["created'})@apiresponse({status",{"_index":2245,"title":{},"body":{"controllers/RoleController.html":{}}}],["createdat",{"_index":276,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{}}}],["createdfrom",{"_index":287,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["createdtill",{"_index":288,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["createdtimestamp",{"_index":416,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["createdynamicscheduledjob",{"_index":2513,"title":{},"body":{"injectables/TasksService.html":{}}}],["createdynamicscheduledjob(joboptions",{"_index":2531,"title":{},"body":{"injectables/TasksService.html":{}}}],["createhash",{"_index":2073,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["createhash('sha256",{"_index":2086,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["createparamdecorator",{"_index":3912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrole",{"_index":2238,"title":{},"body":{"controllers/RoleController.html":{}}}],["createrole(guildid",{"_index":2242,"title":{},"body":{"controllers/RoleController.html":{}}}],["createticket",{"_index":2128,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/variables.html":{}}}],["creation/execution",{"_index":2500,"title":{},"body":{"modules/TasksModule.html":{}}}],["criterion",{"_index":3285,"title":{},"body":{"license.html":{}}}],["cron",{"_index":1127,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"injectables/TasksService.html":{}}}],["cron('*/5",{"_index":2518,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron('0",{"_index":2515,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjob",{"_index":2537,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjobparams",{"_index":2532,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjobs",{"_index":2535,"title":{},"body":{"injectables/TasksService.html":{}}}],["crontime",{"_index":1163,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["cross",{"_index":3685,"title":{},"body":{"license.html":{}}}],["crypto",{"_index":2074,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["ctx",{"_index":641,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getresponse",{"_index":643,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cure",{"_index":3645,"title":{},"body":{"license.html":{}}}],["curr",{"_index":1531,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr._count?.messageid",{"_index":1534,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.channelid.tostring",{"_index":1532,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.createdat.toisostring().split('t')[0",{"_index":1546,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.userid.tostring",{"_index":1533,"title":{},"body":{"injectables/GuildService.html":{}}}],["current",{"_index":1783,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/SelfController.html":{}}}],["customarily",{"_index":3472,"title":{},"body":{"license.html":{}}}],["customary",{"_index":3774,"title":{},"body":{"license.html":{}}}],["customer",{"_index":3478,"title":{},"body":{"license.html":{}}}],["d",{"_index":2824,"title":{},"body":{"classes/UserTimeOutDto.html":{},"license.html":{}}}],["d+)|\\d",{"_index":1124,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["damages",{"_index":3815,"title":{},"body":{"license.html":{}}}],["dann",{"_index":2592,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["data",{"_index":272,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"classes/EditRoleData.html":{},"controllers/GuildController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["data.roles",{"_index":2654,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["database",{"_index":15,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/SelfService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["date",{"_index":294,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["date().getdate",{"_index":1506,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["date().gettime",{"_index":2739,"title":{},"body":{"controllers/UserController.html":{}}}],["date().setdate(new",{"_index":1505,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["date(channel.lastmessage.createdtimestamp",{"_index":2570,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(dto.duration).gettime",{"_index":2605,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["date(filter.createdfrom).toisostring",{"_index":347,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["date(filter.createdtill).toisostring",{"_index":350,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["date(member.joinedtimestamp",{"_index":1511,"title":{},"body":{"injectables/GuildService.html":{}}}],["date(message.createdtimestamp",{"_index":1376,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["date(new",{"_index":1504,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["date.now",{"_index":2558,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["date_sub(now",{"_index":1469,"title":{},"body":{"injectables/GuildService.html":{}}}],["dauer",{"_index":2844,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["day",{"_index":1198,"title":{},"body":{"controllers/GuildController.html":{},"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["days",{"_index":1457,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["dbuser",{"_index":1337,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["dbuser.guildid",{"_index":1344,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["dbuser.userid",{"_index":2559,"title":{},"body":{"injectables/TasksService.html":{}}}],["de",{"_index":2047,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["dearv8protectmefromparameterswithnonevalue",{"_index":2911,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dearv8protectmefromparameterswithnonevalue(target",{"_index":2976,"title":{},"body":{"miscellaneous/functions.html":{}}}],["december",{"_index":3398,"title":{},"body":{"license.html":{}}}],["decide",{"_index":3793,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declining",{"_index":3608,"title":{},"body":{"license.html":{}}}],["decorator",{"_index":3922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":26,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsDto.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["decorators/bot",{"_index":1061,"title":{},"body":{"classes/Explorer.html":{}}}],["decorators/requires",{"_index":1790,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["deemed",{"_index":3387,"title":{},"body":{"license.html":{}}}],["default",{"_index":214,"title":{},"body":{"injectables/AppService.html":{},"interfaces/BotEvent.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/RoleResponse.html":{},"classes/SpecialCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["defaultmemberpermissions",{"_index":45,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["defective",{"_index":3807,"title":{},"body":{"license.html":{}}}],["defending",{"_index":3175,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":3756,"title":{},"body":{"license.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["definition",{"_index":3328,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3222,"title":{},"body":{"license.html":{}}}],["deine",{"_index":2111,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["delete",{"_index":1088,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["delete(':roleid",{"_index":2275,"title":{},"body":{"controllers/RoleController.html":{}}}],["delete(':roleid')@apioperation({summary",{"_index":2249,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleteatcron",{"_index":1121,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["deletechannel.channelid",{"_index":1166,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deletechannel.deleteatcron",{"_index":1164,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deletechannel.guildid",{"_index":1167,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deleted",{"_index":527,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/RoleController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["deleted'})@apiresponse({status",{"_index":2250,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleteone",{"_index":1695,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["deleteone(userid",{"_index":1715,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["deleterole",{"_index":2239,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleterole(guildid",{"_index":2247,"title":{},"body":{"controllers/RoleController.html":{}}}],["deletes",{"_index":2971,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deleting",{"_index":1168,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["den",{"_index":959,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["denied",{"_index":3566,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":3714,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":95,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":907,"title":{},"body":{"classes/DiscordUser.html":{}}}],["deprive",{"_index":3723,"title":{},"body":{"license.html":{}}}],["der",{"_index":2817,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["des",{"_index":2845,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["desc",{"_index":357,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{}}}],["describe",{"_index":1990,"title":{},"body":{"classes/LogEntry.html":{}}}],["description",{"_index":485,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"properties.html":{}}}],["descriptionlocalizations",{"_index":2039,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["designated",{"_index":3490,"title":{},"body":{"license.html":{}}}],["designed",{"_index":3137,"title":{},"body":{"license.html":{}}}],["detail",{"_index":3782,"title":{},"body":{"license.html":{}}}],["details",{"_index":3859,"title":{},"body":{"license.html":{}}}],["determined",{"_index":2972,"title":{},"body":{"miscellaneous/functions.html":{}}}],["determining",{"_index":3529,"title":{},"body":{"license.html":{}}}],["develop",{"_index":3843,"title":{},"body":{"license.html":{}}}],["developers",{"_index":3162,"title":{},"body":{"license.html":{}}}],["development",{"_index":3018,"title":{},"body":{"index.html":{}}}],["dich",{"_index":2621,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["die",{"_index":679,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["differ",{"_index":3781,"title":{},"body":{"license.html":{}}}],["different",{"_index":1982,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["differently",{"_index":3595,"title":{},"body":{"license.html":{}}}],["digest('hex",{"_index":2089,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["diplomatenkaffee",{"_index":2432,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["dir",{"_index":955,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["direct",{"_index":2355,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["direction",{"_index":3371,"title":{},"body":{"license.html":{}}}],["directions",{"_index":3499,"title":{},"body":{"license.html":{}}}],["directly",{"_index":2987,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["disabled",{"_index":523,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["disclaim",{"_index":3409,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":3797,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":3592,"title":{},"body":{"license.html":{}}}],["discord",{"_index":35,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"injectables/DmMessageHandler.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{},"properties.html":{}}}],["discord.js",{"_index":39,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["discordapierror",{"_index":934,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["discordapierror).message",{"_index":967,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["discordclientoptions",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["discordexecutioncontext",{"_index":851,"title":{"interfaces/DiscordExecutionContext.html":{}},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["discordguildmember",{"_index":867,"title":{"classes/DiscordGuildMember.html":{}},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["discordjs",{"_index":1269,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"properties.html":{}}}],["discordmodule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["discordmodule.forfeature",{"_index":317,"title":{},"body":{"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["discordmodule.forrootasync",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["discorduser",{"_index":886,"title":{"classes/DiscordUser.html":{}},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["discorduser.avatarurl",{"_index":2343,"title":{},"body":{"injectables/SelfService.html":{}}}],["discorduser.fetch",{"_index":2217,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["discorduser.globalname",{"_index":2344,"title":{},"body":{"injectables/SelfService.html":{}}}],["discorduser.id",{"_index":2222,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/SelfService.html":{}}}],["discorduser.partial",{"_index":2216,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["discorduser.roles.add(role.id",{"_index":1349,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser.roles.cache.has('1121823930085285938",{"_index":1343,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser.roles.remove('1121823930085285938",{"_index":1350,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser['id",{"_index":882,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["discriminator",{"_index":890,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["discriminatory",{"_index":3740,"title":{},"body":{"license.html":{}}}],["display",{"_index":909,"title":{},"body":{"classes/DiscordUser.html":{},"license.html":{}}}],["displayavatarurl",{"_index":891,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["displayed",{"_index":836,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"license.html":{}}}],["displayname",{"_index":872,"title":{},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{}}}],["displays",{"_index":3268,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":3786,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":3126,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3856,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":3744,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3219,"title":{},"body":{"license.html":{}}}],["dm",{"_index":2357,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["dm.guard",{"_index":937,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dm.guard.ts",{"_index":2033,"title":{},"body":{"guards/MessageIsDmGuard.html":{},"coverage.html":{}}}],["dm.guard.ts:7",{"_index":2034,"title":{},"body":{"guards/MessageIsDmGuard.html":{}}}],["dmmessagehandler",{"_index":924,"title":{"injectables/DmMessageHandler.html":{}},"body":{"injectables/DmMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["dmmessagetomodteam",{"_index":928,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dmmessagetomodteam(message",{"_index":929,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dmpermission",{"_index":47,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{}}}],["docs",{"_index":1020,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["document",{"_index":3129,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":1786,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{}}}],["documented",{"_index":3574,"title":{},"body":{"license.html":{}}}],["doe",{"_index":919,"title":{},"body":{"classes/DiscordUser.html":{}}}],["done",{"_index":2187,"title":{},"body":{"classes/MumVoiceCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/initGuildCommand.html":{}}}],["dont",{"_index":1492,"title":{},"body":{"injectables/GuildService.html":{}}}],["doubtful",{"_index":3530,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":3662,"title":{},"body":{"license.html":{}}}],["dry",{"_index":1516,"title":{},"body":{"injectables/GuildService.html":{}}}],["dryrun",{"_index":1483,"title":{},"body":{"injectables/GuildService.html":{}}}],["dto",{"_index":2173,"title":{},"body":{"classes/MumVoiceCommand.html":{},"injectables/SelfService.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["dto.duration",{"_index":2616,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["dto.message",{"_index":2183,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["dto.reason",{"_index":2607,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["dto.replytomessage",{"_index":2181,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["dto/audit",{"_index":239,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["dto/auto",{"_index":1104,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["dto/channel",{"_index":570,"title":{},"body":{"controllers/ChannelController.html":{}}}],["dto/commmunity",{"_index":748,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["dto/community",{"_index":756,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["dto/guild",{"_index":2706,"title":{},"body":{"controllers/UserController.html":{}}}],["dto/log",{"_index":244,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["dto/mod",{"_index":2176,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["dto/role",{"_index":2259,"title":{},"body":{"controllers/RoleController.html":{}}}],["dto/settings.dto",{"_index":1575,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["dto/user",{"_index":2460,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["du",{"_index":2585,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserToUser.html":{}}}],["durable",{"_index":3471,"title":{},"body":{"license.html":{}}}],["duration",{"_index":599,"title":{},"body":{"controllers/ChannelController.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["duration).getmilliseconds",{"_index":2742,"title":{},"body":{"controllers/UserController.html":{}}}],["dwelling",{"_index":3528,"title":{},"body":{"license.html":{}}}],["dynamically",{"_index":3332,"title":{},"body":{"license.html":{}}}],["e",{"_index":965,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"license.html":{}}}],["e.g",{"_index":1809,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["e.message",{"_index":2633,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["e.name",{"_index":2632,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["e2e",{"_index":3028,"title":{},"body":{"index.html":{}}}],["each",{"_index":1479,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["earlier",{"_index":3242,"title":{},"body":{"license.html":{}}}],["early",{"_index":1515,"title":{},"body":{"injectables/GuildService.html":{}}}],["edit",{"_index":544,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editchannel",{"_index":532,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editchannel(guildid",{"_index":541,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editroledata",{"_index":968,"title":{"classes/EditRoleData.html":{}},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{}}}],["editsettings",{"_index":1590,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["editsettings(guildid",{"_index":1601,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["effect",{"_index":3831,"title":{},"body":{"license.html":{}}}],["effected",{"_index":3406,"title":{},"body":{"license.html":{}}}],["effective",{"_index":3388,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":3850,"title":{},"body":{"license.html":{}}}],["efficient",{"_index":3007,"title":{},"body":{"index.html":{}}}],["efforts",{"_index":3679,"title":{},"body":{"license.html":{}}}],["ein",{"_index":948,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["eine",{"_index":2144,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einen",{"_index":2149,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einer",{"_index":2859,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einspänner",{"_index":2433,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["eiskaffee",{"_index":2434,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["electronic",{"_index":3860,"title":{},"body":{"license.html":{}}}],["embed",{"_index":674,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embed.addfields",{"_index":2630,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["embedbuilder",{"_index":656,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embeds",{"_index":698,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embodied",{"_index":3466,"title":{},"body":{"license.html":{}}}],["emitter",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["emoji",{"_index":1383,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["emojiresolvable",{"_index":984,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["emote.guard",{"_index":1263,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["emote.guard.ts",{"_index":2892,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["emotes",{"_index":3926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emotes.includes((reaction",{"_index":3928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["employer",{"_index":3871,"title":{},"body":{"license.html":{}}}],["en",{"_index":2046,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["enable",{"_index":3310,"title":{},"body":{"license.html":{}}}],["enabled",{"_index":516,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["enables",{"_index":3262,"title":{},"body":{"license.html":{}}}],["enableshutdownhooks",{"_index":2202,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":2204,"title":{},"body":{"injectables/PrismaService.html":{}}}],["encoded",{"_index":987,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["encouraged",{"_index":3185,"title":{},"body":{"license.html":{}}}],["end",{"_index":3842,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":2295,"title":{},"body":{"controllers/SelfController.html":{}}}],["enforce",{"_index":3715,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":3412,"title":{},"body":{"license.html":{}}}],["ensure",{"_index":3138,"title":{},"body":{"license.html":{}}}],["enter",{"_index":2644,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["entered",{"_index":3750,"title":{},"body":{"license.html":{}}}],["entire",{"_index":3436,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":3768,"title":{},"body":{"license.html":{}}}],["entity",{"_index":3666,"title":{},"body":{"license.html":{}}}],["entry",{"_index":326,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.action",{"_index":334,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.createdat",{"_index":343,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.dto",{"_index":245,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["entry.dto.ts",{"_index":2023,"title":{},"body":{"classes/LogEntryDto.html":{},"coverage.html":{}}}],["entry.dto.ts:11",{"_index":2024,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:13",{"_index":2025,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:15",{"_index":2026,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:17",{"_index":2027,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:19",{"_index":2028,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:21",{"_index":2029,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.extrainfo",{"_index":341,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.guildid",{"_index":335,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.invokerid",{"_index":336,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.reason",{"_index":337,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.targetid",{"_index":338,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.targettype",{"_index":339,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["enum",{"_index":290,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/functions.html":{}}}],["ephemeral",{"_index":669,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["equivalent",{"_index":3358,"title":{},"body":{"license.html":{}}}],["erfolgreich",{"_index":2113,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["err",{"_index":2188,"title":{},"body":{"classes/MumVoiceCommand.html":{},"classes/TimeOutCommand.html":{}}}],["error",{"_index":70,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/Explorer.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/MumVoiceCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["error('timeout",{"_index":2612,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.length",{"_index":2611,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.map((e",{"_index":2631,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.message",{"_index":1946,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["error.push(err",{"_index":2608,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.response.data.error",{"_index":1939,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["erstelle",{"_index":2593,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["espresso",{"_index":2435,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["essential",{"_index":3312,"title":{},"body":{"license.html":{}}}],["etc",{"_index":2541,"title":{},"body":{"injectables/TasksService.html":{}}}],["etwas",{"_index":2870,"title":{},"body":{"classes/UserToUser.html":{}}}],["europe/berlin",{"_index":1178,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{}}}],["even",{"_index":3827,"title":{},"body":{"license.html":{}}}],["event",{"_index":212,"title":{},"body":{"injectables/AppService.html":{},"injectables/GuildService.html":{},"classes/LogEntry.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["event.decorator",{"_index":1062,"title":{},"body":{"classes/Explorer.html":{}}}],["event.decorator.ts",{"_index":2888,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["event.interface.ts",{"_index":367,"title":{},"body":{"interfaces/BotEvent.html":{},"coverage.html":{}}}],["event.interface.ts:4",{"_index":371,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["event.toformattedlog(this.logger",{"_index":223,"title":{},"body":{"injectables/AppService.html":{}}}],["eventargs",{"_index":736,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["eventemitter",{"_index":208,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["eventemitter2",{"_index":206,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["eventemittermodule",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["eventparams",{"_index":740,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["events",{"_index":1033,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["events/channel.event",{"_index":574,"title":{},"body":{"controllers/ChannelController.html":{}}}],["events/guild",{"_index":1413,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/interaction",{"_index":1409,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/message",{"_index":1408,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/settings",{"_index":1626,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["events/user.events",{"_index":2705,"title":{},"body":{"controllers/UserController.html":{}}}],["eventtolog",{"_index":218,"title":{"interfaces/EventToLog.html":{}},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["eventtype",{"_index":2377,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["everyday",{"_index":2525,"title":{},"body":{"injectables/TasksService.html":{}}}],["everyone",{"_index":1027,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["exact",{"_index":3241,"title":{},"body":{"license.html":{}}}],["example",{"_index":430,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["examples",{"_index":978,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["except",{"_index":3252,"title":{},"body":{"license.html":{}}}],["exception",{"_index":579,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{}}}],["exception.constraints[key",{"_index":717,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exception.message",{"_index":645,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exception.property",{"_index":711,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exception.ts",{"_index":620,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"coverage.html":{}}}],["exception.ts:12",{"_index":625,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/GuildDoesNotExistException.html":{},"classes/SendDirectMessageToUserException.html":{}}}],["exception.ts:23",{"_index":647,"title":{},"body":{"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["exception.ts:25",{"_index":1222,"title":{},"body":{"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exceptionfilter",{"_index":627,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exceptionlist",{"_index":705,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exceptionlist.geterror().map((exception",{"_index":708,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exceptions",{"_index":3579,"title":{},"body":{"license.html":{}}}],["excluded",{"_index":3516,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":3754,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":3852,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3706,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":3365,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":3761,"title":{},"body":{"license.html":{}}}],["executable",{"_index":3300,"title":{},"body":{"license.html":{}}}],["execute",{"_index":3547,"title":{},"body":{"license.html":{}}}],["executing",{"_index":3253,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":854,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":3680,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3407,"title":{},"body":{"license.html":{}}}],["exist",{"_index":1215,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["exists",{"_index":1116,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["expected",{"_index":3538,"title":{},"body":{"license.html":{}}}],["expects",{"_index":3537,"title":{},"body":{"license.html":{}}}],["expensiveeeeee",{"_index":2697,"title":{},"body":{"controllers/UserController.html":{}}}],["expiresin",{"_index":1880,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["explicitly",{"_index":3351,"title":{},"body":{"license.html":{}}}],["explorer",{"_index":1044,"title":{"classes/Explorer.html":{}},"body":{"classes/Explorer.html":{},"coverage.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["exports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"classes/EditRoleData.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"classes/RoleResponse.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exposes",{"_index":2508,"title":{},"body":{"injectables/TasksService.html":{}}}],["express",{"_index":631,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":3799,"title":{},"body":{"license.html":{}}}],["expression",{"_index":1132,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["expression'})@apiproperty({type",{"_index":1128,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["expressly",{"_index":3627,"title":{},"body":{"license.html":{}}}],["extend",{"_index":3725,"title":{},"body":{"license.html":{}}}],["extended",{"_index":2947,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":623,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["extensions",{"_index":3449,"title":{},"body":{"license.html":{}}}],["extent",{"_index":3271,"title":{},"body":{"license.html":{}}}],["externalcontextcreator",{"_index":1050,"title":{},"body":{"classes/Explorer.html":{}}}],["externaldocs",{"_index":988,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["extractjwt",{"_index":1955,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1960,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["extractjwt.fromheader('refresh_token",{"_index":2230,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["extrainfo",{"_index":340,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/LogEntry.html":{}}}],["f",{"_index":3614,"title":{},"body":{"license.html":{}}}],["facilitating",{"_index":3775,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":3366,"title":{},"body":{"license.html":{}}}],["fail",{"_index":3189,"title":{},"body":{"license.html":{}}}],["failed",{"_index":713,"title":{},"body":{"classes/CommandValidationFilter.html":{},"injectables/JwtAuthService.html":{},"classes/MumVoiceCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["failifnotexists",{"_index":2186,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["failonlogin",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["fails",{"_index":2358,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"license.html":{}}}],["failure",{"_index":3825,"title":{},"body":{"license.html":{}}}],["fair",{"_index":3357,"title":{},"body":{"license.html":{}}}],["false",{"_index":48,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RoleResponse.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["false})@isoptional()@isstring",{"_index":2044,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["family",{"_index":3523,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":3239,"title":{},"body":{"license.html":{}}}],["favor",{"_index":3532,"title":{},"body":{"license.html":{}}}],["feature",{"_index":3275,"title":{},"body":{"license.html":{}}}],["features",{"_index":3888,"title":{},"body":{"properties.html":{}}}],["fee",{"_index":3428,"title":{},"body":{"license.html":{}}}],["fest",{"_index":1265,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"dependencies.html":{}}}],["fetch",{"_index":2302,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{}}}],["fetch(guildid",{"_index":1676,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["fetched",{"_index":551,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["fetched'})@apiresponse({status",{"_index":2253,"title":{},"body":{"controllers/RoleController.html":{}}}],["fetches",{"_index":2331,"title":{},"body":{"injectables/SelfService.html":{}}}],["fetchself",{"_index":2326,"title":{},"body":{"injectables/SelfService.html":{}}}],["fetchself(userid",{"_index":2335,"title":{},"body":{"injectables/SelfService.html":{}}}],["field",{"_index":850,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"miscellaneous/functions.html":{}}}],["field('answer",{"_index":848,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["files",{"_index":3329,"title":{},"body":{"license.html":{}}}],["filter",{"_index":228,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/ModRequestFlow.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["filter.action",{"_index":351,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.createdfrom",{"_index":344,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.createdtill",{"_index":345,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.dto",{"_index":240,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["filter.dto.ts",{"_index":286,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:13",{"_index":296,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:16",{"_index":297,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:21",{"_index":299,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:26",{"_index":292,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.targettype",{"_index":352,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filtercb",{"_index":2970,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filters/command",{"_index":2463,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["finally",{"_index":3637,"title":{},"body":{"license.html":{}}}],["find",{"_index":320,"title":{},"body":{"injectables/AuditLogService.html":{},"license.html":{}}}],["find(guildid",{"_index":268,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["findall",{"_index":1696,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["findall(guildid",{"_index":1717,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["findmany",{"_index":2349,"title":{},"body":{"injectables/SelfService.html":{}}}],["fired",{"_index":1489,"title":{},"body":{"injectables/GuildService.html":{}}}],["first",{"_index":403,"title":{},"body":{"modules/BotModule.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{},"license.html":{}}}],["firstmessageid",{"_index":1295,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["firstvaluefrom",{"_index":1900,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["fitness",{"_index":3802,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":3470,"title":{},"body":{"license.html":{}}}],["flags",{"_index":417,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"miscellaneous/variables.html":{}}}],["flow",{"_index":3338,"title":{},"body":{"license.html":{}}}],["fly",{"_index":2536,"title":{},"body":{"injectables/TasksService.html":{}}}],["follow",{"_index":3221,"title":{},"body":{"license.html":{}}}],["following",{"_index":3710,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":3405,"title":{},"body":{"license.html":{}}}],["forbiddenexception",{"_index":1787,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["force",{"_index":3361,"title":{},"body":{"license.html":{}}}],["foreach((match",{"_index":2832,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["forguild",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["form",{"_index":1931,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["format",{"_index":293,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/LogEntryDto.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["forms",{"_index":3461,"title":{},"body":{"license.html":{}}}],["found",{"_index":588,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["foundation",{"_index":3121,"title":{},"body":{"license.html":{}}}],["frage",{"_index":784,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["fragen",{"_index":2619,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["framework",{"_index":3005,"title":{},"body":{"index.html":{}}}],["free",{"_index":3119,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":3144,"title":{},"body":{"license.html":{}}}],["fromuserid",{"_index":2457,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["frontend",{"_index":2298,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{},"properties.html":{}}}],["fulfilling",{"_index":3391,"title":{},"body":{"license.html":{}}}],["full",{"_index":3855,"title":{},"body":{"license.html":{}}}],["fun",{"_index":1517,"title":{},"body":{"injectables/GuildService.html":{}}}],["function",{"_index":1039,"title":{},"body":{"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function/object",{"_index":3934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functionality",{"_index":2985,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functioning",{"_index":3550,"title":{},"body":{"license.html":{}}}],["functions",{"_index":2961,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3493,"title":{},"body":{"license.html":{}}}],["future",{"_index":3794,"title":{},"body":{"license.html":{}}}],["führen",{"_index":953,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["für",{"_index":2820,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["ganzen",{"_index":2448,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["gateway",{"_index":2196,"title":{},"body":{"classes/PingCommand.html":{}}}],["gatewayintentbits",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.automoderationconfiguration",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.automoderationexecution",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessagereactions",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessages",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessagetyping",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildemojisandstickers",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildintegrations",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildinvites",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmembers",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessagereactions",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessages",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessagetyping",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmoderation",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildpresences",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guilds",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildvoicestates",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildwebhooks",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.messagecontent",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["geben",{"_index":768,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["gemutet",{"_index":2818,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["general",{"_index":3112,"title":{},"body":{"license.html":{}}}],["generally",{"_index":3326,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1022,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"license.html":{}}}],["generic",{"_index":3000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gesendet",{"_index":2049,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["get('/')@apioperation({summary",{"_index":554,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["get(':channelid",{"_index":591,"title":{},"body":{"controllers/ChannelController.html":{}}}],["get(':channelid')@apioperation({summary",{"_index":547,"title":{},"body":{"controllers/ChannelController.html":{}}}],["get('https://discordapp.com/api/users/@me",{"_index":1942,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["get('login",{"_index":1828,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["get('messages",{"_index":1194,"title":{},"body":{"controllers/GuildController.html":{}}}],["get('self",{"_index":1666,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["get(dbuser.guildid",{"_index":1341,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["get(guild.id",{"_index":2555,"title":{},"body":{"injectables/TasksService.html":{}}}],["get(guildid",{"_index":1149,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["getadminroleid",{"_index":1591,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getadminroleid(guildid",{"_index":1604,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getall",{"_index":1419,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getall(guildid",{"_index":1423,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getattachmenttype",{"_index":1366,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getattachmenttype(attachment.contenttype",{"_index":1380,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["getattachmenttype(contenttype",{"_index":2978,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getauditlog",{"_index":226,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["getauditlog(guildid",{"_index":227,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["getautodeletechannel",{"_index":1092,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getautodeletechannel(@param('guildid",{"_index":1109,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getautodeletechannel(guildid",{"_index":1097,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getguildchannel",{"_index":533,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannel(guildid",{"_index":546,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannels",{"_index":534,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannels(guildid",{"_index":553,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildroles",{"_index":2240,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguildroles(@param('guildid",{"_index":2263,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguildroles(guildid",{"_index":2252,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguilduser",{"_index":1697,"title":{},"body":{"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["getguilduser(request",{"_index":2686,"title":{},"body":{"controllers/UserController.html":{}}}],["getguilduser(userid",{"_index":1719,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getguildusers",{"_index":2679,"title":{},"body":{"controllers/UserController.html":{}}}],["getguildusers(guildid",{"_index":2688,"title":{},"body":{"controllers/UserController.html":{}}}],["getintrochannelid",{"_index":1592,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getintrochannelid(guildid",{"_index":1606,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmessage",{"_index":855,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["getmodchannelid",{"_index":1593,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodchannelid(guildid",{"_index":1608,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodroleid",{"_index":1594,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodroleid(guildid",{"_index":1610,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getopenintrochannelid",{"_index":1595,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getopenintrochannelid(guildid",{"_index":1612,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getrank",{"_index":1698,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getrank(member",{"_index":1721,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getrequest",{"_index":1798,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["getrestrictedchannel",{"_index":1420,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getrestrictedchannel(guildid",{"_index":1425,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["gets",{"_index":1271,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/PingCommand.html":{},"controllers/SelfController.html":{},"miscellaneous/functions.html":{}}}],["getself",{"_index":1664,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["getself(@requestuser",{"_index":2309,"title":{},"body":{"controllers/SelfController.html":{}}}],["getself(userid",{"_index":1665,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["getsettings",{"_index":1566,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{}}}],["getsettings(@param('guildid",{"_index":1579,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["getsettings(guildid",{"_index":1568,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{}}}],["getting",{"_index":3001,"title":{"index.html":{},"license.html":{}},"body":{}}],["getunverifiedmemberroleid",{"_index":1596,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getunverifiedmemberroleid(guildid",{"_index":1615,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getuserfromcode",{"_index":1883,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["getuserfromcode(code",{"_index":1889,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["getverifiedmemberroleid",{"_index":1597,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getverifiedmemberroleid(guildid",{"_index":1617,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getwelcomemessageformat",{"_index":1598,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getwelcomemessageformat(guildid",{"_index":1619,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["gibt",{"_index":2449,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["give",{"_index":2466,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"license.html":{}}}],["given",{"_index":1458,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["gives",{"_index":3169,"title":{},"body":{"license.html":{}}}],["giving",{"_index":3432,"title":{},"body":{"license.html":{}}}],["gnu",{"_index":3110,"title":{},"body":{"license.html":{}}}],["goals",{"_index":3210,"title":{},"body":{"license.html":{}}}],["governed",{"_index":3582,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":3211,"title":{},"body":{"license.html":{}}}],["grant",{"_index":3609,"title":{},"body":{"license.html":{}}}],["grant_type",{"_index":1922,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["granted",{"_index":3346,"title":{},"body":{"license.html":{}}}],["grants",{"_index":3656,"title":{},"body":{"license.html":{}}}],["gratis",{"_index":3492,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":3844,"title":{},"body":{"license.html":{}}}],["group",{"_index":1472,"title":{},"body":{"injectables/GuildService.html":{}}}],["grow",{"_index":3034,"title":{},"body":{"index.html":{}}}],["grund",{"_index":2622,"title":{},"body":{"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["gte",{"_index":346,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guarantee",{"_index":3148,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1772,"title":{"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["guarded",{"_index":3917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":1773,"title":{},"body":{"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"overview.html":{}}}],["guards/is",{"_index":753,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["guards/refresh",{"_index":1841,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["guild",{"_index":435,"title":{"classes/Guild.html":{}},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["guild'})@apiresponse({status",{"_index":548,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["guild.autodeletechannels.foreach((deletechannel",{"_index":1161,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["guild.channels.cache.foreach(async",{"_index":2747,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.channels.cache.get(channelid",{"_index":595,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.cache.size",{"_index":589,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.create",{"_index":2084,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guild.channels.fetch",{"_index":1169,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"controllers/UserController.html":{}}}],["guild.channels.fetch()).foreach(async",{"_index":2778,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["guild.channels.fetch()).tojson",{"_index":590,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.fetch(channelid",{"_index":593,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.command",{"_index":397,"title":{},"body":{"modules/BotModule.html":{}}}],["guild.command.ts",{"_index":2885,"title":{},"body":{"coverage.html":{},"classes/initGuildCommand.html":{}}}],["guild.command.ts:156",{"_index":3061,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.command.ts:21",{"_index":3054,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.command.ts:26",{"_index":3057,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.controller",{"_index":1405,"title":{},"body":{"modules/GuildModule.html":{}}}],["guild.iconurl",{"_index":2347,"title":{},"body":{"injectables/SelfService.html":{}}}],["guild.id",{"_index":2346,"title":{},"body":{"injectables/SelfService.html":{}}}],["guild.members.ban(userid",{"_index":2724,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.fetch",{"_index":1759,"title":{},"body":{"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["guild.members.fetch().then((members",{"_index":2647,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["guild.members.fetch(request.user.userid",{"_index":2719,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.fetch(userid",{"_index":2737,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.kick(userid",{"_index":2731,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.name",{"_index":1276,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/SelfService.html":{}}}],["guild.ownerid",{"_index":2648,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["guild.roles.cache.get(roleid",{"_index":2272,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.cache.size",{"_index":2265,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.create(roledata",{"_index":2267,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.fetch()).tojson",{"_index":2266,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.service",{"_index":1142,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"modules/GuildModule.html":{}}}],["guild/:guildid",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["guild/guild",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["guild/guild.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["guild/moderation/moderation.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["guild_id",{"_index":1705,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["guild_updated",{"_index":2001,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["guildautodeletechannelcontroller",{"_index":1086,"title":{"controllers/GuildAutoDeleteChannelController.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"coverage.html":{}}}],["guildautodeletechanneldto",{"_index":1095,"title":{"classes/GuildAutoDeleteChannelDto.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"coverage.html":{}}}],["guildautodeletechannelmodule",{"_index":1133,"title":{"modules/GuildAutoDeleteChannelModule.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules.html":{},"overview.html":{}}}],["guildautodeletechannelservice",{"_index":1103,"title":{"injectables/GuildAutoDeleteChannelService.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"coverage.html":{},"overview.html":{}}}],["guildbasedchannel",{"_index":568,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guildchannel",{"_index":567,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["guildchanneleditoptions",{"_index":488,"title":{"classes/GuildChannelEditOptions.html":{}},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["guildcontroller",{"_index":1189,"title":{"controllers/GuildController.html":{}},"body":{"controllers/GuildController.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["guilddoesnotexistexception",{"_index":1213,"title":{"classes/GuildDoesNotExistException.html":{}},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["guilddoesnotexistexception(guildid",{"_index":1637,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["guilddoesnotexistexceptionfilter",{"_index":1220,"title":{"classes/GuildDoesNotExistExceptionFilter.html":{}},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"coverage.html":{}}}],["guildid",{"_index":65,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/initGuildCommand.html":{}}}],["guildid_userid",{"_index":64,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["guildids",{"_index":2992,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guildmember",{"_index":1234,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guildmemberevents",{"_index":1223,"title":{"injectables/GuildMemberEvents.html":{}},"body":{"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildmenu",{"_index":2147,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guildmessagehandler",{"_index":1351,"title":{"injectables/GuildMessageHandler.html":{}},"body":{"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildmodule",{"_index":105,"title":{"modules/GuildModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules.html":{},"overview.html":{}}}],["guildname",{"_index":1673,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["guildquestionid",{"_index":816,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["guildrestrictedchannelcontroller",{"_index":1414,"title":{"controllers/GuildRestrictedChannelController.html":{}},"body":{"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"coverage.html":{}}}],["guildrestrictedchannelmodule",{"_index":1402,"title":{"modules/GuildRestrictedChannelModule.html":{}},"body":{"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules.html":{},"overview.html":{}}}],["guildrestrictedchannelservice",{"_index":376,"title":{"injectables/GuildRestrictedChannelService.html":{}},"body":{"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["guilds",{"_index":1085,"title":{},"body":{"classes/Guild.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["guilds.foreach((guild",{"_index":1160,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["guilds.foreach(async",{"_index":1562,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guilds.length",{"_index":2137,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guilds.map((guild",{"_index":2345,"title":{},"body":{"injectables/SelfService.html":{}}}],["guilds/:guildid/roles/:roleid",{"_index":1023,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["guilds[0",{"_index":2139,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["guildservice",{"_index":377,"title":{"injectables/GuildService.html":{}},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["guildsettingscontroller",{"_index":1564,"title":{"controllers/GuildSettingsController.html":{}},"body":{"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"coverage.html":{}}}],["guildsettingsmodule",{"_index":132,"title":{"modules/GuildSettingsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/GuildSettingsModule.html":{},"modules.html":{},"overview.html":{}}}],["guildsettingsservice",{"_index":378,"title":{"injectables/GuildSettingsService.html":{}},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildtextbasedchannel",{"_index":569,"title":{},"body":{"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["guilduser",{"_index":1082,"title":{},"body":{"classes/Guild.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["guilduser.firstmessageid",{"_index":2763,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["guilduser['guildid",{"_index":1077,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["guilduser['rank",{"_index":2319,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["guilduser['userid",{"_index":1084,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["guildusercontroller",{"_index":1662,"title":{"controllers/GuildUserController.html":{}},"body":{"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"coverage.html":{}}}],["guildusermodule",{"_index":141,"title":{"modules/GuildUserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/GuildUserModule.html":{},"modules.html":{},"overview.html":{}}}],["guildusers.map((guilduser",{"_index":2351,"title":{},"body":{"injectables/SelfService.html":{}}}],["guilduserservice",{"_index":1137,"title":{"injectables/GuildUserService.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["hacky",{"_index":2821,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["handleevent",{"_index":204,"title":{},"body":{"injectables/AppService.html":{}}}],["handleevent(event",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["handler",{"_index":27,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildService.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["handler()@usefilters(commandvalidationfilter",{"_index":2599,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["hasattachments",{"_index":1394,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["hashandlermethod",{"_index":1049,"title":{},"body":{"classes/Explorer.html":{}}}],["hashandlermethod(provider",{"_index":1057,"title":{},"body":{"classes/Explorer.html":{}}}],["hasrequiredrank",{"_index":257,"title":{"guards/HasRequiredRank.html":{}},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["hast",{"_index":2586,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["haven't",{"_index":2528,"title":{},"body":{"injectables/TasksService.html":{}}}],["having",{"_index":3364,"title":{},"body":{"license.html":{}}}],["headers",{"_index":1928,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["headpat",{"_index":2450,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["heartened",{"_index":3184,"title":{},"body":{"license.html":{}}}],["helfen",{"_index":956,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["helper",{"_index":940,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{}}}],["helper.ts",{"_index":2923,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["hence",{"_index":3885,"title":{},"body":{"properties.html":{}}}],["here",{"_index":1031,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"classes/RoleResponse.html":{},"index.html":{}}}],["here](${message.url",{"_index":2774,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["hereafter",{"_index":3702,"title":{},"body":{"license.html":{}}}],["hex",{"_index":912,"title":{},"body":{"classes/DiscordUser.html":{}}}],["hexaccentcolor",{"_index":892,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["hier",{"_index":2122,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["higher",{"_index":997,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["higher.guard",{"_index":1258,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["higher.guard.ts",{"_index":2212,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["higher.guard.ts:11",{"_index":2213,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["higher.guard.ts:16",{"_index":2214,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["hilfe",{"_index":961,"title":{},"body":{"injectables/DmMessageHandler.html":{},"miscellaneous/functions.html":{}}}],["hoist",{"_index":970,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["hoisted",{"_index":981,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["holder",{"_index":3634,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3591,"title":{},"body":{"license.html":{}}}],["hope",{"_index":3857,"title":{},"body":{"license.html":{}}}],["host",{"_index":640,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["host.getargbyindex(0",{"_index":707,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["host.switchtohttp",{"_index":642,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["hosts",{"_index":3502,"title":{},"body":{"license.html":{}}}],["hours",{"_index":2840,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["household",{"_index":3524,"title":{},"body":{"license.html":{}}}],["hs256",{"_index":1910,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["http",{"_index":635,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["httpcode",{"_index":1574,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["httpcode(httpstatuscode.accepted",{"_index":1582,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["httpmodule",{"_index":1874,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["https://cdn.discordapp.com/emojis/859111454677139476.webp",{"_index":1009,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["https://discordapp.com/api/oauth2/token",{"_index":1916,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["https://fsf.org",{"_index":3123,"title":{},"body":{"license.html":{}}}],["https://github.com/89q12/mega",{"_index":825,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["https://github.com/discordjs/discord.js/issues/4930#issuecomment",{"_index":1314,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["https://nestjs.com",{"_index":3048,"title":{},"body":{"index.html":{}}}],["https://old.discordjs.dev/#/docs/discord.js/main/class/role?scrollto=seticon",{"_index":1021,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["https://www.gnu.org/licenses",{"_index":3876,"title":{},"body":{"license.html":{}}}],["httpservice",{"_index":1843,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["httpstatus",{"_index":629,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["httpstatuscode",{"_index":1576,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["hug",{"_index":2470,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["i.customid",{"_index":2154,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["ia",{"_index":739,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["ia(modalfieldstransformpipe",{"_index":804,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["ia(slashcommandpipe",{"_index":760,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["ich",{"_index":944,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["icon",{"_index":971,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["iconurl",{"_index":822,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["id",{"_index":72,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/Channel.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SettingsChanged.html":{},"classes/UnverifyByRoleCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifiable",{"_index":3730,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":2874,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1927,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["ids",{"_index":446,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"injectables/SelfService.html":{}}}],["iffy",{"_index":1347,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ignoreenvvars",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":1961,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["image",{"_index":1076,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{}}}],["images",{"_index":448,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["implement",{"_index":1034,"title":{},"body":{"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"license.html":{}}}],["implementation",{"_index":3311,"title":{},"body":{"license.html":{}}}],["implemented",{"_index":2729,"title":{},"body":{"controllers/UserController.html":{}}}],["implements",{"_index":501,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RestrictedChannelDto.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["implied",{"_index":3755,"title":{},"body":{"license.html":{}}}],["import",{"_index":31,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["importing",{"_index":3693,"title":{},"body":{"license.html":{}}}],["imports",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["impose",{"_index":3619,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":3758,"title":{},"body":{"license.html":{}}}],["improvements",{"_index":3176,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3819,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":3822,"title":{},"body":{"license.html":{}}}],["inc",{"_index":3122,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3816,"title":{},"body":{"license.html":{}}}],["include",{"_index":3301,"title":{},"body":{"license.html":{}}}],["included",{"_index":3303,"title":{},"body":{"license.html":{}}}],["includes",{"_index":3257,"title":{},"body":{"license.html":{}}}],["including",{"_index":3320,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":3459,"title":{},"body":{"license.html":{}}}],["incorporate",{"_index":3182,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3776,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":3527,"title":{},"body":{"license.html":{}}}],["indemnification",{"_index":3615,"title":{},"body":{"license.html":{}}}],["independent",{"_index":3447,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":3659,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":3625,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3457,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":3235,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":3541,"title":{},"body":{"license.html":{}}}],["inestapplication",{"_index":2205,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["inform",{"_index":3509,"title":{},"body":{"license.html":{}}}],["information",{"_index":2629,"title":{},"body":{"classes/TimeOutCommand.html":{},"license.html":{}}}],["infringe",{"_index":3657,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3690,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3249,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":1806,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["inheritedranks",{"_index":1811,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inheritedranks[user.rank",{"_index":1803,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["initguildcommand",{"_index":395,"title":{"classes/initGuildCommand.html":{}},"body":{"modules/BotModule.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["initiate",{"_index":3683,"title":{},"body":{"license.html":{}}}],["initiatemodrequestflow",{"_index":2054,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["initiatemodrequestflow(interaction",{"_index":2061,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["inject",{"_index":37,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["inject(auditlogservice",{"_index":262,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["inject(eventemitter2",{"_index":221,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["inject(guildautodeletechannelservice",{"_index":1108,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["inject(guildrestrictedchannelservice",{"_index":1500,"title":{},"body":{"injectables/GuildService.html":{}}}],["inject(guildservice",{"_index":1200,"title":{},"body":{"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["inject(guildsettingsservice",{"_index":859,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["inject(guilduserservice",{"_index":1266,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/TasksService.html":{}}}],["inject(prismaservice",{"_index":51,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["inject(reflector",{"_index":1792,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["inject(tasksservice",{"_index":1154,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["injectable",{"_index":199,"title":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":200,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectdiscordclient",{"_index":33,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["input",{"_index":710,"title":{},"body":{"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionDto.html":{},"classes/UserTimeOutDto.html":{}}}],["inputs",{"_index":800,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["insertmessage",{"_index":1699,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["insertmessage(data",{"_index":1723,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["install",{"_index":3319,"title":{},"body":{"license.html":{}}}],["installation",{"_index":3015,"title":{},"body":{"index.html":{},"license.html":{}}}],["installed",{"_index":3563,"title":{},"body":{"license.html":{}}}],["installrunning",{"_index":3017,"title":{},"body":{"index.html":{}}}],["instance",{"_index":248,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildSettingsController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{}}}],["instance.ts",{"_index":2925,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["instanceof",{"_index":863,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/variables.html":{}}}],["int",{"_index":838,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["intact",{"_index":3421,"title":{},"body":{"license.html":{}}}],["integration",{"_index":1012,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["intended",{"_index":3147,"title":{},"body":{"license.html":{}}}],["intention",{"_index":3410,"title":{},"body":{"license.html":{}}}],["intents",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["interact",{"_index":3863,"title":{},"body":{"license.html":{}}}],["interacting",{"_index":3770,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":29,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"guards/IsModalInteractionGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["interaction.channel.messages.fetch",{"_index":2373,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["interaction.channel.send",{"_index":2182,"title":{},"body":{"classes/MumVoiceCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["interaction.customid",{"_index":2116,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["interaction.customid.endswith",{"_index":3103,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.customid.includes('community",{"_index":776,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.customid.split",{"_index":777,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["interaction.deferreply",{"_index":668,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/ModRequestFlow.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.deletereply",{"_index":2126,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.editreply",{"_index":2110,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.editreply(options",{"_index":2146,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.fields.gettextinputvalue('modrequestmessage",{"_index":2102,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.followup",{"_index":697,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.guard",{"_index":755,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.guard.ts",{"_index":1813,"title":{},"body":{"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["interaction.guard.ts:5",{"_index":1814,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interaction.guild.channels.fetch(settings.introchannelid",{"_index":3079,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.leavechannelid",{"_index":3082,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.modchannelid)).name",{"_index":3085,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.openintrochannelid",{"_index":3075,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.members.fetch().then((members",{"_index":53,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["interaction.guild.members.fetch(dto.user",{"_index":2473,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["interaction.guild.roles.fetch(settings.adminroleid)).name",{"_index":3091,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.modroleid)).name",{"_index":3088,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.unverifiedmemberroleid",{"_index":3098,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.verifiedmemberroleid",{"_index":3094,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guildid",{"_index":672,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.isanyselectmenu",{"_index":3104,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.isbutton",{"_index":775,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["interaction.ischannelselectmenu",{"_index":3105,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.iscontextmenucommand",{"_index":2372,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["interaction.ismodalsubmit",{"_index":2081,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.isrepliable",{"_index":718,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["interaction.isroleselectmenu",{"_index":3109,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.isstringselectmenu",{"_index":2115,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.reply",{"_index":719,"title":{},"body":{"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["interaction.showmodal(modal",{"_index":802,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.showmodal(modrequestmodal",{"_index":2125,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction.targetid",{"_index":2374,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["interaction.type",{"_index":1816,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interaction.user.id",{"_index":2092,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/SpecialCommand.html":{}}}],["interaction.values[0",{"_index":3106,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.values[0].split",{"_index":2118,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interaction?.guildid",{"_index":2134,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["interactionevent",{"_index":34,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["interactiontype",{"_index":1815,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interactiontype.modalsubmit",{"_index":1817,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interactive",{"_index":3267,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":3473,"title":{},"body":{"license.html":{}}}],["interest",{"_index":3676,"title":{},"body":{"license.html":{}}}],["interface",{"_index":363,"title":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{}},"body":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{},"license.html":{}}}],["interfaces",{"_index":365,"title":{},"body":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{},"license.html":{},"overview.html":{}}}],["interfered",{"_index":3552,"title":{},"body":{"license.html":{}}}],["internalservererrorexception",{"_index":3921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interpretation",{"_index":3830,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":3317,"title":{},"body":{"license.html":{}}}],["interval",{"_index":1470,"title":{},"body":{"injectables/GuildService.html":{}}}],["intimate",{"_index":3336,"title":{},"body":{"license.html":{}}}],["intro",{"_index":3076,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["introchannelid",{"_index":2388,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["introduction",{"_index":2772,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["invalid",{"_index":1126,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["invalid_grant",{"_index":1940,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["invalid_request",{"_index":2002,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invalidate",{"_index":3442,"title":{},"body":{"license.html":{}}}],["invite",{"_index":1987,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invite_created",{"_index":2003,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invite_deleted",{"_index":2004,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invoker",{"_index":1980,"title":{},"body":{"classes/LogEntry.html":{}}}],["invokerid",{"_index":278,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/UserInfoUiCommand.html":{}}}],["involved",{"_index":1974,"title":{},"body":{"classes/LogEntry.html":{}}}],["irrevocable",{"_index":3348,"title":{},"body":{"license.html":{}}}],["isactive",{"_index":1700,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["isactive(userid",{"_index":1728,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["isarray",{"_index":477,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isarray()@isstring()@isoptional()@apiproperty({description",{"_index":444,"title":{},"body":{"classes/Channel.html":{}}}],["isavailable",{"_index":1553,"title":{},"body":{"injectables/GuildService.html":{}}}],["isboolean",{"_index":478,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["isboolean()@apiproperty({type",{"_index":876,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/RoleResponse.html":{}}}],["isboolean()@isoptional()@apiproperty({description",{"_index":451,"title":{},"body":{"classes/Channel.html":{}}}],["isboolean()@isoptional()@apiproperty({type",{"_index":980,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{}}}],["ischannelavailabletouser",{"_index":1421,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["ischannelavailabletouser(user",{"_index":1427,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{}}}],["isdate",{"_index":1992,"title":{},"body":{"classes/LogEntry.html":{}}}],["isdate()@apiproperty({type",{"_index":1971,"title":{},"body":{"classes/LogEntry.html":{}}}],["isdatestring",{"_index":885,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/UserTimeOutDto.html":{}}}],["isdatestring()@isoptional()@apipropertyoptional({type",{"_index":878,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["isenum",{"_index":479,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isenum(channeltype",{"_index":490,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isenum(channeltype)@isoptional()@apiproperty({enum",{"_index":1186,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["isglobal",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":300,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["isin(['string",{"_index":1181,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["isin([string",{"_index":496,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isin(actions",{"_index":309,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["isin(object.keys(colors",{"_index":1016,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isin(object.keys(permissionflagsbits",{"_index":1018,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isin(targettypes",{"_index":308,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["isin(undefined)@apiproperty({enum",{"_index":976,"title":{},"body":{"classes/EditRoleData.html":{}}}],["isin(undefined)@isoptional()@apiproperty({type",{"_index":993,"title":{},"body":{"classes/EditRoleData.html":{}}}],["isinstance",{"_index":480,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isinstance(permissionoverwrite",{"_index":487,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isinstance(permissionoverwrite)@isoptional()@apiproperty({description",{"_index":458,"title":{},"body":{"classes/Channel.html":{}}}],["ismodalinteractionguard",{"_index":752,"title":{"guards/IsModalInteractionGuard.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["isn't",{"_index":622,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["isnumber",{"_index":481,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isnumber()@apiproperty({description",{"_index":427,"title":{},"body":{"classes/Channel.html":{}}}],["isnumber()@apiproperty({type",{"_index":894,"title":{},"body":{"classes/DiscordUser.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isnumber()@isoptional()@apiproperty({description",{"_index":462,"title":{},"body":{"classes/Channel.html":{}}}],["isnumber()@isoptional()@apiproperty({type",{"_index":996,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{}}}],["isoptional",{"_index":301,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{}}}],["isstring",{"_index":302,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{}}}],["isstring()@apiproperty({description",{"_index":434,"title":{},"body":{"classes/Channel.html":{},"classes/PermissionOverwrite.html":{}}}],["isstring()@apiproperty({type",{"_index":874,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isstring()@isoptional()@apiproperty({description",{"_index":440,"title":{},"body":{"classes/Channel.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":985,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{}}}],["isstring()@isoptional()@apipropertyoptional({type",{"_index":2397,"title":{},"body":{"classes/SettingsDto.html":{}}}],["isstring()@matches(/^(((\\d+,)+\\d+|(\\d",{"_index":1123,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["issuer",{"_index":1907,"title":{},"body":{"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["isurl",{"_index":1004,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isurl()@apiproperty({type",{"_index":2282,"title":{},"body":{"classes/RoleResponse.html":{}}}],["isuserunlockedguard",{"_index":858,"title":{"guards/IsUserUnlockedGuard.html":{}},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMessageHandler.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["it.action",{"_index":275,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.adminroleid",{"_index":1643,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.avatarurl",{"_index":1679,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.createdat",{"_index":277,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.displayname",{"_index":1682,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.guild.name",{"_index":1683,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.introchannelid",{"_index":1646,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.invokerid",{"_index":279,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.members.fetch(userid",{"_index":1678,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.modchannelid",{"_index":1647,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.modroleid",{"_index":1642,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.openintrochannelid",{"_index":1645,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.reason",{"_index":281,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.targetid",{"_index":283,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.targettype",{"_index":284,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.unverifiedmemberroleid",{"_index":1641,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.verifiedmemberroleid",{"_index":1640,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.welcomemessageformat",{"_index":1644,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["item",{"_index":3283,"title":{},"body":{"license.html":{}}}],["items",{"_index":923,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["itself",{"_index":3567,"title":{},"body":{"license.html":{}}}],["jest",{"_index":2945,"title":{},"body":{"dependencies.html":{}}}],["joboptions",{"_index":2538,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.crontime",{"_index":2545,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.oncomplete",{"_index":2547,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.ontick",{"_index":2546,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.start",{"_index":2548,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.timezone",{"_index":2549,"title":{},"body":{"injectables/TasksService.html":{}}}],["jobs",{"_index":2501,"title":{},"body":{"modules/TasksModule.html":{}}}],["jobs/tasks",{"_index":2507,"title":{},"body":{"injectables/TasksService.html":{}}}],["john",{"_index":918,"title":{},"body":{"classes/DiscordUser.html":{}}}],["join",{"_index":1467,"title":{},"body":{"injectables/GuildService.html":{},"index.html":{}}}],["join('\\n",{"_index":693,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildSettingsService.html":{},"injectables/TasksService.html":{}}}],["json.stringify(error.response.data",{"_index":1938,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["jsonarray",{"_index":1264,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["jwt",{"_index":1838,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtauthcontroller",{"_index":1821,"title":{"controllers/JwtAuthController.html":{}},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"coverage.html":{}}}],["jwtauthguard",{"_index":86,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtauthguard.name",{"_index":3918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthmodule",{"_index":106,"title":{"modules/JwtAuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/JwtAuthModule.html":{},"modules.html":{},"overview.html":{}}}],["jwtauthservice",{"_index":1837,"title":{"injectables/JwtAuthService.html":{}},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"coverage.html":{},"overview.html":{}}}],["jwtauthstrategy",{"_index":1863,"title":{"injectables/JwtAuthStrategy.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtconstants.secret",{"_index":1878,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtfromrequest",{"_index":1959,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["jwtmodule",{"_index":1868,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtmodule.register",{"_index":1876,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtservice",{"_index":1886,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["kaffee",{"_index":2436,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["kamil",{"_index":3045,"title":{},"body":{"index.html":{}}}],["kann",{"_index":950,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kategorie",{"_index":2103,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["keep",{"_index":3420,"title":{},"body":{"license.html":{}}}],["kein",{"_index":951,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kernel",{"_index":3313,"title":{},"body":{"license.html":{}}}],["key",{"_index":716,"title":{},"body":{"classes/CommandValidationFilter.html":{},"controllers/GuildController.html":{},"injectables/GuildSettingsService.html":{},"classes/LogEntry.html":{},"license.html":{}}}],["key.endswith('roleid",{"_index":1630,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["keyof",{"_index":1634,"title":{},"body":{"injectables/GuildSettingsService.html":{},"injectables/ModRequestFlow.html":{},"classes/SettingsChanged.html":{}}}],["keys",{"_index":3546,"title":{},"body":{"license.html":{}}}],["kick",{"_index":659,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/LogEntry.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["kicked",{"_index":680,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["kickmembers",{"_index":665,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["kicks",{"_index":2527,"title":{},"body":{"injectables/TasksService.html":{}}}],["kickuser",{"_index":2680,"title":{},"body":{"controllers/UserController.html":{}}}],["kickuser(guildid",{"_index":2690,"title":{},"body":{"controllers/UserController.html":{}}}],["kind",{"_index":3261,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":3134,"title":{},"body":{"license.html":{}}}],["klicke",{"_index":957,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["know",{"_index":3160,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":3719,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":3727,"title":{},"body":{"license.html":{}}}],["knownbuttons",{"_index":2127,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["knownbuttons](interaction",{"_index":2132,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["konnten",{"_index":685,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["konsul",{"_index":2437,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["koverstionen",{"_index":952,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kuchen",{"_index":2428,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["käsekuchen",{"_index":2424,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["labels",{"_index":1203,"title":{},"body":{"controllers/GuildController.html":{}}}],["labels.push",{"_index":1207,"title":{},"body":{"controllers/GuildController.html":{}}}],["labels.push(key",{"_index":1212,"title":{},"body":{"controllers/GuildController.html":{}}}],["language",{"_index":3296,"title":{},"body":{"license.html":{}}}],["larger",{"_index":3451,"title":{},"body":{"license.html":{}}}],["last",{"_index":441,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{}}}],["lastmessageid",{"_index":418,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["later",{"_index":3789,"title":{},"body":{"license.html":{}}}],["latte",{"_index":2438,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["law",{"_index":3251,"title":{},"body":{"license.html":{}}}],["laws",{"_index":3225,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3688,"title":{},"body":{"license.html":{}}}],["leads",{"_index":3866,"title":{},"body":{"license.html":{}}}],["leavechannelid",{"_index":2389,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["leavemessageformat",{"_index":2390,"title":{},"body":{"classes/SettingsDto.html":{}}}],["legal",{"_index":3170,"title":{},"body":{"license.html":{}}}],["legend",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1377,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["letting",{"_index":3194,"title":{},"body":{"license.html":{}}}],["liability",{"_index":3594,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3248,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3299,"title":{},"body":{"license.html":{}}}],["library",{"_index":3517,"title":{},"body":{"license.html":{}}}],["license",{"_index":3051,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3031,"title":{},"body":{"index.html":{},"license.html":{}}}],["licensee",{"_index":3231,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":3233,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":3141,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":3661,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":3606,"title":{},"body":{"license.html":{}}}],["lift",{"_index":43,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["likewise",{"_index":3654,"title":{},"body":{"license.html":{}}}],["limit",{"_index":230,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"license.html":{}}}],["limitation",{"_index":3813,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3800,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":3593,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1502,"title":{},"body":{"injectables/GuildService.html":{}}}],["line",{"_index":3853,"title":{},"body":{"license.html":{}}}],["link",{"_index":2771,"title":{},"body":{"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["linked",{"_index":3333,"title":{},"body":{"license.html":{}}}],["list",{"_index":2019,"title":{},"body":{"classes/LogEntry.html":{},"injectables/SelfService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["listens",{"_index":1487,"title":{},"body":{"injectables/GuildService.html":{}}}],["literal",{"_index":329,"title":{},"body":{"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{}}}],["litigation",{"_index":3684,"title":{},"body":{"license.html":{}}}],["local",{"_index":2791,"title":{},"body":{"modules/UserModule.html":{},"license.html":{}}}],["lockdown",{"_index":44,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["log",{"_index":220,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"injectables/JwtAuthService.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["log.ts",{"_index":1032,"title":{},"body":{"interfaces/EventToLog.html":{},"coverage.html":{}}}],["log.ts:11",{"_index":1038,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["logchannel.send",{"_index":2563,"title":{},"body":{"injectables/TasksService.html":{}}}],["logentries",{"_index":1968,"title":{},"body":{"classes/LogEntry.html":{}}}],["logentry",{"_index":324,"title":{"classes/LogEntry.html":{}},"body":{"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{}}}],["logentrydto",{"_index":243,"title":{"classes/LogEntryDto.html":{}},"body":{"controllers/AuditLogController.html":{},"classes/LogEntryDto.html":{},"coverage.html":{}}}],["logged",{"_index":2299,"title":{},"body":{"controllers/SelfController.html":{}}}],["logger",{"_index":203,"title":{},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"controllers/RoleController.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["logger('appservice",{"_index":217,"title":{},"body":{"injectables/AppService.html":{}}}],["logger('requestguilduser",{"_index":3911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('requestuser",{"_index":3924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('rolecontroller",{"_index":2260,"title":{},"body":{"controllers/RoleController.html":{},"miscellaneous/variables.html":{}}}],["logger('taskservice",{"_index":2544,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["logger(channelcontroller.name",{"_index":583,"title":{},"body":{"controllers/ChannelController.html":{}}}],["logger(dmmessagehandler.name",{"_index":932,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["logger(guildautodeletechannelservice.name",{"_index":1153,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["logger(guildmemberevents.name",{"_index":1255,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["logger(hasrequiredrank.name",{"_index":1791,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["logger(jwtauthcontroller.name",{"_index":1847,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["logger(jwtauthservice.name",{"_index":1897,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["logger(modrequestflow.name",{"_index":2071,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["logger(usercontroller.name",{"_index":2708,"title":{},"body":{"controllers/UserController.html":{}}}],["logger.error",{"_index":2673,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.error(`${ctx.gethandler().tostring",{"_index":3914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger.log",{"_index":521,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.log(`checking",{"_index":2551,"title":{},"body":{"injectables/TasksService.html":{}}}],["logger.log(`created",{"_index":2268,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`deleted",{"_index":2276,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`found",{"_index":2264,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`settingschanged",{"_index":2384,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["logger.log(`updated",{"_index":2274,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`userbanevent",{"_index":2667,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.log(`userkickevent",{"_index":2670,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logging",{"_index":1042,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["login",{"_index":1825,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["login(@query('code",{"_index":1852,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["login(code",{"_index":1827,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["login(userid",{"_index":1891,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["long",{"_index":3359,"title":{},"body":{"license.html":{}}}],["longer",{"_index":661,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["loss",{"_index":3820,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3823,"title":{},"body":{"license.html":{}}}],["lower",{"_index":1808,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["lowest",{"_index":1810,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["lte",{"_index":349,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["m",{"_index":1466,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.channelid",{"_index":1460,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.createdat",{"_index":1475,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.userid",{"_index":1461,"title":{},"body":{"injectables/GuildService.html":{}}}],["macchiato",{"_index":2439,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["machine",{"_index":3463,"title":{},"body":{"license.html":{}}}],["made",{"_index":3177,"title":{},"body":{"license.html":{}}}],["mail",{"_index":3862,"title":{},"body":{"license.html":{}}}],["maintain",{"_index":3497,"title":{},"body":{"license.html":{}}}],["major",{"_index":3306,"title":{},"body":{"license.html":{}}}],["make",{"_index":1309,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["makes",{"_index":3381,"title":{},"body":{"license.html":{}}}],["making",{"_index":3192,"title":{},"body":{"license.html":{}}}],["manage",{"_index":2790,"title":{},"body":{"modules/UserModule.html":{}}}],["managed",{"_index":1011,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["manages",{"_index":2499,"title":{},"body":{"modules/TasksModule.html":{}}}],["managing",{"_index":2506,"title":{},"body":{"injectables/TasksService.html":{}}}],["manner",{"_index":3703,"title":{},"body":{"license.html":{}}}],["many",{"_index":3183,"title":{},"body":{"license.html":{}}}],["map",{"_index":1477,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["map((it",{"_index":1656,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["map((member",{"_index":691,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["map((row",{"_index":3100,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["map((user",{"_index":2135,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["march",{"_index":3752,"title":{},"body":{"license.html":{}}}],["marked",{"_index":3603,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3613,"title":{},"body":{"license.html":{}}}],["masks",{"_index":3228,"title":{},"body":{"license.html":{}}}],["match",{"_index":2830,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('d",{"_index":2833,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('h",{"_index":2835,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('m",{"_index":2837,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('d",{"_index":2834,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('h",{"_index":2836,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('m",{"_index":2838,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["matches",{"_index":1130,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["matches(/^(((\\d+,)+\\d+|(\\d",{"_index":1131,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["matching",{"_index":80,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":3368,"title":{},"body":{"license.html":{}}}],["materially",{"_index":3568,"title":{},"body":{"license.html":{}}}],["maybe",{"_index":2469,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["meaning",{"_index":1807,"title":{},"body":{"guards/HasRequiredRank.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":3224,"title":{},"body":{"license.html":{}}}],["measure",{"_index":3390,"title":{},"body":{"license.html":{}}}],["measures",{"_index":3402,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3416,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3430,"title":{},"body":{"license.html":{}}}],["meets",{"_index":3284,"title":{},"body":{"license.html":{}}}],["mega",{"_index":3886,"title":{},"body":{"properties.html":{}}}],["member",{"_index":55,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["member.communicationdisableduntiltimestamp",{"_index":2557,"title":{},"body":{"injectables/TasksService.html":{}}}],["member.displayavatarurl",{"_index":2713,"title":{},"body":{"controllers/UserController.html":{}}}],["member.displayname",{"_index":2716,"title":{},"body":{"controllers/UserController.html":{}}}],["member.guild.id",{"_index":66,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{}}}],["member.guild.ownerid",{"_index":1754,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["member.id",{"_index":68,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.kick",{"_index":1520,"title":{},"body":{"injectables/GuildService.html":{}}}],["member.roles.add",{"_index":2658,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.add('1014066383912439809",{"_index":1306,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.add('1121823930085285938",{"_index":2657,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.add(role.id",{"_index":75,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["member.roles.add(verifiedroleid",{"_index":1304,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.cache.foreach((role",{"_index":2649,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1011513775054143632",{"_index":57,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1011563978956226560",{"_index":56,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1070116538083975309",{"_index":1513,"title":{},"body":{"injectables/GuildService.html":{}}}],["member.roles.cache.has('1121823930085285938",{"_index":59,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["member.roles.cache.has('1226585753253843014",{"_index":1299,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.remove",{"_index":1319,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.remove(role.id",{"_index":2656,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.timeout(parseint(duration",{"_index":2738,"title":{},"body":{"controllers/UserController.html":{}}}],["member.ts",{"_index":869,"title":{},"body":{"classes/DiscordGuildMember.html":{},"coverage.html":{}}}],["member.ts:11",{"_index":881,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:15",{"_index":879,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:18",{"_index":880,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:21",{"_index":884,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:24",{"_index":875,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:27",{"_index":877,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:8",{"_index":883,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.user",{"_index":2721,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.bot",{"_index":1280,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["member.user.globalname",{"_index":2717,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.id",{"_index":2714,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.username",{"_index":1279,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["member?.communicationdisableduntil?.tojson",{"_index":2715,"title":{},"body":{"controllers/UserController.html":{}}}],["members",{"_index":660,"title":{},"body":{"classes/CleanWfpMember.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["members.fetch(dbuser.userid.tostring",{"_index":2556,"title":{},"body":{"injectables/TasksService.html":{}}}],["members.fetch(user.id",{"_index":1342,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members.fetch(user.userid",{"_index":1298,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members.foreach(async",{"_index":54,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["members.map((member",{"_index":2711,"title":{},"body":{"controllers/UserController.html":{}}}],["members.push(member",{"_index":1514,"title":{},"body":{"injectables/GuildService.html":{}}}],["members.size",{"_index":2710,"title":{},"body":{"controllers/UserController.html":{}}}],["members/index.ts",{"_index":1225,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{}}}],["members/index.ts:125",{"_index":1253,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:143",{"_index":1240,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:23",{"_index":1232,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:37",{"_index":1243,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:48",{"_index":1236,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:58",{"_index":1246,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:69",{"_index":1249,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["memberstokick",{"_index":1518,"title":{},"body":{"injectables/GuildService.html":{}}}],["membersunfiltered",{"_index":1508,"title":{},"body":{"injectables/GuildService.html":{}}}],["membersunfiltered.foreach(async",{"_index":1510,"title":{},"body":{"injectables/GuildService.html":{}}}],["mentionable",{"_index":972,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["menu",{"_index":1412,"title":{},"body":{"modules/GuildModule.html":{},"license.html":{}}}],["menu/index.ts",{"_index":2052,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{}}}],["menu/index.ts:110",{"_index":2067,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:136",{"_index":2064,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:157",{"_index":2062,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:181",{"_index":2060,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:33",{"_index":2058,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["menu/index.ts:43",{"_index":2070,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["merchantability",{"_index":3801,"title":{},"body":{"license.html":{}}}],["mere",{"_index":3264,"title":{},"body":{"license.html":{}}}],["merging",{"_index":3672,"title":{},"body":{"license.html":{}}}],["message",{"_index":404,"title":{},"body":{"modules/BotModule.html":{},"classes/Channel.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["message).inguild",{"_index":864,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"miscellaneous/variables.html":{}}}],["message.attachments.map",{"_index":1397,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.attachments.map((attachment",{"_index":1379,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.attachments.size",{"_index":1395,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.author.bot",{"_index":2032,"title":{},"body":{"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{}}}],["message.author.id",{"_index":1371,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["message.channel",{"_index":1387,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.channelid",{"_index":1374,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"miscellaneous/variables.html":{}}}],["message.content",{"_index":1654,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["message.content.length",{"_index":1378,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.fetch",{"_index":2219,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.guildid",{"_index":1375,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["message.id",{"_index":1373,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.member.roles.cache.has",{"_index":865,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["message.message",{"_index":3909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message.message.guildid",{"_index":2223,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.message.inguild",{"_index":2220,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.partial",{"_index":2218,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.react('1194715694948946030",{"_index":1392,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.reactions.cache.map((reaction",{"_index":1382,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.reply",{"_index":943,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts",{"_index":927,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"coverage.html":{}}}],["message/index.ts:10",{"_index":1356,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message/index.ts:14",{"_index":933,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts:17",{"_index":1359,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message/index.ts:18",{"_index":931,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts:53",{"_index":1361,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message_deleted",{"_index":2005,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["messageactionrowcomponentbuilder",{"_index":3063,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["messagecount",{"_index":1463,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["messagecountbucket",{"_index":1753,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["messagecounts",{"_index":1528,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagefromuserguard",{"_index":1363,"title":{"guards/MessageFromUserGuard.html":{}},"body":{"injectables/GuildMessageHandler.html":{},"guards/MessageFromUserGuard.html":{},"coverage.html":{}}}],["messageid",{"_index":1372,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{}}}],["messageisdmguard",{"_index":935,"title":{"guards/MessageIsDmGuard.html":{}},"body":{"injectables/DmMessageHandler.html":{},"guards/MessageIsDmGuard.html":{},"coverage.html":{}}}],["messagemetadata",{"_index":1724,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["messagereaction",{"_index":1238,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["messagereaction).emoji.name",{"_index":3929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagereference",{"_index":2185,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["messages",{"_index":419,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{}}}],["messages.last().createdtimestamp",{"_index":612,"title":{},"body":{"controllers/ChannelController.html":{}}}],["messagesdeleted",{"_index":504,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["messagesperchannellastmonth",{"_index":1191,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperchannellastmonth(@param('guildid",{"_index":1201,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperchannellastmonth(guildid",{"_index":1193,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth",{"_index":1192,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth(@param('guildid",{"_index":1209,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth(guildid",{"_index":1197,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagestats",{"_index":1525,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagestats.reduce",{"_index":1545,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagestats.reduce((acc",{"_index":1530,"title":{},"body":{"injectables/GuildService.html":{}}}],["met",{"_index":3350,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1063,"title":{},"body":{"classes/Explorer.html":{},"injectables/GuildUserService.html":{},"dependencies.html":{}}}],["method",{"_index":1067,"title":{},"body":{"classes/Explorer.html":{}}}],["methods",{"_index":9,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["midnight",{"_index":2526,"title":{},"body":{"injectables/TasksService.html":{}}}],["minutes",{"_index":2521,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{}}}],["miscchannelid",{"_index":3108,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["miscellaneous",{"_index":2960,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misrepresentation",{"_index":3601,"title":{},"body":{"license.html":{}}}],["mit",{"_index":2589,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"index.html":{}}}],["mixin(channelidguardmixin",{"_index":3910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mixin(reactionemote",{"_index":3930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mock",{"_index":2946,"title":{},"body":{"dependencies.html":{}}}],["mod",{"_index":1257,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["modal",{"_index":754,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"guards/IsModalInteractionGuard.html":{},"injectables/ModRequestFlow.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["modal.addcomponents(questioncomponentrow",{"_index":801,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.customid.split",{"_index":809,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.customid.startswith('community",{"_index":808,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.ismodalsubmit",{"_index":807,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.reply",{"_index":831,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modalactionrowcomponentbuilder",{"_index":744,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["modalbuilder",{"_index":745,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["modalfieldstransformpipe",{"_index":750,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modalsubmitinteraction",{"_index":2069,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modannouncementdto",{"_index":2035,"title":{"classes/ModAnnouncementDto.html":{}},"body":{"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"coverage.html":{}}}],["modchannelid",{"_index":2391,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["mode",{"_index":3021,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":3479,"title":{},"body":{"license.html":{}}}],["moderatemembers",{"_index":46,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["moderation",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["moderation/moderation.module",{"_index":1406,"title":{},"body":{"modules/GuildModule.html":{}}}],["moderationmodule",{"_index":130,"title":{"modules/ModerationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/ModerationModule.html":{},"modules.html":{},"overview.html":{}}}],["modification",{"_index":3220,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":3287,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3193,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":3435,"title":{},"body":{"license.html":{}}}],["modify",{"_index":3172,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":3255,"title":{},"body":{"license.html":{}}}],["modrequest",{"_index":2984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modrequestcategoryselect",{"_index":2077,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["modrequestcategoryselect(guildid",{"_index":2141,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modrequestcategoryselect(suffix",{"_index":2982,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modrequestflow",{"_index":1403,"title":{"injectables/ModRequestFlow.html":{}},"body":{"modules/GuildModule.html":{},"injectables/ModRequestFlow.html":{},"coverage.html":{},"overview.html":{}}}],["modrequestmenu",{"_index":2140,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/variables.html":{}}}],["modrequestmenuid",{"_index":2078,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modrequestmodal",{"_index":2083,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modrequestmodal.addcomponents",{"_index":2119,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["modroleid",{"_index":2392,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["mods",{"_index":782,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["module",{"_index":92,"title":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":94,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mokka",{"_index":2440,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["month",{"_index":1195,"title":{},"body":{"controllers/GuildController.html":{}}}],["more",{"_index":998,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildService.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"modules/UserModule.html":{},"index.html":{},"license.html":{}}}],["moreover",{"_index":3643,"title":{},"body":{"license.html":{}}}],["ms",{"_index":2199,"title":{},"body":{"classes/PingCommand.html":{}}}],["msg",{"_index":2748,"title":{},"body":{"controllers/UserController.html":{}}}],["msg.author.id",{"_index":2749,"title":{},"body":{"controllers/UserController.html":{}}}],["msg.createdtimestamp",{"_index":614,"title":{},"body":{"controllers/ChannelController.html":{}}}],["msg.deletable",{"_index":613,"title":{},"body":{"controllers/ChannelController.html":{}}}],["msgid",{"_index":2759,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["mumvoice",{"_index":2178,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["mumvoicecommand",{"_index":386,"title":{"classes/MumVoiceCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/MumVoiceCommand.html":{},"coverage.html":{}}}],["muten",{"_index":2604,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["myśliwiec",{"_index":3046,"title":{},"body":{"index.html":{}}}],["möchtest",{"_index":2591,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/UserToUser.html":{}}}],["n\\n${quotedmessage",{"_index":1661,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["nachricht",{"_index":2048,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":2989,"title":{},"body":{"miscellaneous/functions.html":{}}}],["names",{"_index":689,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["nature",{"_index":3448,"title":{},"body":{"license.html":{}}}],["nchannel",{"_index":1170,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setname(channel.name",{"_index":1176,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setparent(channel.parentid",{"_index":1175,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setposition(channel.position",{"_index":1174,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["necessary",{"_index":3809,"title":{},"body":{"license.html":{}}}],["need",{"_index":3341,"title":{},"body":{"license.html":{}}}],["needed",{"_index":2339,"title":{},"body":{"injectables/SelfService.html":{},"license.html":{}}}],["needhelpbutton",{"_index":938,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["needhelpbuttonid",{"_index":2079,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":2324,"title":{},"body":{"injectables/SelfService.html":{},"properties.html":{}}}],["nest",{"_index":3011,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":3050,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1043,"title":{},"body":{"interfaces/EventToLog.html":{},"guards/HasRequiredRank.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":1844,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{}}}],["nestjs/config",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":36,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"injectables/DmMessageHandler.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{}}}],["nestjs/core/dist/decorators/option/choice/choice",{"_index":2866,"title":{},"body":{"classes/UserToUser.html":{}}}],["nestjs/event",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1869,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1859,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2937,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["network",{"_index":3140,"title":{},"body":{"license.html":{}}}],["never",{"_index":2210,"title":{},"body":{"injectables/PrismaService.html":{}}}],["new",{"_index":216,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newmember",{"_index":1251,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newmember.guild.id",{"_index":1335,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newmember.user.username",{"_index":1333,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newrank",{"_index":1331,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["next",{"_index":3500,"title":{},"body":{"license.html":{}}}],["nicht",{"_index":683,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["node.js",{"_index":3004,"title":{},"body":{"index.html":{}}}],["non",{"_index":3288,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":3486,"title":{},"body":{"license.html":{}}}],["normal",{"_index":3304,"title":{},"body":{"license.html":{}}}],["normally",{"_index":3522,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":1102,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/UserController.html":{}}}],["notfoundexception('guild",{"_index":2746,"title":{},"body":{"controllers/UserController.html":{}}}],["nothing",{"_index":3655,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3276,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3270,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":3644,"title":{},"body":{"license.html":{}}}],["notify",{"_index":3640,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":3588,"title":{},"body":{"license.html":{}}}],["november",{"_index":3115,"title":{},"body":{"license.html":{}}}],["now",{"_index":904,"title":{},"body":{"classes/DiscordUser.html":{}}}],["nsfw",{"_index":420,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["null",{"_index":342,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":231,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["numbered",{"_index":3788,"title":{},"body":{"license.html":{}}}],["nummessages",{"_index":2765,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["nummessages.tostring",{"_index":2775,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["numreactions",{"_index":2767,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["numreactions.tostring",{"_index":2776,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["nur",{"_index":947,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["nutzer:in",{"_index":830,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{}}}],["oauth",{"_index":1936,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["oauth2",{"_index":2952,"title":{},"body":{"dependencies.html":{}}}],["oautherrordata",{"_index":1899,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["object",{"_index":607,"title":{},"body":{"controllers/ChannelController.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/LogEntry.html":{},"classes/RoleResponse.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.keys(colors",{"_index":1017,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["object.keys(data).foreach((key",{"_index":1211,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.keys(data).foreach(async",{"_index":1206,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.keys(exception.constraints).map((key",{"_index":715,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["object.keys(settings).foreach(async",{"_index":1629,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["object.values(data",{"_index":1205,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.values(messagecounts[channelid",{"_index":1540,"title":{},"body":{"injectables/GuildService.html":{}}}],["obligate",{"_index":3765,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":3504,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":3392,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":3485,"title":{},"body":{"license.html":{}}}],["occur",{"_index":1994,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["occurred",{"_index":1972,"title":{},"body":{"classes/LogEntry.html":{}}}],["occurring",{"_index":3652,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":3553,"title":{},"body":{"license.html":{}}}],["offer",{"_index":3168,"title":{},"body":{"license.html":{}}}],["offered",{"_index":3511,"title":{},"body":{"license.html":{}}}],["offering",{"_index":3489,"title":{},"body":{"license.html":{}}}],["official",{"_index":3290,"title":{},"body":{"license.html":{}}}],["offset",{"_index":232,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["old",{"_index":1975,"title":{},"body":{"classes/LogEntry.html":{}}}],["old/new",{"_index":1977,"title":{},"body":{"classes/LogEntry.html":{}}}],["older",{"_index":3206,"title":{},"body":{"license.html":{}}}],["oldmember",{"_index":1254,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["oldrank",{"_index":1329,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["omit",{"_index":1120,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntryDto.html":{},"classes/RestrictedChannelDto.html":{},"classes/SettingsDto.html":{}}}],["omit(['guildid",{"_index":1638,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["on('guildmemberadd",{"_index":1235,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('guildmemberremove",{"_index":1245,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('guildmemberupdate",{"_index":1252,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('interactioncreate",{"_index":728,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["on('interactioncreate')@useguards(ismodalinteractionguard",{"_index":737,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["on('messagecreate",{"_index":941,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{}}}],["on('messagecreate')@useguards(messagefromuserguard",{"_index":1358,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["on('messagecreate')@useguards(messageisdmguard",{"_index":930,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["on('messagereactionadd",{"_index":1285,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('messagereactionadd')@useguards(undefined",{"_index":1239,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('ready",{"_index":1242,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["onadminroleidchanged",{"_index":1701,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["onadminroleidchanged(payload",{"_index":1730,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["onbutton",{"_index":2055,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onbutton(interaction",{"_index":2063,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onbuttonpress",{"_index":722,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["onbuttonpress(interaction",{"_index":726,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["once",{"_index":1498,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["once('ready",{"_index":1485,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["oncleanwfpmembers",{"_index":650,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncleanwfpmembers(@interactionevent",{"_index":667,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncleanwfpmembers(interaction",{"_index":653,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncommunityquestion",{"_index":723,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["oncommunityquestion(interaction",{"_index":730,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["oncomplete",{"_index":2540,"title":{},"body":{"injectables/TasksService.html":{}}}],["one",{"_index":1986,"title":{},"body":{"classes/LogEntry.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["onevent",{"_index":210,"title":{},"body":{"injectables/AppService.html":{},"injectables/GuildUserService.html":{}}}],["onevent('settings.role.*.changed",{"_index":1731,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["oninitguild",{"_index":3052,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninitguild(@interactionevent",{"_index":3067,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninitguild(interaction",{"_index":3056,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninteraction",{"_index":724,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/initGuildCommand.html":{}}}],["oninteraction(interaction",{"_index":3058,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninteraction(undefined",{"_index":734,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["onmenuselect",{"_index":2056,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmenuselect(interaction",{"_index":2065,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmessage",{"_index":1353,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/MumVoiceCommand.html":{}}}],["onmessage(interaction",{"_index":2172,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["onmessage(message",{"_index":1357,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["onmodalsubmit",{"_index":2057,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmodalsubmit(interaction",{"_index":2068,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["onmoduleinit",{"_index":2203,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onplaycommand",{"_index":2191,"title":{},"body":{"classes/PingCommand.html":{}}}],["onready",{"_index":1228,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["onroleadd",{"_index":11,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onroleadd(@interactionevent",{"_index":52,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onroleadd(interaction",{"_index":24,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onshowinfo",{"_index":2366,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["onshowinfo(interaction",{"_index":2368,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["ontick",{"_index":1165,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["onticketsystemsetupcommand",{"_index":2578,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["onticketsystemsetupcommand(interaction",{"_index":2580,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["ontimeoutcommand",{"_index":2595,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["ontimeoutcommand(interaction",{"_index":2597,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["onunverifybyrole",{"_index":2639,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["onunverifybyrole(@ia",{"_index":2645,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["onunverifybyrole(baseinteraction",{"_index":2641,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["open",{"_index":3032,"title":{},"body":{"index.html":{},"classes/initGuildCommand.html":{}}}],["openintrochannelid",{"_index":2393,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["operate",{"_index":3826,"title":{},"body":{"license.html":{}}}],["operated",{"_index":3494,"title":{},"body":{"license.html":{}}}],["operating",{"_index":3315,"title":{},"body":{"license.html":{}}}],["operation",{"_index":3411,"title":{},"body":{"license.html":{}}}],["operator",{"_index":3201,"title":{},"body":{"license.html":{}}}],["opportunity",{"_index":3772,"title":{},"body":{"license.html":{}}}],["option",{"_index":3584,"title":{},"body":{"license.html":{}}}],["optional",{"_index":23,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["options",{"_index":2142,"title":{},"body":{"injectables/ModRequestFlow.html":{},"classes/UserToUser.html":{},"license.html":{}}}],["order",{"_index":1476,"title":{},"body":{"injectables/GuildService.html":{},"license.html":{}}}],["orderby",{"_index":356,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{}}}],["organization",{"_index":3668,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":3236,"title":{},"body":{"license.html":{}}}],["origin",{"_index":3602,"title":{},"body":{"license.html":{}}}],["original",{"_index":3604,"title":{},"body":{"license.html":{}}}],["others",{"_index":3362,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":3360,"title":{},"body":{"license.html":{}}}],["out",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"license.html":{},"overview.html":{}}}],["outcome",{"_index":670,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['memberstokick",{"_index":690,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['memberstokick'].length.tostring",{"_index":688,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['unkickablemembers",{"_index":696,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["outcome['unkickablemembers'].length.tostring",{"_index":695,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["outed",{"_index":2703,"title":{},"body":{"controllers/UserController.html":{}}}],["output",{"_index":3354,"title":{},"body":{"license.html":{}}}],["outside",{"_index":3374,"title":{},"body":{"license.html":{}}}],["overview",{"_index":3880,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":486,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["overwrites",{"_index":460,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["owned",{"_index":3699,"title":{},"body":{"license.html":{}}}],["ownedranks",{"_index":1802,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["ownedranks.includes(requiredrank",{"_index":1804,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["owner",{"_index":1755,"title":{},"body":{"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["owner'].includes(user.rank",{"_index":2224,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["package",{"_index":2929,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packaged",{"_index":3441,"title":{},"body":{"license.html":{}}}],["packaging",{"_index":3305,"title":{},"body":{"license.html":{}}}],["pagination",{"_index":328,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["pagination.limit",{"_index":362,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["pagination.offset",{"_index":359,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["paper",{"_index":3861,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":3631,"title":{},"body":{"license.html":{}}}],["paragraphs",{"_index":3711,"title":{},"body":{"license.html":{}}}],["param",{"_index":235,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"interfaces/EventToLog.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"guards/HasRequiredRank.html":{},"classes/ModAnnouncementDto.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["param('channelid",{"_index":592,"title":{},"body":{"controllers/ChannelController.html":{}}}],["param('duration",{"_index":2736,"title":{},"body":{"controllers/UserController.html":{}}}],["param('guildid",{"_index":263,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["param('roleid",{"_index":2271,"title":{},"body":{"controllers/RoleController.html":{}}}],["param('userid",{"_index":2723,"title":{},"body":{"controllers/UserController.html":{}}}],["param({description",{"_index":835,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["param({name",{"_index":2041,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["parameter",{"_index":3915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["paramtype",{"_index":843,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["paramtype.string",{"_index":844,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["paramtype.user",{"_index":2819,"title":{},"body":{"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["parent",{"_index":454,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{}}}],["parentid",{"_index":421,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["parseint(_days",{"_index":2839,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(_hours",{"_index":2841,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(_minutes",{"_index":2842,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(questionid",{"_index":779,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["parseintpipe",{"_index":236,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["part",{"_index":3238,"title":{},"body":{"license.html":{}}}],["partial",{"_index":1602,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["partials",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.channel",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.guildmember",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.guildscheduledevent",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.message",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.reaction",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.threadmember",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.user",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["particular",{"_index":3294,"title":{},"body":{"license.html":{}}}],["parties",{"_index":3263,"title":{},"body":{"license.html":{}}}],["parts",{"_index":3340,"title":{},"body":{"license.html":{}}}],["party",{"_index":3495,"title":{},"body":{"license.html":{}}}],["party's",{"_index":3674,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1957,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":1870,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["passportstrategy",{"_index":1958,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1949,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["password",{"_index":3575,"title":{},"body":{"license.html":{}}}],["patent",{"_index":3630,"title":{},"body":{"license.html":{}}}],["patents",{"_index":3694,"title":{},"body":{"license.html":{}}}],["path",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":1733,"title":{},"body":{"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["payload.sub",{"_index":1965,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["payment",{"_index":3745,"title":{},"body":{"license.html":{}}}],["peer",{"_index":3507,"title":{},"body":{"license.html":{}}}],["peers",{"_index":3510,"title":{},"body":{"license.html":{}}}],["per",{"_index":464,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{}}}],["perform",{"_index":1784,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["performance",{"_index":3805,"title":{},"body":{"license.html":{}}}],["performed",{"_index":1969,"title":{},"body":{"classes/LogEntry.html":{}}}],["performing",{"_index":3327,"title":{},"body":{"license.html":{}}}],["periodically",{"_index":2503,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["permanently",{"_index":3639,"title":{},"body":{"license.html":{}}}],["permission",{"_index":459,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"license.html":{}}}],["permissionflagsbits",{"_index":1005,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/ModRequestFlow.html":{},"classes/RoleResponse.html":{}}}],["permissionflagsbits.readmessagehistory",{"_index":2096,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionflagsbits.sendmessages",{"_index":2095,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionflagsbits.viewchannel",{"_index":2094,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["permissionoverwrite",{"_index":457,"title":{"classes/PermissionOverwrite.html":{}},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["permissionoverwrites",{"_index":422,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{}}}],["permissionoverwrites.create(user_id",{"_index":1558,"title":{},"body":{"injectables/GuildService.html":{}}}],["permissionoverwrites.delete(user_id",{"_index":1561,"title":{},"body":{"injectables/GuildService.html":{}}}],["permissionresolvable",{"_index":992,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["permissions",{"_index":973,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["permissive",{"_index":3423,"title":{},"body":{"license.html":{}}}],["permit",{"_index":3458,"title":{},"body":{"license.html":{}}}],["permits",{"_index":3191,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":3124,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":3558,"title":{},"body":{"license.html":{}}}],["person",{"_index":2860,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["personal",{"_index":3520,"title":{},"body":{"license.html":{}}}],["pertinent",{"_index":3763,"title":{},"body":{"license.html":{}}}],["physical",{"_index":3467,"title":{},"body":{"license.html":{}}}],["physically",{"_index":3483,"title":{},"body":{"license.html":{}}}],["pick",{"_index":2995,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pieces",{"_index":3158,"title":{},"body":{"license.html":{}}}],["ping",{"_index":2194,"title":{},"body":{"classes/PingCommand.html":{}}}],["pingcommand",{"_index":380,"title":{"classes/PingCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/PingCommand.html":{},"coverage.html":{}}}],["pipe",{"_index":1933,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["place",{"_index":3491,"title":{},"body":{"license.html":{}}}],["plain",{"_index":2994,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintoinstance",{"_index":246,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["plaintoinstance(cls",{"_index":2993,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintoinstance(discordguildmember",{"_index":2712,"title":{},"body":{"controllers/UserController.html":{}}}],["plaintoinstance(guildautodeletechanneldto",{"_index":1112,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["plaintoinstance(logentrydto",{"_index":274,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["plaintoinstance(selfdto",{"_index":1684,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["plaintoinstance(settingsdto",{"_index":1581,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["please",{"_index":780,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["plus",{"_index":3678,"title":{},"body":{"license.html":{}}}],["pointer",{"_index":3854,"title":{},"body":{"license.html":{}}}],["portion",{"_index":3514,"title":{},"body":{"license.html":{}}}],["position",{"_index":469,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["possesses",{"_index":3480,"title":{},"body":{"license.html":{}}}],["possession",{"_index":3438,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":3829,"title":{},"body":{"license.html":{}}}],["possible",{"_index":1993,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["possibleanswers",{"_index":2421,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["post",{"_index":561,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["post('/')@apioperation({summary",{"_index":2244,"title":{},"body":{"controllers/RoleController.html":{}}}],["post(':channelid/clean",{"_index":605,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/clean')@apioperation({summary",{"_index":537,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/slowmode",{"_index":598,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/slowmode')@apioperation({summary",{"_index":558,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':userid/ban",{"_index":2722,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/ban')@apioperation({summary",{"_index":2684,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/kick",{"_index":2730,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/kick')@apioperation({summary",{"_index":2691,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/purge",{"_index":2743,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/purge')@apioperation({summary",{"_index":2694,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/timeout/:duration",{"_index":2735,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/timeout/:duration')@apioperation({summary",{"_index":2702,"title":{},"body":{"controllers/UserController.html":{}}}],["post('refresh",{"_index":1834,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["power",{"_index":3404,"title":{},"body":{"license.html":{}}}],["practical",{"_index":3142,"title":{},"body":{"license.html":{}}}],["practice",{"_index":3716,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":3132,"title":{},"body":{"license.html":{}}}],["precise",{"_index":3215,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":3675,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":3286,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":530,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"classes/SettingsDto.html":{},"controllers/UserController.html":{}}}],["prefixed",{"_index":3920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["present",{"_index":3780,"title":{},"body":{"license.html":{}}}],["presents",{"_index":3281,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":3598,"title":{},"body":{"license.html":{}}}],["pretty",{"_index":1035,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["prevented",{"_index":3551,"title":{},"body":{"license.html":{}}}],["previous",{"_index":3677,"title":{},"body":{"license.html":{}}}],["price",{"_index":3154,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":3746,"title":{},"body":{"license.html":{}}}],["print",{"_index":1036,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["prior",{"_index":3641,"title":{},"body":{"license.html":{}}}],["prisma",{"_index":41,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/SelfService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["prisma.jsonarray",{"_index":69,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["prisma.jsonarray).foreach",{"_index":2655,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["prisma.service",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/SelfService.html":{}}}],["prisma/client",{"_index":42,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/PrismaService.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":2201,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaserver",{"_index":3055,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["prismaservice",{"_index":16,"title":{"injectables/PrismaService.html":{}},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"injectables/PrismaService.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"overview.html":{}}}],["private",{"_index":50,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["problems",{"_index":3784,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":3545,"title":{},"body":{"license.html":{}}}],["procuring",{"_index":3736,"title":{},"body":{"license.html":{}}}],["produce",{"_index":634,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"license.html":{}}}],["product",{"_index":3468,"title":{},"body":{"license.html":{}}}],["production",{"_index":3023,"title":{},"body":{"index.html":{}}}],["products",{"_index":3747,"title":{},"body":{"license.html":{}}}],["program",{"_index":3150,"title":{},"body":{"license.html":{}}}],["program's",{"_index":3415,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":3872,"title":{},"body":{"license.html":{}}}],["programming",{"_index":3295,"title":{},"body":{"license.html":{}}}],["programs",{"_index":3159,"title":{},"body":{"license.html":{}}}],["progressive",{"_index":3003,"title":{},"body":{"index.html":{}}}],["prohibit",{"_index":3372,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":3400,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":3741,"title":{},"body":{"license.html":{}}}],["project",{"_index":3033,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":3282,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":3273,"title":{},"body":{"license.html":{}}}],["promise",{"_index":234,"title":{},"body":{"controllers/AuditLogController.html":{},"interfaces/BotEvent.html":{},"controllers/ChannelController.html":{},"classes/CommandValidationFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SpecialCommand.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1316,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["promise.all",{"_index":1173,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildUserController.html":{},"injectables/SelfService.html":{},"classes/initGuildCommand.html":{}}}],["promoted",{"_index":1328,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["propagate",{"_index":3245,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":3658,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":3256,"title":{},"body":{"license.html":{}}}],["properties",{"_index":202,"title":{"properties.html":{}},"body":{"injectables/AppService.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":3521,"title":{},"body":{"license.html":{}}}],["protect",{"_index":3163,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":3383,"title":{},"body":{"license.html":{}}}],["protection",{"_index":3427,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":3573,"title":{},"body":{"license.html":{}}}],["prove",{"_index":3806,"title":{},"body":{"license.html":{}}}],["provide",{"_index":3202,"title":{},"body":{"license.html":{}}}],["provided",{"_index":1649,"title":{},"body":{"injectables/GuildSettingsService.html":{},"controllers/JwtAuthController.html":{},"license.html":{}}}],["provider",{"_index":1054,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.name",{"_index":1066,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.prototype.handler",{"_index":1074,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.prototype.hasownproperty(bot_event_handler_name",{"_index":1072,"title":{},"body":{"classes/Explorer.html":{}}}],["provider[bot_event_handler_name",{"_index":1069,"title":{},"body":{"classes/Explorer.html":{}}}],["providers",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["provides",{"_index":3864,"title":{},"body":{"license.html":{}}}],["providing",{"_index":3773,"title":{},"body":{"license.html":{}}}],["provision",{"_index":3589,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":3636,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":3792,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":3795,"title":{},"body":{"license.html":{}}}],["public",{"_index":1047,"title":{},"body":{"classes/Explorer.html":{},"license.html":{}}}],["publicity",{"_index":3605,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":3204,"title":{},"body":{"license.html":{}}}],["publish",{"_index":3419,"title":{},"body":{"license.html":{}}}],["published",{"_index":3207,"title":{},"body":{"license.html":{}}}],["purge",{"_index":2695,"title":{},"body":{"controllers/UserController.html":{}}}],["purged",{"_index":2676,"title":{},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["purgeuserfromguild",{"_index":2681,"title":{},"body":{"controllers/UserController.html":{}}}],["purgeuserfromguild(guildid",{"_index":2693,"title":{},"body":{"controllers/UserController.html":{}}}],["purpose",{"_index":3324,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":3525,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":3732,"title":{},"body":{"license.html":{}}}],["put",{"_index":562,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{}}}],["put(':channelid",{"_index":594,"title":{},"body":{"controllers/ChannelController.html":{}}}],["put(':channelid')@apioperation({summary",{"_index":543,"title":{},"body":{"controllers/ChannelController.html":{}}}],["put(':roleid",{"_index":2270,"title":{},"body":{"controllers/RoleController.html":{}}}],["put(':roleid')@apioperation({summary",{"_index":2256,"title":{},"body":{"controllers/RoleController.html":{}}}],["put()@httpcode(httpstatuscode.accepted",{"_index":1572,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["putsettings",{"_index":1567,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["putsettings(guildid",{"_index":1570,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["qualify",{"_index":3648,"title":{},"body":{"license.html":{}}}],["quality",{"_index":3804,"title":{},"body":{"license.html":{}}}],["query",{"_index":237,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/JwtAuthController.html":{}}}],["query('limit",{"_index":265,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["query('offset",{"_index":266,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["query(validationpipe",{"_index":264,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["question",{"_index":731,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{}}}],["question.answers",{"_index":812,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command",{"_index":394,"title":{},"body":{"modules/BotModule.html":{}}}],["question.command.ts",{"_index":721,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["question.command.ts:120",{"_index":738,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:41",{"_index":725,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:48",{"_index":733,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:73",{"_index":729,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.description",{"_index":763,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.dto",{"_index":749,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.dto.ts",{"_index":834,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:11",{"_index":842,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["question.dto.ts:20",{"_index":840,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["question.form.dto",{"_index":757,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.form.dto.ts",{"_index":846,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["question.form.dto.ts:6",{"_index":849,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["question.question",{"_index":774,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questioncomponentrow",{"_index":798,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionfield",{"_index":785,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionid",{"_index":761,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionid.id",{"_index":766,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["quote",{"_index":1628,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["quote(it",{"_index":1657,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["quotedmessage",{"_index":1653,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["rambda",{"_index":2954,"title":{},"body":{"dependencies.html":{}}}],["rambda/immutable",{"_index":1624,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["rank",{"_index":252,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"classes/SelfDto-1.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["rank(s",{"_index":1778,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.decorator",{"_index":256,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rank.decorator.ts",{"_index":2915,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank.guard",{"_index":260,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rank.guard.ts",{"_index":1774,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank.guard.ts:21",{"_index":1781,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.guard.ts:33",{"_index":1782,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.new",{"_index":1282,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ranks",{"_index":1805,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["rate",{"_index":463,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{}}}],["ratelimitperuser",{"_index":423,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["raw",{"_index":468,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["rawposition",{"_index":424,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["react",{"_index":3887,"title":{},"body":{"properties.html":{}}}],["reactedmemberismodorhigherguard",{"_index":1248,"title":{"guards/ReactedMemberIsModOrHigherGuard.html":{}},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["reaction",{"_index":1241,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"miscellaneous/variables.html":{}}}],["reaction.count",{"_index":1385,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["reaction.emoji.name",{"_index":1305,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.emoji.tostring",{"_index":1384,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["reaction.fetch",{"_index":1288,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.message",{"_index":1325,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.message.author.id",{"_index":1291,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.guild.channels.fetch",{"_index":1321,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.guildid",{"_index":1292,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.id",{"_index":1296,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.partial",{"_index":1287,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.remove",{"_index":1326,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction_added",{"_index":2006,"title":{},"body":{"classes/LogEntry.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/variables.html":{}}}],["reaction_removed",{"_index":2007,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["reactionchannelidguard",{"_index":1259,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reactionchannelidguard('1121822614374060175",{"_index":1286,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reactionchannelidguard('1226574989147508746",{"_index":1336,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reactionemote",{"_index":3927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reactionemoteguard",{"_index":1262,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reactions",{"_index":1726,"title":{},"body":{"injectables/GuildUserService.html":{},"classes/UserInfoUiCommand.html":{}}}],["read",{"_index":3041,"title":{},"body":{"index.html":{}}}],["readable",{"_index":3464,"title":{},"body":{"license.html":{}}}],["readily",{"_index":3721,"title":{},"body":{"license.html":{}}}],["reading",{"_index":3577,"title":{},"body":{"license.html":{}}}],["readmessagehistory",{"_index":1560,"title":{},"body":{"injectables/GuildService.html":{}}}],["readonly",{"_index":222,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["ready",{"_index":1488,"title":{},"body":{"injectables/GuildService.html":{}}}],["reason",{"_index":280,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["reasonable",{"_index":3481,"title":{},"body":{"license.html":{}}}],["receipt",{"_index":3646,"title":{},"body":{"license.html":{}}}],["receive",{"_index":3157,"title":{},"body":{"license.html":{}}}],["received",{"_index":3444,"title":{},"body":{"license.html":{}}}],["receives",{"_index":3663,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":3738,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":3557,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":3729,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":3234,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":3291,"title":{},"body":{"license.html":{}}}],["record",{"_index":1529,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"miscellaneous/variables.html":{}}}],["recreated",{"_index":1272,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["redirect_uri",{"_index":1924,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["redistribute",{"_index":3847,"title":{},"body":{"license.html":{}}}],["referring",{"_index":3153,"title":{},"body":{"license.html":{}}}],["refers",{"_index":3223,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":2956,"title":{},"body":{"dependencies.html":{}}}],["reflect.getmetadata(bot_event_key",{"_index":1071,"title":{},"body":{"classes/Explorer.html":{}}}],["reflector",{"_index":1780,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["refrain",{"_index":3767,"title":{},"body":{"license.html":{}}}],["refresh",{"_index":1872,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["refresh_token",{"_index":1833,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshjwtguard",{"_index":1840,"title":{"injectables/RefreshJwtGuard.html":{}},"body":{"controllers/JwtAuthController.html":{},"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["refreshjwtstrategy",{"_index":1864,"title":{"injectables/RefreshJwtStrategy.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/RefreshJwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtoken",{"_index":1826,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["refreshtoken(@req",{"_index":1850,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshtoken(req",{"_index":1831,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshtoken(userid",{"_index":1893,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["regard",{"_index":3583,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":3440,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":3342,"title":{},"body":{"license.html":{}}}],["registercommandoptions",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["rein",{"_index":2123,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["reinstated",{"_index":3635,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":3375,"title":{},"body":{"license.html":{}}}],["relative",{"_index":999,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["released",{"_index":3212,"title":{},"body":{"license.html":{}}}],["releasing",{"_index":3197,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":3433,"title":{},"body":{"license.html":{}}}],["relicensing",{"_index":3213,"title":{},"body":{"license.html":{}}}],["relying",{"_index":3720,"title":{},"body":{"license.html":{}}}],["remain",{"_index":3503,"title":{},"body":{"license.html":{}}}],["remains",{"_index":3151,"title":{},"body":{"license.html":{}}}],["remote",{"_index":3769,"title":{},"body":{"license.html":{}}}],["remotely",{"_index":3771,"title":{},"body":{"license.html":{}}}],["removal",{"_index":3586,"title":{},"body":{"license.html":{}}}],["remove",{"_index":3585,"title":{},"body":{"license.html":{}}}],["removecommandsbefore",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["removemember",{"_index":1229,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["removemember(member",{"_index":1244,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["removing",{"_index":1312,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["rendered",{"_index":3821,"title":{},"body":{"license.html":{}}}],["repair",{"_index":3811,"title":{},"body":{"license.html":{}}}],["replace",{"_index":2486,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('x",{"_index":2484,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('y",{"_index":2482,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('{message",{"_index":1660,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["replace('{user",{"_index":1658,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["reply",{"_index":2184,"title":{},"body":{"classes/MumVoiceCommand.html":{}}}],["reply(optional",{"_index":2043,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["replyto",{"_index":2042,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["replytomessage",{"_index":2038,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["report",{"_index":676,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["repository",{"_index":3014,"title":{},"body":{"index.html":{}}}],["represent",{"_index":3543,"title":{},"body":{"license.html":{}}}],["req",{"_index":1796,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"controllers/UserController.html":{}}}],["req.params.guildid",{"_index":1801,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["req.user.userid",{"_index":1799,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["request",{"_index":1411,"title":{},"body":{"modules/GuildModule.html":{},"guards/HasRequiredRank.html":{},"injectables/ModRequestFlow.html":{},"controllers/SelfController.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.path",{"_index":3919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":3913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.guildid",{"_index":2720,"title":{},"body":{"controllers/UserController.html":{}}}],["requestguilduser",{"_index":2913,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["requestuser",{"_index":1669,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":3335,"title":{},"body":{"license.html":{}}}],["required",{"_index":259,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["required_rank_key",{"_index":1789,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredpoints",{"_index":2234,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["requiredrank",{"_index":254,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredrank(rank.member",{"_index":261,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["requiredrank(rank.mod",{"_index":582,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["requirement",{"_index":3434,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":3506,"title":{},"body":{"license.html":{}}}],["requires",{"_index":3200,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":3240,"title":{},"body":{"license.html":{}}}],["reset",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolved",{"_index":3531,"title":{},"body":{"license.html":{}}}],["respect",{"_index":3408,"title":{},"body":{"license.html":{}}}],["response",{"_index":630,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["response.data.access_token",{"_index":1945,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["response.sendstatus(httpstatus.bad_request",{"_index":646,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["response.sendstatus(httpstatus.forbidden",{"_index":1221,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["response.sendstatus(httpstatus.internal_server_error",{"_index":2363,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["response.statusmessage",{"_index":644,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["responsible",{"_index":2296,"title":{},"body":{"controllers/SelfController.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["restricted",{"_index":389,"title":{},"body":{"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["restrictedchanneldto",{"_index":2232,"title":{"classes/RestrictedChannelDto.html":{}},"body":{"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["restrictedchannels",{"_index":1428,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/RestrictedChannelDto.html":{}}}],["restrictedchannelservice",{"_index":1444,"title":{},"body":{"injectables/GuildService.html":{}}}],["restricting",{"_index":3401,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":3622,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":3621,"title":{},"body":{"license.html":{}}}],["result",{"_index":3188,"title":{},"body":{"license.html":{}}}],["result.data.map((it",{"_index":273,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["result.total",{"_index":271,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["resulting",{"_index":3186,"title":{},"body":{"license.html":{}}}],["results",{"_index":79,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":3561,"title":{},"body":{"license.html":{}}}],["retrieving",{"_index":1025,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["return",{"_index":58,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["reviewing",{"_index":3833,"title":{},"body":{"license.html":{}}}],["revised",{"_index":3778,"title":{},"body":{"license.html":{}}}],["right",{"_index":3555,"title":{},"body":{"license.html":{}}}],["rights",{"_index":3164,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3803,"title":{},"body":{"license.html":{}}}],["role",{"_index":489,"title":{},"body":{"classes/Channel.html":{},"classes/CleanWfpMember.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/UnverifyByRoleCommand.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["role.command.ts",{"_index":7,"title":{},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["role.command.ts:17",{"_index":18,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["role.command.ts:23",{"_index":28,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["role.conmand.ts",{"_index":2638,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["role.conmand.ts:16",{"_index":2640,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.conmand.ts:22",{"_index":2642,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.delete",{"_index":2277,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.edit(roledata",{"_index":2273,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.id",{"_index":2651,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.name",{"_index":2269,"title":{},"body":{"controllers/RoleController.html":{}}}],["role/role.controller",{"_index":2166,"title":{},"body":{"modules/ModerationModule.html":{}}}],["role_created",{"_index":2008,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["role_deleted",{"_index":2009,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["role_updated",{"_index":2010,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["rolecontroller",{"_index":2164,"title":{"controllers/RoleController.html":{}},"body":{"modules/ModerationModule.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["roledata",{"_index":2243,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleid",{"_index":2248,"title":{},"body":{"controllers/RoleController.html":{},"classes/initGuildCommand.html":{}}}],["roleresponse",{"_index":1006,"title":{"classes/RoleResponse.html":{}},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{}}}],["roleresponseschema",{"_index":1024,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolerows",{"_index":3099,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["roles",{"_index":61,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["roles.cache.has",{"_index":1766,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["roles.cache.has((await",{"_index":1768,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["roles.fetch('1121823930085285938",{"_index":1509,"title":{},"body":{"injectables/GuildService.html":{}}}],["roles.foreach",{"_index":1348,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["roles.foreach((role",{"_index":71,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["roles.push",{"_index":2650,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["roleselectmenubuilder",{"_index":3064,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["roleselectmenuinteraction",{"_index":3060,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["rolesresponseschema",{"_index":1026,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rom",{"_index":3564,"title":{},"body":{"license.html":{}}}],["route",{"_index":3923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routermodule",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule.register",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/controller(http",{"_index":1775,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["row",{"_index":770,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/initGuildCommand.html":{}}}],["royalty",{"_index":3682,"title":{},"body":{"license.html":{}}}],["rules",{"_index":3572,"title":{},"body":{"license.html":{}}}],["run",{"_index":2502,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"index.html":{},"license.html":{}}}],["running",{"_index":3203,"title":{},"body":{"license.html":{}}}],["runs",{"_index":1267,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["rxjs",{"_index":1902,"title":{},"body":{"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["rüber",{"_index":2446,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["safest",{"_index":3849,"title":{},"body":{"license.html":{}}}],["sale",{"_index":3692,"title":{},"body":{"license.html":{}}}],["same",{"_index":3344,"title":{},"body":{"license.html":{}}}],["satisfy",{"_index":3505,"title":{},"body":{"license.html":{}}}],["saying",{"_index":3501,"title":{},"body":{"license.html":{}}}],["scalable",{"_index":3008,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["schema",{"_index":606,"title":{},"body":{"controllers/ChannelController.html":{},"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/UserController.html":{}}}],["schenkt",{"_index":2447,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["schiebt",{"_index":2443,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["schließen",{"_index":2108,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["school",{"_index":3873,"title":{},"body":{"license.html":{}}}],["scope",{"_index":1926,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["scripts",{"_index":3321,"title":{},"body":{"license.html":{}}}],["secondarily",{"_index":3247,"title":{},"body":{"license.html":{}}}],["secondary",{"_index":3173,"title":{},"body":{"license.html":{}}}],["seconds",{"_index":494,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["secret",{"_index":1877,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["secretorkey",{"_index":1962,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["section",{"_index":3379,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3462,"title":{},"body":{"license.html":{}}}],["see",{"_index":1785,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/SelfController.html":{},"modules/UserModule.html":{},"license.html":{}}}],["select",{"_index":355,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"classes/initGuildCommand.html":{}}}],["selectguild",{"_index":2155,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectguildmenu",{"_index":2080,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectguildmenu(guilds",{"_index":2148,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["selection",{"_index":2151,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selection.values[0",{"_index":2159,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectioninteraction",{"_index":2150,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectioninteraction.awaitmessagecomponent",{"_index":2152,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["selectmenu",{"_index":2983,"title":{},"body":{"miscellaneous/functions.html":{}}}],["self.controller",{"_index":2793,"title":{},"body":{"modules/UserModule.html":{}}}],["self.controller.ts",{"_index":2792,"title":{},"body":{"modules/UserModule.html":{}}}],["self.dto",{"_index":2304,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{}}}],["self.service",{"_index":2306,"title":{},"body":{"controllers/SelfController.html":{},"modules/UserModule.html":{}}}],["self.service.ts",{"_index":2303,"title":{},"body":{"controllers/SelfController.html":{}}}],["selfcontroller",{"_index":2292,"title":{"controllers/SelfController.html":{}},"body":{"controllers/SelfController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["selfdto",{"_index":1083,"title":{"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}},"body":{"classes/Guild.html":{},"controllers/GuildUserController.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"coverage.html":{}}}],["selfservice",{"_index":1865,"title":{"injectables/SelfService.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["sell",{"_index":3708,"title":{},"body":{"license.html":{}}}],["selling",{"_index":3691,"title":{},"body":{"license.html":{}}}],["semiconductor",{"_index":3227,"title":{},"body":{"license.html":{}}}],["send",{"_index":819,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommand.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["senddirectmessagetouserexception",{"_index":2353,"title":{"classes/SendDirectMessageToUserException.html":{}},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["senddirectmessagetouserexception(guildid",{"_index":2741,"title":{},"body":{"controllers/UserController.html":{}}}],["senddirectmessagetouserexceptionfilter",{"_index":2362,"title":{"classes/SendDirectMessageToUserExceptionFilter.html":{}},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"coverage.html":{}}}],["sends",{"_index":2179,"title":{},"body":{"classes/MumVoiceCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["sent",{"_index":2628,"title":{},"body":{"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["separable",{"_index":3513,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3446,"title":{},"body":{"license.html":{}}}],["separately",{"_index":3443,"title":{},"body":{"license.html":{}}}],["server",{"_index":664,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"index.html":{},"license.html":{}}}],["servers",{"_index":3187,"title":{},"body":{"license.html":{}}}],["serves",{"_index":3309,"title":{},"body":{"license.html":{}}}],["service",{"_index":2323,"title":{},"body":{"injectables/SelfService.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["servicing",{"_index":3810,"title":{},"body":{"license.html":{}}}],["set",{"_index":402,"title":{},"body":{"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["set/update",{"_index":3066,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setadminroleid",{"_index":3089,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setauthor",{"_index":820,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["setcolor(colors.blue",{"_index":677,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["setcolor(colors.red",{"_index":714,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["setcustomid",{"_index":2117,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setcustomid('adminroleid",{"_index":3090,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('answer",{"_index":793,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid('introchannelid",{"_index":3078,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('miscchannelid",{"_index":3081,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('modchannelid",{"_index":3084,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('modrequestmessage",{"_index":2120,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setcustomid('modroleid",{"_index":3087,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('openintrochannelid",{"_index":3070,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('question",{"_index":786,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid('unverifiedmemberroleid",{"_index":3097,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('verifiedmemberroleid",{"_index":3093,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid(`closeticket",{"_index":2105,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setcustomid(`community",{"_index":765,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setdescription",{"_index":678,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{}}}],["setdescription(`for",{"_index":709,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["setdescription(`user",{"_index":2769,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["setfirstmessageuicommand",{"_index":401,"title":{"classes/SetFirstMessageUICommand.html":{}},"body":{"modules/BotModule.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{}}}],["setintrochannelid",{"_index":3077,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setlabel('antwort",{"_index":767,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setlabel('frage(nicht",{"_index":787,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setlabel('mod",{"_index":2124,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setlabel('ticket",{"_index":2107,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setmaxvalues(1",{"_index":3072,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmetadata(bot_event_key",{"_index":3907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(required_rank_key",{"_index":3935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setminvalues(0",{"_index":3073,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmiscchannelid",{"_index":3080,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmodchannelid",{"_index":3083,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmodroleid",{"_index":3086,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setopenintrochannelid",{"_index":3069,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setplaceholder",{"_index":3074,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setplaceholder('antwort",{"_index":795,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setplaceholder('schreibe",{"_index":2121,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["setrequired(false",{"_index":791,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setrequired(true",{"_index":794,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["sets",{"_index":1490,"title":{},"body":{"injectables/GuildService.html":{},"miscellaneous/variables.html":{}}}],["setslowmode",{"_index":535,"title":{},"body":{"controllers/ChannelController.html":{}}}],["setslowmode(guildid",{"_index":557,"title":{},"body":{"controllers/ChannelController.html":{}}}],["setstyle(buttonstyle.primary",{"_index":769,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["setstyle(textinputstyle.paragraph",{"_index":789,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["settimeout(resolve",{"_index":1317,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["settings",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["settings.controller",{"_index":1588,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["settings.controller.ts",{"_index":1565,"title":{},"body":{"controllers/GuildSettingsController.html":{},"coverage.html":{}}}],["settings.controller.ts:26",{"_index":1569,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["settings.controller.ts:33",{"_index":1573,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["settings.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{}}}],["settings.module.ts",{"_index":1587,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["settings.role.${key}.changed",{"_index":1631,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service",{"_index":383,"title":{},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{}}}],["settings.service.ts",{"_index":1589,"title":{},"body":{"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["settings.service.ts:11",{"_index":1600,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:16",{"_index":1603,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:31",{"_index":1614,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:41",{"_index":1618,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:45",{"_index":1616,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:49",{"_index":1611,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:53",{"_index":1605,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:57",{"_index":1620,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:61",{"_index":1613,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:65",{"_index":1607,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:68",{"_index":1609,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:71",{"_index":1622,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings/dto/restricted",{"_index":2233,"title":{},"body":{"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["settings/dto/settings.dto.ts",{"_index":2386,"title":{},"body":{"classes/SettingsDto.html":{},"coverage.html":{}}}],["settings/dto/settings.dto.ts:14",{"_index":2408,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:19",{"_index":2404,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:24",{"_index":2399,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:29",{"_index":2401,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:34",{"_index":2400,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:39",{"_index":2406,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:44",{"_index":2407,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:49",{"_index":2403,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:54",{"_index":2398,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:59",{"_index":2402,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:9",{"_index":2405,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/events/settings",{"_index":1739,"title":{},"body":{"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"coverage.html":{}}}],["settings/guild",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["settings[key",{"_index":1633,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settingschanged",{"_index":1625,"title":{"classes/SettingsChanged.html":{}},"body":{"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"coverage.html":{}}}],["settingschanged(guildid",{"_index":1632,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settingsdto",{"_index":1571,"title":{"classes/SettingsDto.html":{}},"body":{"controllers/GuildSettingsController.html":{},"classes/SettingsDto.html":{},"coverage.html":{}}}],["settingsservice",{"_index":860,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["settitle('community",{"_index":783,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["settitle('mod",{"_index":2100,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["settitle('user",{"_index":2768,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["settitle('validation",{"_index":712,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["settitle('wfp",{"_index":675,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["settitle(`timeout",{"_index":2625,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["setunverifiedroleid",{"_index":3096,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setup",{"_index":2583,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/initGuildCommand.html":{}}}],["setupclientfactory",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["setvalue(question.question",{"_index":790,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setverifiedmemberroleid",{"_index":3092,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["shall",{"_index":3386,"title":{},"body":{"license.html":{}}}],["share",{"_index":3145,"title":{},"body":{"license.html":{}}}],["shared",{"_index":3331,"title":{},"body":{"license.html":{}}}],["show",{"_index":2761,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["shows",{"_index":3065,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["side",{"_index":3009,"title":{},"body":{"index.html":{}}}],["sign",{"_index":3874,"title":{},"body":{"license.html":{}}}],["significant",{"_index":3544,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":1879,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["similar",{"_index":3209,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":3762,"title":{},"body":{"license.html":{}}}],["single",{"_index":3734,"title":{},"body":{"license.html":{}}}],["size",{"_index":1680,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["skip",{"_index":358,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["slashcommandpipe",{"_index":751,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["sleep",{"_index":2750,"title":{},"body":{"controllers/UserController.html":{}}}],["slowmode",{"_index":466,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["slowmodedisabled",{"_index":522,"title":{"classes/SlowmodeDisabled.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["slowmodedisabled(guildid",{"_index":603,"title":{},"body":{"controllers/ChannelController.html":{}}}],["slowmodeenabled",{"_index":515,"title":{"classes/SlowmodeEnabled.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["slowmodeenabled(guildid",{"_index":602,"title":{},"body":{"controllers/ChannelController.html":{}}}],["software",{"_index":3120,"title":{},"body":{"license.html":{}}}],["sold",{"_index":3526,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3363,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3377,"title":{},"body":{"license.html":{}}}],["soll",{"_index":2050,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["solutions",{"_index":3868,"title":{},"body":{"license.html":{}}}],["something",{"_index":2862,"title":{},"body":{"classes/UserToUser.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["spare",{"_index":3477,"title":{},"body":{"license.html":{}}}],["speak",{"_index":3152,"title":{},"body":{"license.html":{}}}],["special",{"_index":2465,"title":{},"body":{"classes/SpecialCommand.html":{},"license.html":{},"properties.html":{}}}],["specialcommand",{"_index":409,"title":{"classes/SpecialCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/SpecialCommand.html":{},"coverage.html":{}}}],["specific",{"_index":1777,"title":{},"body":{"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["specifically",{"_index":3136,"title":{},"body":{"license.html":{}}}],["specified",{"_index":3293,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":3787,"title":{},"body":{"license.html":{}}}],["specify",{"_index":3791,"title":{},"body":{"license.html":{}}}],["spirit",{"_index":3779,"title":{},"body":{"license.html":{}}}],["split('\\n",{"_index":1655,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["sponsors",{"_index":3036,"title":{},"body":{"index.html":{}}}],["sql",{"_index":1459,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/.../bot",{"_index":3895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../channel",{"_index":2963,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":2965,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../has",{"_index":3898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../log.entry.dto.ts",{"_index":3894,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":2962,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../menu",{"_index":2966,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../message",{"_index":3896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../parameter",{"_index":2964,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plain",{"_index":2967,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../reaction",{"_index":3902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request",{"_index":3900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../requires",{"_index":3903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.controller.ts",{"_index":3901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.ts",{"_index":3904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tasks.service.ts",{"_index":3899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":3897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.ts",{"_index":3905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":201,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:13",{"_index":211,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":207,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auditlog/auditlog.controller.ts",{"_index":225,"title":{},"body":{"controllers/AuditLogController.html":{},"coverage.html":{}}}],["src/auditlog/auditlog.controller.ts:30",{"_index":233,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["src/auditlog/auditlog.events.ts",{"_index":2879,"title":{},"body":{"coverage.html":{}}}],["src/auditlog/auditlog.module",{"_index":2169,"title":{},"body":{"modules/ModerationModule.html":{}}}],["src/auditlog/auditlog.module.ts",{"_index":314,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["src/auditlog/auditlog.service.ts",{"_index":318,"title":{},"body":{"injectables/AuditLogService.html":{},"coverage.html":{}}}],["src/auditlog/auditlog.service.ts:10",{"_index":325,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/auditlog.service.ts:25",{"_index":330,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/auditlog.service.ts:7",{"_index":322,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/dto/audit",{"_index":285,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"coverage.html":{}}}],["src/auditlog/dto/log",{"_index":2022,"title":{},"body":{"classes/LogEntryDto.html":{},"coverage.html":{}}}],["src/auth/jwt/guards/jwt",{"_index":253,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/jwt/guards/refresh",{"_index":2225,"title":{},"body":{"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["src/auth/jwt/jwt",{"_index":1822,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt/refresh",{"_index":2226,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{},"coverage.html":{}}}],["src/bot/bot.module.ts",{"_index":379,"title":{},"body":{"modules/BotModule.html":{}}}],["src/bot/commands/add",{"_index":6,"title":{},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["src/bot/commands/clean",{"_index":648,"title":{},"body":{"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["src/bot/commands/community",{"_index":720,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["src/bot/commands/init",{"_index":2884,"title":{},"body":{"coverage.html":{},"classes/initGuildCommand.html":{}}}],["src/bot/commands/mod",{"_index":2170,"title":{},"body":{"classes/MumVoiceCommand.html":{},"coverage.html":{}}}],["src/bot/commands/ping.command.ts",{"_index":2190,"title":{},"body":{"classes/PingCommand.html":{},"coverage.html":{}}}],["src/bot/commands/ping.command.ts:10",{"_index":2192,"title":{},"body":{"classes/PingCommand.html":{}}}],["src/bot/commands/ping.command.ts:16",{"_index":2193,"title":{},"body":{"classes/PingCommand.html":{}}}],["src/bot/commands/special.command.ts",{"_index":2418,"title":{},"body":{"classes/SpecialCommand.html":{},"coverage.html":{}}}],["src/bot/commands/special.command.ts:16",{"_index":2441,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:27",{"_index":2452,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:33",{"_index":2429,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:41",{"_index":2455,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:50",{"_index":2459,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/ticket",{"_index":2576,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["src/bot/commands/timeout.command.ts",{"_index":2594,"title":{},"body":{"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["src/bot/commands/timeout.command.ts:38",{"_index":2596,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["src/bot/commands/timeout.command.ts:46",{"_index":2600,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["src/bot/commands/unverify",{"_index":2637,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["src/bot/commands/user",{"_index":2364,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["src/bot/decorators/bot",{"_index":2887,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/dto/commmunity",{"_index":833,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["src/bot/dto/community",{"_index":845,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["src/bot/dto/mod",{"_index":2036,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"coverage.html":{}}}],["src/bot/dto/user",{"_index":2802,"title":{},"body":{"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/explorers/event.explorer.ts",{"_index":1045,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{}}}],["src/bot/explorers/event.explorer.ts:15",{"_index":1056,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:34",{"_index":1053,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:38",{"_index":1058,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:9",{"_index":1051,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/filters/command",{"_index":700,"title":{},"body":{"classes/CommandValidationFilter.html":{},"coverage.html":{}}}],["src/bot/guards/is",{"_index":1812,"title":{},"body":{"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["src/bot/guards/member",{"_index":1256,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["src/bot/guards/message",{"_index":936,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/guards/reaction",{"_index":1260,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/guards/user",{"_index":852,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMessageHandler.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["src/bot/interfaces/bot",{"_index":366,"title":{},"body":{"interfaces/BotEvent.html":{},"coverage.html":{}}}],["src/guild/events/guild",{"_index":1224,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{}}}],["src/guild/events/interaction",{"_index":2051,"title":{},"body":{"injectables/ModRequestFlow.html":{},"coverage.html":{}}}],["src/guild/events/message",{"_index":925,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"coverage.html":{}}}],["src/guild/guild",{"_index":382,"title":{},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RestrictedChannelDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["src/guild/guild.controller.ts",{"_index":1190,"title":{},"body":{"controllers/GuildController.html":{},"coverage.html":{}}}],["src/guild/guild.controller.ts:16",{"_index":1196,"title":{},"body":{"controllers/GuildController.html":{}}}],["src/guild/guild.controller.ts:33",{"_index":1199,"title":{},"body":{"controllers/GuildController.html":{}}}],["src/guild/guild.module.ts",{"_index":1404,"title":{},"body":{"modules/GuildModule.html":{}}}],["src/guild/guild.service",{"_index":408,"title":{},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"injectables/GuildMemberEvents.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["src/guild/guild.service.ts",{"_index":1435,"title":{},"body":{"injectables/GuildService.html":{},"coverage.html":{}}}],["src/guild/guild.service.ts:107",{"_index":1453,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:165",{"_index":1481,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:17",{"_index":1497,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:198",{"_index":1495,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:218",{"_index":1448,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:229",{"_index":1451,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:242",{"_index":1486,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:42",{"_index":1484,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:9",{"_index":1445,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/moderation/channel/channel.controller.ts",{"_index":529,"title":{},"body":{"controllers/ChannelController.html":{},"coverage.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:133",{"_index":540,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:55",{"_index":556,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:72",{"_index":552,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:85",{"_index":545,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:99",{"_index":559,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/dto/channel.ts",{"_index":415,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["src/guild/moderation/dto/channel.ts:100",{"_index":449,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:108",{"_index":471,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:116",{"_index":456,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:125",{"_index":474,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:134",{"_index":443,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:143",{"_index":467,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:151",{"_index":432,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:162",{"_index":1179,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:171",{"_index":1187,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:180",{"_index":1185,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:189",{"_index":1180,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:198",{"_index":1188,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:207",{"_index":1183,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:21",{"_index":2189,"title":{},"body":{"classes/PermissionOverwrite.html":{}}}],["src/guild/moderation/dto/channel.ts:215",{"_index":1184,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:27",{"_index":475,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:35",{"_index":437,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:44",{"_index":461,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:55",{"_index":447,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:66",{"_index":473,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:76",{"_index":453,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:84",{"_index":433,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:92",{"_index":439,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/guild",{"_index":868,"title":{},"body":{"classes/DiscordGuildMember.html":{},"coverage.html":{}}}],["src/guild/moderation/dto/role.ts",{"_index":969,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/dto/role.ts:106",{"_index":2286,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:114",{"_index":2290,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:122",{"_index":2279,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:133",{"_index":991,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:143",{"_index":979,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:151",{"_index":1002,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:160",{"_index":982,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:170",{"_index":1001,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:181",{"_index":995,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:190",{"_index":990,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:203",{"_index":989,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:212",{"_index":1003,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:26",{"_index":2280,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:34",{"_index":2283,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:42",{"_index":2291,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:50",{"_index":2284,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:58",{"_index":2287,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:66",{"_index":2278,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:74",{"_index":2281,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:82",{"_index":2289,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:90",{"_index":2288,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:98",{"_index":2285,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/user.ts",{"_index":887,"title":{},"body":{"classes/DiscordUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/dto/user.ts:11",{"_index":916,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:19",{"_index":920,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:28",{"_index":908,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:35",{"_index":899,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:42",{"_index":910,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:49",{"_index":901,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:57",{"_index":902,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:65",{"_index":917,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:73",{"_index":911,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:81",{"_index":903,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:89",{"_index":897,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:97",{"_index":914,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/events/channel.event.ts",{"_index":500,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["src/guild/moderation/events/channel.event.ts:22",{"_index":2417,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:30",{"_index":2411,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:31",{"_index":2410,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:32",{"_index":2409,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:40",{"_index":2412,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:48",{"_index":510,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:49",{"_index":509,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:5",{"_index":2416,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:50",{"_index":511,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:51",{"_index":508,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:52",{"_index":507,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:6",{"_index":2414,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:68",{"_index":513,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:7",{"_index":2415,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:8",{"_index":2413,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/user.events",{"_index":2543,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["src/guild/moderation/events/user.events.ts",{"_index":2660,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["src/guild/moderation/events/user.events.ts:100",{"_index":2797,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:108",{"_index":2800,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:109",{"_index":2799,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:110",{"_index":2798,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:118",{"_index":2801,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:15",{"_index":2665,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:21",{"_index":2783,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:22",{"_index":2782,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:23",{"_index":2781,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:31",{"_index":2784,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:37",{"_index":2849,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:38",{"_index":2847,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:39",{"_index":2848,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:40",{"_index":2846,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:5",{"_index":2664,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:54",{"_index":2850,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:6",{"_index":2663,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:62",{"_index":2855,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:63",{"_index":2853,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:64",{"_index":2854,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:65",{"_index":2852,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:66",{"_index":2851,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:7",{"_index":2662,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:82",{"_index":2856,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:90",{"_index":2796,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:91",{"_index":2795,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:92",{"_index":2794,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/moderation.module.ts",{"_index":2163,"title":{},"body":{"modules/ModerationModule.html":{}}}],["src/guild/moderation/role/role.controller.ts",{"_index":2237,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/role/role.controller.ts:119",{"_index":2251,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:58",{"_index":2254,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:75",{"_index":2246,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:96",{"_index":2258,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/user/user.controller.ts",{"_index":2677,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/guild/moderation/user/user.controller.ts:103",{"_index":2685,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:122",{"_index":2692,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:141",{"_index":2704,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:180",{"_index":2700,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:58",{"_index":2689,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:86",{"_index":2687,"title":{},"body":{"controllers/UserController.html":{}}}],["src/main.ts",{"_index":2902,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma.service",{"_index":40,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"injectables/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/SetFirstMessageUICommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/initGuildCommand.html":{}}}],["src/prisma.service.ts",{"_index":2200,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:10",{"_index":2206,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:6",{"_index":2207,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/tasks/tasks.module.ts",{"_index":2497,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service",{"_index":1141,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["src/tasks/tasks.service.ts",{"_index":2505,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/tasks.service.ts:128",{"_index":2524,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:173",{"_index":2530,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:27",{"_index":2514,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:41",{"_index":2533,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:60",{"_index":2516,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:80",{"_index":2520,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/user/self.controller.ts",{"_index":2293,"title":{},"body":{"controllers/SelfController.html":{},"coverage.html":{}}}],["src/user/self.controller.ts:21",{"_index":2300,"title":{},"body":{"controllers/SelfController.html":{}}}],["src/user/self.dto.ts",{"_index":1075,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"coverage.html":{}}}],["src/user/self.dto.ts:11",{"_index":2314,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:12",{"_index":2311,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:13",{"_index":2313,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:14",{"_index":2312,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:5",{"_index":1079,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.dto.ts:6",{"_index":1081,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.dto.ts:7",{"_index":1080,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.service",{"_index":1875,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["src/user/self.service.ts",{"_index":2322,"title":{},"body":{"injectables/SelfService.html":{},"coverage.html":{}}}],["src/user/self.service.ts:13",{"_index":2328,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/self.service.ts:25",{"_index":2336,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/self.service.ts:48",{"_index":2330,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/user.module.ts",{"_index":2788,"title":{},"body":{"modules/UserModule.html":{}}}],["src/util/decorators/parameter",{"_index":2909,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/decorators/request",{"_index":1670,"title":{},"body":{"controllers/GuildUserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/decorators/requires",{"_index":255,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/dto/log.entry.dto",{"_index":331,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/util/dto/log.entry.dto.ts",{"_index":1966,"title":{},"body":{"classes/LogEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/util/dto/log.entry.dto.ts:106",{"_index":1978,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:61",{"_index":1979,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:64",{"_index":1981,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:67",{"_index":1970,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:74",{"_index":1984,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:77",{"_index":1973,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:91",{"_index":1989,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:97",{"_index":1991,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/exception/channel",{"_index":576,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["src/util/exception/guild",{"_index":1214,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"coverage.html":{}}}],["src/util/exception/send",{"_index":2354,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/util/functions/channel",{"_index":572,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/functions/get",{"_index":1367,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/functions/menu",{"_index":939,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/util/functions/plain",{"_index":2924,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/guards/has",{"_index":258,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/interfaces/event",{"_index":514,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["standalone",{"_index":3889,"title":{},"body":{"properties.html":{}}}],["standard",{"_index":3289,"title":{},"body":{"license.html":{}}}],["standards",{"_index":3292,"title":{},"body":{"license.html":{}}}],["start",{"_index":3019,"title":{},"body":{"index.html":{},"license.html":{}}}],["start:dev",{"_index":3022,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":3024,"title":{},"body":{"index.html":{}}}],["started",{"_index":3002,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":3013,"title":{},"body":{"index.html":{}}}],["state",{"_index":3851,"title":{},"body":{"license.html":{}}}],["stated",{"_index":3349,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3624,"title":{},"body":{"license.html":{}}}],["statements",{"_index":2875,"title":{},"body":{"coverage.html":{}}}],["stating",{"_index":3422,"title":{},"body":{"license.html":{}}}],["status",{"_index":585,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"license.html":{}}}],["stay",{"_index":3042,"title":{},"body":{"index.html":{}}}],["step",{"_index":2823,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["steps",{"_index":3166,"title":{},"body":{"license.html":{}}}],["still",{"_index":2522,"title":{},"body":{"injectables/TasksService.html":{}}}],["stop",{"_index":2974,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stopcb",{"_index":2969,"title":{},"body":{"miscellaneous/functions.html":{}}}],["storage",{"_index":3453,"title":{},"body":{"license.html":{}}}],["store",{"_index":3933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":1956,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["streuselkuchen",{"_index":2427,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["string",{"_index":73,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringselectmenubuilder",{"_index":2075,"title":{},"body":{"injectables/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["stringselectmenuinteraction",{"_index":2066,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["sub",{"_index":1903,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["subdividing",{"_index":3671,"title":{},"body":{"license.html":{}}}],["subject",{"_index":3664,"title":{},"body":{"license.html":{}}}],["sublicenses",{"_index":3704,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":3378,"title":{},"body":{"license.html":{}}}],["subprograms",{"_index":3334,"title":{},"body":{"license.html":{}}}],["subquery",{"_index":1473,"title":{},"body":{"injectables/GuildService.html":{}}}],["subquery.channelid",{"_index":1474,"title":{},"body":{"injectables/GuildService.html":{}}}],["subsection",{"_index":3487,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":3539,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":3669,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":550,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["such",{"_index":2539,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["sue",{"_index":3718,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":3548,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":2986,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sum",{"_index":1542,"title":{},"body":{"injectables/GuildService.html":{}}}],["summary",{"_index":584,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":1216,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["super(`channel",{"_index":632,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["supplement",{"_index":3578,"title":{},"body":{"license.html":{}}}],["support",{"_index":3037,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["supports",{"_index":3496,"title":{},"body":{"license.html":{}}}],["sure",{"_index":1310,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["surrender",{"_index":3757,"title":{},"body":{"license.html":{}}}],["survive",{"_index":3623,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":3824,"title":{},"body":{"license.html":{}}}],["svg",{"_index":3878,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2479,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{}}}],["switchtohttp",{"_index":1797,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":893,"title":{},"body":{"classes/DiscordUser.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["system.command",{"_index":413,"title":{},"body":{"modules/BotModule.html":{}}}],["system.command.ts",{"_index":2577,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["system.command.ts:21",{"_index":2579,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["system.command.ts:28",{"_index":2581,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["t",{"_index":2999,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":2928,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2927,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":1013,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["take",{"_index":361,"title":{},"body":{"injectables/AuditLogService.html":{},"license.html":{}}}],["takes",{"_index":2333,"title":{},"body":{"injectables/SelfService.html":{}}}],["tangible",{"_index":3519,"title":{},"body":{"license.html":{}}}],["target",{"_index":1985,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/functions.html":{}}}],["targetid",{"_index":282,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{}}}],["targets",{"_index":2020,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["targettype",{"_index":250,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["targettypes",{"_index":306,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targettypes)[number",{"_index":2021,"title":{},"body":{"classes/LogEntry.html":{}}}],["targettypes})@isoptional()@isstring()@isin(targettypes",{"_index":298,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["tasks",{"_index":2498,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["tasks.service",{"_index":2504,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["tasksmodule",{"_index":107,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":1138,"title":{"injectables/TasksService.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["technological",{"_index":3389,"title":{},"body":{"license.html":{}}}],["telling",{"_index":2297,"title":{},"body":{"controllers/SelfController.html":{}}}],["tells",{"_index":3277,"title":{},"body":{"license.html":{}}}],["template",{"_index":1648,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["templateanswer",{"_index":2423,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["templateanswer(category",{"_index":2456,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["templatemessage",{"_index":1599,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["templatemessage(message",{"_index":1621,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["term",{"_index":3347,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":3629,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":3647,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":3638,"title":{},"body":{"license.html":{}}}],["termination",{"_index":3626,"title":{},"body":{"license.html":{}}}],["terms",{"_index":3216,"title":{},"body":{"license.html":{}}}],["test",{"_index":3027,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":3030,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":3029,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3026,"title":{},"body":{"index.html":{}}}],["text",{"_index":577,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["textinputbuilder",{"_index":746,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["textinputmodaldata",{"_index":847,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["textinputstyle",{"_index":747,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["thanks",{"_index":3035,"title":{},"body":{"index.html":{}}}],["then((guildusers",{"_index":2350,"title":{},"body":{"injectables/SelfService.html":{}}}],["then((isavailable",{"_index":1552,"title":{},"body":{"injectables/GuildService.html":{}}}],["then((it",{"_index":1677,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["then((result",{"_index":269,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["then(async",{"_index":2653,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["therefore",{"_index":2613,"title":{},"body":{"classes/TimeOutCommand.html":{},"license.html":{}}}],["things",{"_index":3161,"title":{},"body":{"license.html":{}}}],["third",{"_index":3414,"title":{},"body":{"license.html":{}}}],["thirtydaysago",{"_index":1523,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["thirtydaysago.setdate(thirtydaysago.getdate",{"_index":1524,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["this.$connect",{"_index":2208,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":2209,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._addmembertochanneloverwrite",{"_index":1556,"title":{},"body":{"injectables/GuildService.html":{}}}],["this._fetchguilds(userid",{"_index":2342,"title":{},"body":{"injectables/SelfService.html":{}}}],["this._getguildidfromselectmenu(interaction",{"_index":2138,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this._getmessage(firstmessageid",{"_index":2764,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this._ismemberadmin(member.id",{"_index":1756,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._ismembermod(member.id",{"_index":1757,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._ismemberverified(member.id",{"_index":1758,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._removememberfromchanneloverwrite",{"_index":1554,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.addmember(member.id",{"_index":1761,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.addmembers(guild.id",{"_index":1740,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.addmembers(payload.guildid",{"_index":1764,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.auditlogservice",{"_index":267,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["this.authservice.getuserfromcode(code",{"_index":1855,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.authservice.login(await",{"_index":1854,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.authservice.refreshtoken(req.user",{"_index":1851,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.before",{"_index":525,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.boteventdecorator(provider",{"_index":1064,"title":{},"body":{"classes/Explorer.html":{}}}],["this.cakes.length",{"_index":2491,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.cakes[math.ceil(math.random",{"_index":2490,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.channelid",{"_index":518,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.client.channels.fetch(channel_id",{"_index":1557,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.client.guilds",{"_index":1675,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["this.client.guilds.cache",{"_index":1340,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["this.client.guilds.cache.foreach(async",{"_index":1274,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["this.client.guilds.fetch",{"_index":1273,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["this.client.guilds.fetch(baseinteraction.guildid).then((guild",{"_index":2646,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["this.client.guilds.fetch(eventargs[0].guildid",{"_index":817,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.client.guilds.fetch(guild_id)).members.fetch(user_id",{"_index":1765,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.client.guilds.fetch(guildid",{"_index":586,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["this.client.guilds.fetch(guildid)).channels.fetch(key",{"_index":1208,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.client.guilds.fetch(guildid).then(async",{"_index":2777,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this.client.guilds.fetch(reaction.message.guildid",{"_index":1297,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.client.guilds.fetch(request.user.guildid",{"_index":2718,"title":{},"body":{"controllers/UserController.html":{}}}],["this.client.guilds.fetch(ticket.guildid",{"_index":2567,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.client.on(metadata",{"_index":1070,"title":{},"body":{"classes/Explorer.html":{}}}],["this.client.user.avatarurl",{"_index":823,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["this.client.user.username",{"_index":821,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["this.client.ws.ping",{"_index":2198,"title":{},"body":{"classes/PingCommand.html":{}}}],["this.coffees.length",{"_index":2488,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.coffees[math.ceil(math.random",{"_index":2487,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.configservice.get('discord_callback_url",{"_index":1925,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('discord_oauth_client_id",{"_index":1919,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('discord_oauth_secret",{"_index":1921,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":1906,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_issuer",{"_index":1908,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_refresh_expiration",{"_index":1911,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":1912,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.database.attachment.createmany",{"_index":1743,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.autodeletechannels.findmany",{"_index":1155,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.autodeletechannels.upsert",{"_index":1157,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.guild.findmany",{"_index":1159,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.guild.upsert",{"_index":1501,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.database.guilduser.delete",{"_index":1748,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.findmany",{"_index":1747,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.findunique",{"_index":1338,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["this.database.guilduser.update",{"_index":1752,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.upsert",{"_index":1741,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.lockdownrolebackup",{"_index":2652,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["this.database.lockdownrolebackup.delete",{"_index":78,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{}}}],["this.database.lockdownrolebackup.findunique",{"_index":63,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{}}}],["this.database.messagemetadata.create",{"_index":1742,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.count",{"_index":1751,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.create",{"_index":1745,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.groupby",{"_index":1526,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.database.reaction.createmany",{"_index":1744,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.restrictedchannels.findmany",{"_index":1432,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.restrictedchannels.findunique",{"_index":1430,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.restrictedchannels.upsert",{"_index":1431,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.settings.findunique",{"_index":1636,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.database.settings.update",{"_index":1635,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.database.user.delete",{"_index":1750,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.user.upsert",{"_index":1762,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.discord.guilds.fetch(guilduser.guildid",{"_index":2352,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.discord.users.fetch(userid",{"_index":2341,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.duration",{"_index":2671,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.enabled",{"_index":519,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.error",{"_index":2672,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.error.message",{"_index":2674,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.eventemitter.emit",{"_index":2609,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["this.eventemitter.emitasync",{"_index":600,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/UserController.html":{}}}],["this.eventtype",{"_index":2383,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["this.externalcontextcreator.create",{"_index":1068,"title":{},"body":{"classes/Explorer.html":{}}}],["this.getrank(member",{"_index":1760,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.getsettings(guildid).then((it",{"_index":1639,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.getwelcomemessageformat(message.guildid",{"_index":1650,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.guildautodeletechannelservice.get(guildid",{"_index":1111,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildautodeletechannelservice.get(guildid).then",{"_index":1113,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildautodeletechannelservice.upsert",{"_index":1117,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildid",{"_index":517,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.guildservice.averagemessagesperchannellastmonth(guildid",{"_index":1202,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.guildservice.averagemessagesperdaylastmonth(guildid",{"_index":1210,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.guildservice.cleanwfpmembers",{"_index":671,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["this.guildservice.updatechannelpermissions(user",{"_index":2554,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.guildservice.upsertguild(guild.id",{"_index":1275,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.addmember(member.id",{"_index":1281,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.addmembers(guild.id",{"_index":1277,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.deleteone(member.id",{"_index":1284,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.findall",{"_index":2133,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.guilduserservice.getguilduser",{"_index":1290,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.getrank(newmember",{"_index":1332,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.getrank(oldmember",{"_index":1330,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.insertmessage",{"_index":1370,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.updatemessagecountbucket",{"_index":1386,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.upsert(newmember.id",{"_index":1334,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.upsert(user.userid",{"_index":1294,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.hashandlermethod(provider",{"_index":1065,"title":{},"body":{"classes/Explorer.html":{}}}],["this.http",{"_index":1915,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.initiatemodrequestflow(i",{"_index":2130,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.jwtservice.sign(payload",{"_index":1905,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.logger",{"_index":615,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["this.logger.debug(`found",{"_index":2709,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.error",{"_index":2752,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.error((e",{"_index":966,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["this.logger.error(e",{"_index":1289,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/ModRequestFlow.html":{}}}],["this.logger.log",{"_index":587,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["this.logger.log(`adding",{"_index":1278,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.logger.log(`banned",{"_index":2725,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.log(`edited",{"_index":597,"title":{},"body":{"controllers/ChannelController.html":{}}}],["this.logger.log(`kicked",{"_index":2732,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.log(`purging",{"_index":2745,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.warn",{"_index":1935,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.messagesdeleted",{"_index":524,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.possibleanswers[0",{"_index":2481,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[1",{"_index":2489,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[2",{"_index":2492,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[3",{"_index":2493,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.prisma.guilduser",{"_index":2348,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.prismaserver.settings.findunique",{"_index":3068,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["this.prismaserver.settings.update",{"_index":3107,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["this.prismaservice.auditlog.count",{"_index":353,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.auditlog.create",{"_index":333,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["this.prismaservice.auditlog.findmany",{"_index":354,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["this.prismaservice.guildquestion.create",{"_index":762,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestion.findunique",{"_index":778,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestion.update",{"_index":810,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestionanswer.create",{"_index":814,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guilduser.findunique",{"_index":1800,"title":{},"body":{"guards/HasRequiredRank.html":{},"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.guilduser.update",{"_index":2375,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["this.prismaservice.messages.count",{"_index":2766,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.tickets.create",{"_index":2097,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["this.prismaservice.tickets.findmany",{"_index":2565,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.tickets.update",{"_index":2573,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.reason",{"_index":2666,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.reflector.getallandoverride",{"_index":1793,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["this.restrictedchannelservice",{"_index":1551,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.restrictedchannelservice.getall(user.guildid).then((channels",{"_index":1549,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.seconds",{"_index":520,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.selfservice.fetchself(userid",{"_index":2310,"title":{},"body":{"controllers/SelfController.html":{}}}],["this.settings.getadminroleid(guild_id)).tostring",{"_index":1771,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settings.getmodroleid(guild_id)).tostring",{"_index":1769,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settings.getverifiedmemberroleid(guild_id)).tostring",{"_index":1767,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settingsservice.editsettings(guildid",{"_index":1583,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["this.settingsservice.getguilduser",{"_index":2221,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["this.settingsservice.getopenintrochannelid",{"_index":1322,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getsettings(guildid",{"_index":1580,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["this.settingsservice.getunverifiedmemberroleid",{"_index":1320,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getverifiedmemberroleid",{"_index":1303,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getverifiedmemberroleid(message.guildid",{"_index":866,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["this.settingsservice.templatemessage",{"_index":1324,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.tasksservice.createdynamicscheduledjob",{"_index":1162,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.templateanswer(dto.category",{"_index":2474,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.upsert(userid",{"_index":1763,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.upsertguild(guild.id",{"_index":1563,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.userid",{"_index":526,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.userservice.findall(guild.id)).foreach",{"_index":2550,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.userservice.getguilduser(userid",{"_index":1674,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["this.userservice.updatemessagecountbucket(user.userid",{"_index":2553,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.usersservice.fetchself(userid",{"_index":1913,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.validateuser(data.id",{"_index":1947,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.value",{"_index":2382,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["those",{"_index":2334,"title":{},"body":{"injectables/SelfService.html":{},"license.html":{}}}],["though",{"_index":3581,"title":{},"body":{"license.html":{}}}],["thread",{"_index":472,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["threads",{"_index":425,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["three",{"_index":3475,"title":{},"body":{"license.html":{}}}],["through",{"_index":3265,"title":{},"body":{"license.html":{}}}],["throw",{"_index":616,"title":{},"body":{"controllers/ChannelController.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildSettingsService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["thrown",{"_index":621,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/EventToLog.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["thus",{"_index":3369,"title":{},"body":{"license.html":{}}}],["ticket",{"_index":2085,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["ticket.ticketid",{"_index":2106,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["ticket.userid",{"_index":2572,"title":{},"body":{"injectables/TasksService.html":{}}}],["ticketid",{"_index":2098,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["tickets",{"_index":2564,"title":{},"body":{"injectables/TasksService.html":{}}}],["tickets.foreach(async",{"_index":2566,"title":{},"body":{"injectables/TasksService.html":{}}}],["ticketsystem",{"_index":2582,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["ticketsystemsetupcommand",{"_index":411,"title":{"classes/TicketSystemSetupCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["time",{"_index":307,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/LogEntryDto.html":{},"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["time'})@isoptional",{"_index":295,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["timed",{"_index":2560,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["timeout",{"_index":2016,"title":{},"body":{"classes/LogEntry.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["timeout.dto",{"_index":2601,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["timeout.dto.ts",{"_index":2803,"title":{},"body":{"classes/UserTimeOutDto.html":{},"coverage.html":{}}}],["timeout.dto.ts:16",{"_index":2815,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout.dto.ts:27",{"_index":2814,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout.dto.ts:72",{"_index":2813,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout_expired",{"_index":2015,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["timeoutcommand",{"_index":384,"title":{"classes/TimeOutCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["timeouted",{"_index":2523,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["timeouts",{"_index":2519,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["timeoutuser",{"_index":2682,"title":{},"body":{"controllers/UserController.html":{}}}],["timeoutuser(guildid",{"_index":2701,"title":{},"body":{"controllers/UserController.html":{}}}],["timestamp",{"_index":428,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["timezone",{"_index":1177,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{}}}],["todo",{"_index":2728,"title":{},"body":{"controllers/UserController.html":{}}}],["toformattedlog",{"_index":505,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["toformattedlog(logger",{"_index":512,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["toisostring",{"_index":2740,"title":{},"body":{"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{}}}],["token",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthService.html":{}}}],["token.strategy",{"_index":1873,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["token.strategy.ts",{"_index":2227,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:10",{"_index":2228,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["token.strategy.ts:19",{"_index":2229,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["tolocalestring",{"_index":2562,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["tonimsgstobird",{"_index":1354,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["tonimsgstobird(message",{"_index":1360,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["tools",{"_index":3325,"title":{},"body":{"license.html":{}}}],["topic",{"_index":426,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["tostring",{"_index":2617,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["total",{"_index":270,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["touch",{"_index":3043,"title":{},"body":{"index.html":{}}}],["touser",{"_index":2472,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["touser.id",{"_index":2475,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["touserid",{"_index":2458,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["trade",{"_index":3611,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3610,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3612,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":3554,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1967,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["transferred",{"_index":3556,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":3667,"title":{},"body":{"license.html":{}}}],["transform",{"_index":2804,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["transformer",{"_index":1106,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildUserController.html":{},"classes/UserTimeOutDto.html":{},"dependencies.html":{}}}],["transformers",{"_index":826,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"properties.html":{}}}],["transmission",{"_index":3508,"title":{},"body":{"license.html":{}}}],["treated",{"_index":3580,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":3395,"title":{},"body":{"license.html":{}}}],["tries",{"_index":2356,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["triggered",{"_index":2360,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["true",{"_index":77,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RoleResponse.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["true})@isdatestring",{"_index":2805,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["true})@isstring",{"_index":839,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{}}}],["try",{"_index":74,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["trying",{"_index":1941,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["twitter",{"_index":3049,"title":{},"body":{"index.html":{}}}],["two",{"_index":3165,"title":{},"body":{"license.html":{}}}],["twoweekdate",{"_index":1503,"title":{},"body":{"injectables/GuildService.html":{}}}],["tyep",{"_index":1345,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["type",{"_index":22,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":2922,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typealiases",{"_index":3892,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1073,"title":{},"body":{"classes/Explorer.html":{},"classes/LogEntry.html":{}}}],["typeofattachments",{"_index":1396,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["typescript",{"_index":3012,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typical",{"_index":3533,"title":{},"body":{"license.html":{}}}],["ui.command",{"_index":400,"title":{},"body":{"modules/BotModule.html":{}}}],["ui.command.ts",{"_index":2365,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["ui.command.ts:16",{"_index":2367,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["ui.command.ts:18",{"_index":2756,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["ui.command.ts:24",{"_index":2370,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["ui.command.ts:26",{"_index":2760,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["ui.command.ts:80",{"_index":2758,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["um",{"_index":960,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["umarmen",{"_index":2868,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["umarmung",{"_index":2451,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["unauthorizedexception",{"_index":1788,"title":{},"body":{"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{}}}],["und",{"_index":949,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/LogEntry.html":{}}}],["undefined",{"_index":348,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"classes/ModAnnouncementDto.html":{},"injectables/ModRequestFlow.html":{},"classes/MumVoiceCommand.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["undefined.ts",{"_index":2910,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":3214,"title":{},"body":{"license.html":{}}}],["unicodeemoji",{"_index":974,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":3025,"title":{},"body":{"index.html":{}}}],["unkickablemembers",{"_index":1519,"title":{},"body":{"injectables/GuildService.html":{}}}],["unkickablemembers.push(member",{"_index":1522,"title":{},"body":{"injectables/GuildService.html":{}}}],["unknown",{"_index":327,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/ModRequestFlow.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":3542,"title":{},"body":{"license.html":{}}}],["unlimited",{"_index":3353,"title":{},"body":{"license.html":{}}}],["unlocked",{"_index":1283,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["unlocked.guard",{"_index":1365,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["unlocked.guard.ts",{"_index":853,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["unlocked.guard.ts:11",{"_index":856,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{}}}],["unlocked.guard.ts:14",{"_index":1819,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{}}}],["unlocked.guard.ts:19",{"_index":1820,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{}}}],["unlockuser",{"_index":1230,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["unlockuser(reaction",{"_index":1247,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["unmodified",{"_index":3244,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":3382,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":3576,"title":{},"body":{"license.html":{}}}],["until",{"_index":2561,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["unverified",{"_index":1313,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/initGuildCommand.html":{}}}],["unverifiedmemberroleid",{"_index":2394,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["unverifybyrolecommand",{"_index":2636,"title":{"classes/UnverifyByRoleCommand.html":{}},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["up",{"_index":1491,"title":{},"body":{"injectables/GuildService.html":{}}}],["update",{"_index":1158,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"controllers/RoleController.html":{}}}],["update(json.stringify(interaction.user.displayname",{"_index":2087,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["updateautodeletechannel",{"_index":1093,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["updateautodeletechannel(guildid",{"_index":1099,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["updatechannelpermissions",{"_index":1441,"title":{},"body":{"injectables/GuildService.html":{}}}],["updatechannelpermissions(user",{"_index":1494,"title":{},"body":{"injectables/GuildService.html":{}}}],["updated",{"_index":994,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{}}}],["updated'})@apiresponse({status",{"_index":2257,"title":{},"body":{"controllers/RoleController.html":{}}}],["updated/created",{"_index":498,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["updatemessagecountbucket",{"_index":1702,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["updatemessagecountbucket(userid",{"_index":1735,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["updaterank",{"_index":1231,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["updaterank(oldmember",{"_index":1250,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["updaterole",{"_index":2241,"title":{},"body":{"controllers/RoleController.html":{}}}],["updaterole(guildid",{"_index":2255,"title":{},"body":{"controllers/RoleController.html":{}}}],["updates",{"_index":1493,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["upsert",{"_index":1146,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildUserService.html":{}}}],["upsert(guildid",{"_index":1151,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{}}}],["upsert(userid",{"_index":1737,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["upsertguild",{"_index":1442,"title":{},"body":{"injectables/GuildService.html":{}}}],["upsertguild(guildid",{"_index":1496,"title":{},"body":{"injectables/GuildService.html":{}}}],["url",{"_index":824,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"injectables/GuildMessageHandler.html":{},"classes/RoleResponse.html":{}}}],["urlencoded",{"_index":1932,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["urlsearchparams",{"_index":1917,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["usable",{"_index":1651,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["use",{"_index":2698,"title":{},"body":{"controllers/UserController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":633,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/EventToLog.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"modules/UserModule.html":{},"miscellaneous/functions.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["usefilters",{"_index":2462,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["usefilters(commandvalidationfilter",{"_index":2471,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["useful",{"_index":3858,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["useguards(ismodalinteractionguard",{"_index":803,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["useguards(jwtauthguard",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["useguards(messagefromuserguard",{"_index":1369,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["useguards(messageisdmguard",{"_index":942,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["useguards(refreshjwtguard",{"_index":1849,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["useguards(refreshjwtguard)@apiheader({name",{"_index":1832,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["user",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/PermissionOverwrite.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user.ban",{"_index":2726,"title":{},"body":{"controllers/UserController.html":{}}}],["user.controller",{"_index":1689,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["user.controller.ts",{"_index":1663,"title":{},"body":{"controllers/GuildUserController.html":{},"coverage.html":{}}}],["user.controller.ts:19",{"_index":1667,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["user.decorator",{"_index":1671,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["user.decorator.ts",{"_index":2912,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":2461,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["user.dto.ts",{"_index":2857,"title":{},"body":{"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:21",{"_index":2863,"title":{},"body":{"classes/UserToUser.html":{}}}],["user.dto.ts:28",{"_index":2861,"title":{},"body":{"classes/UserToUser.html":{}}}],["user.guard",{"_index":1364,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["user.guard.ts",{"_index":2030,"title":{},"body":{"guards/MessageFromUserGuard.html":{},"coverage.html":{}}}],["user.guard.ts:5",{"_index":2031,"title":{},"body":{"guards/MessageFromUserGuard.html":{}}}],["user.guildid",{"_index":2136,"title":{},"body":{"injectables/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["user.id",{"_index":1339,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/TimeOutCommand.html":{}}}],["user.kick",{"_index":2733,"title":{},"body":{"controllers/UserController.html":{}}}],["user.messagecountbucket",{"_index":1433,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["user.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{}}}],["user.module.ts",{"_index":1688,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["user.purge",{"_index":2753,"title":{},"body":{"controllers/UserController.html":{}}}],["user.rank",{"_index":1293,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{}}}],["user.send",{"_index":2614,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.send.failed",{"_index":2623,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.service",{"_index":1143,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["user.service.ts",{"_index":1690,"title":{},"body":{"injectables/GuildUserService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["user.service.ts:100",{"_index":1736,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:122",{"_index":1729,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:137",{"_index":1722,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:150",{"_index":1714,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:163",{"_index":1712,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:177",{"_index":1732,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:18",{"_index":1703,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:181",{"_index":1710,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:189",{"_index":1708,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:197",{"_index":1706,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:26",{"_index":1734,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:33",{"_index":1720,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:42",{"_index":1738,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:54",{"_index":1727,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:78",{"_index":1716,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:89",{"_index":1718,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.timeout(date",{"_index":2606,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.timeout.created",{"_index":2634,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["user.timeout.failed",{"_index":2610,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.user.username",{"_index":2626,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.userid",{"_index":1914,"title":{},"body":{"injectables/JwtAuthService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["user.userid.tostring",{"_index":1555,"title":{},"body":{"injectables/GuildService.html":{}}}],["user/dto/self.dto",{"_index":1668,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["user/dto/self.dto.ts",{"_index":2315,"title":{},"body":{"classes/SelfDto-1.html":{},"coverage.html":{}}}],["user/dto/self.dto.ts:5",{"_index":2321,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:6",{"_index":2317,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:7",{"_index":2320,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:8",{"_index":2316,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:9",{"_index":2318,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/guild",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["user/self",{"_index":2294,"title":{},"body":{"controllers/SelfController.html":{}}}],["user/user.controller",{"_index":2167,"title":{},"body":{"modules/ModerationModule.html":{}}}],["user/user.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["user['userid",{"_index":2340,"title":{},"body":{"injectables/SelfService.html":{}}}],["user_banned",{"_index":1998,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_id",{"_index":1449,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{}}}],["user_joined",{"_index":1995,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_left",{"_index":1997,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_unbanned",{"_index":1999,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_updated",{"_index":2000,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["userbanevent",{"_index":2659,"title":{"classes/UserBanEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userbanevent(userid",{"_index":2727,"title":{},"body":{"controllers/UserController.html":{}}}],["usercontroller",{"_index":2165,"title":{"controllers/UserController.html":{}},"body":{"modules/ModerationModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["usercounts",{"_index":1539,"title":{},"body":{"injectables/GuildService.html":{}}}],["usercounts.length",{"_index":1543,"title":{},"body":{"injectables/GuildService.html":{}}}],["usercounts.reduce((sum",{"_index":1541,"title":{},"body":{"injectables/GuildService.html":{}}}],["userid",{"_index":67,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["userinfouicommand",{"_index":398,"title":{"classes/UserInfoUiCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["userkickevent",{"_index":2669,"title":{"classes/UserKickEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userkickevent(userid",{"_index":2734,"title":{},"body":{"controllers/UserController.html":{}}}],["userlimit",{"_index":495,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["usermention",{"_index":657,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildSettingsService.html":{},"injectables/ModRequestFlow.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["usermention(fromuserid",{"_index":2483,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["usermention(interaction.targetid",{"_index":2770,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["usermention(interaction.user.id",{"_index":2090,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["usermention(member.id",{"_index":692,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["usermention(message.author.id",{"_index":1659,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["usermention(touserid",{"_index":2485,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["usermention(user.id",{"_index":2627,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["usermodule",{"_index":108,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":873,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/GuildSettingsService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["userpurgeevent",{"_index":2675,"title":{"classes/UserPurgeEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userpurgeevent(userid",{"_index":2754,"title":{},"body":{"controllers/UserController.html":{}}}],["userresponseschema",{"_index":921,"title":{},"body":{"classes/DiscordUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":1746,"title":{},"body":{"injectables/GuildUserService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"license.html":{}}}],["users.length",{"_index":1749,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["usersenddmfailedevent",{"_index":2602,"title":{"classes/UserSendDMFailedEvent.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usersenddmfailedevent(user.id",{"_index":2624,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["userservice",{"_index":1672,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/TasksService.html":{}}}],["usersresponseschema",{"_index":922,"title":{},"body":{"classes/DiscordUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice",{"_index":1887,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["usertimeoutdto",{"_index":2598,"title":{"classes/UserTimeOutDto.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{}}}],["usertimeoutevent",{"_index":2542,"title":{"classes/UserTimeOutEvent.html":{}},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usertimeoutevent(user.id",{"_index":2635,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["usertimeoutfailedevent",{"_index":2603,"title":{"classes/UserTimeOutFailedEvent.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usertouser",{"_index":2454,"title":{"classes/UserToUser.html":{}},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"coverage.html":{}}}],["uses",{"_index":3536,"title":{},"body":{"license.html":{}}}],["using",{"_index":1217,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"classes/MumVoiceCommand.html":{},"license.html":{},"properties.html":{}}}],["utf8",{"_index":2088,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["util/decorators/request",{"_index":2305,"title":{},"body":{"controllers/SelfController.html":{}}}],["util/dto/log.entry.dto",{"_index":251,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"classes/LogEntryDto.html":{}}}],["util/exception/guild",{"_index":1623,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["util/functions/plain",{"_index":247,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildSettingsController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{}}}],["util/interfaces/event",{"_index":219,"title":{},"body":{"injectables/AppService.html":{}}}],["utility",{"_index":2534,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["utils",{"_index":573,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["utils.ts",{"_index":2921,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["valid",{"_index":3474,"title":{},"body":{"license.html":{}}}],["validate",{"_index":1950,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/UserTimeOutDto.html":{}}}],["validate(payload",{"_index":1953,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["validateuser",{"_index":1884,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["validateuser(userid",{"_index":1895,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["validation",{"_index":2464,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["validation.ts",{"_index":701,"title":{},"body":{"classes/CommandValidationFilter.html":{},"coverage.html":{}}}],["validation.ts:7",{"_index":704,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["validationpipe",{"_index":238,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommand.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["validator",{"_index":303,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{},"classes/UserTimeOutDto.html":{},"dependencies.html":{}}}],["value",{"_index":215,"title":{},"body":{"injectables/AppService.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"injectables/ModRequestFlow.html":{},"classes/SettingsChanged.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.trim",{"_index":2826,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["values",{"_index":1204,"title":{},"body":{"controllers/GuildController.html":{}}}],["variable",{"_index":2889,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1652,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/GuildSettingsService.html":{},"miscellaneous/variables.html":{}}}],["verbatim",{"_index":3127,"title":{},"body":{"license.html":{}}}],["vereinsmitglied",{"_index":1512,"title":{},"body":{"injectables/GuildService.html":{}}}],["verified",{"_index":3095,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["verifiedmemberroleid",{"_index":2395,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["verifiedroleid",{"_index":1302,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["versendet",{"_index":2114,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["version",{"_index":3113,"title":{},"body":{"license.html":{},"properties.html":{}}}],["versions",{"_index":3149,"title":{},"body":{"license.html":{}}}],["very",{"_index":2696,"title":{},"body":{"controllers/UserController.html":{}}}],["via",{"_index":2338,"title":{},"body":{"injectables/SelfService.html":{}}}],["vide/mp4",{"_index":2980,"title":{},"body":{"miscellaneous/functions.html":{}}}],["view",{"_index":3280,"title":{},"body":{"license.html":{}}}],["viewchannel",{"_index":1559,"title":{},"body":{"injectables/GuildService.html":{}}}],["violates",{"_index":3571,"title":{},"body":{"license.html":{}}}],["violation",{"_index":3633,"title":{},"body":{"license.html":{}}}],["visible",{"_index":3274,"title":{},"body":{"license.html":{}}}],["void",{"_index":213,"title":{},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["volume",{"_index":3452,"title":{},"body":{"license.html":{}}}],["von",{"_index":829,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/ModRequestFlow.html":{}}}],["wait",{"_index":1307,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["waive",{"_index":3403,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":3838,"title":{},"body":{"license.html":{}}}],["want",{"_index":841,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/UserToUser.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["warn",{"_index":1996,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":3279,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3278,"title":{},"body":{"license.html":{}}}],["watch",{"_index":3020,"title":{},"body":{"index.html":{}}}],["way",{"_index":2509,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["ways",{"_index":3465,"title":{},"body":{"license.html":{}}}],["web",{"_index":3865,"title":{},"body":{"license.html":{}}}],["webhook",{"_index":1988,"title":{},"body":{"classes/LogEntry.html":{}}}],["webhooks_updated",{"_index":2014,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":3047,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":1270,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{}}}],["weeks",{"_index":663,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{}}}],["welcher",{"_index":2869,"title":{},"body":{"classes/UserToUser.html":{}}}],["welches",{"_index":2588,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["welcomemessageformat",{"_index":2396,"title":{},"body":{"classes/SettingsDto.html":{}}}],["well",{"_index":1976,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["wende",{"_index":2620,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["werden",{"_index":684,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["wfp",{"_index":658,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{}}}],["wfp.command",{"_index":407,"title":{},"body":{"modules/BotModule.html":{}}}],["wfp.command.ts",{"_index":649,"title":{},"body":{"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["wfp.command.ts:18",{"_index":652,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["wfp.command.ts:21",{"_index":654,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["whatever",{"_index":3673,"title":{},"body":{"license.html":{}}}],["whenever",{"_index":1268,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["whether",{"_index":452,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["white",{"_index":977,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["whole",{"_index":3302,"title":{},"body":{"license.html":{}}}],["whose",{"_index":3515,"title":{},"body":{"license.html":{}}}],["widely",{"_index":3297,"title":{},"body":{"license.html":{}}}],["widespread",{"_index":3179,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["willst",{"_index":2871,"title":{},"body":{"classes/UserToUser.html":{}}}],["window",{"_index":3314,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":3394,"title":{},"body":{"license.html":{}}}],["wish",{"_index":3156,"title":{},"body":{"license.html":{}}}],["within",{"_index":1040,"title":{},"body":{"interfaces/EventToLog.html":{},"license.html":{}}}],["without",{"_index":3196,"title":{},"body":{"license.html":{}}}],["wording",{"_index":1983,"title":{},"body":{"classes/LogEntry.html":{}}}],["work",{"_index":3230,"title":{},"body":{"license.html":{}}}],["work's",{"_index":3323,"title":{},"body":{"license.html":{}}}],["working",{"_index":3298,"title":{},"body":{"license.html":{}}}],["works",{"_index":3135,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3707,"title":{},"body":{"license.html":{}}}],["write",{"_index":1030,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["writing",{"_index":3798,"title":{},"body":{"license.html":{}}}],["written",{"_index":1455,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"license.html":{},"properties.html":{}}}],["wrongargsexception",{"_index":703,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["ws",{"_index":2195,"title":{},"body":{"classes/PingCommand.html":{}}}],["wurde",{"_index":2112,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["wurden",{"_index":681,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["www",{"_index":1930,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["wähle",{"_index":2143,"title":{},"body":{"injectables/ModRequestFlow.html":{}}}],["x",{"_index":2444,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["xd",{"_index":2806,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxh",{"_index":2809,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxhxm",{"_index":2812,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxm",{"_index":2811,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xh",{"_index":2807,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xhxm",{"_index":2810,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xm",{"_index":2808,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["y",{"_index":2442,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["yarn",{"_index":3016,"title":{},"body":{"index.html":{}}}],["years",{"_index":3476,"title":{},"body":{"license.html":{}}}],["you'd",{"_index":3040,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":3724,"title":{},"body":{"license.html":{}}}],["z",{"_index":2445,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["zoom",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["zu",{"_index":962,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["zwar",{"_index":946,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddRoleCommand.html":{"url":"classes/AddRoleCommand.html","title":"class - AddRoleCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddRoleCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/add-role.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onRoleAdd\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/add-role.command.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onRoleAdd\n                        \n                    \n                \n            \n            \n                \n                        \n                    onRoleAdd(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/add-role.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport { Client, CommandInteraction } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { Prisma } from '@prisma/client';\n\n@Command({\n  name: 'lift-lockdown',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class AddRoleCommand {\n  constructor(\n    @InjectDiscordClient() private client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  @Handler()\n  async onRoleAdd(@InteractionEvent() interaction: CommandInteraction) {\n    interaction.guild.members.fetch().then((members) =>\n      members.forEach(async (member) => {\n        if (\n          member.roles.cache.has('1011563978956226560') ||\n          member.roles.cache.has('1011513775054143632')\n        )\n          return;\n        if (member.roles.cache.has('1121823930085285938')) {\n          const roles = (\n            await this.database.lockdownRoleBackup.findUnique({\n              where: {\n                guildId_userId: { guildId: member.guild.id, userId: member.id },\n              },\n            })\n          ).roles as Prisma.JsonArray;\n          let error = false;\n          roles.forEach((role: { id: string }) => {\n            try {\n              member.roles.add(role.id);\n            } catch {\n              error = true;\n            }\n          });\n          if (!error)\n            this.database.lockdownRoleBackup.delete({\n              where: {\n                guildId_userId: {\n                  guildId: member.guild.id,\n                  userId: member.id,\n                },\n              },\n            });\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt/guards/jwt-auth.guard';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller()\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class AppController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nBotModule\n\nBotModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBotModule->AppModule\n\n\n\n\n\nGuildModule\n\nGuildModule\n\nAppModule -->\n\nGuildModule->AppModule\n\n\n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nAppModule -->\n\nJwtAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BotModule\n                        \n                        \n                            GuildModule\n                        \n                        \n                            JwtAuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { JwtAuthModule } from './auth/jwt/jwt-auth.module';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { Client, GatewayIntentBits, Partials } from 'discord.js';\nimport { BotModule } from './bot/bot.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { ModerationModule } from './guild/moderation/moderation.module';\nimport { GuildSettingsModule } from './guild/guild-settings/guild-settings.module';\nimport { AuditLogModule } from './auditlog/auditlog.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { GuildUserModule } from './guild/guild-user/guild-user.module';\nimport { GuildModule } from './guild/guild.module';\nimport { RouterModule } from '@nestjs/core';\nimport { PrismaService } from './prisma.service';\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    ConfigModule.forRoot({\n      isGlobal: true,\n      ignoreEnvVars: false,\n    }),\n    DiscordModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        token: configService.get('TOKEN'),\n        discordClientOptions: {\n          intents: [\n            GatewayIntentBits.AutoModerationConfiguration,\n            GatewayIntentBits.AutoModerationExecution,\n            GatewayIntentBits.GuildPresences,\n            GatewayIntentBits.Guilds,\n            GatewayIntentBits.GuildMessages,\n            GatewayIntentBits.MessageContent,\n            GatewayIntentBits.GuildMembers,\n            GatewayIntentBits.GuildMessageReactions,\n            GatewayIntentBits.GuildModeration,\n            GatewayIntentBits.GuildInvites,\n            GatewayIntentBits.GuildVoiceStates,\n            GatewayIntentBits.GuildMessageTyping,\n            GatewayIntentBits.GuildWebhooks,\n            GatewayIntentBits.GuildIntegrations,\n            GatewayIntentBits.GuildMessageTyping,\n            GatewayIntentBits.GuildEmojisAndStickers,\n            GatewayIntentBits.DirectMessageTyping,\n            GatewayIntentBits.DirectMessages,\n            GatewayIntentBits.DirectMessageReactions,\n          ],\n          partials: [\n            Partials.GuildMember,\n            Partials.ThreadMember,\n            Partials.User,\n            Partials.Message,\n            Partials.Channel,\n            Partials.Reaction,\n            Partials.GuildScheduledEvent,\n          ],\n        },\n\n        registerCommandOptions: [\n          {\n            removeCommandsBefore: true,\n            forGuild: '1011511871297302608',\n          },\n        ],\n\n        failOnLogin: true,\n      }),\n      inject: [ConfigService],\n      setupClientFactory: (client: Client) => {\n        client.setMaxListeners(30);\n      },\n    }),\n    EventEmitterModule.forRoot({\n      wildcard: true,\n    }),\n    RouterModule.register([\n      {\n        path: 'guild/:guildId',\n        children: [\n          {\n            path: '/',\n            module: GuildModule,\n          },\n          {\n            path: '/auditlog',\n            module: AuditLogModule,\n          },\n          {\n            path: '/user',\n            module: GuildUserModule,\n          },\n          {\n            path: '/settings',\n            module: GuildSettingsModule,\n          },\n          {\n            path: '/moderation',\n            module: ModerationModule,\n          },\n        ],\n      },\n    ]),\n    UserModule,\n    JwtAuthModule,\n    GuildModule,\n    BotModule,\n    TasksModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, PrismaService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleEvent(event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('**')\n                \n            \n\n                    \n                        \n                            Defined in src/app.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('AppService')\n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { EventToLog } from './util/interfaces/event-to-log';\n\n@Injectable()\nexport class AppService {\n  logger = new Logger('AppService');\n  constructor(\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @OnEvent('**')\n  handleEvent(event: any & EventToLog) {\n    event.toFormattedLog(this.logger);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuditLogController.html":{"url":"controllers/AuditLogController.html","title":"controller - AuditLogController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuditLogController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/auditlog.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getAuditLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAuditLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuditLog(guildId: string, filter: AuditLogFilterDto, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auditlog/auditlog.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            AuditLogFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Param,\n  ParseIntPipe,\n  Query,\n  UseGuards,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuditLogFilterDto } from './dto/audit-log-filter.dto';\nimport { AuditLogService } from './auditlog.service';\nimport { LogEntryDto } from './dto/log-entry.dto';\nimport { plainToInstance } from '../util/functions/plain-to-instance';\nimport { Action, TargetType } from '../util/dto/log.entry.dto';\nimport { Rank } from '@prisma/client';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller()\n@RequiredRank(Rank.MEMBER)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class AuditLogController {\n  constructor(\n    @Inject(AuditLogService) private readonly auditLogService: AuditLogService,\n  ) {}\n\n  @Get()\n  async getAuditLog(\n    @Param('guildId') guildId: string,\n    @Query(ValidationPipe) filter: AuditLogFilterDto,\n    @Query('limit', ParseIntPipe) limit: number,\n    @Query('offset', ParseIntPipe) offset: number,\n  ): Promise {\n    return this.auditLogService\n      .find(guildId, filter, { offset, limit })\n      .then((result) => ({\n        total: result.total,\n        data: result.data.map((it) =>\n          plainToInstance(LogEntryDto, {\n            action: it.action as Action,\n            createdAt: it.createdAt,\n            invokerId: it.invokerId,\n            reason: it.reason,\n            targetId: it.targetId,\n            targetType: it.targetType as TargetType,\n          }),\n        ),\n      }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuditLogFilterDto.html":{"url":"classes/AuditLogFilterDto.html","title":"class - AuditLogFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuditLogFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/dto/audit-log-filter.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                action\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdFrom\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdTill\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', enum: actions})@IsOptional()@IsString()@IsIn(actions)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdFrom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', format: 'date-time'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdTill\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', format: 'date-time'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', enum: targetTypes})@IsOptional()@IsString()@IsIn(targetTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  Action,\n  actions,\n  TargetType,\n  targetTypes,\n} from '../../util/dto/log.entry.dto';\n\nexport class AuditLogFilterDto {\n  @ApiPropertyOptional({ type: 'string', format: 'date-time' })\n  @IsOptional()\n  createdFrom?: string;\n  @ApiPropertyOptional({ type: 'string', format: 'date-time' })\n  @IsOptional()\n  createdTill?: string;\n  @ApiPropertyOptional({ type: 'string', enum: targetTypes })\n  @IsOptional()\n  @IsString()\n  @IsIn(targetTypes)\n  targetType?: TargetType;\n  @ApiPropertyOptional({ type: 'string', enum: actions })\n  @IsOptional()\n  @IsString()\n  @IsIn(actions)\n  action?: Action;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuditLogModule.html":{"url":"modules/AuditLogModule.html","title":"module - AuditLogModule","body":"\n                   \n\n\n\n\n    Modules\n    AuditLogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuditLogModule\n\n\n\ncluster_AuditLogModule_exports\n\n\n\ncluster_AuditLogModule_providers\n\n\n\n\nAuditLogService \n\nAuditLogService \n\n\n\nAuditLogModule\n\nAuditLogModule\n\nAuditLogService  -->\n\nAuditLogModule->AuditLogService \n\n\n\n\n\nAuditEvents\n\nAuditEvents\n\nAuditLogModule -->\n\nAuditEvents->AuditLogModule\n\n\n\n\n\nAuditLogService\n\nAuditLogService\n\nAuditLogModule -->\n\nAuditLogService->AuditLogModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuditLogModule -->\n\nPrismaService->AuditLogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auditlog/auditlog.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuditEvents\n                        \n                        \n                            AuditLogService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuditLogController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuditLogService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuditLogController } from './auditlog.controller';\nimport { AuditLogService } from './auditlog.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\nimport AuditEvents from './auditlog.events';\n\n@Module({\n  controllers: [AuditLogController],\n  providers: [AuditLogService, PrismaService, AuditEvents],\n  imports: [DiscordModule.forFeature()],\n  exports: [AuditLogService],\n})\nexport class AuditLogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditLogService.html":{"url":"injectables/AuditLogService.html","title":"injectable - AuditLogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditLogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/auditlog.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auditlog/auditlog.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(entry: LogEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auditlog/auditlog.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            LogEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                        \n                    find(guildId: string, filter: AuditLogFilterDto, pagination: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auditlog/auditlog.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            AuditLogFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport LogEntry from 'src/util/dto/log.entry.dto';\nimport { PrismaService } from 'src/prisma.service';\nimport { AuditLogFilterDto } from './dto/audit-log-filter.dto';\n\n@Injectable()\nexport class AuditLogService {\n  constructor(@Inject(PrismaService) private prismaService: PrismaService) {}\n\n  async create(entry: LogEntry) {\n    return this.prismaService.auditLog.create({\n      data: {\n        action: entry.action,\n        guildId: entry.guildId,\n        invokerId: entry.invokerId,\n        reason: entry.reason,\n        targetId: entry.targetId,\n        targetType: entry.targetType,\n        extraInfo: entry.extraInfo || null,\n        createdAt: entry.createdAt,\n      },\n    });\n  }\n\n  async find(\n    guildId: string,\n    filter: AuditLogFilterDto,\n    pagination: { offset?: number; limit?: number },\n  ) {\n    const where = {\n      guildId,\n      createdAt:\n        filter.createdFrom || filter.createdTill\n          ? {\n              gte: filter.createdFrom\n                ? new Date(filter.createdFrom).toISOString()\n                : undefined,\n              lte: filter.createdTill\n                ? new Date(filter.createdTill).toISOString()\n                : undefined,\n            }\n          : undefined,\n      action: filter.action,\n      targetType: filter.targetType,\n    };\n\n    return {\n      total: await this.prismaService.auditLog.count({ where }),\n      data: await this.prismaService.auditLog.findMany({\n        select: {\n          action: true,\n          invokerId: true,\n          reason: true,\n          targetId: true,\n          targetType: true,\n          extraInfo: true,\n          createdAt: true,\n        },\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        skip: pagination.offset ?? 0,\n        take: pagination.limit ?? 0,\n      }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BotEvent.html":{"url":"interfaces/BotEvent.html","title":"interface - BotEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BotEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/interfaces/bot-event.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        __bot_event_handler__\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        __bot_event_handler__\n                        \n                    \n                \n            \n            \n                \n__bot_event_handler__(...args: ClientEvents)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/interfaces/bot-event.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ClientEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ClientEvents } from 'discord.js';\n\nexport default interface BotEvent {\n  __bot_event_handler__(\n    ...args: ClientEvents[keyof ClientEvents]\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BotModule.html":{"url":"modules/BotModule.html","title":"module - BotModule","body":"\n                   \n\n\n\n\n    Modules\n    BotModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BotModule\n\n\n\ncluster_BotModule_providers\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\n\n\nBotModule\n\nBotModule\n\nBotModule -->\n\nGuildRestrictedChannelService->BotModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nBotModule -->\n\nGuildService->BotModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nBotModule -->\n\nGuildSettingsService->BotModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nBotModule -->\n\nPrismaService->BotModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bot/bot.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { DiscordModule } from '@discord-nestjs/core';\nimport { Module } from '@nestjs/common';\nimport { PingCommand } from './commands/ping.command';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { TimeOutCommand } from './commands/timeout.command';\nimport { MumVoiceCommand } from './commands/mod-anouncement.command';\nimport { GuildRestrictedChannelService } from 'src/guild/guild-restricted-channel/guild-restricted-channel.service';\nimport { CommunityQuestionCommand } from './commands/community-question.command';\nimport { initGuildCommand } from './commands/init-guild.command';\nimport { UserInfoUiCommand } from './commands/user-info-ui.command';\nimport { SetFirstMessageUICommand } from './commands/user-set-first-message-ui.command';\nimport { CleanWfpMember } from './commands/clean-wfp.command';\nimport { GuildService } from 'src/guild/guild.service';\nimport { SpecialCommand } from './commands/special.command';\nimport { TicketSystemSetupCommand } from './commands/ticket-system.command';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [\n    PingCommand,\n    TimeOutCommand,\n    MumVoiceCommand,\n    CommunityQuestionCommand,\n    initGuildCommand,\n    PrismaService,\n    GuildSettingsService,\n    GuildRestrictedChannelService,\n    UserInfoUiCommand,\n    SetFirstMessageUICommand,\n    CleanWfpMember,\n    GuildService,\n    SpecialCommand,\n    TicketSystemSetupCommand,\n  ],\n  exports: [DiscordModule],\n})\nexport class BotModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Channel.html":{"url":"classes/Channel.html","title":"class - Channel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Channel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                flags\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastMessageId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                messages\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nsfw\n                            \n                            \n                                    \n                                    \n                                parentId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                permissionOverwrites\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                rateLimitPerUser\n                            \n                            \n                                    \n                                    \n                                rawPosition\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                threads\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                topic\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Timestamp when the channel was created', example: 1671981769958, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Flags for the channel', example: 0, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the guild', example: '616609333832187924', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the channel', example: '1056592866660581456', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastMessageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'ID of the last message', example: '1080070968900333578', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString()@IsOptional()@ApiProperty({description: 'Array of message IDs', type: undefined, example: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'Name of the channel', example: 'images', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nsfw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({description: 'Whether the channel is NSFW', example: false, type: Boolean, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the parent channel', example: '832170662491062333', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        permissionOverwrites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionOverwrite[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInstance(PermissionOverwrite)@IsOptional()@ApiProperty({description: 'Array of permission overwrites', type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        rateLimitPerUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({description: 'Rate limit per user aka slowmode', example: 0, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rawPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Raw position of the channel', example: 3, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        threads\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString()@IsOptional()@ApiProperty({description: 'Array of thread IDs', type: undefined, example: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'Topic of the channel', example: undefined, type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Type of the channel', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelCleaned.html":{"url":"classes/ChannelCleaned.html","title":"class - ChannelCleaned","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelCleaned\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                before\n                            \n                            \n                                channelId\n                            \n                            \n                                guildId\n                            \n                            \n                                messagesDeleted\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, messagesDeleted: number, before: number, userId: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesDeleted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        before\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        before\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messagesDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:52\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChannelController.html":{"url":"controllers/ChannelController.html","title":"controller - ChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/channel/channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /channel\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                cleanChannel\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editChannel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildChannel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildChannels\n                            \n                            \n                                    \n                                    \n                                    Async\n                                setSlowmode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        cleanChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanChannel(guildId: string, channelId: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channelId/clean')@ApiOperation({summary: 'Clean a channel'})@ApiBody({schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        editChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    editChannel(guildId: string, channelId: string, channelData: GuildChannelEditOptions)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':channelId')@ApiOperation({summary: 'Edit a channel for a guild'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelData\n                                            \n                                                            GuildChannelEditOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildChannel(guildId: string, channelId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':channelId')@ApiOperation({summary: 'Get a channel for a guild'})@ApiResponse({status: 200, type: Channel, description: 'Channel was successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildChannels\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildChannels(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all channels for a guild'})@ApiResponse({status: 200, type: undefined, description: 'Channels were successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        setSlowmode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSlowmode(guildId: string, channelId: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channelId/slowmode')@ApiOperation({summary: 'Set slowmode for a channel'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport {\n  Client,\n  GuildChannel,\n  GuildChannelEditOptions,\n  GuildBasedChannel,\n  ChannelType,\n  GuildTextBasedChannel,\n} from 'discord.js';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { Channel } from '../dto/channel';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  ChannelCleaned,\n  SlowmodeDisabled,\n  SlowmodeEnabled,\n} from '../events/channel.event';\nimport { ChannelNotTextBasedException } from 'src/util/exception/channel-not-text-based-exception';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { Rank } from '@prisma/client';\n\n@ApiTags('/channel')\n@Controller('/channel')\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class ChannelController {\n  logger = new Logger(ChannelController.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all channels for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: [Channel],\n    description: 'Channels were successfully fetched',\n  })\n  async getGuildChannels(\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(\n      `Found ${guild.channels.cache.size} channels in guild ${guildId}`,\n    );\n    return (await guild.channels.fetch()).toJSON();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get a channel for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: Channel,\n    description: 'Channel was successfully fetched',\n  })\n  async getGuildChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(\n      `Found ${guild.channels.cache.size} channels in guild ${guildId}`,\n    );\n    return await guild.channels.fetch(channelId);\n  }\n\n  @Put(':channelId')\n  @ApiOperation({ summary: 'Edit a channel for a guild' })\n  async editChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() channelData: GuildChannelEditOptions,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId);\n    await channel.edit(channelData);\n    this.logger.log(`Edited channel ${channelId} in guild ${guildId}`);\n    return channel;\n  }\n\n  @Post(':channelId/slowmode')\n  @ApiOperation({ summary: 'Set slowmode for a channel' })\n  async setSlowmode(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() { duration }: { duration: number },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId) as GuildChannel;\n    this.logger.log(\n      `Set slowmode for channel ${channelId} in guild ${guildId}`,\n    );\n    await this.eventEmitter.emitAsync(\n      `channel.slowmode.${duration > 0 ? 'enabled' : 'disabled'}`,\n      duration > 0\n        ? new SlowmodeEnabled(guildId, channelId, true, duration)\n        : new SlowmodeDisabled(guildId, channelId, false),\n    );\n    await channel.edit({ rateLimitPerUser: duration });\n  }\n\n  @Post(':channelId/clean')\n  @ApiOperation({ summary: 'Clean a channel' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        userId: {\n          type: 'string',\n        },\n        before: {\n          type: 'number',\n        },\n      },\n    },\n  })\n  async cleanChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() { userId, before }: { userId: string; before: number },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId);\n    this.logger.log(\n      `Cleaning channel ${channelId} in guild ${guildId} from messages before ${before} of user ${userId}`,\n    );\n    if (\n      channel.type in\n      [\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ]\n    ) {\n      cleanTextChannel(\n        channel as GuildTextBasedChannel,\n        (messages) => messages.last().createdTimestamp  msg.deletable && msg.createdTimestamp > before,\n        this.logger,\n      );\n    } else {\n      throw new ChannelNotTextBasedException(channel.name);\n    }\n    await this.eventEmitter.emitAsync(\n      'channel.clean',\n      new ChannelCleaned(guildId, channelId, 0, before, userId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelNotTextBasedException.html":{"url":"classes/ChannelNotTextBasedException.html","title":"class - ChannelNotTextBasedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelNotTextBasedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/channel-not-text-based-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when a channel isn't found by ID\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(channelName: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/channel-not-text-based-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        channelName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a channel isn't found by ID\n */\nexport class ChannelNotTextBasedException extends Error {\n  constructor(channelName: string) {\n    super(`Channel ${channelName} is not text based.`);\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(ChannelNotTextBasedException)\nexport class ChannelNotTextBasedExceptionFilter implements ExceptionFilter {\n  catch(exception: ChannelNotTextBasedException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelNotTextBasedExceptionFilter.html":{"url":"classes/ChannelNotTextBasedExceptionFilter.html","title":"class - ChannelNotTextBasedExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelNotTextBasedExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/channel-not-text-based-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to produce the http response when the exception is thrown in a http context\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: ChannelNotTextBasedException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/channel-not-text-based-exception.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            ChannelNotTextBasedException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a channel isn't found by ID\n */\nexport class ChannelNotTextBasedException extends Error {\n  constructor(channelName: string) {\n    super(`Channel ${channelName} is not text based.`);\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(ChannelNotTextBasedException)\nexport class ChannelNotTextBasedExceptionFilter implements ExceptionFilter {\n  catch(exception: ChannelNotTextBasedException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CleanWfpMember.html":{"url":"classes/CleanWfpMember.html","title":"class - CleanWfpMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CleanWfpMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/clean-wfp.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onCleanWfpMembers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildService: GuildService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/clean-wfp.command.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onCleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    onCleanWfpMembers(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/clean-wfp.command.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InteractionEvent } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  Colors,\n  CommandInteraction,\n  EmbedBuilder,\n  userMention,\n} from 'discord.js';\nimport { GuildService } from 'src/guild/guild.service';\n\n@Command({\n  name: 'clean-wfp',\n  description:\n    'Kick all members with the role `wfp` if they are longer than 2 weeks on the server.',\n  defaultMemberPermissions: ['ModerateMembers', 'KickMembers'],\n  dmPermission: false,\n})\nexport class CleanWfpMember {\n  constructor(@Inject(GuildService) private guildService: GuildService) {}\n  @Handler()\n  async onCleanWfpMembers(@InteractionEvent() interaction: CommandInteraction) {\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const outCome = await this.guildService.cleanWfpMembers(\n      interaction.guildId,\n      false,\n    );\n    console.log(outCome);\n    const embed = new EmbedBuilder()\n      .setTitle('wfp kick member report :3')\n      .setColor(Colors.Blue)\n      .setDescription(\n        'Member die kicked wurden bzw. nicht kicked werden konnten',\n      )\n      .addFields([\n        {\n          name: 'Kicked members count',\n          value: outCome['membersToKick'].length.toString() || '0',\n        },\n        {\n          name: 'Kicked members names',\n          value:\n            outCome['membersToKick']\n              .map((member) => userMention(member.id))\n              .join('\\n') || '',\n        },\n        {\n          name: \"Couldn't kick members count\",\n          value: outCome['unkickableMembers'].length.toString() || '0',\n        },\n        {\n          name: \"Couldn't kick members names\",\n          value:\n            outCome['unkickableMembers']\n              .map((member) => userMention(member.id))\n              .join('\\n') || '',\n        },\n      ]);\n    await interaction.followUp({\n      ephemeral: true,\n      embeds: [embed],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommandValidationFilter.html":{"url":"classes/CommandValidationFilter.html","title":"class - CommandValidationFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommandValidationFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/filters/command-validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(exceptionList: WrongArgsException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/filters/command-validation.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exceptionList\n                                            \n                                                        WrongArgsException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WrongArgsException } from '@discord-nestjs/common';\nimport { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { Colors, EmbedBuilder } from 'discord.js';\n\n@Catch(WrongArgsException)\nexport class CommandValidationFilter implements ExceptionFilter {\n  async catch(\n    exceptionList: WrongArgsException,\n    host: ArgumentsHost,\n  ): Promise {\n    const interaction = host.getArgByIndex(0);\n    const embeds = exceptionList.getError().map((exception) =>\n      new EmbedBuilder()\n        .setDescription(`For input: ${exception.property}`)\n        .setTitle('Validation failed')\n        .setColor(Colors.Red)\n        .addFields(\n          Object.keys(exception.constraints).map((key) => ({\n            name: key,\n            value: exception.constraints[key],\n          })),\n        ),\n    );\n\n    if (interaction.isRepliable())\n      await interaction.reply({ embeds, ephemeral: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionCommand.html":{"url":"classes/CommunityQuestionCommand.html","title":"class - CommunityQuestionCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/community-question.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onButtonPress\n                            \n                            \n                                    \n                                    Async\n                                onCommunityQuestion\n                            \n                            \n                                    \n                                    \n                                    Async\n                                onInteraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/community-question.command.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonPress\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonPress(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onCommunityQuestion\n                        \n                    \n                \n            \n            \n                \n                        \n                    onCommunityQuestion(interaction: CommandInteraction, question: CommunityQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                question\n                                            \n                                                            CommunityQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onInteraction\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInteraction(undefined: CommunityQuestionFormDto, eventArgs: ClientEvents)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')@UseGuards(IsModalInteractionGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CommunityQuestionFormDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventArgs\n                                            \n                                                        ClientEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n  IA,\n  On,\n  EventParams,\n} from '@discord-nestjs/core';\nimport { Inject, UseGuards, ValidationPipe } from '@nestjs/common';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  ButtonInteraction,\n  ButtonStyle,\n  Client,\n  ClientEvents,\n  CommandInteraction,\n  EmbedBuilder,\n  GuildTextBasedChannel,\n  ModalActionRowComponentBuilder,\n  ModalBuilder,\n  TextInputBuilder,\n  TextInputStyle,\n} from 'discord.js';\nimport { CommunityQuestionDto } from '../dto/commmunity-question.dto';\nimport {\n  ModalFieldsTransformPipe,\n  SlashCommandPipe,\n} from '@discord-nestjs/common';\nimport { IsModalInteractionGuard } from '../guards/is-modal-interaction.guard';\nimport { CommunityQuestionFormDto } from '../dto/community-question.form.dto';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'question',\n  description: 'Ask the community a question',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class CommunityQuestionCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private readonly prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onCommunityQuestion(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) question: CommunityQuestionDto,\n  ) {\n    const questionId = await this.prismaService.guildQuestion.create({\n      data: {\n        question: question.description,\n        guildId: interaction.guildId,\n      },\n      select: {\n        id: true,\n      },\n    });\n    const button = new ButtonBuilder()\n      .setCustomId(`community-question-${questionId.id}`)\n      .setLabel('Antwort geben')\n      .setStyle(ButtonStyle.Primary);\n\n    const row = new ActionRowBuilder().addComponents(button);\n    interaction.reply({\n      components: [row],\n      content: question.question,\n    });\n  }\n  @On('interactionCreate')\n  async onButtonPress(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (!interaction.customId.includes('community-question')) return;\n    const questionId = interaction.customId.split('-')[2];\n    const question = await this.prismaService.guildQuestion.findUnique({\n      where: {\n        id: parseInt(questionId),\n      },\n    });\n    if (!question) {\n      await interaction.reply({\n        content: 'Question not found, please contact the mods',\n        ephemeral: true,\n      });\n      return;\n    }\n    const modal = new ModalBuilder()\n      .setCustomId(`community-question-${questionId}`)\n      .setTitle('Community Frage');\n    const questionField = new TextInputBuilder()\n      .setCustomId('question')\n      .setLabel('Frage(Nicht bearbeiten)')\n      .setStyle(TextInputStyle.Paragraph)\n      .setValue(question.question)\n      .setRequired(false);\n    const answerInput = new TextInputBuilder()\n      .setCustomId('answer')\n      .setLabel('Antwort')\n      .setStyle(TextInputStyle.Paragraph)\n      .setRequired(true)\n      .setPlaceholder('Antwort');\n    const answerComponentRow =\n      new ActionRowBuilder().addComponents(\n        answerInput,\n      );\n    const questionComponentRow =\n      new ActionRowBuilder().addComponents(\n        questionField,\n      );\n\n    // Add inputs to the modal\n    modal.addComponents(questionComponentRow, answerComponentRow);\n    await interaction.showModal(modal);\n  }\n\n  @On('interactionCreate')\n  @UseGuards(IsModalInteractionGuard)\n  async onInteraction(\n    @IA(ModalFieldsTransformPipe) { answer }: CommunityQuestionFormDto,\n    @EventParams() eventArgs: ClientEvents['interactionCreate'],\n  ) {\n    const [modal] = eventArgs;\n    if (\n      !modal.isModalSubmit() ||\n      !modal.customId.startsWith('community-question')\n    )\n      return;\n    const questionId = modal.customId.split('-')[2];\n    const question = await this.prismaService.guildQuestion.findUnique({\n      where: {\n        id: parseInt(questionId),\n      },\n    });\n    await this.prismaService.guildQuestion.update({\n      where: {\n        id: parseInt(questionId),\n      },\n      data: {\n        answers: question.answers + 1,\n      },\n    });\n    await this.prismaService.guildQuestionAnswer.create({\n      data: {\n        answer: answer.value,\n        createdAt: new Date(),\n        guildQuestionId: parseInt(questionId),\n      },\n    });\n    if (answer.value != '')\n      (\n        (await (\n          await this.client.guilds.fetch(eventArgs[0].guildId)\n        ).channels.fetch('1195024829544411168')) as GuildTextBasedChannel\n      ).send({\n        embeds: [\n          new EmbedBuilder()\n            .setAuthor({\n              name: this.client.user.username,\n              iconURL: this.client.user.avatarURL(),\n              url: 'https://github.com/89Q12/Mega-Transformers-bot',\n            })\n            .addFields([\n              {\n                name: 'Antwort von nutzer:in',\n                value: answer.value,\n              },\n              {\n                name: 'Frage',\n                value: question.question,\n              },\n            ]),\n        ],\n      });\n    await modal.reply({ content: 'Antwort abgeschickt', ephemeral: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionDto.html":{"url":"classes/CommunityQuestionDto.html","title":"class - CommunityQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/commmunity-question.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'Description about the question displayed above the text input int the modal', type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/commmunity-question.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The question you want to ask the community', type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/commmunity-question.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { IsString } from 'class-validator';\n\nexport class CommunityQuestionDto {\n  @Param({\n    description: 'The question you want to ask the community',\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  question: string;\n\n  @Param({\n    description:\n      'Description about the question displayed above the text input int the modal',\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionFormDto.html":{"url":"classes/CommunityQuestionFormDto.html","title":"class - CommunityQuestionFormDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionFormDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/community-question.form.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                answer\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TextInputModalData\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field('answer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/community-question.form.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field } from '@discord-nestjs/core';\nimport { TextInputModalData } from 'discord.js';\n\nexport class CommunityQuestionFormDto {\n  @Field('answer')\n  answer: TextInputModalData;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiscordExecutionContext.html":{"url":"interfaces/DiscordExecutionContext.html","title":"interface - DiscordExecutionContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiscordExecutionContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/guards/user-is-unlocked.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ExecutionContext\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getMessage\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMessage\n                        \n                    \n                \n            \n            \n                \ngetMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/user-is-unlocked.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Message\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { Message } from 'discord.js';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\n\ninterface DiscordExecutionContext extends ExecutionContext {\n  getMessage(): Message;\n}\n@Injectable()\nexport class IsUserUnlockedGuard implements CanActivate {\n  constructor(\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n  ) {}\n  async canActivate(context: DiscordExecutionContext): Promise {\n    const message: Message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return message.member.roles.cache.has(\n      await this.settingsService.getVerifiedMemberRoleId(message.guildId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordGuildMember.html":{"url":"classes/DiscordGuildMember.html","title":"class - DiscordGuildMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordGuildMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/guild-member.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                    \n                                bot\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                communicationDisabledUntil\n                            \n                            \n                                    \n                                    \n                                displayName\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        communicationDisabledUntil\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()@IsOptional()@ApiPropertyOptional({type: String, format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiscordUser['id']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsDateString, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { DiscordUser } from './user';\n\nexport class DiscordGuildMember {\n  @IsString()\n  @ApiProperty({ type: String })\n  userId: DiscordUser['id'];\n  @IsString()\n  @ApiProperty({ type: String })\n  guildId: string;\n  @IsDateString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String, format: 'date-time' })\n  communicationDisabledUntil?: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  displayName: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  username: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  avatarUrl: string;\n  @IsBoolean()\n  @ApiProperty({ type: Boolean })\n  bot: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordUser.html":{"url":"classes/DiscordUser.html","title":"class - DiscordUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accentColor\n                            \n                            \n                                    \n                                    \n                                avatarURL\n                            \n                            \n                                    \n                                    \n                                bannerURL\n                            \n                            \n                                    \n                                    \n                                bot\n                            \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                discriminator\n                            \n                            \n                                    \n                                    \n                                displayAvatarURL\n                            \n                            \n                                    \n                                    \n                                flags\n                            \n                            \n                                    \n                                    \n                                hexAccentColor\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                system\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accentColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The accent color of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatarURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The avatar url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bannerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The banner url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the user is a bot', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The created timestamp of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        discriminator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The discriminator of the user but now ITS ALWAYS 0', example: '1234', deprecated: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        displayAvatarURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The display avatar url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The flags of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hexAccentColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The hex accent color of the user', example: '#000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the user', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        system\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the user is a system user', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The username of the user', example: 'John Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsNumber, IsString } from 'class-validator';\n\nclass DiscordUser {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the user',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The username of the user',\n    example: 'John Doe',\n  })\n  username: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The discriminator of the user but now ITS ALWAYS 0',\n    example: '1234',\n    deprecated: true,\n  })\n  discriminator: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The avatar url of the user',\n  })\n  avatarURL: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The display avatar url of the user',\n  })\n  displayAvatarURL: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The banner url of the user',\n  })\n  bannerURL: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the user is a bot',\n    example: false,\n  })\n  bot: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the user is a system user',\n    example: false,\n  })\n  system: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The flags of the user',\n    example: 0,\n  })\n  flags: number;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The created timestamp of the user',\n    example: 0,\n  })\n  createdTimestamp: number;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The accent color of the user',\n    example: 0,\n  })\n  accentColor: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The hex accent color of the user',\n    example: '#000000',\n  })\n  hexAccentColor: string;\n}\nconst userResponseSchema = {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    username: { type: 'string' },\n    discriminator: { type: 'string' },\n    avatarURL: { type: 'string' },\n    displayAvatarURL: { type: 'string' },\n    bannerURL: { type: 'string' },\n    bot: { type: 'boolean' },\n    system: { type: 'boolean' },\n    flags: { type: 'number' },\n    createdTimestamp: { type: 'number' },\n    accentColor: { type: 'number' },\n    hexAccentColor: { type: 'string' },\n  },\n};\nconst usersResponseSchema = {\n  type: 'array',\n  items: userResponseSchema,\n};\nexport { DiscordUser, userResponseSchema, usersResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DmMessageHandler.html":{"url":"injectables/DmMessageHandler.html","title":"injectable - DmMessageHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DmMessageHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/message-create/dm-message/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                dmMessageToModTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        dmMessageToModTeam\n                        \n                    \n                \n            \n            \n                \n                        \n                    dmMessageToModTeam(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageIsDmGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/dm-message/index.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DmMessageHandler.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/message-create/dm-message/index.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { On } from '@discord-nestjs/core';\nimport { Injectable, Logger, UseGuards } from '@nestjs/common';\nimport {\n  Message,\n  ActionRowBuilder,\n  ButtonBuilder,\n  DiscordAPIError,\n} from 'discord.js';\nimport { MessageIsDmGuard } from 'src/bot/guards/message-is-dm.guard';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Injectable()\nexport class DmMessageHandler {\n  logger = new Logger(DmMessageHandler.name);\n\n  @On('messageCreate')\n  @UseGuards(MessageIsDmGuard)\n  async dmMessageToModTeam(message: Message): Promise {\n    try {\n      await message.reply({\n        content:\n          'Ich bin zwar nur ein Bot und kann kein Koverstionen führen, aber ich kann dir helfen. Klicke auf den Button, um Hilfe zu bekommen.',\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n    } catch (e: unknown) {\n      this.logger.error((e as DiscordAPIError).message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditRoleData.html":{"url":"classes/EditRoleData.html","title":"class - EditRoleData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditRoleData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                color\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                hoist\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                icon\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                mentionable\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                permissions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                position\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                unicodeEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ColorResolvable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(undefined)@ApiProperty({enum: Colors, required: false, example: 'White', examples: undefined, description: 'New color of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        hoist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Whether or not the role should be hoisted'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:160\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Base64Resolvable | EmojiResolvable | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New Icon of the role, base64 encoded string', externalDocs: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:203\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        mentionable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Should the role be mentionable or not'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:190\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New name of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PermissionResolvable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(undefined)@IsOptional()@ApiProperty({type: undefined, required: false, description: 'Updated Permission', default: undefined, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({type: Number, required: false, description: 'The position of the role; Higher = more permissions relative to the role below'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, required: true, description: 'Why was the role updated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        unicodeEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'The new unicodeEmoji of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:212\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nimport {\n  Base64Resolvable,\n  ColorResolvable,\n  Colors,\n  EmojiResolvable,\n  PermissionFlagsBits,\n  PermissionResolvable,\n} from 'discord.js';\n\nclass RoleResponse {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild the api belongs to',\n    example: '123456789012345678',\n  })\n  guild: string;\n\n  @IsUrl()\n  @ApiProperty({\n    type: String,\n    description: 'The icon of the role',\n    example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n  })\n  icon: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The unicodeEmoji of the role',\n    example: '👑',\n  })\n  unicodeEmoji: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the role',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The name of the role',\n    example: 'Admin',\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The color of the role',\n    example: 0,\n  })\n  color: number;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is hoisted',\n    example: false,\n  })\n  hoist: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The position of the role',\n    example: 0,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The permissions of the role',\n    example: '0',\n  })\n  permissions: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is managed by an integration',\n    example: false,\n  })\n  managed: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is mentionable',\n    example: false,\n  })\n  mentionable: boolean;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The tags of the role',\n    example: null,\n  })\n  tags: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The timestamp the role was created at(Unixtimestamp)',\n    example: 1600000000000,\n  })\n  createdTimestamp: number;\n}\n\nclass EditRoleData {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsIn(Object.keys(Colors))\n  @ApiProperty({\n    enum: Colors,\n    required: false,\n    example: 'White',\n    examples: Object.keys(Colors),\n    description: 'New color of the role',\n  })\n  color?: ColorResolvable;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'Why was the role updated',\n  })\n  reason: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Whether or not the role should be hoisted',\n  })\n  hoist?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description:\n      'The position of the role; Higher = more permissions relative to the role below',\n  })\n  position?: number;\n\n  @IsIn(Object.keys(PermissionFlagsBits))\n  @IsOptional()\n  @ApiProperty({\n    type: Array,\n    required: false,\n    description: 'Updated Permission',\n    default: null,\n    example: ['AddReactions', 'KickMembers'],\n  })\n  permissions?: PermissionResolvable;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the role be mentionable or not',\n  })\n  mentionable?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New Icon of the role, base64 encoded string',\n    externalDocs: {\n      description: 'Discord.js docs',\n      url: 'https://old.discordjs.dev/#/docs/discord.js/main/class/Role?scrollTo=setIcon',\n    },\n  })\n  icon?: Base64Resolvable | EmojiResolvable | null;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'The new unicodeEmoji of the role',\n  })\n  unicodeEmoji?: string | null;\n}\n// Generate example schema for get /guilds/:guildId/roles/:roleId\nconst roleResponseSchema = {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n};\n// Schema for retrieving all roles from a guild with example data\nconst rolesResponseSchema = {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n};\n\n// Write exports here\nexport { RoleResponse, EditRoleData, roleResponseSchema, rolesResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventToLog.html":{"url":"interfaces/EventToLog.html","title":"interface - EventToLog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventToLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/interfaces/event-to-log.ts\n        \n\n\n            \n                Description\n            \n            \n                Thrown events that implement this can be used to pretty print into the application log\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toFormattedLog\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/interfaces/event-to-log.ts:11\n                        \n                    \n\n\n            \n                \n                        Pretty print function on thrown events within the app, not all events implement this!!\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Logger which is used for logging to the nestjs app log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\n\n/**\n * Thrown events that implement this can be used to pretty print into the application log\n */\nexport interface EventToLog {\n  /**\n   * Pretty print function on thrown events within the app, not all events implement this!!\n   * @param logger Logger which is used for logging to the nestjs app log\n   */\n  toFormattedLog(logger: Logger): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Explorer.html":{"url":"classes/Explorer.html","title":"class - Explorer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Explorer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/explorers/event.explorer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                botEventDecorator\n                            \n                            \n                                    Public\n                                checkProviders\n                            \n                            \n                                    Private\n                                hasHandlerMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, externalContextCreator: ExternalContextCreator)\n                    \n                \n                        \n                            \n                                Defined in src/bot/explorers/event.explorer.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        externalContextCreator\n                                                  \n                                                        \n                                                                    ExternalContextCreator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        botEventDecorator\n                        \n                    \n                \n            \n            \n                \n                        \n                    botEventDecorator(provider: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        checkProviders\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkProviders(providers: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                providers\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasHandlerMethod\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasHandlerMethod(provider: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\nimport {\n  BOT_EVENT_KEY,\n  BOT_EVENT_HANDLER_NAME,\n} from '../decorators/bot-event.decorator';\nimport { ExternalContextCreator } from '@nestjs/core';\n\nexport class Explorer {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    private readonly externalContextCreator: ExternalContextCreator,\n  ) {}\n  public checkProviders(providers: any[]): void {\n    for (const provider of providers) {\n      const metadata = this.botEventDecorator(provider);\n      if (metadata) {\n        if (!this.hasHandlerMethod(provider)) {\n          throw new Error(\n            `The provider ${provider.name} does not have a handler method, does it implement BotEvent?`,\n          );\n        }\n        const handler = this.externalContextCreator.create(\n          provider,\n          provider[BOT_EVENT_HANDLER_NAME],\n          BOT_EVENT_HANDLER_NAME,\n        );\n        this.client.on(metadata, handler);\n      }\n    }\n  }\n\n  private botEventDecorator(provider: any) {\n    return Reflect.getMetadata(BOT_EVENT_KEY, provider);\n  }\n\n  private hasHandlerMethod(provider: any): boolean {\n    return (\n      provider.prototype.hasOwnProperty(BOT_EVENT_HANDLER_NAME) &&\n      typeof provider.prototype.handler === 'function'\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Guild.html":{"url":"classes/Guild.html","title":"class - Guild","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Guild\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                guildId\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['guildId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { GuildUser } from '@prisma/client';\n\nexport class Guild {\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) name: string;\n  @ApiProperty({ type: String }) image: string;\n}\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n  @ApiPropertyOptional({ type: [Guild] }) guilds: Guild[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildAutoDeleteChannelController.html":{"url":"controllers/GuildAutoDeleteChannelController.html","title":"controller - GuildAutoDeleteChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildAutoDeleteChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                autodeletechannel\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createAutoDeleteChannel\n                            \n                            \n                                    \n                                    Async\n                                getAutoDeleteChannel\n                            \n                            \n                                    \n                                    Async\n                                updateAutoDeleteChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAutoDeleteChannel(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAutoDeleteChannel(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAutoDeleteChannel(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { GuildAutoDeleteChannelService } from './guild-auto-delete-channel.service';\nimport { GuildAutoDeleteChannelDto } from './dto/auto-delete-channels.dto';\nimport { plainToInstance } from 'class-transformer';\n\n@Controller('autodeletechannel')\nexport class GuildAutoDeleteChannelController {\n  constructor(\n    @Inject(GuildAutoDeleteChannelService)\n    private readonly guildAutoDeleteChannelService: GuildAutoDeleteChannelService,\n  ) {}\n\n  @Get()\n  async getAutoDeleteChannel(@Param('guildId') guildId: string) {\n    const autoDeleteChannels =\n      await this.guildAutoDeleteChannelService.get(guildId);\n    if (!autoDeleteChannels) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, autoDeleteChannels);\n  }\n\n  @Post()\n  async createAutoDeleteChannel(\n    @Param('guildId') guildId: string,\n    @Body() autoDeleteChannel: GuildAutoDeleteChannelDto,\n  ) {\n    this.guildAutoDeleteChannelService.get(guildId).then(() => {\n      throw new ConflictException(\n        `Channel ${channel.channelId} already exists`,\n      );\n    });\n    const channel = await this.guildAutoDeleteChannelService.upsert(\n      guildId,\n      autoDeleteChannel,\n    );\n    if (!channel) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, channel);\n  }\n\n  @Put()\n  async updateAutoDeleteChannel(\n    @Param('guildId') guildId: string,\n    @Body() autoDeleteChannel: GuildAutoDeleteChannelDto,\n  ) {\n    const channel = await this.guildAutoDeleteChannelService.upsert(\n      guildId,\n      autoDeleteChannel,\n    );\n    if (!channel) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, channel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildAutoDeleteChannelDto.html":{"url":"classes/GuildAutoDeleteChannelDto.html","title":"class - GuildAutoDeleteChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildAutoDeleteChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                    \n                                deleteAtCron\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deleteAtCron\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(/^(((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7}$/, {message: 'Invalid cron expression'})@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { AutoDeleteChannels } from '@prisma/client';\nimport { IsString, Matches } from 'class-validator';\n\nexport class GuildAutoDeleteChannelDto\n  implements Omit\n{\n  @IsString()\n  @ApiProperty({ type: String })\n  channelId: string;\n  @IsString()\n  @Matches(/^(((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7}$/, {\n    message: 'Invalid cron expression',\n  })\n  @ApiProperty({ type: String })\n  deleteAtCron: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildAutoDeleteChannelModule.html":{"url":"modules/GuildAutoDeleteChannelModule.html","title":"module - GuildAutoDeleteChannelModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildAutoDeleteChannelModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildAutoDeleteChannelModule\n\n\n\ncluster_GuildAutoDeleteChannelModule_exports\n\n\n\ncluster_GuildAutoDeleteChannelModule_providers\n\n\n\n\nGuildAutoDeleteChannelService \n\nGuildAutoDeleteChannelService \n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelService  -->\n\nGuildAutoDeleteChannelModule->GuildAutoDeleteChannelService \n\n\n\n\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildAutoDeleteChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildRestrictedChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nGuildAutoDeleteChannelModule -->\n\nGuildService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildAutoDeleteChannelModule -->\n\nGuildSettingsService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nGuildAutoDeleteChannelModule -->\n\nGuildUserService->GuildAutoDeleteChannelModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildAutoDeleteChannelModule -->\n\nPrismaService->GuildAutoDeleteChannelModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nGuildAutoDeleteChannelModule -->\n\nTasksService->GuildAutoDeleteChannelModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildAutoDeleteChannelService\n                        \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildAutoDeleteChannelController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildAutoDeleteChannelService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildAutoDeleteChannelService } from './guild-auto-delete-channel.service';\nimport { GuildAutoDeleteChannelController } from './guild-auto-delete-channel.controller';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\nimport { TasksService } from 'src/tasks/tasks.service';\nimport { GuildService } from '../guild.service';\nimport { GuildUserService } from '../guild-user/guild-user.service';\nimport { GuildRestrictedChannelService } from '../guild-restricted-channel/guild-restricted-channel.service';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [\n    GuildAutoDeleteChannelService,\n    PrismaService,\n    TasksService,\n    GuildService,\n    GuildUserService,\n    GuildRestrictedChannelService,\n    GuildSettingsService,\n  ],\n  controllers: [GuildAutoDeleteChannelController],\n  exports: [GuildAutoDeleteChannelService],\n})\nexport class GuildAutoDeleteChannelModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildAutoDeleteChannelService.html":{"url":"injectables/GuildAutoDeleteChannelService.html","title":"injectable - GuildAutoDeleteChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildAutoDeleteChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                constructChannelDeleteJobs\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService, tasksService: TasksService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tasksService\n                                                  \n                                                        \n                                                                        TasksService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        constructChannelDeleteJobs\n                        \n                    \n                \n            \n            \n                \n                        \n                    constructChannelDeleteJobs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GuildAutoDeleteChannelService.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Client, GuildChannel } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { TasksService } from 'src/tasks/tasks.service';\nimport { GuildAutoDeleteChannelDto } from './dto/auto-delete-channels.dto';\n\n@Injectable()\nexport class GuildAutoDeleteChannelService {\n  logger = new Logger(GuildAutoDeleteChannelService.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(TasksService) private tasksService: TasksService,\n  ) {}\n  async get(guildId: string) {\n    return await this.database.autoDeleteChannels.findMany({\n      where: { guildId },\n    });\n  }\n  async upsert(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto) {\n    const channelId = autoDeleteChannel.channelId;\n    return this.database.autoDeleteChannels.upsert({\n      where: {\n        channelId,\n        guildId,\n      },\n      create: {\n        ...autoDeleteChannel,\n        guildId,\n      },\n      update: {\n        ...autoDeleteChannel,\n        guildId,\n      },\n    });\n  }\n\n  async constructChannelDeleteJobs() {\n    const guilds = await this.database.guild.findMany({\n      select: {\n        AutoDeleteChannels: true,\n      },\n    });\n    guilds.forEach((guild) => {\n      guild.AutoDeleteChannels.forEach((deleteChannel) => {\n        this.tasksService.createDynamicScheduledJob({\n          cronTime: deleteChannel.deleteAtCron,\n          onTick: async () => {\n            const channelId = deleteChannel.channelId;\n            const guildId = deleteChannel.guildId;\n            this.logger.log(\n              `Deleting channel ${channelId} in guild ${guildId}`,\n            );\n            const guild = await this.client.guilds.fetch(guildId);\n            const channel = (await guild.channels.fetch(\n              channelId,\n            )) as GuildChannel;\n            const nChannel = await channel.clone();\n            await channel.delete();\n            Promise.all([\n              nChannel.setPosition(channel.position),\n              nChannel.setParent(channel.parentId),\n              nChannel.setName(channel.name),\n            ]);\n          },\n          timeZone: 'Europe/Berlin',\n        });\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildChannelEditOptions.html":{"url":"classes/GuildChannelEditOptions.html","title":"class - GuildChannelEditOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildChannelEditOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nsfw\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                parent\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                topic\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                userLimit\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New name of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nsfw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Should the channel be NSFW'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:189\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryChannelResolvable | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['String', 'undefined', 'CategoryChannel'])@IsOptional()@ApiProperty({type: undefined, required: false, description: 'Category of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, required: false, description: 'Why was the channel updated/created'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:215\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'Topic of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:180\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChannelType.GuildText | ChannelType.GuildAnnouncement\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ChannelType)@IsOptional()@ApiProperty({enum: ChannelType, required: false, description: 'Change the type of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        userLimit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({type: Number, required: false, description: 'Slowmode for the channel in seconds'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:198\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildController.html":{"url":"controllers/GuildController.html","title":"controller - GuildController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                messagesPerChannelLastMonth\n                            \n                            \n                                    \n                                    Async\n                                messagesPerDayLastMonth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        messagesPerChannelLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    messagesPerChannelLastMonth(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('messages-per-channel-last-month')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        messagesPerDayLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    messagesPerDayLastMonth(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('messages-per-day-last-month')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, Param, UseGuards } from '@nestjs/common';\nimport { GuildService } from './guild.service';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\n\n@Controller('/')\n@UseGuards(JwtAuthGuard)\nexport class GuildController {\n  constructor(\n    @Inject(GuildService) private guildService: GuildService,\n    @InjectDiscordClient() private client: Client,\n  ) {}\n\n  @Get('messages-per-channel-last-month')\n  async messagesPerChannelLastMonth(@Param('guildId') guildId: string) {\n    const data =\n      await this.guildService.averageMessagesPerChannelLastMonth(guildId);\n    const labels = [];\n    const values = Object.values(data);\n    Object.keys(data).forEach(async (key) => {\n      labels.push(\n        (await (await this.client.guilds.fetch(guildId)).channels.fetch(key))\n          .name,\n      );\n    });\n    return {\n      labels,\n      values,\n    };\n  }\n  @Get('messages-per-day-last-month')\n  async messagesPerDayLastMonth(@Param('guildId') guildId: string) {\n    const data =\n      await this.guildService.averageMessagesPerDayLastMonth(guildId);\n    const labels = [];\n    const values = Object.values(data);\n    Object.keys(data).forEach((key) => {\n      labels.push(key);\n    });\n    return {\n      labels,\n      values,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildDoesNotExistException.html":{"url":"classes/GuildDoesNotExistException.html","title":"class - GuildDoesNotExistException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildDoesNotExistException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/guild-does-not-exist-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when a Guild isn't found by ID\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/guild-does-not-exist-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a Guild isn't found by ID\n */\nexport class GuildDoesNotExistException extends Error {\n  constructor(guildId: string) {\n    super(\n      `Guild with the id ${guildId} does not exist or is not using Cardinal System.`,\n    );\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(GuildDoesNotExistException)\nexport class GuildDoesNotExistExceptionFilter implements ExceptionFilter {\n  catch(exception: GuildDoesNotExistException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildDoesNotExistExceptionFilter.html":{"url":"classes/GuildDoesNotExistExceptionFilter.html","title":"class - GuildDoesNotExistExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildDoesNotExistExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/guild-does-not-exist-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to produce the http response when the exception is thrown in a http context\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: GuildDoesNotExistException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/guild-does-not-exist-exception.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            GuildDoesNotExistException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a Guild isn't found by ID\n */\nexport class GuildDoesNotExistException extends Error {\n  constructor(guildId: string) {\n    super(\n      `Guild with the id ${guildId} does not exist or is not using Cardinal System.`,\n    );\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(GuildDoesNotExistException)\nexport class GuildDoesNotExistExceptionFilter implements ExceptionFilter {\n  catch(exception: GuildDoesNotExistException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildMemberEvents.html":{"url":"injectables/GuildMemberEvents.html","title":"injectable - GuildMemberEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildMemberEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/guild-members/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addMember\n                            \n                            \n                                    \n                                    \n                                    Async\n                                checkIfPersonWasVerifiedBefore\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    \n                                    Async\n                                removeMember\n                            \n                            \n                                    \n                                    \n                                    Async\n                                unlockUser\n                            \n                            \n                                    \n                                    Async\n                                updateRank\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, guildUserService: GuildUserService, settingsService: GuildSettingsService, guildService: GuildService, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/guild-members/index.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(member: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberAdd')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        checkIfPersonWasVerifiedBefore\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfPersonWasVerifiedBefore(reaction: MessageReaction, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageReactionAdd')@UseGuards(undefined, undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:143\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                        MessageReaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeMember(member: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberRemove')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        unlockUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unlockUser(reaction: MessageReaction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageReactionAdd')@UseGuards(undefined, undefined, ReactedMemberIsModOrHigherGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                        MessageReaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateRank\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRank(oldMember: GuildMember, newMember: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberUpdate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldMember\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newMember\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GuildMemberEvents.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/guild-members/index.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, On } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger, UseGuards } from '@nestjs/common';\nimport { Rank } from '@prisma/client';\nimport {\n  Client,\n  GuildMember,\n  MessageReaction,\n  GuildTextBasedChannel,\n  Message,\n  User,\n} from 'discord.js';\nimport { ReactedMemberIsModOrHigherGuard } from 'src/bot/guards/member-is-mod-or-higher.guard';\nimport { ReactionChannelIdGuard } from 'src/bot/guards/reaction-in-channel.guard';\nimport { ReactionEmoteGuard } from 'src/bot/guards/reaction-emote.guard';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { JsonArray } from 'type-fest';\n\n@Injectable()\nexport class GuildMemberEvents {\n  logger = new Logger(GuildMemberEvents.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n    @Inject(GuildService) private readonly guildService: GuildService,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n\n  // Runs whenever the discordjs websocket gets recreated\n  @On('ready')\n  async onReady(): Promise {\n    await this.client.guilds.fetch();\n    this.client.guilds.cache.forEach(async (guild) => {\n      await this.guildService.upsertGuild(guild.id, {\n        name: guild.name,\n      });\n      this.guildUserService.addMembers(guild.id);\n    });\n  }\n\n  @On('guildMemberAdd')\n  async addMember(member: GuildMember) {\n    this.logger.log(`Adding member ${member.user.username} to database.`);\n    if (member.user.bot) return;\n    await this.guildUserService.addMember(member.id, member.guild.id, {\n      rank: Rank.NEW,\n      unlocked: false,\n    });\n  }\n\n  @On('guildMemberRemove')\n  async removeMember(member: GuildMember) {\n    await this.guildUserService.deleteOne(member.id, member.guild.id);\n  }\n\n  @On('messageReactionAdd')\n  @UseGuards(\n    ReactionChannelIdGuard('1121822614374060175'),\n\n    ReactionEmoteGuard(['✅', '☑️']),\n    ReactedMemberIsModOrHigherGuard,\n  )\n  async unlockUser(reaction: MessageReaction) {\n    if (reaction.partial) {\n      try {\n        await reaction.fetch();\n      } catch (e) {\n        this.logger.error(e);\n        return;\n      }\n    }\n    const user = await this.guildUserService.getGuildUser(\n      reaction.message.author.id,\n      reaction.message.guildId,\n    );\n    if (!user && user.rank !== Rank.NEW) return;\n    await this.guildUserService.upsert(user.userId, reaction.message.guildId, {\n      unlocked: true,\n      firstMessageId: reaction.message.id,\n    });\n    const member = await (\n      await this.client.guilds.fetch(reaction.message.guildId)\n    ).members.fetch(user.userId);\n    try {\n      if (!member.roles.cache.has('1226585753253843014'))\n        throw 'Has not accepted AGB';\n      const verifiedRoleId = await this.settingsService.getVerifiedMemberRoleId(\n        reaction.message.guildId,\n      );\n      await member.roles.add(verifiedRoleId);\n      if (reaction.emoji.name === '☑️')\n        await member.roles.add('1014066383912439809');\n      // Wait 500ms to make sure the role is added before removing the unverified role\n      //https://github.com/discordjs/discord.js/issues/4930#issuecomment-1042351896\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      await member.roles.remove(\n        await this.settingsService.getUnverifiedMemberRoleId(\n          reaction.message.guildId,\n        ),\n      );\n    } catch (e) {\n      this.logger.error(e);\n      return;\n    }\n    const channel = (await reaction.message.guild.channels.fetch(\n      await this.settingsService.getOpenIntroChannelId(\n        reaction.message.guildId,\n      ),\n    )) as GuildTextBasedChannel;\n    await channel.send(\n      await this.settingsService.templateMessage(\n        reaction.message as Message,\n      ),\n    );\n    await reaction.remove();\n  }\n\n  @On('guildMemberUpdate')\n  async updateRank(oldMember: GuildMember, newMember: GuildMember) {\n    // check if user has been promoted to mod or admin\n    const oldRank = await this.guildUserService.getRank(oldMember);\n    const newRank = await this.guildUserService.getRank(newMember);\n    if (oldRank === newRank) return;\n    this.logger.log(\n      `User ${newMember.user.username} has been promoted from ${oldRank} to ${newRank}`,\n    );\n    await this.guildUserService.upsert(newMember.id, newMember.guild.id, {\n      rank: newRank,\n    });\n  }\n\n  @On('messageReactionAdd')\n  @UseGuards(\n    ReactionChannelIdGuard('1226574989147508746'),\n    ReactionEmoteGuard(['👍']),\n  )\n  async checkIfPersonWasVerifiedBefore(reaction: MessageReaction, user: User) {\n    if (reaction.partial) {\n      try {\n        await reaction.fetch();\n      } catch (e) {\n        this.logger.error(e);\n        return;\n      }\n    }\n    const dbUser = await this.database.guildUser.findUnique({\n      where: {\n        guildId_userId: { guildId: reaction.message.guildId, userId: user.id },\n      },\n    });\n    const discordUser = await this.client.guilds.cache\n      .get(dbUser.guildId)\n      .members.fetch(user.id);\n    if (!dbUser && discordUser.roles.cache.has('1121823930085285938')) {\n      const roles = (\n        await this.database.lockdownRoleBackup.findUnique({\n          where: {\n            guildId_userId: { guildId: dbUser.guildId, userId: user.id },\n          },\n        })\n      ).roles as JsonArray;\n      if (!roles) return;\n      // Tyep system gets a bit iffy here :/\n      roles.forEach(\n        async (role: { id: string }) => await discordUser.roles.add(role.id),\n      );\n      await discordUser.roles.remove('1121823930085285938');\n      await this.database.lockdownRoleBackup.delete({\n        where: { guildId_userId: { userId: user.id, guildId: dbUser.guildId } },\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildMessageHandler.html":{"url":"injectables/GuildMessageHandler.html","title":"injectable - GuildMessageHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildMessageHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/message-create/guild-message/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                onMessage\n                            \n                            \n                                    \n                                    \n                                    Async\n                                toniMsgsToBird\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildUserService: GuildUserService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/message-create/guild-message/index.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageFromUserGuard, IsUserUnlockedGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/guild-message/index.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        toniMsgsToBird\n                        \n                    \n                \n            \n            \n                \n                        \n                    toniMsgsToBird(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageFromUserGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/guild-message/index.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { On } from '@discord-nestjs/core';\nimport { Inject, Injectable, UseGuards } from '@nestjs/common';\nimport { Attachment, GuildTextBasedChannel, Message } from 'discord.js';\nimport { MessageFromUserGuard } from 'src/bot/guards/message-from-user.guard';\nimport { IsUserUnlockedGuard } from 'src/bot/guards/user-is-unlocked.guard';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport getAttachmentType from 'src/util/functions/get-attachtment-type';\n\n@Injectable()\nexport default class GuildMessageHandler {\n  constructor(\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n  ) {}\n  @On('messageCreate')\n  @UseGuards(MessageFromUserGuard, IsUserUnlockedGuard)\n  async onMessage(message: Message): Promise {\n    await this.guildUserService.insertMessage(\n      {\n        userId: message.author.id,\n        messageId: message.id,\n        channelId: message.channelId,\n        guildId: message.guildId,\n        createdAt: new Date(message.createdTimestamp),\n      },\n      {\n        messageId: message.id,\n        length: message.content.length,\n      },\n      message.attachments.map((attachment: Attachment) => {\n        return {\n          type: getAttachmentType(attachment.contentType),\n          url: attachment.url,\n          messageId: message.id,\n        };\n      }),\n      message.reactions.cache.map((reaction) => {\n        return {\n          messageId: message.id,\n          emoji: reaction.emoji.toString(),\n          count: reaction.count,\n        };\n      }),\n    );\n    await this.guildUserService.updateMessageCountBucket(\n      message.author.id,\n      message.guildId,\n    );\n  }\n\n  @On('messageCreate')\n  @UseGuards(MessageFromUserGuard)\n  async toniMsgsToBird(message: Message): Promise {\n    const channel = message.channel as GuildTextBasedChannel;\n    if (\n      channel.parentId !== '1011529685357838376' &&\n      channel.parentId !== '1051979218164125826'\n    ) {\n      if (message.author.id === '1132244079242133555')\n        message.react('1194715694948946030');\n    }\n  }\n\n  // @On('messageCreate')\n  // @UseGuards(MessageFromUserGuard)\n  // async checkLimits(message: Message) {\n  //   const guildUser = this.guildUserService.getGuildUser(\n  //     message.author.id,\n  //     message.guildId,\n  //   );\n  //   const hasAttachments = message.attachments.size > 0;\n  //   const typeOfAttachments = message.attachments.map(\n  //     (attachment: Attachment) => {\n  //       return ({}[getAttachmentType(attachment.contentType)] = attachment);\n  //     },\n  //   );\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildModule.html":{"url":"modules/GuildModule.html","title":"module - GuildModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildModule\n\n\n\ncluster_GuildModule_providers\n\n\n\ncluster_GuildModule_imports\n\n\n\ncluster_GuildModule_exports\n\n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\n\n\nGuildModule\n\nGuildModule\n\nGuildModule -->\n\nGuildAutoDeleteChannelModule->GuildModule\n\n\n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildModule -->\n\nGuildRestrictedChannelModule->GuildModule\n\n\n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildModule -->\n\nGuildSettingsModule->GuildModule\n\n\n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildModule -->\n\nGuildUserModule->GuildModule\n\n\n\n\n\nModerationModule\n\nModerationModule\n\nGuildModule -->\n\nModerationModule->GuildModule\n\n\n\n\n\nGuildService \n\nGuildService \n\nGuildService  -->\n\nGuildModule->GuildService \n\n\n\n\n\nDmMessageHandler\n\nDmMessageHandler\n\nGuildModule -->\n\nDmMessageHandler->GuildModule\n\n\n\n\n\nGuildMemberEvents\n\nGuildMemberEvents\n\nGuildModule -->\n\nGuildMemberEvents->GuildModule\n\n\n\n\n\nGuildMessageHandler\n\nGuildMessageHandler\n\nGuildModule -->\n\nGuildMessageHandler->GuildModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildModule -->\n\nGuildRestrictedChannelService->GuildModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nGuildModule -->\n\nGuildService->GuildModule\n\n\n\n\n\nModRequestFlow\n\nModRequestFlow\n\nGuildModule -->\n\nModRequestFlow->GuildModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildModule -->\n\nPrismaService->GuildModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DmMessageHandler\n                        \n                        \n                            GuildMemberEvents\n                        \n                        \n                            GuildMessageHandler\n                        \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            ModRequestFlow\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GuildAutoDeleteChannelModule\n                        \n                        \n                            GuildRestrictedChannelModule\n                        \n                        \n                            GuildSettingsModule\n                        \n                        \n                            GuildUserModule\n                        \n                        \n                            ModerationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildController } from './guild.controller';\nimport { GuildService } from './guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildSettingsModule } from './guild-settings/guild-settings.module';\nimport { ModerationModule } from './moderation/moderation.module';\nimport { GuildUserModule } from './guild-user/guild-user.module';\nimport { GuildAutoDeleteChannelModule } from './guild-auto-delete-channel/guild-auto-delete-channel.module';\nimport { GuildRestrictedChannelModule } from './guild-restricted-channel/guild-restricted-channel.module';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel/guild-restricted-channel.service';\nimport GuildMessageHandler from './events/message-create/guild-message';\nimport { DmMessageHandler } from './events/message-create/dm-message';\nimport { ModRequestFlow } from './events/interaction-create/mod-request-menu';\nimport { GuildMemberEvents } from './events/guild-members';\n\n@Module({\n  imports: [\n    DiscordModule.forFeature(),\n    GuildUserModule,\n    GuildSettingsModule,\n    ModerationModule,\n    GuildAutoDeleteChannelModule,\n    GuildRestrictedChannelModule,\n  ],\n  controllers: [GuildController],\n  providers: [\n    GuildService,\n    PrismaService,\n    GuildRestrictedChannelService,\n    GuildMessageHandler,\n    DmMessageHandler,\n    ModRequestFlow,\n    GuildMemberEvents,\n  ],\n  exports: [GuildService],\n})\nexport class GuildModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildRestrictedChannelController.html":{"url":"controllers/GuildRestrictedChannelController.html","title":"controller - GuildRestrictedChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildRestrictedChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                guild-restricted-channel\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('guild-restricted-channel')\nexport class GuildRestrictedChannelController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildRestrictedChannelModule.html":{"url":"modules/GuildRestrictedChannelModule.html","title":"module - GuildRestrictedChannelModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildRestrictedChannelModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildRestrictedChannelModule\n\n\n\ncluster_GuildRestrictedChannelModule_exports\n\n\n\ncluster_GuildRestrictedChannelModule_providers\n\n\n\n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService \n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelService  -->\n\nGuildRestrictedChannelModule->GuildRestrictedChannelService \n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelModule -->\n\nGuildRestrictedChannelService->GuildRestrictedChannelModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildRestrictedChannelModule -->\n\nPrismaService->GuildRestrictedChannelModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildRestrictedChannelController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildRestrictedChannelController } from './guild-restricted-channel.controller';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  controllers: [GuildRestrictedChannelController],\n  providers: [GuildRestrictedChannelService, PrismaService],\n  exports: [GuildRestrictedChannelService],\n})\nexport class GuildRestrictedChannelModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildRestrictedChannelService.html":{"url":"injectables/GuildRestrictedChannelService.html","title":"injectable - GuildRestrictedChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildRestrictedChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getRestrictedChannel\n                            \n                            \n                                    Async\n                                isChannelAvailableToUser\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRestrictedChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRestrictedChannel(guildId: string, channelId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isChannelAvailableToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    isChannelAvailableToUser(user: GuildUser, channel: RestrictedChannels)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            GuildUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel\n                                            \n                                                            RestrictedChannels\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(guildId: string, channelId: string, data: Omit, guildId> | channelId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, guildId> | channelId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { GuildUser, RestrictedChannels } from '@prisma/client';\nimport { Client } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Injectable()\nexport class GuildRestrictedChannelService {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  async getRestrictedChannel(guildId: string, channelId: string) {\n    return this.database.restrictedChannels.findUnique({\n      where: {\n        guildId,\n        channelId,\n      },\n    });\n  }\n  async upsert(\n    guildId: string,\n    channelId: string,\n    data: Omit, 'guildId'>, 'channelId'>,\n  ) {\n    return this.database.restrictedChannels.upsert({\n      where: {\n        channelId,\n        guildId,\n      },\n      create: {\n        ...data,\n        channelId,\n        guildId,\n      },\n      update: {\n        ...data,\n        channelId,\n        guildId,\n      },\n    });\n  }\n  async getAll(guildId: string) {\n    return this.database.restrictedChannels.findMany({\n      where: {\n        guildId,\n      },\n    });\n  }\n\n  async isChannelAvailableToUser(user: GuildUser, channel: RestrictedChannels) {\n    return user.messageCountBucket >= channel.requiredPoints;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildService.html":{"url":"injectables/GuildService.html","title":"injectable - GuildService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _addMemberToChannelOverwrite\n                            \n                            \n                                    Private\n                                    Async\n                                _removeMemberFromChannelOverwrite\n                            \n                            \n                                    Async\n                                averageMessagesPerChannelLastMonth\n                            \n                            \n                                    Async\n                                averageMessagesPerDayLastMonth\n                            \n                            \n                                    Async\n                                cleanWfpMembers\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    Async\n                                updateChannelPermissions\n                            \n                            \n                                    Async\n                                upsertGuild\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, restrictedChannelService: GuildRestrictedChannelService, client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        restrictedChannelService\n                                                  \n                                                        \n                                                                        GuildRestrictedChannelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _addMemberToChannelOverwrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    _addMemberToChannelOverwrite(user_id: string, channel_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _removeMemberFromChannelOverwrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    _removeMemberFromChannelOverwrite(user_id: string, channel_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:229\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        averageMessagesPerChannelLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    averageMessagesPerChannelLastMonth(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Returns the average written messages per channel for last 30 days for the given guild.\nSQL:\n SELECT\n  m.channelId,\n  m.userId,\n  COUNT(m.messageId) AS messageCount,\n  AVG(subquery.messageCount) AS avgMessageCount\nFROM\n  Message m\nJOIN\n  (SELECT channelId, COUNT(messageId) / 30 AS messageCount\n  FROM Message\n  WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\n  GROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\nWHERE\n  m.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY\n  m.channelId, m.userId\nORDER BY\n avgMessageCount DESC;\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A map that contains each channel ID and the average written messages\nSQL:\nSELECT\nm.channelId,\nm.userId,\nCOUNT(m.messageId) AS messageCount,\nAVG(subquery.messageCount) AS avgMessageCount\nFROM\nMessage m\nJOIN\n(SELECT channelId, COUNT(messageId) / 30 AS messageCount\nFROM Message\nWHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\nGROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\nWHERE\nm.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY\nm.channelId, m.userId\nORDER BY\navgMessageCount DESC;\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        averageMessagesPerDayLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    averageMessagesPerDayLastMonth(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:165\n                        \n                    \n\n\n            \n                \n                        Returns the average written message per day in the last 30 days per channel\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanWfpMembers(guildID: string, dryRun: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                guildID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                dryRun\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Once('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:242\n                        \n                    \n\n\n            \n                \n                        Event handler that listens to the ready event which is fired when the bot websocket has been created.\nSets up all guilds in the database if they dont already exist there or updates them.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateChannelPermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateChannelPermissions(user: GuildUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            GuildUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsertGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsertGuild(guildId: string, data: Omit | id>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit | id>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, Once } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { Guild, GuildUser } from '@prisma/client';\nimport { Client, BaseGuildTextChannel, GuildMember } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel/guild-restricted-channel.service';\n\n@Injectable()\nexport class GuildService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(GuildRestrictedChannelService)\n    private restrictedChannelService: GuildRestrictedChannelService,\n    @InjectDiscordClient() private client: Client,\n  ) {}\n\n  async upsertGuild(guildId: string, data: Omit, 'id'>) {\n    return await this.database.guild.upsert({\n      where: {\n        id: guildId,\n      },\n      select: {\n        AuditLog: true,\n        Settings: true,\n        AutoDeleteChannels: true,\n        RestrictedChannels: true,\n        Limits: true,\n      },\n      create: {\n        id: guildId,\n        Settings: {\n          create: {},\n        },\n        ...data,\n      },\n      update: {\n        ...data,\n      },\n    });\n  }\n\n  async cleanWfpMembers(\n    guildID: string,\n    dryRun: boolean = false,\n  ): Promise>> {\n    const twoWeekDate = new Date(new Date().setDate(new Date().getDate() - 14));\n    const membersUnfiltered = (\n      await (\n        await this.client.guilds.fetch(guildID)\n      ).roles.fetch('1121823930085285938')\n    ).members;\n    const members: Array = [];\n    membersUnfiltered.forEach(async (member) => {\n      if (\n        twoWeekDate > new Date(member.joinedTimestamp) &&\n        // Has not VereinsMitglied\n        !member.roles.cache.has('1070116538083975309')\n      ) {\n        members.push(member);\n      }\n    });\n    // Return early if we are in a dry fun\n    if (dryRun)\n      return {\n        membersToKick: members,\n      };\n    const unkickableMembers: Array = [];\n    members.forEach(async (member) => {\n      try {\n        await member.kick(\n          'Kicked by the bot for being in wfp for more than 2 weeks',\n        );\n      } catch {\n        unkickableMembers.push(member);\n      }\n    });\n    return {\n      membersToKick: members,\n      unkickableMembers: unkickableMembers,\n    };\n  }\n\n  /**\n   * Returns the average written messages per channel for last 30 days for the given guild.\n   * @returns A map that contains each channel ID and the average written messages\n   *\n   * SQL:\n   *  SELECT\n   *   m.channelId,\n   *   m.userId,\n   *   COUNT(m.messageId) AS messageCount,\n   *   AVG(subquery.messageCount) AS avgMessageCount\n   * FROM\n   *   Message m\n   * JOIN\n   *   (SELECT channelId, COUNT(messageId) / 30 AS messageCount\n   *   FROM Message\n   *   WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\n   *   GROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\n   * WHERE\n   *   m.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\n   * GROUP BY\n   *   m.channelId, m.userId\n   * ORDER BY\n   *  avgMessageCount DESC;\n   */\n  async averageMessagesPerChannelLastMonth(\n    guildId: string,\n  ): Promise> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageStats = await this.database.messages.groupBy({\n      by: ['channelId', 'userId'],\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        AND: {\n          guildId: guildId,\n        },\n      },\n      _count: {\n        messageId: true,\n      },\n      orderBy: {\n        _count: {\n          messageId: 'desc',\n        },\n      },\n    });\n\n    const messageCounts: Record\n    > = messageStats.reduce((acc, curr) => {\n      const channelId = curr.channelId.toString();\n      const userId = curr.userId.toString();\n      const count = curr._count?.messageId ?? 0;\n\n      if (!acc[channelId]) {\n        acc[channelId] = {};\n      }\n\n      acc[channelId][userId] = count;\n\n      return acc;\n    }, {});\n\n    const avgMessageCounts = {};\n\n    for (const channelId in messageCounts) {\n      const userCounts = Object.values(messageCounts[channelId]);\n      const avgMessageCount =\n        userCounts.reduce((sum, count) => sum + count, 0) / userCounts.length;\n      avgMessageCounts[channelId] = avgMessageCount;\n    }\n\n    return avgMessageCounts;\n  }\n  /**\n   * Returns the average written message per day in the last 30 days per channel\n   * @param guildId string\n   * @returns\n   */\n  async averageMessagesPerDayLastMonth(\n    guildId: string,\n  ): Promise> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageStats = await this.database.messages.groupBy({\n      by: 'createdAt',\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        AND: {\n          guildId,\n        },\n      },\n      _count: {\n        messageId: true,\n      },\n    });\n    const messageCounts: Record = messageStats.reduce(\n      (acc, curr) => {\n        const date = curr.createdAt.toISOString().split('T')[0];\n        // sum up all the messages for that day and add it to the accumulator\n        acc[date] = (acc[date] ?? 0) + (curr._count?.messageId ?? 0);\n\n        return acc;\n      },\n      {},\n    );\n\n    return messageCounts;\n  }\n\n  async updateChannelPermissions(user: GuildUser) {\n    this.restrictedChannelService.getAll(user.guildId).then((channels) =>\n      channels.forEach((channel) =>\n        this.restrictedChannelService\n          .isChannelAvailableToUser(user, channel)\n          .then((isAvailable) => {\n            if (isAvailable)\n              this._removeMemberFromChannelOverwrite(\n                user.userId.toString(),\n                channel.channelId,\n              );\n            else\n              this._addMemberToChannelOverwrite(\n                user.userId.toString(),\n                channel.channelId,\n              );\n          }),\n      ),\n    );\n  }\n  private async _addMemberToChannelOverwrite(\n    user_id: string,\n    channel_id: string,\n  ) {\n    await (\n      (await this.client.channels.fetch(channel_id)) as BaseGuildTextChannel\n    ).permissionOverwrites.create(user_id, {\n      ViewChannel: false,\n      ReadMessageHistory: false,\n    });\n  }\n  private async _removeMemberFromChannelOverwrite(\n    user_id: string,\n    channel_id: string,\n  ) {\n    await (\n      (await this.client.channels.fetch(channel_id)) as BaseGuildTextChannel\n    ).permissionOverwrites.delete(user_id);\n  }\n  /**\n   * Event handler that listens to the ready event which is fired when the bot websocket has been created.\n   * Sets up all guilds in the database if they dont already exist there or updates them.\n   */\n  @Once('ready')\n  async onReady() {\n    const guilds = await this.client.guilds.fetch();\n    guilds.forEach(async (guild) => {\n      this.upsertGuild(guild.id, {\n        name: guild.name,\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildSettingsController.html":{"url":"controllers/GuildSettingsController.html","title":"controller - GuildSettingsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildSettingsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSettings\n                            \n                            \n                                    \n                                    \n                                    Async\n                                putSettings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSettings(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        putSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    putSettings(guildId: string, body: SettingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatusCode.Accepted)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            SettingsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Param,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../../auth/jwt/guards/jwt-auth.guard';\nimport { SettingsDto } from './dto/settings.dto';\nimport { GuildSettingsService } from './guild-settings.service';\nimport { plainToInstance } from '../../util/functions/plain-to-instance';\nimport { HttpStatusCode } from 'axios';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { Rank } from '@prisma/client';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller()\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class GuildSettingsController {\n  constructor(private readonly settingsService: GuildSettingsService) {}\n\n  @Get()\n  async getSettings(@Param('guildId') guildId: string): Promise {\n    const settings = await this.settingsService.getSettings(guildId);\n    return plainToInstance(SettingsDto, settings);\n  }\n\n  @Put()\n  @HttpCode(HttpStatusCode.Accepted)\n  async putSettings(\n    @Param('guildId') guildId: string,\n    @Body() body: SettingsDto,\n  ) {\n    await this.settingsService.editSettings(guildId, body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildSettingsModule.html":{"url":"modules/GuildSettingsModule.html","title":"module - GuildSettingsModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildSettingsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildSettingsModule\n\n\n\ncluster_GuildSettingsModule_exports\n\n\n\ncluster_GuildSettingsModule_providers\n\n\n\n\nGuildSettingsService \n\nGuildSettingsService \n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildSettingsService  -->\n\nGuildSettingsModule->GuildSettingsService \n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildSettingsModule -->\n\nGuildSettingsService->GuildSettingsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildSettingsModule -->\n\nPrismaService->GuildSettingsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildSettingsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildSettingsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildSettingsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildSettingsService } from './guild-settings.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsController } from './guild-settings.controller';\n\n@Module({\n  providers: [GuildSettingsService, PrismaService],\n  controllers: [GuildSettingsController],\n  exports: [GuildSettingsService],\n})\nexport class GuildSettingsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildSettingsService.html":{"url":"injectables/GuildSettingsService.html","title":"injectable - GuildSettingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildSettingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editSettings\n                            \n                            \n                                    Async\n                                getAdminRoleId\n                            \n                            \n                                    Async\n                                getIntroChannelId\n                            \n                            \n                                    Async\n                                getModChannelId\n                            \n                            \n                                    Async\n                                getModRoleId\n                            \n                            \n                                    Async\n                                getOpenIntroChannelId\n                            \n                            \n                                    Async\n                                getSettings\n                            \n                            \n                                    Async\n                                getUnverifiedMemberRoleId\n                            \n                            \n                                    Async\n                                getVerifiedMemberRoleId\n                            \n                            \n                                    Async\n                                getWelcomeMessageFormat\n                            \n                            \n                                    Async\n                                templateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-settings/guild-settings.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    editSettings(guildId: string, settings: Partial>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                settings\n                                            \n                                                        Partial>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAdminRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdminRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIntroChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntroChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getModChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getModChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getModRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getModRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOpenIntroChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOpenIntroChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSettings(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUnverifiedMemberRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUnverifiedMemberRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVerifiedMemberRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVerifiedMemberRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getWelcomeMessageFormat\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWelcomeMessageFormat(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        templateMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    templateMessage(message: Message)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { Settings } from '@prisma/client';\nimport { GuildDoesNotExistException } from '../../util/exception/guild-does-not-exist-exception';\nimport { omit } from 'rambda/immutable';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { SettingsChanged } from './events/settings-role-id-changed.event';\nimport { Message, userMention, quote } from 'discord.js';\n\n@Injectable()\nexport class GuildSettingsService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(EventEmitter2) private eventEmitter: EventEmitter2,\n  ) {}\n  async editSettings(\n    guildId: string,\n    settings: Partial>,\n  ) {\n    Object.keys(settings).forEach(async (key) => {\n      if (key.endsWith('RoleId')) {\n        await this.eventEmitter.emitAsync(\n          `settings.role.${key}.changed`,\n          new SettingsChanged(guildId, settings[key], key as keyof Settings),\n        );\n      }\n    });\n    await this.database.settings.update({ where: { guildId }, data: settings });\n  }\n\n  async getSettings(guildId: string) {\n    const settings = await this.database.settings.findUnique({\n      where: { guildId: guildId },\n    });\n    if (!settings) {\n      throw new GuildDoesNotExistException(guildId);\n    }\n    return omit(['guildId'], settings);\n  }\n\n  async getVerifiedMemberRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.verifiedMemberRoleId);\n  }\n\n  async getUnverifiedMemberRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.unverifiedMemberRoleId);\n  }\n\n  async getModRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.modRoleId);\n  }\n\n  async getAdminRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.adminRoleId);\n  }\n\n  async getWelcomeMessageFormat(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.welcomeMessageFormat);\n  }\n\n  async getOpenIntroChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.openIntroChannelId);\n  }\n\n  async getIntroChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.introChannelId);\n  }\n  async getModChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.modChannelId);\n  }\n  async templateMessage(message: Message): Promise {\n    // template message using the template string provided in the settings\n    const template = await this.getWelcomeMessageFormat(message.guildId);\n    // Usable variables:\n    // ${user} - username\n    // ${message} - message content\n    const quotedMessage = message.content\n      .split('\\n')\n      .map((it) => quote(it))\n      .join('\\n');\n    return template\n      .replace('{user}', userMention(message.author.id))\n      .replace('{message}', `\\n\\n${quotedMessage}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildUserController.html":{"url":"controllers/GuildUserController.html","title":"controller - GuildUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(userId: string, guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('self')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Controller, Get, Inject, Param, UseGuards } from '@nestjs/common';\nimport { plainToInstance } from 'class-transformer';\nimport { Client } from 'discord.js';\nimport { SelfDto } from 'src/guild/guild-user/dto/self.dto';\nimport { RequestUser } from 'src/util/decorators/request-user.decorator';\nimport { GuildUserService } from './guild-user.service';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\n\n@Controller()\n@UseGuards(JwtAuthGuard)\nexport class GuildUserController {\n  constructor(\n    @Inject(GuildUserService) private readonly userService: GuildUserService,\n    @InjectDiscordClient() private readonly client: Client,\n  ) {}\n\n  @Get('self')\n  async getSelf(\n    @RequestUser() userId: string,\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const [{ rank }, { avatarUrl, name, guildName }] = await Promise.all([\n      this.userService.getGuildUser(userId, guildId),\n      this.client.guilds\n        .fetch(guildId)\n        .then((it) => it.members.fetch(userId))\n        .then((it) => ({\n          avatarUrl: it.avatarURL({ size: 128 }),\n          name: it.displayName,\n          guildName: it.guild.name,\n        })),\n    ]);\n    return plainToInstance(SelfDto, {\n      userId,\n      guildId,\n      avatarUrl,\n      name,\n      rank,\n      guildName,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildUserModule.html":{"url":"modules/GuildUserModule.html","title":"module - GuildUserModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildUserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildUserModule\n\n\n\ncluster_GuildUserModule_providers\n\n\n\ncluster_GuildUserModule_exports\n\n\n\n\nGuildUserService \n\nGuildUserService \n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildUserService  -->\n\nGuildUserModule->GuildUserService \n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildUserModule -->\n\nGuildSettingsService->GuildUserModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nGuildUserModule -->\n\nGuildUserService->GuildUserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildUserModule -->\n\nPrismaService->GuildUserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildUserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildUserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildUserController } from './guild-user.controller';\nimport { GuildUserService } from './guild-user.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  controllers: [GuildUserController],\n  providers: [GuildUserService, PrismaService, GuildSettingsService],\n  exports: [GuildUserService],\n})\nexport class GuildUserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildUserService.html":{"url":"injectables/GuildUserService.html","title":"injectable - GuildUserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildUserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _isMemberAdmin\n                            \n                            \n                                    Private\n                                    Async\n                                _isMemberMod\n                            \n                            \n                                    Private\n                                    Async\n                                _isMemberVerified\n                            \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                addMembers\n                            \n                            \n                                    Async\n                                deleteOne\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getGuildUser\n                            \n                            \n                                    Async\n                                getRank\n                            \n                            \n                                    Async\n                                insertMessage\n                            \n                            \n                                    Async\n                                isActive\n                            \n                            \n                                    \n                                    Async\n                                onAdminRoleIdChanged\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    Async\n                                updateMessageCountBucket\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, client: Client, settings: GuildSettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-user/guild-user.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        settings\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberAdmin(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:197\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberMod\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberMod(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberVerified\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberVerified(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(userId: string, guildId: string, data: Omit, userId> | guildId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, userId> | guildId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMembers(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteOne(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(guildId: string | undefined, userId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                        \n                                                userId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getGuildUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUser(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRank\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRank(member: GuildMember)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        insertMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertMessage(data: Messages, metadata: MessageMetadata, attachments: Omit[], reactions: Omit[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Messages\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        MessageMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                attachments\n                                            \n                                                        Omit[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reactions\n                                            \n                                                        Omit[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    isActive(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onAdminRoleIdChanged\n                        \n                    \n                \n            \n            \n                \n                        \n                    onAdminRoleIdChanged(payload: SettingsChanged)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('settings.role.*.changed')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            SettingsChanged\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Once('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateMessageCountBucket\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMessageCountBucket(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(userId: string, guildId: string, data: Omit, userId> | guildId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, userId> | guildId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, Once } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport {\n  Attachment,\n  GuildUser,\n  MessageMetadata,\n  Messages,\n  Rank,\n  Reaction,\n} from '@prisma/client';\nimport { Client, GuildMember } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\nimport { SettingsChanged } from '../guild-settings/events/settings-role-id-changed.event';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class GuildUserService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @InjectDiscordClient() private client: Client,\n    @Inject(GuildSettingsService) private settings: GuildSettingsService,\n  ) {}\n\n  @Once('ready')\n  async onReady() {\n    const guilds = await this.client.guilds.fetch();\n    guilds.forEach(async (guild) => {\n      await this.addMembers(guild.id);\n    });\n  }\n\n  async getGuildUser(\n    userId: string,\n    guildId: string,\n  ): Promise {\n    return this.database.guildUser.findUnique({\n      where: { guildId_userId: { userId, guildId } },\n    });\n  }\n\n  async upsert(\n    userId: string,\n    guildId: string,\n    data: Omit, 'userId'>, 'guildId'>,\n  ): Promise {\n    return await this.database.guildUser.upsert({\n      where: { guildId_userId: { userId, guildId } },\n      create: { ...data, userId, guildId },\n      update: { ...data, userId, guildId },\n    });\n  }\n\n  async insertMessage(\n    data: Messages,\n    metadata: MessageMetadata,\n    attachments: Omit[],\n    reactions: Omit[],\n  ): Promise {\n    await this.database.messageMetadata.create({\n      data: {\n        ...metadata,\n      },\n    });\n    await this.database.attachment.createMany({\n      data: attachments,\n    });\n    await this.database.reaction.createMany({\n      data: reactions,\n    });\n    await this.database.messages.create({\n      data: {\n        ...data,\n      },\n    });\n  }\n\n  async deleteOne(userId: string, guildId: string): Promise {\n    const users = await this.database.guildUser.findMany({\n      where: { userId },\n    });\n    await this.database.guildUser.delete({\n      where: { guildId_userId: { userId, guildId } },\n    });\n    if (users.length === 1) {\n      await this.database.user.delete({ where: { userId } });\n    }\n  }\n  async findAll(\n    guildId: string | undefined = undefined,\n    userId: string | undefined = undefined,\n  ): Promise> {\n    const users = await this.database.guildUser.findMany({\n      where: { OR: [{ userId }, { guildId }] },\n    });\n    if (!users) return [];\n    return users;\n  }\n\n  async updateMessageCountBucket(\n    userId: string,\n    guildId: string,\n  ): Promise {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageCount = await this.database.messages.count({\n      where: {\n        AND: {\n          userId,\n          guildId,\n        },\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n      },\n    });\n    await this.database.guildUser.update({\n      where: { guildId_userId: { userId, guildId } },\n      data: { messageCountBucket: messageCount },\n    });\n  }\n  async isActive(userId: string, guildId: string): Promise {\n    return (\n      (\n        await this.database.guildUser.findUnique({\n          where: {\n            guildId_userId: {\n              userId,\n              guildId,\n            },\n          },\n        })\n      ).messageCountBucket >= 30\n    );\n  }\n\n  async getRank(member: GuildMember): Promise {\n    if (member.guild.ownerId === member.id) {\n      return 'OWNER';\n    } else if (await this._isMemberAdmin(member.id, member.guild.id)) {\n      return 'ADMIN';\n    } else if (await this._isMemberMod(member.id, member.guild.id)) {\n      return 'MOD';\n    } else if (await this._isMemberVerified(member.id, member.guild.id)) {\n      return 'MEMBER';\n    } else {\n      return 'NEW';\n    }\n  }\n  async addMembers(guildId: string) {\n    const guild = await this.client.guilds.fetch(guildId);\n    const members = await guild.members.fetch();\n    members.forEach(async (member: GuildMember) => {\n      if (!member.user.bot) {\n        const rank = await this.getRank(member);\n        await this.addMember(member.id, member.guild.id, {\n          rank: rank,\n          unlocked: rank !== 'NEW',\n        });\n      }\n    });\n  }\n  async addMember(\n    userId: string,\n    guildId: string,\n    data: Omit, 'userId'>, 'guildId'>,\n  ) {\n    await this.database.user.upsert({\n      where: { userId },\n      create: { userId },\n      update: { userId },\n    });\n    await this.upsert(userId, guildId, data);\n  }\n\n  @OnEvent('settings.role.*.changed')\n  async onAdminRoleIdChanged(payload: SettingsChanged) {\n    await this.addMembers(payload.guildId);\n  }\n\n  private async _isMemberVerified(user_id: string, guild_id: string) {\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has(\n      (await this.settings.getVerifiedMemberRoleId(guild_id)).toString(),\n    );\n  }\n\n  private async _isMemberMod(\n    user_id: string,\n    guild_id: string,\n  ): Promise {\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has((await this.settings.getModRoleId(guild_id)).toString());\n  }\n  private async _isMemberAdmin(\n    user_id: string,\n    guild_id: string,\n  ): Promise {\n    if (user_id == '322822954796974080') return true;\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has(\n      (await this.settings.getAdminRoleId(guild_id)).toString(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/HasRequiredRank.html":{"url":"guards/HasRequiredRank.html","title":"guard - HasRequiredRank","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    HasRequiredRank\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/util/guards/has-required-rank.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    This guard can be used to guard routes/controller(HTTP ONLY NOT COMMANDS) with specific RANK(s)\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/util/guards/has-required-rank.guard.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/guards/has-required-rank.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Function to check if the current user has the required rank to perform the current action.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ExecutionContext see nestjs documentation\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { Reflector } from '@nestjs/core';\nimport { REQUIRED_RANK_KEY } from '../decorators/requires-rank.decorator';\nimport { PrismaService } from 'src/prisma.service';\nimport { Rank } from '@prisma/client';\n\n/**\n * This guard can be used to guard routes/controller(HTTP ONLY NOT COMMANDS) with specific RANK(s)\n */\n@Injectable()\nexport class HasRequiredRank implements CanActivate {\n  private readonly logger = new Logger(HasRequiredRank.name);\n\n  constructor(\n    @Inject(Reflector)\n    private reflector: Reflector,\n    @Inject(PrismaService) private prismaService: PrismaService,\n  ) {}\n  /**\n   * Function to check if the current user has the required rank to perform the current action.\n   * @param context ExecutionContext see nestjs documentation\n   * @returns boolean\n   */\n  async canActivate(context: ExecutionContext) {\n    const requiredRank = this.reflector.getAllAndOverride(\n      REQUIRED_RANK_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    const req = context\n      .switchToHttp()\n      .getRequest();\n    const userId = req.user.userId;\n    if (!userId) throw new UnauthorizedException();\n    const user = await this.prismaService.guildUser.findUnique({\n      where: { guildId_userId: { userId, guildId: req.params.guildId } },\n    });\n    if (!user) throw new ForbiddenException();\n    if (!requiredRank) {\n      return true;\n    }\n\n    const ownedRanks = [user.rank, ...InheritedRanks[user.rank]];\n    return ownedRanks.includes(requiredRank);\n  }\n}\n\n/**\n * Map of ranks that are inherited by any given rank,\n * meaning their lower ranks e.g MOD has MEMBER.\n * But MEMBER has 0 since its the lowest rank a member can have.\n */\nconst InheritedRanks: Record = {\n  OWNER: ['ADMIN', 'MOD', 'MEMBER'],\n  ADMIN: ['MOD', 'MEMBER'],\n  MOD: ['MEMBER'],\n  MEMBER: [],\n  NEW: [],\n};\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsModalInteractionGuard.html":{"url":"guards/IsModalInteractionGuard.html","title":"guard - IsModalInteractionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsModalInteractionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/is-modal-interaction.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/is-modal-interaction.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { InteractionType } from 'discord.js';\n\nexport class IsModalInteractionGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const interaction = context.getArgByIndex(0);\n\n    return interaction.type === InteractionType.ModalSubmit;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsUserUnlockedGuard.html":{"url":"guards/IsUserUnlockedGuard.html","title":"guard - IsUserUnlockedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsUserUnlockedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(settingsService: GuildSettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/guards/user-is-unlocked.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: DiscordExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/user-is-unlocked.guard.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            DiscordExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { Message } from 'discord.js';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\n\ninterface DiscordExecutionContext extends ExecutionContext {\n  getMessage(): Message;\n}\n@Injectable()\nexport class IsUserUnlockedGuard implements CanActivate {\n  constructor(\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n  ) {}\n  async canActivate(context: DiscordExecutionContext): Promise {\n    const message: Message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return message.member.roles.cache.has(\n      await this.settingsService.getVerifiedMemberRoleId(message.guildId),\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/JwtAuthController.html":{"url":"controllers/JwtAuthController.html","title":"controller - JwtAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  JwtAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshJwtGuard)@ApiHeader({name: 'refresh_token', description: ''})@Post('refresh')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Get,\n  Logger,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { RefreshJwtGuard } from './guards/refresh-auth.guard';\nimport { ApiBearerAuth, ApiHeader, ApiTags } from '@nestjs/swagger';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller('auth')\n@ApiTags('auth/jwt')\n@ApiBearerAuth()\nexport class JwtAuthController {\n  private readonly logger = new Logger(JwtAuthController.name);\n\n  constructor(\n    private authService: JwtAuthService,\n    private http: HttpService,\n    private configService: ConfigService,\n  ) {}\n\n  @UseGuards(RefreshJwtGuard)\n  @ApiHeader({\n    name: 'refresh_token',\n    description: '',\n  })\n  @Post('refresh')\n  async refreshToken(@Req() req) {\n    return this.authService.refreshToken(req.user);\n  }\n\n  @Get('login')\n  async login(@Query('code') code: string) {\n    if (!code) {\n      throw new BadRequestException('No code provided');\n    }\n\n    return this.authService.login(await this.authService.getUserFromCode(code));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JwtAuthModule.html":{"url":"modules/JwtAuthModule.html","title":"module - JwtAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    JwtAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JwtAuthModule\n\n\n\ncluster_JwtAuthModule_exports\n\n\n\ncluster_JwtAuthModule_providers\n\n\n\n\nJwtAuthService \n\nJwtAuthService \n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nJwtAuthService  -->\n\nJwtAuthModule->JwtAuthService \n\n\n\n\n\nJwtAuthService\n\nJwtAuthService\n\nJwtAuthModule -->\n\nJwtAuthService->JwtAuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nJwtAuthModule -->\n\nJwtAuthStrategy->JwtAuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nJwtAuthModule -->\n\nPrismaService->JwtAuthModule\n\n\n\n\n\nRefreshJwtStrategy\n\nRefreshJwtStrategy\n\nJwtAuthModule -->\n\nRefreshJwtStrategy->JwtAuthModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nJwtAuthModule -->\n\nSelfService->JwtAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthService\n                        \n                        \n                            JwtAuthStrategy\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RefreshJwtStrategy\n                        \n                        \n                            SelfService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            JwtAuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { JwtAuthStrategy } from './jwt-auth.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtAuthController } from './jwt-auth.controller';\nimport { RefreshJwtStrategy } from './refresh-token.strategy';\nimport { HttpModule } from '@nestjs/axios';\nimport { PrismaService } from 'src/prisma.service';\nimport { SelfService } from 'src/user/self.service';\nimport { DiscordModule } from '@discord-nestjs/core';\n\n@Module({\n  imports: [\n    DiscordModule.forFeature(),\n    PassportModule,\n    HttpModule,\n    JwtModule.register({\n      secret: 'jwtConstants.secret',\n      signOptions: { expiresIn: '900s' },\n    }),\n  ],\n  controllers: [JwtAuthController],\n  providers: [\n    JwtAuthStrategy,\n    RefreshJwtStrategy,\n    JwtAuthService,\n    PrismaService,\n    SelfService,\n  ],\n  exports: [JwtAuthService],\n})\nexport class JwtAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthService.html":{"url":"injectables/JwtAuthService.html","title":"injectable - JwtAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserFromCode\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, usersService: SelfService, http: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt-auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        SelfService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFromCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFromCode(code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(JwtAuthService.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/jwt/jwt-auth.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { AxiosError } from 'axios';\nimport { OAuthErrorData } from 'discord.js';\nimport { firstValueFrom, catchError } from 'rxjs';\nimport { SelfService } from 'src/user/self.service';\n\n@Injectable()\nexport class JwtAuthService {\n  private readonly logger = new Logger(JwtAuthService.name);\n\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private readonly usersService: SelfService,\n    private http: HttpService,\n  ) {}\n\n  async login(userId: string) {\n    const payload = {\n      sub: {\n        userId,\n      },\n    };\n    return {\n      user: {\n        user_id: userId,\n      },\n      accessToken: this.jwtService.sign(payload, {\n        secret: this.configService.get('JWT_ACCESS_SECRET'),\n        issuer: this.configService.get('JWT_ISSUER'),\n        algorithm: 'HS256',\n      }),\n      refreshToken: this.jwtService.sign(payload, {\n        expiresIn: this.configService.get('JWT_REFRESH_EXPIRATION'),\n        secret: this.configService.get('JWT_REFRESH_SECRET'),\n        issuer: this.configService.get('JWT_ISSUER'),\n        algorithm: 'HS256',\n      }),\n    };\n  }\n\n  async refreshToken(userId: string) {\n    const payload = {\n      sub: {\n        userId,\n      },\n    };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  async validateUser(userId: string): Promise {\n    const user = await this.usersService.fetchSelf(userId);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user.userId;\n  }\n\n  async getUserFromCode(code: string): Promise {\n    const response = await firstValueFrom(\n      this.http\n        .post(\n          'https://discordapp.com/api/oauth2/token',\n          new URLSearchParams({\n            client_id: this.configService.get('DISCORD_OAUTH_CLIENT_ID'),\n            client_secret: this.configService.get('DISCORD_OAUTH_SECRET'),\n            code: code,\n            grant_type: 'authorization_code',\n            redirect_uri: this.configService.get('DISCORD_CALLBACK_URL'),\n            scope: 'identify',\n          }),\n          {\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n          },\n        )\n        .pipe(\n          catchError((error: AxiosError) => {\n            this.logger.warn(\n              'OAuth token call to Discord failed: ' +\n                JSON.stringify(error.response.data),\n            );\n            if (error.response.data.error === 'invalid_grant') {\n              this.logger.warn(\n                'Is the user trying to log in not member of the guild?',\n              );\n            }\n            throw new UnauthorizedException();\n          }),\n        ),\n    );\n    const { data } = await firstValueFrom(\n      this.http\n        .get('https://discordapp.com/api/users/@me', {\n          headers: { Authorization: `Bearer ${response.data.access_token}` },\n        })\n        .pipe(\n          catchError((error: AxiosError) => {\n            throw `Error: ${error.message} `;\n          }),\n        ),\n    );\n    return this.validateUser(data.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthStrategy.html":{"url":"injectables/JwtAuthStrategy.html","title":"injectable - JwtAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt-auth.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_ACCESS_SECRET'),\n      issuer: configService.get('JWT_ISSUER'),\n    });\n  }\n\n  async validate(payload: any) {\n    return payload.sub;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogEntry.html":{"url":"classes/LogEntry.html","title":"class - LogEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/dto/log.entry.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for LogEntries\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                action\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                extraInfo\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                invokerId\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                            \n                                    \n                                    \n                                targetId\n                            \n                            \n                                    \n                                    \n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The action that was performed'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@ApiProperty({type: Date, description: 'The date when the event occurred'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        extraInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'Contains the involved object, if its an update event it contains the old object as well as the new object und old/new key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The guild id where the event occurred'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        invokerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The user id of the invoker'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The reason for the action, most likely just a different wording of action'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the target, can be one of:         message id,         channel id,         role id,         guild id,         user id,         invite code         or a webhook id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'Describe the type of the target id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:97\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsOptional, IsString } from 'class-validator';\n\n/**\n * All possible actions that can occur\n */\nexport const actions = [\n  'USER_JOINED',\n  'WARN',\n  'ERROR',\n  'USER_LEFT',\n  'USER_BANNED',\n  'USER_UNBANNED',\n  'USER_UPDATED',\n  'GUILD_UPDATED',\n  'INVALID_REQUEST',\n  'INVITE_CREATED',\n  'INVITE_DELETED',\n  'MESSAGE_DELETED',\n  'REACTION_ADDED',\n  'REACTION_REMOVED',\n  'ROLE_CREATED',\n  'ROLE_DELETED',\n  'ROLE_UPDATED',\n  'CHANNEL_CREATED',\n  'CHANNEL_DELETED',\n  'CHANNEL_UPDATED',\n  'WEBHOOKS_UPDATED',\n  'TIMEOUT_EXPIRED',\n  'TIMEOUT',\n  'KICK',\n  'BAN',\n] as const;\nexport type Action = (typeof actions)[number];\n\n/**\n * List of the targets an event can have\n */\nexport const targetTypes = [\n  'ERROR',\n  'WARN',\n  'USER',\n  'GUILD',\n  'INVALID_REQUEST',\n  'INVITE',\n  'MESSAGE',\n  'ROLE',\n  'CHANNEL',\n] as const;\nexport type TargetType = (typeof targetTypes)[number];\n\n/**\n * Data transfer object for LogEntries\n */\nexport default class LogEntry {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild id where the event occurred',\n  })\n  guildId: string;\n  @IsString()\n  @ApiProperty({ type: String, description: 'The user id of the invoker' })\n  invokerId: string;\n  @IsString()\n  @ApiProperty({ type: String, description: 'The action that was performed' })\n  action: Action;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description:\n      'The reason for the action, most likely just a different wording of action',\n  })\n  reason: string;\n  @IsDate()\n  @ApiProperty({ type: Date, description: 'The date when the event occurred' })\n  createdAt: Date;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description:\n      'The id of the target, can be one of: \\\n        message id, \\\n        channel id, \\\n        role id, \\\n        guild id, \\\n        user id, \\\n        invite code \\\n        or a webhook id',\n  })\n  targetId: string;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'Describe the type of the target id',\n  })\n  targetType: TargetType;\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description:\n      'Contains the involved object, if its an update event it contains the old object as well as the new object und old/new key',\n  })\n  extraInfo?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogEntryDto.html":{"url":"classes/LogEntryDto.html","title":"class - LogEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/dto/log-entry.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                action\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                invokerId\n                            \n                            \n                                    \n                                reason\n                            \n                            \n                                    \n                                targetId\n                            \n                            \n                                    \n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', enum: actions})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        invokerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', enum: targetTypes})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import LogEntry, {\n  Action,\n  actions,\n  TargetType,\n  targetTypes,\n} from '../../util/dto/log.entry.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LogEntryDto implements Omit {\n  @ApiProperty({ type: 'string', enum: actions })\n  action: Action;\n  @ApiProperty({ type: 'string', format: 'date-time' })\n  createdAt: Date;\n  @ApiProperty({ type: 'string' })\n  invokerId: string;\n  @ApiProperty({ type: 'string' })\n  reason: string;\n  @ApiProperty({ type: 'string' })\n  targetId: string;\n  @ApiProperty({ type: 'string', enum: targetTypes })\n  targetType: TargetType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MessageFromUserGuard.html":{"url":"guards/MessageFromUserGuard.html","title":"guard - MessageFromUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MessageFromUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/message-from-user.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/message-from-user.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Message } from 'discord.js';\n\nexport class MessageFromUserGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return !message.author.bot;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MessageIsDmGuard.html":{"url":"guards/MessageIsDmGuard.html","title":"guard - MessageIsDmGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MessageIsDmGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/message-is-dm.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/message-is-dm.guard.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\nimport { Message } from 'discord.js';\n\n@Injectable()\nexport class MessageIsDmGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const message = context.getArgByIndex(0);\n    if (\n      message instanceof Message &&\n      !(message as Message).inGuild() &&\n      !message.author.bot\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ModAnnouncementDto.html":{"url":"classes/ModAnnouncementDto.html","title":"class - ModAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ModAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/mod-anouncement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                replyToMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The message to send', descriptionLocalizations: undefined, type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/mod-anouncement.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        replyToMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({name: 'replyto', description: 'Message ID to which the bot should reply(optional)', type: undefined, required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/mod-anouncement.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ModAnnouncementDto {\n  @Param({\n    description: 'The message to send',\n    descriptionLocalizations: {\n      'en-US': 'The message to send',\n      de: 'Die Nachricht die gesendet werden soll',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  message: string;\n\n  @Param({\n    name: 'replyto',\n    description: 'Message ID to which the bot should reply(optional)',\n    type: ParamType.STRING,\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  replyToMessage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ModRequestFlow.html":{"url":"injectables/ModRequestFlow.html","title":"injectable - ModRequestFlow","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ModRequestFlow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/interaction-create/mod-request-menu/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getGuildIdFromSelectMenu\n                            \n                            \n                                    Async\n                                initiateModRequestFlow\n                            \n                            \n                                    \n                                    Async\n                                onButton\n                            \n                            \n                                    \n                                    Async\n                                onMenuSelect\n                            \n                            \n                                    \n                                    Async\n                                onModalSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, guildUserService: GuildUserService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _getGuildIdFromSelectMenu\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getGuildIdFromSelectMenu(interaction: ButtonInteraction, guilds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guilds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initiateModRequestFlow\n                        \n                    \n                \n            \n            \n                \n                        \n                    initiateModRequestFlow(interaction: ButtonInteraction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButton\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButton(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMenuSelect\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMenuSelect(interaction: StringSelectMenuInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        StringSelectMenuInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onModalSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModalSubmit(interaction: ModalSubmitInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ModalSubmitInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ModRequestFlow.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:33\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, On } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { BinaryToTextEncoding, createHash } from 'crypto';\nimport {\n  ModalSubmitInteraction,\n  EmbedBuilder,\n  userMention,\n  StringSelectMenuInteraction,\n  ModalBuilder,\n  ActionRowBuilder,\n  ModalActionRowComponentBuilder,\n  TextInputBuilder,\n  TextInputStyle,\n  ButtonInteraction,\n  StringSelectMenuBuilder,\n  ComponentType,\n  Client,\n  ChannelType,\n  PermissionFlagsBits,\n  ButtonBuilder,\n  ButtonStyle,\n} from 'discord.js';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { PrismaService } from 'src/prisma.service';\nimport {\n  modRequestCategorySelect,\n  modRequestMenuId,\n  needHelpButtonId,\n  selectGuildMenu,\n} from 'src/util/functions/menu-helper';\n@Injectable()\nexport class ModRequestFlow {\n  logger = new Logger(ModRequestFlow.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n    @Inject(PrismaService) readonly prismaService: PrismaService,\n  ) {}\n\n  @On('interactionCreate')\n  async onModalSubmit(interaction: ModalSubmitInteraction) {\n    if (!interaction.isModalSubmit()) return;\n    const [modal, guildId, categoryId] = interaction.customId.split('-');\n    if (modal != 'modRequestModal') return;\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = await guild.channels.create({\n      name: `Ticket-${createHash('sha256')\n        .update(JSON.stringify(interaction.user.displayName), 'utf8')\n        .digest('hex' as BinaryToTextEncoding)}`,\n      reason: `${userMention(interaction.user.id)} created a ticket`,\n      type: ChannelType.GuildText,\n      parent: '1011532621412577350',\n      permissionOverwrites: [\n        {\n          id: interaction.user.id,\n          allow: [\n            PermissionFlagsBits.ViewChannel,\n            PermissionFlagsBits.SendMessages,\n            PermissionFlagsBits.ReadMessageHistory,\n          ],\n        },\n      ],\n    });\n    const ticket = await this.prismaService.tickets.create({\n      data: {\n        userId: interaction.user.id,\n        guildId,\n        ticketId: channel.id,\n      },\n    });\n    await channel.send({\n      embeds: [\n        new EmbedBuilder()\n          .setTitle('Mod Anfrage')\n          .setDescription(\n            interaction.fields.getTextInputValue('modRequestMessage'),\n          )\n          .addFields(\n            {\n              name: 'Kategorie',\n              value: categoryId.replace('modRequest', ''),\n            },\n            {\n              name: 'Von Nutzer:in',\n              value: userMention(interaction.user.id),\n            },\n          ),\n      ],\n      components: [\n        new ActionRowBuilder().addComponents(\n          new ButtonBuilder()\n            .setCustomId(`closeTicket-${ticket.ticketId}`)\n            .setLabel('Ticket schließen')\n            .setStyle(ButtonStyle.Primary),\n        ),\n      ],\n    });\n    await channel.send(userMention(interaction.user.id));\n    await interaction.editReply({\n      content: 'Deine Mod Anfrage wurde erfolgreich versendet.',\n    });\n  }\n\n  @On('interactionCreate')\n  async onMenuSelect(interaction: StringSelectMenuInteraction) {\n    if (!interaction.isStringSelectMenu()) return;\n    if (interaction.customId != modRequestMenuId) return;\n    const modRequestModal = new ModalBuilder()\n      .setCustomId(\n        `modRequestModal-${\n          interaction.guildId ?? interaction.values[0].split('-')[1]\n        }-${interaction.values[0].split('-')[0]}`,\n      )\n      .setTitle('Mod Anfrage');\n\n    modRequestModal.addComponents(\n      new ActionRowBuilder().addComponents(\n        new TextInputBuilder()\n          .setCustomId('modRequestMessage')\n          .setPlaceholder('Schreibe deine Mod Anfrage hier rein.')\n          .setRequired(true)\n          .setStyle(TextInputStyle.Paragraph)\n          .setLabel('Mod Anfrage'),\n      ),\n    );\n    await interaction.showModal(modRequestModal);\n    await interaction.deleteReply();\n  }\n\n  @On('interactionCreate')\n  async onButton(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (interaction.customId != needHelpButtonId) return;\n    type knownButtons = {\n      createTicket: string;\n    };\n    const callback: Record Promise\n    > = {\n      createTicket: async (i) => {\n        this.initiateModRequestFlow(i);\n      },\n    };\n    try {\n      callback[interaction.customId as keyof knownButtons](interaction);\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n\n  async initiateModRequestFlow(interaction: ButtonInteraction) {\n    await interaction.deferReply({ ephemeral: true });\n    const guilds = (\n      await this.guildUserService.findAll(\n        interaction?.guildId ?? undefined,\n        interaction.user.id,\n      )\n    ).map((user) => user.guildId);\n    const guildId =\n      guilds.length > 1\n        ? await this._getGuildIdFromSelectMenu(interaction, guilds)\n        : (interaction?.guildId ?? guilds[0]);\n    const modRequestMenu = modRequestCategorySelect(guildId);\n    const options = {\n      content: 'Wähle eine Kategorie aus:',\n      components: [\n        new ActionRowBuilder().addComponents(\n          modRequestMenu,\n        ),\n      ],\n      ephemeral: true,\n    };\n    await interaction.editReply(options);\n  }\n  async _getGuildIdFromSelectMenu(\n    interaction: ButtonInteraction,\n    guilds: string[],\n  ) {\n    const guildMenu = selectGuildMenu(guilds);\n    const options = {\n      content: 'Wähle einen Server aus:',\n      components: [\n        new ActionRowBuilder().addComponents(\n          guildMenu,\n        ),\n      ],\n      ephemeral: true,\n    };\n    const selectionInteraction = await interaction.editReply(options);\n    const selection = await selectionInteraction.awaitMessageComponent({\n      componentType: ComponentType.StringSelect,\n      filter: (i) => i.customId === 'selectGuild',\n      time: 1000 * 60 * 5,\n    });\n    return selection.values[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ModerationModule.html":{"url":"modules/ModerationModule.html","title":"module - ModerationModule","body":"\n                   \n\n\n\n\n    Modules\n    ModerationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ModerationModule\n\n\n\ncluster_ModerationModule_imports\n\n\n\ncluster_ModerationModule_providers\n\n\n\n\nAuditLogModule\n\nAuditLogModule\n\n\n\nModerationModule\n\nModerationModule\n\nModerationModule -->\n\nAuditLogModule->ModerationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nModerationModule -->\n\nPrismaService->ModerationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/moderation/moderation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                        \n                            UserController\n                        \n                        \n                            ChannelController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuditLogModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoleController } from './role/role.controller';\nimport { UserController } from './user/user.controller';\nimport { ChannelController } from './channel/channel.controller';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { AuditLogModule } from 'src/auditlog/auditlog.module';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  imports: [DiscordModule.forFeature(), AuditLogModule],\n  controllers: [RoleController, UserController, ChannelController],\n  providers: [PrismaService],\n  exports: [],\n})\nexport class ModerationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MumVoiceCommand.html":{"url":"classes/MumVoiceCommand.html","title":"class - MumVoiceCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MumVoiceCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/mod-anouncement.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(interaction: CommandInteraction, dto: ModAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/mod-anouncement.command.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ModAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, IA, InteractionEvent } from '@discord-nestjs/core';\nimport { ApplicationCommandType, CommandInteraction } from 'discord.js';\nimport { ModAnnouncementDto } from '../dto/mod-anouncement.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\n\n@Command({\n  name: 'mumvoice',\n  description: 'Sends your message using the bot',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.ChatInput,\n  dmPermission: false,\n})\nexport class MumVoiceCommand {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) dto: ModAnnouncementDto,\n  ): Promise {\n    try {\n      if (dto.replyToMessage != '' || dto.replyToMessage != undefined)\n        await interaction.channel.send({\n          content: dto.message,\n          reply: {\n            messageReference: dto.replyToMessage,\n            failIfNotExists: true,\n          },\n        });\n      else\n        await interaction.channel.send({\n          content: dto.message,\n        });\n      interaction.reply({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${dto.message}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PermissionOverwrite.html":{"url":"classes/PermissionOverwrite.html","title":"class - PermissionOverwrite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PermissionOverwrite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the permission overwrite'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PingCommand.html":{"url":"classes/PingCommand.html","title":"class - PingCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PingCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/ping.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onPlayCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/ping.command.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onPlayCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onPlayCommand()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/ping.command.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\n\n@Command({\n  name: 'ping',\n  description: 'Gets the ws gateway ping',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class PingCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n  @Handler()\n  onPlayCommand(): string {\n    return `Ping is ${this.client.ws.ping} ms.`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit' as never, async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ReactedMemberIsModOrHigherGuard.html":{"url":"guards/ReactedMemberIsModOrHigherGuard.html","title":"guard - ReactedMemberIsModOrHigherGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ReactedMemberIsModOrHigherGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/member-is-mod-or-higher.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(settingsService: GuildUserService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/guards/member-is-mod-or-higher.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/member-is-mod-or-higher.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { MessageReaction, User } from 'discord.js';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\n\n@Injectable()\nexport class ReactedMemberIsModOrHigherGuard implements CanActivate {\n  constructor(\n    @Inject(GuildUserService)\n    private readonly settingsService: GuildUserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const message = context.getArgByIndex(0);\n    const discordUser: User = context.getArgByIndex(1);\n    if (discordUser.partial) await discordUser.fetch();\n    if (message.partial) await message.fetch();\n    if (!(message instanceof MessageReaction)) return false;\n    if (!message.message.inGuild()) {\n      return false;\n    }\n    const user = await this.settingsService.getGuildUser(\n      discordUser.id,\n      message.message.guildId,\n    );\n    if (['MOD', 'ADMIN', 'OWNER'].includes(user.rank)) {\n      return true;\n    }\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJwtGuard.html":{"url":"injectables/RefreshJwtGuard.html","title":"injectable - RefreshJwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/guards/refresh-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt-refresh')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshJwtGuard extends AuthGuard('jwt-refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJwtStrategy.html":{"url":"injectables/RefreshJwtStrategy.html","title":"injectable - RefreshJwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/refresh-token.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/refresh-token.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/refresh-token.strategy.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class RefreshJwtStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromHeader('refresh_token'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { user: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestrictedChannelDto.html":{"url":"classes/RestrictedChannelDto.html","title":"class - RestrictedChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestrictedChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/dto/restricted-channels.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                requiredPoints\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/restricted-channels.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        requiredPoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/restricted-channels.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { RestrictedChannels } from '@prisma/client';\nimport { IsNumber, IsString } from 'class-validator';\n\nexport class RestrictedChannelDto\n  implements Omit\n{\n  @IsString()\n  @ApiProperty({\n    type: String,\n  })\n  channelId: string;\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n  })\n  requiredPoints: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /role\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildRoles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRole(guildId: string, roleData: EditRoleData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({summary: 'Create a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, schema: roleResponseSchema, description: 'Role was successfully created'})@ApiResponse({status: 500, description: 'Role could not be successfully created'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleData\n                                            \n                                                            EditRoleData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        deleteRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRole(guildId: string, roleId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':roleId')@ApiOperation({summary: 'Delete a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, description: 'Role was successfully deleted'})@ApiResponse({status: 500, description: 'Role could not be successfully deleted'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getGuildRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildRoles(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all roles for a guild'})@ApiResponse({status: 200, type: undefined, schema: rolesResponseSchema, description: 'Roles were successfully fetched'})@ApiResponse({status: 500, description: 'Roles could not be successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(guildId: string, roleId: string, roleData: EditRoleData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':roleId')@ApiOperation({summary: 'Update a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, schema: roleResponseSchema, description: 'Role was successfully updated'})@ApiResponse({status: 500, description: 'Role could not be successfully updated'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleData\n                                            \n                                                            EditRoleData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Inject,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Client, Role } from 'discord.js';\nimport {\n  RoleResponse,\n  rolesResponseSchema,\n  roleResponseSchema,\n  EditRoleData,\n} from '../dto/role';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { Rank } from '@prisma/client';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\nconst logger = new Logger('RoleController');\n@ApiTags('/role')\n@Controller('/role')\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\n@ApiBearerAuth()\nexport class RoleController {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all roles for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: [RoleResponse],\n    schema: rolesResponseSchema,\n    description: 'Roles were successfully fetched',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Roles could not be successfully fetched',\n  })\n  async getGuildRoles(@Param('guildId') guildId: string): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    logger.log(`Found ${guild.roles.cache.size} roles in guild ${guildId}`);\n    return (await guild.roles.fetch()).toJSON();\n  }\n  @Post('/')\n  @ApiOperation({ summary: 'Create a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    schema: roleResponseSchema,\n    description: 'Role was successfully created',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully created',\n  })\n  async createRole(\n    @Param('guildId') guildId: string,\n    @Body() roleData: EditRoleData,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = await guild.roles.create(roleData);\n    logger.log(`Created role ${role.name} in guild ${guildId}`);\n    return role;\n  }\n  @Put(':roleId')\n  @ApiOperation({ summary: 'Update a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    schema: roleResponseSchema,\n    description: 'Role was successfully updated',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully updated',\n  })\n  async updateRole(\n    @Param('guildId') guildId: string,\n    @Param('roleId') roleId: string,\n    @Body() roleData: EditRoleData,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = guild.roles.cache.get(roleId);\n    await role.edit(roleData);\n    logger.log(`Updated role ${role.name} in guild ${guildId}`);\n    return role;\n  }\n\n  @Delete(':roleId')\n  @ApiOperation({ summary: 'Delete a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    description: 'Role was successfully deleted',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully deleted',\n  })\n  async deleteRole(\n    @Param('guildId') guildId: string,\n    @Param('roleId') roleId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = guild.roles.cache.get(roleId);\n    logger.log(`Deleted role ${role.name} in guild ${guildId}`);\n    await role.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleResponse.html":{"url":"classes/RoleResponse.html","title":"class - RoleResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                color\n                            \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                guild\n                            \n                            \n                                    \n                                    \n                                hoist\n                            \n                            \n                                    \n                                    \n                                icon\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                managed\n                            \n                            \n                                    \n                                    \n                                mentionable\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                permissions\n                            \n                            \n                                    \n                                    \n                                rawPosition\n                            \n                            \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                unicodeEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The color of the role', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The timestamp the role was created at(Unixtimestamp)', example: 1600000000000})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guild\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The guild the api belongs to', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hoist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is hoisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@ApiProperty({type: String, description: 'The icon of the role', example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the role', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        managed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is managed by an integration', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        mentionable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is mentionable', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The name of the role', example: 'Admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The permissions of the role', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rawPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The position of the role', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The tags of the role', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        unicodeEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The unicodeEmoji of the role', example: '👑'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nimport {\n  Base64Resolvable,\n  ColorResolvable,\n  Colors,\n  EmojiResolvable,\n  PermissionFlagsBits,\n  PermissionResolvable,\n} from 'discord.js';\n\nclass RoleResponse {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild the api belongs to',\n    example: '123456789012345678',\n  })\n  guild: string;\n\n  @IsUrl()\n  @ApiProperty({\n    type: String,\n    description: 'The icon of the role',\n    example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n  })\n  icon: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The unicodeEmoji of the role',\n    example: '👑',\n  })\n  unicodeEmoji: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the role',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The name of the role',\n    example: 'Admin',\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The color of the role',\n    example: 0,\n  })\n  color: number;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is hoisted',\n    example: false,\n  })\n  hoist: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The position of the role',\n    example: 0,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The permissions of the role',\n    example: '0',\n  })\n  permissions: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is managed by an integration',\n    example: false,\n  })\n  managed: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is mentionable',\n    example: false,\n  })\n  mentionable: boolean;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The tags of the role',\n    example: null,\n  })\n  tags: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The timestamp the role was created at(Unixtimestamp)',\n    example: 1600000000000,\n  })\n  createdTimestamp: number;\n}\n\nclass EditRoleData {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsIn(Object.keys(Colors))\n  @ApiProperty({\n    enum: Colors,\n    required: false,\n    example: 'White',\n    examples: Object.keys(Colors),\n    description: 'New color of the role',\n  })\n  color?: ColorResolvable;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'Why was the role updated',\n  })\n  reason: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Whether or not the role should be hoisted',\n  })\n  hoist?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description:\n      'The position of the role; Higher = more permissions relative to the role below',\n  })\n  position?: number;\n\n  @IsIn(Object.keys(PermissionFlagsBits))\n  @IsOptional()\n  @ApiProperty({\n    type: Array,\n    required: false,\n    description: 'Updated Permission',\n    default: null,\n    example: ['AddReactions', 'KickMembers'],\n  })\n  permissions?: PermissionResolvable;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the role be mentionable or not',\n  })\n  mentionable?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New Icon of the role, base64 encoded string',\n    externalDocs: {\n      description: 'Discord.js docs',\n      url: 'https://old.discordjs.dev/#/docs/discord.js/main/class/Role?scrollTo=setIcon',\n    },\n  })\n  icon?: Base64Resolvable | EmojiResolvable | null;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'The new unicodeEmoji of the role',\n  })\n  unicodeEmoji?: string | null;\n}\n// Generate example schema for get /guilds/:guildId/roles/:roleId\nconst roleResponseSchema = {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n};\n// Schema for retrieving all roles from a guild with example data\nconst rolesResponseSchema = {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n};\n\n// Write exports here\nexport { RoleResponse, EditRoleData, roleResponseSchema, rolesResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SelfController.html":{"url":"controllers/SelfController.html","title":"controller - SelfController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SelfController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user/self\n            \n\n\n            \n                Description\n            \n            \n                The controller for the /user/self endpoint.\nThis endpoint is responsible for telling the frontend the current logged in user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/self.controller.ts:21\n                        \n                    \n\n\n            \n                \n                        Gets the current logged in user for the frontend.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the user ID, this is the discord user ID and it comes from the request if a user is logged in\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the user with data fetch from the discord api, see self.service.ts\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, UseGuards } from '@nestjs/common';\nimport { SelfDto } from './self.dto';\nimport { RequestUser } from '../util/decorators/request-user.decorator';\nimport { JwtAuthGuard } from '../auth/jwt/guards/jwt-auth.guard';\nimport { SelfService } from './self.service';\n\n/**\n * The controller for the /user/self endpoint.\n * This endpoint is responsible for telling the frontend the current logged in user.\n */\n@Controller('/user/self')\n@UseGuards(JwtAuthGuard)\nexport class SelfController {\n  constructor(@Inject(SelfService) private readonly selfService: SelfService) {}\n  /**\n   * Gets the current logged in user for the frontend.\n   * @param userId the user ID, this is the discord user ID and it comes from the request if a user is logged in\n   * @returns the user with data fetch from the discord api, see self.service.ts\n   */\n  @Get()\n  async getSelf(@RequestUser() userId: string): Promise {\n    return this.selfService.fetchSelf(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfDto.html":{"url":"classes/SelfDto.html","title":"class - SelfDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                guilds\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guilds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Guild[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['userId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { GuildUser } from '@prisma/client';\n\nexport class Guild {\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) name: string;\n  @ApiProperty({ type: String }) image: string;\n}\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n  @ApiPropertyOptional({ type: [Guild] }) guilds: Guild[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfDto-1.html":{"url":"classes/SelfDto-1.html","title":"class - SelfDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/dto/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                guildId\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                rank\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['guildId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['rank']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['userId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GuildUser } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) rank: GuildUser['rank'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SelfService.html":{"url":"injectables/SelfService.html","title":"injectable - SelfService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SelfService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service used to fetch the user data that the frontend needs.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _fetchGuilds\n                            \n                            \n                                    Async\n                                fetchSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discord: Client, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/self.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discord\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _fetchGuilds\n                        \n                    \n                \n            \n            \n                \n                        \n                    _fetchGuilds(userId: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/self.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Fetches the user from the bots database and\ntakes the guild ids and fetches those from discord, then returns them.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the discord user id of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                a list of guilds that the user is in\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        fetchSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchSelf(userId: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/self.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Fetches the user from discord and\nchecks the guild that the user is in via the database\nand returns the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the discord user id of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the user dto with all needed data\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client, Guild } from 'discord.js';\nimport { PrismaService } from '../prisma.service';\nimport { SelfDto } from './self.dto';\nimport { User } from '@prisma/client';\nimport { plainToInstance } from '../util/functions/plain-to-instance';\n\n/**\n * Service used to fetch the user data that the frontend needs.\n */\n@Injectable()\nexport class SelfService {\n  constructor(\n    @InjectDiscordClient() private readonly discord: Client,\n    @Inject(PrismaService) private readonly prisma: PrismaService,\n  ) {}\n  /**\n   * Fetches the user from discord and\n   * checks the guild that the user is in via the database\n   * and returns the user.\n   * @param userId the discord user id of the user\n   * @returns the user dto with all needed data\n   */\n  async fetchSelf(userId: User['userId']): Promise {\n    const [discordUser, guilds] = await Promise.all([\n      this.discord.users.fetch(userId),\n      this._fetchGuilds(userId),\n    ]);\n\n    return plainToInstance(SelfDto, {\n      userId: discordUser.id,\n      avatarUrl: discordUser.avatarURL({ size: 128 }),\n      name: discordUser.globalName,\n      guilds: guilds.map((guild) => ({\n        guildId: guild.id,\n        name: guild.name,\n        image: guild.iconURL({ size: 128 }),\n      })),\n    });\n  }\n  /**\n   * Fetches the user from the bots database and\n   * takes the guild ids and fetches those from discord, then returns them.\n   * @param userId the discord user id of the user\n   * @returns a list of guilds that the user is in\n   */\n  private async _fetchGuilds(userId: User['userId']): Promise {\n    return this.prisma.guildUser\n      .findMany({ where: { userId: userId } })\n      .then((guildUsers) =>\n        Promise.all(\n          guildUsers.map((guildUser) =>\n            this.discord.guilds.fetch(guildUser.guildId),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendDirectMessageToUserException.html":{"url":"classes/SendDirectMessageToUserException.html","title":"class - SendDirectMessageToUserException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendDirectMessageToUserException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/send-direct-message-to-user-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when the bot tries to DM a user but fails\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, userId: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/send-direct-message-to-user-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when the bot tries to DM a user but fails\n */\nexport class SendDirectMessageToUserException extends Error {\n  constructor(guildId: string, userId: string) {\n    super(\n      `Failed to send direct message to user ${userId} in guild ${guildId}.`,\n    );\n  }\n}\n\n/**\n * Filter used to craft the http api error response when the exception is triggered in a http request context.\n */\n@Catch(SendDirectMessageToUserException)\nexport class SendDirectMessageToUserExceptionFilter implements ExceptionFilter {\n  catch(exception: SendDirectMessageToUserException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendDirectMessageToUserExceptionFilter.html":{"url":"classes/SendDirectMessageToUserExceptionFilter.html","title":"class - SendDirectMessageToUserExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendDirectMessageToUserExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/send-direct-message-to-user-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to craft the http api error response when the exception is triggered in a http request context.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: SendDirectMessageToUserException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/send-direct-message-to-user-exception.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            SendDirectMessageToUserException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when the bot tries to DM a user but fails\n */\nexport class SendDirectMessageToUserException extends Error {\n  constructor(guildId: string, userId: string) {\n    super(\n      `Failed to send direct message to user ${userId} in guild ${guildId}.`,\n    );\n  }\n}\n\n/**\n * Filter used to craft the http api error response when the exception is triggered in a http request context.\n */\n@Catch(SendDirectMessageToUserException)\nexport class SendDirectMessageToUserExceptionFilter implements ExceptionFilter {\n  catch(exception: SendDirectMessageToUserException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetFirstMessageUICommand.html":{"url":"classes/SetFirstMessageUICommand.html","title":"class - SetFirstMessageUICommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetFirstMessageUICommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/user-set-first-message-ui.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onShowInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/user-set-first-message-ui.command.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onShowInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    onShowInfo(interaction: ContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/user-set-first-message-ui.command.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ApplicationCommandType,\n  Client,\n  ContextMenuCommandInteraction,\n  userMention,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'Set first message',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class SetFirstMessageUICommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService)\n    private prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onShowInfo(interaction: ContextMenuCommandInteraction) {\n    if (!interaction.isContextMenuCommand()) return;\n    await interaction.deferReply({ ephemeral: true });\n    const message = await interaction.channel.messages.fetch(\n      interaction.targetId,\n    );\n    await this.prismaService.guildUser.update({\n      where: {\n        guildId_userId: {\n          guildId: message.guildId,\n          userId: message.author.id,\n        },\n      },\n      data: {\n        firstMessageId: interaction.targetId,\n      },\n    });\n    interaction.followUp({\n      content: `First message for ${userMention(\n        message.author.id,\n      )} has been set.`,\n      ephemeral: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingsChanged.html":{"url":"classes/SettingsChanged.html","title":"class - SettingsChanged","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingsChanged\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/events/settings-role-id-changed.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventType\n                            \n                            \n                                guildId\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, value: string | number | boolean, eventType)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string | number | boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventType\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventType\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { Settings } from '@prisma/client';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SettingsChanged implements EventToLog {\n  guildId: string;\n  value: string | number | boolean;\n  eventType: keyof Settings;\n\n  constructor(\n    guildId: string,\n    value: string | number | boolean,\n    eventType: keyof Settings,\n  ) {\n    this.guildId = guildId;\n    this.value = value;\n    this.eventType = eventType;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`SettingsChanged: ${this.eventType} changed to ${this.value}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingsDto.html":{"url":"classes/SettingsDto.html","title":"class - SettingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/dto/settings.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                adminRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                introChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveMessageFormat\n                            \n                            \n                                    \n                                    \n                                    \n                                modChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                modRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                openIntroChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                prefix\n                            \n                            \n                                    \n                                    \n                                    \n                                unverifiedMemberRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                verifiedMemberRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                welcomeMessageFormat\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        adminRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        introChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveMessageFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        modChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        modRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        openIntroChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        unverifiedMemberRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        verifiedMemberRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        welcomeMessageFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Settings } from '@prisma/client';\nimport { IsOptional, IsString } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class SettingsDto implements Omit {\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  prefix: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  welcomeMessageFormat: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  openIntroChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  introChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  leaveMessageFormat: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  leaveChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  unverifiedMemberRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  verifiedMemberRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  modRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  adminRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  modChannelId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlowmodeDisabled.html":{"url":"classes/SlowmodeDisabled.html","title":"class - SlowmodeDisabled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlowmodeDisabled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                enabled\n                            \n                            \n                                guildId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, enabled: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        enabled\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlowmodeEnabled.html":{"url":"classes/SlowmodeEnabled.html","title":"class - SlowmodeEnabled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlowmodeEnabled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                enabled\n                            \n                            \n                                guildId\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, enabled: boolean, seconds: number)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        enabled\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seconds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpecialCommand.html":{"url":"classes/SpecialCommand.html","title":"class - SpecialCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpecialCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/special.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cakes\n                            \n                            \n                                coffees\n                            \n                            \n                                possibleAnswers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                chooseRandomCoffee\n                            \n                            \n                                templateAnswer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cakes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'Käsekuchen',\n    'Apfelkuchen',\n    'Bienenstich',\n    'Streuselkuchen',\n    'Kuchen',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coffees\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'Americano',\n    'Cappuccino',\n    'Diplomatenkaffee',\n    'Einspänner',\n    'Eiskaffee',\n    'Espresso',\n    'Kaffee Konsul',\n    'Latte Macchiato',\n    'Mokka',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        possibleAnswers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    '*Y schiebt X einen Z rüber!*',\n    '*Y schenkt X einen ganzen Z!*',\n    '*Y gibt X ein headpat :3*',\n    '*Y gibt X eine Umarmung :3*',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        chooseRandomCoffee\n                        \n                    \n                \n            \n            \n                \n                        \n                    chooseRandomCoffee(interaction: CommandInteraction, dto: UserToUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/special.command.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserToUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateAnswer\n                        \n                    \n                \n            \n            \n                \ntemplateAnswer(category: string, fromUserId: string, toUserId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/commands/special.command.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fromUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                toUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, IA, InteractionEvent } from '@discord-nestjs/core';\nimport { CommandInteraction, userMention } from 'discord.js';\nimport { UserToUser } from '../dto/user-to-user.dto';\nimport { SlashCommandPipe } from '@discord-nestjs/common';\nimport { UseFilters, ValidationPipe } from '@nestjs/common';\nimport { CommandValidationFilter } from '../filters/command-validation';\n\n@Command({\n  name: 'special',\n  description:\n    'Give a user you like a coffee, a cake or a headpat or maybe just a hug?',\n  dmPermission: false,\n})\n@UseFilters(CommandValidationFilter)\nexport class SpecialCommand {\n  coffees = [\n    'Americano',\n    'Cappuccino',\n    'Diplomatenkaffee',\n    'Einspänner',\n    'Eiskaffee',\n    'Espresso',\n    'Kaffee Konsul',\n    'Latte Macchiato',\n    'Mokka',\n  ];\n  possibleAnswers = [\n    '*Y schiebt X einen Z rüber!*',\n    '*Y schenkt X einen ganzen Z!*',\n    '*Y gibt X ein headpat :3*',\n    '*Y gibt X eine Umarmung :3*',\n  ];\n  cakes = [\n    'Käsekuchen',\n    'Apfelkuchen',\n    'Bienenstich',\n    'Streuselkuchen',\n    'Kuchen',\n  ];\n  @Handler()\n  async chooseRandomCoffee(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: UserToUser,\n  ): Promise {\n    const toUser = await interaction.guild.members.fetch(dto.user);\n    return this.templateAnswer(dto.category, interaction.user.id, toUser.id);\n  }\n\n  templateAnswer(category: string, fromUserId: string, toUserId: string) {\n    console.log(category);\n    console.log(fromUserId);\n    console.log(toUserId);\n\n    switch (category) {\n      case 'coffee':\n        return this.possibleAnswers[0]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId))\n          .replace(\n            'Z',\n            this.coffees[Math.ceil(Math.random() * this.coffees.length - 1)],\n          );\n      case 'cake':\n        return this.possibleAnswers[1]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId))\n          .replace(\n            'Z',\n            this.cakes[Math.ceil(Math.random() * this.cakes.length - 1)],\n          );\n      case 'headpat':\n        return this.possibleAnswers[2]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId));\n      case 'hug':\n        return this.possibleAnswers[3]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId));\n      default:\n        break;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nGuildRestrictedChannelService->TasksModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nTasksModule -->\n\nGuildService->TasksModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nTasksModule -->\n\nGuildSettingsService->TasksModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nTasksModule -->\n\nGuildUserService->TasksModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nTasksModule -->\n\nPrismaService->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The Tasks module manages the creation/execution of jobs that run periodically\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { GuildRestrictedChannelService } from 'src/guild/guild-restricted-channel/guild-restricted-channel.service';\n\n/**\n * The Tasks module manages the creation/execution of jobs that run periodically\n */\n@Module({\n  providers: [\n    TasksService,\n    GuildUserService,\n    GuildService,\n    PrismaService,\n    GuildSettingsService,\n    GuildRestrictedChannelService,\n  ],\n  imports: [DiscordModule.forFeature()],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The tasks service is responsible for managing jobs/tasks that run periodically.\nIt also exposes a way to create tasks but NOT deleting them.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                checkActiveUsers\n                            \n                            \n                                    \n                                    Async\n                                checkTimeouts\n                            \n                            \n                                    \n                                    Async\n                                cleanWfpMembers\n                            \n                            \n                                    \n                                    Async\n                                closeStaleTickets\n                            \n                            \n                                createDynamicScheduledJob\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildService: GuildService, userService: GuildUserService, client: Client, eventEmitter: EventEmitter2, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkActiveUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkActiveUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'checkActiveUsers', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Runs at 00:00:00 every day and\nupdates the written messages count for all users, of all guilds the bot is in, that have the MEMBER rank\nand then updates their permissions on specific channels.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkTimeouts\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeouts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('*/5 * * * *', {name: 'timeouts', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Runs every 5 minutes and checks if members of each given guild the bot is in are still timeouted\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        cleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanWfpMembers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'cleanWfpMembers', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Runs everyday at midnight and kicks members that are longer than 14 days on the server and haven't checked in.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        closeStaleTickets\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeStaleTickets()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'closeStaleTickets', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createDynamicScheduledJob\n                        \n                    \n                \n            \n            \n                \ncreateDynamicScheduledJob(jobOptions: CronJobParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:41\n                        \n                    \n\n\n            \n                \n                        A utility function to create cronjobs on the fly from cronjob parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jobOptions\n                                            \n                                                        CronJobParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    CronJob parameters such as the time. onComplete etc\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                a new cronjob\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { GuildUser } from '@prisma/client';\nimport {\n  BaseGuildTextChannel,\n  Client,\n  Colors,\n  EmbedBuilder,\n  GuildTextBasedChannel,\n  userMention,\n} from 'discord.js';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { UserTimeOutEvent } from 'src/guild/moderation/events/user.events';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { CronJob, CronJobParams } from 'cron';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\n\nconst logger = new Logger('TaskService');\n\n/**\n * The tasks service is responsible for managing jobs/tasks that run periodically.\n * It also exposes a way to create tasks but NOT deleting them.\n */\n@Injectable()\nexport class TasksService {\n  constructor(\n    @Inject(GuildService) private guildService: GuildService,\n    @Inject(GuildUserService) private userService: GuildUserService,\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n    @Inject(PrismaService) private readonly prismaService: PrismaService,\n  ) {}\n  /**\n   * A utility function to create cronjobs on the fly from cronjob parameters\n   * @param jobOptions CronJob parameters such as the time. onComplete etc\n   * @returns a new cronjob\n   */\n  createDynamicScheduledJob(jobOptions: CronJobParams) {\n    return new CronJob(\n      jobOptions.cronTime,\n      jobOptions.onTick,\n      jobOptions.onComplete,\n      jobOptions.start,\n      jobOptions.timeZone,\n    );\n  }\n\n  /**\n   * Runs at 00:00:00 every day and\n   * updates the written messages count for all users, of all guilds the bot is in, that have the MEMBER rank\n   * and then updates their permissions on specific channels.\n   */\n  @Cron('0 0 * * *', {\n    name: 'checkActiveUsers',\n    timeZone: 'Europe/Berlin',\n  })\n  async checkActiveUsers() {\n    this.client.guilds.cache.forEach(async (guild) => {\n      (await this.userService.findAll(guild.id)).forEach(\n        async (user: GuildUser) => {\n          if (user.rank != 'MEMBER') return;\n          logger.log(`Checking user ${user.userId} for activity...`);\n          this.userService.updateMessageCountBucket(user.userId, user.guildId);\n          this.guildService.updateChannelPermissions(user);\n        },\n      );\n    });\n  }\n\n  /**\n   * Runs every 5 minutes and checks if members of each given guild the bot is in are still timeouted\n   */\n  @Cron('*/5 * * * *', {\n    name: 'timeouts',\n    timeZone: 'Europe/Berlin',\n  })\n  async checkTimeouts() {\n    this.client.guilds.cache.forEach(async (guild) => {\n      (await this.userService.findAll(guild.id)).forEach(\n        async (dbUser: GuildUser) => {\n          try {\n            const member = await this.client.guilds.cache\n              .get(guild.id)\n              .members.fetch(dbUser.userId.toString());\n            if (member.communicationDisabledUntilTimestamp == null) {\n              return;\n            } else if (\n              member.communicationDisabledUntilTimestamp > Date.now()\n            ) {\n              logger.log(\n                `User ${dbUser.userId} is still timed out, until ${new Date(\n                  member.communicationDisabledUntilTimestamp,\n                ).toLocaleString()}`,\n              );\n              return;\n            } else if (\n              member.communicationDisabledUntilTimestamp  userMention(member.id))\n            .join('\\n'),\n        },\n        {\n          name: \"Couldn't kick members count\",\n          value: outCome['unkickableMembers'].length.toString(),\n        },\n        {\n          name: \"Couldn't kick members names\",\n          value: outCome['unkickableMembers']\n            .map((member) => userMention(member.id))\n            .join('\\n'),\n        },\n      ]);\n    await logChannel.send({\n      embeds: [embed],\n    });\n  }\n\n  @Cron('0 0 * * *', {\n    name: 'closeStaleTickets',\n    timeZone: 'Europe/Berlin',\n  })\n  async closeStaleTickets() {\n    const tickets = await this.prismaService.tickets.findMany();\n    tickets.forEach(async (ticket) => {\n      try {\n        const channel = (await (\n          await this.client.guilds.fetch(ticket.guildId)\n        ).channels.fetch(ticket.ticketId)) as GuildTextBasedChannel;\n        if (\n          new Date(new Date().setDate(new Date().getDate() - 7)) >\n          new Date(channel.lastMessage.createdTimestamp)\n        ) {\n          try {\n            await (channel as BaseGuildTextChannel).permissionOverwrites.delete(\n              ticket.userId,\n            );\n            await this.prismaService.tickets.update({\n              where: {\n                ticketId: ticket.ticketId,\n              },\n              data: {\n                closed: true,\n              },\n            });\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketSystemSetupCommand.html":{"url":"classes/TicketSystemSetupCommand.html","title":"class - TicketSystemSetupCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketSystemSetupCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/ticket-system.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onTicketsystemSetupCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/ticket-system.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTicketsystemSetupCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTicketsystemSetupCommand(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/ticket-system.command.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  Client,\n  CommandInteraction,\n} from 'discord.js';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Command({\n  name: 'ticketsystem-setup',\n  description: 'Sends a message and attaches the create Ticket button.',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class TicketSystemSetupCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n\n  @Handler()\n  async onTicketsystemSetupCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n  ) {\n    try {\n      await interaction.channel.send({\n        content:\n          'Du hast ein Anliegen welches du mit den Mods besprechen möchtest? Dann erstelle ein Ticket!',\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n      await interaction.reply({\n        ephemeral: true,\n        content: 'Done!',\n      });\n    } catch {\n      interaction.reply({\n        ephemeral: true,\n        content: 'Could not send a message in this channel!',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeOutCommand.html":{"url":"classes/TimeOutCommand.html","title":"class - TimeOutCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeOutCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/timeout.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                onTimeOutCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/timeout.command.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onTimeOutCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTimeOutCommand(interaction: CommandInteraction, dto: UserTimeOutDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()@UseFilters(CommandValidationFilter)\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/timeout.command.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserTimeOutDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  Client,\n  CommandInteraction,\n  EmbedBuilder,\n  userMention,\n} from 'discord.js';\nimport UserTimeOutDto from '../dto/user-timeout.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  UserSendDMFailedEvent,\n  UserTimeOutEvent,\n  UserTimeOutFailedEvent,\n} from 'src/guild/moderation/events/user.events';\nimport { UseFilters } from '@nestjs/common';\nimport { CommandValidationFilter } from '../filters/command-validation';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Command({\n  name: 'timeout',\n  description: 'Timeouts a user',\n  defaultMemberPermissions: ['ModerateMembers'],\n  descriptionLocalizations: {\n    'en-US': 'Timeouts a user',\n    de: 'Nutzer:in muten (Timeout)',\n  },\n  dmPermission: false,\n})\nexport class TimeOutCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    private readonly eventEmitter: EventEmitter2,\n  ) {}\n  @Handler()\n  @UseFilters(CommandValidationFilter)\n  async onTimeOutCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: UserTimeOutDto,\n  ) {\n    const date = new Date(dto.duration).getTime();\n    const user = await interaction.guild.members.fetch(dto.user);\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const error: Array = [];\n    try {\n      await user.timeout(date - Date.now(), dto.reason);\n    } catch (err) {\n      error.push(err);\n      this.eventEmitter.emit(\n        'user.timeout.failed',\n        new UserTimeOutFailedEvent(\n          user.id,\n          interaction.guildId,\n          dto.reason,\n          date,\n          err,\n        ),\n      );\n    }\n    try {\n      if (error.length) throw new Error('Timeout failed, therefore no DM');\n      await user.send({\n        content: `Du hast einen Timeout bis ${new Date(\n          dto.duration,\n        ).toString()}, bei Fragen wende dich an die Mods. \nGrund: ${dto.reason}`,\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n    } catch (err) {\n      error.push(err);\n      this.eventEmitter.emit(\n        'user.send.failed',\n        new UserSendDMFailedEvent(user.id, interaction.guildId, err),\n      );\n    }\n    const embed = new EmbedBuilder()\n      .setAuthor({\n        name: this.client.user.username,\n        iconURL: this.client.user.avatarURL(),\n      })\n      .setTitle(`Timeout user ${user.user.username}`)\n      .setDescription(\n        error.length === 0\n          ? `Timeouted user ${userMention(user.id)} until ${new Date(\n              dto.duration,\n            ).toLocaleString()} and sent them a DM.`\n          : `Failed to timeout user ${userMention(user.id)} until ${new Date(\n              dto.duration,\n            ).toLocaleString()}, check below for more information.`,\n      );\n    if (error.length) {\n      embed.addFields(\n        error.map((e) => {\n          if (!(e instanceof Error)) return;\n          return {\n            name: e.name,\n            value: e.message,\n          };\n        }),\n      );\n    }\n    await interaction.followUp({\n      embeds: [embed],\n      ephemeral: true,\n    });\n    this.eventEmitter.emit(\n      'user.timeout.created',\n      new UserTimeOutEvent(user.id, interaction.guildId, dto.reason, date),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnverifyByRoleCommand.html":{"url":"classes/UnverifyByRoleCommand.html","title":"class - UnverifyByRoleCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnverifyByRoleCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/unverify-by-role.conmand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onUnverifybyRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/unverify-by-role.conmand.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onUnverifybyRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    onUnverifybyRole(baseInteraction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/unverify-by-role.conmand.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                baseInteraction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n} from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { Client, CommandInteraction } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'enter-lockdown',\n  dmPermission: false,\n})\nexport class UnverifyByRoleCommand {\n  constructor(\n    @InjectDiscordClient() private client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  @Handler()\n  onUnverifybyRole(@IA() baseInteraction: CommandInteraction) {\n    this.client.guilds.fetch(baseInteraction.guildId).then((guild) =>\n      guild.members.fetch().then((members) =>\n        members.forEach(async (member) => {\n          if (\n            member.roles.cache.has('1011563978956226560') ||\n            member.roles.cache.has('1011513775054143632') ||\n            guild.ownerId == member.id\n          )\n            return;\n          const roles = [];\n          member.roles.cache.forEach((role) => roles.push({ id: role.id }));\n          this.database.lockdownRoleBackup\n            .create({\n              data: {\n                guildId: member.guild.id,\n                userId: member.id,\n                roles,\n              },\n            })\n            .then(async (data) =>\n              (data.roles as Prisma.JsonArray).forEach(\n                async (role: { id: string }) =>\n                  await member.roles.remove(role.id),\n              ),\n            );\n          if (!member.roles.cache.has('1226585753253843014')) {\n            await member.roles.add('1121823930085285938');\n          } else {\n            //await member.roles.add('')\n          }\n        }),\n      ),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserBanEvent.html":{"url":"classes/UserBanEvent.html","title":"class - UserBanEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserBanEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                banUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                kickUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                purgeUserFromGuild\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                timeoutUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        banUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    banUser(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/ban')@ApiOperation({summary: 'Ban a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully banned'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUser(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get a user for a guild'})@ApiResponse({status: 200, type: DiscordUser, schema: userResponseSchema, description: 'User was successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUsers(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all users for a guild'})@ApiResponse({status: 200, schema: usersResponseSchema, type: DiscordGuildMember, description: 'Users were successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        kickUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    kickUser(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/kick')@ApiOperation({summary: 'Kick a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully kicked'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        purgeUserFromGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    purgeUserFromGuild(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/purge')@ApiOperation({summary: 'Purge a user from a guild VERY EXPENSIVEEEEEE, USE WITH CAUTION'})@ApiResponse({status: 200, description: 'User was successfully purged'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        timeoutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    timeoutUser(guildId: string, userId: string, duration: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/timeout/:duration')@ApiOperation({summary: 'Timeout a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully timed outed'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                duration\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  NotFoundException,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { ChannelType, Client, User } from 'discord.js';\nimport {\n  DiscordUser,\n  userResponseSchema,\n  usersResponseSchema,\n} from '../dto/user';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\nimport { SendDirectMessageToUserException } from 'src/util/exception/send-direct-message-to-user-exception';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  UserBanEvent,\n  UserKickEvent,\n  UserPurgeEvent,\n  UserTimeOutEvent,\n} from '../events/user.events';\nimport { DiscordGuildMember } from '../dto/guild-member';\nimport { plainToInstance } from '../../../util/functions/plain-to-instance';\nimport { Request } from 'express';\nimport { GuildUser, Rank } from '@prisma/client';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller('/user')\n@ApiBearerAuth()\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class UserController {\n  logger = new Logger(UserController.name);\n\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all users for a guild' })\n  @ApiResponse({\n    status: 200,\n    schema: usersResponseSchema,\n    type: DiscordGuildMember,\n    description: 'Users were successfully fetched',\n  })\n  async getGuildUsers(\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const members = await guild.members.fetch();\n    this.logger.debug(`Found ${members.size} members in guild ${guildId}`);\n    return members.map((member) =>\n      plainToInstance(DiscordGuildMember, {\n        avatarUrl: member.displayAvatarURL(),\n        guildId: member.guild.id,\n        bot: member.user.bot,\n        userId: member.user.id,\n        communicationDisabledUntil:\n          member?.communicationDisabledUntil?.toJSON() ?? undefined,\n        displayName: member.displayName ?? member.user.globalName,\n        username: member.user.username,\n      }),\n    );\n  }\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get a user for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: DiscordUser,\n    schema: userResponseSchema,\n    description: 'User was successfully fetched',\n  })\n  async getGuildUser(\n    @Req() request: Request & { user: GuildUser },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(request.user.guildId);\n    const member = await guild.members.fetch(request.user.userId);\n    this.logger.log(\n      `Found member ${member.user.username} in guild ${request.user.guildId}`,\n    );\n    return member.user;\n  }\n\n  @Post(':userId/ban')\n  @ApiOperation({ summary: 'Ban a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully banned',\n  })\n  async banUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    await guild.members.ban(userId);\n    this.logger.log(`Banned user ${userId} from guild ${guildId}`);\n    await this.eventEmitter.emitAsync(\n      'user.ban',\n      new UserBanEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n\n  @Post(':userId/kick')\n  @ApiOperation({ summary: 'Kick a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully kicked',\n  })\n  async kickUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    await guild.members.kick(userId);\n    this.logger.log(`Kicked user ${userId} from guild ${guildId}`);\n    await this.eventEmitter.emitAsync(\n      'user.kick',\n      new UserKickEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n\n  @Post(':userId/timeout/:duration')\n  @ApiOperation({ summary: 'Timeout a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully timed outed',\n  })\n  async timeoutUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n    @Param('duration') duration: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const member = await guild.members.fetch(userId);\n    await member.timeout(parseInt(duration));\n    await member\n      .send(\n        `Du hast einen Timeout bis ${new Date(\n          new Date().getTime() + duration,\n        ).toISOString()}, bei Fragen wende dich an die Mods.`,\n      )\n      .catch(() => {\n        throw new SendDirectMessageToUserException(guildId, userId);\n      });\n    await this.eventEmitter.emitAsync(\n      'user.timeout.created',\n      new UserTimeOutEvent(\n        userId,\n        guildId,\n        'TODO: NOT IMPLEMENTED',\n        new Date(new Date().getTime() + duration).getMilliseconds(),\n      ),\n    );\n    this.logger.log(\n      `Timed out user ${userId} from guild ${guildId} for ${duration}`,\n    );\n  }\n\n  @Post(':userId/purge')\n  @ApiOperation({\n    summary: 'Purge a user from a guild VERY EXPENSIVEEEEEE, USE WITH CAUTION',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully purged',\n  })\n  async purgeUserFromGuild(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(`Purging user ${userId} from guild ${guildId}`);\n    if (guild === undefined) {\n      throw new NotFoundException('Guild not found');\n    }\n    guild.channels.fetch();\n    guild.channels.cache.forEach(async (channel) => {\n      try {\n        if (\n          channel.type === ChannelType.GuildText ||\n          channel.type === ChannelType.PublicThread ||\n          channel.type === ChannelType.PrivateThread\n        ) {\n          this.logger.log(`Purging user ${userId} from channel ${channel.id}`);\n          await cleanTextChannel(\n            channel,\n            () => false,\n            (msg) => msg.author.id === userId,\n            this.logger,\n          );\n          // sleep for 500ms to avoid rate limit\n          await new Promise((resolve) => setTimeout(resolve, 500));\n        }\n      } catch {\n        this.logger.error(\n          `Failed to purge user ${userId} from channel ${channel.id}`,\n        );\n      }\n    });\n    await this.eventEmitter.emitAsync(\n      'user.purge',\n      new UserPurgeEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInfoUiCommand.html":{"url":"classes/UserInfoUiCommand.html","title":"class - UserInfoUiCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInfoUiCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/user-info-ui.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getMessage\n                            \n                            \n                                    \n                                    Async\n                                onShowInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/user-info-ui.command.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _getMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getMessage(msgId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/commands/user-info-ui.command.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                msgId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onShowInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    onShowInfo(interaction: ContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/user-info-ui.command.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ApplicationCommandType,\n  Client,\n  ContextMenuCommandInteraction,\n  EmbedBuilder,\n  Message,\n  userMention,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'Show user info',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.User,\n})\nexport class UserInfoUiCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService)\n    private prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onShowInfo(interaction: ContextMenuCommandInteraction) {\n    if (!interaction.isContextMenuCommand()) return;\n    await interaction.deferReply({ ephemeral: true });\n    const guildUser = await this.prismaService.guildUser.findUnique({\n      where: {\n        guildId_userId: {\n          guildId: interaction.guildId,\n          userId: interaction.targetId,\n        },\n      },\n    });\n    if (!guildUser) {\n      return interaction.followUp({\n        content: 'User not found in database.',\n        ephemeral: true,\n      });\n    }\n    const firstMessageId = guildUser.firstMessageId;\n    const message = await this._getMessage(firstMessageId, interaction.guildId);\n    const numMessages = await this.prismaService.messages.count({\n      where: { userId: interaction.targetId, guildId: interaction.guildId },\n    });\n    const numReactions = await this.prismaService.auditLog.count({\n      where: {\n        invokerId: interaction.targetId,\n        guildId: interaction.guildId,\n        action: 'REACTION_ADDED',\n      },\n    });\n\n    const embed = new EmbedBuilder()\n      .setTitle('User Info')\n      .setDescription(`User: ${userMention(interaction.targetId)}`)\n      .addFields([\n        {\n          name: 'Link to introduction message',\n          value: message\n            ? `$[Click here](${message.url})`\n            : 'No message found in the database',\n        },\n        {\n          name: 'Number of messages sent',\n          value: numMessages.toString(),\n        },\n        {\n          name: 'Reactions added',\n          value: numReactions.toString(),\n        },\n      ]);\n    return interaction.followUp({\n      embeds: [embed],\n      ephemeral: true,\n    });\n  }\n  async _getMessage(msgId: string, guildId: string) {\n    if (!msgId) return null;\n    let message: Message = null;\n    await this.client.guilds.fetch(guildId).then(async (guild) => {\n      (await guild.channels.fetch()).forEach(async (channel) => {\n        if (channel.isTextBased()) {\n          try {\n            message = await channel.messages.fetch(msgId);\n          } catch {\n            return;\n          }\n        }\n      });\n    });\n    return message;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserKickEvent.html":{"url":"classes/UserKickEvent.html","title":"class - UserKickEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserKickEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nSelfService \n\nSelfService \n\n\n\nUserModule\n\nUserModule\n\nSelfService  -->\n\nUserModule->SelfService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nUserModule -->\n\nSelfService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The user module, not to be confused the guildUser module,\nis used to manage the bot local user of a discord user.\nSee user.service.ts and self.controller.ts for more info\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            SelfService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SelfController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SelfService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { SelfController } from './self.controller';\nimport { SelfService } from './self.service';\n\n/**\n * The user module, not to be confused the guildUser module,\n * is used to manage the bot local user of a discord user.\n * See user.service.ts and self.controller.ts for more info\n */\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [PrismaService, SelfService],\n  controllers: [SelfController],\n  exports: [SelfService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPurgeEvent.html":{"url":"classes/UserPurgeEvent.html","title":"class - UserPurgeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPurgeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:92\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:90\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSendDMFailedEvent.html":{"url":"classes/UserSendDMFailedEvent.html","title":"class - UserSendDMFailedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSendDMFailedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                guildId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, error: Error)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:110\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:108\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutDto.html":{"url":"classes/UserTimeOutDto.html","title":"class - UserTimeOutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user-timeout.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                duration\n                            \n                            \n                                    \n                                reason\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Param({description: 'The duration of the timeout', descriptionLocalizations: undefined, type: undefined, required: true})@IsDateString({}, {message: 'The input must be in format: Xd, Xh, Xm or XdXh or XhXm or XdXm or XdXhXm. Where X is a number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The reason for the timeout', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user to timeout', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { Transform } from 'class-transformer';\nimport { IsDateString } from 'class-validator';\nimport { User } from 'discord.js';\n\nexport default class UserTimeOutDto {\n  @Param({\n    description: 'The user to timeout',\n    descriptionLocalizations: {\n      'en-US': 'The user to timeout',\n      de: 'Account der gemutet werden soll',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n\n  @Param({\n    description: 'The reason for the timeout',\n    descriptionLocalizations: {\n      'en-US': 'The reason for the timeout',\n      de: 'Grund für den Timeout',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  reason: string;\n\n  // Hacky way to both transform the value and validate it, in one step :D\n  @Transform(({ value }) => {\n    if (\n      !/\\b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/.test(\n        value.trim(),\n      )\n    )\n      return null;\n    let _days = '0';\n    let _hours = '0';\n    let _minutes = '0';\n    (value as string)\n      .match(\n        /\\b(\\d{1,}[d])(\\d{1,}[h])\\b|\\b(\\d{1,}[h])(\\d{1,}[m])\\b|\\b(\\d{1,}[d])(\\d{1,}[m])\\b|\\b(\\d{1,}[dhm])\\b|\\b(\\d{1,}[d])(\\d{1,}[h])(\\d{1,}[m])/g,\n      )\n      .forEach((match) => {\n        if (match.endsWith('d')) _days = match.replace('d', '');\n        else if (match.endsWith('h')) _hours = match.replace('h', '');\n        else if (match.endsWith('m')) _minutes = match.replace('m', '');\n      });\n    const days = parseInt(_days) || 0;\n    const hours = parseInt(_hours) || 0;\n    const minutes = parseInt(_minutes) || 0;\n    return new Date(\n      Date.now() + ((days * 24 + hours) * 60 + minutes) * 60 * 1000,\n    ).toISOString();\n  })\n  @Param({\n    description: 'The duration of the timeout',\n    descriptionLocalizations: {\n      'en-US': 'The duration of the timeout',\n      de: 'Dauer des Timeouts',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsDateString(\n    {},\n    {\n      message:\n        'The input must be in format: Xd, Xh, Xm or XdXh or XhXm or XdXm or XdXhXm. Where X is a number',\n    },\n  )\n  duration: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutEvent.html":{"url":"classes/UserTimeOutEvent.html","title":"class - UserTimeOutEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string, duration: number)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:37\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutFailedEvent.html":{"url":"classes/UserTimeOutFailedEvent.html","title":"class - UserTimeOutFailedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutFailedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                error\n                            \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string, duration: number, error: Error)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:62\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserToUser.html":{"url":"classes/UserToUser.html","title":"class - UserToUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserToUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user-to-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Choice(CommandToExecute)@Param({description: 'Was möchtest du einer Person geben?', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-to-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user you want to give something', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-to-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Choice, Param, ParamType } from '@discord-nestjs/core';\nimport { ChoiceOptions } from '@discord-nestjs/core/dist/decorators/option/choice/choice-options';\nimport { User } from 'discord.js';\n\nconst CommandToExecute: ChoiceOptions = {\n  'Einer Person einen Kaffee geben': 'coffee',\n  'Einer Person einen Kuchen geben': 'cake',\n  'Einer Person ein Headpat geben': 'headpat',\n  'Eine Person umarmen': 'hug',\n};\nexport class UserToUser {\n  @Param({\n    description: 'The user you want to give something',\n    descriptionLocalizations: {\n      'en-US': 'The user you want to give something',\n      de: 'Person welcher du etwas geben willst',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n\n  @Choice(CommandToExecute)\n  @Param({\n    description: 'Was möchtest du einer Person geben?',\n    required: true,\n  })\n  category: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.controller.ts\n            \n            controller\n            AuditLogController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.events.ts\n            \n            injectable\n            AuditEvents\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.service.ts\n            \n            injectable\n            AuditLogService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auditlog/dto/audit-log-filter.dto.ts\n            \n            class\n            AuditLogFilterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auditlog/dto/log-entry.dto.ts\n            \n            class\n            LogEntryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/guards/refresh-auth.guard.ts\n            \n            injectable\n            RefreshJwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.controller.ts\n            \n            controller\n            JwtAuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.service.ts\n            \n            injectable\n            JwtAuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.strategy.ts\n            \n            injectable\n            JwtAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/refresh-token.strategy.ts\n            \n            injectable\n            RefreshJwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/add-role.command.ts\n            \n            class\n            AddRoleCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/clean-wfp.command.ts\n            \n            class\n            CleanWfpMember\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/community-question.command.ts\n            \n            class\n            CommunityQuestionCommand\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bot/commands/init-guild.command.ts\n            \n            class\n            initGuildCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/mod-anouncement.command.ts\n            \n            class\n            MumVoiceCommand\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/commands/ping.command.ts\n            \n            class\n            PingCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/special.command.ts\n            \n            class\n            SpecialCommand\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/bot/commands/ticket-system.command.ts\n            \n            class\n            TicketSystemSetupCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/timeout.command.ts\n            \n            class\n            TimeOutCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/unverify-by-role.conmand.ts\n            \n            class\n            UnverifyByRoleCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/user-info-ui.command.ts\n            \n            class\n            UserInfoUiCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/user-set-first-message-ui.command.ts\n            \n            class\n            SetFirstMessageUICommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BOT_EVENT_HANDLER_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BOT_EVENT_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BotEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/dto/commmunity-question.dto.ts\n            \n            class\n            CommunityQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/dto/community-question.form.dto.ts\n            \n            class\n            CommunityQuestionFormDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/dto/mod-anouncement.dto.ts\n            \n            class\n            ModAnnouncementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/dto/user-timeout.dto.ts\n            \n            class\n            UserTimeOutDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/dto/user-to-user.dto.ts\n            \n            class\n            UserToUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/bot/dto/user-to-user.dto.ts\n            \n            variable\n            CommandToExecute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/explorers/event.explorer.ts\n            \n            class\n            Explorer\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bot/filters/command-validation.ts\n            \n            class\n            CommandValidationFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/is-modal-interaction.guard.ts\n            \n            guard\n            IsModalInteractionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/member-is-mod-or-higher.guard.ts\n            \n            guard\n            ReactedMemberIsModOrHigherGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/guards/message-from-user.guard.ts\n            \n            guard\n            MessageFromUserGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bot/guards/message-in-channel.guard.ts\n            \n            variable\n            ChannelIdGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/guards/message-is-dm.guard.ts\n            \n            guard\n            MessageIsDmGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bot/guards/reaction-emote.guard.ts\n            \n            variable\n            ReactionEmoteGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/guards/reaction-in-channel.guard.ts\n            \n            variable\n            ReactionChannelIdGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n            interface\n            DiscordExecutionContext\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n            guard\n            IsUserUnlockedGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/interfaces/bot-event.interface.ts\n            \n            interface\n            BotEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/events/guild-members/index.ts\n            \n            injectable\n            GuildMemberEvents\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/guild/events/interaction-create/mod-request-menu/index.ts\n            \n            injectable\n            ModRequestFlow\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/events/message-create/dm-message/index.ts\n            \n            injectable\n            DmMessageHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/events/message-create/guild-message/index.ts\n            \n            injectable\n            GuildMessageHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts\n            \n            class\n            GuildAutoDeleteChannelDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts\n            \n            controller\n            GuildAutoDeleteChannelController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts\n            \n            injectable\n            GuildAutoDeleteChannelService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-restricted-channel/guild-restricted-channel.controller.ts\n            \n            controller\n            GuildRestrictedChannelController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/guild-restricted-channel/guild-restricted-channel.service.ts\n            \n            injectable\n            GuildRestrictedChannelService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/dto/restricted-channels.dto.ts\n            \n            class\n            RestrictedChannelDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/dto/settings.dto.ts\n            \n            class\n            SettingsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/events/settings-role-id-changed.event.ts\n            \n            class\n            SettingsChanged\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/guild-settings.controller.ts\n            \n            controller\n            GuildSettingsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/guild-settings.service.ts\n            \n            injectable\n            GuildSettingsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/guild/guild-user/dto/self.dto.ts\n            \n            class\n            SelfDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-user/guild-user.controller.ts\n            \n            controller\n            GuildUserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/guild-user/guild-user.service.ts\n            \n            injectable\n            GuildUserService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/guild/guild.controller.ts\n            \n            controller\n            GuildController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild.service.ts\n            \n            injectable\n            GuildService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/guild/moderation/channel/channel.controller.ts\n            \n            controller\n            ChannelController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            Channel\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            GuildChannelEditOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            PermissionOverwrite\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/guild-member.ts\n            \n            class\n            DiscordGuildMember\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/role.ts\n            \n            class\n            EditRoleData\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/role.ts\n            \n            class\n            RoleResponse\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/role.ts\n            \n            variable\n            roleResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/role.ts\n            \n            variable\n            rolesResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/user.ts\n            \n            class\n            DiscordUser\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/user.ts\n            \n            variable\n            userResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/user.ts\n            \n            variable\n            usersResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            ChannelCleaned\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            SlowmodeDisabled\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            SlowmodeEnabled\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserBanEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserKickEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserPurgeEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserSendDMFailedEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserTimeOutEvent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserTimeOutFailedEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/guild/moderation/role/role.controller.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                        src/tasks/tasks.service.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/self.controller.ts\n            \n            controller\n            SelfController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/self.dto.ts\n            \n            class\n            Guild\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/self.dto.ts\n            \n            class\n            SelfDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/self.service.ts\n            \n            injectable\n            SelfService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/util/decorators/parameter-not-undefined.ts\n            \n            function\n            DearV8ProtectMeFromParametersWithNoneValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-guild-user.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-guild-user.decorator.ts\n            \n            variable\n            RequestGuildUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-user.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-user.decorator.ts\n            \n            variable\n            RequestUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/requires-rank.decorator.ts\n            \n            variable\n            REQUIRED_RANK_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/requires-rank.decorator.ts\n            \n            variable\n            RequiredRank\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/dto/log.entry.dto.ts\n            \n            class\n            LogEntry\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            variable\n            actions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            variable\n            targetTypes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            type alias\n            Action\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            type alias\n            TargetType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/util/exception/channel-not-text-based-exception.ts\n            \n            class\n            ChannelNotTextBasedException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/channel-not-text-based-exception.ts\n            \n            class\n            ChannelNotTextBasedExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/guild-does-not-exist-exception.ts\n            \n            class\n            GuildDoesNotExistException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/guild-does-not-exist-exception.ts\n            \n            class\n            GuildDoesNotExistExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/send-direct-message-to-user-exception.ts\n            \n            class\n            SendDirectMessageToUserException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/send-direct-message-to-user-exception.ts\n            \n            class\n            SendDirectMessageToUserExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/util/functions/channel-utils.ts\n            \n            function\n            cleanTextChannel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/get-attachtment-type.ts\n            \n            function\n            getAttachmentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            modRequestCategorySelect\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            needHelpButton\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            selectGuildMenu\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            variable\n            modRequestMenuId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            variable\n            needHelpButtonId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/functions/plain-to-instance.ts\n            \n            function\n            plainToInstance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/guards/has-required-rank.guard.ts\n            \n            guard\n            HasRequiredRank\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/util/guards/has-required-rank.guard.ts\n            \n            variable\n            InheritedRanks\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/interfaces/event-to-log.ts\n            \n            interface\n            EventToLog\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @discord-nestjs/common : ^5.2.5\n        \n            @discord-nestjs/core : ^5.3.7\n        \n            @nestjs/axios : ^3.0.3\n        \n            @nestjs/common : ^10.4.2\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.4.2\n        \n            @nestjs/event-emitter : ^2.0.3\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.4.2\n        \n            @nestjs/schedule : ^4.1.1\n        \n            @nestjs/swagger : ^8.0.7\n        \n            @prisma/client : ^6.0.1\n        \n            axios : ^1.7.7\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            discord.js : ^14.16.2\n        \n            jest-mock-extended : ^4.0.0-beta1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-oauth2 : ^1.7.0\n        \n            rambda : 9.4.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.2.0\n        \n            type-fest : ^4.26.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            cleanTextChannel   (src/.../channel-utils.ts)\n                        \n                        \n                            DearV8ProtectMeFromParametersWithNoneValue   (src/.../parameter-not-undefined.ts)\n                        \n                        \n                            getAttachmentType   (src/.../get-attachtment-type.ts)\n                        \n                        \n                            modRequestCategorySelect   (src/.../menu-helper.ts)\n                        \n                        \n                            needHelpButton   (src/.../menu-helper.ts)\n                        \n                        \n                            plainToInstance   (src/.../plain-to-instance.ts)\n                        \n                        \n                            selectGuildMenu   (src/.../menu-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/util/functions/channel-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cleanTextChannel\n                        \n                    \n                \n            \n            \n                \ncleanTextChannel(channel: GuildTextBasedChannel, stopCb, filterCb, logger: Logger)\n                \n            \n\n\n\n\n            \n                \n                        Utility function which deletes messages determined by the filterCb in a given channel until the stopCb returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                        GuildTextBasedChannel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GuildTextBasedChannel -- the channel to clean\n\n                                            \n                                        \n                                        \n                                                stopCb\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the callback which gets called to check if we should stop deleting messages\n\n                                            \n                                        \n                                        \n                                                filterCb\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the callback used to filter out messages to delete\n\n                                            \n                                        \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the logger used to log to the apps log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/util/decorators/parameter-not-undefined.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DearV8ProtectMeFromParametersWithNoneValue\n                        \n                    \n                \n            \n            \n                \nDearV8ProtectMeFromParametersWithNoneValue(target: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ClassDecorator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/util/functions/get-attachtment-type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAttachmentType\n                        \n                    \n                \n            \n            \n                \ngetAttachmentType(contentType: string)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to check which type the contentType is,\nused to check the type of a attachment of a message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contentType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string that contains the content type e.g vide/mp4\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AttachmentType\n\n                        \n                            \n                                AttachmentType enum value for the given type\n\n                            \n                \n            \n        \n    \n    src/util/functions/menu-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modRequestCategorySelect\n                        \n                    \n                \n            \n            \n                \nmodRequestCategorySelect(suffix: string)\n                \n            \n\n\n\n\n            \n                \n                        Returns a SelectMenu for the ModRequest functionality\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                suffix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Some string to suffix the the value of each field\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     StringSelectMenuBuilder\n\n                        \n                            \n                                StringSelectMenuBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        needHelpButton\n                        \n                    \n                \n            \n            \n                \nneedHelpButton()\n                \n            \n\n\n\n\n            \n                \n                        Utility function that returns a button builder named \"Hilfe benötigt\"\n\n\n                        \n                            Returns :     ButtonBuilder\n\n                        \n                            \n                                ButtonBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectGuildMenu\n                        \n                    \n                \n            \n            \n                \nselectGuildMenu(guilds)\n                \n            \n\n\n\n\n            \n                \n                        Utility function that returns a SelectMenu to choose a guild.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                guilds\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of guildIDs\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     StringSelectMenuBuilder\n\n                        \n                            \n                                StringSelectMenuBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    src/util/functions/plain-to-instance.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        plainToInstance\n                        \n                    \n                \n            \n            \n                \nplainToInstance(cls: Constructor, plain: Pick)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to convert a plain object to the given type and return a constructed class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cls\n                                            \n                                                            Constructor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A class type, must be a constructor\n\n                                            \n                                        \n                                        \n                                                plain\n                                            \n                                                        Pick\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A plain object that can be the cls type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                the generic T, type of cls\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/initGuildCommand.html":{"url":"classes/initGuildCommand.html","title":"class - initGuildCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  initGuildCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/init-guild.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onInitGuild\n                            \n                            \n                                    \n                                    Async\n                                onInteraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaServer: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/init-guild.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaServer\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onInitGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInitGuild(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/init-guild.command.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onInteraction\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInteraction(interaction: ChannelSelectMenuInteraction | RoleSelectMenuInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/init-guild.command.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                            ChannelSelectMenuInteraction | RoleSelectMenuInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InteractionEvent, On } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ActionRowBuilder,\n  ChannelSelectMenuBuilder,\n  ChannelSelectMenuInteraction,\n  ChannelType,\n  CommandInteraction,\n  MessageActionRowComponentBuilder,\n  RoleSelectMenuBuilder,\n  RoleSelectMenuInteraction,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'setup-bot',\n  description: 'Shows a modal to set/update the bot settings',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class initGuildCommand {\n  constructor(\n    @Inject(PrismaService) private readonly prismaServer: PrismaService,\n  ) {}\n  @Handler()\n  async onInitGuild(@InteractionEvent() interaction: CommandInteraction) {\n    await interaction.deferReply({ ephemeral: true });\n    const settings = await this.prismaServer.settings.findUnique({\n      where: { guildId: interaction.guildId },\n    });\n    const setOpenIntroChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('openIntroChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.openIntroChannelId))\n          .name ?? 'Select the open intro channel',\n      );\n\n    const setIntroChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('IntroChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.introChannelId))\n          .name ?? 'Select the intro channel',\n      );\n    const setMiscChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('miscChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.leaveChannelId))\n          .name ?? 'Select the miscellaneous channel',\n      );\n    const setModChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('modChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.modChannelId)).name ??\n          'Select the mod channel',\n      );\n    const setModRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('modRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.modRoleId)).name ??\n          'Select the mod role',\n      );\n\n    const setAdminRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('adminRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.adminRoleId)).name ??\n          'Select the admin role',\n      );\n\n    const setVerifiedMemberRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('verifiedMemberRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.verifiedMemberRoleId))\n          .name ?? 'Select the verified member role',\n      );\n\n    const setUnverifiedRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('unverifiedMemberRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.unverifiedMemberRoleId))\n          .name ?? 'Select the unverified member role',\n      );\n\n    const roleRows = [\n      setAdminRoleId,\n      setModRoleId,\n      setUnverifiedRoleId,\n      setVerifiedMemberRoleId,\n    ].map((row) =>\n      new ActionRowBuilder().addComponents(\n        row,\n      ),\n    );\n    const channelRows = [\n      setModChannelId,\n      setIntroChannelId,\n      setOpenIntroChannelId,\n      setMiscChannelId,\n    ].map((row) =>\n      new ActionRowBuilder().addComponents(\n        row,\n      ),\n    );\n\n    Promise.all([\n      interaction.followUp({\n        ephemeral: true,\n        content: 'Configure the role settings below',\n        components: [...roleRows],\n      }),\n      interaction.followUp({\n        ephemeral: true,\n        content: 'Configure the channel settings below',\n        components: [...channelRows],\n      }),\n    ]);\n  }\n\n  @On('interactionCreate')\n  async onInteraction(\n    interaction: ChannelSelectMenuInteraction | RoleSelectMenuInteraction,\n  ) {\n    if (\n      !(\n        interaction.customId != undefined &&\n        interaction.customId.endsWith('-setup') &&\n        interaction.isAnySelectMenu()\n      )\n    )\n      return;\n    await interaction.deferReply({ ephemeral: true });\n    if (interaction.isChannelSelectMenu()) {\n      const guildId = interaction.guildId;\n      const channelId = interaction.values[0];\n      switch (interaction.customId) {\n        case 'openIntroChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { openIntroChannelId: channelId },\n          });\n          break;\n        case 'IntroChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { introChannelId: channelId },\n          });\n          break;\n        case 'miscChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { leaveChannelId: channelId },\n          });\n          break;\n        case 'modChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { modChannelId: channelId },\n          });\n          break;\n      }\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } else if (interaction.isRoleSelectMenu()) {\n      const guildId = interaction.guildId;\n      const roleId = interaction.values[0];\n      switch (interaction.customId) {\n        case 'modRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { modRoleId: roleId },\n          });\n          break;\n        case 'adminRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { adminRoleId: roleId },\n          });\n          break;\n        case 'verifiedMemberRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { verifiedMemberRoleId: roleId },\n          });\n          break;\n        case 'unverifiedMemberRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { unverifiedMemberRoleId: roleId },\n          });\n          break;\n      }\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\nExample :                        Preamble  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\nExample :                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\nExample :a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\nExample :a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\nExample :a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nRemote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\nExample :                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\nExample :\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\nhttps://www.gnu.org/licenses/.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuditLogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BotModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildAutoDeleteChannelModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildRestrictedChannelModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildSettingsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildUserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        JwtAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ModerationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuditLogModule\n\n\n\ncluster_AuditLogModule_exports\n\n\n\ncluster_AuditLogModule_providers\n\n\n\ncluster_BotModule\n\n\n\ncluster_BotModule_providers\n\n\n\ncluster_GuildAutoDeleteChannelModule\n\n\n\ncluster_GuildAutoDeleteChannelModule_exports\n\n\n\ncluster_GuildAutoDeleteChannelModule_providers\n\n\n\ncluster_GuildModule\n\n\n\ncluster_GuildModule_imports\n\n\n\ncluster_GuildModule_exports\n\n\n\ncluster_GuildModule_providers\n\n\n\ncluster_GuildRestrictedChannelModule\n\n\n\ncluster_GuildRestrictedChannelModule_exports\n\n\n\ncluster_GuildSettingsModule\n\n\n\ncluster_GuildSettingsModule_exports\n\n\n\ncluster_GuildUserModule\n\n\n\ncluster_GuildUserModule_exports\n\n\n\ncluster_JwtAuthModule\n\n\n\ncluster_JwtAuthModule_exports\n\n\n\ncluster_JwtAuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nBotModule\n\nBotModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBotModule->AppModule\n\n\n\n\n\nGuildModule\n\nGuildModule\n\nAppModule -->\n\nGuildModule->AppModule\n\n\n\n\n\nGuildService \n\nGuildService \n\nGuildService  -->\n\nGuildModule->GuildService \n\n\n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nAppModule -->\n\nJwtAuthModule->AppModule\n\n\n\n\n\nJwtAuthService \n\nJwtAuthService \n\nJwtAuthService  -->\n\nJwtAuthModule->JwtAuthService \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nSelfService \n\nSelfService \n\nSelfService  -->\n\nUserModule->SelfService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nBotModule -->\n\nPrismaService->BotModule\n\n\n\nGuildModule -->\n\nPrismaService->GuildModule\n\n\n\nJwtAuthModule -->\n\nPrismaService->JwtAuthModule\n\n\n\nTasksModule -->\n\nPrismaService->TasksModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nAuditLogModule\n\nAuditLogModule\n\nAuditLogModule -->\n\nPrismaService->AuditLogModule\n\n\n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule -->\n\nPrismaService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule -->\n\nPrismaService->GuildRestrictedChannelModule\n\n\n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildSettingsModule -->\n\nPrismaService->GuildSettingsModule\n\n\n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildUserModule -->\n\nPrismaService->GuildUserModule\n\n\n\n\n\nModerationModule\n\nModerationModule\n\nModerationModule -->\n\nPrismaService->ModerationModule\n\n\n\n\n\nAuditLogService \n\nAuditLogService \n\nAuditLogService  -->\n\nAuditLogModule->AuditLogService \n\n\n\nModerationModule -->\n\nAuditLogModule->ModerationModule\n\n\n\n\n\nAuditEvents\n\nAuditEvents\n\nAuditLogModule -->\n\nAuditEvents->AuditLogModule\n\n\n\n\n\nAuditLogService\n\nAuditLogService\n\nAuditLogModule -->\n\nAuditLogService->AuditLogModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nBotModule -->\n\nGuildRestrictedChannelService->BotModule\n\n\n\nGuildModule -->\n\nGuildRestrictedChannelService->GuildModule\n\n\n\nTasksModule -->\n\nGuildRestrictedChannelService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildRestrictedChannelService->GuildAutoDeleteChannelModule\n\n\n\nGuildRestrictedChannelModule -->\n\nGuildRestrictedChannelService->GuildRestrictedChannelModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nBotModule -->\n\nGuildService->BotModule\n\n\n\nGuildModule -->\n\nGuildService->GuildModule\n\n\n\nTasksModule -->\n\nGuildService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nBotModule -->\n\nGuildSettingsService->BotModule\n\n\n\nTasksModule -->\n\nGuildSettingsService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildSettingsService->GuildAutoDeleteChannelModule\n\n\n\nGuildSettingsModule -->\n\nGuildSettingsService->GuildSettingsModule\n\n\n\nGuildUserModule -->\n\nGuildSettingsService->GuildUserModule\n\n\n\n\n\nGuildAutoDeleteChannelService \n\nGuildAutoDeleteChannelService \n\nGuildModule -->\n\nGuildAutoDeleteChannelModule->GuildModule\n\n\n\nGuildAutoDeleteChannelService  -->\n\nGuildAutoDeleteChannelModule->GuildAutoDeleteChannelService \n\n\n\n\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildAutoDeleteChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nTasksModule -->\n\nGuildUserService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildUserService->GuildAutoDeleteChannelModule\n\n\n\nGuildUserModule -->\n\nGuildUserService->GuildUserModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nTasksService->GuildAutoDeleteChannelModule\n\n\n\nGuildModule -->\n\nGuildRestrictedChannelModule->GuildModule\n\n\n\n\n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService  -->\n\nGuildRestrictedChannelModule->GuildRestrictedChannelService \n\n\n\nGuildModule -->\n\nGuildSettingsModule->GuildModule\n\n\n\n\n\nGuildSettingsService \n\nGuildSettingsService \n\nGuildSettingsService  -->\n\nGuildSettingsModule->GuildSettingsService \n\n\n\nGuildModule -->\n\nGuildUserModule->GuildModule\n\n\n\n\n\nGuildUserService \n\nGuildUserService \n\nGuildUserService  -->\n\nGuildUserModule->GuildUserService \n\n\n\nGuildModule -->\n\nModerationModule->GuildModule\n\n\n\n\n\nDmMessageHandler\n\nDmMessageHandler\n\nGuildModule -->\n\nDmMessageHandler->GuildModule\n\n\n\n\n\nGuildMemberEvents\n\nGuildMemberEvents\n\nGuildModule -->\n\nGuildMemberEvents->GuildModule\n\n\n\n\n\nGuildMessageHandler\n\nGuildMessageHandler\n\nGuildModule -->\n\nGuildMessageHandler->GuildModule\n\n\n\n\n\nModRequestFlow\n\nModRequestFlow\n\nGuildModule -->\n\nModRequestFlow->GuildModule\n\n\n\n\n\nJwtAuthService\n\nJwtAuthService\n\nJwtAuthModule -->\n\nJwtAuthService->JwtAuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nJwtAuthModule -->\n\nJwtAuthStrategy->JwtAuthModule\n\n\n\n\n\nRefreshJwtStrategy\n\nRefreshJwtStrategy\n\nJwtAuthModule -->\n\nRefreshJwtStrategy->JwtAuthModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nJwtAuthModule -->\n\nSelfService->JwtAuthModule\n\n\n\nUserModule -->\n\nSelfService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    51 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : A discord bot for a community with special needs hence the name Mega-Transformers-Bot. Written in Typescript using Nestjs, discordjs and React. It also features a API that is used by the frontend but can also be used standalone\n        \n            License : AGPL-3.0-only\n        \n            Author : 89q12\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (src/.../log.entry.dto.ts)\n                        \n                        \n                            TargetType   (src/.../log.entry.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/dto/log.entry.dto.ts\n    \n    \n        \n            \n                \n                    \n                    Action\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TargetType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            actions   (src/.../log.entry.dto.ts)\n                        \n                        \n                            BOT_EVENT_HANDLER_NAME   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            BOT_EVENT_KEY   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            BotEvent   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            ChannelIdGuard   (src/.../message-in-channel.guard.ts)\n                        \n                        \n                            CommandToExecute   (src/.../user-to-user.dto.ts)\n                        \n                        \n                            InheritedRanks   (src/.../has-required-rank.guard.ts)\n                        \n                        \n                            logger   (src/.../tasks.service.ts)\n                        \n                        \n                            logger   (src/.../request-guild-user.decorator.ts)\n                        \n                        \n                            logger   (src/.../request-user.decorator.ts)\n                        \n                        \n                            logger   (src/.../role.controller.ts)\n                        \n                        \n                            modRequestMenuId   (src/.../menu-helper.ts)\n                        \n                        \n                            needHelpButtonId   (src/.../menu-helper.ts)\n                        \n                        \n                            ReactionChannelIdGuard   (src/.../reaction-in-channel.guard.ts)\n                        \n                        \n                            ReactionEmoteGuard   (src/.../reaction-emote.guard.ts)\n                        \n                        \n                            RequestGuildUser   (src/.../request-guild-user.decorator.ts)\n                        \n                        \n                            RequestUser   (src/.../request-user.decorator.ts)\n                        \n                        \n                            REQUIRED_RANK_KEY   (src/.../requires-rank.decorator.ts)\n                        \n                        \n                            RequiredRank   (src/.../requires-rank.decorator.ts)\n                        \n                        \n                            roleResponseSchema   (src/.../role.ts)\n                        \n                        \n                            rolesResponseSchema   (src/.../role.ts)\n                        \n                        \n                            targetTypes   (src/.../log.entry.dto.ts)\n                        \n                        \n                            userResponseSchema   (src/.../user.ts)\n                        \n                        \n                            usersResponseSchema   (src/.../user.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/dto/log.entry.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'USER_JOINED',\n  'WARN',\n  'ERROR',\n  'USER_LEFT',\n  'USER_BANNED',\n  'USER_UNBANNED',\n  'USER_UPDATED',\n  'GUILD_UPDATED',\n  'INVALID_REQUEST',\n  'INVITE_CREATED',\n  'INVITE_DELETED',\n  'MESSAGE_DELETED',\n  'REACTION_ADDED',\n  'REACTION_REMOVED',\n  'ROLE_CREATED',\n  'ROLE_DELETED',\n  'ROLE_UPDATED',\n  'CHANNEL_CREATED',\n  'CHANNEL_DELETED',\n  'CHANNEL_UPDATED',\n  'WEBHOOKS_UPDATED',\n  'TIMEOUT_EXPIRED',\n  'TIMEOUT',\n  'KICK',\n  'BAN',\n] as const\n                    \n                \n\n            \n                \n                    All possible actions that can occur\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'ERROR',\n  'WARN',\n  'USER',\n  'GUILD',\n  'INVALID_REQUEST',\n  'INVITE',\n  'MESSAGE',\n  'ROLE',\n  'CHANNEL',\n] as const\n                    \n                \n\n            \n                \n                    List of the targets an event can have\n\n                \n            \n\n        \n    \n\n    src/bot/decorators/bot-event.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BOT_EVENT_HANDLER_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__bot_event_handler__'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BOT_EVENT_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__bot_event__'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BotEvent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...event: Array) =>\n  SetMetadata(BOT_EVENT_KEY, event)\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/message-in-channel.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ChannelIdGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (channelId: string) => {\n  class ChannelIdGuardMixin implements CanActivate {\n    async canActivate(context: ExecutionContext) {\n      const message = context.getArgByIndex(0);\n      if (\n        !(message.message instanceof Message) ||\n        !(message.message as Message).inGuild()\n      ) {\n        return false;\n      }\n      return message.channelId === channelId;\n    }\n  }\n\n  const guard = mixin(ChannelIdGuardMixin);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/bot/dto/user-to-user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommandToExecute\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChoiceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  'Einer Person einen Kaffee geben': 'coffee',\n  'Einer Person einen Kuchen geben': 'cake',\n  'Einer Person ein Headpat geben': 'headpat',\n  'Eine Person umarmen': 'hug',\n}\n                    \n                \n\n\n        \n    \n\n    src/util/guards/has-required-rank.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InheritedRanks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  OWNER: ['ADMIN', 'MOD', 'MEMBER'],\n  ADMIN: ['MOD', 'MEMBER'],\n  MOD: ['MEMBER'],\n  MEMBER: [],\n  NEW: [],\n}\n                    \n                \n\n            \n                \n                    Map of ranks that are inherited by any given rank,\nmeaning their lower ranks e.g MOD has MEMBER.\nBut MEMBER has 0 since its the lowest rank a member can have.\n\n                \n            \n\n        \n    \n\n    src/tasks/tasks.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('TaskService')\n                    \n                \n\n\n        \n    \n\n    src/util/decorators/request-guild-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RequestGuildUser')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequestGuildUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx\n      .switchToHttp()\n      .getRequest();\n    const user = request.user;\n\n    if (!user) {\n      logger.error(`${ctx.getHandler().toString()} has a parameter with\n      annotation RequestGuildUser but is NOT guarded by ${\n        JwtAuthGuard.name\n      } AND the request path ${\n        request.path\n      } is not prefixed by \"/guild/:guildId/\n        Please use ${JwtAuthGuard.name} if you want to access a UserId`);\n      throw new InternalServerErrorException();\n    }\n    return user;\n  },\n)\n                    \n                \n\n            \n                \n                    A param decorator to check whether a GuildUser is set on a request,\nif not the route is not guarded by JWT but should be.\nIf the route is guarded it returns the user\n\n                \n            \n\n        \n    \n\n    src/util/decorators/request-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RequestUser')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequestUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const userId = ctx.switchToHttp().getRequest()\n      .user.userId;\n\n    if (!userId) {\n      logger.error(`${ctx.getHandler().toString()} has a parameter with\n    annotation RequestUser but is NOT guarded by ${JwtAuthGuard.name}.\n      Please use ${JwtAuthGuard.name} if you want to access a UserId`);\n      throw new InternalServerErrorException();\n    }\n    return userId;\n  },\n)\n                    \n                \n\n            \n                \n                    A param decorator to check whether a user is set on a request,\nif not the route is not guarded by JWT but should be.\nIt returns the userID.\n\n                \n            \n\n        \n    \n\n    src/guild/moderation/role/role.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RoleController')\n                    \n                \n\n\n        \n    \n\n    src/util/functions/menu-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modRequestMenuId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'modRequestMenu'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        needHelpButtonId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'createTicket'\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/reaction-in-channel.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReactionChannelIdGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (channelId: string) => {\n  class ChannelIdGuardMixin implements CanActivate {\n    async canActivate(context: ExecutionContext) {\n      const reaction = context.getArgByIndex(0);\n      if (reaction.partial) await reaction.fetch();\n      const message = reaction.message;\n      if (\n        message.message instanceof Message &&\n        !(message.message as Message).inGuild()\n      ) {\n        return false;\n      }\n      return message.channelId === channelId;\n    }\n  }\n\n  const guard = mixin(ChannelIdGuardMixin);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/reaction-emote.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReactionEmoteGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (emotes: string[]) => {\n  class ReactionEmote implements CanActivate {\n    canActivate(context: ExecutionContext): boolean {\n      const reaction = context.getArgByIndex(0);\n      if (\n        reaction instanceof MessageReaction &&\n        emotes.includes((reaction as MessageReaction).emoji.name)\n      ) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  const guard = mixin(ReactionEmote);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/util/decorators/requires-rank.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUIRED_RANK_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__rank__'\n                    \n                \n\n            \n                \n                    The constant used in the RequiredRank decorator to store the rank for a function/object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequiredRank\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (rank: Rank) =>\n  SetMetadata(REQUIRED_RANK_KEY, rank)\n                    \n                \n\n            \n                \n                    Sets the required rank for a route or controller\n\n                \n            \n\n        \n    \n\n    src/guild/moderation/dto/role.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roleResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rolesResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/guild/moderation/dto/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    username: { type: 'string' },\n    discriminator: { type: 'string' },\n    avatarURL: { type: 'string' },\n    displayAvatarURL: { type: 'string' },\n    bannerURL: { type: 'string' },\n    bot: { type: 'boolean' },\n    system: { type: 'boolean' },\n    flags: { type: 'number' },\n    createdTimestamp: { type: 'number' },\n    accentColor: { type: 'number' },\n    hexAccentColor: { type: 'string' },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usersResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'array',\n  items: userResponseSchema,\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
