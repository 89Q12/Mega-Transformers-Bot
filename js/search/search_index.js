var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddRoleCommand.html",[0,0.253,1,3.541]],["body/classes/AddRoleCommand.html",[0,0.291,1,5.327,2,0.872,3,0.101,4,0.09,5,0.09,6,6.505,7,4.469,8,0.293,9,0.859,10,1.613,11,6.619,12,1.196,13,2.501,14,2.965,15,4.067,16,2.222,17,0.382,18,5.065,19,0.813,20,0.009,21,0.649,22,0.332,23,0.683,24,5.065,25,4.312,26,0.915,27,3.405,28,5.065,29,3.057,30,0.639,31,0.161,32,3.268,33,2.488,34,2.911,35,0.938,36,1.032,37,1.475,38,0.416,39,0.961,40,1.67,41,4.076,42,1.805,43,5.065,44,4.469,45,2.688,46,2.911,47,2.688,48,1.881,49,0.112,50,1.669,51,2.266,52,5.065,53,5.065,54,3.783,55,2.59,56,4.469,57,4.469,58,1.032,59,5.065,60,0.938,61,4.382,62,1.277,63,4.469,64,4.382,65,1.349,66,4.637,67,1.927,68,5.327,69,5.065,70,2.93,71,5.065,72,1.758,73,0.712,74,2.59,75,5.065,76,2.071,77,1.512,78,4.469,79,0.007,80,0.007]],["title/controllers/AppController.html",[81,1.488,82,3.286]],["body/controllers/AppController.html",[0,0.388,3,0.134,4,0.119,5,0.119,20,0.009,31,0.167,38,0.555,49,0.149,79,0.008,80,0.008,81,2.675,82,5.906,83,2.47,84,5.955,85,3.221,86,3.452,87,5.432,88,3.723,89,5.906,90,2.538,91,3.879]],["title/modules/AppModule.html",[92,1.527,93,3.286]],["body/modules/AppModule.html",[0,0.236,3,0.082,4,0.073,5,0.073,14,2.361,16,2.223,20,0.009,31,0.177,35,0.761,36,1.171,37,1.197,38,0.338,39,0.779,48,1.168,49,0.091,77,2.141,79,0.006,80,0.006,82,4.948,83,2.102,92,2.843,93,6.642,94,1.898,95,1.898,96,2.029,97,2.029,98,1.898,99,3.161,100,1.898,101,3.626,102,3.626,103,3.626,104,5.48,105,5.625,106,5.48,107,5.48,108,5.48,109,5.48,110,2.836,111,2.029,112,1.504,113,4.109,114,3.515,115,5.746,116,5.026,117,2.721,118,4.109,119,4.109,120,4.109,121,4.109,122,4.109,123,2.18,124,4.109,125,5.746,126,4.109,127,4.109,128,4.109,129,3.307,130,3.804,131,4.109,132,3.804,133,5.746,134,1.961,135,3.626,136,3.804,137,4.109,138,4.109,139,2.267,140,2.267,141,3.804,142,2.029,143,3.626,144,4.109,145,4.109,146,3.626,147,4.109,148,4.109,149,4.109,150,4.109,151,4.109,152,4.109,153,3.626,154,4.109,155,4.109,156,4.109,157,4.109,158,4.109,159,4.109,160,4.109,161,4.109,162,4.109,163,4.109,164,4.109,165,4.109,166,4.109,167,4.109,168,5.746,169,4.109,170,4.109,171,4.109,172,4.109,173,4.109,174,4.109,175,4.109,176,4.109,177,4.109,178,4.109,179,4.109,180,4.109,181,4.109,182,4.109,183,4.109,184,4.109,185,3.626,186,4.109,187,4.109,188,4.109,189,4.109,190,4.109,191,4.109,192,6.901,193,3.626,194,4.109,195,3.626,196,1.14,197,2.467,198,4.109]],["title/injectables/AppService.html",[109,3.083,199,1.009]],["body/injectables/AppService.html",[0,0.34,3,0.117,4,0.105,5,0.105,8,0.342,9,0.947,12,1.32,17,0.458,19,0.897,20,0.009,21,0.643,22,0.297,23,0.753,26,1.068,30,0.746,31,0.157,37,1.722,38,0.486,49,0.13,50,1.491,79,0.007,80,0.007,109,5.116,139,3.261,140,3.261,199,1.675,200,2.418,201,5.217,202,1.636,203,2.799,204,7.303,205,5.913,206,5.206,207,7.303,208,4.594,209,7.303,210,6.991,211,5.913,212,4.142,213,2.731,214,2.646,215,2.418,216,1.842,217,7.303,218,3.485,219,5.913,220,2.49,221,3.915,222,1.722,223,5.913]],["title/controllers/AuditLogController.html",[81,1.488,224,3.286]],["body/controllers/AuditLogController.html",[0,0.291,3,0.101,4,0.09,5,0.09,8,0.293,9,0.859,10,1.613,12,0.915,17,0.293,19,0.622,20,0.009,21,0.446,22,0.254,23,0.523,26,0.915,30,0.639,31,0.174,37,1.475,38,0.416,42,1.805,49,0.112,50,1.277,58,1.032,65,1.349,73,1.036,79,0.007,80,0.007,81,2.239,83,1.854,85,2.417,86,2.59,88,2.794,91,2.911,220,2.133,222,1.475,224,4.943,225,4.469,226,7.373,227,5.065,228,4.312,229,5.477,230,4.918,231,2.965,232,6.897,233,5.065,234,2.358,235,2.071,236,7.373,237,4.469,238,3.354,239,4.469,240,4.469,241,4.881,242,4.469,243,3.783,244,5.065,245,5.065,246,3.041,247,3.783,248,3.783,249,4.237,250,4.638,251,4.076,252,2.59,253,3.041,254,3.041,255,3.187,256,3.354,257,3.973,258,3.041,259,2.071,260,3.549,261,5.065,262,5.065,263,3.187,264,5.065,265,5.065,266,5.065,267,5.065,268,4.469,269,5.065,270,4.469,271,5.065,272,1.957,273,5.065,274,5.065,275,5.065,276,3.041,277,5.065,278,3.549,279,5.065,280,2.133,281,5.065,282,3.783,283,5.065,284,5.065]],["title/classes/AuditLogFilterDto.html",[0,0.253,229,3.083]],["body/classes/AuditLogFilterDto.html",[0,0.393,2,0.916,3,0.106,4,0.094,5,0.094,8,0.308,17,0.46,20,0.009,22,0.436,23,0.896,26,1.44,31,0.15,49,0.118,73,1.258,79,0.007,80,0.007,90,2.002,202,1.532,220,3.47,229,4.79,249,4.846,250,5.305,251,4.286,285,7.271,286,4.699,287,7.552,288,7.552,289,7.03,290,4.783,291,5.326,292,5.326,293,5.582,294,4.075,295,6.837,296,5.326,297,5.326,298,5.326,299,5.326,300,3.526,301,4.545,302,3.604,303,2.383,304,5.773,305,4.527,306,4.79,307,3.497,308,5.326,309,5.326]],["title/modules/AuditLogModule.html",[92,1.527,136,2.914]],["body/modules/AuditLogModule.html",[0,0.336,3,0.116,4,0.103,5,0.103,16,2.454,20,0.009,31,0.172,35,1.082,36,1.191,38,0.48,40,1.927,49,0.129,79,0.007,80,0.007,83,2.653,92,2.736,94,2.699,95,2.699,96,2.885,97,2.885,98,2.699,99,3.761,100,3.64,110,3.579,111,2.885,112,2.138,114,3.101,123,3.101,136,5.977,224,5.887,241,6.004,242,5.156,310,5.156,311,5.156,312,5.156,313,6.949,314,5.844,315,5.844,316,5.844,317,3.223]],["title/injectables/AuditLogService.html",[199,1.009,241,2.914]],["body/injectables/AuditLogService.html",[0,0.273,3,0.094,4,0.084,5,0.084,8,0.275,9,0.823,10,1.788,12,0.859,16,2.323,17,0.413,19,0.877,20,0.009,21,0.629,22,0.399,23,0.737,30,0.801,31,0.151,37,1.384,38,0.391,40,1.567,49,0.105,50,1.199,58,1.293,60,0.88,62,1.6,65,1.554,73,1.004,77,2.49,79,0.006,80,0.006,199,1.456,200,1.944,216,1.6,220,2.001,228,3.941,229,5.341,230,2.99,231,2.261,232,4.193,239,4.193,240,4.193,241,4.202,249,4.106,250,4.495,268,4.193,270,4.193,272,2.452,276,4.577,278,4.446,280,2.672,282,4.74,318,4.193,319,3.647,320,6.304,321,4.753,322,4.753,323,6.346,324,5.341,325,4.753,326,4.753,327,2.753,328,7.145,329,5.599,330,4.753,331,4.753,332,4.753,333,4.753,334,4.753,335,4.753,336,4.753,337,4.753,338,4.753,339,4.753,340,5.599,341,4.753,342,2.622,343,4.753,344,6.346,345,6.346,346,3.825,347,4.753,348,3.008,349,4.753,350,4.753,351,4.753,352,4.753,353,4.193,354,4.753,355,3.33,356,4.193,357,4.193,358,4.753,359,4.753,360,2.672,361,4.193,362,4.753]],["title/interfaces/BotEvent.html",[363,2.529,364,3.083]],["body/interfaces/BotEvent.html",[3,0.13,4,0.116,5,0.116,8,0.378,9,1.007,17,0.378,19,0.803,20,0.009,21,0.576,22,0.328,23,0.675,30,0.826,31,0.13,39,1.241,49,0.144,79,0.008,80,0.008,214,2.928,234,2.767,363,3.76,364,5.44,365,4.585,366,6.851,367,5.774,368,7.306,369,6.544,370,7.556,371,6.544,372,7.765,373,6.544]],["title/modules/BotModule.html",[92,1.527,104,3.083]],["body/modules/BotModule.html",[0,0.292,3,0.132,4,0.09,5,0.09,16,2.366,20,0.009,31,0.18,35,0.939,36,1.034,38,0.417,40,1.673,49,0.112,79,0.007,80,0.007,92,2.561,94,2.343,95,2.343,96,2.505,97,2.505,98,2.343,99,3.521,100,3.06,104,6.231,110,3.271,111,2.505,112,1.857,114,2.692,123,3.516,134,2.421,317,2.799,374,4.477,375,4.477,376,4.591,377,4.257,378,3.972,379,5.074,380,4.949,381,5.074,382,2.185,383,2.799,384,4.949,385,5.074,386,4.642,387,4.642,388,5.074,389,5.074,390,3.808,391,2.692,392,3.192,393,4.949,394,5.074,395,5.074,396,4.949,397,5.074,398,5.074,399,4.949,400,6.626,401,6.626,402,4.949,403,3.555,404,3.789,405,1.552,406,4.949,407,5.074,408,5.074,409,3.555,410,4.949,411,5.074,412,4.949,413,5.074,414,5.074]],["title/classes/Channel.html",[0,0.253,415,1.451]],["body/classes/Channel.html",[0,0.346,2,0.49,3,0.057,4,0.05,5,0.05,8,0.164,17,0.477,20,0.009,21,0.629,22,0.46,23,0.843,26,1.491,31,0.106,39,0.54,48,2.384,49,0.063,65,1.09,72,2.806,73,1.263,79,0.004,80,0.004,90,1.07,196,1.217,202,0.983,216,0.718,230,2.76,231,3.073,259,3.375,280,1.199,290,1.709,300,1.885,301,4.508,302,3.858,303,1.274,342,3.581,348,2.887,360,2.531,405,1.838,415,2.895,416,2.127,417,3.366,418,4.548,419,4.306,420,2.736,421,5.75,422,4.306,423,3.996,424,3.996,425,3.543,426,4.306,427,5.75,428,6.011,429,2.904,430,2.521,431,5.031,432,3.53,433,2.847,434,2.847,435,5.303,436,0.915,437,2.904,438,2.847,439,3.53,440,2.847,441,4.386,442,3.073,443,3.53,444,2.847,445,4.386,446,3.783,447,4.489,448,2.847,449,3.53,450,2.847,451,2.887,452,2.847,453,2.633,454,2.847,455,3.996,456,3.53,457,2.847,458,4.211,459,2.847,460,3.543,461,3.53,462,2.847,463,2.847,464,3.276,465,3.073,466,3.53,467,3.366,468,2.847,469,3.53,470,3.073,471,2.521,472,2.847,473,3.53,474,2.847,475,2.847,476,2.847,477,4.149,478,4.306,479,3.366,480,2.291,481,2.291,482,4.495,483,2.76,484,3.53,485,4.306,486,2.034,487,2.291,488,2.291,489,2.904,490,1.274,491,2.291,492,2.127,493,1.791,494,2.291,495,1.885,496,2.291,497,2.291,498,1.995,499,2.291]],["title/classes/ChannelCleaned.html",[0,0.253,500,2.914]],["body/classes/ChannelCleaned.html",[0,0.397,2,0.764,3,0.088,4,0.079,5,0.079,8,0.256,9,0.786,12,1.247,17,0.474,19,0.744,20,0.009,21,0.533,22,0.411,23,0.625,30,0.56,31,0.12,38,0.365,49,0.152,65,1.761,67,2.387,73,1.278,79,0.006,80,0.006,196,1.231,202,1.357,203,2.773,213,3.423,218,3.703,220,1.868,231,3.104,420,2.269,436,1.439,451,3.121,467,3.811,495,4.908,500,4.568,501,3.314,502,2.267,503,5.743,504,4.485,505,6.597,506,3.215,507,3.637,508,6.058,509,4.437,510,4.437,511,4.437,512,4.437,513,3.933,514,4.437,515,2.269,516,4.011,517,6.123,518,4.418,519,6.446,520,4.875,521,4.875,522,3.805,523,4.011,524,3.314,525,4.875,526,3.571,527,3.481,528,3.314]],["title/controllers/ChannelController.html",[81,1.488,529,3.286]],["body/controllers/ChannelController.html",[0,0.171,3,0.059,4,0.053,5,0.053,8,0.172,9,0.589,10,1.821,12,0.538,14,1.96,17,0.383,19,0.813,20,0.009,21,0.583,22,0.421,23,0.683,26,1.197,30,0.836,31,0.162,33,1.706,35,0.551,36,0.607,37,0.867,38,0.245,39,0.565,42,1.061,48,0.846,49,0.066,50,1.145,58,1.121,60,1.385,62,2.005,65,1.696,67,1.929,73,1.247,77,0.888,79,0.005,80,0.005,81,1.007,83,1.089,85,1.421,86,1.523,88,1.642,90,1.119,91,1.711,139,1.642,140,1.642,196,0.826,202,0.667,203,1.535,206,2.856,208,1.873,216,1.67,221,1.971,222,1.322,231,1.96,234,2.787,235,1.217,252,1.523,253,1.787,254,1.787,255,1.873,256,1.971,257,2.725,258,1.787,259,1.217,260,2.086,263,4.167,329,5.428,348,2.591,360,2.316,403,3.854,415,2.861,420,2.321,424,2.223,436,1.721,467,3.461,483,1.873,486,1.445,489,4.074,493,1.873,500,1.971,503,5.085,504,4.349,516,1.971,517,2.223,523,1.971,524,2.223,529,3.39,530,2.627,531,1.711,532,5.501,533,5.501,534,5.501,535,5.501,536,5.501,537,2.977,538,2.977,539,3.653,540,2.977,541,2.977,542,2.977,543,5.501,544,2.977,545,4.539,546,2.977,547,2.977,548,2.977,549,3.653,550,4.951,551,4.951,552,4.951,553,2.977,554,2.977,555,2.396,556,6.158,557,2.977,558,2.977,559,2.977,560,2.977,561,4.31,562,1.971,563,2.223,564,4.539,565,5.617,566,4.427,567,2.396,568,4.005,569,2.977,570,3.005,571,2.977,572,3.39,573,2.223,574,2.627,575,2.977,576,2.086,577,2.223,578,2.086,579,2.086,580,1.711,581,2.977,582,2.977,583,2.223,584,2.977,585,5.33,586,3.39,587,4.167,588,4.595,589,2.608,590,4.539,591,2.977,592,2.977,593,6.153,594,2.977,595,2.977,596,5.501,597,2.977,598,2.977,599,2.977,600,3.806,601,3.653,602,2.977,603,2.977,604,2.977,605,2.977,606,2.977,607,2.086,608,1.787,609,2.977,610,2.627,611,2.396,612,2.396,613,2.977,614,2.977,615,2.977,616,2.627,617,1.58,618,2.977,619,2.977,620,2.977]],["title/classes/ChannelNotTextBasedException.html",[0,0.253,576,3.083]],["body/classes/ChannelNotTextBasedException.html",[0,0.412,2,0.988,3,0.114,4,0.102,5,0.102,12,1.038,17,0.332,19,0.705,20,0.009,21,0.505,22,0.288,23,0.592,31,0.143,38,0.472,49,0.158,60,1.328,70,2.85,72,2.489,73,1.099,76,2.349,79,0.007,80,0.007,228,3.168,415,2.365,486,1.349,502,1.757,576,5.479,577,5.356,578,5.479,579,5.479,580,4.494,589,4.121,621,3.613,622,4.92,623,5.356,624,3.541,625,6.328,626,4.622,627,6.328,628,4.512,629,4.512,630,3.803,631,4.92,632,3.168,633,5.067,634,2.741,635,4.024,636,4.305,637,2.835,638,5.067,639,4.289,640,3.803,641,3.613,642,3.613,643,3.803,644,3.803,645,3.803,646,3.803,647,5.067]],["title/classes/ChannelNotTextBasedExceptionFilter.html",[0,0.253,639,3.286]],["body/classes/ChannelNotTextBasedExceptionFilter.html",[0,0.406,2,0.964,3,0.111,4,0.099,5,0.099,8,0.324,9,0.916,17,0.324,19,0.688,20,0.009,21,0.493,22,0.281,23,0.578,30,0.707,31,0.14,38,0.461,49,0.156,60,1.307,70,2.227,72,1.945,73,0.787,76,3.162,79,0.007,80,0.007,228,3.895,415,1.848,486,1.316,502,2.16,576,5.688,577,5.274,578,5.418,579,5.418,580,4.665,589,3.22,621,3.526,622,4.865,623,4.185,624,2.766,625,4.944,627,4.944,628,4.865,629,5.108,630,3.71,631,5.108,632,3.091,633,4.944,634,3.37,635,4.948,636,4.873,637,3.486,638,4.944,639,5.274,640,4.676,641,4.865,642,3.526,643,3.71,644,3.71,645,3.71,646,3.71,647,4.944,648,5.604]],["title/classes/CleanWfpMember.html",[0,0.253,406,3.286]],["body/classes/CleanWfpMember.html",[0,0.28,2,0.839,3,0.097,4,0.086,5,0.086,8,0.282,9,0.837,10,1.583,12,0.881,17,0.373,19,0.793,20,0.009,21,0.739,22,0.324,23,0.666,25,4.249,26,0.881,27,3.342,29,2.981,30,0.615,31,0.153,32,3.187,34,2.802,35,0.903,36,0.994,37,1.42,38,0.401,39,0.925,45,2.587,46,2.802,47,2.587,48,1.835,49,0.108,50,1.23,55,3.301,60,1.195,62,1.825,77,1.926,79,0.006,80,0.006,215,3.15,216,1.23,360,2.718,377,4.21,406,4.821,409,3.416,471,2.802,486,1.145,490,2.182,539,3.924,649,6.385,650,4.302,651,6.455,652,4.302,653,4.876,654,4.876,655,4.876,656,3.416,657,4.061,658,2.927,659,5.695,660,5.396,661,5.305,662,4.302,663,3.642,664,4.302,665,3.416,666,3.924,667,4.876,668,4.876,669,2.927,670,3.425,671,4.876,672,4.876,673,3.229,674,4.876,675,4.821,676,4.876,677,4.876,678,4.876,679,3.924,680,3.229,681,4.426,682,4.876,683,4.876,684,4.876,685,3.924,686,4.876,687,3.416,688,4.821,689,4.876,690,5.195,691,4.876,692,5.695,693,5.695,694,5.195,695,5.695,696,4.302,697,4.302,698,3.068,699,3.068]],["title/classes/CommandValidationFilter.html",[0,0.253,700,3.083]],["body/classes/CommandValidationFilter.html",[0,0.331,2,0.99,3,0.114,4,0.102,5,0.102,8,0.332,9,0.931,10,1.713,17,0.332,19,0.707,20,0.009,21,0.632,22,0.289,23,0.594,29,2.657,30,0.726,31,0.156,35,1.065,38,0.59,39,1.091,49,0.127,60,1.329,62,1.451,76,3.352,77,1.717,79,0.007,80,0.007,215,2.353,216,1.451,234,2.559,502,2.196,628,4.924,629,5.156,641,4.924,656,4.031,657,4.517,670,3.053,687,4.031,699,4.517,700,5.031,701,6.335,702,5.077,703,5.754,704,8.196,705,5.754,706,7.181,707,5.754,708,5.754,709,5.754,710,5.754,711,4.631,712,5.754,713,5.754,714,2.657,715,5.754,716,5.754,717,4.031,718,5.754,719,5.754,720,3.81]],["title/classes/CommunityQuestionCommand.html",[0,0.253,393,3.286]],["body/classes/CommunityQuestionCommand.html",[0,0.198,2,0.591,3,0.068,4,0.061,5,0.061,8,0.199,9,0.656,10,1.744,12,0.913,13,1.697,14,2.624,16,2.164,17,0.382,19,0.812,20,0.009,21,0.687,22,0.332,23,0.682,25,3.646,26,1.083,27,2.769,29,2.769,30,0.757,31,0.155,32,2.495,33,1.9,34,2.904,35,0.936,36,0.7,37,1.001,38,0.415,39,0.652,40,1.133,45,1.824,46,1.975,47,1.824,48,0.977,49,0.076,50,1.275,51,1.538,58,1.347,60,1.555,62,2.044,65,0.7,72,2.294,77,1.789,79,0.005,80,0.005,85,1.64,215,2.067,216,2.01,222,1.472,238,3.346,272,2.316,276,2.063,294,1.758,355,2.408,370,5.289,393,3.775,486,0.807,570,3.346,589,1.975,657,3.18,663,3.775,670,2.682,673,2.276,687,2.408,699,2.162,720,3.346,721,6.214,722,3.032,723,5.054,724,5.995,725,5.289,726,3.437,727,5.054,728,5.831,729,4.2,730,3.437,731,3.437,732,7.474,733,4.936,734,3.437,735,3.437,736,4.936,737,6.609,738,3.437,739,3.437,740,2.276,741,5.054,742,2.063,743,3.346,744,3.032,745,2.567,746,3.775,747,4.477,748,2.567,749,3.437,750,3.437,751,3.437,752,2.408,753,2.567,754,3.437,755,3.967,756,3.437,757,3.437,758,3.437,759,3.032,760,2.567,761,2.408,762,6.609,763,3.437,764,3.437,765,2.567,766,5.054,767,3.437,768,5.054,769,2.766,770,3.032,771,4.459,772,3.437,773,2.276,774,2.861,775,5.054,776,3.032,777,3.437,778,2.567,779,5.054,780,6.609,781,2.766,782,3.032,783,2.567,784,3.437,785,5.054,786,5.054,787,3.437,788,3.437,789,3.437,790,3.775,791,3.437,792,3.437,793,5.054,794,3.437,795,2.567,796,3.437,797,5.054,798,3.541,799,3.437,800,2.766,801,3.437,802,3.437,803,3.437,804,3.437,805,3.437,806,4.459,807,3.437,808,3.437,809,3.437,810,3.437,811,3.437,812,3.437,813,3.437,814,2.276,815,3.437,816,5.995,817,3.437,818,3.437,819,3.437,820,1.64,821,3.032,822,3.032,823,3.032,824,3.032,825,2.408,826,3.437,827,3.032,828,1.538,829,5.054,830,3.032,831,2.766,832,3.437,833,3.437]],["title/classes/CommunityQuestionDto.html",[0,0.253,733,3.286]],["body/classes/CommunityQuestionDto.html",[0,0.415,2,1,3,0.115,4,0.103,5,0.103,8,0.336,17,0.417,20,0.009,22,0.433,26,1.305,31,0.144,35,1.076,36,1.184,49,0.128,73,1.156,77,2.156,79,0.007,80,0.007,202,1.618,235,3.215,259,3.363,302,3.751,303,2.599,348,3.042,486,2.054,578,5.061,711,5.813,732,7.714,733,5.395,755,4.336,759,6.373,760,5.395,834,6.936,835,5.126,836,5.395,837,6.373,838,6.373,839,7.224,840,6.373,841,5.81,842,5.395,843,5.81,844,4.339,845,5.813]],["title/classes/CommunityQuestionFormDto.html",[0,0.253,736,3.286]],["body/classes/CommunityQuestionFormDto.html",[0,0.38,2,1.136,3,0.131,4,0.117,5,0.117,8,0.381,17,0.381,20,0.009,22,0.331,26,1.193,31,0.155,35,1.222,36,1.345,39,1.252,49,0.146,79,0.008,80,0.008,202,1.749,736,5.829,806,7.332,846,6.887,847,5.824,848,8.311,849,7.806,850,6.601,851,5.824]],["title/interfaces/DiscordExecutionContext.html",[363,2.529,852,3.286]],["body/interfaces/DiscordExecutionContext.html",[0,0.341,3,0.118,4,0.105,5,0.105,8,0.343,9,0.95,10,1.299,12,1.073,17,0.343,20,0.009,30,0.749,31,0.158,37,1.729,38,0.488,39,1.126,48,1.687,49,0.131,50,1.497,58,1.492,60,1.099,62,1.497,79,0.007,80,0.007,134,2.833,199,1.679,222,1.729,234,2.115,363,3.411,365,4.159,378,3.493,382,1.957,383,3.274,405,2.714,502,1.816,624,3.614,852,5.928,853,5.467,854,4.777,855,4.765,856,7.311,857,5.936,858,4.394,859,4.159,860,4.433,861,4.159,862,3.563,863,3.735,864,3.735,865,4.159,866,5.237,867,5.237]],["title/classes/DiscordGuildMember.html",[0,0.253,868,3.286]],["body/classes/DiscordGuildMember.html",[0,0.381,2,0.873,3,0.101,4,0.09,5,0.09,8,0.293,17,0.49,20,0.009,22,0.451,23,0.684,26,1.532,31,0.147,49,0.112,65,1.503,67,2.149,73,1.29,79,0.007,80,0.007,90,1.908,196,1.408,202,1.484,293,4.642,294,3.389,301,3.655,302,3.972,303,2.27,304,4.642,307,3.389,451,3.294,477,4.046,479,4.169,828,3.301,868,4.949,869,7.587,870,4.477,871,4.24,872,6.51,873,6.51,874,5.169,875,4.872,876,5.074,877,4.083,878,5.074,879,5.074,880,5.074,881,5.074,882,5.074,883,6.626,884,5.074,885,5.074,886,5.846,887,3.046]],["title/classes/DiscordUser.html",[0,0.253,887,2.641]],["body/classes/DiscordUser.html",[0,0.288,2,0.585,3,0.068,4,0.06,5,0.06,8,0.196,17,0.479,20,0.009,22,0.457,26,1.499,31,0.1,48,1.868,49,0.075,60,0.928,72,2.546,73,1.276,77,1.496,79,0.005,80,0.005,90,1.278,196,2.476,202,1.334,231,3.036,302,3.715,303,1.52,360,3.278,417,4.135,418,5.139,429,3.319,430,2.88,431,4.985,446,1.874,451,3.404,453,3.946,477,3.999,479,3.746,482,4.135,486,2.085,608,2.04,825,5.139,828,3.282,871,3.777,874,5.139,875,4.554,877,4.034,887,3.575,888,2.735,889,5.8,890,5.8,891,6.471,892,5.8,893,5.8,894,4.856,895,4.792,896,6.573,897,4.909,898,3.398,899,6.573,900,3.398,901,5.012,902,3.398,903,3.398,904,3.398,905,5.012,906,4.422,907,5.012,908,5.012,909,3.398,910,4.422,911,3.398,912,3.398,913,5.012,914,5.012,915,3.398,916,3.743,917,3.398,918,3.398,919,5.012,920,5.012,921,3.398,922,4.447,923,3.743,924,2.538]],["title/injectables/DmMessageHandler.html",[199,1.009,925,3.083]],["body/injectables/DmMessageHandler.html",[0,0.311,3,0.108,4,0.096,5,0.096,8,0.313,9,0.896,10,1.665,17,0.399,19,0.665,20,0.009,21,0.476,22,0.272,23,0.558,26,0.978,30,0.683,31,0.165,35,1.002,36,1.103,38,0.445,39,1.026,49,0.119,62,1.365,74,2.768,76,2.213,79,0.007,80,0.007,85,2.583,199,1.585,200,2.213,202,1.548,203,2.711,214,2.422,215,2.213,216,1.919,234,2.462,327,2.348,405,2.533,742,3.249,743,3.583,765,4.042,773,3.583,774,2.583,828,2.422,925,4.84,926,6.123,927,6.123,928,4.355,929,6.908,930,6.908,931,5.412,932,5.412,933,6.908,934,5.412,935,5.412,936,4.042,937,3.583,938,5.412,939,3.792,940,3.405,941,4.042,942,4.775,943,5.412,944,5.412,945,6.908,946,5.412,947,5.412,948,5.412,949,3.792,950,4.775,951,6.908,952,5.412,953,5.412,954,5.412,955,5.412,956,5.412,957,5.412,958,5.412,959,4.355,960,4.355,961,5.412,962,4.775,963,5.412,964,5.412,965,4.355,966,3.405,967,5.412,968,5.412]],["title/classes/EditRoleData.html",[0,0.253,969,3.083]],["body/classes/EditRoleData.html",[0,0.295,2,0.458,3,0.053,4,0.047,5,0.047,8,0.154,17,0.428,20,0.009,21,0.652,22,0.453,23,0.848,26,1.34,31,0.102,39,0.789,48,2.459,49,0.059,60,0.77,61,1.762,72,2.012,73,1.254,77,1.242,79,0.004,80,0.004,90,1,100,1.229,202,1.148,214,1.862,216,1.819,231,2.837,259,3.413,272,1.028,280,2.158,290,1.597,300,1.762,301,3.979,302,3.688,303,1.19,342,4.183,348,2.649,360,3.037,417,3.224,425,3.393,429,1.762,430,1.529,431,5.087,436,1.313,437,2.755,446,2.295,451,3.489,453,3.776,460,2.755,470,4.673,477,4.095,479,4.196,482,3.958,486,2.075,490,3.932,607,2.916,608,1.597,656,3.591,666,2.141,825,1.864,875,1.597,897,5.538,916,4.329,924,1.987,969,3.591,970,1.987,971,5.368,972,5.967,973,5.967,974,5.195,975,5.967,976,4.522,977,2.661,978,3.672,979,3.672,980,2.661,981,3.672,982,4.522,983,2.661,984,4.522,985,4.522,986,4.125,987,3.672,988,3.672,989,3.672,990,2.661,991,2.661,992,2.661,993,4.522,994,2.661,995,4.665,996,2.661,997,2.348,998,3.672,999,2.618,1000,3.672,1001,2.916,1002,2.661,1003,2.661,1004,2.661,1005,3.672,1006,2.141,1007,2.916,1008,1.762,1009,2.348,1010,3.349,1011,2.498,1012,4.665,1013,2.348,1014,4.665,1015,2.348,1016,3.349,1017,2.348,1018,2.348,1019,2.348,1020,2.348,1021,2.348,1022,2.348,1023,2.141,1024,2.348,1025,3.591,1026,2.348,1027,2.916,1028,1.987,1029,2.141,1030,2.141,1031,2.348,1032,1.987]],["title/interfaces/EventToLog.html",[218,2.1,363,2.529]],["body/interfaces/EventToLog.html",[3,0.117,4,0.104,5,0.104,8,0.339,9,0.943,17,0.339,19,0.72,20,0.009,21,0.516,22,0.294,23,0.605,30,0.74,31,0.117,38,0.482,49,0.129,79,0.007,80,0.007,203,2.994,213,3.356,218,3.468,220,3.475,235,2.399,363,3.371,365,4.11,486,1.707,506,3.856,513,3.856,515,3.717,622,5.192,634,3.938,1033,5.176,1034,8.643,1035,6.641,1036,8.253,1037,8.253,1038,6.412,1039,5.867,1040,4.812,1041,6.412,1042,6.641,1043,7.267,1044,5.848]],["title/classes/Explorer.html",[0,0.253,1045,3.541]],["body/classes/Explorer.html",[0,0.294,2,0.879,3,0.102,4,0.09,5,0.09,8,0.295,9,0.863,12,1.203,13,2.522,14,2.971,17,0.453,19,0.963,20,0.009,21,0.69,22,0.394,23,0.809,27,3.419,30,0.934,31,0.156,33,2.502,35,0.946,36,1.356,39,0.969,49,0.113,50,2.172,58,1.356,60,1.37,70,2.03,79,0.007,80,0.007,99,3.176,213,3.074,216,1.288,222,1.938,364,3.579,451,2.802,617,2.711,1035,4.111,1040,3.382,1045,5.356,1046,4.507,1047,6.656,1048,6.531,1049,6.656,1050,6.656,1051,8.493,1052,5.108,1053,6.656,1054,5.108,1055,8.339,1056,6.656,1057,5.108,1058,6.656,1059,5.108,1060,4.111,1061,5.356,1062,5.108,1063,5.108,1064,5.356,1065,5.108,1066,5.108,1067,5.108,1068,5.108,1069,5.108,1070,5.108,1071,5.108,1072,5.108,1073,5.108,1074,4.507,1075,5.108]],["title/classes/Guild.html",[0,0.253,436,0.918]],["body/classes/Guild.html",[0,0.414,2,0.994,3,0.115,4,0.102,5,0.102,8,0.334,17,0.453,20,0.009,21,0.722,22,0.45,26,1.417,31,0.143,42,2.058,49,0.159,65,1.598,67,1.682,73,1.286,79,0.007,80,0.007,90,2.172,202,1.613,304,5.043,436,1.713,477,4.167,871,3.319,1076,4.649,1077,6.31,1078,5.792,1079,5.856,1080,5.776,1081,5.776,1082,5.776,1083,2.954,1084,3.319,1085,4.649,1086,3.319]],["title/controllers/GuildAutoDeleteChannelController.html",[81,1.488,1087,3.286]],["body/controllers/GuildAutoDeleteChannelController.html",[0,0.356,3,0.091,4,0.081,5,0.081,8,0.264,9,0.802,10,1.863,12,0.826,17,0.405,19,0.86,20,0.009,21,0.616,22,0.352,23,0.723,26,1.266,30,0.884,31,0.149,37,1.331,38,0.376,49,0.101,50,1.153,58,1.427,60,1.297,62,1.767,65,1.712,73,1.197,79,0.006,80,0.006,81,1.546,83,1.673,216,1.893,222,1.331,235,1.87,246,2.744,263,3.89,327,3.04,382,2.475,391,3.982,392,2.876,415,2.724,436,0.954,531,2.627,561,4.908,562,4.639,563,5.232,617,3.982,1087,4.618,1088,5.639,1089,5.168,1090,3.679,1091,7.515,1092,7.006,1093,6.183,1094,7.006,1095,4.572,1096,5.789,1097,4.572,1098,4.572,1099,4.572,1100,4.572,1101,4.572,1102,6.183,1103,6.622,1104,4.639,1105,4.034,1106,4.034,1107,3.415,1108,4.572,1109,4.572,1110,4.572,1111,5.232,1112,4.572,1113,7.006,1114,4.572,1115,4.034,1116,3.679,1117,4.572,1118,6.183]],["title/classes/GuildAutoDeleteChannelDto.html",[0,0.253,1096,3.083]],["body/classes/GuildAutoDeleteChannelDto.html",[0,0.416,2,1.002,3,0.116,4,0.103,5,0.103,8,0.336,17,0.418,20,0.009,22,0.413,26,1.307,31,0.156,42,2.074,49,0.128,73,1.242,79,0.007,80,0.007,90,2.188,202,1.62,302,3.755,303,2.605,382,2.594,405,2.212,477,3.755,502,2.212,504,4.024,875,3.494,1088,5.209,1089,5.178,1096,5.067,1111,4.347,1119,6.942,1120,4.685,1121,4.341,1122,7.868,1123,5.821,1124,5.821,1125,7.232,1126,7.232,1127,7.232,1128,6.381,1129,5.821,1130,5.821,1131,5.821,1132,5.821,1133,5.821]],["title/modules/GuildAutoDeleteChannelModule.html",[92,1.527,1134,3.083]],["body/modules/GuildAutoDeleteChannelModule.html",[0,0.293,3,0.101,4,0.09,5,0.09,16,2.368,20,0.009,31,0.174,35,0.943,36,1.037,38,0.418,40,1.679,49,0.112,79,0.007,80,0.007,83,2.43,92,2.565,94,2.351,95,2.351,96,2.513,97,2.513,98,2.351,99,3.527,100,3.413,110,3.278,111,2.513,112,1.863,114,2.701,123,2.701,134,2.429,142,2.513,317,2.808,376,4.596,377,4.261,378,3.976,382,1.679,383,2.808,390,3.816,391,3.524,392,4.178,436,1.695,1087,5.52,1088,5.186,1089,4.702,1104,5.891,1134,6.394,1135,4.492,1136,4.492,1137,4.492,1138,4.113,1139,5.242,1140,4.492,1141,4.492,1142,4.492,1143,4.097,1144,2.926]],["title/injectables/GuildAutoDeleteChannelService.html",[199,1.009,1104,2.914]],["body/injectables/GuildAutoDeleteChannelService.html",[0,0.242,3,0.083,4,0.074,5,0.074,8,0.243,9,0.757,10,1.853,12,1.054,13,2.074,14,2.807,15,3.698,16,2.059,17,0.44,19,0.823,20,0.009,21,0.59,22,0.336,23,0.692,30,0.846,31,0.156,33,2.194,35,0.778,36,0.856,37,1.223,38,0.345,39,0.797,40,1.385,49,0.093,50,1.69,51,1.88,58,1.189,60,1.496,62,1.986,65,1.678,73,1.107,77,1.254,79,0.006,80,0.006,199,1.338,200,1.718,202,1.307,203,2.45,214,1.88,215,1.718,216,1.471,222,1.223,319,2.414,327,2.531,355,2.943,382,2.597,391,4.179,415,1.924,436,1.217,504,3.892,568,5.148,587,2.643,588,3.138,1086,2.414,1088,5.715,1089,5.22,1091,6.714,1096,5.074,1104,3.863,1105,3.707,1106,3.707,1111,3.138,1139,5.082,1142,3.707,1145,3.381,1146,7.243,1147,4.696,1148,5.835,1149,4.201,1150,5.835,1151,4.201,1152,5.148,1153,3.707,1154,5.835,1155,4.201,1156,4.201,1157,4.201,1158,4.201,1159,2.643,1160,4.201,1161,4.201,1162,4.201,1163,4.201,1164,4.201,1165,4.201,1166,4.201,1167,4.201,1168,4.201,1169,3.381,1170,3.707,1171,4.201,1172,4.201,1173,4.201,1174,3.138,1175,4.201,1176,4.201,1177,4.201,1178,3.707,1179,3.707]],["title/classes/GuildChannelEditOptions.html",[0,0.253,489,2.914]],["body/classes/GuildChannelEditOptions.html",[0,0.37,2,0.561,3,0.065,4,0.058,5,0.058,8,0.188,17,0.432,20,0.009,21,0.658,22,0.454,23,0.865,26,1.352,31,0.115,39,0.618,48,2.463,49,0.072,65,0.664,72,2.598,73,1.26,79,0.005,80,0.005,90,1.225,196,0.904,202,1.088,216,1.225,230,2.05,231,2.99,259,3.526,280,2.446,290,1.956,300,2.157,301,4.628,302,3.967,303,1.458,342,4.128,348,2.046,360,2.046,405,1.486,415,2.904,416,2.433,417,2.05,418,3.404,419,2.622,420,1.666,421,6.022,422,2.622,423,2.433,424,2.433,425,2.157,426,2.622,427,6.022,429,2.157,430,1.872,431,4.777,432,2.622,436,0.68,437,2.157,439,2.622,442,2.283,443,2.622,446,3.204,447,3.628,449,2.622,451,3.041,453,1.956,455,4.809,456,2.622,458,4.07,460,3.217,461,2.622,464,2.433,465,2.283,466,2.622,467,3.655,469,2.622,470,2.283,471,1.872,473,2.622,477,4.217,478,4.675,479,3.655,480,2.622,481,2.622,482,4.708,483,3.655,484,4.675,485,4.675,486,2.107,487,2.622,488,2.622,489,3.846,490,2.174,491,2.622,492,3.628,493,3.056,494,3.91,495,3.217,496,4.675,497,2.622,498,3.404,499,3.91,875,1.956,981,2.875,986,3.91,997,2.875,1180,3.258,1181,3.258,1182,3.258,1183,3.258,1184,3.258,1185,3.258,1186,3.258,1187,3.258,1188,3.258,1189,3.258]],["title/controllers/GuildController.html",[81,1.488,1190,3.286]],["body/controllers/GuildController.html",[0,0.289,3,0.1,4,0.089,5,0.089,8,0.29,9,0.854,10,1.816,12,0.908,14,2.616,17,0.38,19,0.808,20,0.009,21,0.646,22,0.33,23,0.679,26,1.189,30,0.831,31,0.161,33,2.475,35,0.93,36,1.023,37,1.463,38,0.413,39,0.953,49,0.111,50,1.66,58,1.341,60,1.537,62,1.965,65,1.588,73,1.166,79,0.007,80,0.007,81,2.227,83,1.838,85,2.397,86,2.569,88,2.771,91,2.886,235,2.054,253,3.015,272,2.544,327,2.856,377,3.755,415,2.17,442,5.459,465,5.459,531,2.886,717,3.519,1143,4.042,1190,4.916,1191,4.432,1192,6.583,1193,6.583,1194,5.023,1195,7.792,1196,7.792,1197,5.023,1198,5.023,1199,5.297,1200,5.023,1201,4.042,1202,5.023,1203,5.023,1204,7.792,1205,7.792,1206,6.583,1207,5.023,1208,5.023,1209,5.023,1210,5.023,1211,5.023,1212,5.023,1213,5.023]],["title/classes/GuildDoesNotExistException.html",[0,0.253,1214,3.083]],["body/classes/GuildDoesNotExistException.html",[0,0.411,2,0.983,3,0.113,4,0.101,5,0.101,12,1.032,17,0.33,19,0.701,20,0.009,21,0.502,22,0.287,23,0.589,31,0.142,38,0.469,49,0.158,60,1.323,65,1.456,70,2.84,72,2.707,73,1.096,76,2.335,79,0.007,80,0.007,228,3.15,436,1.628,486,1.341,502,1.747,507,4.29,580,4.482,589,4.107,621,3.593,622,4.907,623,5.337,624,3.528,626,4.596,628,4.496,629,4.496,630,3.781,631,4.907,632,3.15,634,2.725,635,4.001,636,4.29,637,2.819,640,3.781,641,3.593,642,3.593,643,3.781,644,3.781,645,3.781,646,3.781,894,3.781,1214,5.465,1215,5.751,1216,5.465,1217,3.781,1218,3.593,1219,5.038,1220,5.038,1221,4.265,1222,5.038]],["title/classes/GuildDoesNotExistExceptionFilter.html",[0,0.253,1221,3.286]],["body/classes/GuildDoesNotExistExceptionFilter.html",[0,0.405,2,0.959,3,0.111,4,0.099,5,0.099,8,0.322,9,0.913,17,0.322,19,0.684,20,0.009,21,0.49,22,0.28,23,0.575,30,0.703,31,0.14,38,0.458,49,0.155,60,1.303,65,1.136,70,2.215,72,2.443,73,0.783,76,3.154,79,0.007,80,0.007,228,3.882,436,1.468,486,1.309,502,2.152,507,3.345,580,4.656,589,3.202,621,3.506,622,4.853,623,4.162,624,2.751,628,4.853,629,5.097,630,3.69,631,5.097,632,3.074,634,3.358,635,4.93,636,4.864,637,3.474,640,4.66,641,4.853,642,3.506,643,3.69,644,3.69,645,3.69,646,3.69,894,3.69,1214,5.676,1215,5.663,1216,5.404,1217,3.69,1218,3.506,1219,4.917,1220,4.917,1221,5.256,1222,4.917,1223,4.917]],["title/injectables/GuildMemberEvents.html",[199,1.009,1224,3.083]],["body/injectables/GuildMemberEvents.html",[0,0.161,3,0.055,4,0.049,5,0.049,8,0.161,9,0.56,10,1.853,12,0.781,13,1.378,14,2.424,15,3.281,16,1.691,17,0.423,19,0.835,20,0.009,21,0.624,22,0.356,23,0.702,26,1.229,30,0.859,31,0.158,33,1.624,35,0.517,36,0.569,37,0.813,38,0.229,39,0.529,40,0.92,42,0.995,48,0.794,49,0.062,50,1.622,51,1.249,55,3.042,58,1.494,60,1.393,61,3.499,62,2.233,63,2.463,64,3.499,65,1.077,66,3.027,67,1.539,72,0.969,73,0.743,74,3.042,76,2.433,77,0.833,78,2.463,79,0.004,80,0.004,85,2.522,134,1.332,142,1.378,196,2.171,199,0.991,200,1.142,202,0.968,203,2.012,214,1.249,215,1.142,216,1.333,222,1.732,234,1.539,252,2.703,348,1.819,377,3.628,378,2.839,382,1.424,383,1.54,405,1.321,409,1.956,415,0.92,436,0.583,490,2.364,503,1.956,570,2.86,588,2.085,617,1.481,714,1.289,860,2.085,861,3.702,887,1.676,894,1.848,906,2.463,966,3.742,1011,1.676,1032,2.085,1138,3.502,1144,1.604,1201,2.247,1224,3.027,1225,6.638,1226,2.463,1227,3.812,1228,4.32,1229,4.787,1230,4.32,1231,4.32,1232,4.32,1233,4.32,1234,4.32,1235,6.477,1236,4.32,1237,2.792,1238,4.32,1239,5.709,1240,4.32,1241,2.792,1242,3.477,1243,4.32,1244,2.792,1245,4.32,1246,4.32,1247,2.792,1248,4.32,1249,3.947,1250,2.792,1251,4.32,1252,5.285,1253,4.32,1254,2.792,1255,2.792,1256,4.32,1257,2.247,1258,2.593,1259,2.792,1260,2.247,1261,3.477,1262,2.792,1263,4.253,1264,2.792,1265,4.32,1266,2.463,1267,1.848,1268,2.247,1269,2.792,1270,2.463,1271,2.463,1272,3.227,1273,2.792,1274,2.463,1275,2.792,1276,2.792,1277,2.463,1278,2.792,1279,2.792,1280,2.463,1281,2.463,1282,2.463,1283,2.463,1284,2.792,1285,2.792,1286,2.247,1287,2.463,1288,2.792,1289,2.247,1290,2.792,1291,2.792,1292,2.792,1293,2.463,1294,2.247,1295,2.792,1296,4.32,1297,3.812,1298,2.792,1299,4.32,1300,2.792,1301,3.812,1302,3.812,1303,4.663,1304,2.463,1305,2.792,1306,6.803,1307,2.247,1308,2.792,1309,2.247,1310,2.792,1311,2.792,1312,2.792,1313,2.463,1314,2.792,1315,2.792,1316,2.792,1317,2.792,1318,2.792,1319,2.792,1320,2.792,1321,2.792,1322,2.463,1323,2.463,1324,2.463,1325,2.247,1326,2.792,1327,2.463,1328,2.792,1329,2.792,1330,2.463,1331,2.463,1332,2.247,1333,2.792,1334,2.792,1335,2.792,1336,2.792,1337,2.463,1338,2.792,1339,2.463,1340,2.792,1341,1.956,1342,4.32,1343,5.285,1344,2.792,1345,5.949,1346,2.792,1347,2.792,1348,2.792,1349,2.792,1350,2.792,1351,3.812,1352,2.463,1353,4.663,1354,2.247,1355,2.792,1356,2.792,1357,2.792,1358,4.32,1359,2.792,1360,2.792,1361,2.792,1362,2.792,1363,2.792,1364,2.792]],["title/injectables/GuildMessageHandler.html",[199,1.009,1365,3.083]],["body/injectables/GuildMessageHandler.html",[0,0.253,3,0.087,4,0.078,5,0.078,8,0.254,9,0.78,10,1.789,12,1.087,17,0.396,19,0.843,20,0.009,21,0.604,22,0.388,23,0.708,26,1.087,30,0.759,31,0.162,35,0.813,36,0.895,37,1.279,38,0.361,39,0.833,49,0.097,50,1.107,58,1.398,60,1.366,62,1.517,65,0.895,67,1.279,79,0.006,80,0.006,85,2.096,142,2.168,199,1.38,200,1.796,214,1.965,216,1.107,222,1.279,234,2.63,276,2.636,360,1.849,382,1.448,405,2.613,415,1.448,504,2.246,570,3.983,688,3.28,825,3.077,853,3.28,859,4.807,926,5.94,928,3.534,937,2.908,942,6.054,1083,2.246,1138,3.942,1144,2.524,1267,2.908,1304,3.875,1365,4.215,1366,5.94,1367,4.841,1368,6.016,1369,4.392,1370,4.392,1371,6.016,1372,6.016,1373,4.392,1374,6.016,1375,4.392,1376,6.222,1377,3.28,1378,4.392,1379,4.392,1380,3.534,1381,3.534,1382,3.534,1383,6.862,1384,4.392,1385,6.512,1386,5.512,1387,7.381,1388,3.875,1389,6.054,1390,4.392,1391,4.392,1392,4.392,1393,4.392,1394,6.016,1395,4.392,1396,4.392,1397,4.392,1398,4.392,1399,4.392,1400,4.392,1401,4.392,1402,6.016,1403,4.392,1404,4.392,1405,4.392,1406,4.392,1407,4.392,1408,4.392,1409,4.392,1410,4.392,1411,4.392]],["title/modules/GuildModule.html",[92,1.527,105,3.083]],["body/modules/GuildModule.html",[0,0.263,3,0.091,4,0.081,5,0.081,16,2.298,20,0.009,31,0.177,35,0.848,36,0.933,38,0.376,40,1.51,49,0.101,79,0.006,80,0.006,83,2.265,92,2.434,94,2.115,95,2.115,96,2.261,97,2.261,98,2.115,99,3.346,100,3.238,105,6.43,110,3.055,111,2.261,112,1.676,114,3.284,123,2.43,130,5.353,132,5.353,134,2.185,135,4.04,141,5.353,142,2.261,143,4.04,317,2.526,376,4.459,377,4.477,390,4.316,391,3.72,392,2.881,405,1.893,436,1.637,661,3.032,925,5.664,927,3.685,1088,4.098,1089,3.715,1134,5.664,1143,3.685,1190,5.236,1224,5.664,1365,5.664,1366,3.685,1412,4.04,1413,4.04,1414,4.04,1415,4.04,1416,5.664,1417,4.579,1418,4.579,1419,4.579,1420,6.189,1421,6.189,1422,4.622,1423,4.579,1424,3.685,1425,2.631,1426,4.04,1427,4.579]],["title/controllers/GuildRestrictedChannelController.html",[81,1.488,1428,3.286]],["body/controllers/GuildRestrictedChannelController.html",[0,0.392,3,0.135,4,0.121,5,0.121,20,0.009,31,0.135,38,0.56,49,0.15,79,0.008,80,0.008,81,2.304,83,2.492,382,2.246,390,4.985,391,3.614,415,2.621,436,1.421,531,3.914,1090,5.481,1428,5.937,1429,6.811]],["title/modules/GuildRestrictedChannelModule.html",[92,1.527,1416,3.083]],["body/modules/GuildRestrictedChannelModule.html",[0,0.338,3,0.117,4,0.104,5,0.104,16,2.458,20,0.009,31,0.169,35,1.088,36,1.198,38,0.483,40,1.938,49,0.13,79,0.007,80,0.007,83,2.663,92,2.743,94,2.715,95,2.715,96,2.902,97,2.902,98,2.715,99,3.771,100,3.65,110,3.592,111,2.902,112,2.151,114,3.119,123,3.119,317,3.242,376,5.005,382,1.938,390,4.746,391,3.119,392,3.698,436,1.518,1140,5.186,1141,5.186,1416,6.255,1428,5.902,1430,5.186,1431,5.186,1432,5.878]],["title/injectables/GuildRestrictedChannelService.html",[199,1.009,376,2.427]],["body/injectables/GuildRestrictedChannelService.html",[0,0.257,3,0.089,4,0.079,5,0.079,8,0.258,9,0.79,10,1.908,12,1.1,13,2.207,14,2.86,15,3.82,16,2.113,17,0.449,19,0.955,20,0.009,21,0.685,22,0.39,23,0.803,30,0.939,31,0.155,33,2.289,35,0.828,36,0.911,37,1.302,38,0.367,39,0.848,40,1.474,42,1.593,49,0.099,50,1.535,51,2,58,1.515,65,1.777,73,1.247,79,0.006,80,0.006,196,1.24,199,1.397,200,1.828,222,1.302,272,3.006,319,2.569,327,3.226,376,3.359,382,2.647,390,5.012,391,4.259,415,2.283,504,4.49,1083,3.803,1121,4.157,1145,3.597,1147,5.573,1152,3.944,1153,3.944,1159,2.812,1433,6.089,1434,6.089,1435,6.089,1436,4.47,1437,6.089,1438,4.47,1439,6.089,1440,4.47,1441,5.372,1442,5.984,1443,4.47,1444,4.47,1445,4.47,1446,4.47,1447,4.47,1448,4.47]],["title/injectables/GuildService.html",[199,1.009,377,2.25]],["body/injectables/GuildService.html",[0,0.127,3,0.044,4,0.039,5,0.039,8,0.128,9,0.465,10,1.835,12,0.648,14,2.307,15,2.877,16,1.482,17,0.403,19,0.828,20,0.009,21,0.614,22,0.338,23,0.696,26,0.399,27,1.657,30,0.974,31,0.122,33,1.349,35,0.409,36,0.45,37,0.643,38,0.182,39,0.419,40,0.728,42,0.787,48,1.482,49,0.049,50,1.758,51,0.988,54,1.65,55,1.835,58,1.421,60,1.504,62,1.849,65,1.611,67,1.045,72,2.247,73,1.19,74,1.835,76,1.467,77,1.932,79,0.004,80,0.004,195,1.949,196,0.613,197,2.154,199,0.823,200,0.903,212,3.654,214,0.988,215,0.903,216,1.315,234,2.19,235,0.903,272,2.216,276,3.688,294,2.317,319,2.062,327,0.958,346,2.887,355,4.536,356,1.949,357,4.601,360,2.196,376,2.877,377,1.835,390,2.062,391,1.172,392,1.39,405,2.063,415,2.135,420,2.933,430,2.062,436,1.197,442,3.654,446,1.979,451,1.907,465,4.305,486,0.519,504,3.566,587,1.39,659,1.949,661,3.453,663,1.65,664,1.949,681,1.269,688,3.895,800,1.778,828,2.027,966,2.257,999,1.39,1083,2.667,1086,2.603,1111,1.65,1115,3.165,1116,2.887,1121,2.719,1159,1.39,1199,5.611,1216,2.513,1229,4.197,1235,1.778,1271,3.165,1280,3.997,1282,1.949,1286,1.778,1289,1.778,1386,3.383,1441,1.949,1442,1.778,1449,1.949,1450,4.53,1451,4.53,1452,4.53,1453,4.53,1454,3.997,1455,3.588,1456,3.588,1457,1.778,1458,4.53,1459,2.209,1460,2.209,1461,6.145,1462,2.209,1463,4.197,1464,2.209,1465,2.209,1466,2.209,1467,2.209,1468,6.145,1469,4.589,1470,5.837,1471,3.895,1472,2.375,1473,4.53,1474,6.973,1475,6.145,1476,4.53,1477,5.421,1478,4.53,1479,6.746,1480,4.53,1481,3.997,1482,4.53,1483,6.145,1484,6.145,1485,4.53,1486,6.145,1487,4.53,1488,4.53,1489,4.53,1490,3.997,1491,2.887,1492,2.679,1493,2.679,1494,2.209,1495,2.209,1496,2.209,1497,5.215,1498,2.209,1499,3.165,1500,2.209,1501,3.588,1502,3.588,1503,3.588,1504,3.165,1505,3.588,1506,2.887,1507,3.588,1508,2.209,1509,3.588,1510,2.209,1511,1.949,1512,3.646,1513,2.209,1514,2.209,1515,3.588,1516,1.778,1517,1.949,1518,1.949,1519,1.949,1520,2.209,1521,2.209,1522,2.209,1523,2.209,1524,2.209,1525,2.209,1526,2.209,1527,2.209,1528,2.209,1529,2.209,1530,3.588,1531,5.215,1532,2.209,1533,1.949,1534,2.209,1535,4.601,1536,3.165,1537,3.588,1538,3.588,1539,4.53,1540,5.215,1541,2.887,1542,2.209,1543,3.588,1544,2.209,1545,2.209,1546,3.588,1547,3.588,1548,2.209,1549,4.53,1550,3.588,1551,2.209,1552,2.209,1553,2.209,1554,3.588,1555,2.209,1556,2.209,1557,2.209,1558,2.209,1559,2.209,1560,3.588,1561,2.209,1562,2.209,1563,2.209,1564,2.209,1565,2.209,1566,2.209,1567,3.588,1568,2.209,1569,3.588,1570,2.209,1571,2.209,1572,2.209,1573,2.209,1574,1.949,1575,2.209]],["title/controllers/GuildSettingsController.html",[81,1.488,1576,3.286]],["body/controllers/GuildSettingsController.html",[0,0.3,3,0.104,4,0.092,5,0.092,8,0.302,9,0.876,10,1.836,17,0.39,19,0.829,20,0.009,21,0.594,22,0.339,23,0.697,26,1.22,30,0.852,31,0.174,38,0.429,42,1.861,49,0.115,58,1.064,60,0.967,62,1.703,65,1.612,73,1.179,79,0.007,80,0.007,81,2.284,83,1.912,85,2.493,86,2.672,87,4.204,88,2.881,91,3.002,134,3.571,197,4.054,222,1.521,234,2.406,235,2.136,246,3.136,247,3.901,248,3.901,252,2.672,254,3.136,255,3.286,256,3.459,257,4.054,258,3.136,259,2.136,260,3.66,263,3.286,378,3.222,382,2.467,383,2.881,436,1.09,561,5.878,563,5.043,583,3.901,861,3.66,1576,5.043,1577,4.609,1578,5.958,1579,7.483,1580,4.609,1581,5.224,1582,5.224,1583,5.908,1584,5.224,1585,5.224,1586,5.224,1587,5.224,1588,5.224,1589,4.204,1590,4.204,1591,5.224,1592,5.224,1593,5.224,1594,5.224,1595,5.224]],["title/modules/GuildSettingsModule.html",[92,1.527,132,2.914]],["body/modules/GuildSettingsModule.html",[0,0.346,3,0.12,4,0.107,5,0.107,16,2.472,20,0.009,31,0.165,38,0.495,40,1.985,49,0.133,79,0.007,80,0.007,83,2.702,92,2.772,94,2.78,95,2.78,96,2.972,97,2.972,98,2.78,99,3.811,100,3.689,110,3.645,111,2.972,112,2.203,132,5.934,134,2.872,378,4.344,382,1.985,383,3.32,436,1.541,1576,5.965,1596,5.311,1597,6.019,1598,5.311,1599,6.019,1600,6.019]],["title/injectables/GuildSettingsService.html",[199,1.009,378,2.1]],["body/injectables/GuildSettingsService.html",[0,0.19,3,0.066,4,0.058,5,0.058,8,0.191,9,0.637,10,1.976,12,0.887,15,2.708,16,1.843,17,0.477,19,1.013,20,0.009,21,0.726,22,0.414,23,0.851,30,1.028,31,0.153,37,0.962,38,0.272,39,0.627,40,1.09,42,1.178,49,0.073,50,1.238,51,1.479,58,1.636,60,1.085,62,1.635,65,1.714,72,1.147,73,1.264,79,0.005,80,0.005,134,3.978,139,1.823,140,1.823,196,0.917,197,4.737,199,1.126,200,1.351,206,4.08,208,3.686,216,1.238,221,2.188,234,1.749,272,1.277,327,3.424,378,2.343,382,2.748,405,2.362,490,1.479,580,1.899,601,2.659,617,1.754,658,1.984,694,2.659,717,3.44,774,1.577,874,2.315,1121,1.984,1214,2.315,1216,2.315,1218,2.079,1457,2.659,1578,4.332,1580,4.332,1601,2.916,1602,5.858,1603,4.91,1604,4.91,1605,4.91,1606,4.91,1607,4.91,1608,4.91,1609,4.91,1610,4.91,1611,4.91,1612,3.305,1613,3.305,1614,5.858,1615,3.305,1616,4.91,1617,3.305,1618,4.91,1619,3.305,1620,4.91,1621,3.305,1622,4.91,1623,3.305,1624,4.91,1625,3.305,1626,3.305,1627,4.91,1628,3.305,1629,4.91,1630,3.305,1631,4.91,1632,3.305,1633,4.91,1634,3.305,1635,3.305,1636,2.916,1637,2.916,1638,2.315,1639,3.305,1640,2.916,1641,3.305,1642,3.305,1643,3.305,1644,3.305,1645,3.305,1646,3.305,1647,2.916,1648,3.305,1649,3.305,1650,3.305,1651,3.305,1652,3.305,1653,7.723,1654,3.305,1655,3.305,1656,3.305,1657,3.305,1658,3.305,1659,3.305,1660,3.305,1661,3.305,1662,6.485,1663,2.659,1664,3.305,1665,3.305,1666,2.659,1667,3.305,1668,3.305,1669,3.305,1670,3.305,1671,3.305,1672,3.305,1673,3.305,1674,3.305,1675,3.305]],["title/controllers/GuildUserController.html",[81,1.488,1676,3.286]],["body/controllers/GuildUserController.html",[0,0.387,3,0.103,4,0.092,5,0.092,8,0.3,9,0.873,10,1.633,12,0.939,14,2.66,17,0.3,19,0.638,20,0.009,21,0.695,22,0.261,23,0.536,26,0.939,30,0.656,31,0.172,33,2.53,35,0.962,36,1.059,37,1.513,38,0.427,39,0.986,49,0.115,50,1.697,58,1.059,60,0.962,62,1.31,65,1.666,67,2.174,73,1.177,79,0.007,80,0.007,81,2.276,83,1.902,85,2.48,86,2.658,88,2.866,91,2.986,142,3.322,222,1.96,234,2.398,235,2.125,246,3.12,252,3.442,253,3.12,263,3.269,382,2.461,436,1.084,871,4.289,1084,2.986,1107,3.881,1138,3.322,1144,2.986,1174,3.881,1267,3.441,1676,5.026,1677,4.585,1678,6.586,1679,4.585,1680,6.73,1681,5.197,1682,5.197,1683,5.026,1684,4.182,1685,4.585,1686,4.585,1687,7.464,1688,5.197,1689,5.197,1690,5.197,1691,6.73,1692,5.197,1693,5.197,1694,4.585,1695,4.585,1696,5.197,1697,5.197,1698,4.585]],["title/modules/GuildUserModule.html",[92,1.527,141,2.914]],["body/modules/GuildUserModule.html",[0,0.331,3,0.114,4,0.102,5,0.102,16,2.445,20,0.009,31,0.171,35,1.065,36,1.172,38,0.473,40,1.897,49,0.127,79,0.007,80,0.007,83,2.628,92,2.717,94,2.657,95,2.657,96,2.841,97,2.841,98,2.657,99,3.735,100,3.615,110,3.545,111,2.841,112,2.106,114,3.053,123,3.053,134,2.746,141,5.964,142,2.841,317,3.174,378,4.105,382,1.897,383,3.174,436,1.633,1138,4.468,1144,3.307,1676,5.846,1699,5.077,1700,5.077,1701,5.754,1702,5.754,1703,5.754]],["title/injectables/GuildUserService.html",[199,1.009,1138,2.172]],["body/injectables/GuildUserService.html",[0,0.128,3,0.044,4,0.039,5,0.039,8,0.129,9,0.469,10,1.947,12,0.653,14,2.316,15,1.994,16,1.491,17,0.458,19,0.962,20,0.009,21,0.689,22,0.393,23,0.808,26,0.653,30,0.989,31,0.135,33,1.359,35,0.413,36,0.454,37,0.649,38,0.183,39,0.423,40,0.735,42,0.795,49,0.049,50,1.891,51,0.998,54,1.666,55,2.332,58,1.576,60,1.253,62,2.184,64,3.817,65,1.787,66,3.675,67,2.529,68,1.795,72,0.774,73,1.275,77,0.666,79,0.004,80,0.004,134,1.064,139,1.23,140,1.23,142,3.951,197,2.737,199,0.829,200,0.912,210,1.968,214,0.998,215,0.912,216,1.15,234,2.922,252,2.948,272,3.092,276,1.339,294,1.141,319,2.078,327,0.968,346,1.795,348,3.027,378,2.503,382,2.638,383,1.23,420,2.682,436,1.094,490,0.998,587,1.403,661,1.477,814,1.477,860,1.666,1011,1.339,1064,4.221,1083,1.141,1086,1.282,1121,4.5,1138,1.785,1147,3.67,1159,2.275,1227,4.023,1229,4.221,1235,4.639,1242,1.795,1258,1.339,1286,1.795,1294,1.795,1297,1.968,1352,3.19,1376,1.795,1457,1.795,1463,4.967,1470,2.7,1477,3.19,1499,3.19,1511,1.968,1535,3.19,1536,1.968,1574,1.968,1638,3.675,1640,1.968,1704,1.795,1705,4.56,1706,4.56,1707,3.616,1708,3.616,1709,3.616,1710,4.56,1711,4.023,1712,3.616,1713,4.56,1714,3.616,1715,3.616,1716,4.56,1717,2.23,1718,2.23,1719,6.996,1720,2.23,1721,2.23,1722,2.23,1723,3.616,1724,2.23,1725,2.23,1726,2.23,1727,3.616,1728,2.23,1729,3.616,1730,2.23,1731,2.23,1732,2.23,1733,2.23,1734,2.23,1735,3.616,1736,2.23,1737,2.23,1738,5.245,1739,5.245,1740,4.628,1741,2.23,1742,3.616,1743,2.23,1744,3.616,1745,3.616,1746,2.23,1747,1.666,1748,2.23,1749,2.23,1750,2.23,1751,2.23,1752,2.23,1753,1.795,1754,2.23,1755,2.23,1756,2.23,1757,2.23,1758,2.23,1759,2.23,1760,3.917,1761,3.616,1762,2.23,1763,2.23,1764,2.23,1765,2.23,1766,2.23,1767,3.616,1768,2.23,1769,1.795,1770,2.23,1771,2.23,1772,2.23,1773,1.968,1774,2.23,1775,2.23,1776,2.23,1777,2.23,1778,2.23,1779,4.56,1780,3.616,1781,2.23,1782,2.23,1783,2.23,1784,2.23,1785,2.23]],["title/guards/HasRequiredRank.html",[257,2.641,1786,2.529]],["body/guards/HasRequiredRank.html",[0,0.253,3,0.088,4,0.078,5,0.078,8,0.254,9,0.782,10,1.504,12,1.089,16,2.326,17,0.348,19,0.74,20,0.009,21,0.53,22,0.302,23,0.622,30,0.761,31,0.159,36,0.897,37,1.283,38,0.362,40,1.452,42,1.569,49,0.097,50,1.863,51,1.971,55,4.184,58,1.228,60,1.479,62,1.111,64,2.916,65,0.897,67,2.001,77,1.314,79,0.006,80,0.006,196,2.05,199,1.383,202,0.987,203,2.324,216,1.863,222,1.755,235,1.801,249,3.464,252,3.958,254,3.618,256,2.916,257,3.618,258,4.125,259,3.165,327,1.911,360,1.855,451,2.538,486,1.416,502,1.347,617,3.199,632,2.429,634,2.877,637,3.393,855,4.797,858,4.436,862,3.618,1011,3.618,1040,3.991,1044,4.851,1258,4.436,1307,3.544,1341,4.223,1425,2.531,1472,2.916,1491,3.544,1541,3.544,1769,3.544,1786,4.247,1787,2.771,1788,3.544,1789,6.028,1790,5.318,1791,4.851,1792,6.028,1793,4.404,1794,7.992,1795,4.404,1796,4.404,1797,6.52,1798,6.028,1799,4.502,1800,5.318,1801,6.028,1802,5.318,1803,4.851,1804,4.404,1805,4.404,1806,4.404,1807,4.404,1808,4.404,1809,4.404,1810,3.544,1811,3.886,1812,3.886,1813,4.404,1814,3.886,1815,4.404,1816,4.404,1817,4.404,1818,4.404,1819,5.318,1820,3.886,1821,3.544,1822,3.886,1823,3.544,1824,3.886,1825,3.544]],["title/guards/IsModalInteractionGuard.html",[753,3.286,1786,2.529]],["body/guards/IsModalInteractionGuard.html",[0,0.362,3,0.125,4,0.111,5,0.111,8,0.364,9,0.984,17,0.364,19,0.773,20,0.009,21,0.554,22,0.316,23,0.65,29,2.908,30,0.795,31,0.151,38,0.518,39,1.194,49,0.139,58,1.283,60,1.166,79,0.008,80,0.008,451,3.195,502,2.321,637,3.109,753,5.667,755,4.555,855,5.076,858,5.195,862,4.555,863,3.962,1787,3.962,1826,6.695,1827,5.556,1828,6.297,1829,6.297,1830,6.297,1831,6.297]],["title/guards/IsUserUnlockedGuard.html",[859,3.083,1786,2.529]],["body/guards/IsUserUnlockedGuard.html",[0,0.328,3,0.113,4,0.101,5,0.101,8,0.329,9,0.926,10,1.705,12,1.29,17,0.412,19,0.876,20,0.009,21,0.628,22,0.358,23,0.736,30,0.719,31,0.155,37,1.66,38,0.468,39,1.081,48,1.62,49,0.126,50,1.437,58,1.454,60,1.055,62,1.437,79,0.007,80,0.007,134,2.72,199,1.637,222,1.66,234,2.543,363,3.275,378,3.898,382,1.879,383,3.144,405,2.663,502,1.743,624,2.814,637,2.814,852,6.1,853,5.82,854,4.587,855,4.285,856,5.029,858,4.903,859,5.001,860,4.257,861,5.001,862,4.285,863,3.586,864,3.586,865,3.993,866,5.029,867,5.029,1787,3.586,1832,5.029,1833,5.7,1834,5.7]],["title/controllers/JwtAuthController.html",[81,1.488,1835,3.286]],["body/controllers/JwtAuthController.html",[0,0.303,3,0.105,4,0.093,5,0.093,8,0.304,9,0.881,10,1.84,12,0.952,17,0.392,19,0.834,20,0.009,21,0.661,22,0.264,23,0.701,26,1.227,30,0.857,31,0.167,38,0.433,49,0.116,50,2.001,58,1.384,73,1.056,79,0.007,80,0.007,81,1.782,83,1.928,85,2.515,88,2.907,89,5.072,90,1.981,116,5.264,117,3.489,203,2.297,216,1.712,222,1.535,237,4.649,327,2.946,486,1.595,531,3.028,562,3.489,567,4.241,617,2.796,636,3.163,1663,4.241,1810,6.047,1835,5.072,1836,5.264,1837,4.649,1838,5.27,1839,5.992,1840,5.992,1841,5.27,1842,6.791,1843,5.27,1844,5.927,1845,5.27,1846,5.27,1847,6.791,1848,6.791,1849,5.27,1850,5.27,1851,4.496,1852,3.489,1853,4.649,1854,3.936,1855,5.27,1856,6.791,1857,5.992,1858,3.936,1859,5.27,1860,5.27,1861,5.27,1862,5.27,1863,5.27,1864,5.27,1865,5.27,1866,5.27,1867,5.27,1868,5.27,1869,5.27]],["title/injectables/JwtAuthGuard.html",[86,2.25,199,1.009]],["body/injectables/JwtAuthGuard.html",[0,0.392,3,0.135,4,0.121,5,0.121,20,0.009,31,0.158,38,0.56,49,0.15,79,0.008,80,0.008,86,4.066,199,1.824,200,2.785,253,4.088,624,3.925,1870,5.481,1871,7.014,1872,6.009,1873,4.509]],["title/modules/JwtAuthModule.html",[92,1.527,106,3.083]],["body/modules/JwtAuthModule.html",[0,0.299,3,0.103,4,0.092,5,0.092,16,2.382,20,0.009,31,0.176,35,0.964,36,1.061,38,0.428,40,1.716,49,0.115,79,0.007,80,0.007,83,2.466,92,2.593,94,2.404,95,2.404,96,2.57,97,2.57,98,2.404,99,3.565,100,3.45,106,6.336,110,3.326,111,2.57,112,1.905,114,2.762,123,2.762,317,2.871,1835,5.579,1836,3.647,1851,5.91,1852,4.946,1853,4.593,1858,3.888,1873,3.447,1874,4.593,1875,4.593,1876,4.593,1877,5.872,1878,5.872,1879,5.031,1880,5.206,1881,5.206,1882,5.206,1883,4.189,1884,6.738,1885,5.206,1886,4.189,1887,5.206,1888,6.738,1889,4.593,1890,5.206,1891,4.593,1892,5.206,1893,5.206,1894,4.593,1895,5.206]],["title/injectables/JwtAuthService.html",[199,1.009,1851,2.914]],["body/injectables/JwtAuthService.html",[0,0.216,3,0.075,4,0.066,5,0.066,8,0.217,9,0.699,10,1.851,12,0.974,17,0.439,19,0.896,20,0.009,21,0.642,22,0.381,23,0.753,30,0.87,31,0.159,35,0.695,38,0.309,39,0.712,49,0.083,50,1.973,55,1.92,58,1.404,60,1.351,62,1.59,67,2.212,70,1.492,73,1.189,79,0.005,80,0.005,116,5.481,117,2.486,153,3.313,196,1.912,199,1.236,200,1.535,202,1.207,203,2.33,214,1.68,215,1.535,216,1.84,220,1.581,222,2.006,234,2.455,272,1.451,327,2.338,436,0.784,562,2.486,617,3.346,631,2.362,636,3.785,714,1.734,774,1.792,1463,3.022,1589,3.022,1636,4.755,1747,4.025,1802,5.563,1836,5.481,1839,4.755,1840,5.563,1844,4.709,1851,3.569,1857,6.079,1858,2.804,1879,4.136,1883,3.022,1889,3.313,1891,4.755,1894,3.313,1896,3.313,1897,5.39,1898,5.39,1899,3.755,1900,7.594,1901,6.305,1902,5.39,1903,5.39,1904,3.755,1905,5.39,1906,3.755,1907,5.39,1908,3.755,1909,5.39,1910,3.755,1911,5.39,1912,6.305,1913,3.755,1914,6.305,1915,3.755,1916,3.313,1917,5.39,1918,5.39,1919,6.305,1920,3.755,1921,4.755,1922,5.39,1923,5.39,1924,5.39,1925,3.755,1926,3.755,1927,3.755,1928,3.022,1929,5.39,1930,3.755,1931,3.755,1932,3.755,1933,3.755,1934,3.755,1935,3.755,1936,3.755,1937,3.755,1938,3.755,1939,3.755,1940,3.313,1941,3.755,1942,5.39,1943,3.755,1944,3.755,1945,3.313,1946,3.755,1947,5.39,1948,5.39,1949,3.755,1950,3.755,1951,3.755,1952,3.755,1953,3.755,1954,3.755,1955,3.755,1956,3.313,1957,3.755,1958,3.755,1959,3.755,1960,3.755]],["title/injectables/JwtAuthStrategy.html",[199,1.009,1877,3.083]],["body/injectables/JwtAuthStrategy.html",[0,0.339,3,0.117,4,0.104,5,0.104,8,0.341,9,0.946,10,1.732,12,1.066,17,0.421,19,0.896,20,0.009,21,0.642,22,0.366,23,0.752,30,0.745,31,0.164,38,0.485,48,1.677,49,0.13,58,1.202,79,0.007,80,0.007,116,6.064,117,3.907,199,1.673,200,2.413,222,1.718,327,2.56,624,3.601,1217,3.907,1590,4.749,1747,4.407,1836,5.546,1852,3.907,1873,3.907,1877,5.11,1921,5.207,1961,5.207,1962,7.294,1963,5.87,1964,5.207,1965,5.901,1966,6.435,1967,5.901,1968,5.207,1969,5.207,1970,4.749,1971,5.207,1972,5.207,1973,5.901,1974,5.207,1975,5.207,1976,5.901,1977,5.901,1978,5.207]],["title/classes/LogEntry.html",[0,0.253,324,3.083]],["body/classes/LogEntry.html",[0,0.309,2,0.642,3,0.074,4,0.066,5,0.066,8,0.216,17,0.462,20,0.009,22,0.444,23,0.554,26,1.444,31,0.107,48,1.525,49,0.161,60,1.272,65,1.28,70,2.132,72,3.074,73,1.26,79,0.005,80,0.005,90,1.403,196,2.019,202,1.202,212,5.471,214,1.67,216,1.353,249,4.855,250,4.768,259,2.194,272,2.073,276,3.772,278,4.402,280,3.065,282,4.692,294,3.876,301,2.96,302,3.813,303,1.67,305,3.553,306,2.614,324,3.759,340,5.543,405,1.922,415,2.072,436,1.519,477,3.883,486,2.054,490,2.811,608,4.796,660,2.614,717,3.759,875,4.549,950,4.734,986,3.003,1074,4.734,1159,3.376,1492,5.131,1844,4.007,1979,2.787,1980,4.734,1981,5.366,1982,5.366,1983,3.732,1984,3.732,1985,6.87,1986,3.732,1987,5.366,1988,5.366,1989,4.734,1990,5.366,1991,3.732,1992,3.732,1993,5.366,1994,3.732,1995,4.734,1996,5.366,1997,3.732,1998,6.061,1999,4.318,2000,5.543,2001,5.366,2002,3.732,2003,5.366,2004,3.732,2005,5.366,2006,3.003,2007,3.292,2008,3.292,2009,4.734,2010,3.292,2011,3.292,2012,3.292,2013,3.292,2014,3.292,2015,4.734,2016,3.292,2017,3.292,2018,3.292,2019,3.003,2020,3.292,2021,3.292,2022,3.292,2023,3.292,2024,3.292,2025,3.292,2026,3.292,2027,3.292,2028,3.292,2029,2.614,2030,3.003,2031,3.732,2032,2.787,2033,3.292,2034,3.732]],["title/classes/LogEntryDto.html",[0,0.253,243,3.286]],["body/classes/LogEntryDto.html",[0,0.303,2,0.907,3,0.105,4,0.093,5,0.093,8,0.304,17,0.486,20,0.009,22,0.449,26,1.52,31,0.135,49,0.116,73,1.284,79,0.007,80,0.007,90,1.981,202,1.521,243,5.072,249,4.832,250,5.29,251,4.241,276,4.51,278,5.264,280,3.164,282,5.612,290,4.764,293,4.758,294,4.059,305,4.975,306,5.264,307,3.473,324,3.692,477,4.082,502,2.077,1079,6.28,1121,4.076,2035,7.548,2036,4.649,2037,5.27,2038,5.27,2039,5.27,2040,5.27,2041,5.27,2042,5.27]],["title/guards/MessageFromUserGuard.html",[1377,3.286,1786,2.529]],["body/guards/MessageFromUserGuard.html",[0,0.358,3,0.124,4,0.11,5,0.11,8,0.359,9,0.977,17,0.359,19,0.764,20,0.009,21,0.547,22,0.312,23,0.642,30,0.785,31,0.15,38,0.511,39,1.179,48,1.768,49,0.137,58,1.535,60,1.151,79,0.008,80,0.008,405,2.638,451,3.171,502,2.303,637,3.07,855,5.054,858,5.177,862,4.521,863,3.912,864,3.912,865,4.357,937,4.987,1377,5.625,1787,3.912,2043,5.487,2044,6.219,2045,5.487]],["title/guards/MessageIsDmGuard.html",[936,3.286,1786,2.529]],["body/guards/MessageIsDmGuard.html",[0,0.355,3,0.123,4,0.109,5,0.109,8,0.356,9,0.972,17,0.356,19,0.757,20,0.009,21,0.543,22,0.309,23,0.636,30,0.778,31,0.149,38,0.507,39,1.17,48,1.753,49,0.136,58,1.527,60,1.142,77,1.841,79,0.008,80,0.008,199,1.719,405,2.632,451,3.155,502,1.886,637,3.045,855,5.04,858,5.04,862,4.498,863,3.88,864,3.88,865,4.321,936,5.597,937,4.962,1787,3.88,2045,5.442,2046,5.442,2047,6.168]],["title/classes/ModAnnouncementDto.html",[0,0.253,2048,3.083]],["body/classes/ModAnnouncementDto.html",[0,0.411,2,0.983,3,0.113,4,0.101,5,0.101,8,0.33,17,0.413,20,0.009,21,0.502,22,0.431,26,1.291,31,0.142,35,1.057,36,1.164,48,1.623,49,0.126,72,2.481,73,1.149,77,1.704,79,0.007,80,0.007,202,1.601,235,3.19,259,3.343,301,3.942,302,3.722,303,2.555,348,3.284,405,2.694,486,1.832,680,4.732,685,4.596,820,3.722,828,3.197,836,4.265,840,5.038,844,4.265,845,5.751,2048,5.007,2049,6.882,2050,5.038,2051,7.8,2052,5.337,2053,5.711,2054,5.711,2055,7.146,2056,7.146,2057,5.711,2058,5.711,2059,4.265,2060,4.265,2061,4.596,2062,5.711,2063,5.038]],["title/classes/ModRequestFlow.html",[0,0.253,1422,3.286]],["body/classes/ModRequestFlow.html",[0,0.154,2,0.462,3,0.053,4,0.048,5,0.048,8,0.155,9,0.544,10,1.829,12,0.757,13,1.325,14,2.385,16,1.988,17,0.418,19,0.859,20,0.009,21,0.669,22,0.363,23,0.721,26,1.052,29,3.23,30,0.845,31,0.139,33,1.575,35,0.497,36,0.547,37,0.782,38,0.221,39,0.509,40,0.885,49,0.059,50,1.057,51,1.201,58,1.578,60,1.51,62,2.146,65,1.287,67,0.782,72,1.789,73,0.724,74,2.143,76,1.714,77,1.885,79,0.004,80,0.004,142,1.325,185,2.369,202,0.939,203,1.97,214,1.201,215,2.108,216,1.953,222,1.501,228,1.481,272,1.619,280,1.13,307,1.373,327,1.818,360,1.13,382,0.885,415,1.382,423,2.005,430,1.543,436,0.56,455,2.005,483,1.689,493,1.689,587,1.689,657,2.636,658,1.611,665,1.881,669,2.516,670,3.091,673,3.413,679,2.16,687,1.881,699,1.689,720,1.777,728,7.039,729,5.069,742,1.611,743,2.775,744,2.369,745,2.005,746,3.13,747,3.13,748,2.005,755,2.516,770,2.369,773,3.413,774,2.779,776,3.697,778,3.13,790,2.005,795,2.005,798,4.081,814,3.413,830,2.369,831,2.16,940,1.689,941,2.005,966,2.636,1006,2.16,1086,3.63,1138,3.452,1144,1.543,1159,1.689,1258,2.516,1267,1.777,1303,3.697,1337,2.369,1354,2.16,1422,3.13,1424,5.983,1425,4.273,1512,3.372,2064,6.56,2065,2.369,2066,5.155,2067,4.191,2068,4.191,2069,4.191,2070,4.191,2071,3.697,2072,4.191,2073,4.191,2074,2.685,2075,2.685,2076,4.191,2077,2.685,2078,4.191,2079,2.685,2080,4.191,2081,2.685,2082,4.191,2083,5.825,2084,2.685,2085,3.372,2086,4.687,2087,2.685,2088,4.191,2089,2.685,2090,2.685,2091,2.369,2092,4.191,2093,2.16,2094,3.372,2095,3.372,2096,2.16,2097,2.16,2098,2.685,2099,5.155,2100,2.685,2101,5.388,2102,2.685,2103,2.685,2104,2.685,2105,2.685,2106,2.685,2107,2.685,2108,2.685,2109,2.685,2110,4.191,2111,2.685,2112,2.685,2113,5.155,2114,4.548,2115,4.191,2116,4.191,2117,4.191,2118,4.191,2119,2.685,2120,2.685,2121,2.685,2122,5.139,2123,2.369,2124,4.191,2125,6.317,2126,2.685,2127,4.191,2128,2.685,2129,2.685,2130,2.369,2131,2.685,2132,2.685,2133,2.685,2134,2.685,2135,4.191,2136,2.685,2137,2.685,2138,2.685,2139,2.685,2140,3.697,2141,2.685,2142,4.191,2143,2.685,2144,2.685,2145,2.685,2146,2.16,2147,2.16,2148,2.16,2149,2.685,2150,2.685,2151,2.685,2152,2.685,2153,2.685,2154,2.685,2155,2.685,2156,2.685,2157,4.191,2158,2.369,2159,2.369,2160,2.685,2161,2.685,2162,2.685,2163,2.685,2164,2.685,2165,2.685,2166,2.685,2167,2.685,2168,2.369,2169,2.685,2170,2.685,2171,2.685,2172,3.697,2173,2.685,2174,3.372,2175,4.191,2176,2.005,2177,4.191,2178,4.191,2179,4.191,2180,2.369,2181,2.685,2182,1.777,2183,2.685,2184,2.685,2185,2.685,2186,2.685,2187,2.685,2188,2.685,2189,2.369,2190,2.16,2191,2.16,2192,2.685]],["title/modules/ModerationModule.html",[92,1.527,130,2.914]],["body/modules/ModerationModule.html",[0,0.339,3,0.117,4,0.104,5,0.104,16,2.459,20,0.009,31,0.174,35,1.09,36,1.2,38,0.484,40,1.942,49,0.13,79,0.007,80,0.007,83,2.666,92,2.745,94,2.72,95,2.72,96,2.908,97,2.908,98,2.72,99,3.774,100,3.364,110,3.596,111,2.908,112,2.155,114,3.866,123,3.125,130,5.866,136,5.728,317,3.249,529,5.907,2193,5.89,2194,5.89,2195,5.89,2196,5.89,2197,5.907,2198,5.907,2199,5.89,2200,5.89,2201,5.89,2202,5.89]],["title/classes/MumVoiceCommandChatInput.html",[0,0.253,386,3.083]],["body/classes/MumVoiceCommandChatInput.html",[0,0.338,2,0.729,3,0.084,4,0.075,5,0.075,8,0.245,9,0.761,10,1.67,17,0.245,19,0.52,20,0.009,21,0.593,22,0.338,23,0.437,25,4.01,26,0.766,27,3.357,29,3.11,30,0.535,31,0.144,32,3.324,34,3.869,35,1.087,36,0.863,38,0.348,39,0.803,45,3.114,46,3.373,47,2.248,48,1.204,49,0.129,58,1.196,60,1.247,62,1.991,70,2.332,74,3.444,76,2.754,77,2.416,79,0.006,80,0.006,216,1.698,234,2.399,238,3.886,348,1.784,386,4.112,387,2.968,405,2.335,415,1.935,471,2.435,486,0.995,669,2.543,670,4.05,680,2.805,698,3.692,714,3.11,720,3.886,729,2.968,740,2.805,742,2.543,745,3.164,746,4.383,747,4.383,748,3.164,752,2.968,755,3.523,761,2.968,774,3.864,778,3.164,790,3.164,795,3.164,798,2.968,820,2.801,828,1.896,959,3.41,1218,2.665,1367,5.85,1386,4.383,2048,5.093,2061,4.723,2085,3.41,2086,4.723,2097,3.41,2146,3.41,2147,3.41,2148,3.41,2203,4.723,2204,3.41,2205,3.738,2206,4.718,2207,4.237,2208,3.164,2209,5.178,2210,3.738,2211,3.738,2212,5.178,2213,3.41,2214,3.738,2215,5.941,2216,5.419,2217,5.941,2218,5.178,2219,5.178,2220,5.178,2221,3.164,2222,6.355,2223,5.178,2224,3.41,2225,3.738,2226,3.738,2227,3.738,2228,3.738,2229,3.738,2230,3.738,2231,3.738,2232,3.41,2233,3.738,2234,3.738,2235,2.805,2236,3.738,2237,3.738,2238,3.41,2239,3.738,2240,3.738,2241,3.41,2242,3.738,2243,5.941,2244,3.738,2245,3.738]],["title/classes/MumVoiceCommandUi.html",[0,0.253,387,3.083]],["body/classes/MumVoiceCommandUi.html",[0,0.332,2,0.712,3,0.082,4,0.073,5,0.073,8,0.239,9,0.749,10,1.76,17,0.334,19,0.709,20,0.009,21,0.633,22,0.361,23,0.596,25,3.184,26,1.043,27,3.323,29,3.323,30,0.729,31,0.143,32,3.282,34,3.821,35,1.069,36,0.843,38,0.34,39,0.785,45,3.063,46,3.317,47,2.195,48,1.176,49,0.127,58,1.176,60,1.231,62,1.977,70,2.294,74,3.4,76,2.719,77,2.401,79,0.006,80,0.006,216,1.677,234,2.369,238,3.822,348,1.742,386,2.899,387,4.045,405,2.315,415,1.903,471,2.378,486,0.972,669,2.484,670,4.016,680,2.739,698,3.632,714,3.071,720,3.822,729,4.045,740,2.739,742,2.484,745,3.09,746,4.312,747,4.312,748,3.09,752,2.899,755,3.465,761,2.899,774,3.839,778,3.09,790,3.09,795,3.09,798,2.899,820,2.755,828,1.851,959,3.33,1218,2.603,1367,5.79,1386,4.312,2048,4.045,2061,4.646,2071,5.094,2085,4.646,2086,5.79,2097,3.33,2146,3.33,2147,3.33,2148,3.33,2203,5.351,2204,3.33,2205,3.651,2206,2.899,2208,3.09,2209,6.348,2210,3.651,2211,3.651,2212,5.094,2213,3.33,2214,3.651,2215,5.866,2216,5.351,2217,5.866,2218,5.094,2219,5.094,2220,5.094,2221,3.09,2222,6.308,2223,5.094,2224,3.33,2225,3.651,2226,3.651,2227,3.651,2228,3.651,2229,3.651,2230,3.651,2231,3.651,2232,3.33,2233,3.651,2234,3.651,2235,2.739,2236,3.651,2237,3.651,2238,3.33,2239,3.651,2240,3.651,2241,3.33,2242,3.651,2243,5.866,2244,3.651,2245,3.651,2246,4.138,2247,4.138]],["title/classes/PermissionOverwrite.html",[0,0.253,458,3.083]],["body/classes/PermissionOverwrite.html",[0,0.397,2,0.648,3,0.075,4,0.067,5,0.067,8,0.217,17,0.217,20,0.009,21,0.607,22,0.452,26,0.68,31,0.125,39,0.714,48,2.406,49,0.083,65,0.767,72,2.873,73,1.264,79,0.005,80,0.005,90,1.415,196,1.044,202,1.21,216,0.949,230,2.368,231,3.016,259,3.426,280,1.585,290,2.26,300,2.492,301,4.745,302,4.074,303,1.684,342,4.028,360,2.274,405,1.651,415,2.887,416,2.811,417,2.368,418,3.783,419,3.029,420,1.925,421,5.551,422,3.029,423,2.811,424,2.811,425,2.492,426,3.029,427,5.551,429,2.492,430,2.163,431,4.906,432,3.029,435,3.321,436,0.785,437,2.492,439,3.029,442,2.637,443,3.029,446,3.483,447,4.033,449,3.029,451,2.904,453,2.26,455,4.033,456,3.029,458,4.833,460,4.18,461,3.029,464,2.811,465,2.637,466,3.029,467,3.397,469,3.029,470,2.637,471,2.163,473,3.029,477,4.282,478,5.081,479,3.972,480,3.029,481,3.029,482,4.925,483,3.397,484,4.345,485,5.081,486,2.102,487,4.345,488,3.029,489,3.575,490,1.684,491,3.029,492,2.811,493,2.368,494,3.029,495,2.492,496,3.029,497,3.029,498,2.637,499,3.029,2248,3.764]],["title/classes/PingCommand.html",[0,0.253,380,3.286]],["body/classes/PingCommand.html",[0,0.349,2,1.044,3,0.121,4,0.107,5,0.107,8,0.351,9,0.962,12,1.341,13,2.996,14,3.105,17,0.429,19,0.745,20,0.009,21,0.653,22,0.304,23,0.626,26,1.096,27,3.702,30,0.766,31,0.147,32,3.663,33,2.79,35,1.123,36,1.236,39,1.151,45,3.22,47,3.22,48,1.725,49,0.134,50,1.53,58,1.236,73,1.043,79,0.007,80,0.007,222,1.767,380,5.541,486,1.425,1272,4.532,2249,5.354,2250,8.35,2251,6.068,2252,6.068,2253,8.015,2254,6.068,2255,6.068,2256,5.354,2257,6.068,2258,6.068]],["title/injectables/PrismaService.html",[16,1.251,199,1.009]],["body/injectables/PrismaService.html",[0,0.35,3,0.121,4,0.108,5,0.108,8,0.351,9,0.964,10,1.931,16,2.112,17,0.429,19,0.747,20,0.009,21,0.535,22,0.305,23,0.627,30,0.938,31,0.148,38,0.5,42,2.167,49,0.134,62,1.873,79,0.007,80,0.007,199,1.704,200,2.486,502,1.86,624,3.667,1042,4.893,2259,5.365,2260,8.022,2261,7.429,2262,8.718,2263,7.429,2264,8.356,2265,6.08,2266,6.08,2267,6.08,2268,6.08,2269,6.08,2270,6.08]],["title/guards/ReactedMemberIsModOrHigherGuard.html",[1249,3.286,1786,2.529]],["body/guards/ReactedMemberIsModOrHigherGuard.html",[0,0.317,3,0.11,4,0.098,5,0.098,8,0.318,9,0.906,10,1.679,12,1.263,17,0.404,19,0.858,20,0.009,21,0.615,22,0.351,23,0.721,30,0.696,31,0.152,37,1.605,38,0.453,39,1.045,48,2.181,49,0.122,50,1.39,58,1.644,60,1.421,62,1.935,77,1.645,79,0.007,80,0.007,142,2.721,196,2.129,199,1.603,222,1.605,234,2.49,382,1.817,405,2.137,502,1.686,637,2.721,855,4.844,858,4.844,861,4.896,862,4.195,863,3.467,864,3.467,887,3.308,1011,3.308,1138,3.984,1144,3.167,1239,5.624,1249,5.219,1257,6.176,1258,4.844,1267,3.649,1787,3.467,1832,4.863,2271,4.863,2272,5.511,2273,5.511,2274,5.511,2275,5.511,2276,5.511,2277,5.511,2278,5.511,2279,5.511,2280,5.511,2281,4.863,2282,5.511,2283,5.511]],["title/injectables/RefreshJwtGuard.html",[199,1.009,1854,3.286]],["body/injectables/RefreshJwtGuard.html",[0,0.39,3,0.135,4,0.12,5,0.12,20,0.009,31,0.158,38,0.557,49,0.15,79,0.008,80,0.008,199,1.819,200,2.773,624,3.914,1854,5.922,1870,5.456,1871,6.996,1872,5.982,1873,4.489,1886,6.381,2284,5.982]],["title/injectables/RefreshJwtStrategy.html",[199,1.009,1878,3.083]],["body/injectables/RefreshJwtStrategy.html",[0,0.334,3,0.115,4,0.103,5,0.103,8,0.335,9,0.936,10,1.719,12,1.048,17,0.417,19,0.886,20,0.009,21,0.635,22,0.362,23,0.744,30,0.732,31,0.163,38,0.477,48,1.648,49,0.128,58,1.182,79,0.007,80,0.007,116,6.038,117,3.839,196,1.609,199,1.655,200,2.371,222,1.689,327,2.516,624,3.562,1217,3.839,1590,4.666,1747,4.331,1852,5.2,1873,3.839,1878,5.055,1886,5.806,1963,5.806,1964,5.116,1966,6.366,1968,5.116,1969,6.93,1970,4.666,1971,6.93,1972,5.116,1974,5.116,1975,5.116,1978,5.116,2285,6.93,2286,5.116,2287,5.799,2288,5.799,2289,5.799,2290,5.799]],["title/classes/RestrictedChannelDto.html",[0,0.253,2291,3.541]],["body/classes/RestrictedChannelDto.html",[0,0.428,2,1.051,3,0.121,4,0.108,5,0.108,8,0.353,17,0.43,20,0.009,22,0.42,26,1.346,31,0.16,42,2.175,49,0.135,73,1.176,79,0.007,80,0.007,90,2.295,202,1.668,231,2.982,302,3.554,303,2.732,382,2.65,477,3.835,482,4.685,502,2.278,504,4.11,875,3.665,895,4.913,1120,4.913,1121,4.471,1442,4.913,2291,5.993,2292,7.091,2293,8.037,2294,6.105,2295,6.105]],["title/controllers/RoleController.html",[81,1.488,2197,3.286]],["body/controllers/RoleController.html",[0,0.191,3,0.066,4,0.059,5,0.059,8,0.192,9,0.639,10,1.806,12,0.6,14,2.093,17,0.375,19,0.798,20,0.009,21,0.572,22,0.414,23,0.67,26,1.174,30,0.82,31,0.16,33,1.852,35,0.614,36,0.676,37,0.967,38,0.273,39,0.629,42,1.183,49,0.073,50,1.242,58,1.197,60,1.432,61,4.985,62,1.95,65,1.682,73,1.215,79,0.005,80,0.005,81,1.123,83,1.215,85,1.584,86,1.697,88,1.831,89,3.679,90,1.248,91,1.907,139,1.831,140,1.831,203,1.666,206,3.099,208,2.088,216,0.837,221,2.198,222,1.434,234,2.756,235,1.357,252,1.697,253,1.992,254,1.992,255,2.088,256,2.198,257,2.957,258,1.992,259,1.357,260,2.325,263,3.695,319,2.831,348,1.398,430,3.375,436,1.723,486,2.007,490,4.003,528,4.387,531,1.907,549,5.23,550,6.223,551,6.876,552,4.727,555,2.671,561,4.115,562,3.261,563,2.479,565,5.587,566,6.357,567,2.671,583,2.479,585,5.23,586,5.775,587,4.088,607,5.095,969,5.275,995,4.727,1007,5.418,1025,4.863,1027,4.115,1089,3.526,1159,3.099,1332,6.223,2197,3.679,2296,2.671,2297,5.874,2298,5.874,2299,4.926,2300,5.874,2301,3.319,2302,7.273,2303,3.319,2304,3.319,2305,3.319,2306,3.319,2307,6.417,2308,3.319,2309,3.319,2310,3.319,2311,3.319,2312,3.319,2313,3.319,2314,3.319,2315,3.319,2316,3.319,2317,3.319,2318,3.319,2319,2.929,2320,3.319,2321,3.319,2322,3.319,2323,3.319,2324,3.319,2325,3.319,2326,3.319,2327,3.319,2328,5.874,2329,3.319,2330,4.926,2331,4.926,2332,3.319,2333,3.319,2334,3.319,2335,3.319,2336,3.319]],["title/classes/RoleResponse.html",[0,0.253,1007,3.083]],["body/classes/RoleResponse.html",[0,0.291,2,0.448,3,0.052,4,0.046,5,0.046,8,0.151,17,0.458,20,0.009,21,0.648,22,0.454,26,1.432,31,0.1,39,0.776,48,2.394,49,0.057,60,0.758,61,1.725,72,2.4,73,1.263,77,0.777,79,0.004,80,0.004,90,0.979,100,1.203,202,1.133,214,1.166,216,1.445,231,2.941,259,3.012,272,1.007,280,1.097,290,1.564,300,1.725,301,3.95,302,3.667,303,1.166,342,3.95,348,1.097,360,3.236,417,3.918,425,4.124,429,2.71,430,2.352,431,5.173,436,1.494,437,2.71,446,2.258,451,3.525,453,4.151,460,1.725,470,4.015,477,4.083,479,4.159,482,3.918,486,2.088,490,3.952,607,2.868,608,1.564,656,2.868,666,2.097,825,1.825,875,3.969,877,4.069,895,4.069,897,5.501,916,4.937,924,1.946,969,2.868,970,1.946,971,5.32,972,5.928,973,5.928,974,5.161,975,5.928,976,3.612,978,2.299,979,2.299,982,4.461,984,3.612,985,3.612,987,2.299,988,2.299,989,2.299,993,3.612,995,3.294,998,2.299,999,1.639,1000,2.299,1001,1.825,1005,3.612,1006,2.097,1007,3.542,1008,2.71,1009,3.612,1010,4.069,1011,3.035,1012,5.565,1013,3.612,1014,5.565,1015,3.612,1016,4.069,1017,2.299,1018,2.299,1019,2.299,1020,2.299,1021,2.299,1022,2.299,1023,2.097,1024,2.299,1025,3.542,1026,2.299,1027,2.868,1028,1.946,1029,2.097,1030,2.097,1031,2.299,1032,1.946,2337,2.605,2338,2.605,2339,2.605,2340,2.605,2341,2.605,2342,2.605,2343,2.605,2344,2.605,2345,2.605,2346,2.605,2347,2.605,2348,2.605,2349,2.605,2350,2.605]],["title/controllers/SelfController.html",[81,1.488,2351,3.286]],["body/controllers/SelfController.html",[0,0.302,3,0.104,4,0.093,5,0.093,8,0.303,9,0.878,10,1.64,17,0.303,19,0.644,20,0.009,21,0.461,22,0.263,23,0.541,26,0.947,30,0.854,31,0.163,35,1.466,37,1.527,38,0.431,49,0.116,50,1.322,58,1.068,67,2.183,72,2.749,73,1.053,79,0.007,80,0.007,81,2.535,83,1.918,85,2.502,86,2.681,87,4.219,88,2.891,91,3.012,196,2.479,222,1.527,234,2.412,235,2.144,272,2.615,486,1.59,531,3.012,1008,4.481,1084,3.012,1272,5.055,1425,3.889,1678,5.971,1679,4.625,1683,3.915,1685,4.625,1797,6.988,1799,5.055,1879,4.499,2351,5.055,2352,4.625,2353,7.495,2354,7.921,2355,5.447,2356,6.768,2357,6.374,2358,8.398,2359,5.242,2360,5.971,2361,5.971,2362,6.768,2363,4.625,2364,5.242,2365,4.625,2366,5.242,2367,5.242,2368,5.242,2369,5.242]],["title/classes/SelfDto.html",[0,0.253,1084,2.529]],["body/classes/SelfDto.html",[0,0.409,2,0.973,3,0.112,4,0.1,5,0.1,8,0.327,17,0.471,20,0.009,21,0.717,22,0.451,26,1.472,31,0.141,42,2.016,49,0.157,65,1.153,67,2.262,73,1.283,79,0.007,80,0.007,90,2.127,202,1.592,289,4.991,304,4.977,348,2.382,436,1.7,477,4.148,871,4.463,1076,4.552,1077,4.552,1078,4.552,1079,5.8,1083,2.893,1084,4.082,1085,5.717,1086,4.463,2370,5.657,2371,5.657,2372,5.657,2373,5.657]],["title/classes/SelfDto-1.html",[0,0.211,814,2.427,1084,2.107]],["body/classes/SelfDto-1.html",[0,0.326,2,0.975,3,0.113,4,0.1,5,0.1,8,0.327,17,0.485,20,0.009,21,0.684,22,0.448,26,1.517,31,0.141,42,2.019,49,0.125,65,1.584,67,2.264,73,1.279,79,0.007,80,0.007,90,2.131,202,1.593,252,3.975,382,2.825,477,4.089,871,4.467,1078,5.724,1079,6.271,1083,2.898,1084,4.087,1085,5.724,2374,5,2375,5.667,2376,5.667,2377,5.667,2378,7.113,2379,5.667,2380,5.667]],["title/injectables/SelfService.html",[199,1.009,1879,2.641]],["body/injectables/SelfService.html",[0,0.242,3,0.084,4,0.075,5,0.075,8,0.243,9,0.758,10,1.725,12,1.056,14,2.584,15,4,16,2.061,17,0.388,19,0.824,20,0.009,21,0.67,22,0.337,23,0.693,30,1.04,31,0.161,33,2.198,35,1.585,36,0.858,37,1.227,38,0.346,39,0.799,41,5.403,42,1.501,49,0.093,50,1.921,51,1.885,58,1.191,60,0.78,62,1.062,65,0.858,67,2.354,72,2.517,79,0.006,80,0.006,146,3.717,196,2.53,199,1.341,200,1.723,222,1.702,234,2.584,235,2.391,246,2.529,247,3.146,248,3.146,272,2.802,436,1.59,447,4.366,486,1.577,634,2.79,871,2.421,887,2.529,1077,3.39,1084,2.421,1086,4.167,1174,4.366,1289,3.39,1694,5.158,1695,5.158,1698,3.717,1879,3.509,2032,4.366,2206,4.096,2281,3.717,2357,4.705,2361,5.158,2363,3.717,2381,3.717,2382,4.705,2383,5.158,2384,5.846,2385,5.846,2386,4.213,2387,4.213,2388,5.846,2389,4.213,2390,7.883,2391,5.846,2392,5.846,2393,5.158,2394,5.846,2395,4.213,2396,5.158,2397,5.846,2398,5.158,2399,5.846,2400,4.213,2401,4.213,2402,4.213,2403,4.213,2404,4.213,2405,4.213,2406,4.213,2407,4.213,2408,4.213,2409,4.213,2410,4.213,2411,4.213]],["title/classes/SendDirectMessageToUserException.html",[0,0.253,2412,3.083]],["body/classes/SendDirectMessageToUserException.html",[0,0.403,2,0.954,3,0.11,4,0.098,5,0.098,12,1.001,17,0.32,19,0.68,20,0.009,21,0.488,22,0.278,23,0.572,31,0.139,38,0.456,49,0.155,60,1.298,65,1.429,67,2.355,70,3.057,73,1.197,76,2.266,79,0.007,80,0.007,196,2.314,228,3.057,405,2.353,436,1.156,486,1.302,502,1.695,507,4.21,580,4.421,621,3.487,622,4.412,624,3.462,626,4.46,628,4.412,629,4.412,630,3.669,631,4.84,632,3.057,634,2.645,636,4.21,637,2.736,640,3.669,641,3.487,642,3.487,643,3.669,644,3.669,645,3.669,646,3.669,714,2.559,820,2.645,828,3.138,1008,3.669,1217,3.669,1425,3.185,2412,5.39,2413,5.237,2414,5.746,2415,6.187,2416,4.03,2417,5.644,2418,4.89,2419,4.89,2420,4.89,2421,4.139,2422,4.89]],["title/classes/SendDirectMessageToUserExceptionFilter.html",[0,0.253,2421,3.286]],["body/classes/SendDirectMessageToUserExceptionFilter.html",[0,0.398,2,0.935,3,0.108,4,0.096,5,0.096,8,0.314,9,0.898,17,0.314,19,0.667,20,0.009,21,0.478,22,0.273,23,0.56,30,0.686,31,0.138,38,0.446,49,0.153,60,1.282,65,1.107,67,2.016,70,3.029,73,0.973,76,3.117,79,0.007,80,0.007,196,2.227,228,3.819,405,2.331,436,1.133,486,1.276,502,2.118,507,3.261,580,4.612,621,3.417,622,3.417,624,2.681,628,4.795,629,5.05,630,3.596,631,5.05,632,2.996,634,3.304,636,4.818,637,3.418,640,4.584,641,4.795,642,3.417,643,3.596,644,3.596,645,3.596,646,3.596,714,2.509,820,2.592,828,2.43,1008,4.584,1217,3.596,1223,4.792,1425,3.979,2412,5.623,2413,5.171,2414,5.692,2415,4.792,2416,3.121,2417,4.371,2418,6.109,2419,6.109,2420,4.792,2421,5.171,2422,4.792]],["title/classes/SetFirstMessageUICommand.html",[0,0.253,402,3.286]],["body/classes/SetFirstMessageUICommand.html",[0,0.302,2,0.902,3,0.104,4,0.093,5,0.093,8,0.303,9,0.878,10,1.64,12,1.223,13,2.588,14,2.992,16,2.429,17,0.391,19,0.831,20,0.009,21,0.66,22,0.376,23,0.698,26,0.947,27,3.462,29,2.421,30,0.662,31,0.157,32,3.341,33,2.544,35,0.97,36,1.068,37,1.527,38,0.431,39,0.994,40,1.728,45,2.782,46,3.012,49,0.116,50,1.707,51,2.345,58,1.068,60,0.97,62,1.89,64,3.471,65,1.068,67,1.527,77,2.02,79,0.007,80,0.007,222,1.527,272,2.026,402,5.055,403,5.745,404,6.124,405,2.568,658,4.063,669,3.147,670,3.591,698,3.298,774,2.502,1309,4.219,1385,5.971,1389,4.625,2208,3.915,2224,4.219,2423,6.032,2424,4.219,2425,5.971,2426,5.242,2427,5.971,2428,6.988,2429,5.242,2430,4.625,2431,5.242,2432,5.971,2433,5.242]],["title/classes/SettingsChanged.html",[0,0.253,1638,3.083]],["body/classes/SettingsChanged.html",[0,0.296,2,0.887,3,0.102,4,0.091,5,0.091,8,0.298,9,0.868,12,1.209,17,0.471,19,0.822,20,0.009,21,0.589,22,0.395,23,0.69,30,0.65,31,0.148,38,0.423,42,1.836,49,0.114,65,1.703,72,2.901,73,1.236,79,0.007,80,0.007,197,4.462,202,1.499,203,2.759,213,3.091,215,3.48,218,3.547,220,2.169,231,2.906,382,2.756,451,3.434,490,3.74,502,2.047,506,3.551,507,3.093,513,3.551,515,2.635,518,2.842,1638,4.689,1647,5.905,1753,6.727,2434,4.546,2435,8.51,2436,6.693,2437,5.152,2438,5.152,2439,5.152,2440,6.693,2441,6.693,2442,5.152,2443,5.152]],["title/classes/SettingsDto.html",[0,0.253,1583,3.286]],["body/classes/SettingsDto.html",[0,0.351,2,0.77,3,0.089,4,0.079,5,0.079,8,0.259,17,0.5,20,0.009,22,0.456,26,1.564,31,0.138,42,1.595,49,0.099,73,1.308,79,0.006,80,0.006,90,1.683,197,2.687,202,1.366,301,4.812,302,4.163,303,2.003,304,6.112,382,2.876,502,1.864,531,3.983,1121,3.659,1583,4.552,2444,3.95,2445,6.115,2446,6.115,2447,6.115,2448,6.93,2449,6.115,2450,6.115,2451,6.115,2452,6.115,2453,6.115,2454,6.93,2455,8.656,2456,4.477,2457,4.477,2458,4.477,2459,4.477,2460,4.477,2461,4.477,2462,4.477,2463,4.477,2464,4.477,2465,4.477,2466,4.477]],["title/classes/SlowmodeDisabled.html",[0,0.253,523,2.914]],["body/classes/SlowmodeDisabled.html",[0,0.404,2,0.789,3,0.091,4,0.081,5,0.081,8,0.265,9,0.804,12,1.268,17,0.453,19,0.761,20,0.009,21,0.545,22,0.394,23,0.639,30,0.579,31,0.123,38,0.377,49,0.155,65,1.771,67,2.043,73,1.273,79,0.006,80,0.006,196,1.272,202,1.388,203,2.797,213,3.47,218,3.745,220,1.931,231,2.882,420,2.345,436,1.464,451,3.482,467,3.898,495,4.975,500,4.102,501,3.425,502,2.298,503,4.916,504,4.507,505,5.647,506,3.288,507,3.719,513,3.987,515,2.345,516,4.102,517,6.492,518,4.461,519,6.509,520,4.986,521,4.986,522,3.87,523,4.646,524,3.425,525,4.986,526,3.691,527,3.56,528,3.425,2467,6.196,2468,4.586,2469,4.586,2470,4.586]],["title/classes/SlowmodeEnabled.html",[0,0.253,516,2.914]],["body/classes/SlowmodeEnabled.html",[0,0.4,2,0.776,3,0.09,4,0.08,5,0.08,8,0.261,9,0.795,12,1.257,17,0.465,19,0.752,20,0.009,21,0.539,22,0.404,23,0.632,30,0.569,31,0.122,38,0.371,49,0.154,65,1.766,67,2.026,73,1.271,79,0.006,80,0.006,196,1.251,202,1.372,203,2.785,213,3.447,218,3.724,220,1.899,231,3.026,420,2.307,436,1.452,451,3.467,467,3.854,495,5.547,500,4.056,501,3.368,502,2.283,503,4.874,504,4.496,505,5.599,506,3.251,507,3.677,513,3.96,515,2.307,516,4.606,517,6.473,518,4.44,519,6.477,520,4.93,521,4.93,522,3.837,523,4.056,524,3.368,525,4.93,526,3.63,527,3.52,528,3.368,2471,6.126,2472,4.51,2473,4.51,2474,4.51,2475,4.51]],["title/classes/SpecialCommand.html",[0,0.253,410,3.286]],["body/classes/SpecialCommand.html",[0,0.231,2,0.692,3,0.08,4,0.071,5,0.071,8,0.232,9,0.734,10,1.433,17,0.433,19,0.695,20,0.009,21,0.576,22,0.376,23,0.584,25,3.919,26,0.727,27,3.024,29,2.613,30,0.714,31,0.154,32,2.794,34,3.252,35,1.048,36,0.819,38,0.465,39,0.763,47,2.134,48,1.143,49,0.089,58,1.526,60,0.744,62,1.014,73,1.164,79,0.006,80,0.006,196,1.116,202,1.268,214,3.179,215,2.678,234,2.016,238,3.747,410,4.226,471,4.083,486,0.945,498,3.965,658,2.414,700,2.817,740,2.662,752,2.817,761,2.817,814,3.747,949,3.965,2114,3.548,2176,4.226,2182,4.705,2206,4.587,2476,3.548,2477,6.548,2478,6.548,2479,6.548,2480,6.548,2481,5.659,2482,5.659,2483,5.659,2484,5.659,2485,5.659,2486,4.554,2487,4.021,2488,5.659,2489,5.659,2490,5.659,2491,5.659,2492,5.659,2493,5.659,2494,4.554,2495,5.659,2496,5.659,2497,5.659,2498,5.659,2499,4.021,2500,8.147,2501,5.659,2502,7.188,2503,7.768,2504,5.659,2505,5.659,2506,5.659,2507,7.106,2508,5.718,2509,5.659,2510,4.021,2511,4.021,2512,5.307,2513,4.021,2514,5.659,2515,6.548,2516,6.548,2517,4.021,2518,3.236,2519,4.021,2520,3.548,2521,3.548,2522,3.548,2523,3.236,2524,3.236,2525,4.554,2526,4.554,2527,4.021,2528,4.554,2529,3.548,2530,4.021,2531,3.548,2532,4.021,2533,4.021,2534,4.021,2535,4.021,2536,4.021,2537,3.548,2538,5.718,2539,4.021,2540,7.106,2541,7.106,2542,7.106,2543,7.106,2544,5.659,2545,4.021,2546,4.021,2547,4.021,2548,4.021,2549,4.021,2550,4.021,2551,4.021,2552,3.548]],["title/modules/TasksModule.html",[92,1.527,107,3.083]],["body/modules/TasksModule.html",[0,0.307,3,0.106,4,0.094,5,0.094,16,2.398,20,0.009,31,0.173,35,0.988,36,1.087,38,0.439,40,1.759,49,0.118,79,0.007,80,0.007,92,2.862,94,2.464,95,2.464,96,2.634,97,2.634,98,2.464,99,3.607,100,2.464,107,6.374,110,3.379,111,2.634,112,1.952,114,2.831,123,2.831,134,2.546,142,2.634,317,2.943,376,4.654,377,4.315,378,4.026,382,2.492,383,2.943,390,3.934,391,2.831,392,3.357,409,3.738,486,1.253,1138,4.165,1139,5.308,1144,3.066,2553,5.335,2554,5.335,2555,5.335,2556,6.039,2557,6.845,2558,6.845,2559,6.845,2560,5.112,2561,6.039,2562,5.335]],["title/injectables/TasksService.html",[199,1.009,1139,2.768]],["body/injectables/TasksService.html",[0,0.17,3,0.059,4,0.052,5,0.052,8,0.17,9,0.584,10,1.782,12,0.814,14,2.578,16,2.056,17,0.402,19,0.854,20,0.009,21,0.698,22,0.226,23,0.465,26,1.106,30,0.878,31,0.158,33,1.694,35,0.546,36,0.601,37,0.858,38,0.242,39,0.559,40,0.972,42,1.05,49,0.065,50,1.663,51,1.319,55,3.13,58,1.247,60,1.133,62,1.928,74,2.796,76,1.842,77,0.88,79,0.005,80,0.005,112,1.079,129,2.372,139,1.626,140,1.626,142,1.455,196,1.517,199,1.033,200,1.206,203,1.524,206,3.851,208,3.44,215,1.842,216,1.824,221,1.952,222,1.592,235,1.206,252,2.304,272,1.139,294,1.508,307,2.304,319,3.518,342,1.626,360,2.777,377,3.556,382,0.972,409,2.065,415,1.485,420,2.304,436,1.277,486,1.058,522,1.626,556,3.975,570,2.983,652,2.601,656,2.065,657,1.855,658,1.77,660,3.156,661,4.366,662,2.601,665,2.065,675,2.202,688,4.083,690,2.372,692,2.601,693,3.975,694,3.625,695,3.975,696,2.601,697,2.601,699,1.855,828,2.739,966,2.834,974,3.156,1040,2.983,1083,2.796,1086,2.589,1128,3.975,1138,3.022,1139,2.834,1144,1.694,1169,3.625,1178,6.382,1179,6.382,1199,3.625,1201,2.372,1267,1.952,1268,5.307,1287,3.975,1307,2.372,1351,2.601,1354,2.372,1454,5.401,1469,3.364,1471,2.202,1472,2.983,1493,3.364,1506,4.926,1512,2.372,1516,2.372,1517,2.601,1518,2.601,1519,2.601,1686,4.824,1760,3.364,1791,3.625,1928,2.372,2101,2.372,2122,2.601,2130,2.601,2158,2.601,2159,2.601,2168,2.601,2191,3.625,2355,3.625,2382,3.625,2396,3.975,2556,5.401,2560,3.364,2561,3.975,2563,2.372,2564,4.505,2565,4.505,2566,4.505,2567,3.625,2568,6.953,2569,6.121,2570,6.953,2571,4.505,2572,2.948,2573,6.595,2574,2.948,2575,4.505,2576,4.505,2577,3.625,2578,2.948,2579,3.975,2580,5.467,2581,3.975,2582,2.948,2583,2.948,2584,2.948,2585,2.948,2586,2.948,2587,2.948,2588,2.948,2589,4.505,2590,6.121,2591,2.948,2592,3.975,2593,4.505,2594,4.505,2595,7.46,2596,4.505,2597,3.975,2598,4.505,2599,4.505,2600,1.564,2601,2.601,2602,2.601,2603,2.948,2604,2.948,2605,2.948,2606,2.948,2607,2.948,2608,4.505,2609,2.948,2610,2.601,2611,2.948,2612,2.948,2613,2.948,2614,2.948,2615,6.121,2616,2.372,2617,2.948,2618,1.77,2619,2.202,2620,2.601,2621,2.948,2622,2.948,2623,2.948,2624,2.948,2625,2.948,2626,2.948,2627,2.601,2628,2.948,2629,2.948,2630,2.948,2631,2.948,2632,4.505]],["title/classes/TicketSystemSetupCommand.html",[0,0.253,412,3.286]],["body/classes/TicketSystemSetupCommand.html",[0,0.306,2,0.915,3,0.106,4,0.094,5,0.094,8,0.307,9,0.886,10,1.651,12,1.234,13,2.625,14,3.003,17,0.395,19,0.839,20,0.009,21,0.664,22,0.343,23,0.705,25,4.392,26,0.961,27,3.485,29,3.154,30,0.671,31,0.15,32,3.372,33,2.568,34,3.925,35,0.984,36,1.083,39,1.008,45,2.821,47,2.821,48,1.511,49,0.117,50,1.341,62,1.722,74,2.719,76,2.174,77,2.038,79,0.007,80,0.007,216,1.341,222,1.548,319,3.055,405,2.089,412,5.101,415,1.753,486,1.249,670,3.624,720,4.522,742,3.191,743,3.52,765,3.97,773,3.52,774,3.601,783,3.97,820,2.537,939,3.725,940,3.345,941,3.97,949,4.785,960,4.278,965,4.278,2101,5.496,2213,4.278,2216,4.278,2221,3.97,2235,4.522,2256,4.691,2633,6.657,2634,4.691,2635,7.545,2636,5.316,2637,5.316,2638,5.316,2639,5.316,2640,4.691,2641,5.316,2642,4.278,2643,5.316,2644,5.316,2645,4.691,2646,5.316,2647,4.691,2648,5.316,2649,5.316]],["title/classes/TimeOutCommand.html",[0,0.253,384,3.286]],["body/classes/TimeOutCommand.html",[0,0.231,2,0.692,3,0.08,4,0.071,5,0.071,8,0.232,9,0.734,10,1.433,12,1.023,13,1.985,14,2.768,17,0.327,19,0.695,20,0.009,21,0.659,22,0.284,23,0.584,25,3.919,26,0.727,27,2.613,29,2.613,30,0.508,31,0.165,32,2.794,33,2.127,34,3.252,35,1.048,36,0.819,38,0.465,39,0.763,45,2.134,46,2.311,47,2.134,48,1.143,49,0.089,50,1.427,58,1.153,60,1.315,62,1.888,70,2.249,74,2.894,76,2.314,77,1.689,79,0.006,80,0.006,139,2.218,140,2.218,196,2.155,206,4.47,208,4.119,215,1.644,216,2.117,222,1.648,238,3.747,294,3.972,360,1.693,384,4.226,446,2.218,486,0.945,617,2.134,657,3.56,658,2.414,669,2.414,670,3.003,673,4.335,675,4.226,679,3.236,680,2.662,698,2.53,699,2.53,700,2.817,714,2.613,740,2.662,742,2.414,743,2.662,752,2.817,761,2.817,773,2.662,774,1.919,783,3.003,821,3.548,822,3.548,823,3.548,824,3.548,831,3.236,864,2.53,939,2.817,940,2.53,941,3.003,965,3.236,966,2.53,999,2.53,1001,2.817,1341,2.817,1353,3.548,2029,4.978,2052,3.003,2059,3.003,2060,3.003,2182,2.662,2206,4.587,2222,5.718,2235,2.662,2416,3.252,2518,3.236,2520,3.548,2521,3.548,2522,3.548,2529,3.548,2531,3.548,2577,4.554,2581,3.548,2600,2.134,2601,3.548,2616,3.236,2619,4.226,2620,4.993,2642,3.236,2650,3.548,2651,6.548,2652,4.021,2653,4.021,2654,5.307,2655,4.021,2656,4.021,2657,4.021,2658,2.311,2659,3.252,2660,4.021,2661,4.021,2662,4.021,2663,7.106,2664,5.659,2665,6.548,2666,4.021,2667,6.548,2668,4.021,2669,3.548,2670,4.021,2671,3.548,2672,6.548,2673,4.021,2674,3.548,2675,3.548,2676,3.548,2677,3.548,2678,3.548,2679,4.021,2680,4.021,2681,4.021,2682,4.021,2683,5.659,2684,3.548,2685,3.548,2686,4.021,2687,4.021,2688,4.021,2689,4.021,2690,3.548,2691,4.021]],["title/classes/UnverifyByRoleCommand.html",[0,0.253,2692,3.541]],["body/classes/UnverifyByRoleCommand.html",[0,0.294,2,0.879,3,0.102,4,0.09,5,0.09,8,0.295,9,0.863,10,1.118,12,1.203,13,2.522,14,2.971,15,4.083,16,2.229,17,0.384,19,0.817,20,0.009,21,0.651,22,0.334,23,0.687,25,4.326,26,0.923,27,3.419,30,0.645,31,0.162,32,3.286,33,2.502,35,0.946,36,1.041,37,1.488,38,0.42,39,0.969,40,1.684,41,4.111,42,1.82,44,4.507,47,2.711,48,1.452,49,0.113,50,1.678,51,2.286,54,3.815,55,2.612,56,4.507,57,4.507,58,1.041,60,0.946,61,4.407,62,1.867,65,1.041,66,3.579,67,1.488,68,5.356,72,2.31,73,0.718,79,0.007,80,0.007,213,2.359,272,2.572,319,2.936,490,2.286,740,3.382,1313,4.507,2692,5.356,2693,6.531,2694,4.507,2695,6.656,2696,5.108,2697,5.108,2698,5.108,2699,6.656,2700,5.108,2701,5.108,2702,5.108,2703,5.108,2704,5.108,2705,5.108,2706,5.108,2707,5.108,2708,5.108,2709,5.108,2710,5.108,2711,5.108,2712,5.108,2713,5.108,2714,5.108]],["title/classes/UserBanEvent.html",[0,0.253,2715,2.529]],["body/classes/UserBanEvent.html",[0,0.441,2,0.664,3,0.077,4,0.068,5,0.068,8,0.223,9,0.713,12,1.157,17,0.426,19,0.675,20,0.009,21,0.484,22,0.37,23,0.567,30,0.487,31,0.109,38,0.317,49,0.169,65,1.823,67,2.558,70,3.379,73,1.297,79,0.006,80,0.006,112,2.012,202,1.232,203,2.815,213,3.643,218,3.848,220,1.626,231,2.486,280,3.731,307,1.975,436,1.599,502,2.412,506,2.918,513,4.185,515,1.975,518,4.69,522,3.033,527,4.886,600,4.405,681,2.219,714,2.539,820,1.842,2416,2.219,2600,2.918,2618,2.318,2658,3.16,2659,3.16,2715,3.16,2716,2.429,2717,4.883,2718,5.498,2719,3.861,2720,3.861,2721,3.861,2722,4.883,2723,2.556,2724,2.429,2725,2.219,2726,2.556,2727,3.64,2728,3.64,2729,3.64,2730,3.64,2731,3.16,2732,2.429]],["title/controllers/UserController.html",[81,1.488,2198,3.286]],["body/controllers/UserController.html",[0,0.144,3,0.05,4,0.044,5,0.044,8,0.145,9,0.516,10,1.807,12,0.453,14,1.758,17,0.376,19,0.799,20,0.009,21,0.572,22,0.365,23,0.671,26,1.176,30,0.821,31,0.161,33,1.494,35,0.465,36,0.511,37,0.731,38,0.206,39,0.476,42,0.894,48,0.713,49,0.055,50,1.002,55,3.128,58,0.81,60,1.348,62,2.098,65,1.706,66,1.758,67,2.466,73,1.227,74,1.283,76,1.625,79,0.004,80,0.004,81,0.849,83,0.918,85,1.198,86,1.283,88,1.384,89,2.968,90,0.943,91,1.442,112,0.918,139,1.384,140,1.384,196,2.422,203,1.344,206,2.5,208,1.579,216,1.918,221,1.662,222,1.157,230,1.579,234,2.757,235,1.026,246,1.506,247,1.874,248,1.874,252,1.283,253,1.506,254,1.506,255,1.579,256,1.662,257,2.386,258,1.506,259,1.026,260,1.758,263,3.848,294,1.283,348,1.673,405,0.768,415,1.85,436,1.747,464,1.874,483,1.579,486,1.818,493,1.579,531,1.442,549,4.922,550,6.228,551,6.228,552,4.517,555,3.198,562,1.662,565,5.485,566,5.485,572,2.968,573,1.874,574,2.214,580,1.442,583,1.874,585,5.236,586,4.859,587,3.848,588,2.968,589,2.284,600,3.515,601,4.517,607,3.932,610,4.354,611,2.02,612,2.02,616,2.214,617,2.109,632,1.384,660,2.784,661,2.631,680,1.662,681,2.284,714,1.159,783,1.874,820,1.198,828,1.123,868,3.685,871,1.442,872,2.214,873,2.214,874,1.758,887,2.962,922,3.685,923,3.685,1083,2.033,1103,2.214,1170,2.214,1293,3.507,1294,2.02,1322,2.214,1330,2.214,1331,2.214,1332,2.02,1425,3.225,1516,2.02,1711,4.354,1760,4.192,1773,2.214,1810,3.198,2029,3.457,2030,3.198,2123,3.507,2182,1.662,2198,2.968,2235,1.662,2412,1.758,2413,1.874,2414,1.874,2518,2.02,2600,2.109,2618,2.962,2642,2.02,2671,2.214,2674,2.214,2675,2.214,2676,2.214,2677,2.214,2690,2.214,2715,1.442,2724,2.5,2725,1.442,2731,1.442,2732,2.5,2733,2.214,2734,4.935,2735,4.935,2736,4.935,2737,4.935,2738,4.935,2739,2.51,2740,2.51,2741,2.51,2742,2.51,2743,2.51,2744,2.51,2745,2.51,2746,2.51,2747,2.51,2748,2.51,2749,2.51,2750,2.51,2751,4.935,2752,3.974,2753,3.974,2754,3.198,2755,2.51,2756,2.51,2757,2.51,2758,2.51,2759,3.974,2760,2.51,2761,2.51,2762,2.51,2763,2.51,2764,2.51,2765,2.51,2766,2.51,2767,2.51,2768,2.51,2769,2.51,2770,2.51,2771,2.51,2772,2.51,2773,2.51,2774,2.51,2775,2.51,2776,2.51,2777,2.51,2778,2.51,2779,5.612,2780,2.51,2781,2.51,2782,2.51,2783,2.51,2784,5.612,2785,5.612,2786,2.51,2787,2.51,2788,2.51,2789,2.51,2790,2.51,2791,2.51,2792,2.51,2793,2.51,2794,2.51,2795,3.974,2796,2.214,2797,2.51,2798,2.51,2799,2.51,2800,2.51,2801,3.974,2802,2.51,2803,2.51,2804,2.51,2805,2.51,2806,2.51,2807,2.51,2808,2.51,2809,2.51,2810,2.51]],["title/classes/UserInfoUiCommand.html",[0,0.253,399,3.286]],["body/classes/UserInfoUiCommand.html",[0,0.243,2,0.726,3,0.161,4,0.075,5,0.075,8,0.244,9,0.759,10,1.726,12,1.057,13,2.083,14,2.81,15,3.228,16,2.299,17,0.388,19,0.825,20,0.009,21,0.712,22,0.364,23,0.693,26,0.762,27,3.103,29,1.948,30,0.739,31,0.144,32,2.889,33,2.2,35,0.781,36,0.86,37,1.229,38,0.347,39,0.8,40,1.391,45,2.239,46,2.424,49,0.093,50,1.476,51,1.888,58,1.607,60,1.46,62,2.079,64,2.793,65,1.607,67,1.704,73,1.108,74,2.158,76,1.725,77,2.005,79,0.006,80,0.006,196,1.624,215,2.747,216,1.064,222,1.229,231,1.503,249,2.424,278,2.956,327,2.539,342,3.228,353,3.722,399,4.37,405,2.561,415,1.391,420,2.158,436,0.88,589,3.363,657,3.681,658,2.533,669,2.533,670,3.565,673,4.804,675,4.37,687,2.956,698,3.681,699,2.654,774,2.013,1083,2.993,1309,3.395,1325,3.395,1740,3.722,1814,3.722,2019,3.395,2208,3.151,2241,3.395,2423,5.839,2424,3.395,2425,5.163,2427,5.163,2428,6.402,2430,3.722,2432,5.928,2684,3.722,2811,5.852,2812,4.219,2813,5.852,2814,4.219,2815,5.852,2816,4.219,2817,4.219,2818,4.219,2819,4.219,2820,4.219,2821,4.219,2822,4.219,2823,4.219,2824,4.219,2825,4.219,2826,3.722,2827,4.219,2828,4.219,2829,4.219,2830,4.219,2831,4.219,2832,4.219,2833,4.219,2834,4.219,2835,4.219]],["title/classes/UserKickEvent.html",[0,0.253,2725,2.529]],["body/classes/UserKickEvent.html",[0,0.441,2,0.664,3,0.077,4,0.068,5,0.068,8,0.223,9,0.713,12,1.157,17,0.426,19,0.675,20,0.009,21,0.484,22,0.37,23,0.567,30,0.487,31,0.109,38,0.317,49,0.169,65,1.823,67,2.558,70,3.379,73,1.297,79,0.006,80,0.006,112,2.012,202,1.232,203,2.815,213,3.643,218,3.848,220,1.626,231,2.486,280,3.731,307,1.975,436,1.599,502,2.412,506,2.918,513,4.185,515,1.975,518,4.69,522,3.033,527,4.886,600,4.405,681,2.219,714,2.539,820,1.842,2416,2.219,2600,2.918,2618,2.318,2658,3.16,2659,3.16,2715,2.219,2716,2.429,2717,4.883,2722,4.883,2723,2.556,2724,2.429,2725,3.16,2726,2.556,2727,3.64,2728,3.64,2729,3.64,2730,3.64,2731,3.16,2732,2.429,2836,5.498,2837,3.861,2838,3.861,2839,3.861]],["title/modules/UserModule.html",[92,1.527,108,3.083]],["body/modules/UserModule.html",[0,0.318,3,0.153,4,0.098,5,0.098,16,2.421,20,0.009,31,0.166,35,1.423,36,1.127,38,0.455,40,1.824,49,0.122,79,0.007,80,0.007,83,2.563,92,3.002,94,2.555,95,2.555,96,2.731,97,2.731,98,2.555,99,3.668,100,3.55,108,6.189,110,3.458,111,2.731,112,2.024,114,2.935,123,2.935,196,2.363,317,3.051,486,1.299,634,3.343,828,3.134,999,4.407,1083,3.582,1704,5.637,1799,5.231,1879,5.404,2351,5.741,2365,4.881,2840,4.881,2841,5.532,2842,4.881,2843,5.532,2844,7.005,2845,7.005,2846,6.18,2847,7.005,2848,5.532]],["title/classes/UserPurgeEvent.html",[0,0.253,2731,2.529]],["body/classes/UserPurgeEvent.html",[0,0.441,2,0.664,3,0.077,4,0.068,5,0.068,8,0.223,9,0.713,12,1.157,17,0.426,19,0.675,20,0.009,21,0.484,22,0.37,23,0.567,30,0.487,31,0.109,38,0.317,49,0.169,65,1.823,67,2.558,70,3.379,73,1.297,79,0.006,80,0.006,112,2.012,202,1.232,203,2.815,213,3.643,218,3.848,220,1.626,231,2.486,280,3.731,307,1.975,436,1.599,502,2.412,506,2.918,513,4.185,515,1.975,518,4.69,522,3.033,527,4.886,600,4.405,681,2.219,714,2.539,820,1.842,2416,2.219,2600,2.918,2618,2.318,2658,3.16,2659,3.16,2715,2.219,2716,2.429,2717,4.883,2722,4.883,2723,2.556,2724,2.429,2725,2.219,2726,2.556,2727,3.64,2728,3.64,2729,3.64,2730,3.64,2731,3.68,2732,2.429,2849,5.498,2850,3.861,2851,3.861,2852,3.861]],["title/classes/UserSendDMFailedEvent.html",[0,0.253,2658,2.529]],["body/classes/UserSendDMFailedEvent.html",[0,0.441,2,0.664,3,0.077,4,0.068,5,0.068,8,0.223,9,0.713,12,1.157,17,0.426,19,0.675,20,0.009,21,0.484,22,0.37,23,0.567,30,0.487,31,0.109,38,0.317,49,0.169,65,1.823,67,2.558,70,3.521,73,1.294,79,0.006,80,0.006,112,2.012,202,1.232,203,2.815,213,3.643,218,3.848,220,1.626,231,2.486,280,3.66,307,1.975,436,1.599,502,2.412,506,2.918,513,4.185,515,1.975,518,4.69,522,3.033,527,4.886,600,4.405,681,2.219,714,2.539,820,1.842,2416,2.219,2600,2.918,2618,2.318,2658,3.68,2659,3.16,2715,2.219,2716,2.429,2717,4.883,2722,4.883,2723,2.556,2724,2.429,2725,2.219,2726,2.556,2727,3.64,2728,3.64,2729,3.64,2730,3.64,2731,3.16,2732,2.429,2853,5.498,2854,3.861,2855,3.861,2856,3.861]],["title/classes/UserTimeOutDto.html",[0,0.253,2654,3.286]],["body/classes/UserTimeOutDto.html",[0,0.389,2,0.736,3,0.085,4,0.076,5,0.076,8,0.247,17,0.391,20,0.009,22,0.421,26,1.223,31,0.145,35,0.792,36,0.872,39,0.811,49,0.094,58,1.204,60,1.253,73,1.076,77,2.286,79,0.006,80,0.006,196,2.33,202,1.324,214,1.915,215,2.768,216,1.079,231,2.106,235,2.985,259,3.239,280,3.335,293,4.14,294,2.188,303,1.915,342,2.36,348,3.335,360,3.335,405,1.807,486,1.59,600,4.552,685,3.444,711,4.756,836,5.055,844,3.196,845,4.756,886,5.214,960,3.444,1107,3.196,1471,4.413,1963,3.444,1999,3.444,2029,5.955,2052,5.916,2059,5.055,2060,5.055,2063,3.775,2189,3.775,2190,4.756,2502,5.214,2567,3.444,2577,3.444,2579,5.214,2616,3.444,2654,4.413,2678,3.775,2796,3.775,2857,5.452,2858,3.775,2859,7.3,2860,4.279,2861,5.909,2862,5.909,2863,5.909,2864,5.909,2865,5.909,2866,5.909,2867,5.909,2868,4.279,2869,4.279,2870,4.279,2871,4.279,2872,4.279,2873,4.279,2874,3.775,2875,4.279,2876,4.279,2877,3.775,2878,4.279,2879,3.775,2880,4.279,2881,4.279,2882,5.909,2883,5.909,2884,5.909,2885,4.279,2886,4.279,2887,4.279,2888,4.279,2889,4.279,2890,4.279,2891,4.279,2892,4.279,2893,4.279,2894,4.279,2895,5.909,2896,4.279,2897,4.279,2898,4.279,2899,4.279,2900,4.279]],["title/classes/UserTimeOutEvent.html",[0,0.253,2600,2.335]],["body/classes/UserTimeOutEvent.html",[0,0.439,2,0.655,3,0.076,4,0.067,5,0.067,8,0.22,9,0.706,12,1.148,17,0.441,19,0.668,20,0.009,21,0.479,22,0.383,23,0.562,30,0.481,31,0.108,38,0.313,49,0.168,65,1.82,67,2.554,70,3.37,73,1.296,79,0.005,80,0.005,112,1.992,202,1.22,203,2.806,213,3.628,218,3.833,220,1.603,231,2.799,280,3.724,307,1.947,436,1.592,502,2.402,506,2.888,513,4.168,515,1.947,518,4.678,522,3.003,527,4.874,600,4.767,681,2.188,714,2.514,820,1.817,2416,2.188,2600,3.371,2618,2.285,2658,3.128,2659,3.128,2715,2.188,2716,2.395,2717,4.857,2722,4.857,2723,2.521,2724,2.395,2725,2.188,2726,2.521,2727,3.604,2728,3.604,2729,3.604,2730,3.604,2731,3.128,2732,2.395,2901,5.444,2902,3.807,2903,3.807,2904,3.807,2905,3.807]],["title/classes/UserTimeOutFailedEvent.html",[0,0.253,2659,2.529]],["body/classes/UserTimeOutFailedEvent.html",[0,0.437,2,0.646,3,0.075,4,0.066,5,0.066,8,0.217,9,0.699,12,1.139,17,0.452,19,0.662,20,0.009,21,0.474,22,0.393,23,0.556,30,0.474,31,0.107,38,0.309,49,0.168,65,1.818,67,2.549,70,3.509,73,1.295,79,0.005,80,0.005,112,1.972,202,1.207,203,2.798,213,3.613,218,3.819,220,1.581,231,2.788,280,3.718,307,1.92,436,1.585,502,2.393,506,2.86,513,4.151,515,1.92,518,4.666,522,2.973,527,4.861,600,4.753,681,2.158,714,2.489,820,1.792,2416,2.158,2600,2.86,2618,2.254,2658,3.097,2659,3.623,2715,2.158,2716,2.362,2717,4.831,2722,4.831,2723,2.486,2724,2.362,2725,2.158,2726,2.486,2727,3.569,2728,3.569,2729,3.569,2730,3.569,2731,3.097,2732,2.362,2906,5.39,2907,3.755,2908,3.755,2909,3.755,2910,3.755,2911,3.755]],["title/classes/UserToUser.html",[0,0.253,2512,3.286]],["body/classes/UserToUser.html",[0,0.31,2,0.926,3,0.107,4,0.095,5,0.095,8,0.311,17,0.398,20,0.009,22,0.401,26,1.244,31,0.151,35,1.274,36,1.097,39,1.021,49,0.119,60,0.997,73,0.967,77,2.387,79,0.007,80,0.007,196,2.439,202,1.542,235,3.104,259,3.271,348,2.899,486,1.617,498,5.317,769,6.805,836,4.02,842,5.668,844,4.02,949,3.771,2052,5.141,2059,4.02,2060,4.02,2174,4.332,2176,4.02,2182,4.558,2235,5.025,2238,4.332,2486,4.332,2494,4.332,2508,5.54,2512,5.141,2524,6.108,2525,4.332,2526,4.332,2528,4.332,2647,6.074,2857,5.668,2874,4.749,2912,4.332,2913,5.383,2914,7.295,2915,7.585,2916,5.383,2917,7.59,2918,5.383,2919,5.383,2920,6.074,2921,5.383,2922,4.332,2923,4.749,2924,5.383,2925,5.383,2926,5.383]],["title/coverage.html",[2927,4.499]],["body/coverage.html",[0,0.518,1,1.826,3,0.045,5,0.04,6,2.002,7,2.002,16,0.645,20,0.009,22,0.231,72,0.788,79,0.004,80,0.004,81,2.548,82,1.695,84,2.002,86,1.16,98,1.048,109,1.59,134,1.75,142,1.81,196,1.017,199,1.874,201,2.002,203,1.792,216,0.572,218,1.083,220,0.955,224,1.695,225,2.002,229,1.59,241,1.502,243,1.695,246,1.362,249,1.304,250,1.427,253,1.362,254,1.362,255,2.307,257,1.362,258,2.201,259,1.499,285,2.002,286,2.002,305,1.502,306,1.59,313,1.826,318,2.002,324,1.59,360,3.896,363,2.651,364,2.569,366,2.002,367,2.002,376,1.251,377,1.16,378,1.083,380,1.695,382,2.525,384,1.695,386,1.59,387,1.59,390,3.045,391,2.811,393,1.695,396,1.695,399,1.695,402,1.695,403,1.59,404,1.695,405,1.411,406,1.695,410,1.695,412,1.695,415,0.748,416,3.446,436,0.963,458,1.59,489,1.502,490,1.015,500,1.502,501,3.446,515,1.16,516,1.502,523,1.502,529,1.695,530,2.002,572,1.695,573,1.695,576,1.59,577,2.738,578,2.569,579,2.569,621,3.914,639,1.695,649,2.002,650,2.002,700,1.59,701,2.002,702,2.002,721,2.002,722,2.002,733,1.695,736,1.695,753,1.695,755,1.362,834,2.002,835,2.002,846,2.002,847,2.002,852,1.695,853,2.738,854,2.951,859,1.59,868,1.695,869,2.002,870,2.002,887,1.362,888,3.713,922,1.695,923,1.695,925,1.59,926,2.951,927,1.826,928,2.951,936,1.695,937,3.055,939,1.59,940,3.659,969,1.59,970,3.957,1007,1.59,1025,1.59,1027,1.59,1033,2.002,1040,4.512,1045,1.826,1046,2.002,1060,1.826,1061,1.826,1076,2.951,1084,2.107,1087,1.695,1088,3.851,1089,3.734,1090,2.951,1096,1.59,1104,1.502,1119,2.002,1120,2.951,1138,1.12,1139,1.427,1145,2.951,1190,1.695,1191,2.002,1214,1.59,1215,2.951,1216,2.569,1221,1.695,1224,1.59,1225,2.002,1226,2.002,1249,1.695,1257,1.826,1258,1.362,1260,1.826,1261,2.951,1263,1.826,1365,1.59,1366,1.826,1377,1.695,1380,1.826,1381,1.826,1382,1.826,1422,1.695,1424,1.826,1425,1.304,1428,1.695,1449,2.002,1470,1.695,1576,1.695,1577,2.002,1583,1.695,1601,2.002,1638,1.59,1676,1.695,1677,2.002,1683,1.695,1684,4.264,1704,1.826,1753,1.826,1786,3.575,1788,2.951,1800,2.002,1803,1.826,1825,1.826,1826,2.002,1827,2.002,1835,1.695,1836,3.232,1837,2.002,1851,1.502,1854,1.695,1870,2.951,1877,1.59,1878,1.59,1879,1.362,1896,2.002,1961,2.002,1979,4.343,2035,2.002,2036,2.002,2043,2.002,2046,2.002,2048,1.59,2049,2.002,2050,2.002,2064,2.002,2065,2.002,2093,1.826,2094,1.826,2095,1.826,2096,1.826,2197,1.695,2198,1.695,2203,2.951,2204,2.951,2249,2.002,2259,2.002,2271,2.002,2284,2.002,2285,2.002,2286,2.002,2291,1.826,2292,2.002,2296,2.951,2351,1.695,2352,2.002,2374,2.002,2381,2.002,2412,1.59,2413,2.738,2414,2.738,2421,1.695,2423,2.951,2424,2.951,2434,2.002,2444,2.002,2476,2.002,2512,1.695,2563,2.951,2600,1.204,2633,2.002,2634,2.002,2650,2.002,2654,1.695,2658,1.304,2659,1.304,2692,1.826,2693,2.002,2694,2.002,2715,1.304,2716,3.914,2725,1.304,2731,1.304,2733,2.002,2857,3.446,2858,2.002,2912,2.951,2922,1.826,2927,1.695,2928,2.269,2929,2.269,2930,8.461,2931,6.815,2932,7.391,2933,2.269,2934,2.269,2935,5.816,2936,5.816,2937,8.332,2938,2.002,2939,2.002,2940,7.391,2941,4.071,2942,4.071,2943,8.421,2944,3.235,2945,2.002,2946,2.002,2947,3.666,2948,2.269,2949,3.666,2950,2.269,2951,2.269,2952,2.269,2953,5.298,2954,2.269,2955,2.269,2956,2.002,2957,2.269,2958,2.269,2959,7.865,2960,3.666,2961,2.269,2962,2.269,2963,2.002,2964,2.002,2965,2.002,2966,4.674,2967,2.002,2968,7.657,2969,3.235,2970,2.002,2971,2.269,2972,3.666,2973,6.547,2974,6.221,2975,2.002,2976,2.002,2977,4.68,2978,2.002,2979,2.002,2980,2.269,2981,2.269,2982,2.269]],["title/dependencies.html",[95,2.447,2983,3.234]],["body/dependencies.html",[0,0.423,20,0.009,22,0.3,35,1.36,36,1.497,38,0.604,39,1.132,42,2.128,79,0.007,80,0.007,90,2.245,95,2.758,117,3.954,129,4.806,139,3.294,140,3.294,303,2.672,632,3.294,1064,4.806,1107,4.46,1266,5.269,1589,4.806,1637,5.269,1852,3.954,1858,4.46,1873,3.954,1883,4.806,1916,5.269,1970,6.405,2984,5.972,2985,5.972,2986,7.347,2987,7.959,2988,5.972,2989,5.972,2990,5.972,2991,5.972,2992,5.972,2993,5.972,2994,5.972,2995,5.972,2996,5.972,2997,5.972,2998,5.972,2999,5.972,3000,5.972,3001,5.972,3002,5.269,3003,5.972,3004,5.972,3005,5.972,3006,5.972,3007,5.972,3008,5.972,3009,5.972,3010,5.972,3011,5.972]],["title/miscellaneous/functions.html",[3012,2.306,3013,4.674]],["body/miscellaneous/functions.html",[0,0.35,8,0.258,12,1.25,14,2.771,19,0.985,20,0.009,21,0.706,22,0.443,23,0.828,30,1.092,35,0.826,39,1.312,48,1.269,58,0.909,73,1.127,79,0.006,80,0.006,98,3.196,112,1.633,203,2.63,215,2.487,220,2.561,228,2.462,234,1.59,246,3.651,290,2.679,405,1.365,415,2.281,420,3.539,436,0.931,446,2.462,486,1.826,539,3.592,570,4.582,572,4.543,573,3.333,608,4.668,634,3.829,743,4.027,765,3.333,774,2.13,851,3.938,939,4.848,940,2.808,962,3.938,1040,5.148,1086,2.565,1089,2.679,1169,3.592,1272,3.333,1283,3.938,1341,4.848,1376,3.592,1380,4.895,1381,3.592,1382,4.895,1472,4.582,1492,3.333,1493,3.333,1823,3.592,1998,3.938,2091,6.556,2093,4.895,2096,4.895,2180,3.938,2592,6.86,2619,3.333,2956,3.938,2963,3.938,2964,5.367,2965,5.367,2975,5.367,2976,5.367,2977,5.98,2978,3.938,2979,5.367,3012,2.808,3013,3.938,3014,4.463,3015,4.463,3016,4.463,3017,4.463,3018,6.105,3019,4.463,3020,4.463,3021,6.92,3022,6.92,3023,4.463,3024,4.463,3025,6.083,3026,3.938,3027,4.463,3028,4.463,3029,4.463,3030,4.463,3031,4.463,3032,6.083,3033,4.463,3034,6.083,3035,4.463,3036,6.083,3037,4.463,3038,4.463,3039,6.083,3040,6.105,3041,4.463,3042,4.463,3043,4.463,3044,3.938,3045,4.463,3046,4.463,3047,7.431,3048,6.083,3049,4.463,3050,6.92,3051,6.083,3052,4.463]],["title/index.html",[8,0.212,3053,3.234,3054,3.234]],["body/index.html",[4,0.104,20,0.009,79,0.007,80,0.007,431,4.545,486,1.383,665,4.126,781,4.74,999,3.705,1032,4.399,1042,4.74,1281,5.196,1481,5.196,2560,6.461,2645,6.427,2927,4.399,3055,5.89,3056,5.89,3057,7.285,3058,5.89,3059,5.89,3060,5.89,3061,5.89,3062,5.89,3063,7.91,3064,5.196,3065,5.89,3066,5.89,3067,5.196,3068,8.769,3069,5.89,3070,5.89,3071,5.196,3072,5.89,3073,6.427,3074,5.89,3075,5.89,3076,5.89,3077,5.89,3078,7.285,3079,7.285,3080,5.89,3081,5.89,3082,5.89,3083,6.427,3084,5.196,3085,5.89,3086,5.89,3087,5.89,3088,4.74,3089,5.89,3090,5.89,3091,5.89,3092,5.89,3093,5.89,3094,5.89,3095,4.74,3096,5.89,3097,5.89,3098,5.89,3099,5.89,3100,5.89,3101,5.89,3102,4.399]],["title/classes/initGuildCommand.html",[0,0.253,396,3.286]],["body/classes/initGuildCommand.html",[0,0.176,2,0.526,3,0.061,4,0.054,5,0.054,8,0.177,9,0.601,10,1.543,12,0.837,16,1.773,17,0.323,19,0.687,20,0.009,21,0.68,22,0.281,23,0.577,25,3.441,26,0.837,27,2.583,29,2.881,30,0.585,31,0.124,32,2.287,34,1.758,35,0.566,36,0.623,37,0.891,38,0.251,39,0.58,40,1.009,45,1.623,46,1.758,47,1.623,48,0.869,49,0.067,50,0.771,51,1.369,55,2.37,58,0.623,60,1.548,62,2.187,65,1.75,77,2.105,79,0.005,80,0.005,197,3.745,216,1.986,222,0.891,272,2.916,348,1.288,355,5.287,396,3.46,415,2.21,483,1.924,486,0.718,490,2.999,493,3.925,504,3.428,611,5.021,612,5.021,669,2.781,670,3.743,673,3.703,698,3.925,725,4.935,729,3.246,742,1.836,755,1.836,771,4.088,773,3.068,774,2.977,798,3.246,828,2.073,1001,3.246,1011,1.836,1174,2.285,1258,2.781,1327,2.699,2140,4.935,2221,3.46,2232,6.073,2307,5.914,2445,4.088,2446,4.088,2447,2.699,2449,4.088,2450,4.088,2451,4.088,2452,4.088,2453,4.088,2537,4.088,2538,6.073,2552,6.658,2640,7.535,2938,5.504,2939,2.699,3012,1.924,3084,2.699,3103,4.633,3104,3.059,3105,3.059,3106,4.633,3107,3.059,3108,3.059,3109,3.059,3110,6.239,3111,6.239,3112,3.059,3113,6.703,3114,3.059,3115,6.703,3116,3.059,3117,3.059,3118,3.059,3119,3.059,3120,4.633,3121,3.059,3122,6.239,3123,7.546,3124,7.546,3125,3.059,3126,4.633,3127,4.633,3128,3.059,3129,3.059,3130,4.633,3131,3.059,3132,3.059,3133,4.633,3134,3.059,3135,3.059,3136,4.633,3137,3.059,3138,3.059,3139,4.633,3140,3.059,3141,3.059,3142,4.633,3143,3.059,3144,3.059,3145,3.059,3146,4.633,3147,3.059,3148,3.059,3149,4.633,3150,4.633,3151,4.633,3152,4.633,3153,3.059,3154,3.059,3155,3.059,3156,4.633,3157,7.546,3158,3.059,3159,3.059]],["title/license.html",[3053,3.234,3054,3.234,3102,2.738]],["body/license.html",[0,0.051,4,0.142,5,0.029,9,0.116,17,0.051,20,0.004,29,1.04,31,0.018,50,0.225,58,0.182,79,0.002,80,0.002,112,0.326,196,1.608,212,0.624,213,0.412,216,1.087,230,1.026,231,0.581,259,1.139,272,0.871,280,0.375,293,0.624,294,0.456,305,0.59,307,1.424,320,1.438,361,0.786,363,2.298,365,1.578,404,0.666,431,3.14,453,1.672,460,3.207,471,2.298,492,2.08,561,0.624,579,2.554,586,0.666,589,0.512,608,3.918,632,0.899,634,2.518,635,1.142,637,0.44,663,2.423,665,3.552,690,1.312,717,0.624,760,1.217,774,0.425,782,0.786,800,2.241,814,2.148,837,0.786,838,1.988,842,1.217,894,2.148,910,1.988,966,1.026,974,3.393,999,2.293,1001,0.624,1023,0.717,1028,1.217,1035,0.717,1038,0.786,1041,1.438,1048,6.363,1116,0.717,1218,1.752,1268,0.717,1274,0.786,1277,0.786,1323,4.655,1324,1.988,1325,1.813,1426,0.786,1469,2.08,1470,0.666,1471,1.217,1472,1.492,1490,1.438,1492,1.217,1493,3.617,1506,0.717,1533,1.438,1663,4.397,1760,3.787,1790,0.786,1791,2.241,1799,2.08,1821,0.717,1844,5.679,1940,0.786,1945,4.473,1956,0.786,1980,0.786,1989,0.786,1995,3.216,1999,2.934,2006,0.717,2032,1.217,2174,0.717,2190,0.717,2191,0.717,2355,0.717,2360,0.786,2382,1.312,2393,4.473,2398,1.438,2417,0.717,2523,1.312,2524,2.611,2538,2.241,2560,2.986,2567,3.218,2597,5.574,2610,0.786,2619,0.666,2627,1.988,2669,1.988,2685,3.804,2754,5.253,2826,1.438,2846,1.438,2877,0.786,2879,1.988,2927,1.217,2970,1.438,3002,0.786,3026,2.457,3040,1.438,3044,1.438,3067,2.457,3071,0.786,3073,0.786,3083,1.988,3088,1.813,3095,1.312,3102,6.521,3160,6.076,3161,5.941,3162,6.712,3163,6.593,3164,0.786,3165,0.891,3166,2.253,3167,7.152,3168,3.244,3169,5.941,3170,6.796,3171,3.244,3172,0.891,3173,0.891,3174,3.244,3175,6.876,3176,2.253,3177,2.253,3178,5.276,3179,2.253,3180,0.891,3181,2.253,3182,0.891,3183,0.891,3184,1.63,3185,5.276,3186,3.244,3187,3.999,3188,2.785,3189,1.63,3190,5.637,3191,4.312,3192,0.891,3193,0.891,3194,3.646,3195,1.63,3196,0.891,3197,0.891,3198,0.891,3199,5.07,3200,7.788,3201,2.253,3202,0.891,3203,0.891,3204,2.785,3205,4.592,3206,0.891,3207,4.592,3208,0.891,3209,3.244,3210,0.891,3211,2.785,3212,0.891,3213,5.795,3214,0.891,3215,0.891,3216,0.891,3217,4.843,3218,2.253,3219,5.07,3220,3.244,3221,5.276,3222,0.891,3223,1.63,3224,0.891,3225,0.891,3226,2.253,3227,0.891,3228,0.891,3229,0.891,3230,5.07,3231,0.891,3232,1.63,3233,0.891,3234,0.891,3235,2.785,3236,0.891,3237,1.63,3238,0.891,3239,2.253,3240,4.592,3241,6.076,3242,0.891,3243,3.804,3244,4.312,3245,0.891,3246,2.253,3247,0.891,3248,0.891,3249,0.891,3250,3.646,3251,2.785,3252,2.253,3253,1.63,3254,0.891,3255,2.785,3256,0.891,3257,2.253,3258,0.891,3259,1.63,3260,1.63,3261,2.253,3262,7.821,3263,0.891,3264,7.269,3265,5.464,3266,3.244,3267,3.244,3268,3.646,3269,2.253,3270,0.891,3271,2.253,3272,6.317,3273,1.63,3274,5.276,3275,0.891,3276,0.891,3277,0.891,3278,8.67,3279,0.891,3280,0.891,3281,1.63,3282,3.646,3283,0.891,3284,1.63,3285,0.891,3286,4.843,3287,0.891,3288,2.785,3289,0.891,3290,1.63,3291,7.754,3292,2.253,3293,4.592,3294,2.785,3295,0.891,3296,1.63,3297,2.253,3298,4.592,3299,4.843,3300,2.785,3301,0.891,3302,2.785,3303,1.63,3304,2.785,3305,2.785,3306,0.891,3307,2.253,3308,6.95,3309,1.63,3310,0.891,3311,4.312,3312,0.891,3313,3.646,3314,5.795,3315,2.253,3316,1.63,3317,3.999,3318,5.07,3319,3.646,3320,0.891,3321,1.63,3322,0.891,3323,0.891,3324,3.999,3325,0.891,3326,5.464,3327,1.63,3328,0.891,3329,0.891,3330,2.253,3331,0.891,3332,0.891,3333,0.891,3334,0.891,3335,2.253,3336,4.312,3337,2.785,3338,0.891,3339,0.891,3340,0.891,3341,1.63,3342,4.843,3343,0.891,3344,1.63,3345,0.891,3346,0.891,3347,2.253,3348,2.253,3349,3.999,3350,2.253,3351,2.253,3352,0.891,3353,0.891,3354,3.244,3355,3.244,3356,3.646,3357,0.891,3358,0.891,3359,1.63,3360,2.253,3361,0.891,3362,0.891,3363,0.891,3364,0.891,3365,0.891,3366,7.021,3367,2.253,3368,4.312,3369,0.891,3370,3.646,3371,1.63,3372,2.785,3373,0.891,3374,0.891,3375,1.63,3376,1.63,3377,2.785,3378,0.891,3379,0.891,3380,0.891,3381,0.891,3382,1.63,3383,3.244,3384,0.891,3385,1.63,3386,0.891,3387,0.891,3388,3.244,3389,2.785,3390,0.891,3391,2.785,3392,2.785,3393,0.891,3394,3.999,3395,2.785,3396,0.891,3397,3.244,3398,0.891,3399,1.63,3400,0.891,3401,0.891,3402,1.63,3403,0.891,3404,0.891,3405,0.891,3406,2.253,3407,2.253,3408,3.646,3409,0.891,3410,1.63,3411,0.891,3412,1.63,3413,1.63,3414,1.63,3415,0.891,3416,5.464,3417,1.63,3418,0.891,3419,0.891,3420,0.891,3421,0.891,3422,0.891,3423,0.891,3424,0.891,3425,2.253,3426,0.891,3427,5.795,3428,2.253,3429,0.891,3430,0.891,3431,0.891,3432,0.891,3433,3.244,3434,3.646,3435,0.891,3436,0.891,3437,2.253,3438,0.891,3439,0.891,3440,2.785,3441,0.891,3442,0.891,3443,0.891,3444,0.891,3445,0.891,3446,0.891,3447,0.891,3448,1.63,3449,0.891,3450,2.253,3451,0.891,3452,0.891,3453,1.63,3454,0.891,3455,0.891,3456,0.891,3457,0.891,3458,0.891,3459,1.63,3460,1.63,3461,1.63,3462,4.592,3463,0.891,3464,3.646,3465,0.891,3466,0.891,3467,1.63,3468,2.253,3469,2.253,3470,2.785,3471,2.785,3472,2.785,3473,0.891,3474,3.244,3475,0.891,3476,2.253,3477,2.253,3478,0.891,3479,1.63,3480,0.891,3481,1.63,3482,3.244,3483,1.63,3484,2.785,3485,2.785,3486,2.253,3487,5.637,3488,3.244,3489,0.891,3490,0.891,3491,2.253,3492,3.999,3493,1.63,3494,0.891,3495,0.891,3496,0.891,3497,0.891,3498,2.253,3499,0.891,3500,0.891,3501,0.891,3502,2.253,3503,0.891,3504,0.891,3505,1.63,3506,0.891,3507,0.891,3508,1.63,3509,0.891,3510,2.253,3511,0.891,3512,0.891,3513,2.253,3514,1.63,3515,3.646,3516,6.528,3517,2.253,3518,1.63,3519,1.63,3520,1.63,3521,1.63,3522,2.785,3523,1.63,3524,0.891,3525,0.891,3526,0.891,3527,0.891,3528,0.891,3529,3.646,3530,1.63,3531,0.891,3532,0.891,3533,0.891,3534,0.891,3535,1.63,3536,0.891,3537,1.63,3538,0.891,3539,3.244,3540,0.891,3541,4.312,3542,0.891,3543,5.07,3544,1.63,3545,0.891,3546,0.891,3547,0.891,3548,0.891,3549,0.891,3550,0.891,3551,1.63,3552,0.891,3553,2.253,3554,3.244,3555,2.785,3556,1.63,3557,0.891,3558,0.891,3559,0.891,3560,0.891,3561,0.891,3562,1.63,3563,0.891,3564,0.891,3565,0.891,3566,2.785,3567,0.891,3568,1.63,3569,0.891,3570,1.63,3571,0.891,3572,0.891,3573,2.253,3574,0.891,3575,0.891,3576,0.891,3577,0.891,3578,0.891,3579,0.891,3580,0.891,3581,0.891,3582,0.891,3583,0.891,3584,2.253,3585,0.891,3586,0.891,3587,0.891,3588,0.891,3589,0.891,3590,3.244,3591,0.891,3592,0.891,3593,0.891,3594,0.891,3595,0.891,3596,0.891,3597,0.891,3598,0.891,3599,0.891,3600,0.891,3601,0.891,3602,3.999,3603,2.253,3604,0.891,3605,2.785,3606,0.891,3607,0.891,3608,2.253,3609,0.891,3610,0.891,3611,2.253,3612,0.891,3613,1.63,3614,0.891,3615,0.891,3616,0.891,3617,0.891,3618,0.891,3619,0.891,3620,0.891,3621,0.891,3622,0.891,3623,0.891,3624,0.891,3625,0.891,3626,1.63,3627,1.63,3628,0.891,3629,0.891,3630,2.785,3631,0.891,3632,2.253,3633,1.63,3634,0.891,3635,1.63,3636,2.253,3637,2.253,3638,0.891,3639,1.63,3640,0.891,3641,2.253,3642,3.999,3643,0.891,3644,1.63,3645,1.63,3646,0.891,3647,0.891,3648,0.891,3649,0.891,3650,0.891,3651,0.891,3652,1.63,3653,0.891,3654,2.785,3655,2.253,3656,0.891,3657,3.244,3658,0.891,3659,0.891,3660,0.891,3661,0.891,3662,0.891,3663,0.891,3664,1.63,3665,1.63,3666,1.63,3667,2.253,3668,0.891,3669,1.63,3670,2.253,3671,0.891,3672,1.63,3673,0.891,3674,1.63,3675,0.891,3676,0.891,3677,1.63,3678,6.712,3679,2.253,3680,0.891,3681,3.244,3682,4.843,3683,2.253,3684,0.891,3685,0.891,3686,0.891,3687,2.785,3688,0.891,3689,2.253,3690,0.891,3691,0.891,3692,0.891,3693,0.891,3694,0.891,3695,0.891,3696,0.891,3697,2.785,3698,1.63,3699,0.891,3700,0.891,3701,2.253,3702,0.891,3703,1.63,3704,2.253,3705,1.63,3706,0.891,3707,0.891,3708,0.891,3709,0.891,3710,1.63,3711,2.253,3712,0.891,3713,0.891,3714,1.63,3715,0.891,3716,1.63,3717,0.891,3718,0.891,3719,0.891,3720,0.891,3721,0.891,3722,0.891,3723,2.253,3724,1.63,3725,0.891,3726,0.891,3727,0.891,3728,2.785,3729,0.891,3730,2.253,3731,0.891,3732,0.891,3733,0.891,3734,1.63,3735,0.891,3736,0.891,3737,0.891,3738,2.253,3739,1.63,3740,1.63,3741,0.891,3742,1.63,3743,3.999,3744,1.63,3745,2.253,3746,2.785,3747,0.891,3748,0.891,3749,1.63,3750,0.891,3751,2.253,3752,0.891,3753,1.63,3754,0.891,3755,0.891,3756,0.891,3757,0.891,3758,2.785,3759,0.891,3760,2.253,3761,1.63,3762,0.891,3763,1.63,3764,0.891,3765,0.891,3766,0.891,3767,1.63,3768,1.63,3769,0.891,3770,1.63,3771,0.891,3772,0.891,3773,0.891,3774,0.891,3775,0.891,3776,2.253,3777,0.891,3778,0.891,3779,0.891,3780,1.63,3781,2.785,3782,1.63,3783,2.253,3784,0.891,3785,0.891,3786,0.891,3787,0.891,3788,1.63,3789,0.891,3790,0.891,3791,0.891,3792,0.891,3793,0.891,3794,0.891,3795,0.891,3796,0.891,3797,0.891,3798,0.891,3799,0.891,3800,0.891,3801,0.891,3802,0.891,3803,2.785,3804,0.891,3805,0.891,3806,1.63,3807,0.891,3808,0.891,3809,0.891,3810,0.891,3811,0.891,3812,0.891,3813,0.891,3814,0.891,3815,0.891,3816,0.891,3817,0.891,3818,0.891,3819,1.63,3820,0.891,3821,0.891,3822,0.891,3823,0.891,3824,0.891,3825,0.891,3826,1.63,3827,0.891,3828,0.891,3829,0.891,3830,0.891,3831,0.891,3832,0.891,3833,0.891,3834,0.891,3835,1.63,3836,1.63,3837,3.244,3838,0.891,3839,0.891,3840,0.891,3841,0.891,3842,0.891,3843,0.891,3844,0.891,3845,2.253,3846,1.63,3847,0.891,3848,1.63,3849,1.63,3850,1.63,3851,0.891,3852,0.891,3853,0.891,3854,0.891,3855,0.891,3856,0.891,3857,1.63,3858,0.891,3859,0.891,3860,0.891,3861,1.63,3862,0.891,3863,2.253,3864,0.891,3865,0.891,3866,0.891,3867,0.891,3868,0.891,3869,0.891,3870,0.891,3871,0.891,3872,0.891,3873,0.891,3874,0.891,3875,1.63,3876,0.891,3877,0.891,3878,0.891,3879,0.891,3880,0.891,3881,0.891,3882,0.891,3883,0.891,3884,0.891,3885,0.891,3886,0.891,3887,0.891,3888,0.891,3889,0.891,3890,0.891,3891,0.891,3892,0.891,3893,0.891,3894,0.891,3895,1.63,3896,1.63,3897,0.891,3898,0.891,3899,0.891,3900,0.891,3901,0.891,3902,0.891,3903,0.891,3904,0.891,3905,0.891,3906,0.891,3907,0.891,3908,0.891,3909,0.891,3910,0.891,3911,0.891,3912,0.891,3913,0.891,3914,0.891,3915,0.891,3916,0.891,3917,0.891,3918,0.891,3919,0.891,3920,0.891,3921,0.891,3922,0.891,3923,0.786,3924,0.891]],["title/modules.html",[94,2.782]],["body/modules.html",[20,0.008,79,0.008,80,0.008,93,4.713,94,2.914,104,4.421,105,4.421,106,4.421,107,4.421,108,4.421,130,4.178,132,4.178,136,4.178,141,4.178,1134,4.421,1416,4.421,3088,7.368,3925,9.155,3926,9.155,3927,9.155]],["title/overview.html",[3928,5.315]],["body/overview.html",[2,0.657,16,2.451,20,0.009,79,0.005,80,0.005,83,1.397,92,1.325,93,6.518,94,1.763,95,1.763,96,1.884,97,1.884,98,1.763,99,1.821,100,1.763,101,3.368,102,3.368,103,3.368,104,5.885,105,6.323,106,6.041,107,6.08,108,5.632,109,4.458,110,2.692,111,1.884,112,1.397,130,5.205,132,5.322,136,5.496,141,5.496,200,1.561,241,5.205,310,3.368,311,3.368,312,3.368,313,5.12,365,2.674,374,3.368,375,3.368,376,4.633,377,4.245,378,4.009,471,2.193,925,4.458,1104,5.205,1134,6.174,1135,3.368,1136,3.368,1137,3.368,1138,4.039,1139,4.367,1224,4.458,1365,4.458,1412,3.368,1413,3.368,1414,3.368,1415,3.368,1416,5.632,1430,3.368,1431,3.368,1596,3.368,1598,3.368,1699,3.368,1700,3.368,1787,2.401,1851,5.205,1874,3.368,1875,3.368,1876,3.368,1877,4.458,1878,4.458,1879,4.825,2840,3.368,2842,3.368,3164,3.368,3928,3.368,3929,5.453,3930,3.817,3931,3.817]],["title/properties.html",[202,1.187,2983,3.234]],["body/properties.html",[20,0.009,21,0.587,35,1.236,79,0.008,80,0.008,202,1.495,486,1.568,634,3.749,760,4.985,827,5.889,828,3.515,1008,4.419,1044,5.371,1218,4.199,1270,5.889,1469,4.985,2357,5.371,2383,5.889,2523,5.371,3064,5.889,3095,5.371,3102,4.985,3163,5.889,3923,5.889,3932,6.675,3933,6.675,3934,6.675,3935,6.675,3936,6.675,3937,6.675,3938,6.675,3939,6.675]],["title/miscellaneous/typealiases.html",[3012,2.306,3940,5.298]],["body/miscellaneous/typealiases.html",[8,0.407,20,0.008,22,0.354,79,0.008,80,0.008,249,4.661,250,5.103,1979,5.266,3012,4.436,3941,7.051,3942,7.156]],["title/miscellaneous/variables.html",[1666,4.263,3012,2.306]],["body/miscellaneous/variables.html",[0,0.28,8,0.142,10,0.854,20,0.009,21,0.344,22,0.447,30,0.493,48,2.054,55,3.456,58,1.541,60,1.424,62,0.619,67,1.876,70,1.552,72,1.688,73,1.186,77,0.732,79,0.004,80,0.004,81,0.83,192,2.165,193,2.165,196,1.788,202,0.875,203,2.372,212,3.407,214,3.812,215,3.484,216,1.704,231,2.296,235,1.597,252,3.456,254,2.919,255,1.544,258,1.473,259,1.988,272,1.509,305,3.22,306,2.736,327,1.694,342,3.057,360,2.713,364,2.736,368,2.165,403,2.736,405,1.85,415,0.809,417,3.059,418,1.719,425,2.585,431,4.547,436,1.344,437,2.585,446,2.682,451,2.713,453,2.344,490,1.098,502,1.487,504,2.834,608,3.868,617,2.072,634,1.171,642,3.059,660,1.719,769,3.913,781,3.142,828,1.098,842,2.916,855,3.632,858,2.919,862,2.919,863,3.059,864,3.059,865,2.736,871,1.41,874,1.719,888,1.975,889,2.165,890,2.165,891,2.165,892,2.165,893,2.165,894,1.625,897,2.916,916,2.916,922,3.632,923,2.916,924,2.916,937,1.625,940,1.544,949,1.719,970,1.833,971,3.142,972,3.142,973,3.142,974,2.736,975,3.142,1010,1.975,1011,2.919,1012,3.142,1014,3.142,1016,1.975,1025,3.407,1027,2.736,1028,1.833,1029,1.975,1030,1.975,1060,3.142,1061,3.142,1083,1.255,1239,1.975,1242,3.913,1258,3.327,1260,3.142,1261,3.142,1263,3.142,1301,2.165,1302,2.165,1339,2.165,1341,2.736,1388,3.445,1425,3.185,1472,1.625,1491,1.975,1504,2.165,1541,1.975,1666,1.975,1683,3.632,1684,3.142,1769,1.975,1786,3.703,1788,3.142,1803,3.142,1811,2.165,1812,2.165,1819,3.445,1820,2.165,1821,1.975,1822,2.165,1823,1.975,1824,2.165,1825,3.142,1852,2.585,1928,1.975,1979,1.833,2000,2.165,2006,1.975,2007,2.165,2008,2.165,2009,3.445,2010,2.165,2011,2.165,2012,2.165,2013,2.165,2014,2.165,2015,3.445,2016,2.165,2017,2.165,2018,2.165,2019,1.975,2020,2.165,2021,2.165,2022,2.165,2023,2.165,2024,2.165,2025,2.165,2026,2.165,2027,2.165,2028,2.165,2029,1.719,2030,1.975,2032,1.833,2033,2.165,2094,3.142,2095,3.142,2172,2.165,2176,1.833,2182,2.585,2296,1.975,2319,2.165,2486,1.975,2494,1.975,2508,3.142,2525,1.975,2526,1.975,2528,1.975,2563,1.975,2602,2.165,2754,3.142,2857,1.833,2912,3.142,2914,4.29,2915,4.89,2920,2.165,2922,3.142,2923,2.165,2941,2.165,2942,4.89,2944,4.89,2945,3.445,2946,3.445,2966,5.685,2967,4.29,2969,4.29,2977,3.913,3012,1.544,3018,3.445,3243,3.445,3942,3.445,3943,4.863,3944,2.454,3945,2.454,3946,2.454,3947,2.454,3948,5.543,3949,2.454,3950,3.905,3951,3.905,3952,3.905,3953,3.905,3954,2.454,3955,2.454,3956,3.905,3957,5.543,3958,3.905,3959,2.454,3960,3.905,3961,2.454,3962,3.905,3963,3.905,3964,3.905,3965,6.05,3966,5.543,3967,2.454,3968,2.454,3969,3.905,3970,4.863,3971,5.543,3972,2.454,3973,2.454,3974,2.454,3975,2.454,3976,2.454,3977,2.454,3978,2.454,3979,2.454,3980,2.454,3981,2.454,3982,2.454,3983,2.454,3984,2.454]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":360,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":3932,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":2998,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3009,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2997,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":3004,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2930,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2954,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2948,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2949,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2955,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2952,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2950,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2932,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":2934,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2937,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2931,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2935,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2940,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2936,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2953,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2947,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":914,"title":{},"body":{"classes/DiscordUser.html":{}}}],["00:00:00",{"_index":2575,"title":{},"body":{"injectables/TasksService.html":{}}}],["1",{"_index":814,"title":{"classes/SelfDto-1.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"license.html":{}}}],["1.11.0",{"_index":2996,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":3006,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":2968,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":2974,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":2971,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":3428,"title":{},"body":{"license.html":{}}}],["10.3.1",{"_index":3007,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":2959,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":2189,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/UserTimeOutDto.html":{}}}],["1011511871297302608",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"classes/ModRequestFlow.html":{}}}],["1011513775054143632",{"_index":2120,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["1011529685357838376",{"_index":1403,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["1011532621412577350",{"_index":2111,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["1042351896",{"_index":1329,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["1051979218164125826",{"_index":1404,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["1056592866660581456",{"_index":439,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["1080070968900333578",{"_index":443,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["11",{"_index":2970,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["11.0.0",{"_index":2990,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2991,"title":{},"body":{"dependencies.html":{}}}],["11.1.5",{"_index":2987,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":2994,"title":{},"body":{"dependencies.html":{}}}],["1132244079242133555",{"_index":1405,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["12",{"_index":3929,"title":{},"body":{"overview.html":{}}}],["123",{"_index":1485,"title":{},"body":{"injectables/GuildService.html":{}}}],["1234",{"_index":907,"title":{},"body":{"classes/DiscordUser.html":{}}}],["123456789012345678",{"_index":916,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["128",{"_index":1695,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["13",{"_index":3918,"title":{},"body":{"license.html":{}}}],["14",{"_index":1519,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["14.18.0",{"_index":2999,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":3644,"title":{},"body":{"license.html":{}}}],["1567081521233",{"_index":1030,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":3645,"title":{},"body":{"license.html":{}}}],["1600000000000",{"_index":1016,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["1671981769958",{"_index":432,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["19",{"_index":3164,"title":{},"body":{"license.html":{},"overview.html":{}}}],["1996",{"_index":3447,"title":{},"body":{"license.html":{}}}],["2",{"_index":663,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["2/2",{"_index":2960,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":2980,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3445,"title":{},"body":{"license.html":{}}}],["200",{"_index":550,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["2007",{"_index":3166,"title":{},"body":{"license.html":{}}}],["24",{"_index":2898,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["28",{"_index":3799,"title":{},"body":{"license.html":{}}}],["3",{"_index":471,"title":{},"body":{"classes/Channel.html":{},"classes/CleanWfpMember.html":{},"classes/GuildChannelEditOptions.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/SpecialCommand.html":{},"license.html":{},"overview.html":{}}}],["3.0",{"_index":3938,"title":{},"body":{"properties.html":{}}}],["3.0.1",{"_index":2989,"title":{},"body":{"dependencies.html":{}}}],["3/10",{"_index":2951,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":2962,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1470,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"coverage.html":{},"license.html":{}}}],["322822954796974080",{"_index":1784,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["4",{"_index":3477,"title":{},"body":{"license.html":{}}}],["4.0.0",{"_index":3003,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":2986,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2988,"title":{},"body":{"dependencies.html":{}}}],["4.41.0",{"_index":3011,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":2191,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["5,7",{"_index":1126,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["5.3.2",{"_index":2984,"title":{},"body":{"dependencies.html":{}}}],["5.5.1",{"_index":2985,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":2958,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":2973,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":1332,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["500ms",{"_index":1322,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["53",{"_index":3930,"title":{},"body":{"overview.html":{}}}],["559623534870528",{"_index":1029,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":3931,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":2993,"title":{},"body":{"dependencies.html":{}}}],["6.12.0",{"_index":2995,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":2190,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["616609333832187924",{"_index":437,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["63",{"_index":2109,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["6b",{"_index":3536,"title":{},"body":{"license.html":{}}}],["6d",{"_index":3560,"title":{},"body":{"license.html":{}}}],["7",{"_index":2627,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["7.8.2",{"_index":3010,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":2957,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":2961,"title":{},"body":{"coverage.html":{}}}],["832170662491062333",{"_index":456,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["89q12",{"_index":3939,"title":{},"body":{"properties.html":{}}}],["900s",{"_index":1895,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["__bot_event__",{"_index":3954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__bot_event_handler__",{"_index":368,"title":{},"body":{"interfaces/BotEvent.html":{},"miscellaneous/variables.html":{}}}],["__bot_event_handler__(...args",{"_index":369,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["__rank__",{"_index":3980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_addmembertochanneloverwrite",{"_index":1450,"title":{},"body":{"injectables/GuildService.html":{}}}],["_addmembertochanneloverwrite(user_id",{"_index":1460,"title":{},"body":{"injectables/GuildService.html":{}}}],["_count",{"_index":1539,"title":{},"body":{"injectables/GuildService.html":{}}}],["_days",{"_index":2882,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_fetchguilds",{"_index":2384,"title":{},"body":{"injectables/SelfService.html":{}}}],["_fetchguilds(userid",{"_index":2388,"title":{},"body":{"injectables/SelfService.html":{}}}],["_getguildidfromselectmenu",{"_index":2066,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["_getguildidfromselectmenu(interaction",{"_index":2074,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["_getmessage",{"_index":2811,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["_getmessage(msgid",{"_index":2813,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["_hours",{"_index":2883,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_ismemberadmin",{"_index":1705,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberadmin(user_id",{"_index":1718,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismembermod",{"_index":1706,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismembermod(user_id",{"_index":1721,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberverified",{"_index":1707,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_ismemberverified(user_id",{"_index":1723,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["_minutes",{"_index":2884,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["_removememberfromchanneloverwrite",{"_index":1451,"title":{},"body":{"injectables/GuildService.html":{}}}],["_removememberfromchanneloverwrite(user_id",{"_index":1464,"title":{},"body":{"injectables/GuildService.html":{}}}],["aber",{"_index":955,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["abgeschickt",{"_index":833,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["ability",{"_index":3610,"title":{},"body":{"license.html":{}}}],["above",{"_index":838,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"license.html":{}}}],["absence",{"_index":3473,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":3885,"title":{},"body":{"license.html":{}}}],["acc",{"_index":1549,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[channelid",{"_index":1547,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[channelid][userid",{"_index":1548,"title":{},"body":{"injectables/GuildService.html":{}}}],["acc[date",{"_index":1560,"title":{},"body":{"injectables/GuildService.html":{}}}],["accent",{"_index":896,"title":{},"body":{"classes/DiscordUser.html":{}}}],["accentcolor",{"_index":889,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["accept",{"_index":3698,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":3697,"title":{},"body":{"license.html":{}}}],["accepted",{"_index":1314,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["access",{"_index":3243,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":3253,"title":{},"body":{"license.html":{}}}],["accesstoken",{"_index":1918,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["accompanied",{"_index":3517,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":3889,"title":{},"body":{"license.html":{}}}],["accomplish",{"_index":3256,"title":{},"body":{"license.html":{}}}],["accord",{"_index":3472,"title":{},"body":{"license.html":{}}}],["according",{"_index":3880,"title":{},"body":{"license.html":{}}}],["account",{"_index":2871,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["accumulator",{"_index":1559,"title":{},"body":{"injectables/GuildService.html":{}}}],["achieve",{"_index":3894,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":3404,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":3749,"title":{},"body":{"license.html":{}}}],["action",{"_index":249,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["actionrowbuilder",{"_index":742,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["actionrowbuilder().addcomponents",{"_index":798,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/initGuildCommand.html":{}}}],["actionrowbuilder().addcomponents(button",{"_index":772,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["actionrowbuilder().addcomponents(needhelpbutton",{"_index":965,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{}}}],["actions",{"_index":305,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["actions)[number",{"_index":2031,"title":{},"body":{"classes/LogEntry.html":{}}}],["actions})@isoptional()@isstring()@isin(actions",{"_index":291,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["activities",{"_index":3307,"title":{},"body":{"license.html":{}}}],["activity",{"_index":2610,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["actual",{"_index":3774,"title":{},"body":{"license.html":{}}}],["actually",{"_index":3583,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":3285,"title":{},"body":{"license.html":{}}}],["add",{"_index":800,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["addchanneltypes",{"_index":3122,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["addcomponents",{"_index":2230,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["added",{"_index":1325,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["addfields",{"_index":687,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/UserInfoUiCommand.html":{}}}],["additional",{"_index":3487,"title":{},"body":{"license.html":{}}}],["addmember",{"_index":1227,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["addmember(member",{"_index":1234,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["addmember(userid",{"_index":1725,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addmembers",{"_index":1708,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addmembers(guildid",{"_index":1727,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["addreactions",{"_index":1020,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["address",{"_index":3831,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":3280,"title":{},"body":{"license.html":{}}}],["addrolecommand",{"_index":1,"title":{"classes/AddRoleCommand.html":{}},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["admin",{"_index":1011,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RoleResponse.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["administrator",{"_index":2256,"title":{},"body":{"classes/PingCommand.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["adminroleid",{"_index":2445,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["adopted",{"_index":3444,"title":{},"body":{"license.html":{}}}],["adversely",{"_index":3617,"title":{},"body":{"license.html":{}}}],["advised",{"_index":3876,"title":{},"body":{"license.html":{}}}],["affects",{"_index":3618,"title":{},"body":{"license.html":{}}}],["affero",{"_index":3161,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":3729,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":3400,"title":{},"body":{"license.html":{}}}],["against",{"_index":3461,"title":{},"body":{"license.html":{}}}],["agb",{"_index":1315,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["aggregate",{"_index":3502,"title":{},"body":{"license.html":{}}}],["agpl",{"_index":3923,"title":{},"body":{"license.html":{},"properties.html":{}}}],["agree",{"_index":3812,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":3862,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":3760,"title":{},"body":{"license.html":{}}}],["aka",{"_index":466,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["algorithm",{"_index":1923,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["alias",{"_index":2972,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3941,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alleging",{"_index":3737,"title":{},"body":{"license.html":{}}}],["allow",{"_index":2115,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["allowed",{"_index":3181,"title":{},"body":{"license.html":{}}}],["along",{"_index":3474,"title":{},"body":{"license.html":{}}}],["already",{"_index":1116,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildService.html":{},"license.html":{}}}],["alternate",{"_index":3227,"title":{},"body":{"license.html":{}}}],["alternative",{"_index":3532,"title":{},"body":{"license.html":{}}}],["always",{"_index":906,"title":{},"body":{"classes/DiscordUser.html":{},"injectables/GuildMemberEvents.html":{}}}],["amazing",{"_index":3089,"title":{},"body":{"index.html":{}}}],["americano",{"_index":2488,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["ancillary",{"_index":3699,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":3220,"title":{},"body":{"license.html":{}}}],["anfrage",{"_index":2125,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["anliegen",{"_index":2643,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["annotation",{"_index":3964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anouncement.command",{"_index":389,"title":{},"body":{"modules/BotModule.html":{}}}],["anouncement.command.ts",{"_index":2204,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["anouncement.command.ts:31",{"_index":2207,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{}}}],["anouncement.command.ts:69",{"_index":2246,"title":{},"body":{"classes/MumVoiceCommandUi.html":{}}}],["anouncement.command.ts:97",{"_index":2247,"title":{},"body":{"classes/MumVoiceCommandUi.html":{}}}],["anouncement.dto",{"_index":2211,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["anouncement.dto.ts",{"_index":2050,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"coverage.html":{}}}],["anouncement.dto.ts:15",{"_index":2053,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["anouncement.dto.ts:25",{"_index":2058,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["ansage",{"_index":2239,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["answer",{"_index":806,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{}}}],["answer.value",{"_index":816,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answercomponentrow",{"_index":797,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answerinput",{"_index":793,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["answers",{"_index":812,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["anti",{"_index":3432,"title":{},"body":{"license.html":{}}}],["antwort",{"_index":829,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["anyone",{"_index":3485,"title":{},"body":{"license.html":{}}}],["anything",{"_index":3294,"title":{},"body":{"license.html":{}}}],["apfelkuchen",{"_index":2483,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["api",{"_index":1008,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"properties.html":{}}}],["apibearerauth",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apibody",{"_index":564,"title":{},"body":{"controllers/ChannelController.html":{}}}],["apiheader",{"_index":1856,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["apioperation",{"_index":565,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":477,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["apiproperty({type",{"_index":1079,"title":{},"body":{"classes/Guild.html":{},"classes/LogEntryDto.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["apipropertyoptional",{"_index":304,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SettingsDto.html":{}}}],["apipropertyoptional({type",{"_index":289,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/SelfDto.html":{}}}],["apiresponse",{"_index":566,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":567,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{}}}],["apitags('/channel",{"_index":581,"title":{},"body":{"controllers/ChannelController.html":{}}}],["apitags('/role",{"_index":2320,"title":{},"body":{"controllers/RoleController.html":{}}}],["apitags('auth/jwt",{"_index":1860,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["app",{"_index":1042,"title":{},"body":{"interfaces/EventToLog.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":2270,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":82,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":3298,"title":{},"body":{"license.html":{}}}],["application",{"_index":1038,"title":{},"body":{"interfaces/EventToLog.html":{},"license.html":{}}}],["application/x",{"_index":1943,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["applicationcommandtype",{"_index":2208,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["applicationcommandtype.chatinput",{"_index":2214,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["applicationcommandtype.message",{"_index":2224,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["applicationcommandtype.user",{"_index":2817,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["applications",{"_index":3062,"title":{},"body":{"index.html":{}}}],["applies",{"_index":3838,"title":{},"body":{"license.html":{}}}],["apply",{"_index":3274,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":93,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":3317,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":3466,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":3884,"title":{},"body":{"license.html":{}}}],["apps",{"_index":3028,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appservice",{"_index":109,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archive",{"_index":3915,"title":{},"body":{"license.html":{}}}],["args",{"_index":372,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["argumentshost",{"_index":629,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["arising",{"_index":3866,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":3770,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":3783,"title":{},"body":{"license.html":{}}}],["array",{"_index":446,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["article",{"_index":3441,"title":{},"body":{"license.html":{}}}],["ask",{"_index":759,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{}}}],["assert",{"_index":3216,"title":{},"body":{"license.html":{}}}],["assets",{"_index":3718,"title":{},"body":{"license.html":{}}}],["associated",{"_index":3378,"title":{},"body":{"license.html":{}}}],["assume",{"_index":3856,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":3888,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":3666,"title":{},"body":{"license.html":{}}}],["async",{"_index":10,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["at(unixtimestamp",{"_index":1015,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["attach",{"_index":3896,"title":{},"body":{"license.html":{}}}],["attaches",{"_index":2641,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["attachment",{"_index":1376,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"injectables/GuildUserService.html":{},"miscellaneous/functions.html":{}}}],["attachment.url",{"_index":1395,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["attachments",{"_index":1739,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["attachmenttype",{"_index":3034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attachtment",{"_index":1382,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["attempt",{"_index":3676,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":3647,"title":{},"body":{"license.html":{}}}],["auditevents",{"_index":313,"title":{},"body":{"modules/AuditLogModule.html":{},"coverage.html":{},"overview.html":{}}}],["auditlog",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"injectables/GuildService.html":{}}}],["auditlog.controller",{"_index":315,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["auditlog.events",{"_index":316,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["auditlog.service",{"_index":242,"title":{},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{}}}],["auditlog/auditlog.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["auditlogcontroller",{"_index":224,"title":{"controllers/AuditLogController.html":{}},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"coverage.html":{}}}],["auditlogfilterdto",{"_index":229,"title":{"classes/AuditLogFilterDto.html":{}},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"coverage.html":{}}}],["auditlogmodule",{"_index":136,"title":{"modules/AuditLogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/ModerationModule.html":{},"modules.html":{},"overview.html":{}}}],["auditlogservice",{"_index":241,"title":{"injectables/AuditLogService.html":{}},"body":{"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"coverage.html":{},"overview.html":{}}}],["auf",{"_index":959,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["aus",{"_index":2177,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["ausgewählte",{"_index":2229,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["auth",{"_index":1838,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.controller",{"_index":1885,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.controller.ts",{"_index":1837,"title":{},"body":{"controllers/JwtAuthController.html":{},"coverage.html":{}}}],["auth.controller.ts:35",{"_index":1849,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.controller.ts:40",{"_index":1843,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auth.guard",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":1870,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["auth.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["auth.module.ts",{"_index":1880,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.service",{"_index":1853,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{}}}],["auth.service.ts",{"_index":1896,"title":{},"body":{"injectables/JwtAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:12",{"_index":1902,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:21",{"_index":1906,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:45",{"_index":1908,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:57",{"_index":1910,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.service.ts:66",{"_index":1904,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["auth.strategy",{"_index":1881,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["auth.strategy.ts",{"_index":1961,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:17",{"_index":1967,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:7",{"_index":1965,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth/jwt/guards/jwt",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"controllers/GuildSettingsController.html":{},"controllers/SelfController.html":{}}}],["auth/jwt/jwt",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["authguard",{"_index":1872,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{}}}],["authguard('jwt",{"_index":1871,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshJwtGuard.html":{}}}],["author",{"_index":3095,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["authorization",{"_index":1956,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["authorization_code",{"_index":1937,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["authorized",{"_index":3638,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":3744,"title":{},"body":{"license.html":{}}}],["authorizing",{"_index":3787,"title":{},"body":{"license.html":{}}}],["authors",{"_index":3655,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":1862,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["auto",{"_index":1088,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["autodeletechannel",{"_index":1091,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["autodeletechannel.channelid",{"_index":1157,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["autodeletechannels",{"_index":1111,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{}}}],["automatic",{"_index":3708,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":3391,"title":{},"body":{"license.html":{}}}],["available",{"_index":3230,"title":{},"body":{"license.html":{}}}],["avatar",{"_index":899,"title":{},"body":{"classes/DiscordUser.html":{}}}],["avatarurl",{"_index":871,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/Guild.html":{},"controllers/GuildUserController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["average",{"_index":1468,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperchannellastmonth",{"_index":1452,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperchannellastmonth(guildid",{"_index":1466,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperdaylastmonth",{"_index":1453,"title":{},"body":{"injectables/GuildService.html":{}}}],["averagemessagesperdaylastmonth(guildid",{"_index":1494,"title":{},"body":{"injectables/GuildService.html":{}}}],["avg(subquery.messagecount",{"_index":1478,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecount",{"_index":1479,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecounts",{"_index":1550,"title":{},"body":{"injectables/GuildService.html":{}}}],["avgmessagecounts[channelid",{"_index":1556,"title":{},"body":{"injectables/GuildService.html":{}}}],["avoid",{"_index":2807,"title":{},"body":{"controllers/UserController.html":{}}}],["await",{"_index":62,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":3193,"title":{},"body":{"license.html":{}}}],["axios",{"_index":1589,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["axioserror",{"_index":1912,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["b",{"_index":3356,"title":{},"body":{"license.html":{}}}],["b(\\d+d)(\\d+h)\\b|\\b(\\d+h)(\\d+m)\\b|\\b(\\d+d)(\\d+m)\\b|\\b(\\d+[dhm])\\b|\\b(\\d+d)(\\d+h)(\\d+m)/.test",{"_index":2880,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["b(\\d+d)(\\d+h)\\b|\\b(\\d+h)(\\d+m)\\b|\\b(\\d+d)(\\d+m)\\b|\\b(\\d+[dhm])\\b|\\b(\\d+d)(\\d+h)(\\d+m)/g",{"_index":2886,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["backers",{"_index":3090,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":1850,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["badrequestexception('no",{"_index":1867,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["ban",{"_index":2030,"title":{},"body":{"classes/LogEntry.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["banned",{"_index":2724,"title":{},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["banner",{"_index":901,"title":{},"body":{"classes/DiscordUser.html":{}}}],["bannerurl",{"_index":890,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["banuser",{"_index":2734,"title":{},"body":{"controllers/UserController.html":{}}}],["banuser(guildid",{"_index":2739,"title":{},"body":{"controllers/UserController.html":{}}}],["base64",{"_index":987,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["base64resolvable",{"_index":984,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["based",{"_index":579,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{},"license.html":{}}}],["baseguildtextchannel",{"_index":1512,"title":{},"body":{"injectables/GuildService.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["baseguildtextchannel).permissionoverwrites.delete",{"_index":2630,"title":{},"body":{"injectables/TasksService.html":{}}}],["baseinteraction",{"_index":2699,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["basic",{"_index":3393,"title":{},"body":{"license.html":{}}}],["bearbeiten",{"_index":789,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["bearer",{"_index":1957,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["become",{"_index":3229,"title":{},"body":{"license.html":{}}}],["becomes",{"_index":3247,"title":{},"body":{"license.html":{}}}],["before",{"_index":503,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"injectables/GuildMemberEvents.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["behalf",{"_index":3418,"title":{},"body":{"license.html":{}}}],["bei",{"_index":2674,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["being",{"_index":1533,"title":{},"body":{"injectables/GuildService.html":{},"license.html":{}}}],["bekommen",{"_index":964,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["believe",{"_index":3779,"title":{},"body":{"license.html":{}}}],["belongs",{"_index":1009,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["below",{"_index":1001,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["benefit",{"_index":3223,"title":{},"body":{"license.html":{}}}],["benötigt",{"_index":3043,"title":{},"body":{"miscellaneous/functions.html":{}}}],["besprechen",{"_index":2646,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["best",{"_index":3893,"title":{},"body":{"license.html":{}}}],["better",{"_index":3917,"title":{},"body":{"license.html":{}}}],["between",{"_index":3387,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":3504,"title":{},"body":{"license.html":{}}}],["bienenstich",{"_index":2484,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["bin",{"_index":946,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["binarytotextencoding",{"_index":2088,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["bis",{"_index":2671,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["bit",{"_index":1360,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["body",{"_index":561,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"license.html":{}}}],["boolean",{"_index":451,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bot",{"_index":828,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildService.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/initGuildCommand.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["bot/bot.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["bot_event_handler_name",{"_index":1061,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bot_event_key",{"_index":1060,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["botevent",{"_index":364,"title":{"interfaces/BotEvent.html":{}},"body":{"interfaces/BotEvent.html":{},"classes/Explorer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["boteventdecorator",{"_index":1047,"title":{},"body":{"classes/Explorer.html":{}}}],["boteventdecorator(provider",{"_index":1053,"title":{},"body":{"classes/Explorer.html":{}}}],["both",{"_index":2877,"title":{},"body":{"classes/UserTimeOutDto.html":{},"license.html":{}}}],["botmodule",{"_index":104,"title":{"modules/BotModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BotModule.html":{},"modules.html":{},"overview.html":{}}}],["bots",{"_index":2391,"title":{},"body":{"injectables/SelfService.html":{}}}],["break",{"_index":2552,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{}}}],["browse",{"_index":3927,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3925,"title":{},"body":{"modules.html":{}}}],["builder",{"_index":3041,"title":{},"body":{"miscellaneous/functions.html":{}}}],["building",{"_index":3058,"title":{},"body":{"index.html":{}}}],["business",{"_index":3791,"title":{},"body":{"license.html":{}}}],["button",{"_index":765,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"miscellaneous/functions.html":{}}}],["buttonbuilder",{"_index":743,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{}}}],["buttoninteraction",{"_index":728,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{}}}],["buttonstyle",{"_index":744,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{}}}],["bzw",{"_index":683,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["c",{"_index":3168,"title":{},"body":{"license.html":{}}}],["cake",{"_index":2526,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["cakes",{"_index":2477,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["call",{"_index":1950,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["callback",{"_index":3025,"title":{},"body":{"miscellaneous/functions.html":{}}}],["called",{"_index":3026,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["canactivate",{"_index":858,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["canactivate(context",{"_index":862,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["cappuccino",{"_index":2489,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["cardinal",{"_index":1219,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["carry",{"_index":3479,"title":{},"body":{"license.html":{}}}],["case",{"_index":2538,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["cases",{"_index":3246,"title":{},"body":{"license.html":{}}}],["catch",{"_index":76,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"injectables/DmMessageHandler.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["catch(channelnottextbasedexception",{"_index":638,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["catch(exception",{"_index":640,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["catch(exceptionlist",{"_index":703,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["catch(guilddoesnotexistexception",{"_index":1220,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["catch(senddirectmessagetouserexception",{"_index":2420,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["catch(wrongargsexception",{"_index":707,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["catcherror",{"_index":1915,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["catcherror((error",{"_index":1947,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["category",{"_index":498,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SpecialCommand.html":{},"classes/UserToUser.html":{}}}],["categorychannel",{"_index":485,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["categorychannel'])@isoptional()@apiproperty({type",{"_index":1183,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["categorychannelresolvable",{"_index":484,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["categoryid",{"_index":2098,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["categoryid.replace('modrequest",{"_index":2128,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["cause",{"_index":3508,"title":{},"body":{"license.html":{}}}],["caution",{"_index":2800,"title":{},"body":{"controllers/UserController.html":{}}}],["caution'})@apiresponse({status",{"_index":2755,"title":{},"body":{"controllers/UserController.html":{}}}],["cease",{"_index":3680,"title":{},"body":{"license.html":{}}}],["certain",{"_index":3635,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":3690,"title":{},"body":{"license.html":{}}}],["change",{"_index":492,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"license.html":{}}}],["changed",{"_index":2443,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event",{"_index":1640,"title":{},"body":{"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{}}}],["changed.event.ts",{"_index":2434,"title":{},"body":{"classes/SettingsChanged.html":{},"coverage.html":{}}}],["changed.event.ts:20",{"_index":2439,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:6",{"_index":2437,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:7",{"_index":2438,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changed.event.ts:8",{"_index":2436,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["changing",{"_index":3180,"title":{},"body":{"license.html":{}}}],["channel",{"_index":415,"title":{"classes/Channel.html":{}},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildRestrictedChannelController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["channel'})@apibody({schema",{"_index":540,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.channelid",{"_index":1115,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildService.html":{}}}],["channel.clean",{"_index":619,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.clone",{"_index":1172,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.controller",{"_index":1141,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildRestrictedChannelModule.html":{}}}],["channel.controller.ts",{"_index":1090,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildRestrictedChannelController.html":{},"coverage.html":{}}}],["channel.controller.ts:24",{"_index":1099,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.controller.ts:34",{"_index":1097,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.controller.ts:54",{"_index":1101,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["channel.delete",{"_index":1173,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.edit",{"_index":605,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.edit(channeldata",{"_index":597,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.guard",{"_index":1262,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["channel.guard.ts",{"_index":2944,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["channel.id",{"_index":2123,"title":{},"body":{"classes/ModRequestFlow.html":{},"controllers/UserController.html":{}}}],["channel.istextbased",{"_index":2834,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["channel.lastmessage.fetch()).createdtimestamp",{"_index":2629,"title":{},"body":{"injectables/TasksService.html":{}}}],["channel.messages.fetch(msgid",{"_index":2835,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["channel.module",{"_index":1420,"title":{},"body":{"modules/GuildModule.html":{}}}],["channel.module.ts",{"_index":1140,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildRestrictedChannelModule.html":{}}}],["channel.parentid",{"_index":1402,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["channel.permissionoverwrites.delete('1011513775054143632",{"_index":2163,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["channel.permissionoverwrites.delete(ticket.userid",{"_index":2162,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["channel.requiredpoints",{"_index":1448,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.send",{"_index":1337,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/ModRequestFlow.html":{}}}],["channel.send(usermention(interaction.user.id",{"_index":2133,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["channel.service",{"_index":392,"title":{},"body":{"modules/BotModule.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{}}}],["channel.service.ts",{"_index":1145,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"coverage.html":{}}}],["channel.service.ts:10",{"_index":1148,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:14",{"_index":1440,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:17",{"_index":1151,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:22",{"_index":1153,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:40",{"_index":1149,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["channel.service.ts:44",{"_index":1438,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:52",{"_index":1443,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.service.ts:8",{"_index":1436,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["channel.setparent('1014456370860404756",{"_index":2164,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["channel.slowmode.${duration",{"_index":602,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channel.type",{"_index":610,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["channel/channel.controller",{"_index":2201,"title":{},"body":{"modules/ModerationModule.html":{}}}],["channel/dto/auto",{"_index":1119,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"coverage.html":{}}}],["channel/guild",{"_index":391,"title":{},"body":{"modules/BotModule.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["channel_created",{"_index":2024,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channel_deleted",{"_index":2025,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channel_id",{"_index":1461,"title":{},"body":{"injectables/GuildService.html":{}}}],["channel_updated",{"_index":2026,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["channelcleaned",{"_index":500,"title":{"classes/ChannelCleaned.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["channelcleaned(guildid",{"_index":620,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelcontroller",{"_index":529,"title":{"controllers/ChannelController.html":{}},"body":{"controllers/ChannelController.html":{},"modules/ModerationModule.html":{},"coverage.html":{}}}],["channeldata",{"_index":543,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelid",{"_index":504,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/RestrictedChannelDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["channelidguard",{"_index":2945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["channelidguardmixin",{"_index":3956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["channelname",{"_index":627,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["channelnottextbasedexception",{"_index":576,"title":{"classes/ChannelNotTextBasedException.html":{}},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["channelnottextbasedexception(channel.name",{"_index":618,"title":{},"body":{"controllers/ChannelController.html":{}}}],["channelnottextbasedexceptionfilter",{"_index":639,"title":{"classes/ChannelNotTextBasedExceptionFilter.html":{}},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["channelrows",{"_index":3151,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channels",{"_index":556,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/TasksService.html":{}}}],["channels.dto",{"_index":1106,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["channels.dto.ts",{"_index":1120,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["channels.dto.ts:10",{"_index":1123,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["channels.dto.ts:12",{"_index":2294,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["channels.dto.ts:16",{"_index":1130,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["channels.dto.ts:17",{"_index":2295,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["channels.fetch('1195024829544411168",{"_index":819,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["channels.fetch(ticket.ticketid",{"_index":2626,"title":{},"body":{"injectables/TasksService.html":{}}}],["channels.fetch(ticketid",{"_index":2161,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["channels.foreach((channel",{"_index":1562,"title":{},"body":{"injectables/GuildService.html":{}}}],["channelselectmenubuilder",{"_index":3113,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channelselectmenuinteraction",{"_index":3110,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["channeltype",{"_index":483,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.guildannouncement",{"_index":494,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["channeltype.guildtext",{"_index":493,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.privatethread",{"_index":612,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["channeltype.publicthread",{"_index":611,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{}}}],["characterized",{"_index":3607,"title":{},"body":{"license.html":{}}}],["charge",{"_index":3205,"title":{},"body":{"license.html":{}}}],["check",{"_index":1341,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["checkactiveusers",{"_index":2568,"title":{},"body":{"injectables/TasksService.html":{}}}],["checked",{"_index":2587,"title":{},"body":{"injectables/TasksService.html":{}}}],["checkifpersonwasverifiedbefore",{"_index":1228,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["checkifpersonwasverifiedbefore(reaction",{"_index":1238,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["checklimits(message",{"_index":1407,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["checkproviders",{"_index":1049,"title":{},"body":{"classes/Explorer.html":{}}}],["checkproviders(providers",{"_index":1056,"title":{},"body":{"classes/Explorer.html":{}}}],["checks",{"_index":2396,"title":{},"body":{"injectables/SelfService.html":{},"injectables/TasksService.html":{}}}],["checktimeouts",{"_index":2569,"title":{},"body":{"injectables/TasksService.html":{}}}],["children",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["choice",{"_index":2919,"title":{},"body":{"classes/UserToUser.html":{}}}],["choice(commandtoexecute",{"_index":2926,"title":{},"body":{"classes/UserToUser.html":{}}}],["choice(commandtoexecute)@param({description",{"_index":2913,"title":{},"body":{"classes/UserToUser.html":{}}}],["choiceoptions",{"_index":2920,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["choose",{"_index":3044,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["chooserandomcoffee",{"_index":2480,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["chooserandomcoffee(interaction",{"_index":2511,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["choosing",{"_index":3844,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":3424,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":3433,"title":{},"body":{"license.html":{}}}],["civil",{"_index":3887,"title":{},"body":{"license.html":{}}}],["claim",{"_index":3734,"title":{},"body":{"license.html":{}}}],["claims",{"_index":3746,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddRoleCommand.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["classdecorator",{"_index":3030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"overview.html":{}}}],["clean",{"_index":539,"title":{},"body":{"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"miscellaneous/functions.html":{}}}],["cleanchannel",{"_index":532,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleanchannel(guildid",{"_index":537,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleaning",{"_index":609,"title":{},"body":{"controllers/ChannelController.html":{}}}],["cleantextchannel",{"_index":572,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["cleantextchannel(channel",{"_index":3020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cleanwfpmember",{"_index":406,"title":{"classes/CleanWfpMember.html":{}},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["cleanwfpmembers",{"_index":1454,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["cleanwfpmembers(guildid",{"_index":1496,"title":{},"body":{"injectables/GuildService.html":{}}}],["clear",{"_index":3546,"title":{},"body":{"license.html":{}}}],["click",{"_index":2828,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["client",{"_index":14,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{}}}],["client.setmaxlisteners(30",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["client_id",{"_index":1932,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["client_secret",{"_index":1934,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["clientevents",{"_index":370,"title":{},"body":{"interfaces/BotEvent.html":{},"classes/CommunityQuestionCommand.html":{}}}],["clientevents['interactioncreate",{"_index":807,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["clientevents[keyof",{"_index":373,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["closed",{"_index":2159,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["closely",{"_index":3883,"title":{},"body":{"license.html":{}}}],["closestaletickets",{"_index":2570,"title":{},"body":{"injectables/TasksService.html":{}}}],["cls",{"_index":3050,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule",{"_index":310,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule_exports",{"_index":311,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_auditlogmodule_providers",{"_index":312,"title":{},"body":{"modules/AuditLogModule.html":{},"overview.html":{}}}],["cluster_botmodule",{"_index":374,"title":{},"body":{"modules/BotModule.html":{},"overview.html":{}}}],["cluster_botmodule_providers",{"_index":375,"title":{},"body":{"modules/BotModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule",{"_index":1135,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule_exports",{"_index":1136,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildautodeletechannelmodule_providers",{"_index":1137,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"overview.html":{}}}],["cluster_guildmodule",{"_index":1412,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_exports",{"_index":1413,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_imports",{"_index":1415,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildmodule_providers",{"_index":1414,"title":{},"body":{"modules/GuildModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule",{"_index":1430,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule_exports",{"_index":1431,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{},"overview.html":{}}}],["cluster_guildrestrictedchannelmodule_providers",{"_index":1432,"title":{},"body":{"modules/GuildRestrictedChannelModule.html":{}}}],["cluster_guildsettingsmodule",{"_index":1596,"title":{},"body":{"modules/GuildSettingsModule.html":{},"overview.html":{}}}],["cluster_guildsettingsmodule_exports",{"_index":1598,"title":{},"body":{"modules/GuildSettingsModule.html":{},"overview.html":{}}}],["cluster_guildsettingsmodule_providers",{"_index":1597,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["cluster_guildusermodule",{"_index":1699,"title":{},"body":{"modules/GuildUserModule.html":{},"overview.html":{}}}],["cluster_guildusermodule_exports",{"_index":1700,"title":{},"body":{"modules/GuildUserModule.html":{},"overview.html":{}}}],["cluster_guildusermodule_providers",{"_index":1701,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["cluster_jwtauthmodule",{"_index":1874,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_jwtauthmodule_exports",{"_index":1875,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_jwtauthmodule_providers",{"_index":1876,"title":{},"body":{"modules/JwtAuthModule.html":{},"overview.html":{}}}],["cluster_moderationmodule",{"_index":2193,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_moderationmodule_imports",{"_index":2195,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_moderationmodule_providers",{"_index":2194,"title":{},"body":{"modules/ModerationModule.html":{}}}],["cluster_tasksmodule",{"_index":2553,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":2554,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_usermodule",{"_index":2840,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2842,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":2841,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":1844,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"license.html":{}}}],["coffee",{"_index":2525,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["coffees",{"_index":2478,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["collect",{"_index":3814,"title":{},"body":{"license.html":{}}}],["color",{"_index":897,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["colorresolvable",{"_index":976,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["colors",{"_index":656,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{}}}],["combine",{"_index":3825,"title":{},"body":{"license.html":{}}}],["combined",{"_index":3498,"title":{},"body":{"license.html":{}}}],["come",{"_index":3238,"title":{},"body":{"license.html":{}}}],["comes",{"_index":2360,"title":{},"body":{"controllers/SelfController.html":{},"license.html":{}}}],["command",{"_index":32,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["commandinteraction",{"_index":25,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{}}}],["commands",{"_index":1790,"title":{},"body":{"guards/HasRequiredRank.html":{},"license.html":{}}}],["commands/clean",{"_index":407,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/community",{"_index":394,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/init",{"_index":397,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/mod",{"_index":388,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/ping.command",{"_index":381,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/special.command",{"_index":411,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/ticket",{"_index":413,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/timeout.command",{"_index":385,"title":{},"body":{"modules/BotModule.html":{}}}],["commands/user",{"_index":400,"title":{},"body":{"modules/BotModule.html":{}}}],["commandtoexecute",{"_index":2922,"title":{},"body":{"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commandvalidationfilter",{"_index":700,"title":{"classes/CommandValidationFilter.html":{}},"body":{"classes/CommandValidationFilter.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["commercial",{"_index":3588,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":3761,"title":{},"body":{"license.html":{}}}],["common",{"_index":3582,"title":{},"body":{"license.html":{}}}],["communication",{"_index":3385,"title":{},"body":{"license.html":{}}}],["communicationdisableduntil",{"_index":872,"title":{},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{}}}],["community",{"_index":760,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"license.html":{},"properties.html":{}}}],["communityquestioncommand",{"_index":393,"title":{"classes/CommunityQuestionCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["communityquestiondto",{"_index":733,"title":{"classes/CommunityQuestionDto.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["communityquestionformdto",{"_index":736,"title":{"classes/CommunityQuestionFormDto.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["compilation",{"_index":3493,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":3503,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":3796,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":3364,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":3713,"title":{},"body":{"license.html":{}}}],["comply",{"_index":3415,"title":{},"body":{"license.html":{}}}],["component",{"_index":3355,"title":{},"body":{"license.html":{}}}],["components",{"_index":773,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["componenttype",{"_index":2092,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["componenttype.stringselect",{"_index":2186,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["computer",{"_index":3302,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":3833,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":3790,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":3265,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["configservice.get('jwt_access_secret",{"_index":1976,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('jwt_issuer",{"_index":1977,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":2290,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["configservice.get('token",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":3152,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["conflictexception",{"_index":1102,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["confused",{"_index":2844,"title":{},"body":{"modules/UserModule.html":{}}}],["connection",{"_index":3781,"title":{},"body":{"license.html":{}}}],["consequence",{"_index":3701,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":3865,"title":{},"body":{"license.html":{}}}],["considered",{"_index":3668,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":3753,"title":{},"body":{"license.html":{}}}],["console.error(e",{"_index":1291,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["console.log(category",{"_index":2534,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["console.log(e",{"_index":2632,"title":{},"body":{"injectables/TasksService.html":{}}}],["console.log(fromuserid",{"_index":2535,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["console.log(outcome",{"_index":674,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["console.log(touserid",{"_index":2536,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["conspicuously",{"_index":3465,"title":{},"body":{"license.html":{}}}],["const",{"_index":60,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":3981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constitutes",{"_index":3403,"title":{},"body":{"license.html":{}}}],["constructchanneldeletejobs",{"_index":1146,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["constructed",{"_index":3049,"title":{},"body":{"miscellaneous/functions.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["constructor(@inject(guildservice",{"_index":667,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["constructor(@inject(prismaservice",{"_index":332,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["constructor(@inject(selfservice",{"_index":2367,"title":{},"body":{"controllers/SelfController.html":{}}}],["constructor(channelname",{"_index":625,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["constructor(client",{"_index":13,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["constructor(configservice",{"_index":1964,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["constructor(database",{"_index":1457,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{}}}],["constructor(discord",{"_index":2386,"title":{},"body":{"injectables/SelfService.html":{}}}],["constructor(eventemitter",{"_index":205,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(guildid",{"_index":507,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["constructor(guildservice",{"_index":652,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["constructor(guilduserservice",{"_index":1369,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["constructor(jwtservice",{"_index":1899,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["constructor(prismaserver",{"_index":3104,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["constructor(prismaservice",{"_index":321,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["constructor(private",{"_index":1590,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["constructor(reflector",{"_index":1793,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["constructor(settingsservice",{"_index":1832,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["constructor(userid",{"_index":2717,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["construed",{"_index":3801,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":3566,"title":{},"body":{"license.html":{}}}],["contact",{"_index":782,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"license.html":{}}}],["contain",{"_index":3797,"title":{},"body":{"license.html":{}}}],["containing",{"_index":3648,"title":{},"body":{"license.html":{}}}],["contains",{"_index":1492,"title":{},"body":{"injectables/GuildService.html":{},"classes/LogEntry.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["content",{"_index":774,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildSettingsService.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["contents",{"_index":3757,"title":{},"body":{"license.html":{}}}],["contenttype",{"_index":3032,"title":{},"body":{"miscellaneous/functions.html":{}}}],["context",{"_index":637,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"license.html":{}}}],["context.getargbyindex(0",{"_index":863,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getargbyindex(1",{"_index":2274,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["context.getclass",{"_index":1809,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["context.gethandler",{"_index":1808,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["contextmenucommandinteraction",{"_index":2428,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["continue",{"_index":3613,"title":{},"body":{"license.html":{}}}],["continued",{"_index":3597,"title":{},"body":{"license.html":{}}}],["contractual",{"_index":3665,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":3808,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":3196,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":3743,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":3745,"title":{},"body":{"license.html":{}}}],["control",{"_index":3370,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":3748,"title":{},"body":{"license.html":{}}}],["controller",{"_index":81,"title":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('/channel",{"_index":582,"title":{},"body":{"controllers/ChannelController.html":{}}}],["controller('/role",{"_index":2321,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller('/user",{"_index":2763,"title":{},"body":{"controllers/UserController.html":{}}}],["controller('/user/self",{"_index":2366,"title":{},"body":{"controllers/SelfController.html":{}}}],["controller('auth",{"_index":1859,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["controller('autodeletechannel",{"_index":1108,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["controller('guild",{"_index":1429,"title":{},"body":{"controllers/GuildRestrictedChannelController.html":{}}}],["controllers",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["convenient",{"_index":3320,"title":{},"body":{"license.html":{}}}],["convert",{"_index":1283,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/functions.html":{}}}],["convey",{"_index":3308,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":3785,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":3608,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":3314,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":3664,"title":{},"body":{"license.html":{}}}],["cooperation",{"_index":3189,"title":{},"body":{"license.html":{}}}],["copies",{"_index":3178,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3175,"title":{},"body":{"license.html":{}}}],["copying",{"_index":3266,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":3183,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3167,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":3277,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":3421,"title":{},"body":{"license.html":{}}}],["correction",{"_index":3860,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":3366,"title":{},"body":{"license.html":{}}}],["cost",{"_index":3530,"title":{},"body":{"license.html":{}}}],["couldn't",{"_index":695,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["count",{"_index":688,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["count(m.messageid",{"_index":1476,"title":{},"body":{"injectables/GuildService.html":{}}}],["count(messageid",{"_index":1482,"title":{},"body":{"injectables/GuildService.html":{}}}],["counterclaim",{"_index":3735,"title":{},"body":{"license.html":{}}}],["countries",{"_index":3306,"title":{},"body":{"license.html":{}}}],["country",{"_index":3776,"title":{},"body":{"license.html":{}}}],["court",{"_index":3807,"title":{},"body":{"license.html":{}}}],["courts",{"_index":3882,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":3765,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":2927,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["covered",{"_index":3291,"title":{},"body":{"license.html":{}}}],["craft",{"_index":2418,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["create",{"_index":319,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["create(entry",{"_index":323,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["create/dm",{"_index":927,"title":{},"body":{"injectables/DmMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["create/guild",{"_index":1366,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["create/mod",{"_index":1424,"title":{},"body":{"modules/GuildModule.html":{},"classes/ModRequestFlow.html":{},"coverage.html":{}}}],["createautodeletechannel",{"_index":1092,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["createautodeletechannel(guildid",{"_index":1095,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["created",{"_index":430,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{}}}],["created'})@apiresponse({status",{"_index":2304,"title":{},"body":{"controllers/RoleController.html":{}}}],["createdat",{"_index":276,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{}}}],["createdfrom",{"_index":287,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["createdtill",{"_index":288,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["createdtimestamp",{"_index":417,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["createdynamicscheduledjob",{"_index":2571,"title":{},"body":{"injectables/TasksService.html":{}}}],["createdynamicscheduledjob(joboptions",{"_index":2589,"title":{},"body":{"injectables/TasksService.html":{}}}],["createhash",{"_index":2089,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["createhash('sha256",{"_index":2102,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["createparamdecorator",{"_index":3960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrole",{"_index":2297,"title":{},"body":{"controllers/RoleController.html":{}}}],["createrole(guildid",{"_index":2301,"title":{},"body":{"controllers/RoleController.html":{}}}],["createticket",{"_index":3974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creation/execution",{"_index":2558,"title":{},"body":{"modules/TasksModule.html":{}}}],["criterion",{"_index":3333,"title":{},"body":{"license.html":{}}}],["cron",{"_index":1128,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"injectables/TasksService.html":{}}}],["cron('*/5",{"_index":2576,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron('0",{"_index":2573,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjob",{"_index":2595,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjobparams",{"_index":2590,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjobs",{"_index":2593,"title":{},"body":{"injectables/TasksService.html":{}}}],["crontime",{"_index":1164,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["cross",{"_index":3733,"title":{},"body":{"license.html":{}}}],["crypto",{"_index":2090,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["ctx",{"_index":642,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getresponse",{"_index":644,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cure",{"_index":3693,"title":{},"body":{"license.html":{}}}],["curr",{"_index":1543,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr._count?.messageid",{"_index":1546,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.channelid.tostring",{"_index":1544,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.createdat.toisostring().split('t')[0",{"_index":1558,"title":{},"body":{"injectables/GuildService.html":{}}}],["curr.userid.tostring",{"_index":1545,"title":{},"body":{"injectables/GuildService.html":{}}}],["current",{"_index":1797,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/SelfController.html":{}}}],["customarily",{"_index":3520,"title":{},"body":{"license.html":{}}}],["customary",{"_index":3822,"title":{},"body":{"license.html":{}}}],["customer",{"_index":3526,"title":{},"body":{"license.html":{}}}],["d",{"_index":2879,"title":{},"body":{"classes/UserTimeOutDto.html":{},"license.html":{}}}],["d+)|\\d",{"_index":1125,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["damages",{"_index":3863,"title":{},"body":{"license.html":{}}}],["dann",{"_index":2648,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["data",{"_index":272,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"classes/EditRoleData.html":{},"controllers/GuildController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["data.roles",{"_index":2710,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["database",{"_index":15,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/SelfService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["date",{"_index":294,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["date((await",{"_index":2628,"title":{},"body":{"injectables/TasksService.html":{}}}],["date().getdate",{"_index":1518,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["date().gettime",{"_index":2795,"title":{},"body":{"controllers/UserController.html":{}}}],["date().getutcdate",{"_index":2105,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["date().setdate(new",{"_index":1517,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["date(dto.duration).gettime",{"_index":2661,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["date(filter.createdfrom).toisostring",{"_index":347,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["date(filter.createdtill).toisostring",{"_index":350,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["date(member.joinedtimestamp",{"_index":1523,"title":{},"body":{"injectables/GuildService.html":{}}}],["date(message.createdtimestamp",{"_index":1390,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["date(new",{"_index":1516,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["date.now",{"_index":2616,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["date_sub(now",{"_index":1483,"title":{},"body":{"injectables/GuildService.html":{}}}],["dauer",{"_index":2899,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["day",{"_index":1199,"title":{},"body":{"controllers/GuildController.html":{},"injectables/GuildService.html":{},"injectables/TasksService.html":{}}}],["days",{"_index":1471,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["dbuser",{"_index":1351,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["dbuser.guildid",{"_index":1358,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["dbuser.userid",{"_index":2617,"title":{},"body":{"injectables/TasksService.html":{}}}],["de",{"_index":2060,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["dearv8protectmefromparameterswithnonevalue",{"_index":2965,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dearv8protectmefromparameterswithnonevalue(target",{"_index":3029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["december",{"_index":3446,"title":{},"body":{"license.html":{}}}],["decide",{"_index":3841,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declining",{"_index":3656,"title":{},"body":{"license.html":{}}}],["decorator",{"_index":3970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":26,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsDto.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["decorators/bot",{"_index":1062,"title":{},"body":{"classes/Explorer.html":{}}}],["decorators/requires",{"_index":1804,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["deemed",{"_index":3435,"title":{},"body":{"license.html":{}}}],["default",{"_index":214,"title":{},"body":{"injectables/AppService.html":{},"interfaces/BotEvent.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/RoleResponse.html":{},"classes/SpecialCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["defaultmemberpermissions",{"_index":45,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["defective",{"_index":3855,"title":{},"body":{"license.html":{}}}],["defending",{"_index":3224,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":3804,"title":{},"body":{"license.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["definition",{"_index":3376,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":3270,"title":{},"body":{"license.html":{}}}],["deine",{"_index":2135,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["delete",{"_index":1089,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/GuildModule.html":{},"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["delete(':roleid",{"_index":2334,"title":{},"body":{"controllers/RoleController.html":{}}}],["delete(':roleid')@apioperation({summary",{"_index":2308,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleteatcron",{"_index":1122,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["deletechannel.channelid",{"_index":1167,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deletechannel.deleteatcron",{"_index":1165,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deletechannel.guildid",{"_index":1168,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["deleted",{"_index":528,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/RoleController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["deleted'})@apiresponse({status",{"_index":2309,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleteone",{"_index":1709,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["deleteone(userid",{"_index":1729,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["deleterole",{"_index":2298,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleterole(guildid",{"_index":2306,"title":{},"body":{"controllers/RoleController.html":{}}}],["deletes",{"_index":3023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deleting",{"_index":1169,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["den",{"_index":960,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["denied",{"_index":3614,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":3762,"title":{},"body":{"license.html":{}}}],["deny",{"_index":2112,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["dependencies",{"_index":95,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":908,"title":{},"body":{"classes/DiscordUser.html":{}}}],["deprive",{"_index":3771,"title":{},"body":{"license.html":{}}}],["der",{"_index":2872,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["des",{"_index":2900,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["desc",{"_index":357,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{}}}],["describe",{"_index":2003,"title":{},"body":{"classes/LogEntry.html":{}}}],["description",{"_index":486,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"properties.html":{}}}],["descriptionlocalizations",{"_index":2052,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["designated",{"_index":3538,"title":{},"body":{"license.html":{}}}],["designed",{"_index":3187,"title":{},"body":{"license.html":{}}}],["detail",{"_index":3830,"title":{},"body":{"license.html":{}}}],["details",{"_index":3907,"title":{},"body":{"license.html":{}}}],["determined",{"_index":3024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["determining",{"_index":3577,"title":{},"body":{"license.html":{}}}],["develop",{"_index":3891,"title":{},"body":{"license.html":{}}}],["developers",{"_index":3211,"title":{},"body":{"license.html":{}}}],["development",{"_index":3070,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":2242,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dich",{"_index":2677,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["die",{"_index":680,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["diese",{"_index":2236,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["differ",{"_index":3829,"title":{},"body":{"license.html":{}}}],["different",{"_index":1995,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["differently",{"_index":3643,"title":{},"body":{"license.html":{}}}],["digest('hex",{"_index":2107,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["diplomatenkaffee",{"_index":2490,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["dir",{"_index":956,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["direct",{"_index":2414,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["direction",{"_index":3419,"title":{},"body":{"license.html":{}}}],["directions",{"_index":3547,"title":{},"body":{"license.html":{}}}],["directly",{"_index":3040,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["disabled",{"_index":524,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["disclaim",{"_index":3457,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":3845,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":3640,"title":{},"body":{"license.html":{}}}],["discord",{"_index":35,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"injectables/DmMessageHandler.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"properties.html":{}}}],["discord.js",{"_index":39,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["discordapierror",{"_index":935,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["discordapierror).message",{"_index":968,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["discordclientoptions",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["discordexecutioncontext",{"_index":852,"title":{"interfaces/DiscordExecutionContext.html":{}},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["discordguildmember",{"_index":868,"title":{"classes/DiscordGuildMember.html":{}},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["discordjs",{"_index":1270,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"properties.html":{}}}],["discordmodule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["discordmodule.forfeature",{"_index":317,"title":{},"body":{"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["discordmodule.forrootasync",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["discorduser",{"_index":887,"title":{"classes/DiscordUser.html":{}},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["discorduser.avatarurl",{"_index":2402,"title":{},"body":{"injectables/SelfService.html":{}}}],["discorduser.fetch",{"_index":2276,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["discorduser.globalname",{"_index":2403,"title":{},"body":{"injectables/SelfService.html":{}}}],["discorduser.id",{"_index":2281,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/SelfService.html":{}}}],["discorduser.partial",{"_index":2275,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["discorduser.roles.add(role.id",{"_index":1363,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser.roles.cache.has('1121823930085285938",{"_index":1357,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser.roles.remove('1121823930085285938",{"_index":1364,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["discorduser['id",{"_index":883,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["discriminator",{"_index":891,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["discriminatory",{"_index":3788,"title":{},"body":{"license.html":{}}}],["display",{"_index":910,"title":{},"body":{"classes/DiscordUser.html":{},"license.html":{}}}],["displayavatarurl",{"_index":892,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["displayed",{"_index":837,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"license.html":{}}}],["displayname",{"_index":873,"title":{},"body":{"classes/DiscordGuildMember.html":{},"controllers/UserController.html":{}}}],["displays",{"_index":3316,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":3834,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":3176,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":3904,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":3792,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":3267,"title":{},"body":{"license.html":{}}}],["dm",{"_index":2416,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["dm.guard",{"_index":938,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dm.guard.ts",{"_index":2046,"title":{},"body":{"guards/MessageIsDmGuard.html":{},"coverage.html":{}}}],["dm.guard.ts:7",{"_index":2047,"title":{},"body":{"guards/MessageIsDmGuard.html":{}}}],["dmmessagehandler",{"_index":925,"title":{"injectables/DmMessageHandler.html":{}},"body":{"injectables/DmMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["dmmessagetomodteam",{"_index":929,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dmmessagetomodteam(message",{"_index":930,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["dmpermission",{"_index":47,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/initGuildCommand.html":{}}}],["docs",{"_index":1021,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["document",{"_index":3179,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":1800,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{}}}],["documented",{"_index":3622,"title":{},"body":{"license.html":{}}}],["doe",{"_index":920,"title":{},"body":{"classes/DiscordUser.html":{}}}],["done",{"_index":2221,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/initGuildCommand.html":{}}}],["dont",{"_index":1505,"title":{},"body":{"injectables/GuildService.html":{}}}],["doubtful",{"_index":3578,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":3710,"title":{},"body":{"license.html":{}}}],["dry",{"_index":1528,"title":{},"body":{"injectables/GuildService.html":{}}}],["dryrun",{"_index":1497,"title":{},"body":{"injectables/GuildService.html":{}}}],["dto",{"_index":2206,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/SelfService.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["dto.duration",{"_index":2672,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["dto.message",{"_index":2217,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dto.reason",{"_index":2663,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["dto.replytomessage",{"_index":2215,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dto/audit",{"_index":239,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["dto/auto",{"_index":1105,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["dto/channel",{"_index":571,"title":{},"body":{"controllers/ChannelController.html":{}}}],["dto/commmunity",{"_index":749,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["dto/community",{"_index":757,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["dto/guild",{"_index":2762,"title":{},"body":{"controllers/UserController.html":{}}}],["dto/log",{"_index":244,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["dto/mod",{"_index":2210,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["dto/role",{"_index":2318,"title":{},"body":{"controllers/RoleController.html":{}}}],["dto/settings.dto",{"_index":1587,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["dto/user",{"_index":2518,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["du",{"_index":2235,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserToUser.html":{}}}],["durable",{"_index":3519,"title":{},"body":{"license.html":{}}}],["duration",{"_index":600,"title":{},"body":{"controllers/ChannelController.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["duration).getmilliseconds",{"_index":2798,"title":{},"body":{"controllers/UserController.html":{}}}],["dwelling",{"_index":3576,"title":{},"body":{"license.html":{}}}],["dynamically",{"_index":3380,"title":{},"body":{"license.html":{}}}],["e",{"_index":966,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"license.html":{}}}],["e.g",{"_index":1823,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["e.message",{"_index":2689,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["e.name",{"_index":2688,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["e2e",{"_index":3080,"title":{},"body":{"index.html":{}}}],["each",{"_index":1493,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["earlier",{"_index":3290,"title":{},"body":{"license.html":{}}}],["early",{"_index":1527,"title":{},"body":{"injectables/GuildService.html":{}}}],["edit",{"_index":545,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editchannel",{"_index":533,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editchannel(guildid",{"_index":542,"title":{},"body":{"controllers/ChannelController.html":{}}}],["editroledata",{"_index":969,"title":{"classes/EditRoleData.html":{}},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{}}}],["editsettings",{"_index":1602,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["editsettings(guildid",{"_index":1613,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["effect",{"_index":3879,"title":{},"body":{"license.html":{}}}],["effected",{"_index":3454,"title":{},"body":{"license.html":{}}}],["effective",{"_index":3436,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":3898,"title":{},"body":{"license.html":{}}}],["efficient",{"_index":3059,"title":{},"body":{"index.html":{}}}],["efforts",{"_index":3727,"title":{},"body":{"license.html":{}}}],["ein",{"_index":949,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["eine",{"_index":2176,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einen",{"_index":2182,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einer",{"_index":2914,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["einspänner",{"_index":2491,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["eiskaffee",{"_index":2492,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["electronic",{"_index":3908,"title":{},"body":{"license.html":{}}}],["embed",{"_index":675,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embed.addfields",{"_index":2686,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["embedbuilder",{"_index":657,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embeds",{"_index":699,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["embodied",{"_index":3514,"title":{},"body":{"license.html":{}}}],["emitter",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["emoji",{"_index":1397,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["emojiresolvable",{"_index":985,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["emote.guard",{"_index":1264,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["emote.guard.ts",{"_index":2946,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["emotes",{"_index":3975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emotes.includes((reaction",{"_index":3977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["employer",{"_index":3919,"title":{},"body":{"license.html":{}}}],["en",{"_index":2059,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["enable",{"_index":3358,"title":{},"body":{"license.html":{}}}],["enabled",{"_index":517,"title":{},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["enables",{"_index":3310,"title":{},"body":{"license.html":{}}}],["enableshutdownhooks",{"_index":2261,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":2263,"title":{},"body":{"injectables/PrismaService.html":{}}}],["encoded",{"_index":988,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["encouraged",{"_index":3234,"title":{},"body":{"license.html":{}}}],["end",{"_index":3890,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":2354,"title":{},"body":{"controllers/SelfController.html":{}}}],["enforce",{"_index":3763,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":3460,"title":{},"body":{"license.html":{}}}],["ensure",{"_index":3188,"title":{},"body":{"license.html":{}}}],["enter",{"_index":2700,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["entered",{"_index":3798,"title":{},"body":{"license.html":{}}}],["entire",{"_index":3484,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":3816,"title":{},"body":{"license.html":{}}}],["entity",{"_index":3714,"title":{},"body":{"license.html":{}}}],["entry",{"_index":326,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.action",{"_index":334,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.createdat",{"_index":343,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.dto",{"_index":245,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["entry.dto.ts",{"_index":2036,"title":{},"body":{"classes/LogEntryDto.html":{},"coverage.html":{}}}],["entry.dto.ts:11",{"_index":2037,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:13",{"_index":2038,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:15",{"_index":2039,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:17",{"_index":2040,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:19",{"_index":2041,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.dto.ts:21",{"_index":2042,"title":{},"body":{"classes/LogEntryDto.html":{}}}],["entry.extrainfo",{"_index":341,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.guildid",{"_index":335,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.invokerid",{"_index":336,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.reason",{"_index":337,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.targetid",{"_index":338,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["entry.targettype",{"_index":339,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["enum",{"_index":290,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/functions.html":{}}}],["ephemeral",{"_index":670,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["equivalent",{"_index":3406,"title":{},"body":{"license.html":{}}}],["erfolgreich",{"_index":2137,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["err",{"_index":2222,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TimeOutCommand.html":{}}}],["error",{"_index":70,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/Explorer.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["error('timeout",{"_index":2668,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.length",{"_index":2667,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.map((e",{"_index":2687,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.message",{"_index":1959,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["error.push(err",{"_index":2664,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["error.response.data.error",{"_index":1952,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["erstelle",{"_index":2649,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["espresso",{"_index":2493,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["essential",{"_index":3360,"title":{},"body":{"license.html":{}}}],["etc",{"_index":2599,"title":{},"body":{"injectables/TasksService.html":{}}}],["etwas",{"_index":2925,"title":{},"body":{"classes/UserToUser.html":{}}}],["europe/berlin",{"_index":1179,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{}}}],["even",{"_index":3875,"title":{},"body":{"license.html":{}}}],["event",{"_index":212,"title":{},"body":{"injectables/AppService.html":{},"injectables/GuildService.html":{},"classes/LogEntry.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["event.decorator",{"_index":1063,"title":{},"body":{"classes/Explorer.html":{}}}],["event.decorator.ts",{"_index":2942,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["event.interface.ts",{"_index":367,"title":{},"body":{"interfaces/BotEvent.html":{},"coverage.html":{}}}],["event.interface.ts:4",{"_index":371,"title":{},"body":{"interfaces/BotEvent.html":{}}}],["event.toformattedlog(this.logger",{"_index":223,"title":{},"body":{"injectables/AppService.html":{}}}],["eventargs",{"_index":737,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["eventemitter",{"_index":208,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["eventemitter2",{"_index":206,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["eventemittermodule",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["eventparams",{"_index":741,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["events",{"_index":1034,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["events/channel.event",{"_index":575,"title":{},"body":{"controllers/ChannelController.html":{}}}],["events/guild",{"_index":1427,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/interaction",{"_index":1423,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/message",{"_index":1421,"title":{},"body":{"modules/GuildModule.html":{}}}],["events/settings",{"_index":1639,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["events/user.events",{"_index":2761,"title":{},"body":{"controllers/UserController.html":{}}}],["eventtolog",{"_index":218,"title":{"interfaces/EventToLog.html":{}},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["eventtype",{"_index":2435,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["everyday",{"_index":2583,"title":{},"body":{"injectables/TasksService.html":{}}}],["everyone",{"_index":1028,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["exact",{"_index":3289,"title":{},"body":{"license.html":{}}}],["example",{"_index":431,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["examples",{"_index":979,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["except",{"_index":3300,"title":{},"body":{"license.html":{}}}],["exception",{"_index":580,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{}}}],["exception.constraints[key",{"_index":718,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exception.message",{"_index":646,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exception.property",{"_index":712,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exception.ts",{"_index":621,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"coverage.html":{}}}],["exception.ts:12",{"_index":626,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/GuildDoesNotExistException.html":{},"classes/SendDirectMessageToUserException.html":{}}}],["exception.ts:23",{"_index":648,"title":{},"body":{"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["exception.ts:25",{"_index":1223,"title":{},"body":{"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exceptionfilter",{"_index":628,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["exceptionlist",{"_index":706,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exceptionlist.geterror().map((exception",{"_index":709,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["exceptions",{"_index":3627,"title":{},"body":{"license.html":{}}}],["excluded",{"_index":3564,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":3802,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":3900,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":3754,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":3413,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":3809,"title":{},"body":{"license.html":{}}}],["executable",{"_index":3348,"title":{},"body":{"license.html":{}}}],["execute",{"_index":3595,"title":{},"body":{"license.html":{}}}],["executing",{"_index":3301,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":855,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":3728,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":3455,"title":{},"body":{"license.html":{}}}],["exist",{"_index":1216,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["exists",{"_index":1117,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["expected",{"_index":3586,"title":{},"body":{"license.html":{}}}],["expects",{"_index":3585,"title":{},"body":{"license.html":{}}}],["expensiveeeeee",{"_index":2753,"title":{},"body":{"controllers/UserController.html":{}}}],["expiresin",{"_index":1894,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["explicitly",{"_index":3399,"title":{},"body":{"license.html":{}}}],["explorer",{"_index":1045,"title":{"classes/Explorer.html":{}},"body":{"classes/Explorer.html":{},"coverage.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["exports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"classes/EditRoleData.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"classes/RoleResponse.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exposes",{"_index":2566,"title":{},"body":{"injectables/TasksService.html":{}}}],["express",{"_index":632,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"dependencies.html":{},"license.html":{}}}],["expressed",{"_index":3847,"title":{},"body":{"license.html":{}}}],["expression",{"_index":1133,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["expression'})@apiproperty({type",{"_index":1129,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["expressly",{"_index":3675,"title":{},"body":{"license.html":{}}}],["extend",{"_index":3773,"title":{},"body":{"license.html":{}}}],["extended",{"_index":3002,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":624,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["extensions",{"_index":3497,"title":{},"body":{"license.html":{}}}],["extent",{"_index":3319,"title":{},"body":{"license.html":{}}}],["externalcontextcreator",{"_index":1051,"title":{},"body":{"classes/Explorer.html":{}}}],["externaldocs",{"_index":989,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["extractjwt",{"_index":1968,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1973,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["extractjwt.fromheader('refresh_token",{"_index":2289,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["extrainfo",{"_index":340,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/LogEntry.html":{}}}],["f",{"_index":3662,"title":{},"body":{"license.html":{}}}],["facilitating",{"_index":3823,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":3414,"title":{},"body":{"license.html":{}}}],["fail",{"_index":1274,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["failed",{"_index":714,"title":{},"body":{"classes/CommandValidationFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/JwtAuthService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["failifnotexists",{"_index":2220,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["failonlogin",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["fails",{"_index":2417,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"license.html":{}}}],["failure",{"_index":3873,"title":{},"body":{"license.html":{}}}],["fair",{"_index":3405,"title":{},"body":{"license.html":{}}}],["false",{"_index":48,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RoleResponse.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["false})@isoptional()@isstring",{"_index":2057,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["family",{"_index":3571,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":3287,"title":{},"body":{"license.html":{}}}],["favor",{"_index":3580,"title":{},"body":{"license.html":{}}}],["feature",{"_index":3323,"title":{},"body":{"license.html":{}}}],["features",{"_index":3936,"title":{},"body":{"properties.html":{}}}],["fed",{"_index":1279,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["fee",{"_index":3476,"title":{},"body":{"license.html":{}}}],["fest",{"_index":1266,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"dependencies.html":{}}}],["fetch",{"_index":2361,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{}}}],["fetch(guildid",{"_index":1690,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["fetched",{"_index":552,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["fetched'})@apiresponse({status",{"_index":2312,"title":{},"body":{"controllers/RoleController.html":{}}}],["fetches",{"_index":2390,"title":{},"body":{"injectables/SelfService.html":{}}}],["fetchself",{"_index":2385,"title":{},"body":{"injectables/SelfService.html":{}}}],["fetchself(userid",{"_index":2394,"title":{},"body":{"injectables/SelfService.html":{}}}],["field",{"_index":851,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"miscellaneous/functions.html":{}}}],["field('answer",{"_index":849,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["files",{"_index":3377,"title":{},"body":{"license.html":{}}}],["filter",{"_index":228,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/ModRequestFlow.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["filter.action",{"_index":351,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.createdfrom",{"_index":344,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.createdtill",{"_index":345,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filter.dto",{"_index":240,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["filter.dto.ts",{"_index":286,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:13",{"_index":296,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:16",{"_index":297,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:21",{"_index":299,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.dto.ts:26",{"_index":292,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["filter.targettype",{"_index":352,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["filtercb",{"_index":3022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filters/command",{"_index":2521,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["finally",{"_index":3685,"title":{},"body":{"license.html":{}}}],["find",{"_index":320,"title":{},"body":{"injectables/AuditLogService.html":{},"license.html":{}}}],["find(guildid",{"_index":268,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["findall",{"_index":1710,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["findall(guildid",{"_index":1731,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["findmany",{"_index":2408,"title":{},"body":{"injectables/SelfService.html":{}}}],["fired",{"_index":1503,"title":{},"body":{"injectables/GuildService.html":{}}}],["first",{"_index":404,"title":{},"body":{"modules/BotModule.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{},"license.html":{}}}],["firstmessageid",{"_index":1309,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["firstvaluefrom",{"_index":1914,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["fitness",{"_index":3850,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":3518,"title":{},"body":{"license.html":{}}}],["flags",{"_index":418,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"miscellaneous/variables.html":{}}}],["flow",{"_index":3386,"title":{},"body":{"license.html":{}}}],["fly",{"_index":2594,"title":{},"body":{"injectables/TasksService.html":{}}}],["follow",{"_index":3269,"title":{},"body":{"license.html":{}}}],["following",{"_index":3758,"title":{},"body":{"license.html":{}}}],["forbid",{"_index":3453,"title":{},"body":{"license.html":{}}}],["forbiddenexception",{"_index":1801,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["force",{"_index":3409,"title":{},"body":{"license.html":{}}}],["foreach((match",{"_index":2887,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["forguild",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["form",{"_index":1945,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["format",{"_index":293,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/LogEntryDto.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["forms",{"_index":3509,"title":{},"body":{"license.html":{}}}],["found",{"_index":589,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["foundation",{"_index":3171,"title":{},"body":{"license.html":{}}}],["frage",{"_index":785,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["fragen",{"_index":2675,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["framework",{"_index":3057,"title":{},"body":{"index.html":{}}}],["free",{"_index":3169,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":3194,"title":{},"body":{"license.html":{}}}],["fromuserid",{"_index":2515,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["frontend",{"_index":2357,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{},"properties.html":{}}}],["fucking",{"_index":1276,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["fulfilling",{"_index":3439,"title":{},"body":{"license.html":{}}}],["full",{"_index":3903,"title":{},"body":{"license.html":{}}}],["fun",{"_index":1529,"title":{},"body":{"injectables/GuildService.html":{}}}],["function",{"_index":1040,"title":{},"body":{"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function/object",{"_index":3983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functionality",{"_index":3038,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functioning",{"_index":3598,"title":{},"body":{"license.html":{}}}],["functions",{"_index":3013,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3541,"title":{},"body":{"license.html":{}}}],["future",{"_index":3842,"title":{},"body":{"license.html":{}}}],["führen",{"_index":954,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["für",{"_index":2875,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["ganzen",{"_index":2506,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["gateway",{"_index":2255,"title":{},"body":{"classes/PingCommand.html":{}}}],["gatewayintentbits",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.automoderationconfiguration",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.automoderationexecution",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessagereactions",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessages",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.directmessagetyping",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildemojisandstickers",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildintegrations",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildinvites",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmembers",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessagereactions",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessages",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmessagetyping",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildmoderation",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildpresences",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guilds",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildvoicestates",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.guildwebhooks",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["gatewayintentbits.messagecontent",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["geben",{"_index":769,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["gemutet",{"_index":2873,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["general",{"_index":3162,"title":{},"body":{"license.html":{}}}],["generally",{"_index":3374,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1023,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"license.html":{}}}],["generic",{"_index":3052,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geschlossen",{"_index":2157,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["gesendet",{"_index":2062,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["get('/')@apioperation({summary",{"_index":555,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["get(':channelid",{"_index":592,"title":{},"body":{"controllers/ChannelController.html":{}}}],["get(':channelid')@apioperation({summary",{"_index":548,"title":{},"body":{"controllers/ChannelController.html":{}}}],["get('https://discordapp.com/api/users/@me",{"_index":1955,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["get('login",{"_index":1842,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["get('messages",{"_index":1195,"title":{},"body":{"controllers/GuildController.html":{}}}],["get('self",{"_index":1680,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["get(dbuser.guildid",{"_index":1355,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["get(guild.id",{"_index":2613,"title":{},"body":{"injectables/TasksService.html":{}}}],["get(guildid",{"_index":1150,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["get(ticket.guildid",{"_index":2160,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["getadminroleid",{"_index":1603,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getadminroleid(guildid",{"_index":1616,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getall",{"_index":1433,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getall(guildid",{"_index":1437,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getattachmenttype",{"_index":1380,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getattachmenttype(attachment.contenttype",{"_index":1394,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["getattachmenttype(contenttype",{"_index":3031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getauditlog",{"_index":226,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["getauditlog(guildid",{"_index":227,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["getautodeletechannel",{"_index":1093,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getautodeletechannel(@param('guildid",{"_index":1110,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getautodeletechannel(guildid",{"_index":1098,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["getguildchannel",{"_index":534,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannel(guildid",{"_index":547,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannels",{"_index":535,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildchannels(guildid",{"_index":554,"title":{},"body":{"controllers/ChannelController.html":{}}}],["getguildroles",{"_index":2299,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguildroles(@param('guildid",{"_index":2322,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguildroles(guildid",{"_index":2311,"title":{},"body":{"controllers/RoleController.html":{}}}],["getguilduser",{"_index":1711,"title":{},"body":{"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["getguilduser(request",{"_index":2742,"title":{},"body":{"controllers/UserController.html":{}}}],["getguilduser(userid",{"_index":1733,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getguildusers",{"_index":2735,"title":{},"body":{"controllers/UserController.html":{}}}],["getguildusers(guildid",{"_index":2744,"title":{},"body":{"controllers/UserController.html":{}}}],["getintrochannelid",{"_index":1604,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getintrochannelid(guildid",{"_index":1618,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmessage",{"_index":856,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["getmodchannelid",{"_index":1605,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodchannelid(guildid",{"_index":1620,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodroleid",{"_index":1606,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getmodroleid(guildid",{"_index":1622,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getopenintrochannelid",{"_index":1607,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getopenintrochannelid(guildid",{"_index":1624,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getrank",{"_index":1712,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getrank(member",{"_index":1735,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["getrequest",{"_index":1812,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["getrestrictedchannel",{"_index":1434,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["getrestrictedchannel(guildid",{"_index":1439,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["gets",{"_index":1272,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/PingCommand.html":{},"controllers/SelfController.html":{},"miscellaneous/functions.html":{}}}],["getself",{"_index":1678,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["getself(@requestuser",{"_index":2368,"title":{},"body":{"controllers/SelfController.html":{}}}],["getself(userid",{"_index":1679,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["getsettings",{"_index":1578,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{}}}],["getsettings(@param('guildid",{"_index":1591,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["getsettings(guildid",{"_index":1580,"title":{},"body":{"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{}}}],["getting",{"_index":3053,"title":{"index.html":{},"license.html":{}},"body":{}}],["getunverifiedmemberroleid",{"_index":1608,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getunverifiedmemberroleid(guildid",{"_index":1627,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getuserfromcode",{"_index":1897,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["getuserfromcode(code",{"_index":1903,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["getverifiedmemberroleid",{"_index":1609,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getverifiedmemberroleid(guildid",{"_index":1629,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getwelcomemessageformat",{"_index":1610,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["getwelcomemessageformat(guildid",{"_index":1631,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["gibt",{"_index":2507,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["give",{"_index":2524,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"license.html":{}}}],["given",{"_index":1472,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["gives",{"_index":3218,"title":{},"body":{"license.html":{}}}],["giving",{"_index":3480,"title":{},"body":{"license.html":{}}}],["gnu",{"_index":3160,"title":{},"body":{"license.html":{}}}],["goals",{"_index":3258,"title":{},"body":{"license.html":{}}}],["governed",{"_index":3630,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":3259,"title":{},"body":{"license.html":{}}}],["grant",{"_index":3657,"title":{},"body":{"license.html":{}}}],["grant_type",{"_index":1936,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["granted",{"_index":3394,"title":{},"body":{"license.html":{}}}],["grants",{"_index":3704,"title":{},"body":{"license.html":{}}}],["gratis",{"_index":3540,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":3892,"title":{},"body":{"license.html":{}}}],["group",{"_index":1486,"title":{},"body":{"injectables/GuildService.html":{}}}],["grow",{"_index":3085,"title":{},"body":{"index.html":{}}}],["grund",{"_index":2678,"title":{},"body":{"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["gte",{"_index":346,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guarantee",{"_index":3198,"title":{},"body":{"license.html":{}}}],["guard",{"_index":1786,"title":{"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["guarded",{"_index":3965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":1787,"title":{},"body":{"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"overview.html":{}}}],["guards/is",{"_index":754,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["guards/refresh",{"_index":1855,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["guild",{"_index":436,"title":{"classes/Guild.html":{}},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["guild'})@apiresponse({status",{"_index":549,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["guild.autodeletechannels.foreach((deletechannel",{"_index":1162,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["guild.channels.cache.foreach(async",{"_index":2803,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.channels.cache.get(channelid",{"_index":596,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.cache.size",{"_index":590,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.create",{"_index":2100,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["guild.channels.fetch",{"_index":1170,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"controllers/UserController.html":{}}}],["guild.channels.fetch()).foreach(async",{"_index":2833,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["guild.channels.fetch()).tojson",{"_index":591,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.channels.fetch(channelid",{"_index":594,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guild.command",{"_index":398,"title":{},"body":{"modules/BotModule.html":{}}}],["guild.command.ts",{"_index":2939,"title":{},"body":{"coverage.html":{},"classes/initGuildCommand.html":{}}}],["guild.command.ts:156",{"_index":3112,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.command.ts:21",{"_index":3105,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.command.ts:26",{"_index":3108,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["guild.controller",{"_index":1418,"title":{},"body":{"modules/GuildModule.html":{}}}],["guild.iconurl",{"_index":2406,"title":{},"body":{"injectables/SelfService.html":{}}}],["guild.id",{"_index":2405,"title":{},"body":{"injectables/SelfService.html":{}}}],["guild.members.ban(userid",{"_index":2780,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.fetch",{"_index":1773,"title":{},"body":{"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["guild.members.fetch().then((members",{"_index":2703,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["guild.members.fetch(request.user.userid",{"_index":2775,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.fetch(userid",{"_index":2793,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.members.kick(userid",{"_index":2787,"title":{},"body":{"controllers/UserController.html":{}}}],["guild.name",{"_index":1289,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/SelfService.html":{}}}],["guild.ownerid",{"_index":2704,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["guild.roles.cache.get(roleid",{"_index":2331,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.cache.size",{"_index":2324,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.create(roledata",{"_index":2326,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.roles.fetch()).tojson",{"_index":2325,"title":{},"body":{"controllers/RoleController.html":{}}}],["guild.service",{"_index":1143,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"modules/GuildModule.html":{}}}],["guild/:guildid",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["guild/guild",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["guild/guild.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["guild/moderation/moderation.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["guild_id",{"_index":1719,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["guild_updated",{"_index":2014,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["guildautodeletechannelcontroller",{"_index":1087,"title":{"controllers/GuildAutoDeleteChannelController.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"coverage.html":{}}}],["guildautodeletechanneldto",{"_index":1096,"title":{"classes/GuildAutoDeleteChannelDto.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"coverage.html":{}}}],["guildautodeletechannelmodule",{"_index":1134,"title":{"modules/GuildAutoDeleteChannelModule.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules.html":{},"overview.html":{}}}],["guildautodeletechannelservice",{"_index":1104,"title":{"injectables/GuildAutoDeleteChannelService.html":{}},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"coverage.html":{},"overview.html":{}}}],["guildbasedchannel",{"_index":569,"title":{},"body":{"controllers/ChannelController.html":{}}}],["guildchannel",{"_index":568,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["guildchanneleditoptions",{"_index":489,"title":{"classes/GuildChannelEditOptions.html":{}},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["guildcontroller",{"_index":1190,"title":{"controllers/GuildController.html":{}},"body":{"controllers/GuildController.html":{},"modules/GuildModule.html":{},"coverage.html":{}}}],["guilddoesnotexistexception",{"_index":1214,"title":{"classes/GuildDoesNotExistException.html":{}},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["guilddoesnotexistexception(guildid",{"_index":1650,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["guilddoesnotexistexceptionfilter",{"_index":1221,"title":{"classes/GuildDoesNotExistExceptionFilter.html":{}},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"coverage.html":{}}}],["guildid",{"_index":65,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/initGuildCommand.html":{}}}],["guildid_userid",{"_index":64,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["guildids",{"_index":3045,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guildmember",{"_index":1235,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guildmemberevents",{"_index":1224,"title":{"injectables/GuildMemberEvents.html":{}},"body":{"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildmenu",{"_index":2179,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["guildmessagehandler",{"_index":1365,"title":{"injectables/GuildMessageHandler.html":{}},"body":{"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildmodule",{"_index":105,"title":{"modules/GuildModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules.html":{},"overview.html":{}}}],["guildname",{"_index":1687,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["guildquestionid",{"_index":817,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["guildrestrictedchannelcontroller",{"_index":1428,"title":{"controllers/GuildRestrictedChannelController.html":{}},"body":{"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"coverage.html":{}}}],["guildrestrictedchannelmodule",{"_index":1416,"title":{"modules/GuildRestrictedChannelModule.html":{}},"body":{"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules.html":{},"overview.html":{}}}],["guildrestrictedchannelservice",{"_index":376,"title":{"injectables/GuildRestrictedChannelService.html":{}},"body":{"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["guilds",{"_index":1086,"title":{},"body":{"classes/Guild.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["guilds.foreach((guild",{"_index":1161,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["guilds.foreach(async",{"_index":1574,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["guilds.length",{"_index":2169,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["guilds.map((guild",{"_index":2404,"title":{},"body":{"injectables/SelfService.html":{}}}],["guilds/:guildid/roles/:roleid",{"_index":1024,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["guilds[0",{"_index":2171,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["guildservice",{"_index":377,"title":{"injectables/GuildService.html":{}},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["guildsettingscontroller",{"_index":1576,"title":{"controllers/GuildSettingsController.html":{}},"body":{"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"coverage.html":{}}}],["guildsettingsmodule",{"_index":132,"title":{"modules/GuildSettingsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/GuildSettingsModule.html":{},"modules.html":{},"overview.html":{}}}],["guildsettingsservice",{"_index":378,"title":{"injectables/GuildSettingsService.html":{}},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["guildtextbasedchannel",{"_index":570,"title":{},"body":{"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["guilduser",{"_index":1083,"title":{},"body":{"classes/Guild.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["guilduser.firstmessageid",{"_index":2818,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["guilduser['guildid",{"_index":1078,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["guilduser['rank",{"_index":2378,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["guilduser['userid",{"_index":1085,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}}}],["guildusercontroller",{"_index":1676,"title":{"controllers/GuildUserController.html":{}},"body":{"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"coverage.html":{}}}],["guildusermodule",{"_index":141,"title":{"modules/GuildUserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/GuildUserModule.html":{},"modules.html":{},"overview.html":{}}}],["guildusers.map((guilduser",{"_index":2410,"title":{},"body":{"injectables/SelfService.html":{}}}],["guilduserservice",{"_index":1138,"title":{"injectables/GuildUserService.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["hacky",{"_index":2876,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["handleevent",{"_index":204,"title":{},"body":{"injectables/AppService.html":{}}}],["handleevent(event",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["handler",{"_index":27,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["handler()@usefilters(commandvalidationfilter",{"_index":2655,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["hasattachments",{"_index":1408,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["hashandlermethod",{"_index":1050,"title":{},"body":{"classes/Explorer.html":{}}}],["hashandlermethod(provider",{"_index":1058,"title":{},"body":{"classes/Explorer.html":{}}}],["hasrequiredrank",{"_index":257,"title":{"guards/HasRequiredRank.html":{}},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["hast",{"_index":2642,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["haven't",{"_index":2586,"title":{},"body":{"injectables/TasksService.html":{}}}],["having",{"_index":3412,"title":{},"body":{"license.html":{}}}],["headers",{"_index":1942,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["headpat",{"_index":2508,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["heartened",{"_index":3233,"title":{},"body":{"license.html":{}}}],["helfen",{"_index":957,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["helper",{"_index":941,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{}}}],["helper.ts",{"_index":2977,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["hence",{"_index":3933,"title":{},"body":{"properties.html":{}}}],["here",{"_index":1032,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"classes/RoleResponse.html":{},"index.html":{}}}],["here](${message.url",{"_index":2829,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["hereafter",{"_index":3750,"title":{},"body":{"license.html":{}}}],["hex",{"_index":913,"title":{},"body":{"classes/DiscordUser.html":{}}}],["hexaccentcolor",{"_index":893,"title":{},"body":{"classes/DiscordUser.html":{},"miscellaneous/variables.html":{}}}],["hier",{"_index":2146,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["higher",{"_index":998,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["higher.guard",{"_index":1259,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["higher.guard.ts",{"_index":2271,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["higher.guard.ts:11",{"_index":2272,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["higher.guard.ts:16",{"_index":2273,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["hilfe",{"_index":962,"title":{},"body":{"injectables/DmMessageHandler.html":{},"miscellaneous/functions.html":{}}}],["hoist",{"_index":971,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["hoisted",{"_index":982,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["holder",{"_index":3682,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3639,"title":{},"body":{"license.html":{}}}],["hope",{"_index":3905,"title":{},"body":{"license.html":{}}}],["host",{"_index":641,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["host.getargbyindex(0",{"_index":708,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["host.switchtohttp",{"_index":643,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["hosts",{"_index":3550,"title":{},"body":{"license.html":{}}}],["hours",{"_index":2895,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["household",{"_index":3572,"title":{},"body":{"license.html":{}}}],["hs256",{"_index":1924,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["http",{"_index":636,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["httpcode",{"_index":1586,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["httpcode(httpstatuscode.accepted",{"_index":1594,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["httpmodule",{"_index":1888,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["https://cdn.discordapp.com/emojis/859111454677139476.webp",{"_index":1010,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["https://discordapp.com/api/oauth2/token",{"_index":1930,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["https://fsf.org",{"_index":3173,"title":{},"body":{"license.html":{}}}],["https://github.com/89q12/mega",{"_index":826,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["https://github.com/discordjs/discord.js/issues/4930#issuecomment",{"_index":1328,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["https://nestjs.com",{"_index":3099,"title":{},"body":{"index.html":{}}}],["https://old.discordjs.dev/#/docs/discord.js/main/class/role?scrollto=seticon",{"_index":1022,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["https://www.gnu.org/licenses",{"_index":3924,"title":{},"body":{"license.html":{}}}],["httpservice",{"_index":1857,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["httpstatus",{"_index":630,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["httpstatuscode",{"_index":1588,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["hug",{"_index":2528,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["i'm",{"_index":1278,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["i.customid",{"_index":2187,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["ia",{"_index":740,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["ia(modalfieldstransformpipe",{"_index":805,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["ia(slashcommandpipe",{"_index":761,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["ich",{"_index":945,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["icon",{"_index":972,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["iconurl",{"_index":823,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["id",{"_index":72,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/Channel.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SettingsChanged.html":{},"classes/UnverifyByRoleCommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifiable",{"_index":3778,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":2928,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1941,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["idk",{"_index":1275,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ids",{"_index":447,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"injectables/SelfService.html":{}}}],["iffy",{"_index":1361,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ignoreenvvars",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":1974,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["image",{"_index":1077,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"injectables/SelfService.html":{}}}],["images",{"_index":449,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["implement",{"_index":1035,"title":{},"body":{"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"license.html":{}}}],["implementation",{"_index":3359,"title":{},"body":{"license.html":{}}}],["implemented",{"_index":2785,"title":{},"body":{"controllers/UserController.html":{}}}],["implements",{"_index":502,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommandValidationFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RestrictedChannelDto.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["implied",{"_index":3803,"title":{},"body":{"license.html":{}}}],["import",{"_index":31,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["importing",{"_index":3741,"title":{},"body":{"license.html":{}}}],["imports",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}}}],["impose",{"_index":3667,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":3806,"title":{},"body":{"license.html":{}}}],["improvements",{"_index":3225,"title":{},"body":{"license.html":{}}}],["inability",{"_index":3867,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":3870,"title":{},"body":{"license.html":{}}}],["inc",{"_index":3172,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":3864,"title":{},"body":{"license.html":{}}}],["include",{"_index":3349,"title":{},"body":{"license.html":{}}}],["included",{"_index":3351,"title":{},"body":{"license.html":{}}}],["includes",{"_index":3305,"title":{},"body":{"license.html":{}}}],["including",{"_index":3368,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":3507,"title":{},"body":{"license.html":{}}}],["incorporate",{"_index":3231,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":3824,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":3575,"title":{},"body":{"license.html":{}}}],["indemnification",{"_index":3663,"title":{},"body":{"license.html":{}}}],["independent",{"_index":3495,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":3707,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":3673,"title":{},"body":{"license.html":{}}}],["individual",{"_index":3505,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":3283,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":3589,"title":{},"body":{"license.html":{}}}],["inestapplication",{"_index":2264,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["inform",{"_index":3557,"title":{},"body":{"license.html":{}}}],["information",{"_index":2685,"title":{},"body":{"classes/TimeOutCommand.html":{},"license.html":{}}}],["infringe",{"_index":3705,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":3738,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":3297,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":1820,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["inheritedranks",{"_index":1825,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inheritedranks[user.rank",{"_index":1817,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["initguildcommand",{"_index":396,"title":{"classes/initGuildCommand.html":{}},"body":{"modules/BotModule.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["initiate",{"_index":3731,"title":{},"body":{"license.html":{}}}],["initiatemodrequestflow",{"_index":2067,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["initiatemodrequestflow(interaction",{"_index":2076,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["inject",{"_index":37,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["inject(auditlogservice",{"_index":262,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["inject(eventemitter2",{"_index":221,"title":{},"body":{"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["inject(guildautodeletechannelservice",{"_index":1109,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["inject(guildrestrictedchannelservice",{"_index":1513,"title":{},"body":{"injectables/GuildService.html":{}}}],["inject(guildservice",{"_index":1201,"title":{},"body":{"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["inject(guildsettingsservice",{"_index":860,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["inject(guilduserservice",{"_index":1267,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/TasksService.html":{}}}],["inject(prismaservice",{"_index":51,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/ModRequestFlow.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["inject(reflector",{"_index":1806,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["inject(tasksservice",{"_index":1155,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["injectable",{"_index":199,"title":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageIsDmGuard.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":200,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectdiscordclient",{"_index":33,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/Explorer.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["input",{"_index":711,"title":{},"body":{"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionDto.html":{},"classes/UserTimeOutDto.html":{}}}],["inputs",{"_index":801,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["insertmessage",{"_index":1713,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["insertmessage(data",{"_index":1737,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["install",{"_index":3367,"title":{},"body":{"license.html":{}}}],["installation",{"_index":3067,"title":{},"body":{"index.html":{},"license.html":{}}}],["installed",{"_index":3611,"title":{},"body":{"license.html":{}}}],["installrunning",{"_index":3069,"title":{},"body":{"index.html":{}}}],["instance",{"_index":248,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildSettingsController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{}}}],["instance.ts",{"_index":2979,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["instanceof",{"_index":864,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/variables.html":{}}}],["int",{"_index":839,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["intact",{"_index":3469,"title":{},"body":{"license.html":{}}}],["integration",{"_index":1013,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["intended",{"_index":3197,"title":{},"body":{"license.html":{}}}],["intention",{"_index":3458,"title":{},"body":{"license.html":{}}}],["intents",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["interact",{"_index":3911,"title":{},"body":{"license.html":{}}}],["interacting",{"_index":3818,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":29,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"guards/IsModalInteractionGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["interaction.channel.messages.fetch",{"_index":2431,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["interaction.channel.send",{"_index":2216,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["interaction.customid",{"_index":2140,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/initGuildCommand.html":{}}}],["interaction.customid.endswith",{"_index":3153,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.customid.includes('community",{"_index":777,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.customid.split",{"_index":778,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.customid.startswith('closeticket",{"_index":2151,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.deferreply",{"_index":669,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.deletereply",{"_index":2150,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.editreply",{"_index":2134,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.editreply(options",{"_index":2178,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.fields.gettextinputvalue('modmessage",{"_index":2244,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.fields.gettextinputvalue('modrequestmessage",{"_index":2126,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.followup",{"_index":698,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.guard",{"_index":756,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.guard.ts",{"_index":1827,"title":{},"body":{"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["interaction.guard.ts:5",{"_index":1828,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interaction.guild.channels.fetch(settings.introchannelid",{"_index":3129,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.leavechannelid",{"_index":3132,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.modchannelid)).name",{"_index":3135,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.channels.fetch(settings.openintrochannelid",{"_index":3125,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.members.fetch().then((members",{"_index":53,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["interaction.guild.members.fetch(dto.user",{"_index":2531,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["interaction.guild.roles.fetch(settings.adminroleid)).name",{"_index":3141,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.modroleid)).name",{"_index":3138,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.unverifiedmemberroleid",{"_index":3148,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guild.roles.fetch(settings.verifiedmemberroleid",{"_index":3144,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.guildid",{"_index":673,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["interaction.isanyselectmenu",{"_index":3154,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.isbutton",{"_index":776,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{}}}],["interaction.ischannelselectmenu",{"_index":3155,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.iscontextmenucommand",{"_index":2430,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["interaction.ismodalsubmit",{"_index":2097,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.isrepliable",{"_index":719,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["interaction.isroleselectmenu",{"_index":3159,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.isstringselectmenu",{"_index":2139,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.reply",{"_index":720,"title":{},"body":{"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["interaction.reply('das",{"_index":2154,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.reply('done",{"_index":2245,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.showmodal(modal",{"_index":803,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["interaction.showmodal(modannouncementmodal",{"_index":2240,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.showmodal(modrequestmodal",{"_index":2149,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.targetid",{"_index":2432,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["interaction.targetmessage.id",{"_index":2227,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["interaction.type",{"_index":1830,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interaction.user.displayname",{"_index":2104,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interaction.user.id",{"_index":2114,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/SpecialCommand.html":{}}}],["interaction.values[0",{"_index":3156,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["interaction.values[0].split",{"_index":2142,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["interactionevent",{"_index":34,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/initGuildCommand.html":{}}}],["interactiontype",{"_index":1829,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interactiontype.modalsubmit",{"_index":1831,"title":{},"body":{"guards/IsModalInteractionGuard.html":{}}}],["interactive",{"_index":3315,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":3521,"title":{},"body":{"license.html":{}}}],["interest",{"_index":3724,"title":{},"body":{"license.html":{}}}],["interface",{"_index":363,"title":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{}},"body":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{},"license.html":{}}}],["interfaces",{"_index":365,"title":{},"body":{"interfaces/BotEvent.html":{},"interfaces/DiscordExecutionContext.html":{},"interfaces/EventToLog.html":{},"license.html":{},"overview.html":{}}}],["interfered",{"_index":3600,"title":{},"body":{"license.html":{}}}],["internalservererrorexception",{"_index":3969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interpretation",{"_index":3878,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":3365,"title":{},"body":{"license.html":{}}}],["interval",{"_index":1484,"title":{},"body":{"injectables/GuildService.html":{}}}],["intimate",{"_index":3384,"title":{},"body":{"license.html":{}}}],["intro",{"_index":3126,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["introchannelid",{"_index":2446,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["introduction",{"_index":2827,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["invalid",{"_index":1127,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["invalid_grant",{"_index":1953,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["invalid_request",{"_index":2015,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invalidate",{"_index":3490,"title":{},"body":{"license.html":{}}}],["invite",{"_index":2000,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invite_created",{"_index":2016,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invite_deleted",{"_index":2017,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["invoker",{"_index":1993,"title":{},"body":{"classes/LogEntry.html":{}}}],["invokerid",{"_index":278,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/UserInfoUiCommand.html":{}}}],["involved",{"_index":1987,"title":{},"body":{"classes/LogEntry.html":{}}}],["irrevocable",{"_index":3396,"title":{},"body":{"license.html":{}}}],["isactive",{"_index":1714,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["isactive(userid",{"_index":1742,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["isarray",{"_index":478,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isarray()@isstring()@isoptional()@apiproperty({description",{"_index":445,"title":{},"body":{"classes/Channel.html":{}}}],["isavailable",{"_index":1565,"title":{},"body":{"injectables/GuildService.html":{}}}],["isboolean",{"_index":479,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["isboolean()@apiproperty({type",{"_index":877,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/RoleResponse.html":{}}}],["isboolean()@isoptional()@apiproperty({description",{"_index":452,"title":{},"body":{"classes/Channel.html":{}}}],["isboolean()@isoptional()@apiproperty({type",{"_index":981,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{}}}],["ischannelavailabletouser",{"_index":1435,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["ischannelavailabletouser(user",{"_index":1441,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{}}}],["isdate",{"_index":2005,"title":{},"body":{"classes/LogEntry.html":{}}}],["isdate()@apiproperty({type",{"_index":1984,"title":{},"body":{"classes/LogEntry.html":{}}}],["isdatestring",{"_index":886,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/UserTimeOutDto.html":{}}}],["isdatestring()@isoptional()@apipropertyoptional({type",{"_index":879,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["isenum",{"_index":480,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isenum(channeltype",{"_index":491,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isenum(channeltype)@isoptional()@apiproperty({enum",{"_index":1187,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["isglobal",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":300,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["isin(['string",{"_index":1182,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["isin([string",{"_index":497,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isin(actions",{"_index":309,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["isin(object.keys(colors",{"_index":1017,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isin(object.keys(permissionflagsbits",{"_index":1019,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isin(targettypes",{"_index":308,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["isin(undefined)@apiproperty({enum",{"_index":977,"title":{},"body":{"classes/EditRoleData.html":{}}}],["isin(undefined)@isoptional()@apiproperty({type",{"_index":994,"title":{},"body":{"classes/EditRoleData.html":{}}}],["isinstance",{"_index":481,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isinstance(permissionoverwrite",{"_index":488,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["isinstance(permissionoverwrite)@isoptional()@apiproperty({description",{"_index":459,"title":{},"body":{"classes/Channel.html":{}}}],["ismodalinteractionguard",{"_index":753,"title":{"guards/IsModalInteractionGuard.html":{}},"body":{"classes/CommunityQuestionCommand.html":{},"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["isn't",{"_index":623,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["isnumber",{"_index":482,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isnumber()@apiproperty({description",{"_index":428,"title":{},"body":{"classes/Channel.html":{}}}],["isnumber()@apiproperty({type",{"_index":895,"title":{},"body":{"classes/DiscordUser.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isnumber()@isoptional()@apiproperty({description",{"_index":463,"title":{},"body":{"classes/Channel.html":{}}}],["isnumber()@isoptional()@apiproperty({type",{"_index":997,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{}}}],["isoptional",{"_index":301,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/DiscordGuildMember.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{}}}],["isstring",{"_index":302,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{}}}],["isstring()@apiproperty({description",{"_index":435,"title":{},"body":{"classes/Channel.html":{},"classes/PermissionOverwrite.html":{}}}],["isstring()@apiproperty({type",{"_index":875,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{}}}],["isstring()@isoptional()@apiproperty({description",{"_index":441,"title":{},"body":{"classes/Channel.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":986,"title":{},"body":{"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{}}}],["isstring()@isoptional()@apipropertyoptional({type",{"_index":2455,"title":{},"body":{"classes/SettingsDto.html":{}}}],["isstring()@matches(/^(((\\d+,)+\\d+|(\\d",{"_index":1124,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["issuer",{"_index":1921,"title":{},"body":{"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["ist",{"_index":2155,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["isurl",{"_index":1005,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["isurl()@apiproperty({type",{"_index":2341,"title":{},"body":{"classes/RoleResponse.html":{}}}],["isuserunlockedguard",{"_index":859,"title":{"guards/IsUserUnlockedGuard.html":{}},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMessageHandler.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["it.action",{"_index":275,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.adminroleid",{"_index":1657,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.avatarurl",{"_index":1693,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.createdat",{"_index":277,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.displayname",{"_index":1696,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.guild.name",{"_index":1697,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.introchannelid",{"_index":1660,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.invokerid",{"_index":279,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.members.fetch(userid",{"_index":1692,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["it.modchannelid",{"_index":1661,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.modroleid",{"_index":1656,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.openintrochannelid",{"_index":1659,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.reason",{"_index":281,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.targetid",{"_index":283,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.targettype",{"_index":284,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["it.unverifiedmemberroleid",{"_index":1655,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.verifiedmemberroleid",{"_index":1654,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["it.welcomemessageformat",{"_index":1658,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["item",{"_index":3331,"title":{},"body":{"license.html":{}}}],["items",{"_index":924,"title":{},"body":{"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["itself",{"_index":3615,"title":{},"body":{"license.html":{}}}],["jest",{"_index":3000,"title":{},"body":{"dependencies.html":{}}}],["joboptions",{"_index":2596,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.crontime",{"_index":2603,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.oncomplete",{"_index":2605,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.ontick",{"_index":2604,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.start",{"_index":2606,"title":{},"body":{"injectables/TasksService.html":{}}}],["joboptions.timezone",{"_index":2607,"title":{},"body":{"injectables/TasksService.html":{}}}],["jobs",{"_index":2559,"title":{},"body":{"modules/TasksModule.html":{}}}],["jobs/tasks",{"_index":2565,"title":{},"body":{"injectables/TasksService.html":{}}}],["john",{"_index":919,"title":{},"body":{"classes/DiscordUser.html":{}}}],["join",{"_index":1481,"title":{},"body":{"injectables/GuildService.html":{},"index.html":{}}}],["join('\\n",{"_index":694,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildSettingsService.html":{},"injectables/TasksService.html":{}}}],["json.stringify",{"_index":2103,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["json.stringify(error.response.data",{"_index":1951,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["jsonarray",{"_index":1265,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["jwt",{"_index":1852,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtauthcontroller",{"_index":1835,"title":{"controllers/JwtAuthController.html":{}},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"coverage.html":{}}}],["jwtauthguard",{"_index":86,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtauthguard.name",{"_index":3966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthmodule",{"_index":106,"title":{"modules/JwtAuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/JwtAuthModule.html":{},"modules.html":{},"overview.html":{}}}],["jwtauthservice",{"_index":1851,"title":{"injectables/JwtAuthService.html":{}},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"coverage.html":{},"overview.html":{}}}],["jwtauthstrategy",{"_index":1877,"title":{"injectables/JwtAuthStrategy.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtconstants.secret",{"_index":1892,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtfromrequest",{"_index":1972,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["jwtmodule",{"_index":1882,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtmodule.register",{"_index":1890,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["jwtservice",{"_index":1900,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["kaffee",{"_index":2494,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["kamil",{"_index":3096,"title":{},"body":{"index.html":{}}}],["kann",{"_index":951,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kategorie",{"_index":2127,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["keep",{"_index":3468,"title":{},"body":{"license.html":{}}}],["kein",{"_index":952,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kernel",{"_index":3361,"title":{},"body":{"license.html":{}}}],["key",{"_index":717,"title":{},"body":{"classes/CommandValidationFilter.html":{},"controllers/GuildController.html":{},"injectables/GuildSettingsService.html":{},"classes/LogEntry.html":{},"license.html":{}}}],["key.endswith('roleid",{"_index":1643,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["keyof",{"_index":1647,"title":{},"body":{"injectables/GuildSettingsService.html":{},"classes/SettingsChanged.html":{}}}],["keys",{"_index":3594,"title":{},"body":{"license.html":{}}}],["kick",{"_index":660,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/LogEntry.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["kicked",{"_index":681,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["kickmembers",{"_index":666,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["kicks",{"_index":2585,"title":{},"body":{"injectables/TasksService.html":{}}}],["kickuser",{"_index":2736,"title":{},"body":{"controllers/UserController.html":{}}}],["kickuser(guildid",{"_index":2746,"title":{},"body":{"controllers/UserController.html":{}}}],["kind",{"_index":3309,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":3184,"title":{},"body":{"license.html":{}}}],["klicke",{"_index":958,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["know",{"_index":1277,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["knowingly",{"_index":3767,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":3775,"title":{},"body":{"license.html":{}}}],["konnten",{"_index":686,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["konsul",{"_index":2495,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["koverstionen",{"_index":953,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["kuchen",{"_index":2486,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["käsekuchen",{"_index":2482,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["labels",{"_index":1204,"title":{},"body":{"controllers/GuildController.html":{}}}],["labels.push",{"_index":1208,"title":{},"body":{"controllers/GuildController.html":{}}}],["labels.push(key",{"_index":1213,"title":{},"body":{"controllers/GuildController.html":{}}}],["language",{"_index":3344,"title":{},"body":{"license.html":{}}}],["larger",{"_index":3499,"title":{},"body":{"license.html":{}}}],["last",{"_index":442,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{}}}],["lastmessageid",{"_index":419,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["later",{"_index":3837,"title":{},"body":{"license.html":{}}}],["latte",{"_index":2496,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["law",{"_index":3299,"title":{},"body":{"license.html":{}}}],["laws",{"_index":3273,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":3736,"title":{},"body":{"license.html":{}}}],["leads",{"_index":3914,"title":{},"body":{"license.html":{}}}],["leavechannelid",{"_index":2447,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["leavemessageformat",{"_index":2448,"title":{},"body":{"classes/SettingsDto.html":{}}}],["legal",{"_index":3219,"title":{},"body":{"license.html":{}}}],["legend",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":1391,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["letting",{"_index":3242,"title":{},"body":{"license.html":{}}}],["liability",{"_index":3642,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3296,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":3347,"title":{},"body":{"license.html":{}}}],["library",{"_index":3565,"title":{},"body":{"license.html":{}}}],["license",{"_index":3102,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":3083,"title":{},"body":{"index.html":{},"license.html":{}}}],["licensee",{"_index":3279,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":3281,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":3191,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":3709,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":3654,"title":{},"body":{"license.html":{}}}],["lift",{"_index":43,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["likewise",{"_index":3702,"title":{},"body":{"license.html":{}}}],["limit",{"_index":230,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{},"license.html":{}}}],["limitation",{"_index":3861,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3848,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":3641,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1514,"title":{},"body":{"injectables/GuildService.html":{}}}],["line",{"_index":3901,"title":{},"body":{"license.html":{}}}],["link",{"_index":2826,"title":{},"body":{"classes/UserInfoUiCommand.html":{},"license.html":{}}}],["linked",{"_index":3381,"title":{},"body":{"license.html":{}}}],["list",{"_index":2032,"title":{},"body":{"classes/LogEntry.html":{},"injectables/SelfService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["listens",{"_index":1501,"title":{},"body":{"injectables/GuildService.html":{}}}],["literal",{"_index":329,"title":{},"body":{"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{}}}],["litigation",{"_index":3732,"title":{},"body":{"license.html":{}}}],["local",{"_index":2846,"title":{},"body":{"modules/UserModule.html":{},"license.html":{}}}],["lockdown",{"_index":44,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["log",{"_index":220,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"injectables/JwtAuthService.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["log.ts",{"_index":1033,"title":{},"body":{"interfaces/EventToLog.html":{},"coverage.html":{}}}],["log.ts:11",{"_index":1039,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["logchannel.send",{"_index":2621,"title":{},"body":{"injectables/TasksService.html":{}}}],["logentries",{"_index":1981,"title":{},"body":{"classes/LogEntry.html":{}}}],["logentry",{"_index":324,"title":{"classes/LogEntry.html":{}},"body":{"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{}}}],["logentrydto",{"_index":243,"title":{"classes/LogEntryDto.html":{}},"body":{"controllers/AuditLogController.html":{},"classes/LogEntryDto.html":{},"coverage.html":{}}}],["logged",{"_index":2358,"title":{},"body":{"controllers/SelfController.html":{}}}],["logger",{"_index":203,"title":{},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"controllers/RoleController.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["logger('appservice",{"_index":217,"title":{},"body":{"injectables/AppService.html":{}}}],["logger('requestguilduser",{"_index":3959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('requestuser",{"_index":3972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger('rolecontroller",{"_index":2319,"title":{},"body":{"controllers/RoleController.html":{},"miscellaneous/variables.html":{}}}],["logger('taskservice",{"_index":2602,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["logger(channelcontroller.name",{"_index":584,"title":{},"body":{"controllers/ChannelController.html":{}}}],["logger(dmmessagehandler.name",{"_index":933,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["logger(guildautodeletechannelservice.name",{"_index":1154,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["logger(guildmemberevents.name",{"_index":1256,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["logger(hasrequiredrank.name",{"_index":1805,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["logger(jwtauthcontroller.name",{"_index":1861,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["logger(jwtauthservice.name",{"_index":1911,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["logger(modrequestflow.name",{"_index":2073,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["logger(usercontroller.name",{"_index":2764,"title":{},"body":{"controllers/UserController.html":{}}}],["logger.error",{"_index":2729,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.error(`${ctx.gethandler().tostring",{"_index":3962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger.log",{"_index":522,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.log(`checking",{"_index":2609,"title":{},"body":{"injectables/TasksService.html":{}}}],["logger.log(`created",{"_index":2327,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`deleted",{"_index":2335,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`found",{"_index":2323,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`settingschanged",{"_index":2442,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["logger.log(`updated",{"_index":2333,"title":{},"body":{"controllers/RoleController.html":{}}}],["logger.log(`userbanevent",{"_index":2723,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logger.log(`userkickevent",{"_index":2726,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["logging",{"_index":1043,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["login",{"_index":1839,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["login(@query('code",{"_index":1866,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["login(code",{"_index":1841,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["login(userid",{"_index":1905,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["long",{"_index":3407,"title":{},"body":{"license.html":{}}}],["longer",{"_index":662,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["loss",{"_index":3868,"title":{},"body":{"license.html":{}}}],["losses",{"_index":3871,"title":{},"body":{"license.html":{}}}],["lower",{"_index":1822,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["lowest",{"_index":1824,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["lte",{"_index":349,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["m",{"_index":1480,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.channelid",{"_index":1474,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.createdat",{"_index":1489,"title":{},"body":{"injectables/GuildService.html":{}}}],["m.userid",{"_index":1475,"title":{},"body":{"injectables/GuildService.html":{}}}],["macchiato",{"_index":2497,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["machine",{"_index":3511,"title":{},"body":{"license.html":{}}}],["made",{"_index":3226,"title":{},"body":{"license.html":{}}}],["mail",{"_index":3910,"title":{},"body":{"license.html":{}}}],["maintain",{"_index":3545,"title":{},"body":{"license.html":{}}}],["major",{"_index":3354,"title":{},"body":{"license.html":{}}}],["make",{"_index":1323,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["makes",{"_index":3429,"title":{},"body":{"license.html":{}}}],["making",{"_index":3240,"title":{},"body":{"license.html":{}}}],["manage",{"_index":2845,"title":{},"body":{"modules/UserModule.html":{}}}],["managed",{"_index":1012,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["manages",{"_index":2557,"title":{},"body":{"modules/TasksModule.html":{}}}],["managing",{"_index":2564,"title":{},"body":{"injectables/TasksService.html":{}}}],["manner",{"_index":3751,"title":{},"body":{"license.html":{}}}],["many",{"_index":3232,"title":{},"body":{"license.html":{}}}],["map",{"_index":1491,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["map((it",{"_index":1670,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["map((member",{"_index":692,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["map((row",{"_index":3150,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["map((user",{"_index":2167,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["march",{"_index":3800,"title":{},"body":{"license.html":{}}}],["marked",{"_index":3651,"title":{},"body":{"license.html":{}}}],["marks",{"_index":3661,"title":{},"body":{"license.html":{}}}],["masks",{"_index":3276,"title":{},"body":{"license.html":{}}}],["match",{"_index":2885,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('d",{"_index":2888,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('h",{"_index":2890,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.endswith('m",{"_index":2892,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('d",{"_index":2889,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('h",{"_index":2891,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["match.replace('m",{"_index":2893,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["matches",{"_index":1131,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["matches(/^(((\\d+,)+\\d+|(\\d",{"_index":1132,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{}}}],["matching",{"_index":80,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":3416,"title":{},"body":{"license.html":{}}}],["materially",{"_index":3616,"title":{},"body":{"license.html":{}}}],["maybe",{"_index":2527,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["meaning",{"_index":1821,"title":{},"body":{"guards/HasRequiredRank.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":3272,"title":{},"body":{"license.html":{}}}],["measure",{"_index":3438,"title":{},"body":{"license.html":{}}}],["measures",{"_index":3450,"title":{},"body":{"license.html":{}}}],["medium",{"_index":3464,"title":{},"body":{"license.html":{}}}],["meet",{"_index":3478,"title":{},"body":{"license.html":{}}}],["meets",{"_index":3332,"title":{},"body":{"license.html":{}}}],["mega",{"_index":3934,"title":{},"body":{"properties.html":{}}}],["member",{"_index":55,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["member.communicationdisableduntiltimestamp",{"_index":2615,"title":{},"body":{"injectables/TasksService.html":{}}}],["member.displayavatarurl",{"_index":2769,"title":{},"body":{"controllers/UserController.html":{}}}],["member.displayname",{"_index":2772,"title":{},"body":{"controllers/UserController.html":{}}}],["member.guild.id",{"_index":66,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{}}}],["member.guild.ownerid",{"_index":1768,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["member.id",{"_index":68,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.kick",{"_index":1532,"title":{},"body":{"injectables/GuildService.html":{}}}],["member.roles.add",{"_index":2714,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.add('1014066383912439809",{"_index":1320,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.add('1121823930085285938",{"_index":2713,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.add(role.id",{"_index":75,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["member.roles.add(verifiedroleid",{"_index":1318,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.cache.foreach((role",{"_index":2705,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1011513775054143632",{"_index":57,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1011563978956226560",{"_index":56,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.cache.has('1070116538083975309",{"_index":1525,"title":{},"body":{"injectables/GuildService.html":{}}}],["member.roles.cache.has('1121823930085285938",{"_index":59,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["member.roles.cache.has('1226585753253843014",{"_index":1313,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["member.roles.remove",{"_index":1333,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["member.roles.remove(role.id",{"_index":2712,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["member.timeout(parseint(duration",{"_index":2794,"title":{},"body":{"controllers/UserController.html":{}}}],["member.ts",{"_index":870,"title":{},"body":{"classes/DiscordGuildMember.html":{},"coverage.html":{}}}],["member.ts:11",{"_index":882,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:15",{"_index":880,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:18",{"_index":881,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:21",{"_index":885,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:24",{"_index":876,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:27",{"_index":878,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.ts:8",{"_index":884,"title":{},"body":{"classes/DiscordGuildMember.html":{}}}],["member.user",{"_index":2777,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.bot",{"_index":1294,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"controllers/UserController.html":{}}}],["member.user.globalname",{"_index":2773,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.id",{"_index":2770,"title":{},"body":{"controllers/UserController.html":{}}}],["member.user.username",{"_index":1293,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["member?.communicationdisableduntil?.tojson",{"_index":2771,"title":{},"body":{"controllers/UserController.html":{}}}],["members",{"_index":661,"title":{},"body":{"classes/CleanWfpMember.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{}}}],["members.fetch(dbuser.userid.tostring",{"_index":2614,"title":{},"body":{"injectables/TasksService.html":{}}}],["members.fetch(user.id",{"_index":1356,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members.fetch(user.userid",{"_index":1312,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members.foreach(async",{"_index":54,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["members.map((member",{"_index":2767,"title":{},"body":{"controllers/UserController.html":{}}}],["members.push(member",{"_index":1526,"title":{},"body":{"injectables/GuildService.html":{}}}],["members.size",{"_index":2766,"title":{},"body":{"controllers/UserController.html":{}}}],["members/index.ts",{"_index":1226,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{}}}],["members/index.ts:132",{"_index":1254,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:150",{"_index":1241,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:23",{"_index":1233,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:37",{"_index":1244,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:55",{"_index":1237,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:65",{"_index":1247,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["members/index.ts:76",{"_index":1250,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["memberstokick",{"_index":1530,"title":{},"body":{"injectables/GuildService.html":{}}}],["membersunfiltered",{"_index":1520,"title":{},"body":{"injectables/GuildService.html":{}}}],["membersunfiltered.foreach(async",{"_index":1522,"title":{},"body":{"injectables/GuildService.html":{}}}],["mentionable",{"_index":973,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["menu",{"_index":1426,"title":{},"body":{"modules/GuildModule.html":{},"license.html":{}}}],["menu/index.ts",{"_index":2065,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{}}}],["menu/index.ts:131",{"_index":2084,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:157",{"_index":2079,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:192",{"_index":2081,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:201",{"_index":2077,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:227",{"_index":2075,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:33",{"_index":2072,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["menu/index.ts:43",{"_index":2087,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["merchantability",{"_index":3849,"title":{},"body":{"license.html":{}}}],["mere",{"_index":3312,"title":{},"body":{"license.html":{}}}],["merging",{"_index":3720,"title":{},"body":{"license.html":{}}}],["message",{"_index":405,"title":{},"body":{"modules/BotModule.html":{},"classes/Channel.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TicketSystemSetupCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["message).inguild",{"_index":865,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"miscellaneous/variables.html":{}}}],["message.attachments.map",{"_index":1411,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.attachments.map((attachment",{"_index":1393,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.attachments.size",{"_index":1409,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.author.bot",{"_index":2045,"title":{},"body":{"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{}}}],["message.author.id",{"_index":1385,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["message.channel",{"_index":1401,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.channelid",{"_index":1388,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"miscellaneous/variables.html":{}}}],["message.content",{"_index":1668,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["message.content.length",{"_index":1392,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.fetch",{"_index":2278,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.guildid",{"_index":1389,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/SetFirstMessageUICommand.html":{}}}],["message.id",{"_index":1387,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.member.roles.cache.has",{"_index":866,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["message.message",{"_index":3957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message.message.guildid",{"_index":2282,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.message.inguild",{"_index":2279,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.partial",{"_index":2277,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["message.react('1194715694948946030",{"_index":1406,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.reactions.cache.map((reaction",{"_index":1396,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message.reply",{"_index":944,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts",{"_index":928,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"coverage.html":{}}}],["message/index.ts:10",{"_index":1370,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message/index.ts:14",{"_index":934,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts:17",{"_index":1373,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message/index.ts:18",{"_index":932,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["message/index.ts:53",{"_index":1375,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["message_deleted",{"_index":2018,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["messageactionrowcomponentbuilder",{"_index":3114,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["messagecontextmenucommandinteraction",{"_index":2209,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["messagecount",{"_index":1477,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["messagecountbucket",{"_index":1767,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["messagecounts",{"_index":1540,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagefromuserguard",{"_index":1377,"title":{"guards/MessageFromUserGuard.html":{}},"body":{"injectables/GuildMessageHandler.html":{},"guards/MessageFromUserGuard.html":{},"coverage.html":{}}}],["messageid",{"_index":1386,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["messageisdmguard",{"_index":936,"title":{"guards/MessageIsDmGuard.html":{}},"body":{"injectables/DmMessageHandler.html":{},"guards/MessageIsDmGuard.html":{},"coverage.html":{}}}],["messagemetadata",{"_index":1738,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["messagereaction",{"_index":1239,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"miscellaneous/variables.html":{}}}],["messagereaction).emoji.name",{"_index":3978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagereference",{"_index":2219,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["messages",{"_index":420,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"injectables/TasksService.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/functions.html":{}}}],["messages.last().createdtimestamp",{"_index":613,"title":{},"body":{"controllers/ChannelController.html":{}}}],["messagesdeleted",{"_index":505,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["messagesperchannellastmonth",{"_index":1192,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperchannellastmonth(@param('guildid",{"_index":1202,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperchannellastmonth(guildid",{"_index":1194,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth",{"_index":1193,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth(@param('guildid",{"_index":1210,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagesperdaylastmonth(guildid",{"_index":1198,"title":{},"body":{"controllers/GuildController.html":{}}}],["messagestats",{"_index":1537,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagestats.reduce",{"_index":1557,"title":{},"body":{"injectables/GuildService.html":{}}}],["messagestats.reduce((acc",{"_index":1542,"title":{},"body":{"injectables/GuildService.html":{}}}],["met",{"_index":3398,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":1064,"title":{},"body":{"classes/Explorer.html":{},"injectables/GuildUserService.html":{},"dependencies.html":{}}}],["method",{"_index":1068,"title":{},"body":{"classes/Explorer.html":{}}}],["methods",{"_index":9,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["midnight",{"_index":2584,"title":{},"body":{"injectables/TasksService.html":{}}}],["minutes",{"_index":2579,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{}}}],["miscchannelid",{"_index":3158,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["miscellaneous",{"_index":3012,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misrepresentation",{"_index":3649,"title":{},"body":{"license.html":{}}}],["mit",{"_index":2645,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"index.html":{}}}],["mixin(channelidguardmixin",{"_index":3958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mixin(reactionemote",{"_index":3979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mock",{"_index":3001,"title":{},"body":{"dependencies.html":{}}}],["mod",{"_index":1258,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["modal",{"_index":755,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"guards/IsModalInteractionGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{},"classes/initGuildCommand.html":{}}}],["modal.addcomponents(questioncomponentrow",{"_index":802,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.customid.split",{"_index":810,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.customid.startswith('community",{"_index":809,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.ismodalsubmit",{"_index":808,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modal.reply",{"_index":832,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modalactionrowcomponentbuilder",{"_index":745,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["modalbuilder",{"_index":746,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["modalfieldstransformpipe",{"_index":751,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["modalsubmitinteraction",{"_index":2086,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["modannouncementdto",{"_index":2048,"title":{"classes/ModAnnouncementDto.html":{}},"body":{"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["modannouncementmodal",{"_index":2225,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["modchannelid",{"_index":2449,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["mode",{"_index":3073,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":3527,"title":{},"body":{"license.html":{}}}],["moderatemembers",{"_index":46,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["moderation",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["moderation/moderation.module",{"_index":1419,"title":{},"body":{"modules/GuildModule.html":{}}}],["moderationmodule",{"_index":130,"title":{"modules/ModerationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{},"modules/ModerationModule.html":{},"modules.html":{},"overview.html":{}}}],["modification",{"_index":3268,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":3335,"title":{},"body":{"license.html":{}}}],["modified",{"_index":3241,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":3483,"title":{},"body":{"license.html":{}}}],["modify",{"_index":3221,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":3303,"title":{},"body":{"license.html":{}}}],["modmessage",{"_index":2243,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["modrequest",{"_index":3037,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modrequestcategoryselect",{"_index":2093,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["modrequestcategoryselect(guildid",{"_index":2173,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["modrequestcategoryselect(suffix",{"_index":3035,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modrequestflow",{"_index":1422,"title":{"classes/ModRequestFlow.html":{}},"body":{"modules/GuildModule.html":{},"classes/ModRequestFlow.html":{},"coverage.html":{}}}],["modrequestmenu",{"_index":2172,"title":{},"body":{"classes/ModRequestFlow.html":{},"miscellaneous/variables.html":{}}}],["modrequestmenuid",{"_index":2094,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modrequestmodal",{"_index":2099,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["modrequestmodal.addcomponents",{"_index":2143,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["modroleid",{"_index":2450,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["mods",{"_index":783,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["module",{"_index":92,"title":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":94,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mokka",{"_index":2498,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["month",{"_index":1196,"title":{},"body":{"controllers/GuildController.html":{}}}],["more",{"_index":999,"title":{},"body":{"classes/EditRoleData.html":{},"injectables/GuildService.html":{},"classes/RoleResponse.html":{},"classes/TimeOutCommand.html":{},"modules/UserModule.html":{},"index.html":{},"license.html":{}}}],["moreover",{"_index":3691,"title":{},"body":{"license.html":{}}}],["ms",{"_index":2258,"title":{},"body":{"classes/PingCommand.html":{}}}],["msg",{"_index":2804,"title":{},"body":{"controllers/UserController.html":{}}}],["msg.author.id",{"_index":2805,"title":{},"body":{"controllers/UserController.html":{}}}],["msg.createdtimestamp",{"_index":615,"title":{},"body":{"controllers/ChannelController.html":{}}}],["msg.deletable",{"_index":614,"title":{},"body":{"controllers/ChannelController.html":{}}}],["msgid",{"_index":2815,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["mumvoice",{"_index":2212,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["mumvoicecommandchatinput",{"_index":386,"title":{"classes/MumVoiceCommandChatInput.html":{}},"body":{"modules/BotModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["mumvoicecommandui",{"_index":387,"title":{"classes/MumVoiceCommandUi.html":{}},"body":{"modules/BotModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["mumvoicen",{"_index":2237,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["mumvoiceui",{"_index":2223,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["muten",{"_index":2660,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["myśliwiec",{"_index":3097,"title":{},"body":{"index.html":{}}}],["möchtest",{"_index":2647,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/UserToUser.html":{}}}],["n\\n${quotedmessage",{"_index":1675,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["nachricht",{"_index":2061,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":3042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["names",{"_index":690,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["napi",{"_index":1285,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["nature",{"_index":3496,"title":{},"body":{"license.html":{}}}],["nchannel",{"_index":1171,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setname(channel.name",{"_index":1177,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setparent(channel.parentid",{"_index":1176,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["nchannel.setposition(channel.position",{"_index":1175,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["necessary",{"_index":3857,"title":{},"body":{"license.html":{}}}],["need",{"_index":3389,"title":{},"body":{"license.html":{}}}],["needed",{"_index":2398,"title":{},"body":{"injectables/SelfService.html":{},"license.html":{}}}],["needhelpbutton",{"_index":939,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["needhelpbuttonid",{"_index":2095,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":2383,"title":{},"body":{"injectables/SelfService.html":{},"properties.html":{}}}],["nest",{"_index":3063,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":3101,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1044,"title":{},"body":{"interfaces/EventToLog.html":{},"guards/HasRequiredRank.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":1858,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{}}}],["nestjs/config",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":36,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"injectables/DmMessageHandler.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"controllers/RoleController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"dependencies.html":{},"classes/initGuildCommand.html":{}}}],["nestjs/core/dist/decorators/option/choice/choice",{"_index":2921,"title":{},"body":{"classes/UserToUser.html":{}}}],["nestjs/event",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"controllers/RoleController.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1883,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":1873,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":2992,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/JwtAuthController.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["network",{"_index":3190,"title":{},"body":{"license.html":{}}}],["never",{"_index":2269,"title":{},"body":{"injectables/PrismaService.html":{}}}],["new",{"_index":216,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newmember",{"_index":1252,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newmember.guild.id",{"_index":1349,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newmember.user.username",{"_index":1347,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["newrank",{"_index":1345,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["next",{"_index":3548,"title":{},"body":{"license.html":{}}}],["nicht",{"_index":684,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["node.js",{"_index":3056,"title":{},"body":{"index.html":{}}}],["non",{"_index":3336,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":3534,"title":{},"body":{"license.html":{}}}],["normal",{"_index":3352,"title":{},"body":{"license.html":{}}}],["normally",{"_index":3570,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":1103,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/UserController.html":{}}}],["notfoundexception('guild",{"_index":2802,"title":{},"body":{"controllers/UserController.html":{}}}],["nothing",{"_index":3703,"title":{},"body":{"license.html":{}}}],["notice",{"_index":3324,"title":{},"body":{"license.html":{}}}],["notices",{"_index":3318,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":3692,"title":{},"body":{"license.html":{}}}],["notify",{"_index":3688,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":3636,"title":{},"body":{"license.html":{}}}],["november",{"_index":3165,"title":{},"body":{"license.html":{}}}],["now",{"_index":905,"title":{},"body":{"classes/DiscordUser.html":{}}}],["nsfw",{"_index":421,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["null",{"_index":342,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":231,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["numbered",{"_index":3836,"title":{},"body":{"license.html":{}}}],["nummessages",{"_index":2820,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["nummessages.tostring",{"_index":2830,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["numreactions",{"_index":2822,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["numreactions.tostring",{"_index":2831,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["nur",{"_index":948,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["nutzer:in",{"_index":831,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{}}}],["oauth",{"_index":1949,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["oauth2",{"_index":3005,"title":{},"body":{"dependencies.html":{}}}],["oautherrordata",{"_index":1913,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["object",{"_index":608,"title":{},"body":{"controllers/ChannelController.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/LogEntry.html":{},"classes/RoleResponse.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["object.keys(colors",{"_index":1018,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["object.keys(data).foreach((key",{"_index":1212,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.keys(data).foreach(async",{"_index":1207,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.keys(exception.constraints).map((key",{"_index":716,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["object.keys(settings).foreach(async",{"_index":1642,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["object.values(data",{"_index":1206,"title":{},"body":{"controllers/GuildController.html":{}}}],["object.values(messagecounts[channelid",{"_index":1552,"title":{},"body":{"injectables/GuildService.html":{}}}],["obligate",{"_index":3813,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":3552,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":3440,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":3533,"title":{},"body":{"license.html":{}}}],["occur",{"_index":2007,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["occurred",{"_index":1985,"title":{},"body":{"classes/LogEntry.html":{}}}],["occurring",{"_index":3700,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":3601,"title":{},"body":{"license.html":{}}}],["offer",{"_index":3217,"title":{},"body":{"license.html":{}}}],["offered",{"_index":3559,"title":{},"body":{"license.html":{}}}],["offering",{"_index":3537,"title":{},"body":{"license.html":{}}}],["official",{"_index":3338,"title":{},"body":{"license.html":{}}}],["offset",{"_index":232,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["old",{"_index":1988,"title":{},"body":{"classes/LogEntry.html":{}}}],["old/new",{"_index":1990,"title":{},"body":{"classes/LogEntry.html":{}}}],["older",{"_index":3254,"title":{},"body":{"license.html":{}}}],["oldmember",{"_index":1255,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["oldrank",{"_index":1343,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["omit",{"_index":1121,"title":{},"body":{"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntryDto.html":{},"classes/RestrictedChannelDto.html":{},"classes/SettingsDto.html":{}}}],["omit(['guildid",{"_index":1652,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["on('guildmemberadd",{"_index":1236,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('guildmemberremove",{"_index":1246,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('guildmemberupdate",{"_index":1253,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('interactioncreate",{"_index":729,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/initGuildCommand.html":{}}}],["on('interactioncreate')@useguards(ismodalinteractionguard",{"_index":738,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["on('messagecreate",{"_index":942,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{}}}],["on('messagecreate')@useguards(messagefromuserguard",{"_index":1372,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["on('messagecreate')@useguards(messageisdmguard",{"_index":931,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["on('messagereactionadd",{"_index":1299,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('messagereactionadd')@useguards(undefined",{"_index":1240,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["on('ready",{"_index":1243,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["onadminroleidchanged",{"_index":1715,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["onadminroleidchanged(payload",{"_index":1744,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["onbuttoncloseticket",{"_index":2068,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onbuttoncloseticket(interaction",{"_index":2078,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onbuttonneedhelpbutton",{"_index":2069,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onbuttonneedhelpbutton(interaction",{"_index":2080,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onbuttonpress",{"_index":723,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["onbuttonpress(interaction",{"_index":727,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["once",{"_index":1511,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["once('ready",{"_index":1499,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["oncleanwfpmembers",{"_index":651,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncleanwfpmembers(@interactionevent",{"_index":668,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncleanwfpmembers(interaction",{"_index":654,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["oncommunityquestion",{"_index":724,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["oncommunityquestion(interaction",{"_index":731,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["oncomplete",{"_index":2598,"title":{},"body":{"injectables/TasksService.html":{}}}],["one",{"_index":1999,"title":{},"body":{"classes/LogEntry.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["onevent",{"_index":210,"title":{},"body":{"injectables/AppService.html":{},"injectables/GuildUserService.html":{}}}],["onevent('settings.role.*.changed",{"_index":1745,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["oninitguild",{"_index":3103,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninitguild(@interactionevent",{"_index":3118,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninitguild(interaction",{"_index":3107,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninteraction",{"_index":725,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/initGuildCommand.html":{}}}],["oninteraction(interaction",{"_index":3109,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["oninteraction(undefined",{"_index":735,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["onmenuselect",{"_index":2070,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onmenuselect(interaction",{"_index":2082,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["onmessage",{"_index":1367,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["onmessage(interaction",{"_index":2205,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["onmessage(message",{"_index":1371,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["onmodalsubmit",{"_index":2071,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandUi.html":{}}}],["onmodalsubmit(interaction",{"_index":2085,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["onmoduleinit",{"_index":2262,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onplaycommand",{"_index":2250,"title":{},"body":{"classes/PingCommand.html":{}}}],["onready",{"_index":1229,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["onroleadd",{"_index":11,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onroleadd(@interactionevent",{"_index":52,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onroleadd(interaction",{"_index":24,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["onshowinfo",{"_index":2425,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["onshowinfo(interaction",{"_index":2427,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["ontick",{"_index":1166,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["onticketsystemsetupcommand",{"_index":2635,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["onticketsystemsetupcommand(interaction",{"_index":2637,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["ontimeoutcommand",{"_index":2651,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["ontimeoutcommand(interaction",{"_index":2653,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["onunverifybyrole",{"_index":2695,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["onunverifybyrole(@ia",{"_index":2701,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["onunverifybyrole(baseinteraction",{"_index":2697,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["open",{"_index":3084,"title":{},"body":{"index.html":{},"classes/initGuildCommand.html":{}}}],["openintrochannelid",{"_index":2451,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["operate",{"_index":3874,"title":{},"body":{"license.html":{}}}],["operated",{"_index":3542,"title":{},"body":{"license.html":{}}}],["operating",{"_index":3363,"title":{},"body":{"license.html":{}}}],["operation",{"_index":3459,"title":{},"body":{"license.html":{}}}],["operator",{"_index":3249,"title":{},"body":{"license.html":{}}}],["opportunity",{"_index":3820,"title":{},"body":{"license.html":{}}}],["option",{"_index":3632,"title":{},"body":{"license.html":{}}}],["optional",{"_index":23,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/DiscordGuildMember.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["options",{"_index":2174,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/UserToUser.html":{},"license.html":{}}}],["order",{"_index":1490,"title":{},"body":{"injectables/GuildService.html":{},"license.html":{}}}],["orderby",{"_index":356,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/GuildService.html":{}}}],["organization",{"_index":3716,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":3284,"title":{},"body":{"license.html":{}}}],["origin",{"_index":3650,"title":{},"body":{"license.html":{}}}],["original",{"_index":3652,"title":{},"body":{"license.html":{}}}],["others",{"_index":3410,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":3408,"title":{},"body":{"license.html":{}}}],["out",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"license.html":{},"overview.html":{}}}],["outcome",{"_index":671,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['memberstokick",{"_index":691,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['memberstokick'].length.tostring",{"_index":689,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["outcome['unkickablemembers",{"_index":697,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["outcome['unkickablemembers'].length.tostring",{"_index":696,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["outed",{"_index":2759,"title":{},"body":{"controllers/UserController.html":{}}}],["output",{"_index":3402,"title":{},"body":{"license.html":{}}}],["outside",{"_index":3422,"title":{},"body":{"license.html":{}}}],["overview",{"_index":3928,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":487,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["overwrites",{"_index":461,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["owned",{"_index":3747,"title":{},"body":{"license.html":{}}}],["ownedranks",{"_index":1816,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["ownedranks.includes(requiredrank",{"_index":1818,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["owner",{"_index":1769,"title":{},"body":{"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["owner'].includes(user.rank",{"_index":2283,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["package",{"_index":2983,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packaged",{"_index":3489,"title":{},"body":{"license.html":{}}}],["packaging",{"_index":3353,"title":{},"body":{"license.html":{}}}],["pagination",{"_index":328,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["pagination.limit",{"_index":362,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["pagination.offset",{"_index":359,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["paper",{"_index":3909,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":3679,"title":{},"body":{"license.html":{}}}],["paragraphs",{"_index":3759,"title":{},"body":{"license.html":{}}}],["param",{"_index":235,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"interfaces/EventToLog.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"guards/HasRequiredRank.html":{},"classes/ModAnnouncementDto.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["param('channelid",{"_index":593,"title":{},"body":{"controllers/ChannelController.html":{}}}],["param('duration",{"_index":2792,"title":{},"body":{"controllers/UserController.html":{}}}],["param('guildid",{"_index":263,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["param('roleid",{"_index":2330,"title":{},"body":{"controllers/RoleController.html":{}}}],["param('userid",{"_index":2779,"title":{},"body":{"controllers/UserController.html":{}}}],["param({description",{"_index":836,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["param({name",{"_index":2054,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["parameter",{"_index":3963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{}}}],["paramtype",{"_index":844,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["paramtype.string",{"_index":845,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["paramtype.user",{"_index":2874,"title":{},"body":{"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{}}}],["parent",{"_index":455,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{}}}],["parentid",{"_index":422,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["parseint(_days",{"_index":2894,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(_hours",{"_index":2896,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(_minutes",{"_index":2897,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["parseint(questionid",{"_index":780,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["parseintpipe",{"_index":236,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["part",{"_index":3286,"title":{},"body":{"license.html":{}}}],["partial",{"_index":1614,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["partials",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.channel",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.guildmember",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.guildscheduledevent",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.message",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.reaction",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.threadmember",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["partials.user",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["particular",{"_index":3342,"title":{},"body":{"license.html":{}}}],["parties",{"_index":3311,"title":{},"body":{"license.html":{}}}],["parts",{"_index":3388,"title":{},"body":{"license.html":{}}}],["party",{"_index":3543,"title":{},"body":{"license.html":{}}}],["party's",{"_index":3722,"title":{},"body":{"license.html":{}}}],["passport",{"_index":1970,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":1884,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["passportstrategy",{"_index":1971,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1962,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["password",{"_index":3623,"title":{},"body":{"license.html":{}}}],["patent",{"_index":3678,"title":{},"body":{"license.html":{}}}],["patents",{"_index":3742,"title":{},"body":{"license.html":{}}}],["path",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":1747,"title":{},"body":{"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["payload.sub",{"_index":1978,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["payment",{"_index":3793,"title":{},"body":{"license.html":{}}}],["peer",{"_index":3555,"title":{},"body":{"license.html":{}}}],["peers",{"_index":3558,"title":{},"body":{"license.html":{}}}],["per",{"_index":465,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"injectables/GuildService.html":{},"classes/PermissionOverwrite.html":{}}}],["perform",{"_index":1798,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["performance",{"_index":3853,"title":{},"body":{"license.html":{}}}],["performed",{"_index":1982,"title":{},"body":{"classes/LogEntry.html":{}}}],["performing",{"_index":3375,"title":{},"body":{"license.html":{}}}],["periodically",{"_index":2561,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["permanently",{"_index":3687,"title":{},"body":{"license.html":{}}}],["permission",{"_index":460,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"license.html":{}}}],["permissionflagsbits",{"_index":1006,"title":{},"body":{"classes/EditRoleData.html":{},"classes/ModRequestFlow.html":{},"classes/RoleResponse.html":{}}}],["permissionflagsbits.addreactions",{"_index":2118,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["permissionflagsbits.attachfiles",{"_index":2119,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["permissionflagsbits.readmessagehistory",{"_index":2117,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["permissionflagsbits.sendmessages",{"_index":2116,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["permissionflagsbits.viewchannel",{"_index":2113,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["permissionoverwrite",{"_index":458,"title":{"classes/PermissionOverwrite.html":{}},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["permissionoverwrites",{"_index":423,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{}}}],["permissionoverwrites.create(user_id",{"_index":1570,"title":{},"body":{"injectables/GuildService.html":{}}}],["permissionoverwrites.delete(user_id",{"_index":1573,"title":{},"body":{"injectables/GuildService.html":{}}}],["permissionresolvable",{"_index":993,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["permissions",{"_index":974,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"injectables/TasksService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["permissive",{"_index":3471,"title":{},"body":{"license.html":{}}}],["permit",{"_index":3506,"title":{},"body":{"license.html":{}}}],["permits",{"_index":3239,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":3174,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":3606,"title":{},"body":{"license.html":{}}}],["person",{"_index":2915,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["personal",{"_index":3568,"title":{},"body":{"license.html":{}}}],["pertinent",{"_index":3811,"title":{},"body":{"license.html":{}}}],["physical",{"_index":3515,"title":{},"body":{"license.html":{}}}],["physically",{"_index":3531,"title":{},"body":{"license.html":{}}}],["pick",{"_index":3048,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pieces",{"_index":3208,"title":{},"body":{"license.html":{}}}],["ping",{"_index":2253,"title":{},"body":{"classes/PingCommand.html":{}}}],["pingcommand",{"_index":380,"title":{"classes/PingCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/PingCommand.html":{},"coverage.html":{}}}],["pipe",{"_index":1636,"title":{},"body":{"injectables/GuildSettingsService.html":{},"injectables/JwtAuthService.html":{}}}],["pipe(settings",{"_index":1651,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["place",{"_index":3539,"title":{},"body":{"license.html":{}}}],["plain",{"_index":3047,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintoinstance",{"_index":246,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["plaintoinstance(cls",{"_index":3046,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plaintoinstance(discordguildmember",{"_index":2768,"title":{},"body":{"controllers/UserController.html":{}}}],["plaintoinstance(guildautodeletechanneldto",{"_index":1113,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["plaintoinstance(logentrydto",{"_index":274,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["plaintoinstance(selfdto",{"_index":1698,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["plaintoinstance(settingsdto",{"_index":1593,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["please",{"_index":781,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["plus",{"_index":3726,"title":{},"body":{"license.html":{}}}],["pointer",{"_index":3902,"title":{},"body":{"license.html":{}}}],["portion",{"_index":3562,"title":{},"body":{"license.html":{}}}],["position",{"_index":470,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["possesses",{"_index":3528,"title":{},"body":{"license.html":{}}}],["possession",{"_index":3486,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":3877,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2006,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["possibleanswers",{"_index":2479,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["post",{"_index":562,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["post('/')@apioperation({summary",{"_index":2303,"title":{},"body":{"controllers/RoleController.html":{}}}],["post(':channelid/clean",{"_index":606,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/clean')@apioperation({summary",{"_index":538,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/slowmode",{"_index":599,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':channelid/slowmode')@apioperation({summary",{"_index":559,"title":{},"body":{"controllers/ChannelController.html":{}}}],["post(':userid/ban",{"_index":2778,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/ban')@apioperation({summary",{"_index":2740,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/kick",{"_index":2786,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/kick')@apioperation({summary",{"_index":2747,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/purge",{"_index":2799,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/purge')@apioperation({summary",{"_index":2750,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/timeout/:duration",{"_index":2791,"title":{},"body":{"controllers/UserController.html":{}}}],["post(':userid/timeout/:duration')@apioperation({summary",{"_index":2758,"title":{},"body":{"controllers/UserController.html":{}}}],["post('refresh",{"_index":1848,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["power",{"_index":3452,"title":{},"body":{"license.html":{}}}],["practical",{"_index":3192,"title":{},"body":{"license.html":{}}}],["practice",{"_index":3764,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":3182,"title":{},"body":{"license.html":{}}}],["precise",{"_index":3263,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":3723,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":3334,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":531,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildRestrictedChannelController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"classes/SettingsDto.html":{},"controllers/UserController.html":{}}}],["prefixed",{"_index":3968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["present",{"_index":3828,"title":{},"body":{"license.html":{}}}],["presents",{"_index":3329,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":3646,"title":{},"body":{"license.html":{}}}],["pretty",{"_index":1036,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["prevented",{"_index":3599,"title":{},"body":{"license.html":{}}}],["previous",{"_index":3725,"title":{},"body":{"license.html":{}}}],["price",{"_index":3204,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":3794,"title":{},"body":{"license.html":{}}}],["print",{"_index":1037,"title":{},"body":{"interfaces/EventToLog.html":{}}}],["prior",{"_index":3689,"title":{},"body":{"license.html":{}}}],["prisma",{"_index":41,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/SelfService.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["prisma.jsonarray",{"_index":69,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["prisma.jsonarray).foreach",{"_index":2711,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["prisma.service",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/SelfService.html":{}}}],["prisma/client",{"_index":42,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/PrismaService.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":2260,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaserver",{"_index":3106,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["prismaservice",{"_index":16,"title":{"injectables/PrismaService.html":{}},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"injectables/PrismaService.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"overview.html":{}}}],["private",{"_index":50,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["problems",{"_index":3832,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":3593,"title":{},"body":{"license.html":{}}}],["procuring",{"_index":3784,"title":{},"body":{"license.html":{}}}],["produce",{"_index":635,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"license.html":{}}}],["product",{"_index":3516,"title":{},"body":{"license.html":{}}}],["production",{"_index":3075,"title":{},"body":{"index.html":{}}}],["products",{"_index":3795,"title":{},"body":{"license.html":{}}}],["program",{"_index":3200,"title":{},"body":{"license.html":{}}}],["program's",{"_index":3463,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":3920,"title":{},"body":{"license.html":{}}}],["programming",{"_index":3343,"title":{},"body":{"license.html":{}}}],["programs",{"_index":3209,"title":{},"body":{"license.html":{}}}],["progressive",{"_index":3055,"title":{},"body":{"index.html":{}}}],["prohibit",{"_index":3420,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":3448,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":3789,"title":{},"body":{"license.html":{}}}],["project",{"_index":1281,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"index.html":{}}}],["prominent",{"_index":3330,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":3321,"title":{},"body":{"license.html":{}}}],["promise",{"_index":234,"title":{},"body":{"controllers/AuditLogController.html":{},"interfaces/BotEvent.html":{},"controllers/ChannelController.html":{},"classes/CommandValidationFilter.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"injectables/JwtAuthService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SpecialCommand.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":1330,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["promise.all",{"_index":1174,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildUserController.html":{},"injectables/SelfService.html":{},"classes/initGuildCommand.html":{}}}],["promoted",{"_index":1342,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["propagate",{"_index":3293,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":3706,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":3304,"title":{},"body":{"license.html":{}}}],["properties",{"_index":202,"title":{"properties.html":{}},"body":{"injectables/AppService.html":{},"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":3569,"title":{},"body":{"license.html":{}}}],["protect",{"_index":3212,"title":{},"body":{"license.html":{}}}],["protecting",{"_index":3431,"title":{},"body":{"license.html":{}}}],["protection",{"_index":3475,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":3621,"title":{},"body":{"license.html":{}}}],["prove",{"_index":3854,"title":{},"body":{"license.html":{}}}],["provide",{"_index":3250,"title":{},"body":{"license.html":{}}}],["provided",{"_index":1663,"title":{},"body":{"injectables/GuildSettingsService.html":{},"controllers/JwtAuthController.html":{},"license.html":{}}}],["provider",{"_index":1055,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.name",{"_index":1067,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.prototype.handler",{"_index":1075,"title":{},"body":{"classes/Explorer.html":{}}}],["provider.prototype.hasownproperty(bot_event_handler_name",{"_index":1073,"title":{},"body":{"classes/Explorer.html":{}}}],["provider[bot_event_handler_name",{"_index":1070,"title":{},"body":{"classes/Explorer.html":{}}}],["providers",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"classes/Explorer.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["provides",{"_index":3912,"title":{},"body":{"license.html":{}}}],["providing",{"_index":3821,"title":{},"body":{"license.html":{}}}],["provision",{"_index":3637,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":3684,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":3840,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":3843,"title":{},"body":{"license.html":{}}}],["public",{"_index":1048,"title":{},"body":{"classes/Explorer.html":{},"license.html":{}}}],["publicity",{"_index":3653,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":3252,"title":{},"body":{"license.html":{}}}],["publish",{"_index":3467,"title":{},"body":{"license.html":{}}}],["published",{"_index":3255,"title":{},"body":{"license.html":{}}}],["purge",{"_index":2751,"title":{},"body":{"controllers/UserController.html":{}}}],["purged",{"_index":2732,"title":{},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["purgeuserfromguild",{"_index":2737,"title":{},"body":{"controllers/UserController.html":{}}}],["purgeuserfromguild(guildid",{"_index":2749,"title":{},"body":{"controllers/UserController.html":{}}}],["purpose",{"_index":3372,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":3573,"title":{},"body":{"license.html":{}}}],["pursuant",{"_index":3780,"title":{},"body":{"license.html":{}}}],["put",{"_index":563,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{}}}],["put(':channelid",{"_index":595,"title":{},"body":{"controllers/ChannelController.html":{}}}],["put(':channelid')@apioperation({summary",{"_index":544,"title":{},"body":{"controllers/ChannelController.html":{}}}],["put(':roleid",{"_index":2329,"title":{},"body":{"controllers/RoleController.html":{}}}],["put(':roleid')@apioperation({summary",{"_index":2315,"title":{},"body":{"controllers/RoleController.html":{}}}],["put()@httpcode(httpstatuscode.accepted",{"_index":1584,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["putsettings",{"_index":1579,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["putsettings(guildid",{"_index":1582,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["qualify",{"_index":3696,"title":{},"body":{"license.html":{}}}],["quality",{"_index":3852,"title":{},"body":{"license.html":{}}}],["query",{"_index":237,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/JwtAuthController.html":{}}}],["query('limit",{"_index":265,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["query('offset",{"_index":266,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["query(validationpipe",{"_index":264,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["question",{"_index":732,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{}}}],["question.answers",{"_index":813,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command",{"_index":395,"title":{},"body":{"modules/BotModule.html":{}}}],["question.command.ts",{"_index":722,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["question.command.ts:120",{"_index":739,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:41",{"_index":726,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:48",{"_index":734,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.command.ts:73",{"_index":730,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.description",{"_index":764,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.dto",{"_index":750,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.dto.ts",{"_index":835,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:11",{"_index":843,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["question.dto.ts:20",{"_index":841,"title":{},"body":{"classes/CommunityQuestionDto.html":{}}}],["question.form.dto",{"_index":758,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["question.form.dto.ts",{"_index":847,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["question.form.dto.ts:6",{"_index":850,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["question.question",{"_index":775,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questioncomponentrow",{"_index":799,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionfield",{"_index":786,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionid",{"_index":762,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["questionid.id",{"_index":767,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["quote",{"_index":1641,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["quote(it",{"_index":1671,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["quotedmessage",{"_index":1667,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["rambda",{"_index":1637,"title":{},"body":{"injectables/GuildSettingsService.html":{},"dependencies.html":{}}}],["rank",{"_index":252,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"classes/SelfDto-1.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["rank(s",{"_index":1792,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.decorator",{"_index":256,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rank.decorator.ts",{"_index":2969,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank.guard",{"_index":260,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rank.guard.ts",{"_index":1788,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank.guard.ts:21",{"_index":1795,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.guard.ts:33",{"_index":1796,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["rank.new",{"_index":1296,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["ranks",{"_index":1819,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["rate",{"_index":464,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"controllers/UserController.html":{}}}],["ratelimitperuser",{"_index":424,"title":{},"body":{"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["raw",{"_index":469,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["rawposition",{"_index":425,"title":{},"body":{"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["re)created",{"_index":1273,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["react",{"_index":3935,"title":{},"body":{"properties.html":{}}}],["reactedmemberismodorhigherguard",{"_index":1249,"title":{"guards/ReactedMemberIsModOrHigherGuard.html":{}},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["reaction",{"_index":1242,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"miscellaneous/variables.html":{}}}],["reaction.count",{"_index":1399,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["reaction.emoji.name",{"_index":1319,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.emoji.tostring",{"_index":1398,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["reaction.fetch",{"_index":1302,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.message",{"_index":1339,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.message.author.id",{"_index":1305,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.guild.channels.fetch",{"_index":1335,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.guildid",{"_index":1306,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.message.id",{"_index":1310,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction.partial",{"_index":1301,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"miscellaneous/variables.html":{}}}],["reaction.remove",{"_index":1340,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reaction_added",{"_index":2019,"title":{},"body":{"classes/LogEntry.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/variables.html":{}}}],["reaction_removed",{"_index":2020,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["reactionchannelidguard",{"_index":1260,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reactionchannelidguard('1121822614374060175",{"_index":1300,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reactionchannelidguard('1226574989147508746",{"_index":1350,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["reactionemote",{"_index":3976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reactionemoteguard",{"_index":1263,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reactions",{"_index":1740,"title":{},"body":{"injectables/GuildUserService.html":{},"classes/UserInfoUiCommand.html":{}}}],["read",{"_index":3092,"title":{},"body":{"index.html":{}}}],["readable",{"_index":3512,"title":{},"body":{"license.html":{}}}],["readily",{"_index":3769,"title":{},"body":{"license.html":{}}}],["reading",{"_index":3625,"title":{},"body":{"license.html":{}}}],["readmessagehistory",{"_index":1572,"title":{},"body":{"injectables/GuildService.html":{}}}],["readonly",{"_index":222,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"guards/HasRequiredRank.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/ModRequestFlow.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/initGuildCommand.html":{}}}],["ready",{"_index":1502,"title":{},"body":{"injectables/GuildService.html":{}}}],["reason",{"_index":280,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["reasonable",{"_index":3529,"title":{},"body":{"license.html":{}}}],["receipt",{"_index":3694,"title":{},"body":{"license.html":{}}}],["receive",{"_index":3207,"title":{},"body":{"license.html":{}}}],["received",{"_index":3492,"title":{},"body":{"license.html":{}}}],["receives",{"_index":3711,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":3786,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":3605,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":3777,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":3282,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":3339,"title":{},"body":{"license.html":{}}}],["record",{"_index":1541,"title":{},"body":{"injectables/GuildService.html":{},"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["redirect_uri",{"_index":1938,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["redistribute",{"_index":3895,"title":{},"body":{"license.html":{}}}],["referring",{"_index":3203,"title":{},"body":{"license.html":{}}}],["refers",{"_index":3271,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":3008,"title":{},"body":{"dependencies.html":{}}}],["reflect.getmetadata(bot_event_key",{"_index":1072,"title":{},"body":{"classes/Explorer.html":{}}}],["reflector",{"_index":1794,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["refrain",{"_index":3815,"title":{},"body":{"license.html":{}}}],["refresh",{"_index":1886,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["refresh_token",{"_index":1847,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshjwtguard",{"_index":1854,"title":{"injectables/RefreshJwtGuard.html":{}},"body":{"controllers/JwtAuthController.html":{},"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["refreshjwtstrategy",{"_index":1878,"title":{"injectables/RefreshJwtStrategy.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/RefreshJwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtoken",{"_index":1840,"title":{},"body":{"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{}}}],["refreshtoken(@req",{"_index":1864,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshtoken(req",{"_index":1845,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["refreshtoken(userid",{"_index":1907,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["regard",{"_index":3631,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":3488,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":3390,"title":{},"body":{"license.html":{}}}],["registercommandoptions",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["rein",{"_index":2147,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["reinstated",{"_index":3683,"title":{},"body":{"license.html":{}}}],["relationship",{"_index":3423,"title":{},"body":{"license.html":{}}}],["relative",{"_index":1000,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["released",{"_index":3260,"title":{},"body":{"license.html":{}}}],["releasing",{"_index":3245,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":3481,"title":{},"body":{"license.html":{}}}],["relicensing",{"_index":3261,"title":{},"body":{"license.html":{}}}],["relying",{"_index":3768,"title":{},"body":{"license.html":{}}}],["remain",{"_index":3551,"title":{},"body":{"license.html":{}}}],["remains",{"_index":3201,"title":{},"body":{"license.html":{}}}],["remote",{"_index":3817,"title":{},"body":{"license.html":{}}}],["remotely",{"_index":3819,"title":{},"body":{"license.html":{}}}],["removal",{"_index":3634,"title":{},"body":{"license.html":{}}}],["remove",{"_index":3633,"title":{},"body":{"license.html":{}}}],["removecommandsbefore",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["removemember",{"_index":1230,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["removemember(member",{"_index":1245,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["removing",{"_index":1326,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["rendered",{"_index":3869,"title":{},"body":{"license.html":{}}}],["repair",{"_index":3859,"title":{},"body":{"license.html":{}}}],["replace",{"_index":2544,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('x",{"_index":2542,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('y",{"_index":2540,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["replace('{message",{"_index":1674,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["replace('{user",{"_index":1672,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["reply",{"_index":2218,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["reply(optional",{"_index":2056,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["replyto",{"_index":2055,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["replytomessage",{"_index":2051,"title":{},"body":{"classes/ModAnnouncementDto.html":{}}}],["report",{"_index":677,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["repository",{"_index":3066,"title":{},"body":{"index.html":{}}}],["represent",{"_index":3591,"title":{},"body":{"license.html":{}}}],["req",{"_index":1810,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"controllers/UserController.html":{}}}],["req.params.guildid",{"_index":1815,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["req.user.userid",{"_index":1813,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["request",{"_index":1425,"title":{},"body":{"modules/GuildModule.html":{},"guards/HasRequiredRank.html":{},"classes/ModRequestFlow.html":{},"controllers/SelfController.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.path",{"_index":3967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":3961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user.guildid",{"_index":2776,"title":{},"body":{"controllers/UserController.html":{}}}],["requestguilduser",{"_index":2967,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["requestuser",{"_index":1683,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":3383,"title":{},"body":{"license.html":{}}}],["required",{"_index":259,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["required_rank_key",{"_index":1803,"title":{},"body":{"guards/HasRequiredRank.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredpoints",{"_index":2293,"title":{},"body":{"classes/RestrictedChannelDto.html":{}}}],["requiredrank",{"_index":254,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requiredrank(rank.member",{"_index":261,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["requiredrank(rank.mod",{"_index":583,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["requirement",{"_index":3482,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":3554,"title":{},"body":{"license.html":{}}}],["requires",{"_index":3248,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":3288,"title":{},"body":{"license.html":{}}}],["reset",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolved",{"_index":3579,"title":{},"body":{"license.html":{}}}],["respect",{"_index":3456,"title":{},"body":{"license.html":{}}}],["response",{"_index":631,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["response.data.access_token",{"_index":1958,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["response.sendstatus(httpstatus.bad_request",{"_index":647,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["response.sendstatus(httpstatus.forbidden",{"_index":1222,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{}}}],["response.sendstatus(httpstatus.internal_server_error",{"_index":2422,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["response.statusmessage",{"_index":645,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["responsible",{"_index":2355,"title":{},"body":{"controllers/SelfController.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["restricted",{"_index":390,"title":{},"body":{"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["restrictedchanneldto",{"_index":2291,"title":{"classes/RestrictedChannelDto.html":{}},"body":{"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["restrictedchannels",{"_index":1442,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"classes/RestrictedChannelDto.html":{}}}],["restrictedchannelservice",{"_index":1458,"title":{},"body":{"injectables/GuildService.html":{}}}],["restricting",{"_index":3449,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":3670,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":3669,"title":{},"body":{"license.html":{}}}],["result",{"_index":3237,"title":{},"body":{"license.html":{}}}],["result.data.map((it",{"_index":273,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["result.total",{"_index":271,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["resulting",{"_index":3235,"title":{},"body":{"license.html":{}}}],["results",{"_index":79,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":3609,"title":{},"body":{"license.html":{}}}],["retrieving",{"_index":1026,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["return",{"_index":58,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"interfaces/DiscordExecutionContext.html":{},"injectables/DmMessageHandler.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["reviewing",{"_index":3881,"title":{},"body":{"license.html":{}}}],["revised",{"_index":3826,"title":{},"body":{"license.html":{}}}],["right",{"_index":3603,"title":{},"body":{"license.html":{}}}],["rights",{"_index":3213,"title":{},"body":{"license.html":{}}}],["risk",{"_index":3851,"title":{},"body":{"license.html":{}}}],["role",{"_index":490,"title":{},"body":{"classes/Channel.html":{},"classes/CleanWfpMember.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/PermissionOverwrite.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SettingsChanged.html":{},"classes/UnverifyByRoleCommand.html":{},"coverage.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["role.command.ts",{"_index":7,"title":{},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["role.command.ts:17",{"_index":18,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["role.command.ts:23",{"_index":28,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["role.conmand.ts",{"_index":2694,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["role.conmand.ts:16",{"_index":2696,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.conmand.ts:22",{"_index":2698,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.delete",{"_index":2336,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.edit(roledata",{"_index":2332,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.id",{"_index":2707,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["role.name",{"_index":2328,"title":{},"body":{"controllers/RoleController.html":{}}}],["role/role.controller",{"_index":2199,"title":{},"body":{"modules/ModerationModule.html":{}}}],["role_created",{"_index":2021,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["role_deleted",{"_index":2022,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["role_updated",{"_index":2023,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["rolecontroller",{"_index":2197,"title":{"controllers/RoleController.html":{}},"body":{"modules/ModerationModule.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["roledata",{"_index":2302,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleid",{"_index":2307,"title":{},"body":{"controllers/RoleController.html":{},"classes/initGuildCommand.html":{}}}],["roleresponse",{"_index":1007,"title":{"classes/RoleResponse.html":{}},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{}}}],["roleresponseschema",{"_index":1025,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolerows",{"_index":3149,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["roles",{"_index":61,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/EditRoleData.html":{},"injectables/GuildMemberEvents.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/UnverifyByRoleCommand.html":{}}}],["roles.cache.has",{"_index":1780,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["roles.cache.has((await",{"_index":1782,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["roles.fetch('1121823930085285938",{"_index":1521,"title":{},"body":{"injectables/GuildService.html":{}}}],["roles.foreach",{"_index":1362,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["roles.foreach((role",{"_index":71,"title":{},"body":{"classes/AddRoleCommand.html":{}}}],["roles.push",{"_index":2706,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["roleselectmenubuilder",{"_index":3115,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["roleselectmenuinteraction",{"_index":3111,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["rolesresponseschema",{"_index":1027,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rom",{"_index":3612,"title":{},"body":{"license.html":{}}}],["route",{"_index":3971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routermodule",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule.register",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["routes/controller(http",{"_index":1789,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["row",{"_index":771,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/initGuildCommand.html":{}}}],["royalty",{"_index":3730,"title":{},"body":{"license.html":{}}}],["rules",{"_index":3620,"title":{},"body":{"license.html":{}}}],["run",{"_index":2560,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"index.html":{},"license.html":{}}}],["running",{"_index":3251,"title":{},"body":{"license.html":{}}}],["runs",{"_index":1268,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["rust",{"_index":1284,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["rxjs",{"_index":1916,"title":{},"body":{"injectables/JwtAuthService.html":{},"dependencies.html":{}}}],["rüber",{"_index":2504,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["safest",{"_index":3897,"title":{},"body":{"license.html":{}}}],["sale",{"_index":3740,"title":{},"body":{"license.html":{}}}],["same",{"_index":3392,"title":{},"body":{"license.html":{}}}],["satisfy",{"_index":3553,"title":{},"body":{"license.html":{}}}],["saying",{"_index":3549,"title":{},"body":{"license.html":{}}}],["scalable",{"_index":3060,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["schema",{"_index":607,"title":{},"body":{"controllers/ChannelController.html":{},"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/UserController.html":{}}}],["schenkt",{"_index":2505,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["schiebt",{"_index":2501,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["schließen",{"_index":2132,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["schon",{"_index":2156,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["school",{"_index":3921,"title":{},"body":{"license.html":{}}}],["schreibe",{"_index":2233,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["scope",{"_index":1940,"title":{},"body":{"injectables/JwtAuthService.html":{},"license.html":{}}}],["scripts",{"_index":3369,"title":{},"body":{"license.html":{}}}],["secondarily",{"_index":3295,"title":{},"body":{"license.html":{}}}],["secondary",{"_index":3222,"title":{},"body":{"license.html":{}}}],["seconds",{"_index":495,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["secret",{"_index":1891,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["secretorkey",{"_index":1975,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["section",{"_index":3427,"title":{},"body":{"license.html":{}}}],["sections",{"_index":3510,"title":{},"body":{"license.html":{}}}],["see",{"_index":1799,"title":{},"body":{"guards/HasRequiredRank.html":{},"controllers/SelfController.html":{},"modules/UserModule.html":{},"license.html":{}}}],["select",{"_index":355,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"classes/initGuildCommand.html":{}}}],["selectguild",{"_index":2188,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["selectguildmenu",{"_index":2096,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectguildmenu(guilds",{"_index":2180,"title":{},"body":{"classes/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["selection",{"_index":2184,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["selection.values[0",{"_index":2192,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["selectioninteraction",{"_index":2183,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["selectioninteraction.awaitmessagecomponent",{"_index":2185,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["selectmenu",{"_index":3036,"title":{},"body":{"miscellaneous/functions.html":{}}}],["self.controller",{"_index":2848,"title":{},"body":{"modules/UserModule.html":{}}}],["self.controller.ts",{"_index":2847,"title":{},"body":{"modules/UserModule.html":{}}}],["self.dto",{"_index":2363,"title":{},"body":{"controllers/SelfController.html":{},"injectables/SelfService.html":{}}}],["self.service",{"_index":2365,"title":{},"body":{"controllers/SelfController.html":{},"modules/UserModule.html":{}}}],["self.service.ts",{"_index":2362,"title":{},"body":{"controllers/SelfController.html":{}}}],["selfcontroller",{"_index":2351,"title":{"controllers/SelfController.html":{}},"body":{"controllers/SelfController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["selfdto",{"_index":1084,"title":{"classes/SelfDto.html":{},"classes/SelfDto-1.html":{}},"body":{"classes/Guild.html":{},"controllers/GuildUserController.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"coverage.html":{}}}],["selfservice",{"_index":1879,"title":{"injectables/SelfService.html":{}},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["sell",{"_index":3756,"title":{},"body":{"license.html":{}}}],["selling",{"_index":3739,"title":{},"body":{"license.html":{}}}],["semiconductor",{"_index":3275,"title":{},"body":{"license.html":{}}}],["send",{"_index":820,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["senddirectmessagetouserexception",{"_index":2412,"title":{"classes/SendDirectMessageToUserException.html":{}},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["senddirectmessagetouserexception(guildid",{"_index":2797,"title":{},"body":{"controllers/UserController.html":{}}}],["senddirectmessagetouserexceptionfilter",{"_index":2421,"title":{"classes/SendDirectMessageToUserExceptionFilter.html":{}},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"coverage.html":{}}}],["sends",{"_index":2213,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["sent",{"_index":2684,"title":{},"body":{"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["separable",{"_index":3561,"title":{},"body":{"license.html":{}}}],["separate",{"_index":3494,"title":{},"body":{"license.html":{}}}],["separately",{"_index":3491,"title":{},"body":{"license.html":{}}}],["server",{"_index":665,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"index.html":{},"license.html":{}}}],["servers",{"_index":3236,"title":{},"body":{"license.html":{}}}],["serves",{"_index":3357,"title":{},"body":{"license.html":{}}}],["service",{"_index":2382,"title":{},"body":{"injectables/SelfService.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["servicing",{"_index":3858,"title":{},"body":{"license.html":{}}}],["set",{"_index":403,"title":{},"body":{"modules/BotModule.html":{},"controllers/ChannelController.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["set/update",{"_index":3117,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setadminroleid",{"_index":3139,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setauthor",{"_index":821,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["setcolor(colors.blue",{"_index":678,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["setcolor(colors.red",{"_index":715,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["setcustomid",{"_index":2141,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["setcustomid('adminroleid",{"_index":3140,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('answer",{"_index":794,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid('introchannelid",{"_index":3128,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('miscchannelid",{"_index":3131,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('modchannelid",{"_index":3134,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('modmessage",{"_index":2231,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["setcustomid('modrequestmessage",{"_index":2144,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["setcustomid('modroleid",{"_index":3137,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('openintrochannelid",{"_index":3121,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('question",{"_index":787,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid('unverifiedmemberroleid",{"_index":3147,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid('verifiedmemberroleid",{"_index":3143,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setcustomid(`closeticket",{"_index":2129,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["setcustomid(`community",{"_index":766,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setcustomid(`mumvoiceui",{"_index":2226,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["setdescription",{"_index":679,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModRequestFlow.html":{},"classes/TimeOutCommand.html":{}}}],["setdescription(`for",{"_index":710,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["setdescription(`user",{"_index":2824,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["setfirstmessageuicommand",{"_index":402,"title":{"classes/SetFirstMessageUICommand.html":{}},"body":{"modules/BotModule.html":{},"classes/SetFirstMessageUICommand.html":{},"coverage.html":{}}}],["setintrochannelid",{"_index":3127,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setlabel('antwort",{"_index":768,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setlabel('frage(nicht",{"_index":788,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setlabel('mod",{"_index":2148,"title":{},"body":{"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["setlabel('ticket",{"_index":2131,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["setmaxvalues(1",{"_index":3123,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmetadata(bot_event_key",{"_index":3955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(required_rank_key",{"_index":3984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setminvalues(0",{"_index":3124,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmiscchannelid",{"_index":3130,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmodchannelid",{"_index":3133,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setmodroleid",{"_index":3136,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setopenintrochannelid",{"_index":3120,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setplaceholder",{"_index":2232,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/initGuildCommand.html":{}}}],["setplaceholder('antwort",{"_index":796,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setplaceholder('schreibe",{"_index":2145,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["setrequired(false",{"_index":792,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setrequired(true",{"_index":795,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["sets",{"_index":1504,"title":{},"body":{"injectables/GuildService.html":{},"miscellaneous/variables.html":{}}}],["setslowmode",{"_index":536,"title":{},"body":{"controllers/ChannelController.html":{}}}],["setslowmode(guildid",{"_index":558,"title":{},"body":{"controllers/ChannelController.html":{}}}],["setstyle(buttonstyle.primary",{"_index":770,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{}}}],["setstyle(textinputstyle.paragraph",{"_index":790,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["settimeout(resolve",{"_index":1331,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["settings",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["settings.controller",{"_index":1600,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["settings.controller.ts",{"_index":1577,"title":{},"body":{"controllers/GuildSettingsController.html":{},"coverage.html":{}}}],["settings.controller.ts:26",{"_index":1581,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["settings.controller.ts:33",{"_index":1585,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["settings.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{}}}],["settings.module.ts",{"_index":1599,"title":{},"body":{"modules/GuildSettingsModule.html":{}}}],["settings.role.${key}.changed",{"_index":1644,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service",{"_index":383,"title":{},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{}}}],["settings.service.ts",{"_index":1601,"title":{},"body":{"injectables/GuildSettingsService.html":{},"coverage.html":{}}}],["settings.service.ts:11",{"_index":1612,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:16",{"_index":1615,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:31",{"_index":1626,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:41",{"_index":1630,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:45",{"_index":1628,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:49",{"_index":1623,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:53",{"_index":1617,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:57",{"_index":1632,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:61",{"_index":1625,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:65",{"_index":1619,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:68",{"_index":1621,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings.service.ts:71",{"_index":1634,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settings/dto/restricted",{"_index":2292,"title":{},"body":{"classes/RestrictedChannelDto.html":{},"coverage.html":{}}}],["settings/dto/settings.dto.ts",{"_index":2444,"title":{},"body":{"classes/SettingsDto.html":{},"coverage.html":{}}}],["settings/dto/settings.dto.ts:14",{"_index":2466,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:19",{"_index":2462,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:24",{"_index":2457,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:29",{"_index":2459,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:34",{"_index":2458,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:39",{"_index":2464,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:44",{"_index":2465,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:49",{"_index":2461,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:54",{"_index":2456,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:59",{"_index":2460,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/dto/settings.dto.ts:9",{"_index":2463,"title":{},"body":{"classes/SettingsDto.html":{}}}],["settings/events/settings",{"_index":1753,"title":{},"body":{"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"coverage.html":{}}}],["settings/guild",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["settings[key",{"_index":1646,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settingschanged",{"_index":1638,"title":{"classes/SettingsChanged.html":{}},"body":{"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"classes/SettingsChanged.html":{},"coverage.html":{}}}],["settingschanged(guildid",{"_index":1645,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["settingsdto",{"_index":1583,"title":{"classes/SettingsDto.html":{}},"body":{"controllers/GuildSettingsController.html":{},"classes/SettingsDto.html":{},"coverage.html":{}}}],["settingsservice",{"_index":861,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMemberEvents.html":{},"controllers/GuildSettingsController.html":{},"guards/IsUserUnlockedGuard.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["settitle('community",{"_index":784,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["settitle('mod",{"_index":2124,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["settitle('nutze",{"_index":2228,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["settitle('user",{"_index":2823,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["settitle('validation",{"_index":713,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["settitle('wfp",{"_index":676,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["settitle(`timeout",{"_index":2681,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["setunverifiedroleid",{"_index":3146,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["setup",{"_index":2640,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"classes/initGuildCommand.html":{}}}],["setupclientfactory",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["setvalue(question.question",{"_index":791,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["setverifiedmemberroleid",{"_index":3142,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["shall",{"_index":3434,"title":{},"body":{"license.html":{}}}],["share",{"_index":3195,"title":{},"body":{"license.html":{}}}],["shared",{"_index":3379,"title":{},"body":{"license.html":{}}}],["show",{"_index":2241,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/UserInfoUiCommand.html":{}}}],["shows",{"_index":3116,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["side",{"_index":3061,"title":{},"body":{"index.html":{}}}],["sign",{"_index":3922,"title":{},"body":{"license.html":{}}}],["significant",{"_index":3592,"title":{},"body":{"license.html":{}}}],["signoptions",{"_index":1893,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["similar",{"_index":3257,"title":{},"body":{"license.html":{}}}],["simultaneously",{"_index":3810,"title":{},"body":{"license.html":{}}}],["single",{"_index":3782,"title":{},"body":{"license.html":{}}}],["size",{"_index":1694,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/SelfService.html":{}}}],["skip",{"_index":358,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["slashcommandpipe",{"_index":752,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["sleep",{"_index":2806,"title":{},"body":{"controllers/UserController.html":{}}}],["slice(0",{"_index":2108,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["slowmode",{"_index":467,"title":{},"body":{"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["slowmodedisabled",{"_index":523,"title":{"classes/SlowmodeDisabled.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["slowmodedisabled(guildid",{"_index":604,"title":{},"body":{"controllers/ChannelController.html":{}}}],["slowmodeenabled",{"_index":516,"title":{"classes/SlowmodeEnabled.html":{}},"body":{"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["slowmodeenabled(guildid",{"_index":603,"title":{},"body":{"controllers/ChannelController.html":{}}}],["software",{"_index":3170,"title":{},"body":{"license.html":{}}}],["sold",{"_index":3574,"title":{},"body":{"license.html":{}}}],["sole",{"_index":3411,"title":{},"body":{"license.html":{}}}],["solely",{"_index":3425,"title":{},"body":{"license.html":{}}}],["soll",{"_index":2063,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["solutions",{"_index":3916,"title":{},"body":{"license.html":{}}}],["something",{"_index":2917,"title":{},"body":{"classes/UserToUser.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"modules/BotModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"interfaces/DiscordExecutionContext.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthGuard.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"modules/UserModule.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"index.html":{},"classes/initGuildCommand.html":{},"license.html":{}}}],["spare",{"_index":3525,"title":{},"body":{"license.html":{}}}],["speak",{"_index":3202,"title":{},"body":{"license.html":{}}}],["special",{"_index":2523,"title":{},"body":{"classes/SpecialCommand.html":{},"license.html":{},"properties.html":{}}}],["specialcommand",{"_index":410,"title":{"classes/SpecialCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/SpecialCommand.html":{},"coverage.html":{}}}],["specific",{"_index":1791,"title":{},"body":{"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["specifically",{"_index":3186,"title":{},"body":{"license.html":{}}}],["specified",{"_index":3341,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":3835,"title":{},"body":{"license.html":{}}}],["specify",{"_index":3839,"title":{},"body":{"license.html":{}}}],["spirit",{"_index":3827,"title":{},"body":{"license.html":{}}}],["split('\\n",{"_index":1669,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["sponsors",{"_index":3087,"title":{},"body":{"index.html":{}}}],["sql",{"_index":1473,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/.../bot",{"_index":3943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../channel",{"_index":3015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":3017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../has",{"_index":3946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../log.entry.dto.ts",{"_index":3942,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":3014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../menu",{"_index":3018,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../message",{"_index":3944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../parameter",{"_index":3016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plain",{"_index":3019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../reaction",{"_index":3950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../request",{"_index":3948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../requires",{"_index":3951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.controller.ts",{"_index":3949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.ts",{"_index":3952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tasks.service.ts",{"_index":3947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":3945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.ts",{"_index":3953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":201,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:13",{"_index":211,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":207,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auditlog/auditlog.controller.ts",{"_index":225,"title":{},"body":{"controllers/AuditLogController.html":{},"coverage.html":{}}}],["src/auditlog/auditlog.controller.ts:30",{"_index":233,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["src/auditlog/auditlog.events.ts",{"_index":2933,"title":{},"body":{"coverage.html":{}}}],["src/auditlog/auditlog.module",{"_index":2202,"title":{},"body":{"modules/ModerationModule.html":{}}}],["src/auditlog/auditlog.module.ts",{"_index":314,"title":{},"body":{"modules/AuditLogModule.html":{}}}],["src/auditlog/auditlog.service.ts",{"_index":318,"title":{},"body":{"injectables/AuditLogService.html":{},"coverage.html":{}}}],["src/auditlog/auditlog.service.ts:10",{"_index":325,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/auditlog.service.ts:25",{"_index":330,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/auditlog.service.ts:7",{"_index":322,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/auditlog/dto/audit",{"_index":285,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"coverage.html":{}}}],["src/auditlog/dto/log",{"_index":2035,"title":{},"body":{"classes/LogEntryDto.html":{},"coverage.html":{}}}],["src/auth/jwt/guards/jwt",{"_index":253,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildUserController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/jwt/guards/refresh",{"_index":2284,"title":{},"body":{"injectables/RefreshJwtGuard.html":{},"coverage.html":{}}}],["src/auth/jwt/jwt",{"_index":1836,"title":{},"body":{"controllers/JwtAuthController.html":{},"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt/refresh",{"_index":2285,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{},"coverage.html":{}}}],["src/bot/bot.module.ts",{"_index":379,"title":{},"body":{"modules/BotModule.html":{}}}],["src/bot/commands/add",{"_index":6,"title":{},"body":{"classes/AddRoleCommand.html":{},"coverage.html":{}}}],["src/bot/commands/clean",{"_index":649,"title":{},"body":{"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["src/bot/commands/community",{"_index":721,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"coverage.html":{}}}],["src/bot/commands/init",{"_index":2938,"title":{},"body":{"coverage.html":{},"classes/initGuildCommand.html":{}}}],["src/bot/commands/mod",{"_index":2203,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"coverage.html":{}}}],["src/bot/commands/ping.command.ts",{"_index":2249,"title":{},"body":{"classes/PingCommand.html":{},"coverage.html":{}}}],["src/bot/commands/ping.command.ts:10",{"_index":2251,"title":{},"body":{"classes/PingCommand.html":{}}}],["src/bot/commands/ping.command.ts:16",{"_index":2252,"title":{},"body":{"classes/PingCommand.html":{}}}],["src/bot/commands/special.command.ts",{"_index":2476,"title":{},"body":{"classes/SpecialCommand.html":{},"coverage.html":{}}}],["src/bot/commands/special.command.ts:16",{"_index":2499,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:27",{"_index":2510,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:33",{"_index":2487,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:41",{"_index":2513,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/special.command.ts:50",{"_index":2517,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["src/bot/commands/ticket",{"_index":2633,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["src/bot/commands/timeout.command.ts",{"_index":2650,"title":{},"body":{"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["src/bot/commands/timeout.command.ts:38",{"_index":2652,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["src/bot/commands/timeout.command.ts:46",{"_index":2656,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["src/bot/commands/unverify",{"_index":2693,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["src/bot/commands/user",{"_index":2423,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["src/bot/decorators/bot",{"_index":2941,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/dto/commmunity",{"_index":834,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["src/bot/dto/community",{"_index":846,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{},"coverage.html":{}}}],["src/bot/dto/mod",{"_index":2049,"title":{},"body":{"classes/ModAnnouncementDto.html":{},"coverage.html":{}}}],["src/bot/dto/user",{"_index":2857,"title":{},"body":{"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/explorers/event.explorer.ts",{"_index":1046,"title":{},"body":{"classes/Explorer.html":{},"coverage.html":{}}}],["src/bot/explorers/event.explorer.ts:15",{"_index":1057,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:34",{"_index":1054,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:38",{"_index":1059,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/explorers/event.explorer.ts:9",{"_index":1052,"title":{},"body":{"classes/Explorer.html":{}}}],["src/bot/filters/command",{"_index":701,"title":{},"body":{"classes/CommandValidationFilter.html":{},"coverage.html":{}}}],["src/bot/guards/is",{"_index":1826,"title":{},"body":{"guards/IsModalInteractionGuard.html":{},"coverage.html":{}}}],["src/bot/guards/member",{"_index":1257,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"coverage.html":{}}}],["src/bot/guards/message",{"_index":937,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/guards/reaction",{"_index":1261,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/bot/guards/user",{"_index":853,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"injectables/GuildMessageHandler.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["src/bot/interfaces/bot",{"_index":366,"title":{},"body":{"interfaces/BotEvent.html":{},"coverage.html":{}}}],["src/guild/events/guild",{"_index":1225,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"coverage.html":{}}}],["src/guild/events/interaction",{"_index":2064,"title":{},"body":{"classes/ModRequestFlow.html":{},"coverage.html":{}}}],["src/guild/events/message",{"_index":926,"title":{},"body":{"injectables/DmMessageHandler.html":{},"injectables/GuildMessageHandler.html":{},"coverage.html":{}}}],["src/guild/guild",{"_index":382,"title":{},"body":{"modules/BotModule.html":{},"interfaces/DiscordExecutionContext.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildRestrictedChannelController.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"controllers/GuildSettingsController.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/IsUserUnlockedGuard.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RestrictedChannelDto.html":{},"classes/SelfDto-1.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["src/guild/guild.controller.ts",{"_index":1191,"title":{},"body":{"controllers/GuildController.html":{},"coverage.html":{}}}],["src/guild/guild.controller.ts:16",{"_index":1197,"title":{},"body":{"controllers/GuildController.html":{}}}],["src/guild/guild.controller.ts:33",{"_index":1200,"title":{},"body":{"controllers/GuildController.html":{}}}],["src/guild/guild.module.ts",{"_index":1417,"title":{},"body":{"modules/GuildModule.html":{}}}],["src/guild/guild.service",{"_index":409,"title":{},"body":{"modules/BotModule.html":{},"classes/CleanWfpMember.html":{},"injectables/GuildMemberEvents.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["src/guild/guild.service.ts",{"_index":1449,"title":{},"body":{"injectables/GuildService.html":{},"coverage.html":{}}}],["src/guild/guild.service.ts:112",{"_index":1467,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:17",{"_index":1510,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:170",{"_index":1495,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:203",{"_index":1508,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:223",{"_index":1462,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:234",{"_index":1465,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:247",{"_index":1500,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:46",{"_index":1498,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/guild.service.ts:9",{"_index":1459,"title":{},"body":{"injectables/GuildService.html":{}}}],["src/guild/moderation/channel/channel.controller.ts",{"_index":530,"title":{},"body":{"controllers/ChannelController.html":{},"coverage.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:133",{"_index":541,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:55",{"_index":557,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:72",{"_index":553,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:85",{"_index":546,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/channel/channel.controller.ts:99",{"_index":560,"title":{},"body":{"controllers/ChannelController.html":{}}}],["src/guild/moderation/dto/channel.ts",{"_index":416,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"coverage.html":{}}}],["src/guild/moderation/dto/channel.ts:100",{"_index":450,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:108",{"_index":472,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:116",{"_index":457,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:125",{"_index":475,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:134",{"_index":444,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:143",{"_index":468,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:151",{"_index":433,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:162",{"_index":1180,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:171",{"_index":1188,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:180",{"_index":1186,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:189",{"_index":1181,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:198",{"_index":1189,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:207",{"_index":1184,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:21",{"_index":2248,"title":{},"body":{"classes/PermissionOverwrite.html":{}}}],["src/guild/moderation/dto/channel.ts:215",{"_index":1185,"title":{},"body":{"classes/GuildChannelEditOptions.html":{}}}],["src/guild/moderation/dto/channel.ts:27",{"_index":476,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:35",{"_index":438,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:44",{"_index":462,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:55",{"_index":448,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:66",{"_index":474,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:76",{"_index":454,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:84",{"_index":434,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/channel.ts:92",{"_index":440,"title":{},"body":{"classes/Channel.html":{}}}],["src/guild/moderation/dto/guild",{"_index":869,"title":{},"body":{"classes/DiscordGuildMember.html":{},"coverage.html":{}}}],["src/guild/moderation/dto/role.ts",{"_index":970,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/dto/role.ts:106",{"_index":2345,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:114",{"_index":2349,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:122",{"_index":2338,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:133",{"_index":992,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:143",{"_index":980,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:151",{"_index":1003,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:160",{"_index":983,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:170",{"_index":1002,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:181",{"_index":996,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:190",{"_index":991,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:203",{"_index":990,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:212",{"_index":1004,"title":{},"body":{"classes/EditRoleData.html":{}}}],["src/guild/moderation/dto/role.ts:26",{"_index":2339,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:34",{"_index":2342,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:42",{"_index":2350,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:50",{"_index":2343,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:58",{"_index":2346,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:66",{"_index":2337,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:74",{"_index":2340,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:82",{"_index":2348,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:90",{"_index":2347,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/role.ts:98",{"_index":2344,"title":{},"body":{"classes/RoleResponse.html":{}}}],["src/guild/moderation/dto/user.ts",{"_index":888,"title":{},"body":{"classes/DiscordUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/dto/user.ts:11",{"_index":917,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:19",{"_index":921,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:28",{"_index":909,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:35",{"_index":900,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:42",{"_index":911,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:49",{"_index":902,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:57",{"_index":903,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:65",{"_index":918,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:73",{"_index":912,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:81",{"_index":904,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:89",{"_index":898,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/dto/user.ts:97",{"_index":915,"title":{},"body":{"classes/DiscordUser.html":{}}}],["src/guild/moderation/events/channel.event.ts",{"_index":501,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"coverage.html":{}}}],["src/guild/moderation/events/channel.event.ts:22",{"_index":2475,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:30",{"_index":2469,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:31",{"_index":2468,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:32",{"_index":2467,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:40",{"_index":2470,"title":{},"body":{"classes/SlowmodeDisabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:48",{"_index":511,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:49",{"_index":510,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:5",{"_index":2474,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:50",{"_index":512,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:51",{"_index":509,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:52",{"_index":508,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:6",{"_index":2472,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:68",{"_index":514,"title":{},"body":{"classes/ChannelCleaned.html":{}}}],["src/guild/moderation/events/channel.event.ts:7",{"_index":2473,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/channel.event.ts:8",{"_index":2471,"title":{},"body":{"classes/SlowmodeEnabled.html":{}}}],["src/guild/moderation/events/user.events",{"_index":2601,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["src/guild/moderation/events/user.events.ts",{"_index":2716,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["src/guild/moderation/events/user.events.ts:100",{"_index":2852,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:108",{"_index":2855,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:109",{"_index":2854,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:110",{"_index":2853,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:118",{"_index":2856,"title":{},"body":{"classes/UserSendDMFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:15",{"_index":2721,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:21",{"_index":2838,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:22",{"_index":2837,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:23",{"_index":2836,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:31",{"_index":2839,"title":{},"body":{"classes/UserKickEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:37",{"_index":2904,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:38",{"_index":2902,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:39",{"_index":2903,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:40",{"_index":2901,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:5",{"_index":2720,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:54",{"_index":2905,"title":{},"body":{"classes/UserTimeOutEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:6",{"_index":2719,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:62",{"_index":2910,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:63",{"_index":2908,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:64",{"_index":2909,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:65",{"_index":2907,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:66",{"_index":2906,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:7",{"_index":2718,"title":{},"body":{"classes/UserBanEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:82",{"_index":2911,"title":{},"body":{"classes/UserTimeOutFailedEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:90",{"_index":2851,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:91",{"_index":2850,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/events/user.events.ts:92",{"_index":2849,"title":{},"body":{"classes/UserPurgeEvent.html":{}}}],["src/guild/moderation/moderation.module.ts",{"_index":2196,"title":{},"body":{"modules/ModerationModule.html":{}}}],["src/guild/moderation/role/role.controller.ts",{"_index":2296,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guild/moderation/role/role.controller.ts:119",{"_index":2310,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:58",{"_index":2313,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:75",{"_index":2305,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/role/role.controller.ts:96",{"_index":2317,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/guild/moderation/user/user.controller.ts",{"_index":2733,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/guild/moderation/user/user.controller.ts:103",{"_index":2741,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:122",{"_index":2748,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:141",{"_index":2760,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:180",{"_index":2756,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:58",{"_index":2745,"title":{},"body":{"controllers/UserController.html":{}}}],["src/guild/moderation/user/user.controller.ts:86",{"_index":2743,"title":{},"body":{"controllers/UserController.html":{}}}],["src/main.ts",{"_index":2956,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma.service",{"_index":40,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AuditLogModule.html":{},"injectables/AuditLogService.html":{},"modules/BotModule.html":{},"classes/CommunityQuestionCommand.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"modules/GuildSettingsModule.html":{},"injectables/GuildSettingsService.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"modules/JwtAuthModule.html":{},"classes/ModRequestFlow.html":{},"modules/ModerationModule.html":{},"classes/SetFirstMessageUICommand.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/initGuildCommand.html":{}}}],["src/prisma.service.ts",{"_index":2259,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:10",{"_index":2265,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:6",{"_index":2266,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/tasks/tasks.module.ts",{"_index":2555,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service",{"_index":1142,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{}}}],["src/tasks/tasks.service.ts",{"_index":2563,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/tasks.service.ts:128",{"_index":2582,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:173",{"_index":2588,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:27",{"_index":2572,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:41",{"_index":2591,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:60",{"_index":2574,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:80",{"_index":2578,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/user/self.controller.ts",{"_index":2352,"title":{},"body":{"controllers/SelfController.html":{},"coverage.html":{}}}],["src/user/self.controller.ts:21",{"_index":2359,"title":{},"body":{"controllers/SelfController.html":{}}}],["src/user/self.dto.ts",{"_index":1076,"title":{},"body":{"classes/Guild.html":{},"classes/SelfDto.html":{},"coverage.html":{}}}],["src/user/self.dto.ts:11",{"_index":2373,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:12",{"_index":2370,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:13",{"_index":2372,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:14",{"_index":2371,"title":{},"body":{"classes/SelfDto.html":{}}}],["src/user/self.dto.ts:5",{"_index":1080,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.dto.ts:6",{"_index":1082,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.dto.ts:7",{"_index":1081,"title":{},"body":{"classes/Guild.html":{}}}],["src/user/self.service",{"_index":1889,"title":{},"body":{"modules/JwtAuthModule.html":{},"injectables/JwtAuthService.html":{}}}],["src/user/self.service.ts",{"_index":2381,"title":{},"body":{"injectables/SelfService.html":{},"coverage.html":{}}}],["src/user/self.service.ts:13",{"_index":2387,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/self.service.ts:25",{"_index":2395,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/self.service.ts:48",{"_index":2389,"title":{},"body":{"injectables/SelfService.html":{}}}],["src/user/user.module.ts",{"_index":2843,"title":{},"body":{"modules/UserModule.html":{}}}],["src/util/decorators/parameter",{"_index":2963,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/decorators/request",{"_index":1684,"title":{},"body":{"controllers/GuildUserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/decorators/requires",{"_index":255,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/dto/log.entry.dto",{"_index":331,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["src/util/dto/log.entry.dto.ts",{"_index":1979,"title":{},"body":{"classes/LogEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/util/dto/log.entry.dto.ts:106",{"_index":1991,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:61",{"_index":1992,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:64",{"_index":1994,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:67",{"_index":1983,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:74",{"_index":1997,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:77",{"_index":1986,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:91",{"_index":2002,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/dto/log.entry.dto.ts:97",{"_index":2004,"title":{},"body":{"classes/LogEntry.html":{}}}],["src/util/exception/channel",{"_index":577,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"coverage.html":{}}}],["src/util/exception/guild",{"_index":1215,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"coverage.html":{}}}],["src/util/exception/send",{"_index":2413,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/util/functions/channel",{"_index":573,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/functions/get",{"_index":1381,"title":{},"body":{"injectables/GuildMessageHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/functions/menu",{"_index":940,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/ModRequestFlow.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/util/functions/plain",{"_index":2978,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/util/guards/has",{"_index":258,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildSettingsController.html":{},"guards/HasRequiredRank.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/interfaces/event",{"_index":515,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["standalone",{"_index":3937,"title":{},"body":{"properties.html":{}}}],["standard",{"_index":3337,"title":{},"body":{"license.html":{}}}],["standards",{"_index":3340,"title":{},"body":{"license.html":{}}}],["start",{"_index":3071,"title":{},"body":{"index.html":{},"license.html":{}}}],["start:dev",{"_index":3074,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":3076,"title":{},"body":{"index.html":{}}}],["started",{"_index":3054,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":3065,"title":{},"body":{"index.html":{}}}],["state",{"_index":3899,"title":{},"body":{"license.html":{}}}],["stated",{"_index":3397,"title":{},"body":{"license.html":{}}}],["statement",{"_index":3672,"title":{},"body":{"license.html":{}}}],["statements",{"_index":2929,"title":{},"body":{"coverage.html":{}}}],["stating",{"_index":3470,"title":{},"body":{"license.html":{}}}],["status",{"_index":586,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"license.html":{}}}],["stay",{"_index":3093,"title":{},"body":{"index.html":{}}}],["step",{"_index":2878,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["steps",{"_index":3215,"title":{},"body":{"license.html":{}}}],["still",{"_index":2580,"title":{},"body":{"injectables/TasksService.html":{}}}],["stop",{"_index":3027,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stopcb",{"_index":3021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["storage",{"_index":3501,"title":{},"body":{"license.html":{}}}],["store",{"_index":3982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strategy",{"_index":1969,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["streuselkuchen",{"_index":2485,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["string",{"_index":73,"title":{},"body":{"classes/AddRoleCommand.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringselectmenubuilder",{"_index":2091,"title":{},"body":{"classes/ModRequestFlow.html":{},"miscellaneous/functions.html":{}}}],["stringselectmenuinteraction",{"_index":2083,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["sub",{"_index":1917,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["subdividing",{"_index":3719,"title":{},"body":{"license.html":{}}}],["subject",{"_index":3712,"title":{},"body":{"license.html":{}}}],["sublicenses",{"_index":3752,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":3426,"title":{},"body":{"license.html":{}}}],["subprograms",{"_index":3382,"title":{},"body":{"license.html":{}}}],["subquery",{"_index":1487,"title":{},"body":{"injectables/GuildService.html":{}}}],["subquery.channelid",{"_index":1488,"title":{},"body":{"injectables/GuildService.html":{}}}],["subsection",{"_index":3535,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":3587,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":3717,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":551,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["such",{"_index":2597,"title":{},"body":{"injectables/TasksService.html":{},"license.html":{}}}],["sue",{"_index":3766,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":3596,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":3039,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sum",{"_index":1554,"title":{},"body":{"injectables/GuildService.html":{}}}],["summary",{"_index":585,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":1217,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["super(`channel",{"_index":633,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{}}}],["supplement",{"_index":3626,"title":{},"body":{"license.html":{}}}],["support",{"_index":3088,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{}}}],["supports",{"_index":3544,"title":{},"body":{"license.html":{}}}],["sure",{"_index":1324,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"license.html":{}}}],["surrender",{"_index":3805,"title":{},"body":{"license.html":{}}}],["survive",{"_index":3671,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":3872,"title":{},"body":{"license.html":{}}}],["svg",{"_index":3926,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2537,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/initGuildCommand.html":{}}}],["switchtohttp",{"_index":1811,"title":{},"body":{"guards/HasRequiredRank.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":894,"title":{},"body":{"classes/DiscordUser.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["system.command",{"_index":414,"title":{},"body":{"modules/BotModule.html":{}}}],["system.command.ts",{"_index":2634,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["system.command.ts:21",{"_index":2636,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["system.command.ts:28",{"_index":2638,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["t",{"_index":3051,"title":{},"body":{"miscellaneous/functions.html":{}}}],["table",{"_index":2982,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2981,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":1014,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["take",{"_index":361,"title":{},"body":{"injectables/AuditLogService.html":{},"license.html":{}}}],["takes",{"_index":2392,"title":{},"body":{"injectables/SelfService.html":{}}}],["tangible",{"_index":3567,"title":{},"body":{"license.html":{}}}],["target",{"_index":1998,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/functions.html":{}}}],["targetid",{"_index":282,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{}}}],["targets",{"_index":2033,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["targettype",{"_index":250,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["targettypes",{"_index":306,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targettypes)[number",{"_index":2034,"title":{},"body":{"classes/LogEntry.html":{}}}],["targettypes})@isoptional()@isstring()@isin(targettypes",{"_index":298,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["tasks",{"_index":2556,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["tasks.service",{"_index":2562,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["tasksmodule",{"_index":107,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":1139,"title":{"injectables/TasksService.html":{}},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["technological",{"_index":3437,"title":{},"body":{"license.html":{}}}],["telling",{"_index":2356,"title":{},"body":{"controllers/SelfController.html":{}}}],["tells",{"_index":3325,"title":{},"body":{"license.html":{}}}],["template",{"_index":1662,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["templateanswer",{"_index":2481,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["templateanswer(category",{"_index":2514,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["templatemessage",{"_index":1611,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["templatemessage(message",{"_index":1633,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["term",{"_index":3395,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":3677,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":3695,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":3686,"title":{},"body":{"license.html":{}}}],["termination",{"_index":3674,"title":{},"body":{"license.html":{}}}],["terms",{"_index":3264,"title":{},"body":{"license.html":{}}}],["test",{"_index":3079,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":3082,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":3081,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3078,"title":{},"body":{"index.html":{}}}],["text",{"_index":578,"title":{},"body":{"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CommunityQuestionDto.html":{},"coverage.html":{}}}],["textinputbuilder",{"_index":747,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["textinputmodaldata",{"_index":848,"title":{},"body":{"classes/CommunityQuestionFormDto.html":{}}}],["textinputstyle",{"_index":748,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["thanks",{"_index":3086,"title":{},"body":{"index.html":{}}}],["then((guildusers",{"_index":2409,"title":{},"body":{"injectables/SelfService.html":{}}}],["then((isavailable",{"_index":1564,"title":{},"body":{"injectables/GuildService.html":{}}}],["then((it",{"_index":1691,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["then((result",{"_index":269,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["then(async",{"_index":2709,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["therefore",{"_index":2669,"title":{},"body":{"classes/TimeOutCommand.html":{},"license.html":{}}}],["things",{"_index":3210,"title":{},"body":{"license.html":{}}}],["third",{"_index":3462,"title":{},"body":{"license.html":{}}}],["thirtydaysago",{"_index":1535,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["thirtydaysago.setdate(thirtydaysago.getdate",{"_index":1536,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["this.$connect",{"_index":2267,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":2268,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._addmembertochanneloverwrite",{"_index":1568,"title":{},"body":{"injectables/GuildService.html":{}}}],["this._fetchguilds(userid",{"_index":2401,"title":{},"body":{"injectables/SelfService.html":{}}}],["this._getguildidfromselectmenu(interaction",{"_index":2170,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this._getmessage(firstmessageid",{"_index":2819,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this._ismemberadmin(member.id",{"_index":1770,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._ismembermod(member.id",{"_index":1771,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._ismemberverified(member.id",{"_index":1772,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this._removememberfromchanneloverwrite",{"_index":1566,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.addmember(member.id",{"_index":1775,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.addmembers(guild.id",{"_index":1754,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.addmembers(payload.guildid",{"_index":1778,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.auditlogservice",{"_index":267,"title":{},"body":{"controllers/AuditLogController.html":{}}}],["this.authservice.getuserfromcode(code",{"_index":1869,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.authservice.login(await",{"_index":1868,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.authservice.refreshtoken(req.user",{"_index":1865,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["this.before",{"_index":526,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.boteventdecorator(provider",{"_index":1065,"title":{},"body":{"classes/Explorer.html":{}}}],["this.cakes.length",{"_index":2549,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.cakes[math.ceil(math.random",{"_index":2548,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.channelid",{"_index":519,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.client",{"_index":2181,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this.client.channels.fetch(channel_id",{"_index":1569,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.client.guilds",{"_index":1689,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["this.client.guilds.cache",{"_index":1354,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["this.client.guilds.cache.foreach(async",{"_index":1287,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/TasksService.html":{}}}],["this.client.guilds.fetch",{"_index":1286,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{}}}],["this.client.guilds.fetch(baseinteraction.guildid).then((guild",{"_index":2702,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["this.client.guilds.fetch(eventargs[0].guildid",{"_index":818,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.client.guilds.fetch(guild_id)).members.fetch(user_id",{"_index":1779,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.client.guilds.fetch(guildid",{"_index":587,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["this.client.guilds.fetch(guildid)).channels.fetch(key",{"_index":1209,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.client.guilds.fetch(guildid).then(async",{"_index":2832,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this.client.guilds.fetch(reaction.message.guildid",{"_index":1311,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.client.guilds.fetch(request.user.guildid",{"_index":2774,"title":{},"body":{"controllers/UserController.html":{}}}],["this.client.guilds.fetch(ticket.guildid",{"_index":2625,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.client.on(metadata",{"_index":1071,"title":{},"body":{"classes/Explorer.html":{}}}],["this.client.user.avatarurl",{"_index":824,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["this.client.user.username",{"_index":822,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/TimeOutCommand.html":{}}}],["this.client.ws.ping",{"_index":2257,"title":{},"body":{"classes/PingCommand.html":{}}}],["this.coffees.length",{"_index":2546,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.coffees[math.ceil(math.random",{"_index":2545,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.configservice.get('discord_callback_url",{"_index":1939,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('discord_oauth_client_id",{"_index":1933,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('discord_oauth_secret",{"_index":1935,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":1920,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_issuer",{"_index":1922,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_refresh_expiration",{"_index":1925,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":1926,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.database.attachment.createmany",{"_index":1757,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.autodeletechannels.findmany",{"_index":1156,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.autodeletechannels.upsert",{"_index":1158,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.guild.findmany",{"_index":1160,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.database.guild.upsert",{"_index":1282,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{}}}],["this.database.guilduser.delete",{"_index":1762,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.findmany",{"_index":1761,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.findunique",{"_index":1352,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["this.database.guilduser.update",{"_index":1766,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.guilduser.upsert",{"_index":1755,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.lockdownrolebackup",{"_index":2708,"title":{},"body":{"classes/UnverifyByRoleCommand.html":{}}}],["this.database.lockdownrolebackup.delete",{"_index":78,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{}}}],["this.database.lockdownrolebackup.findunique",{"_index":63,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/GuildMemberEvents.html":{}}}],["this.database.messagemetadata.create",{"_index":1756,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.count",{"_index":1765,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.create",{"_index":1759,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.messages.groupby",{"_index":1538,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.database.reaction.createmany",{"_index":1758,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.restrictedchannels.findmany",{"_index":1446,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.restrictedchannels.findunique",{"_index":1444,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.restrictedchannels.upsert",{"_index":1445,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["this.database.settings.findunique",{"_index":1649,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.database.settings.update",{"_index":1648,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.database.user.delete",{"_index":1764,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.database.user.upsert",{"_index":1776,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.discord.guilds.fetch(guilduser.guildid",{"_index":2411,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.discord.users.fetch(userid",{"_index":2400,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.duration",{"_index":2727,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.enabled",{"_index":520,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.error",{"_index":2728,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.error.message",{"_index":2730,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.eventemitter.emit",{"_index":2665,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["this.eventemitter.emitasync",{"_index":601,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildSettingsService.html":{},"controllers/UserController.html":{}}}],["this.eventtype",{"_index":2441,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["this.externalcontextcreator.create",{"_index":1069,"title":{},"body":{"classes/Explorer.html":{}}}],["this.getrank(member",{"_index":1774,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.getsettings(guildid).then((it",{"_index":1653,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.getwelcomemessageformat(message.guildid",{"_index":1664,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["this.guildautodeletechannelservice.get(guildid",{"_index":1112,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildautodeletechannelservice.get(guildid).then",{"_index":1114,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildautodeletechannelservice.upsert",{"_index":1118,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["this.guildid",{"_index":518,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.guildservice.averagemessagesperchannellastmonth(guildid",{"_index":1203,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.guildservice.averagemessagesperdaylastmonth(guildid",{"_index":1211,"title":{},"body":{"controllers/GuildController.html":{}}}],["this.guildservice.cleanwfpmembers",{"_index":672,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["this.guildservice.updatechannelpermissions(user",{"_index":2612,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.guildservice.upsertguild(guild.id",{"_index":1288,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.addmember(member.id",{"_index":1295,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.addmembers(guild.id",{"_index":1290,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.deleteone(member.id",{"_index":1298,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.findall(undefined",{"_index":2166,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this.guilduserservice.getguilduser",{"_index":1304,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.getrank(newmember",{"_index":1346,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.getrank(oldmember",{"_index":1344,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.insertmessage",{"_index":1384,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.updatemessagecountbucket",{"_index":1400,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["this.guilduserservice.upsert(newmember.id",{"_index":1348,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.guilduserservice.upsert(user.userid",{"_index":1308,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.hashandlermethod(provider",{"_index":1066,"title":{},"body":{"classes/Explorer.html":{}}}],["this.http",{"_index":1929,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.initiatemodrequestflow(interaction",{"_index":2165,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this.jwtservice.sign(payload",{"_index":1919,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.logger",{"_index":616,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["this.logger.debug(`found",{"_index":2765,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.error",{"_index":2808,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.error((e",{"_index":967,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["this.logger.error(e",{"_index":1303,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/ModRequestFlow.html":{}}}],["this.logger.log",{"_index":588,"title":{},"body":{"controllers/ChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"controllers/UserController.html":{}}}],["this.logger.log(`adding",{"_index":1292,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.logger.log(`banned",{"_index":2781,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.log(`edited",{"_index":598,"title":{},"body":{"controllers/ChannelController.html":{}}}],["this.logger.log(`kicked",{"_index":2788,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.log(`purging",{"_index":2801,"title":{},"body":{"controllers/UserController.html":{}}}],["this.logger.warn",{"_index":1948,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.messagesdeleted",{"_index":525,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.possibleanswers[0",{"_index":2539,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[1",{"_index":2547,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[2",{"_index":2550,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.possibleanswers[3",{"_index":2551,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.prisma.guilduser",{"_index":2407,"title":{},"body":{"injectables/SelfService.html":{}}}],["this.prismaserver.settings.findunique",{"_index":3119,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["this.prismaserver.settings.update",{"_index":3157,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["this.prismaservice.auditlog.count",{"_index":353,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.auditlog.create",{"_index":333,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["this.prismaservice.auditlog.findmany",{"_index":354,"title":{},"body":{"injectables/AuditLogService.html":{}}}],["this.prismaservice.guildquestion.create",{"_index":763,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestion.findunique",{"_index":779,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestion.update",{"_index":811,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guildquestionanswer.create",{"_index":815,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["this.prismaservice.guilduser.findunique",{"_index":1814,"title":{},"body":{"guards/HasRequiredRank.html":{},"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.guilduser.update",{"_index":2433,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["this.prismaservice.messages.count",{"_index":2821,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["this.prismaservice.tickets.create",{"_index":2121,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this.prismaservice.tickets.findmany",{"_index":2623,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prismaservice.tickets.findunique",{"_index":2152,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["this.prismaservice.tickets.update",{"_index":2158,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["this.reason",{"_index":2722,"title":{},"body":{"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.reflector.getallandoverride",{"_index":1807,"title":{},"body":{"guards/HasRequiredRank.html":{}}}],["this.restrictedchannelservice",{"_index":1563,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.restrictedchannelservice.getall(user.guildid).then((channels",{"_index":1561,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.seconds",{"_index":521,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{}}}],["this.selfservice.fetchself(userid",{"_index":2369,"title":{},"body":{"controllers/SelfController.html":{}}}],["this.settings.getadminroleid(guild_id)).tostring",{"_index":1785,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settings.getmodroleid(guild_id)).tostring",{"_index":1783,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settings.getverifiedmemberroleid(guild_id)).tostring",{"_index":1781,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.settingsservice.editsettings(guildid",{"_index":1595,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["this.settingsservice.getguilduser",{"_index":2280,"title":{},"body":{"guards/ReactedMemberIsModOrHigherGuard.html":{}}}],["this.settingsservice.getopenintrochannelid",{"_index":1336,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getsettings(guildid",{"_index":1592,"title":{},"body":{"controllers/GuildSettingsController.html":{}}}],["this.settingsservice.getunverifiedmemberroleid",{"_index":1334,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getverifiedmemberroleid",{"_index":1317,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.settingsservice.getverifiedmemberroleid(message.guildid",{"_index":867,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{}}}],["this.settingsservice.templatemessage",{"_index":1338,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["this.tasksservice.createdynamicscheduledjob",{"_index":1163,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{}}}],["this.templateanswer(dto.category",{"_index":2532,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["this.upsert(userid",{"_index":1777,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["this.upsertguild(guild.id",{"_index":1575,"title":{},"body":{"injectables/GuildService.html":{}}}],["this.userid",{"_index":527,"title":{},"body":{"classes/ChannelCleaned.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["this.userservice.findall(guild.id)).foreach",{"_index":2608,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.userservice.getguilduser(userid",{"_index":1688,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["this.userservice.updatemessagecountbucket(user.userid",{"_index":2611,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.usersservice.fetchself(userid",{"_index":1927,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.validateuser(data.id",{"_index":1960,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["this.value",{"_index":2440,"title":{},"body":{"classes/SettingsChanged.html":{}}}],["those",{"_index":2393,"title":{},"body":{"injectables/SelfService.html":{},"license.html":{}}}],["though",{"_index":3629,"title":{},"body":{"license.html":{}}}],["thread",{"_index":473,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["threads",{"_index":426,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["three",{"_index":3523,"title":{},"body":{"license.html":{}}}],["through",{"_index":3313,"title":{},"body":{"license.html":{}}}],["throw",{"_index":617,"title":{},"body":{"controllers/ChannelController.html":{},"classes/Explorer.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildSettingsService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["thrown",{"_index":622,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/EventToLog.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["thus",{"_index":3417,"title":{},"body":{"license.html":{}}}],["ticket",{"_index":2101,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{}}}],["ticket.closed",{"_index":2153,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["ticket.ticketid",{"_index":2130,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["ticket.userid",{"_index":2631,"title":{},"body":{"injectables/TasksService.html":{}}}],["ticketid",{"_index":2122,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["tickets",{"_index":2622,"title":{},"body":{"injectables/TasksService.html":{}}}],["tickets.foreach(async",{"_index":2624,"title":{},"body":{"injectables/TasksService.html":{}}}],["ticketsystem",{"_index":2639,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["ticketsystemsetupcommand",{"_index":412,"title":{"classes/TicketSystemSetupCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/TicketSystemSetupCommand.html":{},"coverage.html":{}}}],["time",{"_index":307,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/DiscordGuildMember.html":{},"classes/LogEntryDto.html":{},"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["time'})@isoptional",{"_index":295,"title":{},"body":{"classes/AuditLogFilterDto.html":{}}}],["timed",{"_index":2618,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["timeout",{"_index":2029,"title":{},"body":{"classes/LogEntry.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/variables.html":{}}}],["timeout.dto",{"_index":2657,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["timeout.dto.ts",{"_index":2858,"title":{},"body":{"classes/UserTimeOutDto.html":{},"coverage.html":{}}}],["timeout.dto.ts:16",{"_index":2870,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout.dto.ts:27",{"_index":2869,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout.dto.ts:72",{"_index":2868,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["timeout_expired",{"_index":2028,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["timeoutcommand",{"_index":384,"title":{"classes/TimeOutCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/TimeOutCommand.html":{},"coverage.html":{}}}],["timeouted",{"_index":2581,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["timeouts",{"_index":2577,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["timeoutuser",{"_index":2738,"title":{},"body":{"controllers/UserController.html":{}}}],["timeoutuser(guildid",{"_index":2757,"title":{},"body":{"controllers/UserController.html":{}}}],["timestamp",{"_index":429,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{}}}],["timezone",{"_index":1178,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/TasksService.html":{}}}],["todo",{"_index":2784,"title":{},"body":{"controllers/UserController.html":{}}}],["toformattedlog",{"_index":506,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["toformattedlog(logger",{"_index":513,"title":{},"body":{"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{}}}],["toisostring",{"_index":2796,"title":{},"body":{"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{}}}],["token",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthService.html":{}}}],["token.strategy",{"_index":1887,"title":{},"body":{"modules/JwtAuthModule.html":{}}}],["token.strategy.ts",{"_index":2286,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:10",{"_index":2287,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["token.strategy.ts:19",{"_index":2288,"title":{},"body":{"injectables/RefreshJwtStrategy.html":{}}}],["tolocalestring",{"_index":2620,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{}}}],["tonimsgstobird",{"_index":1368,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["tonimsgstobird(message",{"_index":1374,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["tools",{"_index":3373,"title":{},"body":{"license.html":{}}}],["topic",{"_index":427,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["tostring",{"_index":2673,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["total",{"_index":270,"title":{},"body":{"controllers/AuditLogController.html":{},"injectables/AuditLogService.html":{}}}],["touch",{"_index":3094,"title":{},"body":{"index.html":{}}}],["touser",{"_index":2530,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["touser.id",{"_index":2533,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["touserid",{"_index":2516,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["trade",{"_index":3659,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":3658,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":3660,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":3602,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1980,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["transferred",{"_index":3604,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":3715,"title":{},"body":{"license.html":{}}}],["transform",{"_index":2859,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["transformer",{"_index":1107,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{},"controllers/GuildUserController.html":{},"classes/UserTimeOutDto.html":{},"dependencies.html":{}}}],["transformers",{"_index":827,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"properties.html":{}}}],["transmission",{"_index":3556,"title":{},"body":{"license.html":{}}}],["treated",{"_index":3628,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":3443,"title":{},"body":{"license.html":{}}}],["tries",{"_index":2415,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["triggered",{"_index":2419,"title":{},"body":{"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{}}}],["true",{"_index":77,"title":{},"body":{"classes/AddRoleCommand.html":{},"modules/AppModule.html":{},"injectables/AuditLogService.html":{},"controllers/ChannelController.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"classes/RoleResponse.html":{},"classes/SetFirstMessageUICommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{},"miscellaneous/variables.html":{}}}],["true})@isdatestring",{"_index":2860,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["true})@isstring",{"_index":840,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/ModAnnouncementDto.html":{}}}],["try",{"_index":74,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{}}}],["trying",{"_index":1954,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["twitter",{"_index":3100,"title":{},"body":{"index.html":{}}}],["two",{"_index":3214,"title":{},"body":{"license.html":{}}}],["twoweekdate",{"_index":1515,"title":{},"body":{"injectables/GuildService.html":{}}}],["tyep",{"_index":1359,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["type",{"_index":22,"title":{},"body":{"classes/AddRoleCommand.html":{},"injectables/AppService.html":{},"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"injectables/AuditLogService.html":{},"interfaces/BotEvent.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"classes/CommunityQuestionDto.html":{},"classes/CommunityQuestionFormDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/DmMessageHandler.html":{},"classes/EditRoleData.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/Guild.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"classes/GuildChannelEditOptions.html":{},"controllers/GuildController.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"controllers/GuildSettingsController.html":{},"injectables/GuildSettingsService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"guards/IsModalInteractionGuard.html":{},"guards/IsUserUnlockedGuard.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/LogEntry.html":{},"classes/LogEntryDto.html":{},"guards/MessageFromUserGuard.html":{},"guards/MessageIsDmGuard.html":{},"classes/ModAnnouncementDto.html":{},"classes/ModRequestFlow.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/PermissionOverwrite.html":{},"classes/PingCommand.html":{},"injectables/PrismaService.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/RestrictedChannelDto.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SettingsChanged.html":{},"classes/SettingsDto.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TicketSystemSetupCommand.html":{},"classes/TimeOutCommand.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutDto.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"classes/UserToUser.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"classes/initGuildCommand.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":2976,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typealiases",{"_index":3940,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1074,"title":{},"body":{"classes/Explorer.html":{},"classes/LogEntry.html":{}}}],["typeofattachments",{"_index":1410,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["typescript",{"_index":3064,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typical",{"_index":3581,"title":{},"body":{"license.html":{}}}],["ui.command",{"_index":401,"title":{},"body":{"modules/BotModule.html":{}}}],["ui.command.ts",{"_index":2424,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["ui.command.ts:16",{"_index":2426,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["ui.command.ts:18",{"_index":2812,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["ui.command.ts:24",{"_index":2429,"title":{},"body":{"classes/SetFirstMessageUICommand.html":{}}}],["ui.command.ts:26",{"_index":2816,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["ui.command.ts:80",{"_index":2814,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["um",{"_index":961,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["umarmen",{"_index":2923,"title":{},"body":{"classes/UserToUser.html":{},"miscellaneous/variables.html":{}}}],["umarmung",{"_index":2509,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["unauthorizedexception",{"_index":1802,"title":{},"body":{"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{}}}],["und",{"_index":950,"title":{},"body":{"injectables/DmMessageHandler.html":{},"classes/LogEntry.html":{}}}],["undefined",{"_index":348,"title":{},"body":{"injectables/AuditLogService.html":{},"classes/Channel.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionDto.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{},"classes/ModAnnouncementDto.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{},"classes/SelfDto.html":{},"controllers/UserController.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"classes/initGuildCommand.html":{}}}],["undefined.ts",{"_index":2964,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["under",{"_index":3262,"title":{},"body":{"license.html":{}}}],["unicodeemoji",{"_index":975,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":3077,"title":{},"body":{"index.html":{}}}],["unkickablemembers",{"_index":1531,"title":{},"body":{"injectables/GuildService.html":{}}}],["unkickablemembers.push(member",{"_index":1534,"title":{},"body":{"injectables/GuildService.html":{}}}],["unknown",{"_index":327,"title":{},"body":{"injectables/AuditLogService.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildAutoDeleteChannelController.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"controllers/GuildController.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"controllers/JwtAuthController.html":{},"injectables/JwtAuthService.html":{},"injectables/JwtAuthStrategy.html":{},"classes/ModRequestFlow.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/UserInfoUiCommand.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":3590,"title":{},"body":{"license.html":{}}}],["unlimited",{"_index":3401,"title":{},"body":{"license.html":{}}}],["unlocked",{"_index":1297,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildUserService.html":{}}}],["unlocked.guard",{"_index":1379,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["unlocked.guard.ts",{"_index":854,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{},"guards/IsUserUnlockedGuard.html":{},"coverage.html":{}}}],["unlocked.guard.ts:11",{"_index":857,"title":{},"body":{"interfaces/DiscordExecutionContext.html":{}}}],["unlocked.guard.ts:14",{"_index":1833,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{}}}],["unlocked.guard.ts:19",{"_index":1834,"title":{},"body":{"guards/IsUserUnlockedGuard.html":{}}}],["unlockuser",{"_index":1231,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["unlockuser(reaction",{"_index":1248,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["unmodified",{"_index":3292,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":3430,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":3624,"title":{},"body":{"license.html":{}}}],["until",{"_index":2619,"title":{},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["unverified",{"_index":1327,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/initGuildCommand.html":{}}}],["unverifiedmemberroleid",{"_index":2452,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["unverifybyrolecommand",{"_index":2692,"title":{"classes/UnverifyByRoleCommand.html":{}},"body":{"classes/UnverifyByRoleCommand.html":{},"coverage.html":{}}}],["up",{"_index":1280,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{}}}],["update",{"_index":1159,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"classes/LogEntry.html":{},"classes/ModRequestFlow.html":{},"controllers/RoleController.html":{}}}],["updateautodeletechannel",{"_index":1094,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["updateautodeletechannel(guildid",{"_index":1100,"title":{},"body":{"controllers/GuildAutoDeleteChannelController.html":{}}}],["updatechannelpermissions",{"_index":1455,"title":{},"body":{"injectables/GuildService.html":{}}}],["updatechannelpermissions(user",{"_index":1507,"title":{},"body":{"injectables/GuildService.html":{}}}],["updated",{"_index":995,"title":{},"body":{"classes/EditRoleData.html":{},"controllers/RoleController.html":{},"classes/RoleResponse.html":{}}}],["updated'})@apiresponse({status",{"_index":2316,"title":{},"body":{"controllers/RoleController.html":{}}}],["updated/created",{"_index":499,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["updatemessagecountbucket",{"_index":1716,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["updatemessagecountbucket(userid",{"_index":1749,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["updaterank",{"_index":1232,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["updaterank(oldmember",{"_index":1251,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["updaterole",{"_index":2300,"title":{},"body":{"controllers/RoleController.html":{}}}],["updaterole(guildid",{"_index":2314,"title":{},"body":{"controllers/RoleController.html":{}}}],["updates",{"_index":1506,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"license.html":{}}}],["upsert",{"_index":1147,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildUserService.html":{}}}],["upsert(guildid",{"_index":1152,"title":{},"body":{"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildRestrictedChannelService.html":{}}}],["upsert(userid",{"_index":1751,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["upsertguild",{"_index":1456,"title":{},"body":{"injectables/GuildService.html":{}}}],["upsertguild(guildid",{"_index":1509,"title":{},"body":{"injectables/GuildService.html":{}}}],["url",{"_index":825,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"injectables/GuildMessageHandler.html":{},"classes/RoleResponse.html":{}}}],["urlencoded",{"_index":1946,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["urlsearchparams",{"_index":1931,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["usable",{"_index":1665,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["use",{"_index":2754,"title":{},"body":{"controllers/UserController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":634,"title":{},"body":{"classes/ChannelNotTextBasedException.html":{},"classes/ChannelNotTextBasedExceptionFilter.html":{},"interfaces/EventToLog.html":{},"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"guards/HasRequiredRank.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"modules/UserModule.html":{},"miscellaneous/functions.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["usefilters",{"_index":2520,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["usefilters(commandvalidationfilter",{"_index":2529,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["useful",{"_index":3906,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"controllers/GuildController.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/JwtAuthController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["useguards(ismodalinteractionguard",{"_index":804,"title":{},"body":{"classes/CommunityQuestionCommand.html":{}}}],["useguards(jwtauthguard",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuditLogController.html":{},"controllers/ChannelController.html":{},"controllers/GuildController.html":{},"controllers/GuildSettingsController.html":{},"controllers/GuildUserController.html":{},"controllers/RoleController.html":{},"controllers/SelfController.html":{},"controllers/UserController.html":{}}}],["useguards(messagefromuserguard",{"_index":1383,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["useguards(messageisdmguard",{"_index":943,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["useguards(refreshjwtguard",{"_index":1863,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["useguards(refreshjwtguard)@apiheader({name",{"_index":1846,"title":{},"body":{"controllers/JwtAuthController.html":{}}}],["user",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"classes/Channel.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/GuildChannelEditOptions.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildRestrictedChannelService.html":{},"injectables/GuildService.html":{},"injectables/GuildSettingsService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/LogEntry.html":{},"classes/PermissionOverwrite.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"injectables/RefreshJwtStrategy.html":{},"controllers/SelfController.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"modules/UserModule.html":{},"classes/UserTimeOutDto.html":{},"classes/UserToUser.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user.ban",{"_index":2782,"title":{},"body":{"controllers/UserController.html":{}}}],["user.controller",{"_index":1703,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["user.controller.ts",{"_index":1677,"title":{},"body":{"controllers/GuildUserController.html":{},"coverage.html":{}}}],["user.controller.ts:19",{"_index":1681,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["user.decorator",{"_index":1685,"title":{},"body":{"controllers/GuildUserController.html":{},"controllers/SelfController.html":{}}}],["user.decorator.ts",{"_index":2966,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":2519,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["user.dto.ts",{"_index":2912,"title":{},"body":{"classes/UserToUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:21",{"_index":2918,"title":{},"body":{"classes/UserToUser.html":{}}}],["user.dto.ts:28",{"_index":2916,"title":{},"body":{"classes/UserToUser.html":{}}}],["user.guard",{"_index":1378,"title":{},"body":{"injectables/GuildMessageHandler.html":{}}}],["user.guard.ts",{"_index":2043,"title":{},"body":{"guards/MessageFromUserGuard.html":{},"coverage.html":{}}}],["user.guard.ts:5",{"_index":2044,"title":{},"body":{"guards/MessageFromUserGuard.html":{}}}],["user.guildid",{"_index":2168,"title":{},"body":{"classes/ModRequestFlow.html":{},"injectables/TasksService.html":{}}}],["user.id",{"_index":1353,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"classes/TimeOutCommand.html":{}}}],["user.kick",{"_index":2789,"title":{},"body":{"controllers/UserController.html":{}}}],["user.messagecountbucket",{"_index":1447,"title":{},"body":{"injectables/GuildRestrictedChannelService.html":{}}}],["user.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildModule.html":{}}}],["user.module.ts",{"_index":1702,"title":{},"body":{"modules/GuildUserModule.html":{}}}],["user.purge",{"_index":2809,"title":{},"body":{"controllers/UserController.html":{}}}],["user.rank",{"_index":1307,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"guards/HasRequiredRank.html":{},"injectables/TasksService.html":{}}}],["user.send",{"_index":2670,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.send.failed",{"_index":2679,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.service",{"_index":1144,"title":{},"body":{"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["user.service.ts",{"_index":1704,"title":{},"body":{"injectables/GuildUserService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["user.service.ts:100",{"_index":1750,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:122",{"_index":1743,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:137",{"_index":1736,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:150",{"_index":1728,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:163",{"_index":1726,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:177",{"_index":1746,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:18",{"_index":1717,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:181",{"_index":1724,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:189",{"_index":1722,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:197",{"_index":1720,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:26",{"_index":1748,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:33",{"_index":1734,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:42",{"_index":1752,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:54",{"_index":1741,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:78",{"_index":1730,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.service.ts:89",{"_index":1732,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["user.timeout(date",{"_index":2662,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.timeout.created",{"_index":2690,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["user.timeout.failed",{"_index":2666,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.user.username",{"_index":2682,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["user.userid",{"_index":1928,"title":{},"body":{"injectables/JwtAuthService.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["user.userid.tostring",{"_index":1567,"title":{},"body":{"injectables/GuildService.html":{}}}],["user/dto/self.dto",{"_index":1682,"title":{},"body":{"controllers/GuildUserController.html":{}}}],["user/dto/self.dto.ts",{"_index":2374,"title":{},"body":{"classes/SelfDto-1.html":{},"coverage.html":{}}}],["user/dto/self.dto.ts:5",{"_index":2380,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:6",{"_index":2376,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:7",{"_index":2379,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:8",{"_index":2375,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/dto/self.dto.ts:9",{"_index":2377,"title":{},"body":{"classes/SelfDto-1.html":{}}}],["user/guild",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"modules/GuildModule.html":{},"controllers/GuildUserController.html":{},"modules/GuildUserModule.html":{},"injectables/GuildUserService.html":{},"classes/ModRequestFlow.html":{},"guards/ReactedMemberIsModOrHigherGuard.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["user/self",{"_index":2353,"title":{},"body":{"controllers/SelfController.html":{}}}],["user/user.controller",{"_index":2200,"title":{},"body":{"modules/ModerationModule.html":{}}}],["user/user.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["user['userid",{"_index":2399,"title":{},"body":{"injectables/SelfService.html":{}}}],["user_banned",{"_index":2011,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_id",{"_index":1463,"title":{},"body":{"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{}}}],["user_joined",{"_index":2008,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_left",{"_index":2010,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_unbanned",{"_index":2012,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["user_updated",{"_index":2013,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["userbanevent",{"_index":2715,"title":{"classes/UserBanEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userbanevent(userid",{"_index":2783,"title":{},"body":{"controllers/UserController.html":{}}}],["usercontroller",{"_index":2198,"title":{"controllers/UserController.html":{}},"body":{"modules/ModerationModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["usercounts",{"_index":1551,"title":{},"body":{"injectables/GuildService.html":{}}}],["usercounts.length",{"_index":1555,"title":{},"body":{"injectables/GuildService.html":{}}}],["usercounts.reduce((sum",{"_index":1553,"title":{},"body":{"injectables/GuildService.html":{}}}],["userid",{"_index":67,"title":{},"body":{"classes/AddRoleCommand.html":{},"classes/ChannelCleaned.html":{},"controllers/ChannelController.html":{},"classes/DiscordGuildMember.html":{},"classes/Guild.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildMessageHandler.html":{},"injectables/GuildService.html":{},"controllers/GuildUserController.html":{},"injectables/GuildUserService.html":{},"guards/HasRequiredRank.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"controllers/SelfController.html":{},"classes/SelfDto.html":{},"classes/SelfDto-1.html":{},"injectables/SelfService.html":{},"classes/SendDirectMessageToUserException.html":{},"classes/SendDirectMessageToUserExceptionFilter.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"miscellaneous/variables.html":{}}}],["userinfouicommand",{"_index":399,"title":{"classes/UserInfoUiCommand.html":{}},"body":{"modules/BotModule.html":{},"classes/UserInfoUiCommand.html":{},"coverage.html":{}}}],["userkickevent",{"_index":2725,"title":{"classes/UserKickEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userkickevent(userid",{"_index":2790,"title":{},"body":{"controllers/UserController.html":{}}}],["userlimit",{"_index":496,"title":{},"body":{"classes/Channel.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{}}}],["usermention",{"_index":658,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildSettingsService.html":{},"classes/ModRequestFlow.html":{},"classes/SetFirstMessageUICommand.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{}}}],["usermention(fromuserid",{"_index":2541,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["usermention(interaction.targetid",{"_index":2825,"title":{},"body":{"classes/UserInfoUiCommand.html":{}}}],["usermention(interaction.user.id",{"_index":2110,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["usermention(member.id",{"_index":693,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/TasksService.html":{}}}],["usermention(message.author.id",{"_index":1673,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["usermention(touserid",{"_index":2543,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["usermention(user.id",{"_index":2683,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["usermodule",{"_index":108,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":874,"title":{},"body":{"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"injectables/GuildSettingsService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["userpurgeevent",{"_index":2731,"title":{"classes/UserPurgeEvent.html":{}},"body":{"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["userpurgeevent(userid",{"_index":2810,"title":{},"body":{"controllers/UserController.html":{}}}],["userresponseschema",{"_index":922,"title":{},"body":{"classes/DiscordUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":1760,"title":{},"body":{"injectables/GuildUserService.html":{},"injectables/TasksService.html":{},"controllers/UserController.html":{},"license.html":{}}}],["users.length",{"_index":1763,"title":{},"body":{"injectables/GuildUserService.html":{}}}],["usersenddmfailedevent",{"_index":2658,"title":{"classes/UserSendDMFailedEvent.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usersenddmfailedevent(user.id",{"_index":2680,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["userservice",{"_index":1686,"title":{},"body":{"controllers/GuildUserController.html":{},"injectables/TasksService.html":{}}}],["usersresponseschema",{"_index":923,"title":{},"body":{"classes/DiscordUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["usersservice",{"_index":1901,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["usertimeoutdto",{"_index":2654,"title":{"classes/UserTimeOutDto.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserTimeOutDto.html":{},"coverage.html":{}}}],["usertimeoutevent",{"_index":2600,"title":{"classes/UserTimeOutEvent.html":{}},"body":{"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"controllers/UserController.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usertimeoutevent(user.id",{"_index":2691,"title":{},"body":{"classes/TimeOutCommand.html":{}}}],["usertimeoutfailedevent",{"_index":2659,"title":{"classes/UserTimeOutFailedEvent.html":{}},"body":{"classes/TimeOutCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"coverage.html":{}}}],["usertouser",{"_index":2512,"title":{"classes/UserToUser.html":{}},"body":{"classes/SpecialCommand.html":{},"classes/UserToUser.html":{},"coverage.html":{}}}],["uses",{"_index":3584,"title":{},"body":{"license.html":{}}}],["using",{"_index":1218,"title":{},"body":{"classes/GuildDoesNotExistException.html":{},"classes/GuildDoesNotExistExceptionFilter.html":{},"injectables/GuildSettingsService.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"license.html":{},"properties.html":{}}}],["utf8",{"_index":2106,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["util/decorators/request",{"_index":2364,"title":{},"body":{"controllers/SelfController.html":{}}}],["util/dto/log.entry.dto",{"_index":251,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/AuditLogFilterDto.html":{},"classes/LogEntryDto.html":{}}}],["util/exception/guild",{"_index":1635,"title":{},"body":{"injectables/GuildSettingsService.html":{}}}],["util/functions/plain",{"_index":247,"title":{},"body":{"controllers/AuditLogController.html":{},"controllers/GuildSettingsController.html":{},"injectables/SelfService.html":{},"controllers/UserController.html":{}}}],["util/interfaces/event",{"_index":219,"title":{},"body":{"injectables/AppService.html":{}}}],["utility",{"_index":2592,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/functions.html":{}}}],["utils",{"_index":574,"title":{},"body":{"controllers/ChannelController.html":{},"controllers/UserController.html":{}}}],["utils.ts",{"_index":2975,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["valid",{"_index":3522,"title":{},"body":{"license.html":{}}}],["validate",{"_index":1963,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{},"classes/UserTimeOutDto.html":{}}}],["validate(payload",{"_index":1966,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/RefreshJwtStrategy.html":{}}}],["validateuser",{"_index":1898,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["validateuser(userid",{"_index":1909,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["validation",{"_index":2522,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["validation.ts",{"_index":702,"title":{},"body":{"classes/CommandValidationFilter.html":{},"coverage.html":{}}}],["validation.ts:7",{"_index":705,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["validationpipe",{"_index":238,"title":{},"body":{"controllers/AuditLogController.html":{},"classes/CommunityQuestionCommand.html":{},"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/SpecialCommand.html":{},"classes/TimeOutCommand.html":{}}}],["validator",{"_index":303,"title":{},"body":{"classes/AuditLogFilterDto.html":{},"classes/Channel.html":{},"classes/CommunityQuestionDto.html":{},"classes/DiscordGuildMember.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildAutoDeleteChannelDto.html":{},"classes/GuildChannelEditOptions.html":{},"classes/LogEntry.html":{},"classes/ModAnnouncementDto.html":{},"classes/PermissionOverwrite.html":{},"classes/RestrictedChannelDto.html":{},"classes/RoleResponse.html":{},"classes/SettingsDto.html":{},"classes/UserTimeOutDto.html":{},"dependencies.html":{}}}],["value",{"_index":215,"title":{},"body":{"injectables/AppService.html":{},"classes/CleanWfpMember.html":{},"classes/CommandValidationFilter.html":{},"classes/CommunityQuestionCommand.html":{},"injectables/DmMessageHandler.html":{},"injectables/GuildAutoDeleteChannelService.html":{},"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{},"injectables/GuildUserService.html":{},"injectables/JwtAuthService.html":{},"classes/ModRequestFlow.html":{},"classes/SettingsChanged.html":{},"classes/SpecialCommand.html":{},"injectables/TasksService.html":{},"classes/TimeOutCommand.html":{},"classes/UserInfoUiCommand.html":{},"classes/UserTimeOutDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.trim",{"_index":2881,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["values",{"_index":1205,"title":{},"body":{"controllers/GuildController.html":{}}}],["variable",{"_index":2943,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1666,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/GuildSettingsService.html":{},"miscellaneous/variables.html":{}}}],["verbatim",{"_index":3177,"title":{},"body":{"license.html":{}}}],["vereinsmitglied",{"_index":1524,"title":{},"body":{"injectables/GuildService.html":{}}}],["verified",{"_index":3145,"title":{},"body":{"classes/initGuildCommand.html":{}}}],["verifiedmemberroleid",{"_index":2453,"title":{},"body":{"classes/SettingsDto.html":{},"classes/initGuildCommand.html":{}}}],["verifiedroleid",{"_index":1316,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["versendet",{"_index":2138,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["version",{"_index":3163,"title":{},"body":{"license.html":{},"properties.html":{}}}],["versions",{"_index":3199,"title":{},"body":{"license.html":{}}}],["very",{"_index":2752,"title":{},"body":{"controllers/UserController.html":{}}}],["via",{"_index":2397,"title":{},"body":{"injectables/SelfService.html":{}}}],["vide/mp4",{"_index":3033,"title":{},"body":{"miscellaneous/functions.html":{}}}],["view",{"_index":3328,"title":{},"body":{"license.html":{}}}],["viewchannel",{"_index":1571,"title":{},"body":{"injectables/GuildService.html":{}}}],["violates",{"_index":3619,"title":{},"body":{"license.html":{}}}],["violation",{"_index":3681,"title":{},"body":{"license.html":{}}}],["visible",{"_index":3322,"title":{},"body":{"license.html":{}}}],["void",{"_index":213,"title":{},"body":{"injectables/AppService.html":{},"classes/ChannelCleaned.html":{},"interfaces/EventToLog.html":{},"classes/Explorer.html":{},"classes/SettingsChanged.html":{},"classes/SlowmodeDisabled.html":{},"classes/SlowmodeEnabled.html":{},"classes/UnverifyByRoleCommand.html":{},"classes/UserBanEvent.html":{},"classes/UserKickEvent.html":{},"classes/UserPurgeEvent.html":{},"classes/UserSendDMFailedEvent.html":{},"classes/UserTimeOutEvent.html":{},"classes/UserTimeOutFailedEvent.html":{},"license.html":{}}}],["volume",{"_index":3500,"title":{},"body":{"license.html":{}}}],["von",{"_index":830,"title":{},"body":{"classes/CommunityQuestionCommand.html":{},"classes/ModRequestFlow.html":{}}}],["wait",{"_index":1321,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["waive",{"_index":3451,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":3886,"title":{},"body":{"license.html":{}}}],["want",{"_index":842,"title":{},"body":{"classes/CommunityQuestionDto.html":{},"classes/UserToUser.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["warn",{"_index":2009,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":3327,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3326,"title":{},"body":{"license.html":{}}}],["warum",{"_index":2234,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{}}}],["watch",{"_index":3072,"title":{},"body":{"index.html":{}}}],["way",{"_index":2567,"title":{},"body":{"injectables/TasksService.html":{},"classes/UserTimeOutDto.html":{},"license.html":{}}}],["ways",{"_index":3513,"title":{},"body":{"license.html":{}}}],["web",{"_index":3913,"title":{},"body":{"license.html":{}}}],["webhook",{"_index":2001,"title":{},"body":{"classes/LogEntry.html":{}}}],["webhooks_updated",{"_index":2027,"title":{},"body":{"classes/LogEntry.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":3098,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":1271,"title":{},"body":{"injectables/GuildMemberEvents.html":{},"injectables/GuildService.html":{}}}],["weeks",{"_index":664,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{}}}],["welcher",{"_index":2924,"title":{},"body":{"classes/UserToUser.html":{}}}],["welches",{"_index":2644,"title":{},"body":{"classes/TicketSystemSetupCommand.html":{}}}],["welcomemessageformat",{"_index":2454,"title":{},"body":{"classes/SettingsDto.html":{}}}],["well",{"_index":1989,"title":{},"body":{"classes/LogEntry.html":{},"license.html":{}}}],["wende",{"_index":2676,"title":{},"body":{"classes/TimeOutCommand.html":{},"controllers/UserController.html":{}}}],["werden",{"_index":685,"title":{},"body":{"classes/CleanWfpMember.html":{},"classes/ModAnnouncementDto.html":{},"classes/UserTimeOutDto.html":{}}}],["wfp",{"_index":659,"title":{},"body":{"classes/CleanWfpMember.html":{},"injectables/GuildService.html":{}}}],["wfp.command",{"_index":408,"title":{},"body":{"modules/BotModule.html":{}}}],["wfp.command.ts",{"_index":650,"title":{},"body":{"classes/CleanWfpMember.html":{},"coverage.html":{}}}],["wfp.command.ts:18",{"_index":653,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["wfp.command.ts:21",{"_index":655,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["whatever",{"_index":3721,"title":{},"body":{"license.html":{}}}],["whenever",{"_index":1269,"title":{},"body":{"injectables/GuildMemberEvents.html":{}}}],["whether",{"_index":453,"title":{},"body":{"classes/Channel.html":{},"classes/DiscordUser.html":{},"classes/EditRoleData.html":{},"classes/GuildChannelEditOptions.html":{},"classes/PermissionOverwrite.html":{},"classes/RoleResponse.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["white",{"_index":978,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["whole",{"_index":3350,"title":{},"body":{"license.html":{}}}],["whose",{"_index":3563,"title":{},"body":{"license.html":{}}}],["widely",{"_index":3345,"title":{},"body":{"license.html":{}}}],["widespread",{"_index":3228,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["willst",{"_index":2238,"title":{},"body":{"classes/MumVoiceCommandChatInput.html":{},"classes/MumVoiceCommandUi.html":{},"classes/UserToUser.html":{}}}],["window",{"_index":3362,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":3442,"title":{},"body":{"license.html":{}}}],["wish",{"_index":3206,"title":{},"body":{"license.html":{}}}],["within",{"_index":1041,"title":{},"body":{"interfaces/EventToLog.html":{},"license.html":{}}}],["without",{"_index":3244,"title":{},"body":{"license.html":{}}}],["wording",{"_index":1996,"title":{},"body":{"classes/LogEntry.html":{}}}],["work",{"_index":3278,"title":{},"body":{"license.html":{}}}],["work's",{"_index":3371,"title":{},"body":{"license.html":{}}}],["working",{"_index":3346,"title":{},"body":{"license.html":{}}}],["works",{"_index":3185,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":3755,"title":{},"body":{"license.html":{}}}],["write",{"_index":1031,"title":{},"body":{"classes/EditRoleData.html":{},"classes/RoleResponse.html":{}}}],["writing",{"_index":3846,"title":{},"body":{"license.html":{}}}],["written",{"_index":1469,"title":{},"body":{"injectables/GuildService.html":{},"injectables/TasksService.html":{},"license.html":{},"properties.html":{}}}],["wrongargsexception",{"_index":704,"title":{},"body":{"classes/CommandValidationFilter.html":{}}}],["ws",{"_index":2254,"title":{},"body":{"classes/PingCommand.html":{}}}],["wurde",{"_index":2136,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["wurden",{"_index":682,"title":{},"body":{"classes/CleanWfpMember.html":{}}}],["www",{"_index":1944,"title":{},"body":{"injectables/JwtAuthService.html":{}}}],["wähle",{"_index":2175,"title":{},"body":{"classes/ModRequestFlow.html":{}}}],["x",{"_index":2502,"title":{},"body":{"classes/SpecialCommand.html":{},"classes/UserTimeOutDto.html":{}}}],["xd",{"_index":2861,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxh",{"_index":2864,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxhxm",{"_index":2867,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xdxm",{"_index":2866,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xh",{"_index":2862,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xhxm",{"_index":2865,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["xm",{"_index":2863,"title":{},"body":{"classes/UserTimeOutDto.html":{}}}],["y",{"_index":2500,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["yarn",{"_index":3068,"title":{},"body":{"index.html":{}}}],["years",{"_index":3524,"title":{},"body":{"license.html":{}}}],["you'd",{"_index":3091,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":3772,"title":{},"body":{"license.html":{}}}],["z",{"_index":2503,"title":{},"body":{"classes/SpecialCommand.html":{}}}],["zoom",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuditLogModule.html":{},"modules/BotModule.html":{},"modules/GuildAutoDeleteChannelModule.html":{},"modules/GuildModule.html":{},"modules/GuildRestrictedChannelModule.html":{},"modules/GuildSettingsModule.html":{},"modules/GuildUserModule.html":{},"modules/JwtAuthModule.html":{},"modules/ModerationModule.html":{},"modules/TasksModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["zu",{"_index":963,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}],["zwar",{"_index":947,"title":{},"body":{"injectables/DmMessageHandler.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddRoleCommand.html":{"url":"classes/AddRoleCommand.html","title":"class - AddRoleCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddRoleCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/add-role.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onRoleAdd\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/add-role.command.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onRoleAdd\n                        \n                    \n                \n            \n            \n                \n                        \n                    onRoleAdd(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/add-role.command.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport { Client, CommandInteraction } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { Prisma } from '@prisma/client';\n\n@Command({\n  name: 'lift-lockdown',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class AddRoleCommand {\n  constructor(\n    @InjectDiscordClient() private client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  @Handler()\n  async onRoleAdd(@InteractionEvent() interaction: CommandInteraction) {\n    interaction.guild.members.fetch().then((members) =>\n      members.forEach(async (member) => {\n        if (\n          member.roles.cache.has('1011563978956226560') ||\n          member.roles.cache.has('1011513775054143632')\n        )\n          return;\n        if (member.roles.cache.has('1121823930085285938')) {\n          const roles = (\n            await this.database.lockdownRoleBackup.findUnique({\n              where: {\n                guildId_userId: { guildId: member.guild.id, userId: member.id },\n              },\n            })\n          ).roles as Prisma.JsonArray;\n          let error = false;\n          roles.forEach((role: { id: string }) => {\n            try {\n              member.roles.add(role.id);\n            } catch {\n              error = true;\n            }\n          });\n          if (!error)\n            this.database.lockdownRoleBackup.delete({\n              where: {\n                guildId_userId: {\n                  guildId: member.guild.id,\n                  userId: member.id,\n                },\n              },\n            });\n        }\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, UseGuards } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt/guards/jwt-auth.guard';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller()\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class AppController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nBotModule\n\nBotModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBotModule->AppModule\n\n\n\n\n\nGuildModule\n\nGuildModule\n\nAppModule -->\n\nGuildModule->AppModule\n\n\n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nAppModule -->\n\nJwtAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BotModule\n                        \n                        \n                            GuildModule\n                        \n                        \n                            JwtAuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { JwtAuthModule } from './auth/jwt/jwt-auth.module';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { Client, GatewayIntentBits, Partials } from 'discord.js';\nimport { BotModule } from './bot/bot.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { ModerationModule } from './guild/moderation/moderation.module';\nimport { GuildSettingsModule } from './guild/guild-settings/guild-settings.module';\nimport { AuditLogModule } from './auditlog/auditlog.module';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { GuildUserModule } from './guild/guild-user/guild-user.module';\nimport { GuildModule } from './guild/guild.module';\nimport { RouterModule } from '@nestjs/core';\nimport { PrismaService } from './prisma.service';\n@Module({\n  imports: [\n    ScheduleModule.forRoot(),\n    ConfigModule.forRoot({\n      isGlobal: true,\n      ignoreEnvVars: false,\n    }),\n    DiscordModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        token: configService.get('TOKEN'),\n        discordClientOptions: {\n          intents: [\n            GatewayIntentBits.AutoModerationConfiguration,\n            GatewayIntentBits.AutoModerationExecution,\n            GatewayIntentBits.GuildPresences,\n            GatewayIntentBits.Guilds,\n            GatewayIntentBits.GuildMessages,\n            GatewayIntentBits.MessageContent,\n            GatewayIntentBits.GuildMembers,\n            GatewayIntentBits.GuildMessageReactions,\n            GatewayIntentBits.GuildModeration,\n            GatewayIntentBits.GuildInvites,\n            GatewayIntentBits.GuildVoiceStates,\n            GatewayIntentBits.GuildMessageTyping,\n            GatewayIntentBits.GuildWebhooks,\n            GatewayIntentBits.GuildIntegrations,\n            GatewayIntentBits.GuildMessageTyping,\n            GatewayIntentBits.GuildEmojisAndStickers,\n            GatewayIntentBits.DirectMessageTyping,\n            GatewayIntentBits.DirectMessages,\n            GatewayIntentBits.DirectMessageReactions,\n          ],\n          partials: [\n            Partials.GuildMember,\n            Partials.ThreadMember,\n            Partials.User,\n            Partials.Message,\n            Partials.Channel,\n            Partials.Reaction,\n            Partials.GuildScheduledEvent,\n          ],\n        },\n\n        registerCommandOptions: [\n          {\n            removeCommandsBefore: true,\n            forGuild: '1011511871297302608',\n          },\n        ],\n\n        failOnLogin: true,\n      }),\n      inject: [ConfigService],\n      setupClientFactory: (client: Client) => {\n        client.setMaxListeners(30);\n      },\n    }),\n    EventEmitterModule.forRoot({\n      wildcard: true,\n    }),\n    RouterModule.register([\n      {\n        path: 'guild/:guildId',\n        children: [\n          {\n            path: '/',\n            module: GuildModule,\n          },\n          {\n            path: '/auditlog',\n            module: AuditLogModule,\n          },\n          {\n            path: '/user',\n            module: GuildUserModule,\n          },\n          {\n            path: '/settings',\n            module: GuildSettingsModule,\n          },\n          {\n            path: '/moderation',\n            module: ModerationModule,\n          },\n        ],\n      },\n    ]),\n    UserModule,\n    JwtAuthModule,\n    GuildModule,\n    BotModule,\n    TasksModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, PrismaService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleEvent(event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('**')\n                \n            \n\n                    \n                        \n                            Defined in src/app.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('AppService')\n                    \n                \n                    \n                        \n                                Defined in src/app.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { EventToLog } from './util/interfaces/event-to-log';\n\n@Injectable()\nexport class AppService {\n  logger = new Logger('AppService');\n  constructor(\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @OnEvent('**')\n  handleEvent(event: any & EventToLog) {\n    event.toFormattedLog(this.logger);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuditLogController.html":{"url":"controllers/AuditLogController.html","title":"controller - AuditLogController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuditLogController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/auditlog.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getAuditLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAuditLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuditLog(guildId: string, filter: AuditLogFilterDto, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/auditlog/auditlog.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            AuditLogFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Param,\n  ParseIntPipe,\n  Query,\n  UseGuards,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { AuditLogFilterDto } from './dto/audit-log-filter.dto';\nimport { AuditLogService } from './auditlog.service';\nimport { LogEntryDto } from './dto/log-entry.dto';\nimport { plainToInstance } from '../util/functions/plain-to-instance';\nimport { Action, TargetType } from '../util/dto/log.entry.dto';\nimport { Rank } from '@prisma/client';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller()\n@RequiredRank(Rank.MEMBER)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class AuditLogController {\n  constructor(\n    @Inject(AuditLogService) private readonly auditLogService: AuditLogService,\n  ) {}\n\n  @Get()\n  async getAuditLog(\n    @Param('guildId') guildId: string,\n    @Query(ValidationPipe) filter: AuditLogFilterDto,\n    @Query('limit', ParseIntPipe) limit: number,\n    @Query('offset', ParseIntPipe) offset: number,\n  ): Promise {\n    return this.auditLogService\n      .find(guildId, filter, { offset, limit })\n      .then((result) => ({\n        total: result.total,\n        data: result.data.map((it) =>\n          plainToInstance(LogEntryDto, {\n            action: it.action as Action,\n            createdAt: it.createdAt,\n            invokerId: it.invokerId,\n            reason: it.reason,\n            targetId: it.targetId,\n            targetType: it.targetType as TargetType,\n          }),\n        ),\n      }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuditLogFilterDto.html":{"url":"classes/AuditLogFilterDto.html","title":"class - AuditLogFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuditLogFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/dto/audit-log-filter.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                action\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdFrom\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdTill\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', enum: actions})@IsOptional()@IsString()@IsIn(actions)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdFrom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', format: 'date-time'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdTill\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', format: 'date-time'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', enum: targetTypes})@IsOptional()@IsString()@IsIn(targetTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/audit-log-filter.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  Action,\n  actions,\n  TargetType,\n  targetTypes,\n} from '../../util/dto/log.entry.dto';\n\nexport class AuditLogFilterDto {\n  @ApiPropertyOptional({ type: 'string', format: 'date-time' })\n  @IsOptional()\n  createdFrom?: string;\n  @ApiPropertyOptional({ type: 'string', format: 'date-time' })\n  @IsOptional()\n  createdTill?: string;\n  @ApiPropertyOptional({ type: 'string', enum: targetTypes })\n  @IsOptional()\n  @IsString()\n  @IsIn(targetTypes)\n  targetType?: TargetType;\n  @ApiPropertyOptional({ type: 'string', enum: actions })\n  @IsOptional()\n  @IsString()\n  @IsIn(actions)\n  action?: Action;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuditLogModule.html":{"url":"modules/AuditLogModule.html","title":"module - AuditLogModule","body":"\n                   \n\n\n\n\n    Modules\n    AuditLogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuditLogModule\n\n\n\ncluster_AuditLogModule_exports\n\n\n\ncluster_AuditLogModule_providers\n\n\n\n\nAuditLogService \n\nAuditLogService \n\n\n\nAuditLogModule\n\nAuditLogModule\n\nAuditLogService  -->\n\nAuditLogModule->AuditLogService \n\n\n\n\n\nAuditEvents\n\nAuditEvents\n\nAuditLogModule -->\n\nAuditEvents->AuditLogModule\n\n\n\n\n\nAuditLogService\n\nAuditLogService\n\nAuditLogModule -->\n\nAuditLogService->AuditLogModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuditLogModule -->\n\nPrismaService->AuditLogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auditlog/auditlog.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuditEvents\n                        \n                        \n                            AuditLogService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuditLogController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuditLogService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuditLogController } from './auditlog.controller';\nimport { AuditLogService } from './auditlog.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\nimport AuditEvents from './auditlog.events';\n\n@Module({\n  controllers: [AuditLogController],\n  providers: [AuditLogService, PrismaService, AuditEvents],\n  imports: [DiscordModule.forFeature()],\n  exports: [AuditLogService],\n})\nexport class AuditLogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditLogService.html":{"url":"injectables/AuditLogService.html","title":"injectable - AuditLogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditLogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/auditlog.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auditlog/auditlog.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(entry: LogEntry)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auditlog/auditlog.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            LogEntry\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                        \n                    find(guildId: string, filter: AuditLogFilterDto, pagination: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auditlog/auditlog.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            AuditLogFilterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport LogEntry from 'src/util/dto/log.entry.dto';\nimport { PrismaService } from 'src/prisma.service';\nimport { AuditLogFilterDto } from './dto/audit-log-filter.dto';\n\n@Injectable()\nexport class AuditLogService {\n  constructor(@Inject(PrismaService) private prismaService: PrismaService) {}\n\n  async create(entry: LogEntry) {\n    return this.prismaService.auditLog.create({\n      data: {\n        action: entry.action,\n        guildId: entry.guildId,\n        invokerId: entry.invokerId,\n        reason: entry.reason,\n        targetId: entry.targetId,\n        targetType: entry.targetType,\n        extraInfo: entry.extraInfo || null,\n        createdAt: entry.createdAt,\n      },\n    });\n  }\n\n  async find(\n    guildId: string,\n    filter: AuditLogFilterDto,\n    pagination: { offset?: number; limit?: number },\n  ) {\n    const where = {\n      guildId,\n      createdAt:\n        filter.createdFrom || filter.createdTill\n          ? {\n              gte: filter.createdFrom\n                ? new Date(filter.createdFrom).toISOString()\n                : undefined,\n              lte: filter.createdTill\n                ? new Date(filter.createdTill).toISOString()\n                : undefined,\n            }\n          : undefined,\n      action: filter.action,\n      targetType: filter.targetType,\n    };\n\n    return {\n      total: await this.prismaService.auditLog.count({ where }),\n      data: await this.prismaService.auditLog.findMany({\n        select: {\n          action: true,\n          invokerId: true,\n          reason: true,\n          targetId: true,\n          targetType: true,\n          extraInfo: true,\n          createdAt: true,\n        },\n        where,\n        orderBy: {\n          createdAt: 'desc',\n        },\n        skip: pagination.offset ?? 0,\n        take: pagination.limit ?? 0,\n      }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BotEvent.html":{"url":"interfaces/BotEvent.html","title":"interface - BotEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BotEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/interfaces/bot-event.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        __bot_event_handler__\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        __bot_event_handler__\n                        \n                    \n                \n            \n            \n                \n__bot_event_handler__(...args: ClientEvents)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/interfaces/bot-event.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ClientEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ClientEvents } from 'discord.js';\n\nexport default interface BotEvent {\n  __bot_event_handler__(\n    ...args: ClientEvents[keyof ClientEvents]\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BotModule.html":{"url":"modules/BotModule.html","title":"module - BotModule","body":"\n                   \n\n\n\n\n    Modules\n    BotModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BotModule\n\n\n\ncluster_BotModule_providers\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\n\n\nBotModule\n\nBotModule\n\nBotModule -->\n\nGuildRestrictedChannelService->BotModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nBotModule -->\n\nGuildService->BotModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nBotModule -->\n\nGuildSettingsService->BotModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nBotModule -->\n\nPrismaService->BotModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bot/bot.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { DiscordModule } from '@discord-nestjs/core';\nimport { Module } from '@nestjs/common';\nimport { PingCommand } from './commands/ping.command';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { TimeOutCommand } from './commands/timeout.command';\nimport {\n  MumVoiceCommandChatInput,\n  MumVoiceCommandUi,\n} from './commands/mod-anouncement.command';\nimport { GuildRestrictedChannelService } from 'src/guild/guild-restricted-channel/guild-restricted-channel.service';\nimport { CommunityQuestionCommand } from './commands/community-question.command';\nimport { initGuildCommand } from './commands/init-guild.command';\nimport { UserInfoUiCommand } from './commands/user-info-ui.command';\nimport { SetFirstMessageUICommand } from './commands/user-set-first-message-ui.command';\nimport { CleanWfpMember } from './commands/clean-wfp.command';\nimport { GuildService } from 'src/guild/guild.service';\nimport { SpecialCommand } from './commands/special.command';\nimport { TicketSystemSetupCommand } from './commands/ticket-system.command';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [\n    PingCommand,\n    TimeOutCommand,\n    MumVoiceCommandChatInput,\n    CommunityQuestionCommand,\n    initGuildCommand,\n    PrismaService,\n    GuildSettingsService,\n    GuildRestrictedChannelService,\n    UserInfoUiCommand,\n    SetFirstMessageUICommand,\n    CleanWfpMember,\n    GuildService,\n    SpecialCommand,\n    TicketSystemSetupCommand,\n    MumVoiceCommandUi,\n  ],\n  exports: [DiscordModule],\n})\nexport class BotModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Channel.html":{"url":"classes/Channel.html","title":"class - Channel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Channel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                flags\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastMessageId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                messages\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nsfw\n                            \n                            \n                                    \n                                    \n                                parentId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                permissionOverwrites\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                rateLimitPerUser\n                            \n                            \n                                    \n                                    \n                                rawPosition\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                threads\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                topic\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Timestamp when the channel was created', example: 1671981769958, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Flags for the channel', example: 0, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the guild', example: '616609333832187924', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the channel', example: '1056592866660581456', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastMessageId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'ID of the last message', example: '1080070968900333578', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString()@IsOptional()@ApiProperty({description: 'Array of message IDs', type: undefined, example: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'Name of the channel', example: 'images', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nsfw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({description: 'Whether the channel is NSFW', example: false, type: Boolean, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the parent channel', example: '832170662491062333', type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        permissionOverwrites\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionOverwrite[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInstance(PermissionOverwrite)@IsOptional()@ApiProperty({description: 'Array of permission overwrites', type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        rateLimitPerUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({description: 'Rate limit per user aka slowmode', example: 0, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rawPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Raw position of the channel', example: 3, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        threads\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString()@IsOptional()@ApiProperty({description: 'Array of thread IDs', type: undefined, example: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({description: 'Topic of the channel', example: undefined, type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Type of the channel', type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelCleaned.html":{"url":"classes/ChannelCleaned.html","title":"class - ChannelCleaned","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelCleaned\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                before\n                            \n                            \n                                channelId\n                            \n                            \n                                guildId\n                            \n                            \n                                messagesDeleted\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, messagesDeleted: number, before: number, userId: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesDeleted\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        before\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        before\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messagesDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:52\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChannelController.html":{"url":"controllers/ChannelController.html","title":"controller - ChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/channel/channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /channel\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                cleanChannel\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editChannel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildChannel\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildChannels\n                            \n                            \n                                    \n                                    \n                                    Async\n                                setSlowmode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        cleanChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanChannel(guildId: string, channelId: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channelId/clean')@ApiOperation({summary: 'Clean a channel'})@ApiBody({schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        editChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    editChannel(guildId: string, channelId: string, channelData: GuildChannelEditOptions)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':channelId')@ApiOperation({summary: 'Edit a channel for a guild'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelData\n                                            \n                                                            GuildChannelEditOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildChannel(guildId: string, channelId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':channelId')@ApiOperation({summary: 'Get a channel for a guild'})@ApiResponse({status: 200, type: Channel, description: 'Channel was successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildChannels\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildChannels(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all channels for a guild'})@ApiResponse({status: 200, type: undefined, description: 'Channels were successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        setSlowmode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSlowmode(guildId: string, channelId: string, undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':channelId/slowmode')@ApiOperation({summary: 'Set slowmode for a channel'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/channel/channel.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport {\n  Client,\n  GuildChannel,\n  GuildChannelEditOptions,\n  GuildBasedChannel,\n  ChannelType,\n  GuildTextBasedChannel,\n} from 'discord.js';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { Channel } from '../dto/channel';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  ChannelCleaned,\n  SlowmodeDisabled,\n  SlowmodeEnabled,\n} from '../events/channel.event';\nimport { ChannelNotTextBasedException } from 'src/util/exception/channel-not-text-based-exception';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { Rank } from '@prisma/client';\n\n@ApiTags('/channel')\n@Controller('/channel')\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class ChannelController {\n  logger = new Logger(ChannelController.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all channels for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: [Channel],\n    description: 'Channels were successfully fetched',\n  })\n  async getGuildChannels(\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(\n      `Found ${guild.channels.cache.size} channels in guild ${guildId}`,\n    );\n    return (await guild.channels.fetch()).toJSON();\n  }\n\n  @Get(':channelId')\n  @ApiOperation({ summary: 'Get a channel for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: Channel,\n    description: 'Channel was successfully fetched',\n  })\n  async getGuildChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(\n      `Found ${guild.channels.cache.size} channels in guild ${guildId}`,\n    );\n    return await guild.channels.fetch(channelId);\n  }\n\n  @Put(':channelId')\n  @ApiOperation({ summary: 'Edit a channel for a guild' })\n  async editChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() channelData: GuildChannelEditOptions,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId);\n    await channel.edit(channelData);\n    this.logger.log(`Edited channel ${channelId} in guild ${guildId}`);\n    return channel;\n  }\n\n  @Post(':channelId/slowmode')\n  @ApiOperation({ summary: 'Set slowmode for a channel' })\n  async setSlowmode(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() { duration }: { duration: number },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId) as GuildChannel;\n    this.logger.log(\n      `Set slowmode for channel ${channelId} in guild ${guildId}`,\n    );\n    await this.eventEmitter.emitAsync(\n      `channel.slowmode.${duration > 0 ? 'enabled' : 'disabled'}`,\n      duration > 0\n        ? new SlowmodeEnabled(guildId, channelId, true, duration)\n        : new SlowmodeDisabled(guildId, channelId, false),\n    );\n    await channel.edit({ rateLimitPerUser: duration });\n  }\n\n  @Post(':channelId/clean')\n  @ApiOperation({ summary: 'Clean a channel' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        userId: {\n          type: 'string',\n        },\n        before: {\n          type: 'number',\n        },\n      },\n    },\n  })\n  async cleanChannel(\n    @Param('guildId') guildId: string,\n    @Param('channelId') channelId: string,\n    @Body() { userId, before }: { userId: string; before: number },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = guild.channels.cache.get(channelId);\n    this.logger.log(\n      `Cleaning channel ${channelId} in guild ${guildId} from messages before ${before} of user ${userId}`,\n    );\n    if (\n      channel.type in\n      [\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ]\n    ) {\n      cleanTextChannel(\n        channel as GuildTextBasedChannel,\n        (messages) => messages.last().createdTimestamp  msg.deletable && msg.createdTimestamp > before,\n        this.logger,\n      );\n    } else {\n      throw new ChannelNotTextBasedException(channel.name);\n    }\n    await this.eventEmitter.emitAsync(\n      'channel.clean',\n      new ChannelCleaned(guildId, channelId, 0, before, userId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelNotTextBasedException.html":{"url":"classes/ChannelNotTextBasedException.html","title":"class - ChannelNotTextBasedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelNotTextBasedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/channel-not-text-based-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when a channel isn't found by ID\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(channelName: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/channel-not-text-based-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        channelName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a channel isn't found by ID\n */\nexport class ChannelNotTextBasedException extends Error {\n  constructor(channelName: string) {\n    super(`Channel ${channelName} is not text based.`);\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(ChannelNotTextBasedException)\nexport class ChannelNotTextBasedExceptionFilter implements ExceptionFilter {\n  catch(exception: ChannelNotTextBasedException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChannelNotTextBasedExceptionFilter.html":{"url":"classes/ChannelNotTextBasedExceptionFilter.html","title":"class - ChannelNotTextBasedExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChannelNotTextBasedExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/channel-not-text-based-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to produce the http response when the exception is thrown in a http context\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: ChannelNotTextBasedException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/channel-not-text-based-exception.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            ChannelNotTextBasedException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a channel isn't found by ID\n */\nexport class ChannelNotTextBasedException extends Error {\n  constructor(channelName: string) {\n    super(`Channel ${channelName} is not text based.`);\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(ChannelNotTextBasedException)\nexport class ChannelNotTextBasedExceptionFilter implements ExceptionFilter {\n  catch(exception: ChannelNotTextBasedException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CleanWfpMember.html":{"url":"classes/CleanWfpMember.html","title":"class - CleanWfpMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CleanWfpMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/clean-wfp.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onCleanWfpMembers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildService: GuildService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/clean-wfp.command.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onCleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    onCleanWfpMembers(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/clean-wfp.command.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InteractionEvent } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  Colors,\n  CommandInteraction,\n  EmbedBuilder,\n  userMention,\n} from 'discord.js';\nimport { GuildService } from 'src/guild/guild.service';\n\n@Command({\n  name: 'clean-wfp',\n  description:\n    'Kick all members with the role `wfp` if they are longer than 2 weeks on the server.',\n  defaultMemberPermissions: ['ModerateMembers', 'KickMembers'],\n  dmPermission: false,\n})\nexport class CleanWfpMember {\n  constructor(@Inject(GuildService) private guildService: GuildService) {}\n  @Handler()\n  async onCleanWfpMembers(@InteractionEvent() interaction: CommandInteraction) {\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const outCome = await this.guildService.cleanWfpMembers(\n      interaction.guildId,\n      false,\n    );\n    console.log(outCome);\n    const embed = new EmbedBuilder()\n      .setTitle('wfp kick member report :3')\n      .setColor(Colors.Blue)\n      .setDescription(\n        'Member die kicked wurden bzw. nicht kicked werden konnten',\n      )\n      .addFields([\n        {\n          name: 'Kicked members count',\n          value: outCome['membersToKick'].length.toString() || '0',\n        },\n        {\n          name: 'Kicked members names',\n          value:\n            outCome['membersToKick']\n              .map((member) => userMention(member.id))\n              .join('\\n') || '',\n        },\n        {\n          name: \"Couldn't kick members count\",\n          value: outCome['unkickableMembers'].length.toString() || '0',\n        },\n        {\n          name: \"Couldn't kick members names\",\n          value:\n            outCome['unkickableMembers']\n              .map((member) => userMention(member.id))\n              .join('\\n') || '',\n        },\n      ]);\n    await interaction.followUp({\n      ephemeral: true,\n      embeds: [embed],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommandValidationFilter.html":{"url":"classes/CommandValidationFilter.html","title":"class - CommandValidationFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommandValidationFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/filters/command-validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(exceptionList: WrongArgsException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/filters/command-validation.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exceptionList\n                                            \n                                                        WrongArgsException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WrongArgsException } from '@discord-nestjs/common';\nimport { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { Colors, EmbedBuilder } from 'discord.js';\n\n@Catch(WrongArgsException)\nexport class CommandValidationFilter implements ExceptionFilter {\n  async catch(\n    exceptionList: WrongArgsException,\n    host: ArgumentsHost,\n  ): Promise {\n    const interaction = host.getArgByIndex(0);\n    const embeds = exceptionList.getError().map((exception) =>\n      new EmbedBuilder()\n        .setDescription(`For input: ${exception.property}`)\n        .setTitle('Validation failed')\n        .setColor(Colors.Red)\n        .addFields(\n          Object.keys(exception.constraints).map((key) => ({\n            name: key,\n            value: exception.constraints[key],\n          })),\n        ),\n    );\n\n    if (interaction.isRepliable())\n      await interaction.reply({ embeds, ephemeral: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionCommand.html":{"url":"classes/CommunityQuestionCommand.html","title":"class - CommunityQuestionCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/community-question.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onButtonPress\n                            \n                            \n                                    \n                                    Async\n                                onCommunityQuestion\n                            \n                            \n                                    \n                                    \n                                    Async\n                                onInteraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/community-question.command.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonPress\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonPress(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onCommunityQuestion\n                        \n                    \n                \n            \n            \n                \n                        \n                    onCommunityQuestion(interaction: CommandInteraction, question: CommunityQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                question\n                                            \n                                                            CommunityQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onInteraction\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInteraction(undefined: CommunityQuestionFormDto, eventArgs: ClientEvents)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')@UseGuards(IsModalInteractionGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/community-question.command.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CommunityQuestionFormDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                eventArgs\n                                            \n                                                        ClientEvents\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n  IA,\n  On,\n  EventParams,\n} from '@discord-nestjs/core';\nimport { Inject, UseGuards, ValidationPipe } from '@nestjs/common';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  ButtonInteraction,\n  ButtonStyle,\n  Client,\n  ClientEvents,\n  CommandInteraction,\n  EmbedBuilder,\n  GuildTextBasedChannel,\n  ModalActionRowComponentBuilder,\n  ModalBuilder,\n  TextInputBuilder,\n  TextInputStyle,\n} from 'discord.js';\nimport { CommunityQuestionDto } from '../dto/commmunity-question.dto';\nimport {\n  ModalFieldsTransformPipe,\n  SlashCommandPipe,\n} from '@discord-nestjs/common';\nimport { IsModalInteractionGuard } from '../guards/is-modal-interaction.guard';\nimport { CommunityQuestionFormDto } from '../dto/community-question.form.dto';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'question',\n  description: 'Ask the community a question',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class CommunityQuestionCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private readonly prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onCommunityQuestion(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) question: CommunityQuestionDto,\n  ) {\n    const questionId = await this.prismaService.guildQuestion.create({\n      data: {\n        question: question.description,\n        guildId: interaction.guildId,\n      },\n      select: {\n        id: true,\n      },\n    });\n    const button = new ButtonBuilder()\n      .setCustomId(`community-question-${questionId.id}`)\n      .setLabel('Antwort geben')\n      .setStyle(ButtonStyle.Primary);\n\n    const row = new ActionRowBuilder().addComponents(button);\n    interaction.reply({\n      components: [row],\n      content: question.question,\n    });\n  }\n  @On('interactionCreate')\n  async onButtonPress(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (!interaction.customId.includes('community-question')) return;\n    const questionId = interaction.customId.split('-')[2];\n    const question = await this.prismaService.guildQuestion.findUnique({\n      where: {\n        id: parseInt(questionId),\n      },\n    });\n    if (!question) {\n      await interaction.reply({\n        content: 'Question not found, please contact the mods',\n        ephemeral: true,\n      });\n      return;\n    }\n    const modal = new ModalBuilder()\n      .setCustomId(`community-question-${questionId}`)\n      .setTitle('Community Frage');\n    const questionField = new TextInputBuilder()\n      .setCustomId('question')\n      .setLabel('Frage(Nicht bearbeiten)')\n      .setStyle(TextInputStyle.Paragraph)\n      .setValue(question.question)\n      .setRequired(false);\n    const answerInput = new TextInputBuilder()\n      .setCustomId('answer')\n      .setLabel('Antwort')\n      .setStyle(TextInputStyle.Paragraph)\n      .setRequired(true)\n      .setPlaceholder('Antwort');\n    const answerComponentRow =\n      new ActionRowBuilder().addComponents(\n        answerInput,\n      );\n    const questionComponentRow =\n      new ActionRowBuilder().addComponents(\n        questionField,\n      );\n\n    // Add inputs to the modal\n    modal.addComponents(questionComponentRow, answerComponentRow);\n    await interaction.showModal(modal);\n  }\n\n  @On('interactionCreate')\n  @UseGuards(IsModalInteractionGuard)\n  async onInteraction(\n    @IA(ModalFieldsTransformPipe) { answer }: CommunityQuestionFormDto,\n    @EventParams() eventArgs: ClientEvents['interactionCreate'],\n  ) {\n    const [modal] = eventArgs;\n    if (\n      !modal.isModalSubmit() ||\n      !modal.customId.startsWith('community-question')\n    )\n      return;\n    const questionId = modal.customId.split('-')[2];\n    const question = await this.prismaService.guildQuestion.findUnique({\n      where: {\n        id: parseInt(questionId),\n      },\n    });\n    await this.prismaService.guildQuestion.update({\n      where: {\n        id: parseInt(questionId),\n      },\n      data: {\n        answers: question.answers + 1,\n      },\n    });\n    await this.prismaService.guildQuestionAnswer.create({\n      data: {\n        answer: answer.value,\n        createdAt: new Date(),\n        guildQuestionId: parseInt(questionId),\n      },\n    });\n    if (answer.value != '')\n      (\n        (await (\n          await this.client.guilds.fetch(eventArgs[0].guildId)\n        ).channels.fetch('1195024829544411168')) as GuildTextBasedChannel\n      ).send({\n        embeds: [\n          new EmbedBuilder()\n            .setAuthor({\n              name: this.client.user.username,\n              iconURL: this.client.user.avatarURL(),\n              url: 'https://github.com/89Q12/Mega-Transformers-bot',\n            })\n            .addFields([\n              {\n                name: 'Antwort von nutzer:in',\n                value: answer.value,\n              },\n              {\n                name: 'Frage',\n                value: question.question,\n              },\n            ]),\n        ],\n      });\n    await modal.reply({ content: 'Antwort abgeschickt', ephemeral: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionDto.html":{"url":"classes/CommunityQuestionDto.html","title":"class - CommunityQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/commmunity-question.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'Description about the question displayed above the text input int the modal', type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/commmunity-question.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The question you want to ask the community', type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/commmunity-question.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { IsString } from 'class-validator';\n\nexport class CommunityQuestionDto {\n  @Param({\n    description: 'The question you want to ask the community',\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  question: string;\n\n  @Param({\n    description:\n      'Description about the question displayed above the text input int the modal',\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunityQuestionFormDto.html":{"url":"classes/CommunityQuestionFormDto.html","title":"class - CommunityQuestionFormDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunityQuestionFormDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/community-question.form.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                answer\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TextInputModalData\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field('answer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/community-question.form.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field } from '@discord-nestjs/core';\nimport { TextInputModalData } from 'discord.js';\n\nexport class CommunityQuestionFormDto {\n  @Field('answer')\n  answer: TextInputModalData;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiscordExecutionContext.html":{"url":"interfaces/DiscordExecutionContext.html","title":"interface - DiscordExecutionContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiscordExecutionContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/guards/user-is-unlocked.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ExecutionContext\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getMessage\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMessage\n                        \n                    \n                \n            \n            \n                \ngetMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/user-is-unlocked.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Message\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { Message } from 'discord.js';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\n\ninterface DiscordExecutionContext extends ExecutionContext {\n  getMessage(): Message;\n}\n@Injectable()\nexport class IsUserUnlockedGuard implements CanActivate {\n  constructor(\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n  ) {}\n  async canActivate(context: DiscordExecutionContext): Promise {\n    const message: Message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return message.member.roles.cache.has(\n      await this.settingsService.getVerifiedMemberRoleId(message.guildId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordGuildMember.html":{"url":"classes/DiscordGuildMember.html","title":"class - DiscordGuildMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordGuildMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/guild-member.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                    \n                                bot\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                communicationDisabledUntil\n                            \n                            \n                                    \n                                    \n                                displayName\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        communicationDisabledUntil\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()@IsOptional()@ApiPropertyOptional({type: String, format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiscordUser['id']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/guild-member.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsDateString, IsOptional, IsString } from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { DiscordUser } from './user';\n\nexport class DiscordGuildMember {\n  @IsString()\n  @ApiProperty({ type: String })\n  userId: DiscordUser['id'];\n  @IsString()\n  @ApiProperty({ type: String })\n  guildId: string;\n  @IsDateString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String, format: 'date-time' })\n  communicationDisabledUntil?: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  displayName: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  username: string;\n  @IsString()\n  @ApiProperty({ type: String })\n  avatarUrl: string;\n  @IsBoolean()\n  @ApiProperty({ type: Boolean })\n  bot: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiscordUser.html":{"url":"classes/DiscordUser.html","title":"class - DiscordUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiscordUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accentColor\n                            \n                            \n                                    \n                                    \n                                avatarURL\n                            \n                            \n                                    \n                                    \n                                bannerURL\n                            \n                            \n                                    \n                                    \n                                bot\n                            \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                discriminator\n                            \n                            \n                                    \n                                    \n                                displayAvatarURL\n                            \n                            \n                                    \n                                    \n                                flags\n                            \n                            \n                                    \n                                    \n                                hexAccentColor\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                system\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accentColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The accent color of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatarURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The avatar url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bannerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The banner url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the user is a bot', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The created timestamp of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        discriminator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The discriminator of the user but now ITS ALWAYS 0', example: '1234', deprecated: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        displayAvatarURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The display avatar url of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The flags of the user', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hexAccentColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The hex accent color of the user', example: '#000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the user', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        system\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the user is a system user', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The username of the user', example: 'John Doe'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/user.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsNumber, IsString } from 'class-validator';\n\nclass DiscordUser {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the user',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The username of the user',\n    example: 'John Doe',\n  })\n  username: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The discriminator of the user but now ITS ALWAYS 0',\n    example: '1234',\n    deprecated: true,\n  })\n  discriminator: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The avatar url of the user',\n  })\n  avatarURL: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The display avatar url of the user',\n  })\n  displayAvatarURL: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The banner url of the user',\n  })\n  bannerURL: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the user is a bot',\n    example: false,\n  })\n  bot: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the user is a system user',\n    example: false,\n  })\n  system: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The flags of the user',\n    example: 0,\n  })\n  flags: number;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The created timestamp of the user',\n    example: 0,\n  })\n  createdTimestamp: number;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The accent color of the user',\n    example: 0,\n  })\n  accentColor: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The hex accent color of the user',\n    example: '#000000',\n  })\n  hexAccentColor: string;\n}\nconst userResponseSchema = {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    username: { type: 'string' },\n    discriminator: { type: 'string' },\n    avatarURL: { type: 'string' },\n    displayAvatarURL: { type: 'string' },\n    bannerURL: { type: 'string' },\n    bot: { type: 'boolean' },\n    system: { type: 'boolean' },\n    flags: { type: 'number' },\n    createdTimestamp: { type: 'number' },\n    accentColor: { type: 'number' },\n    hexAccentColor: { type: 'string' },\n  },\n};\nconst usersResponseSchema = {\n  type: 'array',\n  items: userResponseSchema,\n};\nexport { DiscordUser, userResponseSchema, usersResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DmMessageHandler.html":{"url":"injectables/DmMessageHandler.html","title":"injectable - DmMessageHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DmMessageHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/message-create/dm-message/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                dmMessageToModTeam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        dmMessageToModTeam\n                        \n                    \n                \n            \n            \n                \n                        \n                    dmMessageToModTeam(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageIsDmGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/dm-message/index.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(DmMessageHandler.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/message-create/dm-message/index.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { On } from '@discord-nestjs/core';\nimport { Injectable, Logger, UseGuards } from '@nestjs/common';\nimport {\n  Message,\n  ActionRowBuilder,\n  ButtonBuilder,\n  DiscordAPIError,\n} from 'discord.js';\nimport { MessageIsDmGuard } from 'src/bot/guards/message-is-dm.guard';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Injectable()\nexport class DmMessageHandler {\n  logger = new Logger(DmMessageHandler.name);\n\n  @On('messageCreate')\n  @UseGuards(MessageIsDmGuard)\n  async dmMessageToModTeam(message: Message): Promise {\n    try {\n      await message.reply({\n        content:\n          'Ich bin zwar nur ein Bot und kann kein Koverstionen führen, aber ich kann dir helfen. Klicke auf den Button, um Hilfe zu bekommen.',\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n    } catch (e: unknown) {\n      this.logger.error((e as DiscordAPIError).message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditRoleData.html":{"url":"classes/EditRoleData.html","title":"class - EditRoleData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditRoleData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                color\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                hoist\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                icon\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                mentionable\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                permissions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                position\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                unicodeEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ColorResolvable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(undefined)@ApiProperty({enum: Colors, required: false, example: 'White', examples: undefined, description: 'New color of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:143\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        hoist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Whether or not the role should be hoisted'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:160\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Base64Resolvable | EmojiResolvable | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New Icon of the role, base64 encoded string', externalDocs: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:203\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        mentionable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Should the role be mentionable or not'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:190\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New name of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PermissionResolvable\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(undefined)@IsOptional()@ApiProperty({type: undefined, required: false, description: 'Updated Permission', default: undefined, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:181\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({type: Number, required: false, description: 'The position of the role; Higher = more permissions relative to the role below'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, required: true, description: 'Why was the role updated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:151\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        unicodeEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'The new unicodeEmoji of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:212\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nimport {\n  Base64Resolvable,\n  ColorResolvable,\n  Colors,\n  EmojiResolvable,\n  PermissionFlagsBits,\n  PermissionResolvable,\n} from 'discord.js';\n\nclass RoleResponse {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild the api belongs to',\n    example: '123456789012345678',\n  })\n  guild: string;\n\n  @IsUrl()\n  @ApiProperty({\n    type: String,\n    description: 'The icon of the role',\n    example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n  })\n  icon: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The unicodeEmoji of the role',\n    example: '👑',\n  })\n  unicodeEmoji: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the role',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The name of the role',\n    example: 'Admin',\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The color of the role',\n    example: 0,\n  })\n  color: number;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is hoisted',\n    example: false,\n  })\n  hoist: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The position of the role',\n    example: 0,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The permissions of the role',\n    example: '0',\n  })\n  permissions: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is managed by an integration',\n    example: false,\n  })\n  managed: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is mentionable',\n    example: false,\n  })\n  mentionable: boolean;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The tags of the role',\n    example: null,\n  })\n  tags: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The timestamp the role was created at(Unixtimestamp)',\n    example: 1600000000000,\n  })\n  createdTimestamp: number;\n}\n\nclass EditRoleData {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsIn(Object.keys(Colors))\n  @ApiProperty({\n    enum: Colors,\n    required: false,\n    example: 'White',\n    examples: Object.keys(Colors),\n    description: 'New color of the role',\n  })\n  color?: ColorResolvable;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'Why was the role updated',\n  })\n  reason: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Whether or not the role should be hoisted',\n  })\n  hoist?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description:\n      'The position of the role; Higher = more permissions relative to the role below',\n  })\n  position?: number;\n\n  @IsIn(Object.keys(PermissionFlagsBits))\n  @IsOptional()\n  @ApiProperty({\n    type: Array,\n    required: false,\n    description: 'Updated Permission',\n    default: null,\n    example: ['AddReactions', 'KickMembers'],\n  })\n  permissions?: PermissionResolvable;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the role be mentionable or not',\n  })\n  mentionable?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New Icon of the role, base64 encoded string',\n    externalDocs: {\n      description: 'Discord.js docs',\n      url: 'https://old.discordjs.dev/#/docs/discord.js/main/class/Role?scrollTo=setIcon',\n    },\n  })\n  icon?: Base64Resolvable | EmojiResolvable | null;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'The new unicodeEmoji of the role',\n  })\n  unicodeEmoji?: string | null;\n}\n// Generate example schema for get /guilds/:guildId/roles/:roleId\nconst roleResponseSchema = {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n};\n// Schema for retrieving all roles from a guild with example data\nconst rolesResponseSchema = {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n};\n\n// Write exports here\nexport { RoleResponse, EditRoleData, roleResponseSchema, rolesResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventToLog.html":{"url":"interfaces/EventToLog.html","title":"interface - EventToLog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventToLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/interfaces/event-to-log.ts\n        \n\n\n            \n                Description\n            \n            \n                Thrown events that implement this can be used to pretty print into the application log\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        toFormattedLog\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/interfaces/event-to-log.ts:11\n                        \n                    \n\n\n            \n                \n                        Pretty print function on thrown events within the app, not all events implement this!!\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Logger which is used for logging to the nestjs app log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\n\n/**\n * Thrown events that implement this can be used to pretty print into the application log\n */\nexport interface EventToLog {\n  /**\n   * Pretty print function on thrown events within the app, not all events implement this!!\n   * @param logger Logger which is used for logging to the nestjs app log\n   */\n  toFormattedLog(logger: Logger): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Explorer.html":{"url":"classes/Explorer.html","title":"class - Explorer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Explorer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/explorers/event.explorer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                botEventDecorator\n                            \n                            \n                                    Public\n                                checkProviders\n                            \n                            \n                                    Private\n                                hasHandlerMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, externalContextCreator: ExternalContextCreator)\n                    \n                \n                        \n                            \n                                Defined in src/bot/explorers/event.explorer.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        externalContextCreator\n                                                  \n                                                        \n                                                                    ExternalContextCreator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        botEventDecorator\n                        \n                    \n                \n            \n            \n                \n                        \n                    botEventDecorator(provider: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        checkProviders\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkProviders(providers: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                providers\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasHandlerMethod\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasHandlerMethod(provider: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/explorers/event.explorer.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                provider\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\nimport {\n  BOT_EVENT_KEY,\n  BOT_EVENT_HANDLER_NAME,\n} from '../decorators/bot-event.decorator';\nimport { ExternalContextCreator } from '@nestjs/core';\n\nexport class Explorer {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    private readonly externalContextCreator: ExternalContextCreator,\n  ) {}\n  public checkProviders(providers: any[]): void {\n    for (const provider of providers) {\n      const metadata = this.botEventDecorator(provider);\n      if (metadata) {\n        if (!this.hasHandlerMethod(provider)) {\n          throw new Error(\n            `The provider ${provider.name} does not have a handler method, does it implement BotEvent?`,\n          );\n        }\n        const handler = this.externalContextCreator.create(\n          provider,\n          provider[BOT_EVENT_HANDLER_NAME],\n          BOT_EVENT_HANDLER_NAME,\n        );\n        this.client.on(metadata, handler);\n      }\n    }\n  }\n\n  private botEventDecorator(provider: any) {\n    return Reflect.getMetadata(BOT_EVENT_KEY, provider);\n  }\n\n  private hasHandlerMethod(provider: any): boolean {\n    return (\n      provider.prototype.hasOwnProperty(BOT_EVENT_HANDLER_NAME) &&\n      typeof provider.prototype.handler === 'function'\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Guild.html":{"url":"classes/Guild.html","title":"class - Guild","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Guild\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                guildId\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['guildId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { GuildUser } from '@prisma/client';\n\nexport class Guild {\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) name: string;\n  @ApiProperty({ type: String }) image: string;\n}\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n  @ApiPropertyOptional({ type: [Guild] }) guilds: Guild[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildAutoDeleteChannelController.html":{"url":"controllers/GuildAutoDeleteChannelController.html","title":"controller - GuildAutoDeleteChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildAutoDeleteChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                autodeletechannel\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createAutoDeleteChannel\n                            \n                            \n                                    \n                                    Async\n                                getAutoDeleteChannel\n                            \n                            \n                                    \n                                    Async\n                                updateAutoDeleteChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAutoDeleteChannel(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAutoDeleteChannel(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateAutoDeleteChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAutoDeleteChannel(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { GuildAutoDeleteChannelService } from './guild-auto-delete-channel.service';\nimport { GuildAutoDeleteChannelDto } from './dto/auto-delete-channels.dto';\nimport { plainToInstance } from 'class-transformer';\n\n@Controller('autodeletechannel')\nexport class GuildAutoDeleteChannelController {\n  constructor(\n    @Inject(GuildAutoDeleteChannelService)\n    private readonly guildAutoDeleteChannelService: GuildAutoDeleteChannelService,\n  ) {}\n\n  @Get()\n  async getAutoDeleteChannel(@Param('guildId') guildId: string) {\n    const autoDeleteChannels =\n      await this.guildAutoDeleteChannelService.get(guildId);\n    if (!autoDeleteChannels) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, autoDeleteChannels);\n  }\n\n  @Post()\n  async createAutoDeleteChannel(\n    @Param('guildId') guildId: string,\n    @Body() autoDeleteChannel: GuildAutoDeleteChannelDto,\n  ) {\n    this.guildAutoDeleteChannelService.get(guildId).then(() => {\n      throw new ConflictException(\n        `Channel ${channel.channelId} already exists`,\n      );\n    });\n    const channel = await this.guildAutoDeleteChannelService.upsert(\n      guildId,\n      autoDeleteChannel,\n    );\n    if (!channel) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, channel);\n  }\n\n  @Put()\n  async updateAutoDeleteChannel(\n    @Param('guildId') guildId: string,\n    @Body() autoDeleteChannel: GuildAutoDeleteChannelDto,\n  ) {\n    const channel = await this.guildAutoDeleteChannelService.upsert(\n      guildId,\n      autoDeleteChannel,\n    );\n    if (!channel) {\n      throw new NotFoundException();\n    }\n    return plainToInstance(GuildAutoDeleteChannelDto, channel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildAutoDeleteChannelDto.html":{"url":"classes/GuildAutoDeleteChannelDto.html","title":"class - GuildAutoDeleteChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildAutoDeleteChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                    \n                                deleteAtCron\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        deleteAtCron\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(/^(((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7}$/, {message: 'Invalid cron expression'})@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { AutoDeleteChannels } from '@prisma/client';\nimport { IsString, Matches } from 'class-validator';\n\nexport class GuildAutoDeleteChannelDto\n  implements Omit\n{\n  @IsString()\n  @ApiProperty({ type: String })\n  channelId: string;\n  @IsString()\n  @Matches(/^(((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7}$/, {\n    message: 'Invalid cron expression',\n  })\n  @ApiProperty({ type: String })\n  deleteAtCron: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildAutoDeleteChannelModule.html":{"url":"modules/GuildAutoDeleteChannelModule.html","title":"module - GuildAutoDeleteChannelModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildAutoDeleteChannelModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildAutoDeleteChannelModule\n\n\n\ncluster_GuildAutoDeleteChannelModule_exports\n\n\n\ncluster_GuildAutoDeleteChannelModule_providers\n\n\n\n\nGuildAutoDeleteChannelService \n\nGuildAutoDeleteChannelService \n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelService  -->\n\nGuildAutoDeleteChannelModule->GuildAutoDeleteChannelService \n\n\n\n\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildAutoDeleteChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildRestrictedChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nGuildAutoDeleteChannelModule -->\n\nGuildService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildAutoDeleteChannelModule -->\n\nGuildSettingsService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nGuildAutoDeleteChannelModule -->\n\nGuildUserService->GuildAutoDeleteChannelModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildAutoDeleteChannelModule -->\n\nPrismaService->GuildAutoDeleteChannelModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nGuildAutoDeleteChannelModule -->\n\nTasksService->GuildAutoDeleteChannelModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildAutoDeleteChannelService\n                        \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildAutoDeleteChannelController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildAutoDeleteChannelService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildAutoDeleteChannelService } from './guild-auto-delete-channel.service';\nimport { GuildAutoDeleteChannelController } from './guild-auto-delete-channel.controller';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\nimport { TasksService } from 'src/tasks/tasks.service';\nimport { GuildService } from '../guild.service';\nimport { GuildUserService } from '../guild-user/guild-user.service';\nimport { GuildRestrictedChannelService } from '../guild-restricted-channel/guild-restricted-channel.service';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [\n    GuildAutoDeleteChannelService,\n    PrismaService,\n    TasksService,\n    GuildService,\n    GuildUserService,\n    GuildRestrictedChannelService,\n    GuildSettingsService,\n  ],\n  controllers: [GuildAutoDeleteChannelController],\n  exports: [GuildAutoDeleteChannelService],\n})\nexport class GuildAutoDeleteChannelModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildAutoDeleteChannelService.html":{"url":"injectables/GuildAutoDeleteChannelService.html","title":"injectable - GuildAutoDeleteChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildAutoDeleteChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                constructChannelDeleteJobs\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService, tasksService: TasksService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tasksService\n                                                  \n                                                        \n                                                                        TasksService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        constructChannelDeleteJobs\n                        \n                    \n                \n            \n            \n                \n                        \n                    constructChannelDeleteJobs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                autoDeleteChannel\n                                            \n                                                            GuildAutoDeleteChannelDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GuildAutoDeleteChannelService.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Client, GuildChannel } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { TasksService } from 'src/tasks/tasks.service';\nimport { GuildAutoDeleteChannelDto } from './dto/auto-delete-channels.dto';\n\n@Injectable()\nexport class GuildAutoDeleteChannelService {\n  logger = new Logger(GuildAutoDeleteChannelService.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(TasksService) private tasksService: TasksService,\n  ) {}\n  async get(guildId: string) {\n    return await this.database.autoDeleteChannels.findMany({\n      where: { guildId },\n    });\n  }\n  async upsert(guildId: string, autoDeleteChannel: GuildAutoDeleteChannelDto) {\n    const channelId = autoDeleteChannel.channelId;\n    return this.database.autoDeleteChannels.upsert({\n      where: {\n        channelId,\n        guildId,\n      },\n      create: {\n        ...autoDeleteChannel,\n        guildId,\n      },\n      update: {\n        ...autoDeleteChannel,\n        guildId,\n      },\n    });\n  }\n\n  async constructChannelDeleteJobs() {\n    const guilds = await this.database.guild.findMany({\n      select: {\n        AutoDeleteChannels: true,\n      },\n    });\n    guilds.forEach((guild) => {\n      guild.AutoDeleteChannels.forEach((deleteChannel) => {\n        this.tasksService.createDynamicScheduledJob({\n          cronTime: deleteChannel.deleteAtCron,\n          onTick: async () => {\n            const channelId = deleteChannel.channelId;\n            const guildId = deleteChannel.guildId;\n            this.logger.log(\n              `Deleting channel ${channelId} in guild ${guildId}`,\n            );\n            const guild = await this.client.guilds.fetch(guildId);\n            const channel = (await guild.channels.fetch(\n              channelId,\n            )) as GuildChannel;\n            const nChannel = await channel.clone();\n            await channel.delete();\n            Promise.all([\n              nChannel.setPosition(channel.position),\n              nChannel.setParent(channel.parentId),\n              nChannel.setName(channel.name),\n            ]);\n          },\n          timeZone: 'Europe/Berlin',\n        });\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildChannelEditOptions.html":{"url":"classes/GuildChannelEditOptions.html","title":"class - GuildChannelEditOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildChannelEditOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nsfw\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                parent\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                topic\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                userLimit\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'New name of the role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nsfw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@ApiProperty({type: Boolean, required: false, description: 'Should the channel be NSFW'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:189\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryChannelResolvable | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['String', 'undefined', 'CategoryChannel'])@IsOptional()@ApiProperty({type: undefined, required: false, description: 'Category of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, required: false, description: 'Why was the channel updated/created'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:215\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'Topic of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:180\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChannelType.GuildText | ChannelType.GuildAnnouncement\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ChannelType)@IsOptional()@ApiProperty({enum: ChannelType, required: false, description: 'Change the type of the channel'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        userLimit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@ApiProperty({type: Number, required: false, description: 'Slowmode for the channel in seconds'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:198\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildController.html":{"url":"controllers/GuildController.html","title":"controller - GuildController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                messagesPerChannelLastMonth\n                            \n                            \n                                    \n                                    Async\n                                messagesPerDayLastMonth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        messagesPerChannelLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    messagesPerChannelLastMonth(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('messages-per-channel-last-month')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        messagesPerDayLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    messagesPerDayLastMonth(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('messages-per-day-last-month')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, Param, UseGuards } from '@nestjs/common';\nimport { GuildService } from './guild.service';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\n\n@Controller('/')\n@UseGuards(JwtAuthGuard)\nexport class GuildController {\n  constructor(\n    @Inject(GuildService) private guildService: GuildService,\n    @InjectDiscordClient() private client: Client,\n  ) {}\n\n  @Get('messages-per-channel-last-month')\n  async messagesPerChannelLastMonth(@Param('guildId') guildId: string) {\n    const data =\n      await this.guildService.averageMessagesPerChannelLastMonth(guildId);\n    const labels = [];\n    const values = Object.values(data);\n    Object.keys(data).forEach(async (key) => {\n      labels.push(\n        (await (await this.client.guilds.fetch(guildId)).channels.fetch(key))\n          .name,\n      );\n    });\n    return {\n      labels,\n      values,\n    };\n  }\n  @Get('messages-per-day-last-month')\n  async messagesPerDayLastMonth(@Param('guildId') guildId: string) {\n    const data =\n      await this.guildService.averageMessagesPerDayLastMonth(guildId);\n    const labels = [];\n    const values = Object.values(data);\n    Object.keys(data).forEach((key) => {\n      labels.push(key);\n    });\n    return {\n      labels,\n      values,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildDoesNotExistException.html":{"url":"classes/GuildDoesNotExistException.html","title":"class - GuildDoesNotExistException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildDoesNotExistException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/guild-does-not-exist-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when a Guild isn't found by ID\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/guild-does-not-exist-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a Guild isn't found by ID\n */\nexport class GuildDoesNotExistException extends Error {\n  constructor(guildId: string) {\n    super(\n      `Guild with the id ${guildId} does not exist or is not using Cardinal System.`,\n    );\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(GuildDoesNotExistException)\nexport class GuildDoesNotExistExceptionFilter implements ExceptionFilter {\n  catch(exception: GuildDoesNotExistException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GuildDoesNotExistExceptionFilter.html":{"url":"classes/GuildDoesNotExistExceptionFilter.html","title":"class - GuildDoesNotExistExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GuildDoesNotExistExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/guild-does-not-exist-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to produce the http response when the exception is thrown in a http context\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: GuildDoesNotExistException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/guild-does-not-exist-exception.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            GuildDoesNotExistException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when a Guild isn't found by ID\n */\nexport class GuildDoesNotExistException extends Error {\n  constructor(guildId: string) {\n    super(\n      `Guild with the id ${guildId} does not exist or is not using Cardinal System.`,\n    );\n  }\n}\n\n/**\n * Filter used to produce the http response when the exception is thrown in a http context\n */\n@Catch(GuildDoesNotExistException)\nexport class GuildDoesNotExistExceptionFilter implements ExceptionFilter {\n  catch(exception: GuildDoesNotExistException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildMemberEvents.html":{"url":"injectables/GuildMemberEvents.html","title":"injectable - GuildMemberEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildMemberEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/guild-members/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addMember\n                            \n                            \n                                    \n                                    \n                                    Async\n                                checkIfPersonWasVerifiedBefore\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    \n                                    Async\n                                removeMember\n                            \n                            \n                                    \n                                    \n                                    Async\n                                unlockUser\n                            \n                            \n                                    \n                                    Async\n                                updateRank\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, guildUserService: GuildUserService, settingsService: GuildSettingsService, guildService: GuildService, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/guild-members/index.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(member: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberAdd')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        checkIfPersonWasVerifiedBefore\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkIfPersonWasVerifiedBefore(reaction: MessageReaction, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageReactionAdd')@UseGuards(undefined, undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                        MessageReaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeMember(member: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberRemove')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        unlockUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unlockUser(reaction: MessageReaction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageReactionAdd')@UseGuards(undefined, undefined, ReactedMemberIsModOrHigherGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                        MessageReaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateRank\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRank(oldMember: GuildMember, newMember: GuildMember)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('guildMemberUpdate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/guild-members/index.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                oldMember\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newMember\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GuildMemberEvents.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/guild-members/index.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, On } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger, UseGuards } from '@nestjs/common';\nimport { Rank } from '@prisma/client';\nimport {\n  Client,\n  GuildMember,\n  MessageReaction,\n  GuildTextBasedChannel,\n  Message,\n  User,\n} from 'discord.js';\nimport { ReactedMemberIsModOrHigherGuard } from 'src/bot/guards/member-is-mod-or-higher.guard';\nimport { ReactionChannelIdGuard } from 'src/bot/guards/reaction-in-channel.guard';\nimport { ReactionEmoteGuard } from 'src/bot/guards/reaction-emote.guard';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { JsonArray } from 'type-fest';\n\n@Injectable()\nexport class GuildMemberEvents {\n  logger = new Logger(GuildMemberEvents.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n    @Inject(GuildService) private readonly guildService: GuildService,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n\n  // Runs whenever the discordjs websocket gets (re)created\n  @On('ready')\n  async onReady(): Promise {\n    // This will always fail, why? IDK FUCKING KNOW and I'm fed up with this project\n    // return await this.database.guild.upsert(\n    // Failed to convert rust `String` into napi `string`\n    try {\n      await this.client.guilds.fetch();\n      this.client.guilds.cache.forEach(async (guild) => {\n        await this.guildService.upsertGuild(guild.id, {\n          name: guild.name,\n        });\n        this.guildUserService.addMembers(guild.id);\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  @On('guildMemberAdd')\n  async addMember(member: GuildMember) {\n    this.logger.log(`Adding member ${member.user.username} to database.`);\n    if (member.user.bot) return;\n    await this.guildUserService.addMember(member.id, member.guild.id, {\n      rank: Rank.NEW,\n      unlocked: false,\n    });\n  }\n\n  @On('guildMemberRemove')\n  async removeMember(member: GuildMember) {\n    await this.guildUserService.deleteOne(member.id, member.guild.id);\n  }\n\n  @On('messageReactionAdd')\n  @UseGuards(\n    ReactionChannelIdGuard('1121822614374060175'),\n\n    ReactionEmoteGuard(['✅', '☑️']),\n    ReactedMemberIsModOrHigherGuard,\n  )\n  async unlockUser(reaction: MessageReaction) {\n    if (reaction.partial) {\n      try {\n        await reaction.fetch();\n      } catch (e) {\n        this.logger.error(e);\n        return;\n      }\n    }\n    const user = await this.guildUserService.getGuildUser(\n      reaction.message.author.id,\n      reaction.message.guildId,\n    );\n    if (!user && user.rank !== Rank.NEW) return;\n    await this.guildUserService.upsert(user.userId, reaction.message.guildId, {\n      unlocked: true,\n      firstMessageId: reaction.message.id,\n    });\n    const member = await (\n      await this.client.guilds.fetch(reaction.message.guildId)\n    ).members.fetch(user.userId);\n    try {\n      if (!member.roles.cache.has('1226585753253843014'))\n        throw 'Has not accepted AGB';\n      const verifiedRoleId = await this.settingsService.getVerifiedMemberRoleId(\n        reaction.message.guildId,\n      );\n      await member.roles.add(verifiedRoleId);\n      if (reaction.emoji.name === '☑️')\n        await member.roles.add('1014066383912439809');\n      // Wait 500ms to make sure the role is added before removing the unverified role\n      //https://github.com/discordjs/discord.js/issues/4930#issuecomment-1042351896\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      await member.roles.remove(\n        await this.settingsService.getUnverifiedMemberRoleId(\n          reaction.message.guildId,\n        ),\n      );\n    } catch (e) {\n      this.logger.error(e);\n      return;\n    }\n    const channel = (await reaction.message.guild.channels.fetch(\n      await this.settingsService.getOpenIntroChannelId(\n        reaction.message.guildId,\n      ),\n    )) as GuildTextBasedChannel;\n    await channel.send(\n      await this.settingsService.templateMessage(\n        reaction.message as Message,\n      ),\n    );\n    await reaction.remove();\n  }\n\n  @On('guildMemberUpdate')\n  async updateRank(oldMember: GuildMember, newMember: GuildMember) {\n    // check if user has been promoted to mod or admin\n    const oldRank = await this.guildUserService.getRank(oldMember);\n    const newRank = await this.guildUserService.getRank(newMember);\n    if (oldRank === newRank) return;\n    this.logger.log(\n      `User ${newMember.user.username} has been promoted from ${oldRank} to ${newRank}`,\n    );\n    await this.guildUserService.upsert(newMember.id, newMember.guild.id, {\n      rank: newRank,\n    });\n  }\n\n  @On('messageReactionAdd')\n  @UseGuards(\n    ReactionChannelIdGuard('1226574989147508746'),\n    ReactionEmoteGuard(['👍']),\n  )\n  async checkIfPersonWasVerifiedBefore(reaction: MessageReaction, user: User) {\n    if (reaction.partial) {\n      try {\n        await reaction.fetch();\n      } catch (e) {\n        this.logger.error(e);\n        return;\n      }\n    }\n    const dbUser = await this.database.guildUser.findUnique({\n      where: {\n        guildId_userId: { guildId: reaction.message.guildId, userId: user.id },\n      },\n    });\n    const discordUser = await this.client.guilds.cache\n      .get(dbUser.guildId)\n      .members.fetch(user.id);\n    if (!dbUser && discordUser.roles.cache.has('1121823930085285938')) {\n      const roles = (\n        await this.database.lockdownRoleBackup.findUnique({\n          where: {\n            guildId_userId: { guildId: dbUser.guildId, userId: user.id },\n          },\n        })\n      ).roles as JsonArray;\n      if (!roles) return;\n      // Tyep system gets a bit iffy here :/\n      roles.forEach(\n        async (role: { id: string }) => await discordUser.roles.add(role.id),\n      );\n      await discordUser.roles.remove('1121823930085285938');\n      await this.database.lockdownRoleBackup.delete({\n        where: { guildId_userId: { userId: user.id, guildId: dbUser.guildId } },\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildMessageHandler.html":{"url":"injectables/GuildMessageHandler.html","title":"injectable - GuildMessageHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildMessageHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/message-create/guild-message/index.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                onMessage\n                            \n                            \n                                    \n                                    \n                                    Async\n                                toniMsgsToBird\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildUserService: GuildUserService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/message-create/guild-message/index.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageFromUserGuard, IsUserUnlockedGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/guild-message/index.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        toniMsgsToBird\n                        \n                    \n                \n            \n            \n                \n                        \n                    toniMsgsToBird(message: Message)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('messageCreate')@UseGuards(MessageFromUserGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/message-create/guild-message/index.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { On } from '@discord-nestjs/core';\nimport { Inject, Injectable, UseGuards } from '@nestjs/common';\nimport { Attachment, GuildTextBasedChannel, Message } from 'discord.js';\nimport { MessageFromUserGuard } from 'src/bot/guards/message-from-user.guard';\nimport { IsUserUnlockedGuard } from 'src/bot/guards/user-is-unlocked.guard';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport getAttachmentType from 'src/util/functions/get-attachtment-type';\n\n@Injectable()\nexport default class GuildMessageHandler {\n  constructor(\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n  ) {}\n  @On('messageCreate')\n  @UseGuards(MessageFromUserGuard, IsUserUnlockedGuard)\n  async onMessage(message: Message): Promise {\n    await this.guildUserService.insertMessage(\n      {\n        userId: message.author.id,\n        messageId: message.id,\n        channelId: message.channelId,\n        guildId: message.guildId,\n        createdAt: new Date(message.createdTimestamp),\n      },\n      {\n        messageId: message.id,\n        length: message.content.length,\n      },\n      message.attachments.map((attachment: Attachment) => {\n        return {\n          type: getAttachmentType(attachment.contentType),\n          url: attachment.url,\n          messageId: message.id,\n        };\n      }),\n      message.reactions.cache.map((reaction) => {\n        return {\n          messageId: message.id,\n          emoji: reaction.emoji.toString(),\n          count: reaction.count,\n        };\n      }),\n    );\n    await this.guildUserService.updateMessageCountBucket(\n      message.author.id,\n      message.guildId,\n    );\n  }\n\n  @On('messageCreate')\n  @UseGuards(MessageFromUserGuard)\n  async toniMsgsToBird(message: Message): Promise {\n    const channel = message.channel as GuildTextBasedChannel;\n    if (\n      channel.parentId !== '1011529685357838376' &&\n      channel.parentId !== '1051979218164125826'\n    ) {\n      if (message.author.id === '1132244079242133555')\n        message.react('1194715694948946030');\n    }\n  }\n\n  // @On('messageCreate')\n  // @UseGuards(MessageFromUserGuard)\n  // async checkLimits(message: Message) {\n  //   const guildUser = this.guildUserService.getGuildUser(\n  //     message.author.id,\n  //     message.guildId,\n  //   );\n  //   const hasAttachments = message.attachments.size > 0;\n  //   const typeOfAttachments = message.attachments.map(\n  //     (attachment: Attachment) => {\n  //       return ({}[getAttachmentType(attachment.contentType)] = attachment);\n  //     },\n  //   );\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildModule.html":{"url":"modules/GuildModule.html","title":"module - GuildModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildModule\n\n\n\ncluster_GuildModule_exports\n\n\n\ncluster_GuildModule_providers\n\n\n\ncluster_GuildModule_imports\n\n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\n\n\nGuildModule\n\nGuildModule\n\nGuildModule -->\n\nGuildAutoDeleteChannelModule->GuildModule\n\n\n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildModule -->\n\nGuildRestrictedChannelModule->GuildModule\n\n\n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildModule -->\n\nGuildSettingsModule->GuildModule\n\n\n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildModule -->\n\nGuildUserModule->GuildModule\n\n\n\n\n\nModerationModule\n\nModerationModule\n\nGuildModule -->\n\nModerationModule->GuildModule\n\n\n\n\n\nGuildService \n\nGuildService \n\nGuildService  -->\n\nGuildModule->GuildService \n\n\n\n\n\nDmMessageHandler\n\nDmMessageHandler\n\nGuildModule -->\n\nDmMessageHandler->GuildModule\n\n\n\n\n\nGuildMemberEvents\n\nGuildMemberEvents\n\nGuildModule -->\n\nGuildMemberEvents->GuildModule\n\n\n\n\n\nGuildMessageHandler\n\nGuildMessageHandler\n\nGuildModule -->\n\nGuildMessageHandler->GuildModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildModule -->\n\nGuildRestrictedChannelService->GuildModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nGuildModule -->\n\nGuildService->GuildModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildModule -->\n\nPrismaService->GuildModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DmMessageHandler\n                        \n                        \n                            GuildMemberEvents\n                        \n                        \n                            GuildMessageHandler\n                        \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            GuildAutoDeleteChannelModule\n                        \n                        \n                            GuildRestrictedChannelModule\n                        \n                        \n                            GuildSettingsModule\n                        \n                        \n                            GuildUserModule\n                        \n                        \n                            ModerationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildController } from './guild.controller';\nimport { GuildService } from './guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildSettingsModule } from './guild-settings/guild-settings.module';\nimport { ModerationModule } from './moderation/moderation.module';\nimport { GuildUserModule } from './guild-user/guild-user.module';\nimport { GuildAutoDeleteChannelModule } from './guild-auto-delete-channel/guild-auto-delete-channel.module';\nimport { GuildRestrictedChannelModule } from './guild-restricted-channel/guild-restricted-channel.module';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel/guild-restricted-channel.service';\nimport GuildMessageHandler from './events/message-create/guild-message';\nimport { DmMessageHandler } from './events/message-create/dm-message';\nimport { ModRequestFlow } from './events/interaction-create/mod-request-menu';\nimport { GuildMemberEvents } from './events/guild-members';\n\n@Module({\n  imports: [\n    DiscordModule.forFeature(),\n    GuildUserModule,\n    GuildSettingsModule,\n    ModerationModule,\n    GuildAutoDeleteChannelModule,\n    GuildRestrictedChannelModule,\n  ],\n  controllers: [GuildController],\n  providers: [\n    GuildService,\n    PrismaService,\n    GuildRestrictedChannelService,\n    GuildMessageHandler,\n    DmMessageHandler,\n    ModRequestFlow,\n    GuildMemberEvents,\n  ],\n  exports: [GuildService],\n})\nexport class GuildModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildRestrictedChannelController.html":{"url":"controllers/GuildRestrictedChannelController.html","title":"controller - GuildRestrictedChannelController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildRestrictedChannelController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                guild-restricted-channel\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('guild-restricted-channel')\nexport class GuildRestrictedChannelController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildRestrictedChannelModule.html":{"url":"modules/GuildRestrictedChannelModule.html","title":"module - GuildRestrictedChannelModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildRestrictedChannelModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildRestrictedChannelModule\n\n\n\ncluster_GuildRestrictedChannelModule_exports\n\n\n\ncluster_GuildRestrictedChannelModule_providers\n\n\n\n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService \n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelService  -->\n\nGuildRestrictedChannelModule->GuildRestrictedChannelService \n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelModule -->\n\nGuildRestrictedChannelService->GuildRestrictedChannelModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildRestrictedChannelModule -->\n\nPrismaService->GuildRestrictedChannelModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildRestrictedChannelController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildRestrictedChannelController } from './guild-restricted-channel.controller';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  controllers: [GuildRestrictedChannelController],\n  providers: [GuildRestrictedChannelService, PrismaService],\n  exports: [GuildRestrictedChannelService],\n})\nexport class GuildRestrictedChannelModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildRestrictedChannelService.html":{"url":"injectables/GuildRestrictedChannelService.html","title":"injectable - GuildRestrictedChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildRestrictedChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-restricted-channel/guild-restricted-channel.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getRestrictedChannel\n                            \n                            \n                                    Async\n                                isChannelAvailableToUser\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRestrictedChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRestrictedChannel(guildId: string, channelId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isChannelAvailableToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    isChannelAvailableToUser(user: GuildUser, channel: RestrictedChannels)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            GuildUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel\n                                            \n                                                            RestrictedChannels\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(guildId: string, channelId: string, data: Omit, guildId> | channelId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-restricted-channel/guild-restricted-channel.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, guildId> | channelId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { GuildUser, RestrictedChannels } from '@prisma/client';\nimport { Client } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Injectable()\nexport class GuildRestrictedChannelService {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  async getRestrictedChannel(guildId: string, channelId: string) {\n    return this.database.restrictedChannels.findUnique({\n      where: {\n        guildId,\n        channelId,\n      },\n    });\n  }\n  async upsert(\n    guildId: string,\n    channelId: string,\n    data: Omit, 'guildId'>, 'channelId'>,\n  ) {\n    return this.database.restrictedChannels.upsert({\n      where: {\n        channelId,\n        guildId,\n      },\n      create: {\n        ...data,\n        channelId,\n        guildId,\n      },\n      update: {\n        ...data,\n        channelId,\n        guildId,\n      },\n    });\n  }\n  async getAll(guildId: string) {\n    return this.database.restrictedChannels.findMany({\n      where: {\n        guildId,\n      },\n    });\n  }\n\n  async isChannelAvailableToUser(user: GuildUser, channel: RestrictedChannels) {\n    return user.messageCountBucket >= channel.requiredPoints;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildService.html":{"url":"injectables/GuildService.html","title":"injectable - GuildService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _addMemberToChannelOverwrite\n                            \n                            \n                                    Private\n                                    Async\n                                _removeMemberFromChannelOverwrite\n                            \n                            \n                                    Async\n                                averageMessagesPerChannelLastMonth\n                            \n                            \n                                    Async\n                                averageMessagesPerDayLastMonth\n                            \n                            \n                                    Async\n                                cleanWfpMembers\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    Async\n                                updateChannelPermissions\n                            \n                            \n                                    Async\n                                upsertGuild\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, restrictedChannelService: GuildRestrictedChannelService, client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        restrictedChannelService\n                                                  \n                                                        \n                                                                        GuildRestrictedChannelService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _addMemberToChannelOverwrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    _addMemberToChannelOverwrite(user_id: string, channel_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:223\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _removeMemberFromChannelOverwrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    _removeMemberFromChannelOverwrite(user_id: string, channel_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:234\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                channel_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        averageMessagesPerChannelLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    averageMessagesPerChannelLastMonth(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:112\n                        \n                    \n\n\n            \n                \n                        Returns the average written messages per channel for last 30 days for the given guild.\nSQL:\n SELECT\n  m.channelId,\n  m.userId,\n  COUNT(m.messageId) AS messageCount,\n  AVG(subquery.messageCount) AS avgMessageCount\nFROM\n  Message m\nJOIN\n  (SELECT channelId, COUNT(messageId) / 30 AS messageCount\n  FROM Message\n  WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\n  GROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\nWHERE\n  m.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY\n  m.channelId, m.userId\nORDER BY\n avgMessageCount DESC;\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A map that contains each channel ID and the average written messages\nSQL:\nSELECT\nm.channelId,\nm.userId,\nCOUNT(m.messageId) AS messageCount,\nAVG(subquery.messageCount) AS avgMessageCount\nFROM\nMessage m\nJOIN\n(SELECT channelId, COUNT(messageId) / 30 AS messageCount\nFROM Message\nWHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\nGROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\nWHERE\nm.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nGROUP BY\nm.channelId, m.userId\nORDER BY\navgMessageCount DESC;\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        averageMessagesPerDayLastMonth\n                        \n                    \n                \n            \n            \n                \n                        \n                    averageMessagesPerDayLastMonth(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:170\n                        \n                    \n\n\n            \n                \n                        Returns the average written message per day in the last 30 days per channel\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanWfpMembers(guildID: string, dryRun: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                guildID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                dryRun\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Once('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:247\n                        \n                    \n\n\n            \n                \n                        Event handler that listens to the ready event which is fired when the bot websocket has been created.\nSets up all guilds in the database if they dont already exist there or updates them.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateChannelPermissions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateChannelPermissions(user: GuildUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:203\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            GuildUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsertGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsertGuild(guildId: string, data: Omit | id>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit | id>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, Once } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { Guild, GuildUser } from '@prisma/client';\nimport { Client, BaseGuildTextChannel, GuildMember } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildRestrictedChannelService } from './guild-restricted-channel/guild-restricted-channel.service';\n\n@Injectable()\nexport class GuildService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(GuildRestrictedChannelService)\n    private restrictedChannelService: GuildRestrictedChannelService,\n    @InjectDiscordClient() private client: Client,\n  ) {}\n\n  async upsertGuild(guildId: string, data: Omit, 'id'>) {\n    try {\n      return await this.database.guild.upsert({\n        where: {\n          id: guildId,\n        },\n        select: {\n          AuditLog: true,\n          Settings: true,\n          AutoDeleteChannels: true,\n          RestrictedChannels: true,\n          Limits: true,\n        },\n        create: {\n          id: guildId,\n          Settings: {\n            create: {},\n          },\n          ...data,\n        },\n        update: {\n          ...data,\n        },\n      });\n    } catch (e) {\n      return e;\n    }\n  }\n\n  async cleanWfpMembers(\n    guildID: string,\n    dryRun: boolean = false,\n  ): Promise>> {\n    const twoWeekDate = new Date(new Date().setDate(new Date().getDate() - 14));\n    const membersUnfiltered = (\n      await (\n        await this.client.guilds.fetch(guildID)\n      ).roles.fetch('1121823930085285938')\n    ).members;\n    const members: Array = [];\n    membersUnfiltered.forEach(async (member) => {\n      if (\n        twoWeekDate > new Date(member.joinedTimestamp) &&\n        // Has not VereinsMitglied\n        !member.roles.cache.has('1070116538083975309')\n      ) {\n        members.push(member);\n      }\n    });\n    // Return early if we are in a dry fun\n    if (dryRun)\n      return {\n        membersToKick: members,\n        unkickableMembers: [],\n      };\n    const unkickableMembers: Array = [];\n    members.forEach(async (member) => {\n      try {\n        await member.kick(\n          'Kicked by the bot for being in wfp for more than 2 weeks',\n        );\n      } catch {\n        unkickableMembers.push(member);\n      }\n    });\n    return {\n      membersToKick: members,\n      unkickableMembers: unkickableMembers,\n    };\n  }\n\n  /**\n   * Returns the average written messages per channel for last 30 days for the given guild.\n   * @returns A map that contains each channel ID and the average written messages\n   *\n   * SQL:\n   *  SELECT\n   *   m.channelId,\n   *   m.userId,\n   *   COUNT(m.messageId) AS messageCount,\n   *   AVG(subquery.messageCount) AS avgMessageCount\n   * FROM\n   *   Message m\n   * JOIN\n   *   (SELECT channelId, COUNT(messageId) / 30 AS messageCount\n   *   FROM Message\n   *   WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY) AND guildId = '123'\n   *   GROUP BY channelId) AS subquery ON m.channelId = subquery.channelId\n   * WHERE\n   *   m.createdAt >= DATE_SUB(NOW(), INTERVAL 30 DAY)\n   * GROUP BY\n   *   m.channelId, m.userId\n   * ORDER BY\n   *  avgMessageCount DESC;\n   */\n  async averageMessagesPerChannelLastMonth(\n    guildId: string,\n  ): Promise> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageStats = await this.database.messages.groupBy({\n      by: ['channelId', 'userId'],\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        AND: {\n          guildId: guildId,\n        },\n      },\n      _count: {\n        messageId: true,\n      },\n      orderBy: {\n        _count: {\n          messageId: 'desc',\n        },\n      },\n    });\n\n    const messageCounts: Record\n    > = messageStats.reduce((acc, curr) => {\n      const channelId = curr.channelId.toString();\n      const userId = curr.userId.toString();\n      const count = curr._count?.messageId ?? 0;\n\n      if (!acc[channelId]) {\n        acc[channelId] = {};\n      }\n\n      acc[channelId][userId] = count;\n\n      return acc;\n    }, {});\n\n    const avgMessageCounts = {};\n\n    for (const channelId in messageCounts) {\n      const userCounts = Object.values(messageCounts[channelId]);\n      const avgMessageCount =\n        userCounts.reduce((sum, count) => sum + count, 0) / userCounts.length;\n      avgMessageCounts[channelId] = avgMessageCount;\n    }\n\n    return avgMessageCounts;\n  }\n  /**\n   * Returns the average written message per day in the last 30 days per channel\n   * @param guildId string\n   * @returns\n   */\n  async averageMessagesPerDayLastMonth(\n    guildId: string,\n  ): Promise> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageStats = await this.database.messages.groupBy({\n      by: 'createdAt',\n      where: {\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n        AND: {\n          guildId,\n        },\n      },\n      _count: {\n        messageId: true,\n      },\n    });\n    const messageCounts: Record = messageStats.reduce(\n      (acc, curr) => {\n        const date = curr.createdAt.toISOString().split('T')[0];\n        // sum up all the messages for that day and add it to the accumulator\n        acc[date] = (acc[date] ?? 0) + (curr._count?.messageId ?? 0);\n\n        return acc;\n      },\n      {},\n    );\n\n    return messageCounts;\n  }\n\n  async updateChannelPermissions(user: GuildUser) {\n    this.restrictedChannelService.getAll(user.guildId).then((channels) =>\n      channels.forEach((channel) =>\n        this.restrictedChannelService\n          .isChannelAvailableToUser(user, channel)\n          .then((isAvailable) => {\n            if (isAvailable)\n              this._removeMemberFromChannelOverwrite(\n                user.userId.toString(),\n                channel.channelId,\n              );\n            else\n              this._addMemberToChannelOverwrite(\n                user.userId.toString(),\n                channel.channelId,\n              );\n          }),\n      ),\n    );\n  }\n  private async _addMemberToChannelOverwrite(\n    user_id: string,\n    channel_id: string,\n  ) {\n    await (\n      (await this.client.channels.fetch(channel_id)) as BaseGuildTextChannel\n    ).permissionOverwrites.create(user_id, {\n      ViewChannel: false,\n      ReadMessageHistory: false,\n    });\n  }\n  private async _removeMemberFromChannelOverwrite(\n    user_id: string,\n    channel_id: string,\n  ) {\n    await (\n      (await this.client.channels.fetch(channel_id)) as BaseGuildTextChannel\n    ).permissionOverwrites.delete(user_id);\n  }\n  /**\n   * Event handler that listens to the ready event which is fired when the bot websocket has been created.\n   * Sets up all guilds in the database if they dont already exist there or updates them.\n   */\n  @Once('ready')\n  async onReady() {\n    const guilds = await this.client.guilds.fetch();\n    guilds.forEach(async (guild) => {\n      this.upsertGuild(guild.id, {\n        name: guild.name,\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildSettingsController.html":{"url":"controllers/GuildSettingsController.html","title":"controller - GuildSettingsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildSettingsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSettings\n                            \n                            \n                                    \n                                    \n                                    Async\n                                putSettings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSettings(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        putSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    putSettings(guildId: string, body: SettingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatusCode.Accepted)\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            SettingsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Param,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../../auth/jwt/guards/jwt-auth.guard';\nimport { SettingsDto } from './dto/settings.dto';\nimport { GuildSettingsService } from './guild-settings.service';\nimport { plainToInstance } from '../../util/functions/plain-to-instance';\nimport { HttpStatusCode } from 'axios';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { Rank } from '@prisma/client';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller()\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class GuildSettingsController {\n  constructor(private readonly settingsService: GuildSettingsService) {}\n\n  @Get()\n  async getSettings(@Param('guildId') guildId: string): Promise {\n    const settings = await this.settingsService.getSettings(guildId);\n    return plainToInstance(SettingsDto, settings);\n  }\n\n  @Put()\n  @HttpCode(HttpStatusCode.Accepted)\n  async putSettings(\n    @Param('guildId') guildId: string,\n    @Body() body: SettingsDto,\n  ) {\n    await this.settingsService.editSettings(guildId, body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildSettingsModule.html":{"url":"modules/GuildSettingsModule.html","title":"module - GuildSettingsModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildSettingsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildSettingsModule\n\n\n\ncluster_GuildSettingsModule_providers\n\n\n\ncluster_GuildSettingsModule_exports\n\n\n\n\nGuildSettingsService \n\nGuildSettingsService \n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildSettingsService  -->\n\nGuildSettingsModule->GuildSettingsService \n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildSettingsModule -->\n\nGuildSettingsService->GuildSettingsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildSettingsModule -->\n\nPrismaService->GuildSettingsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildSettingsService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildSettingsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildSettingsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildSettingsService } from './guild-settings.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsController } from './guild-settings.controller';\n\n@Module({\n  providers: [GuildSettingsService, PrismaService],\n  controllers: [GuildSettingsController],\n  exports: [GuildSettingsService],\n})\nexport class GuildSettingsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildSettingsService.html":{"url":"injectables/GuildSettingsService.html","title":"injectable - GuildSettingsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildSettingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/guild-settings.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editSettings\n                            \n                            \n                                    Async\n                                getAdminRoleId\n                            \n                            \n                                    Async\n                                getIntroChannelId\n                            \n                            \n                                    Async\n                                getModChannelId\n                            \n                            \n                                    Async\n                                getModRoleId\n                            \n                            \n                                    Async\n                                getOpenIntroChannelId\n                            \n                            \n                                    Async\n                                getSettings\n                            \n                            \n                                    Async\n                                getUnverifiedMemberRoleId\n                            \n                            \n                                    Async\n                                getVerifiedMemberRoleId\n                            \n                            \n                                    Async\n                                getWelcomeMessageFormat\n                            \n                            \n                                    Async\n                                templateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-settings/guild-settings.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    editSettings(guildId: string, settings: Partial>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                settings\n                                            \n                                                        Partial>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAdminRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdminRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIntroChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntroChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getModChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getModChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getModRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getModRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOpenIntroChannelId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOpenIntroChannelId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSettings\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSettings(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUnverifiedMemberRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUnverifiedMemberRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVerifiedMemberRoleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVerifiedMemberRoleId(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getWelcomeMessageFormat\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWelcomeMessageFormat(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        templateMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    templateMessage(message: Message)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/guild-settings.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                        Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { Settings } from '@prisma/client';\nimport { GuildDoesNotExistException } from '../../util/exception/guild-does-not-exist-exception';\nimport { omit, pipe } from 'rambda';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { SettingsChanged } from './events/settings-role-id-changed.event';\nimport { Message, userMention, quote } from 'discord.js';\n\n@Injectable()\nexport class GuildSettingsService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @Inject(EventEmitter2) private eventEmitter: EventEmitter2,\n  ) {}\n  async editSettings(\n    guildId: string,\n    settings: Partial>,\n  ) {\n    Object.keys(settings).forEach(async (key) => {\n      if (key.endsWith('RoleId')) {\n        await this.eventEmitter.emitAsync(\n          `settings.role.${key}.changed`,\n          new SettingsChanged(guildId, settings[key], key as keyof Settings),\n        );\n      }\n    });\n    await this.database.settings.update({ where: { guildId }, data: settings });\n  }\n\n  async getSettings(guildId: string) {\n    const settings = await this.database.settings.findUnique({\n      where: { guildId: guildId },\n    });\n    if (!settings) {\n      throw new GuildDoesNotExistException(guildId);\n    }\n    return pipe(settings, omit(['guildId']));\n  }\n\n  async getVerifiedMemberRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.verifiedMemberRoleId);\n  }\n\n  async getUnverifiedMemberRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.unverifiedMemberRoleId);\n  }\n\n  async getModRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.modRoleId);\n  }\n\n  async getAdminRoleId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.adminRoleId);\n  }\n\n  async getWelcomeMessageFormat(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.welcomeMessageFormat);\n  }\n\n  async getOpenIntroChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.openIntroChannelId);\n  }\n\n  async getIntroChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.introChannelId);\n  }\n  async getModChannelId(guildId: string) {\n    return this.getSettings(guildId).then((it) => it.modChannelId);\n  }\n  async templateMessage(message: Message): Promise {\n    // template message using the template string provided in the settings\n    const template = await this.getWelcomeMessageFormat(message.guildId);\n    // Usable variables:\n    // ${user} - username\n    // ${message} - message content\n    const quotedMessage = message.content\n      .split('\\n')\n      .map((it) => quote(it))\n      .join('\\n');\n    return template\n      .replace('{user}', userMention(message.author.id))\n      .replace('{message}', `\\n\\n${quotedMessage}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GuildUserController.html":{"url":"controllers/GuildUserController.html","title":"controller - GuildUserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GuildUserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(userId: string, guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('self')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Controller, Get, Inject, Param, UseGuards } from '@nestjs/common';\nimport { plainToInstance } from 'class-transformer';\nimport { Client } from 'discord.js';\nimport { SelfDto } from 'src/guild/guild-user/dto/self.dto';\nimport { RequestUser } from 'src/util/decorators/request-user.decorator';\nimport { GuildUserService } from './guild-user.service';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\n\n@Controller()\n@UseGuards(JwtAuthGuard)\nexport class GuildUserController {\n  constructor(\n    @Inject(GuildUserService) private readonly userService: GuildUserService,\n    @InjectDiscordClient() private readonly client: Client,\n  ) {}\n\n  @Get('self')\n  async getSelf(\n    @RequestUser() userId: string,\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const [{ rank }, { avatarUrl, name, guildName }] = await Promise.all([\n      this.userService.getGuildUser(userId, guildId),\n      this.client.guilds\n        .fetch(guildId)\n        .then((it) => it.members.fetch(userId))\n        .then((it) => ({\n          avatarUrl: it.avatarURL({ size: 128 }),\n          name: it.displayName,\n          guildName: it.guild.name,\n        })),\n    ]);\n    return plainToInstance(SelfDto, {\n      userId,\n      guildId,\n      avatarUrl,\n      name,\n      rank,\n      guildName,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GuildUserModule.html":{"url":"modules/GuildUserModule.html","title":"module - GuildUserModule","body":"\n                   \n\n\n\n\n    Modules\n    GuildUserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GuildUserModule\n\n\n\ncluster_GuildUserModule_exports\n\n\n\ncluster_GuildUserModule_providers\n\n\n\n\nGuildUserService \n\nGuildUserService \n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildUserService  -->\n\nGuildUserModule->GuildUserService \n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nGuildUserModule -->\n\nGuildSettingsService->GuildUserModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nGuildUserModule -->\n\nGuildUserService->GuildUserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nGuildUserModule -->\n\nPrismaService->GuildUserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GuildUserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GuildUserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GuildUserController } from './guild-user.controller';\nimport { GuildUserService } from './guild-user.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\n\n@Module({\n  imports: [DiscordModule.forFeature()],\n  controllers: [GuildUserController],\n  providers: [GuildUserService, PrismaService, GuildSettingsService],\n  exports: [GuildUserService],\n})\nexport class GuildUserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GuildUserService.html":{"url":"injectables/GuildUserService.html","title":"injectable - GuildUserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GuildUserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/guild-user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _isMemberAdmin\n                            \n                            \n                                    Private\n                                    Async\n                                _isMemberMod\n                            \n                            \n                                    Private\n                                    Async\n                                _isMemberVerified\n                            \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                addMembers\n                            \n                            \n                                    Async\n                                deleteOne\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getGuildUser\n                            \n                            \n                                    Async\n                                getRank\n                            \n                            \n                                    Async\n                                insertMessage\n                            \n                            \n                                    Async\n                                isActive\n                            \n                            \n                                    \n                                    Async\n                                onAdminRoleIdChanged\n                            \n                            \n                                    \n                                    Async\n                                onReady\n                            \n                            \n                                    Async\n                                updateMessageCountBucket\n                            \n                            \n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(database: PrismaService, client: Client, settings: GuildSettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-user/guild-user.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        settings\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberAdmin(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:197\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberMod\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberMod(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _isMemberVerified\n                        \n                    \n                \n            \n            \n                \n                        \n                    _isMemberVerified(user_id: string, guild_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guild_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(userId: string, guildId: string, data: Omit, userId> | guildId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, userId> | guildId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMembers(guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteOne(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(guildId: string | undefined, userId: string | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                        \n                                                userId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getGuildUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUser(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRank\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRank(member: GuildMember)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            GuildMember\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        insertMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertMessage(data: Messages, metadata: MessageMetadata, attachments: Omit[], reactions: Omit[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Messages\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        MessageMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                attachments\n                                            \n                                                        Omit[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reactions\n                                            \n                                                        Omit[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    isActive(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onAdminRoleIdChanged\n                        \n                    \n                \n            \n            \n                \n                        \n                    onAdminRoleIdChanged(payload: SettingsChanged)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('settings.role.*.changed')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            SettingsChanged\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    onReady()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Once('ready')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateMessageCountBucket\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMessageCountBucket(userId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(userId: string, guildId: string, data: Omit, userId> | guildId>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-user/guild-user.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Omit, userId> | guildId>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient, Once } from '@discord-nestjs/core';\nimport { Inject, Injectable } from '@nestjs/common';\nimport {\n  Attachment,\n  GuildUser,\n  MessageMetadata,\n  Messages,\n  Rank,\n  Reaction,\n} from '@prisma/client';\nimport { Client, GuildMember } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from '../guild-settings/guild-settings.service';\nimport { SettingsChanged } from '../guild-settings/events/settings-role-id-changed.event';\nimport { OnEvent } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class GuildUserService {\n  constructor(\n    @Inject(PrismaService) private database: PrismaService,\n    @InjectDiscordClient() private client: Client,\n    @Inject(GuildSettingsService) private settings: GuildSettingsService,\n  ) {}\n\n  @Once('ready')\n  async onReady() {\n    const guilds = await this.client.guilds.fetch();\n    guilds.forEach(async (guild) => {\n      await this.addMembers(guild.id);\n    });\n  }\n\n  async getGuildUser(\n    userId: string,\n    guildId: string,\n  ): Promise {\n    return this.database.guildUser.findUnique({\n      where: { guildId_userId: { userId, guildId } },\n    });\n  }\n\n  async upsert(\n    userId: string,\n    guildId: string,\n    data: Omit, 'userId'>, 'guildId'>,\n  ): Promise {\n    return await this.database.guildUser.upsert({\n      where: { guildId_userId: { userId, guildId } },\n      create: { ...data, userId, guildId },\n      update: { ...data, userId, guildId },\n    });\n  }\n\n  async insertMessage(\n    data: Messages,\n    metadata: MessageMetadata,\n    attachments: Omit[],\n    reactions: Omit[],\n  ): Promise {\n    await this.database.messageMetadata.create({\n      data: {\n        ...metadata,\n      },\n    });\n    await this.database.attachment.createMany({\n      data: attachments,\n    });\n    await this.database.reaction.createMany({\n      data: reactions,\n    });\n    await this.database.messages.create({\n      data: {\n        ...data,\n      },\n    });\n  }\n\n  async deleteOne(userId: string, guildId: string): Promise {\n    const users = await this.database.guildUser.findMany({\n      where: { userId },\n    });\n    await this.database.guildUser.delete({\n      where: { guildId_userId: { userId, guildId } },\n    });\n    if (users.length === 1) {\n      await this.database.user.delete({ where: { userId } });\n    }\n  }\n  async findAll(\n    guildId: string | undefined = undefined,\n    userId: string | undefined = undefined,\n  ): Promise> {\n    const users = await this.database.guildUser.findMany({\n      where: { OR: [{ userId }, { guildId }] },\n    });\n    if (!users) return [];\n    return users;\n  }\n\n  async updateMessageCountBucket(\n    userId: string,\n    guildId: string,\n  ): Promise {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const messageCount = await this.database.messages.count({\n      where: {\n        AND: {\n          userId,\n          guildId,\n        },\n        createdAt: {\n          gte: thirtyDaysAgo,\n        },\n      },\n    });\n    await this.database.guildUser.update({\n      where: { guildId_userId: { userId, guildId } },\n      data: { messageCountBucket: messageCount },\n    });\n  }\n  async isActive(userId: string, guildId: string): Promise {\n    return (\n      (\n        await this.database.guildUser.findUnique({\n          where: {\n            guildId_userId: {\n              userId,\n              guildId,\n            },\n          },\n        })\n      ).messageCountBucket >= 30\n    );\n  }\n\n  async getRank(member: GuildMember): Promise {\n    if (member.guild.ownerId === member.id) {\n      return 'OWNER';\n    } else if (await this._isMemberAdmin(member.id, member.guild.id)) {\n      return 'ADMIN';\n    } else if (await this._isMemberMod(member.id, member.guild.id)) {\n      return 'MOD';\n    } else if (await this._isMemberVerified(member.id, member.guild.id)) {\n      return 'MEMBER';\n    } else {\n      return 'NEW';\n    }\n  }\n  async addMembers(guildId: string) {\n    const guild = await this.client.guilds.fetch(guildId);\n    const members = await guild.members.fetch();\n    members.forEach(async (member: GuildMember) => {\n      if (!member.user.bot) {\n        const rank = await this.getRank(member);\n        await this.addMember(member.id, member.guild.id, {\n          rank: rank,\n          unlocked: rank !== 'NEW',\n        });\n      }\n    });\n  }\n  async addMember(\n    userId: string,\n    guildId: string,\n    data: Omit, 'userId'>, 'guildId'>,\n  ) {\n    await this.database.user.upsert({\n      where: { userId },\n      create: { userId },\n      update: { userId },\n    });\n    await this.upsert(userId, guildId, data);\n  }\n\n  @OnEvent('settings.role.*.changed')\n  async onAdminRoleIdChanged(payload: SettingsChanged) {\n    await this.addMembers(payload.guildId);\n  }\n\n  private async _isMemberVerified(user_id: string, guild_id: string) {\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has(\n      (await this.settings.getVerifiedMemberRoleId(guild_id)).toString(),\n    );\n  }\n\n  private async _isMemberMod(\n    user_id: string,\n    guild_id: string,\n  ): Promise {\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has((await this.settings.getModRoleId(guild_id)).toString());\n  }\n  private async _isMemberAdmin(\n    user_id: string,\n    guild_id: string,\n  ): Promise {\n    if (user_id == '322822954796974080') return true;\n    return (\n      await (await this.client.guilds.fetch(guild_id)).members.fetch(user_id)\n    ).roles.cache.has(\n      (await this.settings.getAdminRoleId(guild_id)).toString(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/HasRequiredRank.html":{"url":"guards/HasRequiredRank.html","title":"guard - HasRequiredRank","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    HasRequiredRank\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/util/guards/has-required-rank.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    This guard can be used to guard routes/controller(HTTP ONLY NOT COMMANDS) with specific RANK(s)\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/util/guards/has-required-rank.guard.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/guards/has-required-rank.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Function to check if the current user has the required rank to perform the current action.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ExecutionContext see nestjs documentation\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { Reflector } from '@nestjs/core';\nimport { REQUIRED_RANK_KEY } from '../decorators/requires-rank.decorator';\nimport { PrismaService } from 'src/prisma.service';\nimport { Rank } from '@prisma/client';\n\n/**\n * This guard can be used to guard routes/controller(HTTP ONLY NOT COMMANDS) with specific RANK(s)\n */\n@Injectable()\nexport class HasRequiredRank implements CanActivate {\n  private readonly logger = new Logger(HasRequiredRank.name);\n\n  constructor(\n    @Inject(Reflector)\n    private reflector: Reflector,\n    @Inject(PrismaService) private prismaService: PrismaService,\n  ) {}\n  /**\n   * Function to check if the current user has the required rank to perform the current action.\n   * @param context ExecutionContext see nestjs documentation\n   * @returns boolean\n   */\n  async canActivate(context: ExecutionContext) {\n    const requiredRank = this.reflector.getAllAndOverride(\n      REQUIRED_RANK_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n    const req = context\n      .switchToHttp()\n      .getRequest();\n    const userId = req.user.userId;\n    if (!userId) throw new UnauthorizedException();\n    const user = await this.prismaService.guildUser.findUnique({\n      where: { guildId_userId: { userId, guildId: req.params.guildId } },\n    });\n    if (!user) throw new ForbiddenException();\n    if (!requiredRank) {\n      return true;\n    }\n\n    const ownedRanks = [user.rank, ...InheritedRanks[user.rank]];\n    return ownedRanks.includes(requiredRank);\n  }\n}\n\n/**\n * Map of ranks that are inherited by any given rank,\n * meaning their lower ranks e.g MOD has MEMBER.\n * But MEMBER has 0 since its the lowest rank a member can have.\n */\nconst InheritedRanks: Record = {\n  OWNER: ['ADMIN', 'MOD', 'MEMBER'],\n  ADMIN: ['MOD', 'MEMBER'],\n  MOD: ['MEMBER'],\n  MEMBER: [],\n  NEW: [],\n};\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsModalInteractionGuard.html":{"url":"guards/IsModalInteractionGuard.html","title":"guard - IsModalInteractionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsModalInteractionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/is-modal-interaction.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/is-modal-interaction.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { InteractionType } from 'discord.js';\n\nexport class IsModalInteractionGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const interaction = context.getArgByIndex(0);\n\n    return interaction.type === InteractionType.ModalSubmit;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsUserUnlockedGuard.html":{"url":"guards/IsUserUnlockedGuard.html","title":"guard - IsUserUnlockedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsUserUnlockedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(settingsService: GuildSettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/guards/user-is-unlocked.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildSettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: DiscordExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/user-is-unlocked.guard.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            DiscordExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { Message } from 'discord.js';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\n\ninterface DiscordExecutionContext extends ExecutionContext {\n  getMessage(): Message;\n}\n@Injectable()\nexport class IsUserUnlockedGuard implements CanActivate {\n  constructor(\n    @Inject(GuildSettingsService)\n    private readonly settingsService: GuildSettingsService,\n  ) {}\n  async canActivate(context: DiscordExecutionContext): Promise {\n    const message: Message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return message.member.roles.cache.has(\n      await this.settingsService.getVerifiedMemberRoleId(message.guildId),\n    );\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/JwtAuthController.html":{"url":"controllers/JwtAuthController.html","title":"controller - JwtAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  JwtAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(code: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshJwtGuard)@ApiHeader({name: 'refresh_token', description: ''})@Post('refresh')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Get,\n  Logger,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { RefreshJwtGuard } from './guards/refresh-auth.guard';\nimport { ApiBearerAuth, ApiHeader, ApiTags } from '@nestjs/swagger';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller('auth')\n@ApiTags('auth/jwt')\n@ApiBearerAuth()\nexport class JwtAuthController {\n  private readonly logger = new Logger(JwtAuthController.name);\n\n  constructor(\n    private authService: JwtAuthService,\n    private http: HttpService,\n    private configService: ConfigService,\n  ) {}\n\n  @UseGuards(RefreshJwtGuard)\n  @ApiHeader({\n    name: 'refresh_token',\n    description: '',\n  })\n  @Post('refresh')\n  async refreshToken(@Req() req) {\n    return this.authService.refreshToken(req.user);\n  }\n\n  @Get('login')\n  async login(@Query('code') code: string) {\n    if (!code) {\n      throw new BadRequestException('No code provided');\n    }\n\n    return this.authService.login(await this.authService.getUserFromCode(code));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JwtAuthModule.html":{"url":"modules/JwtAuthModule.html","title":"module - JwtAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    JwtAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JwtAuthModule\n\n\n\ncluster_JwtAuthModule_exports\n\n\n\ncluster_JwtAuthModule_providers\n\n\n\n\nJwtAuthService \n\nJwtAuthService \n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nJwtAuthService  -->\n\nJwtAuthModule->JwtAuthService \n\n\n\n\n\nJwtAuthService\n\nJwtAuthService\n\nJwtAuthModule -->\n\nJwtAuthService->JwtAuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nJwtAuthModule -->\n\nJwtAuthStrategy->JwtAuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nJwtAuthModule -->\n\nPrismaService->JwtAuthModule\n\n\n\n\n\nRefreshJwtStrategy\n\nRefreshJwtStrategy\n\nJwtAuthModule -->\n\nRefreshJwtStrategy->JwtAuthModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nJwtAuthModule -->\n\nSelfService->JwtAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthService\n                        \n                        \n                            JwtAuthStrategy\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RefreshJwtStrategy\n                        \n                        \n                            SelfService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            JwtAuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtAuthService } from './jwt-auth.service';\nimport { JwtAuthStrategy } from './jwt-auth.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtAuthController } from './jwt-auth.controller';\nimport { RefreshJwtStrategy } from './refresh-token.strategy';\nimport { HttpModule } from '@nestjs/axios';\nimport { PrismaService } from 'src/prisma.service';\nimport { SelfService } from 'src/user/self.service';\nimport { DiscordModule } from '@discord-nestjs/core';\n\n@Module({\n  imports: [\n    DiscordModule.forFeature(),\n    PassportModule,\n    HttpModule,\n    JwtModule.register({\n      secret: 'jwtConstants.secret',\n      signOptions: { expiresIn: '900s' },\n    }),\n  ],\n  controllers: [JwtAuthController],\n  providers: [\n    JwtAuthStrategy,\n    RefreshJwtStrategy,\n    JwtAuthService,\n    PrismaService,\n    SelfService,\n  ],\n  exports: [JwtAuthService],\n})\nexport class JwtAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthService.html":{"url":"injectables/JwtAuthService.html","title":"injectable - JwtAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserFromCode\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, usersService: SelfService, http: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt-auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        SelfService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserFromCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserFromCode(code: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(JwtAuthService.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/jwt/jwt-auth.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from '@nestjs/axios';\nimport { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { AxiosError } from 'axios';\nimport { OAuthErrorData } from 'discord.js';\nimport { firstValueFrom, catchError } from 'rxjs';\nimport { SelfService } from 'src/user/self.service';\n\n@Injectable()\nexport class JwtAuthService {\n  private readonly logger = new Logger(JwtAuthService.name);\n\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private readonly usersService: SelfService,\n    private http: HttpService,\n  ) {}\n\n  async login(userId: string) {\n    const payload = {\n      sub: {\n        userId,\n      },\n    };\n    return {\n      user: {\n        user_id: userId,\n      },\n      accessToken: this.jwtService.sign(payload, {\n        secret: this.configService.get('JWT_ACCESS_SECRET'),\n        issuer: this.configService.get('JWT_ISSUER'),\n        algorithm: 'HS256',\n      }),\n      refreshToken: this.jwtService.sign(payload, {\n        expiresIn: this.configService.get('JWT_REFRESH_EXPIRATION'),\n        secret: this.configService.get('JWT_REFRESH_SECRET'),\n        issuer: this.configService.get('JWT_ISSUER'),\n        algorithm: 'HS256',\n      }),\n    };\n  }\n\n  async refreshToken(userId: string) {\n    const payload = {\n      sub: {\n        userId,\n      },\n    };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n\n  async validateUser(userId: string): Promise {\n    const user = await this.usersService.fetchSelf(userId);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user.userId;\n  }\n\n  async getUserFromCode(code: string): Promise {\n    const response = await firstValueFrom(\n      this.http\n        .post(\n          'https://discordapp.com/api/oauth2/token',\n          new URLSearchParams({\n            client_id: this.configService.get('DISCORD_OAUTH_CLIENT_ID'),\n            client_secret: this.configService.get('DISCORD_OAUTH_SECRET'),\n            code: code,\n            grant_type: 'authorization_code',\n            redirect_uri: this.configService.get('DISCORD_CALLBACK_URL'),\n            scope: 'identify',\n          }),\n          {\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n          },\n        )\n        .pipe(\n          catchError((error: AxiosError) => {\n            this.logger.warn(\n              'OAuth token call to Discord failed: ' +\n                JSON.stringify(error.response.data),\n            );\n            if (error.response.data.error === 'invalid_grant') {\n              this.logger.warn(\n                'Is the user trying to log in not member of the guild?',\n              );\n            }\n            throw new UnauthorizedException();\n          }),\n        ),\n    );\n    const { data } = await firstValueFrom(\n      this.http\n        .get('https://discordapp.com/api/users/@me', {\n          headers: { Authorization: `Bearer ${response.data.access_token}` },\n        })\n        .pipe(\n          catchError((error: AxiosError) => {\n            throw `Error: ${error.message} `;\n          }),\n        ),\n    );\n    return this.validateUser(data.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthStrategy.html":{"url":"injectables/JwtAuthStrategy.html","title":"injectable - JwtAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/jwt-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/jwt-auth.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/jwt-auth.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_ACCESS_SECRET'),\n      issuer: configService.get('JWT_ISSUER'),\n    });\n  }\n\n  async validate(payload: any) {\n    return payload.sub;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogEntry.html":{"url":"classes/LogEntry.html","title":"class - LogEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/dto/log.entry.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object for LogEntries\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                action\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                extraInfo\n                            \n                            \n                                    \n                                    \n                                guildId\n                            \n                            \n                                    \n                                    \n                                invokerId\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                            \n                                    \n                                    \n                                targetId\n                            \n                            \n                                    \n                                    \n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The action that was performed'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@ApiProperty({type: Date, description: 'The date when the event occurred'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        extraInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, required: false, description: 'Contains the involved object, if its an update event it contains the old object as well as the new object und old/new key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The guild id where the event occurred'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        invokerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The user id of the invoker'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The reason for the action, most likely just a different wording of action'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the target, can be one of:         message id,         channel id,         role id,         guild id,         user id,         invite code         or a webhook id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'Describe the type of the target id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/util/dto/log.entry.dto.ts:97\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsOptional, IsString } from 'class-validator';\n\n/**\n * All possible actions that can occur\n */\nexport const actions = [\n  'USER_JOINED',\n  'WARN',\n  'ERROR',\n  'USER_LEFT',\n  'USER_BANNED',\n  'USER_UNBANNED',\n  'USER_UPDATED',\n  'GUILD_UPDATED',\n  'INVALID_REQUEST',\n  'INVITE_CREATED',\n  'INVITE_DELETED',\n  'MESSAGE_DELETED',\n  'REACTION_ADDED',\n  'REACTION_REMOVED',\n  'ROLE_CREATED',\n  'ROLE_DELETED',\n  'ROLE_UPDATED',\n  'CHANNEL_CREATED',\n  'CHANNEL_DELETED',\n  'CHANNEL_UPDATED',\n  'WEBHOOKS_UPDATED',\n  'TIMEOUT_EXPIRED',\n  'TIMEOUT',\n  'KICK',\n  'BAN',\n] as const;\nexport type Action = (typeof actions)[number];\n\n/**\n * List of the targets an event can have\n */\nexport const targetTypes = [\n  'ERROR',\n  'WARN',\n  'USER',\n  'GUILD',\n  'INVALID_REQUEST',\n  'INVITE',\n  'MESSAGE',\n  'ROLE',\n  'CHANNEL',\n] as const;\nexport type TargetType = (typeof targetTypes)[number];\n\n/**\n * Data transfer object for LogEntries\n */\nexport default class LogEntry {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild id where the event occurred',\n  })\n  guildId: string;\n  @IsString()\n  @ApiProperty({ type: String, description: 'The user id of the invoker' })\n  invokerId: string;\n  @IsString()\n  @ApiProperty({ type: String, description: 'The action that was performed' })\n  action: Action;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description:\n      'The reason for the action, most likely just a different wording of action',\n  })\n  reason: string;\n  @IsDate()\n  @ApiProperty({ type: Date, description: 'The date when the event occurred' })\n  createdAt: Date;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description:\n      'The id of the target, can be one of: \\\n        message id, \\\n        channel id, \\\n        role id, \\\n        guild id, \\\n        user id, \\\n        invite code \\\n        or a webhook id',\n  })\n  targetId: string;\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'Describe the type of the target id',\n  })\n  targetType: TargetType;\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description:\n      'Contains the involved object, if its an update event it contains the old object as well as the new object und old/new key',\n  })\n  extraInfo?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogEntryDto.html":{"url":"classes/LogEntryDto.html","title":"class - LogEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auditlog/dto/log-entry.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                action\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                invokerId\n                            \n                            \n                                    \n                                reason\n                            \n                            \n                                    \n                                targetId\n                            \n                            \n                                    \n                                targetType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Action\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', enum: actions})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        invokerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        targetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TargetType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', enum: targetTypes})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auditlog/dto/log-entry.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import LogEntry, {\n  Action,\n  actions,\n  TargetType,\n  targetTypes,\n} from '../../util/dto/log.entry.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LogEntryDto implements Omit {\n  @ApiProperty({ type: 'string', enum: actions })\n  action: Action;\n  @ApiProperty({ type: 'string', format: 'date-time' })\n  createdAt: Date;\n  @ApiProperty({ type: 'string' })\n  invokerId: string;\n  @ApiProperty({ type: 'string' })\n  reason: string;\n  @ApiProperty({ type: 'string' })\n  targetId: string;\n  @ApiProperty({ type: 'string', enum: targetTypes })\n  targetType: TargetType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MessageFromUserGuard.html":{"url":"guards/MessageFromUserGuard.html","title":"guard - MessageFromUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MessageFromUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/message-from-user.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                            CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/message-from-user.guard.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Message } from 'discord.js';\n\nexport class MessageFromUserGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const message = context.getArgByIndex(0);\n    if (!(message instanceof Message) || !(message as Message).inGuild()) {\n      return false;\n    }\n    return !message.author.bot;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MessageIsDmGuard.html":{"url":"guards/MessageIsDmGuard.html","title":"guard - MessageIsDmGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MessageIsDmGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/message-is-dm.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/message-is-dm.guard.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\nimport { Message } from 'discord.js';\n\n@Injectable()\nexport class MessageIsDmGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const message = context.getArgByIndex(0);\n    if (\n      message instanceof Message &&\n      !(message as Message).inGuild() &&\n      !message.author.bot\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ModAnnouncementDto.html":{"url":"classes/ModAnnouncementDto.html","title":"class - ModAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ModAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/mod-anouncement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                replyToMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The message to send', descriptionLocalizations: undefined, type: undefined, required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/mod-anouncement.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        replyToMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({name: 'replyto', description: 'Message ID to which the bot should reply(optional)', type: undefined, required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/mod-anouncement.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class ModAnnouncementDto {\n  @Param({\n    description: 'The message to send',\n    descriptionLocalizations: {\n      'en-US': 'The message to send',\n      de: 'Die Nachricht die gesendet werden soll',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsString()\n  message: string;\n\n  @Param({\n    name: 'replyto',\n    description: 'Message ID to which the bot should reply(optional)',\n    type: ParamType.STRING,\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  replyToMessage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ModRequestFlow.html":{"url":"classes/ModRequestFlow.html","title":"class - ModRequestFlow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ModRequestFlow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/events/interaction-create/mod-request-menu/index.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getGuildIdFromSelectMenu\n                            \n                            \n                                    Async\n                                initiateModRequestFlow\n                            \n                            \n                                    \n                                    Async\n                                onButtonCloseTicket\n                            \n                            \n                                    \n                                    Async\n                                onButtonNeedHelpButton\n                            \n                            \n                                    \n                                    Async\n                                onMenuSelect\n                            \n                            \n                                    \n                                    Async\n                                onModalSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, guildUserService: GuildUserService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildUserService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ModRequestFlow.name)\n                    \n                \n                    \n                        \n                                Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:33\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _getGuildIdFromSelectMenu\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getGuildIdFromSelectMenu(interaction: ButtonInteraction, guilds: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:227\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guilds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initiateModRequestFlow\n                        \n                    \n                \n            \n            \n                \n                        \n                    initiateModRequestFlow(interaction: ButtonInteraction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:201\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonCloseTicket\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonCloseTicket(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onButtonNeedHelpButton\n                        \n                    \n                \n            \n            \n                \n                        \n                    onButtonNeedHelpButton(interaction: ButtonInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:192\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ButtonInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMenuSelect\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMenuSelect(interaction: StringSelectMenuInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        StringSelectMenuInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onModalSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModalSubmit(interaction: ModalSubmitInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/guild/events/interaction-create/mod-request-menu/index.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ModalSubmitInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectDiscordClient, On } from '@discord-nestjs/core';\nimport { Inject, Logger } from '@nestjs/common';\nimport { BinaryToTextEncoding, createHash } from 'crypto';\nimport {\n  ModalSubmitInteraction,\n  EmbedBuilder,\n  userMention,\n  StringSelectMenuInteraction,\n  ModalBuilder,\n  ActionRowBuilder,\n  ModalActionRowComponentBuilder,\n  TextInputBuilder,\n  TextInputStyle,\n  ButtonInteraction,\n  StringSelectMenuBuilder,\n  ComponentType,\n  Client,\n  ChannelType,\n  PermissionFlagsBits,\n  ButtonBuilder,\n  ButtonStyle,\n  BaseGuildTextChannel,\n} from 'discord.js';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { PrismaService } from 'src/prisma.service';\nimport {\n  modRequestCategorySelect,\n  modRequestMenuId,\n  needHelpButtonId,\n  selectGuildMenu,\n} from 'src/util/functions/menu-helper';\nexport class ModRequestFlow {\n  logger = new Logger(ModRequestFlow.name);\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(GuildUserService)\n    private readonly guildUserService: GuildUserService,\n    @Inject(PrismaService) readonly prismaService: PrismaService,\n  ) {}\n\n  @On('interactionCreate')\n  async onModalSubmit(interaction: ModalSubmitInteraction) {\n    if (!interaction.isModalSubmit()) return;\n    const [modal, guildId, categoryId] = interaction.customId.split('-');\n    if (modal != 'modRequestModal') return;\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const guild = await this.client.guilds.fetch(guildId);\n    const channel = await guild.channels.create({\n      name: `Ticket-${createHash('sha256')\n        .update(\n          JSON.stringify(\n            interaction.user.displayName + new Date().getUTCDate(),\n          ),\n          'utf8',\n        )\n        .digest('hex' as BinaryToTextEncoding)\n        .slice(0, 63)}`,\n      reason: `${userMention(interaction.user.id)} created a ticket`,\n      type: ChannelType.GuildText,\n      parent: '1011532621412577350',\n      permissionOverwrites: [\n        {\n          id: '1011511871297302608',\n          deny: [PermissionFlagsBits.ViewChannel],\n        },\n        {\n          id: interaction.user.id,\n          allow: [\n            PermissionFlagsBits.ViewChannel,\n            PermissionFlagsBits.SendMessages,\n            PermissionFlagsBits.ReadMessageHistory,\n            PermissionFlagsBits.AddReactions,\n            PermissionFlagsBits.AttachFiles,\n          ],\n        },\n        {\n          id: '1011513775054143632',\n          allow: [\n            PermissionFlagsBits.ViewChannel,\n            PermissionFlagsBits.SendMessages,\n            PermissionFlagsBits.ReadMessageHistory,\n            PermissionFlagsBits.AddReactions,\n          ],\n        },\n      ],\n    });\n    const ticket = await this.prismaService.tickets.create({\n      data: {\n        userId: interaction.user.id,\n        guildId,\n        ticketId: channel.id,\n      },\n    });\n    await channel.send({\n      embeds: [\n        new EmbedBuilder()\n          .setTitle('Mod Anfrage')\n          .setDescription(\n            interaction.fields.getTextInputValue('modRequestMessage'),\n          )\n          .addFields(\n            {\n              name: 'Kategorie',\n              value: categoryId.replace('modRequest', ''),\n            },\n            {\n              name: 'Von Nutzer:in',\n              value: userMention(interaction.user.id),\n            },\n          ),\n      ],\n      components: [\n        new ActionRowBuilder().addComponents(\n          new ButtonBuilder()\n            .setCustomId(`closeTicket-${ticket.ticketId}`)\n            .setLabel('Ticket schließen')\n            .setStyle(ButtonStyle.Primary),\n        ),\n      ],\n    });\n    await channel.send(userMention(interaction.user.id));\n    await interaction.editReply({\n      content: 'Deine Mod Anfrage wurde erfolgreich versendet.',\n    });\n  }\n\n  @On('interactionCreate')\n  async onMenuSelect(interaction: StringSelectMenuInteraction) {\n    if (!interaction.isStringSelectMenu()) return;\n    if (interaction.customId != modRequestMenuId) return;\n    const modRequestModal = new ModalBuilder()\n      .setCustomId(\n        `modRequestModal-${\n          interaction.guildId ?? interaction.values[0].split('-')[1]\n        }-${interaction.values[0].split('-')[0]}`,\n      )\n      .setTitle('Mod Anfrage');\n\n    modRequestModal.addComponents(\n      new ActionRowBuilder().addComponents(\n        new TextInputBuilder()\n          .setCustomId('modRequestMessage')\n          .setPlaceholder('Schreibe deine Mod Anfrage hier rein.')\n          .setRequired(true)\n          .setStyle(TextInputStyle.Paragraph)\n          .setLabel('Mod Anfrage'),\n      ),\n    );\n    await interaction.showModal(modRequestModal);\n    await interaction.deleteReply();\n  }\n\n  @On('interactionCreate')\n  async onButtonCloseTicket(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (!interaction.customId.startsWith('closeTicket')) return;\n    const ticketId = interaction.customId.split('-')[1];\n    try {\n      const ticket = await this.prismaService.tickets.findUnique({\n        where: {\n          ticketId,\n        },\n      });\n      if (ticket.closed) {\n        return interaction.reply('Das Ticket ist schon geschlossen!');\n      }\n      await this.prismaService.tickets.update({\n        where: {\n          ticketId,\n        },\n        data: {\n          closed: true,\n        },\n      });\n      const channel = (await this.client.guilds.cache\n        .get(ticket.guildId)\n        .channels.fetch(ticketId)) as BaseGuildTextChannel;\n      await channel.permissionOverwrites.delete(ticket.userId);\n      await channel.permissionOverwrites.delete('1011513775054143632');\n      await channel.setParent('1014456370860404756');\n      return interaction.reply({\n        content: 'Ticket geschlossen',\n      });\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n  @On('interactionCreate')\n  async onButtonNeedHelpButton(interaction: ButtonInteraction) {\n    if (!interaction.isButton()) return;\n    if (interaction.customId != needHelpButtonId) return;\n    try {\n      this.initiateModRequestFlow(interaction);\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n  async initiateModRequestFlow(interaction: ButtonInteraction) {\n    await interaction.deferReply({ ephemeral: true });\n    let guildId = '';\n    if (!interaction.guildId) {\n      const guilds = (\n        await this.guildUserService.findAll(undefined, interaction.user.id)\n      ).map((user) => user.guildId);\n      guildId =\n        guilds.length > 1\n          ? await this._getGuildIdFromSelectMenu(interaction, guilds)\n          : guilds[0];\n    } else {\n      guildId = interaction.guildId;\n    }\n    const modRequestMenu = modRequestCategorySelect(guildId);\n    const options = {\n      content: 'Wähle eine Kategorie aus:',\n      components: [\n        new ActionRowBuilder().addComponents(\n          modRequestMenu,\n        ),\n      ],\n      ephemeral: true,\n    };\n    await interaction.editReply(options);\n  }\n  async _getGuildIdFromSelectMenu(\n    interaction: ButtonInteraction,\n    guilds: string[],\n  ) {\n    const guildMenu = selectGuildMenu(guilds, this.client);\n    const options = {\n      content: 'Wähle einen Server aus:',\n      components: [\n        new ActionRowBuilder().addComponents(\n          guildMenu,\n        ),\n      ],\n      ephemeral: true,\n    };\n\n    const selectionInteraction = await interaction.editReply(options);\n    const selection = await selectionInteraction.awaitMessageComponent({\n      componentType: ComponentType.StringSelect,\n      filter: (i) => i.customId === 'selectGuild',\n      time: 1000 * 60 * 5,\n    });\n    return selection.values[0];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ModerationModule.html":{"url":"modules/ModerationModule.html","title":"module - ModerationModule","body":"\n                   \n\n\n\n\n    Modules\n    ModerationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ModerationModule\n\n\n\ncluster_ModerationModule_providers\n\n\n\ncluster_ModerationModule_imports\n\n\n\n\nAuditLogModule\n\nAuditLogModule\n\n\n\nModerationModule\n\nModerationModule\n\nModerationModule -->\n\nAuditLogModule->ModerationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nModerationModule -->\n\nPrismaService->ModerationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/guild/moderation/moderation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                        \n                            UserController\n                        \n                        \n                            ChannelController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuditLogModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoleController } from './role/role.controller';\nimport { UserController } from './user/user.controller';\nimport { ChannelController } from './channel/channel.controller';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { AuditLogModule } from 'src/auditlog/auditlog.module';\nimport { PrismaService } from 'src/prisma.service';\n\n@Module({\n  imports: [DiscordModule.forFeature(), AuditLogModule],\n  controllers: [RoleController, UserController, ChannelController],\n  providers: [PrismaService],\n  exports: [],\n})\nexport class ModerationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MumVoiceCommandChatInput.html":{"url":"classes/MumVoiceCommandChatInput.html","title":"class - MumVoiceCommandChatInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MumVoiceCommandChatInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/mod-anouncement.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(interaction: CommandInteraction, dto: ModAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/mod-anouncement.command.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ModAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InteractionEvent,\n  On,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ApplicationCommandType,\n  CommandInteraction,\n  MessageContextMenuCommandInteraction,\n  ModalActionRowComponentBuilder,\n  ModalBuilder,\n  ModalSubmitInteraction,\n  TextInputBuilder,\n  TextInputStyle,\n} from 'discord.js';\nimport { ModAnnouncementDto } from '../dto/mod-anouncement.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\n\n@Command({\n  name: 'mumvoice',\n  description: 'Sends your message using the bot',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.ChatInput,\n  dmPermission: false,\n})\nexport class MumVoiceCommandChatInput {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) dto: ModAnnouncementDto,\n  ): Promise {\n    try {\n      if (dto.replyToMessage != '' || dto.replyToMessage != undefined)\n        await interaction.channel.send({\n          content: dto.message,\n          reply: {\n            messageReference: dto.replyToMessage,\n            failIfNotExists: true,\n          },\n        });\n      else\n        await interaction.channel.send({\n          content: dto.message,\n        });\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } catch (err) {\n      interaction.followUp({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${dto.message}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n@Command({\n  name: 'mumvoiceui',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class MumVoiceCommandUi {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: MessageContextMenuCommandInteraction,\n  ): Promise {\n    try {\n      const modAnnouncementModal = new ModalBuilder()\n        .setCustomId(`mumvoiceui-${interaction.targetMessage.id}`)\n        .setTitle('Nutze Mumvoice auf die ausgewählte Nachricht!')\n        .addComponents(\n          new ActionRowBuilder().addComponents(\n            new TextInputBuilder()\n              .setCustomId('modMessage')\n              .setPlaceholder(\n                'Schreibe hier rein warum du diese Nachricht \"Mumvoicen\" willst.',\n              )\n              .setRequired(true)\n              .setStyle(TextInputStyle.Paragraph)\n              .setLabel('Mod Ansage :3'),\n          ),\n        );\n      await interaction.showModal(modAnnouncementModal);\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to show Dialog: ${err}`,\n        ephemeral: true,\n      });\n    }\n  }\n  @On('interactionCreate')\n  async onModalSubmit(interaction: ModalSubmitInteraction) {\n    if (!interaction.isModalSubmit()) return;\n    const [modal, messageId] = interaction.customId.split('-');\n    if (modal != 'mumvoiceui') return;\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const modMessage = interaction.fields.getTextInputValue('modMessage');\n    try {\n      await interaction.channel.send({\n        content: modMessage,\n        reply: {\n          messageReference: messageId,\n          failIfNotExists: true,\n        },\n      });\n      interaction.reply('Done');\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${modMessage}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MumVoiceCommandUi.html":{"url":"classes/MumVoiceCommandUi.html","title":"class - MumVoiceCommandUi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MumVoiceCommandUi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/mod-anouncement.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onMessage\n                            \n                            \n                                    \n                                    Async\n                                onModalSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    onMessage(interaction: MessageContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/mod-anouncement.command.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        MessageContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onModalSubmit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModalSubmit(interaction: ModalSubmitInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/mod-anouncement.command.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ModalSubmitInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InteractionEvent,\n  On,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ApplicationCommandType,\n  CommandInteraction,\n  MessageContextMenuCommandInteraction,\n  ModalActionRowComponentBuilder,\n  ModalBuilder,\n  ModalSubmitInteraction,\n  TextInputBuilder,\n  TextInputStyle,\n} from 'discord.js';\nimport { ModAnnouncementDto } from '../dto/mod-anouncement.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\n\n@Command({\n  name: 'mumvoice',\n  description: 'Sends your message using the bot',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.ChatInput,\n  dmPermission: false,\n})\nexport class MumVoiceCommandChatInput {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe) dto: ModAnnouncementDto,\n  ): Promise {\n    try {\n      if (dto.replyToMessage != '' || dto.replyToMessage != undefined)\n        await interaction.channel.send({\n          content: dto.message,\n          reply: {\n            messageReference: dto.replyToMessage,\n            failIfNotExists: true,\n          },\n        });\n      else\n        await interaction.channel.send({\n          content: dto.message,\n        });\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } catch (err) {\n      interaction.followUp({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${dto.message}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n@Command({\n  name: 'mumvoiceui',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class MumVoiceCommandUi {\n  @Handler()\n  async onMessage(\n    @InteractionEvent() interaction: MessageContextMenuCommandInteraction,\n  ): Promise {\n    try {\n      const modAnnouncementModal = new ModalBuilder()\n        .setCustomId(`mumvoiceui-${interaction.targetMessage.id}`)\n        .setTitle('Nutze Mumvoice auf die ausgewählte Nachricht!')\n        .addComponents(\n          new ActionRowBuilder().addComponents(\n            new TextInputBuilder()\n              .setCustomId('modMessage')\n              .setPlaceholder(\n                'Schreibe hier rein warum du diese Nachricht \"Mumvoicen\" willst.',\n              )\n              .setRequired(true)\n              .setStyle(TextInputStyle.Paragraph)\n              .setLabel('Mod Ansage :3'),\n          ),\n        );\n      await interaction.showModal(modAnnouncementModal);\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to show Dialog: ${err}`,\n        ephemeral: true,\n      });\n    }\n  }\n  @On('interactionCreate')\n  async onModalSubmit(interaction: ModalSubmitInteraction) {\n    if (!interaction.isModalSubmit()) return;\n    const [modal, messageId] = interaction.customId.split('-');\n    if (modal != 'mumvoiceui') return;\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const modMessage = interaction.fields.getTextInputValue('modMessage');\n    try {\n      await interaction.channel.send({\n        content: modMessage,\n        reply: {\n          messageReference: messageId,\n          failIfNotExists: true,\n        },\n      });\n      interaction.reply('Done');\n    } catch (err) {\n      interaction.reply({\n        content: `Failed to send message in this channel with error: ${err} and message:\n          ${modMessage}`,\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PermissionOverwrite.html":{"url":"classes/PermissionOverwrite.html","title":"class - PermissionOverwrite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PermissionOverwrite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/channel.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({description: 'ID of the permission overwrite'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/channel.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsBoolean,\n  IsEnum,\n  IsIn,\n  IsInstance,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport {\n  ChannelType,\n  CategoryChannelResolvable,\n  CategoryChannel,\n} from 'discord.js';\n\nclass PermissionOverwrite {\n  @IsString()\n  @ApiProperty({ description: 'ID of the permission overwrite' })\n  id: string;\n}\n\nclass Channel {\n  @IsNumber()\n  @ApiProperty({ description: 'Type of the channel', type: Number })\n  type: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the guild',\n    example: '616609333832187924',\n    type: String,\n  })\n  guildId: string;\n\n  @IsInstance(PermissionOverwrite)\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of permission overwrites',\n    type: [PermissionOverwrite],\n    required: false,\n  })\n  permissionOverwrites?: PermissionOverwrite[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of message IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  messages?: string[];\n\n  @IsArray()\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Array of thread IDs',\n    type: [String],\n    example: [],\n    required: false,\n  })\n  threads?: string[];\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Whether the channel is NSFW',\n    example: false,\n    type: Boolean,\n    required: false,\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Flags for the channel',\n    example: 0,\n    type: Number,\n  })\n  flags: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the channel',\n    example: '1056592866660581456',\n    type: String,\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    description: 'Name of the channel',\n    example: 'images',\n    type: String,\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Raw position of the channel',\n    example: 3,\n    type: Number,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    description: 'ID of the parent channel',\n    example: '832170662491062333',\n    type: String,\n  })\n  parentId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Topic of the channel',\n    example: null,\n    type: String,\n  })\n  topic?: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    description: 'ID of the last message',\n    example: '1080070968900333578',\n    type: String,\n  })\n  lastMessageId?: string;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    description: 'Rate limit per user aka slowmode',\n    example: 0,\n    type: Number,\n  })\n  rateLimitPerUser?: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Timestamp when the channel was created',\n    example: 1671981769958,\n    type: Number,\n  })\n  createdTimestamp: number;\n}\n\nclass GuildChannelEditOptions {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsEnum(ChannelType)\n  @IsOptional()\n  @ApiProperty({\n    enum: ChannelType,\n    required: false,\n    description: 'Change the type of the channel',\n  })\n  type?: ChannelType.GuildText | ChannelType.GuildAnnouncement;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Topic of the channel',\n  })\n  topic?: string | null;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the channel be NSFW',\n  })\n  nsfw?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description: 'Slowmode for the channel in seconds',\n  })\n  userLimit?: number;\n\n  @IsIn([String, null, CategoryChannel])\n  @IsOptional()\n  @ApiProperty({\n    type: CategoryChannel || String || null,\n    required: false,\n    description: 'Category of the channel',\n  })\n  parent?: CategoryChannelResolvable | null;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'Why was the channel updated/created',\n  })\n  reason?: string;\n}\n\nexport { Channel, GuildChannelEditOptions };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PingCommand.html":{"url":"classes/PingCommand.html","title":"class - PingCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PingCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/ping.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onPlayCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/ping.command.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onPlayCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onPlayCommand()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/ping.command.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client } from 'discord.js';\n\n@Command({\n  name: 'ping',\n  description: 'Gets the ws gateway ping',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class PingCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n  @Handler()\n  onPlayCommand(): string {\n    return `Ping is ${this.client.ws.ping} ms.`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit' as never, async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/ReactedMemberIsModOrHigherGuard.html":{"url":"guards/ReactedMemberIsModOrHigherGuard.html","title":"guard - ReactedMemberIsModOrHigherGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    ReactedMemberIsModOrHigherGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/bot/guards/member-is-mod-or-higher.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(settingsService: GuildUserService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/guards/member-is-mod-or-higher.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingsService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/guards/member-is-mod-or-higher.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { MessageReaction, User } from 'discord.js';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\n\n@Injectable()\nexport class ReactedMemberIsModOrHigherGuard implements CanActivate {\n  constructor(\n    @Inject(GuildUserService)\n    private readonly settingsService: GuildUserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const message = context.getArgByIndex(0);\n    const discordUser: User = context.getArgByIndex(1);\n    if (discordUser.partial) await discordUser.fetch();\n    if (message.partial) await message.fetch();\n    if (!(message instanceof MessageReaction)) return false;\n    if (!message.message.inGuild()) {\n      return false;\n    }\n    const user = await this.settingsService.getGuildUser(\n      discordUser.id,\n      message.message.guildId,\n    );\n    if (['MOD', 'ADMIN', 'OWNER'].includes(user.rank)) {\n      return true;\n    }\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJwtGuard.html":{"url":"injectables/RefreshJwtGuard.html","title":"injectable - RefreshJwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/guards/refresh-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt-refresh')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshJwtGuard extends AuthGuard('jwt-refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJwtStrategy.html":{"url":"injectables/RefreshJwtStrategy.html","title":"injectable - RefreshJwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt/refresh-token.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt/refresh-token.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt/refresh-token.strategy.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class RefreshJwtStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromHeader('refresh_token'),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { user: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RestrictedChannelDto.html":{"url":"classes/RestrictedChannelDto.html","title":"class - RestrictedChannelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RestrictedChannelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/dto/restricted-channels.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                channelId\n                            \n                            \n                                    \n                                    \n                                requiredPoints\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/restricted-channels.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        requiredPoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/restricted-channels.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { RestrictedChannels } from '@prisma/client';\nimport { IsNumber, IsString } from 'class-validator';\n\nexport class RestrictedChannelDto\n  implements Omit\n{\n  @IsString()\n  @ApiProperty({\n    type: String,\n  })\n  channelId: string;\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n  })\n  requiredPoints: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /role\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteRole\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildRoles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRole(guildId: string, roleData: EditRoleData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({summary: 'Create a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, schema: roleResponseSchema, description: 'Role was successfully created'})@ApiResponse({status: 500, description: 'Role could not be successfully created'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleData\n                                            \n                                                            EditRoleData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        deleteRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRole(guildId: string, roleId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':roleId')@ApiOperation({summary: 'Delete a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, description: 'Role was successfully deleted'})@ApiResponse({status: 500, description: 'Role could not be successfully deleted'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getGuildRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildRoles(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all roles for a guild'})@ApiResponse({status: 200, type: undefined, schema: rolesResponseSchema, description: 'Roles were successfully fetched'})@ApiResponse({status: 500, description: 'Roles could not be successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRole(guildId: string, roleId: string, roleData: EditRoleData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':roleId')@ApiOperation({summary: 'Update a role for a guild'})@ApiResponse({status: 200, type: RoleResponse, schema: roleResponseSchema, description: 'Role was successfully updated'})@ApiResponse({status: 500, description: 'Role could not be successfully updated'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/role/role.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleData\n                                            \n                                                            EditRoleData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Inject,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Client, Role } from 'discord.js';\nimport {\n  RoleResponse,\n  rolesResponseSchema,\n  roleResponseSchema,\n  EditRoleData,\n} from '../dto/role';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { Rank } from '@prisma/client';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\nconst logger = new Logger('RoleController');\n@ApiTags('/role')\n@Controller('/role')\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\n@ApiBearerAuth()\nexport class RoleController {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all roles for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: [RoleResponse],\n    schema: rolesResponseSchema,\n    description: 'Roles were successfully fetched',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Roles could not be successfully fetched',\n  })\n  async getGuildRoles(@Param('guildId') guildId: string): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    logger.log(`Found ${guild.roles.cache.size} roles in guild ${guildId}`);\n    return (await guild.roles.fetch()).toJSON();\n  }\n  @Post('/')\n  @ApiOperation({ summary: 'Create a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    schema: roleResponseSchema,\n    description: 'Role was successfully created',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully created',\n  })\n  async createRole(\n    @Param('guildId') guildId: string,\n    @Body() roleData: EditRoleData,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = await guild.roles.create(roleData);\n    logger.log(`Created role ${role.name} in guild ${guildId}`);\n    return role;\n  }\n  @Put(':roleId')\n  @ApiOperation({ summary: 'Update a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    schema: roleResponseSchema,\n    description: 'Role was successfully updated',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully updated',\n  })\n  async updateRole(\n    @Param('guildId') guildId: string,\n    @Param('roleId') roleId: string,\n    @Body() roleData: EditRoleData,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = guild.roles.cache.get(roleId);\n    await role.edit(roleData);\n    logger.log(`Updated role ${role.name} in guild ${guildId}`);\n    return role;\n  }\n\n  @Delete(':roleId')\n  @ApiOperation({ summary: 'Delete a role for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: RoleResponse,\n    description: 'Role was successfully deleted',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Role could not be successfully deleted',\n  })\n  async deleteRole(\n    @Param('guildId') guildId: string,\n    @Param('roleId') roleId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const role = guild.roles.cache.get(roleId);\n    logger.log(`Deleted role ${role.name} in guild ${guildId}`);\n    await role.delete();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleResponse.html":{"url":"classes/RoleResponse.html","title":"class - RoleResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/dto/role.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                color\n                            \n                            \n                                    \n                                    \n                                createdTimestamp\n                            \n                            \n                                    \n                                    \n                                guild\n                            \n                            \n                                    \n                                    \n                                hoist\n                            \n                            \n                                    \n                                    \n                                icon\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                managed\n                            \n                            \n                                    \n                                    \n                                mentionable\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                permissions\n                            \n                            \n                                    \n                                    \n                                rawPosition\n                            \n                            \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                unicodeEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The color of the role', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The timestamp the role was created at(Unixtimestamp)', example: 1600000000000})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        guild\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The guild the api belongs to', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hoist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is hoisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@ApiProperty({type: String, description: 'The icon of the role', example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The id of the role', example: '123456789012345678'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        managed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is managed by an integration', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        mentionable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({type: Boolean, description: 'Whether or not the role is mentionable', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The name of the role', example: 'Admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The permissions of the role', example: '0'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        rawPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({type: Number, description: 'The position of the role', example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The tags of the role', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        unicodeEmoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'The unicodeEmoji of the role', example: '👑'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/dto/role.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNumber,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nimport {\n  Base64Resolvable,\n  ColorResolvable,\n  Colors,\n  EmojiResolvable,\n  PermissionFlagsBits,\n  PermissionResolvable,\n} from 'discord.js';\n\nclass RoleResponse {\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The guild the api belongs to',\n    example: '123456789012345678',\n  })\n  guild: string;\n\n  @IsUrl()\n  @ApiProperty({\n    type: String,\n    description: 'The icon of the role',\n    example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n  })\n  icon: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The unicodeEmoji of the role',\n    example: '👑',\n  })\n  unicodeEmoji: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The id of the role',\n    example: '123456789012345678',\n  })\n  id: string;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The name of the role',\n    example: 'Admin',\n  })\n  name: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The color of the role',\n    example: 0,\n  })\n  color: number;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is hoisted',\n    example: false,\n  })\n  hoist: boolean;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The position of the role',\n    example: 0,\n  })\n  rawPosition: number;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The permissions of the role',\n    example: '0',\n  })\n  permissions: string;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is managed by an integration',\n    example: false,\n  })\n  managed: boolean;\n\n  @IsBoolean()\n  @ApiProperty({\n    type: Boolean,\n    description: 'Whether or not the role is mentionable',\n    example: false,\n  })\n  mentionable: boolean;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'The tags of the role',\n    example: null,\n  })\n  tags: string;\n\n  @IsNumber()\n  @ApiProperty({\n    type: Number,\n    description: 'The timestamp the role was created at(Unixtimestamp)',\n    example: 1600000000000,\n  })\n  createdTimestamp: number;\n}\n\nclass EditRoleData {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New name of the role',\n  })\n  name?: string;\n\n  @IsIn(Object.keys(Colors))\n  @ApiProperty({\n    enum: Colors,\n    required: false,\n    example: 'White',\n    examples: Object.keys(Colors),\n    description: 'New color of the role',\n  })\n  color?: ColorResolvable;\n\n  @IsString()\n  @ApiProperty({\n    type: String,\n    required: true,\n    description: 'Why was the role updated',\n  })\n  reason: string;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Whether or not the role should be hoisted',\n  })\n  hoist?: boolean;\n\n  @IsNumber()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    required: false,\n    description:\n      'The position of the role; Higher = more permissions relative to the role below',\n  })\n  position?: number;\n\n  @IsIn(Object.keys(PermissionFlagsBits))\n  @IsOptional()\n  @ApiProperty({\n    type: Array,\n    required: false,\n    description: 'Updated Permission',\n    default: null,\n    example: ['AddReactions', 'KickMembers'],\n  })\n  permissions?: PermissionResolvable;\n\n  @IsBoolean()\n  @IsOptional()\n  @ApiProperty({\n    type: Boolean,\n    required: false,\n    description: 'Should the role be mentionable or not',\n  })\n  mentionable?: boolean;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'New Icon of the role, base64 encoded string',\n    externalDocs: {\n      description: 'Discord.js docs',\n      url: 'https://old.discordjs.dev/#/docs/discord.js/main/class/Role?scrollTo=setIcon',\n    },\n  })\n  icon?: Base64Resolvable | EmojiResolvable | null;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    required: false,\n    description: 'The new unicodeEmoji of the role',\n  })\n  unicodeEmoji?: string | null;\n}\n// Generate example schema for get /guilds/:guildId/roles/:roleId\nconst roleResponseSchema = {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n};\n// Schema for retrieving all roles from a guild with example data\nconst rolesResponseSchema = {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n};\n\n// Write exports here\nexport { RoleResponse, EditRoleData, roleResponseSchema, rolesResponseSchema };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SelfController.html":{"url":"controllers/SelfController.html","title":"controller - SelfController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SelfController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user/self\n            \n\n\n            \n                Description\n            \n            \n                The controller for the /user/self endpoint.\nThis endpoint is responsible for telling the frontend the current logged in user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSelf(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/self.controller.ts:21\n                        \n                    \n\n\n            \n                \n                        Gets the current logged in user for the frontend.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the user ID, this is the discord user ID and it comes from the request if a user is logged in\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the user with data fetch from the discord api, see self.service.ts\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject, UseGuards } from '@nestjs/common';\nimport { SelfDto } from './self.dto';\nimport { RequestUser } from '../util/decorators/request-user.decorator';\nimport { JwtAuthGuard } from '../auth/jwt/guards/jwt-auth.guard';\nimport { SelfService } from './self.service';\n\n/**\n * The controller for the /user/self endpoint.\n * This endpoint is responsible for telling the frontend the current logged in user.\n */\n@Controller('/user/self')\n@UseGuards(JwtAuthGuard)\nexport class SelfController {\n  constructor(@Inject(SelfService) private readonly selfService: SelfService) {}\n  /**\n   * Gets the current logged in user for the frontend.\n   * @param userId the user ID, this is the discord user ID and it comes from the request if a user is logged in\n   * @returns the user with data fetch from the discord api, see self.service.ts\n   */\n  @Get()\n  async getSelf(@RequestUser() userId: string): Promise {\n    return this.selfService.fetchSelf(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfDto.html":{"url":"classes/SelfDto.html","title":"class - SelfDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                guilds\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guilds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Guild[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['userId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/self.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { GuildUser } from '@prisma/client';\n\nexport class Guild {\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) name: string;\n  @ApiProperty({ type: String }) image: string;\n}\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n  @ApiPropertyOptional({ type: [Guild] }) guilds: Guild[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfDto-1.html":{"url":"classes/SelfDto-1.html","title":"class - SelfDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-user/dto/self.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatarUrl\n                            \n                            \n                                    \n                                guildId\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                rank\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['guildId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rank\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['rank']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GuildUser['userId']\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-user/dto/self.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GuildUser } from '@prisma/client';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class SelfDto {\n  @ApiProperty({ type: String }) userId: GuildUser['userId'];\n  @ApiProperty({ type: String }) guildId: GuildUser['guildId'];\n  @ApiProperty({ type: String }) rank: GuildUser['rank'];\n  @ApiProperty({ type: String }) avatarUrl: string;\n  @ApiProperty({ type: String }) name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SelfService.html":{"url":"injectables/SelfService.html","title":"injectable - SelfService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SelfService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/self.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service used to fetch the user data that the frontend needs.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _fetchGuilds\n                            \n                            \n                                    Async\n                                fetchSelf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(discord: Client, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/self.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        discord\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _fetchGuilds\n                        \n                    \n                \n            \n            \n                \n                        \n                    _fetchGuilds(userId: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/self.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Fetches the user from the bots database and\ntakes the guild ids and fetches those from discord, then returns them.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the discord user id of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                a list of guilds that the user is in\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        fetchSelf\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchSelf(userId: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/self.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Fetches the user from discord and\nchecks the guild that the user is in via the database\nand returns the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the discord user id of the user\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                the user dto with all needed data\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Client, Guild } from 'discord.js';\nimport { PrismaService } from '../prisma.service';\nimport { SelfDto } from './self.dto';\nimport { User } from '@prisma/client';\nimport { plainToInstance } from '../util/functions/plain-to-instance';\n\n/**\n * Service used to fetch the user data that the frontend needs.\n */\n@Injectable()\nexport class SelfService {\n  constructor(\n    @InjectDiscordClient() private readonly discord: Client,\n    @Inject(PrismaService) private readonly prisma: PrismaService,\n  ) {}\n  /**\n   * Fetches the user from discord and\n   * checks the guild that the user is in via the database\n   * and returns the user.\n   * @param userId the discord user id of the user\n   * @returns the user dto with all needed data\n   */\n  async fetchSelf(userId: User['userId']): Promise {\n    const [discordUser, guilds] = await Promise.all([\n      this.discord.users.fetch(userId),\n      this._fetchGuilds(userId),\n    ]);\n\n    return plainToInstance(SelfDto, {\n      userId: discordUser.id,\n      avatarUrl: discordUser.avatarURL({ size: 128 }),\n      name: discordUser.globalName,\n      guilds: guilds.map((guild) => ({\n        guildId: guild.id,\n        name: guild.name,\n        image: guild.iconURL({ size: 128 }),\n      })),\n    });\n  }\n  /**\n   * Fetches the user from the bots database and\n   * takes the guild ids and fetches those from discord, then returns them.\n   * @param userId the discord user id of the user\n   * @returns a list of guilds that the user is in\n   */\n  private async _fetchGuilds(userId: User['userId']): Promise {\n    return this.prisma.guildUser\n      .findMany({ where: { userId: userId } })\n      .then((guildUsers) =>\n        Promise.all(\n          guildUsers.map((guildUser) =>\n            this.discord.guilds.fetch(guildUser.guildId),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendDirectMessageToUserException.html":{"url":"classes/SendDirectMessageToUserException.html","title":"class - SendDirectMessageToUserException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendDirectMessageToUserException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/send-direct-message-to-user-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Exception thrown when the bot tries to DM a user but fails\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, userId: string)\n                    \n                \n                        \n                            \n                                Defined in src/util/exception/send-direct-message-to-user-exception.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when the bot tries to DM a user but fails\n */\nexport class SendDirectMessageToUserException extends Error {\n  constructor(guildId: string, userId: string) {\n    super(\n      `Failed to send direct message to user ${userId} in guild ${guildId}.`,\n    );\n  }\n}\n\n/**\n * Filter used to craft the http api error response when the exception is triggered in a http request context.\n */\n@Catch(SendDirectMessageToUserException)\nexport class SendDirectMessageToUserExceptionFilter implements ExceptionFilter {\n  catch(exception: SendDirectMessageToUserException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendDirectMessageToUserExceptionFilter.html":{"url":"classes/SendDirectMessageToUserExceptionFilter.html","title":"class - SendDirectMessageToUserExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendDirectMessageToUserExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/util/exception/send-direct-message-to-user-exception.ts\n        \n\n\n            \n                Description\n            \n            \n                Filter used to craft the http api error response when the exception is triggered in a http request context.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: SendDirectMessageToUserException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/util/exception/send-direct-message-to-user-exception.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            SendDirectMessageToUserException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Exception thrown when the bot tries to DM a user but fails\n */\nexport class SendDirectMessageToUserException extends Error {\n  constructor(guildId: string, userId: string) {\n    super(\n      `Failed to send direct message to user ${userId} in guild ${guildId}.`,\n    );\n  }\n}\n\n/**\n * Filter used to craft the http api error response when the exception is triggered in a http request context.\n */\n@Catch(SendDirectMessageToUserException)\nexport class SendDirectMessageToUserExceptionFilter implements ExceptionFilter {\n  catch(exception: SendDirectMessageToUserException, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    response.statusMessage = exception.message;\n    response.sendStatus(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetFirstMessageUICommand.html":{"url":"classes/SetFirstMessageUICommand.html","title":"class - SetFirstMessageUICommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetFirstMessageUICommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/user-set-first-message-ui.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onShowInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/user-set-first-message-ui.command.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onShowInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    onShowInfo(interaction: ContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/user-set-first-message-ui.command.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ApplicationCommandType,\n  Client,\n  ContextMenuCommandInteraction,\n  userMention,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'Set first message',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.Message,\n})\nexport class SetFirstMessageUICommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService)\n    private prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onShowInfo(interaction: ContextMenuCommandInteraction) {\n    if (!interaction.isContextMenuCommand()) return;\n    await interaction.deferReply({ ephemeral: true });\n    const message = await interaction.channel.messages.fetch(\n      interaction.targetId,\n    );\n    await this.prismaService.guildUser.update({\n      where: {\n        guildId_userId: {\n          guildId: message.guildId,\n          userId: message.author.id,\n        },\n      },\n      data: {\n        firstMessageId: interaction.targetId,\n      },\n    });\n    interaction.followUp({\n      content: `First message for ${userMention(\n        message.author.id,\n      )} has been set.`,\n      ephemeral: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingsChanged.html":{"url":"classes/SettingsChanged.html","title":"class - SettingsChanged","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingsChanged\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/events/settings-role-id-changed.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                eventType\n                            \n                            \n                                guildId\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, value: string | number | boolean, eventType)\n                    \n                \n                        \n                            \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    string | number | boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventType\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        eventType\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | number | boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/guild-settings/events/settings-role-id-changed.event.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { Settings } from '@prisma/client';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SettingsChanged implements EventToLog {\n  guildId: string;\n  value: string | number | boolean;\n  eventType: keyof Settings;\n\n  constructor(\n    guildId: string,\n    value: string | number | boolean,\n    eventType: keyof Settings,\n  ) {\n    this.guildId = guildId;\n    this.value = value;\n    this.eventType = eventType;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`SettingsChanged: ${this.eventType} changed to ${this.value}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingsDto.html":{"url":"classes/SettingsDto.html","title":"class - SettingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/guild-settings/dto/settings.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Omit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                adminRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                introChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                leaveMessageFormat\n                            \n                            \n                                    \n                                    \n                                    \n                                modChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                modRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                openIntroChannelId\n                            \n                            \n                                    \n                                    \n                                    \n                                prefix\n                            \n                            \n                                    \n                                    \n                                    \n                                unverifiedMemberRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                verifiedMemberRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                welcomeMessageFormat\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        adminRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        introChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        leaveMessageFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        modChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        modRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        openIntroChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        unverifiedMemberRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        verifiedMemberRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        welcomeMessageFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/guild/guild-settings/dto/settings.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Settings } from '@prisma/client';\nimport { IsOptional, IsString } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class SettingsDto implements Omit {\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  prefix: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  welcomeMessageFormat: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  openIntroChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  introChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  leaveMessageFormat: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  leaveChannelId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  unverifiedMemberRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  verifiedMemberRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  modRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  adminRoleId: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({ type: String })\n  modChannelId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlowmodeDisabled.html":{"url":"classes/SlowmodeDisabled.html","title":"class - SlowmodeDisabled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlowmodeDisabled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                enabled\n                            \n                            \n                                guildId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, enabled: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        enabled\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlowmodeEnabled.html":{"url":"classes/SlowmodeEnabled.html","title":"class - SlowmodeEnabled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlowmodeEnabled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/channel.event.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                enabled\n                            \n                            \n                                guildId\n                            \n                            \n                                seconds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildId: string, channelId: string, enabled: boolean, seconds: number)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/channel.event.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        channelId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        enabled\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seconds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/channel.event.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/channel.event.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class SlowmodeEnabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n  seconds: number;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    enabled: boolean,\n    seconds: number,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n    this.seconds = seconds;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeEnabled: ${this.seconds} seconds slowmode enabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class SlowmodeDisabled implements EventToLog {\n  guildId: string;\n  channelId: string;\n  enabled: boolean;\n\n  constructor(guildId: string, channelId: string, enabled: boolean) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.enabled = enabled;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `SlowmodeDisabled Slowmode disabled in ${this.channelId} in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class ChannelCleaned implements EventToLog {\n  guildId: string;\n  channelId: string;\n  messagesDeleted: number;\n  before: number;\n  userId: string;\n\n  constructor(\n    guildId: string,\n    channelId: string,\n    messagesDeleted: number,\n    before: number,\n    userId: string,\n  ) {\n    this.guildId = guildId;\n    this.channelId = channelId;\n    this.messagesDeleted = messagesDeleted;\n    this.before = before;\n    this.userId = userId;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `ChannelCleaned: ${this.messagesDeleted} messages deleted in ${this.channelId} in guild ${this.guildId} for user ${this.userId}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SpecialCommand.html":{"url":"classes/SpecialCommand.html","title":"class - SpecialCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpecialCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/special.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cakes\n                            \n                            \n                                coffees\n                            \n                            \n                                possibleAnswers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                chooseRandomCoffee\n                            \n                            \n                                templateAnswer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cakes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'Käsekuchen',\n    'Apfelkuchen',\n    'Bienenstich',\n    'Streuselkuchen',\n    'Kuchen',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coffees\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'Americano',\n    'Cappuccino',\n    'Diplomatenkaffee',\n    'Einspänner',\n    'Eiskaffee',\n    'Espresso',\n    'Kaffee Konsul',\n    'Latte Macchiato',\n    'Mokka',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        possibleAnswers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    '*Y schiebt X einen Z rüber!*',\n    '*Y schenkt X einen ganzen Z!*',\n    '*Y gibt X ein headpat :3*',\n    '*Y gibt X eine Umarmung :3*',\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/bot/commands/special.command.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        chooseRandomCoffee\n                        \n                    \n                \n            \n            \n                \n                        \n                    chooseRandomCoffee(interaction: CommandInteraction, dto: UserToUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/special.command.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserToUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateAnswer\n                        \n                    \n                \n            \n            \n                \ntemplateAnswer(category: string, fromUserId: string, toUserId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/commands/special.command.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fromUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                toUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, IA, InteractionEvent } from '@discord-nestjs/core';\nimport { CommandInteraction, userMention } from 'discord.js';\nimport { UserToUser } from '../dto/user-to-user.dto';\nimport { SlashCommandPipe } from '@discord-nestjs/common';\nimport { UseFilters, ValidationPipe } from '@nestjs/common';\nimport { CommandValidationFilter } from '../filters/command-validation';\n\n@Command({\n  name: 'special',\n  description:\n    'Give a user you like a coffee, a cake or a headpat or maybe just a hug?',\n  dmPermission: false,\n})\n@UseFilters(CommandValidationFilter)\nexport class SpecialCommand {\n  coffees = [\n    'Americano',\n    'Cappuccino',\n    'Diplomatenkaffee',\n    'Einspänner',\n    'Eiskaffee',\n    'Espresso',\n    'Kaffee Konsul',\n    'Latte Macchiato',\n    'Mokka',\n  ];\n  possibleAnswers = [\n    '*Y schiebt X einen Z rüber!*',\n    '*Y schenkt X einen ganzen Z!*',\n    '*Y gibt X ein headpat :3*',\n    '*Y gibt X eine Umarmung :3*',\n  ];\n  cakes = [\n    'Käsekuchen',\n    'Apfelkuchen',\n    'Bienenstich',\n    'Streuselkuchen',\n    'Kuchen',\n  ];\n  @Handler()\n  async chooseRandomCoffee(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: UserToUser,\n  ): Promise {\n    const toUser = await interaction.guild.members.fetch(dto.user);\n    return this.templateAnswer(dto.category, interaction.user.id, toUser.id);\n  }\n\n  templateAnswer(category: string, fromUserId: string, toUserId: string) {\n    console.log(category);\n    console.log(fromUserId);\n    console.log(toUserId);\n\n    switch (category) {\n      case 'coffee':\n        return this.possibleAnswers[0]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId))\n          .replace(\n            'Z',\n            this.coffees[Math.ceil(Math.random() * this.coffees.length - 1)],\n          );\n      case 'cake':\n        return this.possibleAnswers[1]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId))\n          .replace(\n            'Z',\n            this.cakes[Math.ceil(Math.random() * this.cakes.length - 1)],\n          );\n      case 'headpat':\n        return this.possibleAnswers[2]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId));\n      case 'hug':\n        return this.possibleAnswers[3]\n          .replace('Y', userMention(fromUserId))\n          .replace('X', userMention(toUserId));\n      default:\n        break;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nGuildRestrictedChannelService->TasksModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nTasksModule -->\n\nGuildService->TasksModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nTasksModule -->\n\nGuildSettingsService->TasksModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nTasksModule -->\n\nGuildUserService->TasksModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nTasksModule -->\n\nPrismaService->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The Tasks module manages the creation/execution of jobs that run periodically\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GuildRestrictedChannelService\n                        \n                        \n                            GuildService\n                        \n                        \n                            GuildSettingsService\n                        \n                        \n                            GuildUserService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\nimport { GuildSettingsService } from 'src/guild/guild-settings/guild-settings.service';\nimport { GuildRestrictedChannelService } from 'src/guild/guild-restricted-channel/guild-restricted-channel.service';\n\n/**\n * The Tasks module manages the creation/execution of jobs that run periodically\n */\n@Module({\n  providers: [\n    TasksService,\n    GuildUserService,\n    GuildService,\n    PrismaService,\n    GuildSettingsService,\n    GuildRestrictedChannelService,\n  ],\n  imports: [DiscordModule.forFeature()],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The tasks service is responsible for managing jobs/tasks that run periodically.\nIt also exposes a way to create tasks but NOT deleting them.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                checkActiveUsers\n                            \n                            \n                                    \n                                    Async\n                                checkTimeouts\n                            \n                            \n                                    \n                                    Async\n                                cleanWfpMembers\n                            \n                            \n                                    \n                                    Async\n                                closeStaleTickets\n                            \n                            \n                                createDynamicScheduledJob\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(guildService: GuildService, userService: GuildUserService, client: Client, eventEmitter: EventEmitter2, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        guildService\n                                                  \n                                                        \n                                                                        GuildService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        GuildUserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkActiveUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkActiveUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'checkActiveUsers', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Runs at 00:00:00 every day and\nupdates the written messages count for all users, of all guilds the bot is in, that have the MEMBER rank\nand then updates their permissions on specific channels.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkTimeouts\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeouts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('*/5 * * * *', {name: 'timeouts', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Runs every 5 minutes and checks if members of each given guild the bot is in are still timeouted\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        cleanWfpMembers\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanWfpMembers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'cleanWfpMembers', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:128\n                        \n                    \n\n\n            \n                \n                        Runs everyday at midnight and kicks members that are longer than 14 days on the server and haven't checked in.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        closeStaleTickets\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeStaleTickets()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *', {name: 'closeStaleTickets', timeZone: 'Europe/Berlin'})\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createDynamicScheduledJob\n                        \n                    \n                \n            \n            \n                \ncreateDynamicScheduledJob(jobOptions: CronJobParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:41\n                        \n                    \n\n\n            \n                \n                        A utility function to create cronjobs on the fly from cronjob parameters\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jobOptions\n                                            \n                                                        CronJobParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    CronJob parameters such as the time. onComplete etc\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                a new cronjob\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { GuildUser } from '@prisma/client';\nimport {\n  BaseGuildTextChannel,\n  Client,\n  Colors,\n  EmbedBuilder,\n  GuildTextBasedChannel,\n  userMention,\n} from 'discord.js';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { UserTimeOutEvent } from 'src/guild/moderation/events/user.events';\nimport { GuildUserService } from 'src/guild/guild-user/guild-user.service';\nimport { CronJob, CronJobParams } from 'cron';\nimport { GuildService } from 'src/guild/guild.service';\nimport { PrismaService } from 'src/prisma.service';\n\nconst logger = new Logger('TaskService');\n\n/**\n * The tasks service is responsible for managing jobs/tasks that run periodically.\n * It also exposes a way to create tasks but NOT deleting them.\n */\n@Injectable()\nexport class TasksService {\n  constructor(\n    @Inject(GuildService) private guildService: GuildService,\n    @Inject(GuildUserService) private userService: GuildUserService,\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n    @Inject(PrismaService) private readonly prismaService: PrismaService,\n  ) {}\n  /**\n   * A utility function to create cronjobs on the fly from cronjob parameters\n   * @param jobOptions CronJob parameters such as the time. onComplete etc\n   * @returns a new cronjob\n   */\n  createDynamicScheduledJob(jobOptions: CronJobParams) {\n    return new CronJob(\n      jobOptions.cronTime,\n      jobOptions.onTick,\n      jobOptions.onComplete,\n      jobOptions.start,\n      jobOptions.timeZone,\n    );\n  }\n\n  /**\n   * Runs at 00:00:00 every day and\n   * updates the written messages count for all users, of all guilds the bot is in, that have the MEMBER rank\n   * and then updates their permissions on specific channels.\n   */\n  @Cron('0 0 * * *', {\n    name: 'checkActiveUsers',\n    timeZone: 'Europe/Berlin',\n  })\n  async checkActiveUsers() {\n    this.client.guilds.cache.forEach(async (guild) => {\n      (await this.userService.findAll(guild.id)).forEach(\n        async (user: GuildUser) => {\n          if (user.rank != 'MEMBER') return;\n          logger.log(`Checking user ${user.userId} for activity...`);\n          this.userService.updateMessageCountBucket(user.userId, user.guildId);\n          this.guildService.updateChannelPermissions(user);\n        },\n      );\n    });\n  }\n\n  /**\n   * Runs every 5 minutes and checks if members of each given guild the bot is in are still timeouted\n   */\n  @Cron('*/5 * * * *', {\n    name: 'timeouts',\n    timeZone: 'Europe/Berlin',\n  })\n  async checkTimeouts() {\n    this.client.guilds.cache.forEach(async (guild) => {\n      (await this.userService.findAll(guild.id)).forEach(\n        async (dbUser: GuildUser) => {\n          try {\n            const member = await this.client.guilds.cache\n              .get(guild.id)\n              .members.fetch(dbUser.userId.toString());\n            if (member.communicationDisabledUntilTimestamp == null) {\n              return;\n            } else if (\n              member.communicationDisabledUntilTimestamp > Date.now()\n            ) {\n              logger.log(\n                `User ${dbUser.userId} is still timed out, until ${new Date(\n                  member.communicationDisabledUntilTimestamp,\n                ).toLocaleString()}`,\n              );\n              return;\n            } else if (\n              member.communicationDisabledUntilTimestamp  userMention(member.id))\n            .join('\\n'),\n        },\n        {\n          name: \"Couldn't kick members count\",\n          value: outCome['unkickableMembers'].length.toString(),\n        },\n        {\n          name: \"Couldn't kick members names\",\n          value: outCome['unkickableMembers']\n            .map((member) => userMention(member.id))\n            .join('\\n'),\n        },\n      ]);\n    await logChannel.send({\n      embeds: [embed],\n    });\n  }\n\n  @Cron('0 0 * * *', {\n    name: 'closeStaleTickets',\n    timeZone: 'Europe/Berlin',\n  })\n  async closeStaleTickets() {\n    const tickets = await this.prismaService.tickets.findMany();\n    tickets.forEach(async (ticket) => {\n      try {\n        const channel = (await (\n          await this.client.guilds.fetch(ticket.guildId)\n        ).channels.fetch(ticket.ticketId)) as GuildTextBasedChannel;\n\n        if (\n          new Date(new Date().setDate(new Date().getDate() - 7)) >\n          new Date((await channel.lastMessage.fetch()).createdTimestamp)\n        ) {\n          try {\n            await (channel as BaseGuildTextChannel).permissionOverwrites.delete(\n              ticket.userId,\n            );\n            await this.prismaService.tickets.update({\n              where: {\n                ticketId: ticket.ticketId,\n              },\n              data: {\n                closed: true,\n              },\n            });\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TicketSystemSetupCommand.html":{"url":"classes/TicketSystemSetupCommand.html","title":"class - TicketSystemSetupCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TicketSystemSetupCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/ticket-system.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onTicketsystemSetupCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/ticket-system.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onTicketsystemSetupCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTicketsystemSetupCommand(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/ticket-system.command.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  Client,\n  CommandInteraction,\n} from 'discord.js';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Command({\n  name: 'ticketsystem-setup',\n  description: 'Sends a message and attaches the create Ticket button.',\n  defaultMemberPermissions: ['Administrator'],\n  dmPermission: false,\n})\nexport class TicketSystemSetupCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n  ) {}\n\n  @Handler()\n  async onTicketsystemSetupCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n  ) {\n    try {\n      await interaction.channel.send({\n        content:\n          'Du hast ein Anliegen welches du mit den Mods besprechen möchtest? Dann erstelle ein Ticket!',\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n      await interaction.reply({\n        ephemeral: true,\n        content: 'Done!',\n      });\n    } catch {\n      interaction.reply({\n        ephemeral: true,\n        content: 'Could not send a message in this channel!',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeOutCommand.html":{"url":"classes/TimeOutCommand.html","title":"class - TimeOutCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeOutCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/timeout.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                onTimeOutCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/timeout.command.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        onTimeOutCommand\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTimeOutCommand(interaction: CommandInteraction, dto: UserTimeOutDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()@UseFilters(CommandValidationFilter)\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/timeout.command.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UserTimeOutDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n  InteractionEvent,\n} from '@discord-nestjs/core';\nimport {\n  ActionRowBuilder,\n  ButtonBuilder,\n  Client,\n  CommandInteraction,\n  EmbedBuilder,\n  userMention,\n} from 'discord.js';\nimport UserTimeOutDto from '../dto/user-timeout.dto';\nimport { SlashCommandPipe, ValidationPipe } from '@discord-nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  UserSendDMFailedEvent,\n  UserTimeOutEvent,\n  UserTimeOutFailedEvent,\n} from 'src/guild/moderation/events/user.events';\nimport { UseFilters } from '@nestjs/common';\nimport { CommandValidationFilter } from '../filters/command-validation';\nimport { needHelpButton } from 'src/util/functions/menu-helper';\n\n@Command({\n  name: 'timeout',\n  description: 'Timeouts a user',\n  defaultMemberPermissions: ['ModerateMembers'],\n  descriptionLocalizations: {\n    'en-US': 'Timeouts a user',\n    de: 'Nutzer:in muten (Timeout)',\n  },\n  dmPermission: false,\n})\nexport class TimeOutCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    private readonly eventEmitter: EventEmitter2,\n  ) {}\n  @Handler()\n  @UseFilters(CommandValidationFilter)\n  async onTimeOutCommand(\n    @InteractionEvent() interaction: CommandInteraction,\n    @IA(SlashCommandPipe, ValidationPipe)\n    dto: UserTimeOutDto,\n  ) {\n    const date = new Date(dto.duration).getTime();\n    const user = await interaction.guild.members.fetch(dto.user);\n    await interaction.deferReply({\n      ephemeral: true,\n    });\n    const error: Array = [];\n    try {\n      await user.timeout(date - Date.now(), dto.reason);\n    } catch (err) {\n      error.push(err);\n      this.eventEmitter.emit(\n        'user.timeout.failed',\n        new UserTimeOutFailedEvent(\n          user.id,\n          interaction.guildId,\n          dto.reason,\n          date,\n          err,\n        ),\n      );\n    }\n    try {\n      if (error.length) throw new Error('Timeout failed, therefore no DM');\n      await user.send({\n        content: `Du hast einen Timeout bis ${new Date(\n          dto.duration,\n        ).toString()}, bei Fragen wende dich an die Mods. \nGrund: ${dto.reason}`,\n        components: [\n          new ActionRowBuilder().addComponents(needHelpButton()),\n        ],\n      });\n    } catch (err) {\n      error.push(err);\n      this.eventEmitter.emit(\n        'user.send.failed',\n        new UserSendDMFailedEvent(user.id, interaction.guildId, err),\n      );\n    }\n    const embed = new EmbedBuilder()\n      .setAuthor({\n        name: this.client.user.username,\n        iconURL: this.client.user.avatarURL(),\n      })\n      .setTitle(`Timeout user ${user.user.username}`)\n      .setDescription(\n        error.length === 0\n          ? `Timeouted user ${userMention(user.id)} until ${new Date(\n              dto.duration,\n            ).toLocaleString()} and sent them a DM.`\n          : `Failed to timeout user ${userMention(user.id)} until ${new Date(\n              dto.duration,\n            ).toLocaleString()}, check below for more information.`,\n      );\n    if (error.length) {\n      embed.addFields(\n        error.map((e) => {\n          if (!(e instanceof Error)) return;\n          return {\n            name: e.name,\n            value: e.message,\n          };\n        }),\n      );\n    }\n    await interaction.followUp({\n      embeds: [embed],\n      ephemeral: true,\n    });\n    this.eventEmitter.emit(\n      'user.timeout.created',\n      new UserTimeOutEvent(user.id, interaction.guildId, dto.reason, date),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UnverifyByRoleCommand.html":{"url":"classes/UnverifyByRoleCommand.html","title":"class - UnverifyByRoleCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UnverifyByRoleCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/unverify-by-role.conmand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onUnverifybyRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, database: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/unverify-by-role.conmand.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        database\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onUnverifybyRole\n                        \n                    \n                \n            \n            \n                \n                        \n                    onUnverifybyRole(baseInteraction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/unverify-by-role.conmand.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                baseInteraction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Command,\n  Handler,\n  IA,\n  InjectDiscordClient,\n} from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { Client, CommandInteraction } from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'enter-lockdown',\n  dmPermission: false,\n})\nexport class UnverifyByRoleCommand {\n  constructor(\n    @InjectDiscordClient() private client: Client,\n    @Inject(PrismaService) private database: PrismaService,\n  ) {}\n  @Handler()\n  onUnverifybyRole(@IA() baseInteraction: CommandInteraction) {\n    this.client.guilds.fetch(baseInteraction.guildId).then((guild) =>\n      guild.members.fetch().then((members) =>\n        members.forEach(async (member) => {\n          if (\n            member.roles.cache.has('1011563978956226560') ||\n            member.roles.cache.has('1011513775054143632') ||\n            guild.ownerId == member.id\n          )\n            return;\n          const roles = [];\n          member.roles.cache.forEach((role) => roles.push({ id: role.id }));\n          this.database.lockdownRoleBackup\n            .create({\n              data: {\n                guildId: member.guild.id,\n                userId: member.id,\n                roles,\n              },\n            })\n            .then(async (data) =>\n              (data.roles as Prisma.JsonArray).forEach(\n                async (role: { id: string }) =>\n                  await member.roles.remove(role.id),\n              ),\n            );\n          if (!member.roles.cache.has('1226585753253843014')) {\n            await member.roles.add('1121823930085285938');\n          } else {\n            //await member.roles.add('')\n          }\n        }),\n      ),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserBanEvent.html":{"url":"classes/UserBanEvent.html","title":"class - UserBanEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserBanEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                banUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getGuildUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                kickUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                purgeUserFromGuild\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                timeoutUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        banUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    banUser(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/ban')@ApiOperation({summary: 'Ban a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully banned'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUser(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get a user for a guild'})@ApiResponse({status: 200, type: DiscordUser, schema: userResponseSchema, description: 'User was successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getGuildUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGuildUsers(guildId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({summary: 'Get all users for a guild'})@ApiResponse({status: 200, schema: usersResponseSchema, type: DiscordGuildMember, description: 'Users were successfully fetched'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        kickUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    kickUser(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/kick')@ApiOperation({summary: 'Kick a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully kicked'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        purgeUserFromGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    purgeUserFromGuild(guildId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/purge')@ApiOperation({summary: 'Purge a user from a guild VERY EXPENSIVEEEEEE, USE WITH CAUTION'})@ApiResponse({status: 200, description: 'User was successfully purged'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        timeoutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    timeoutUser(guildId: string, userId: string, duration: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':userId/timeout/:duration')@ApiOperation({summary: 'Timeout a user from a guild'})@ApiResponse({status: 200, description: 'User was successfully timed outed'})\n                \n            \n\n                    \n                        \n                            Defined in src/guild/moderation/user/user.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                duration\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  NotFoundException,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { ChannelType, Client, User } from 'discord.js';\nimport {\n  DiscordUser,\n  userResponseSchema,\n  usersResponseSchema,\n} from '../dto/user';\nimport { InjectDiscordClient } from '@discord-nestjs/core';\nimport { JwtAuthGuard } from 'src/auth/jwt/guards/jwt-auth.guard';\nimport cleanTextChannel from 'src/util/functions/channel-utils';\nimport { SendDirectMessageToUserException } from 'src/util/exception/send-direct-message-to-user-exception';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport {\n  UserBanEvent,\n  UserKickEvent,\n  UserPurgeEvent,\n  UserTimeOutEvent,\n} from '../events/user.events';\nimport { DiscordGuildMember } from '../dto/guild-member';\nimport { plainToInstance } from '../../../util/functions/plain-to-instance';\nimport { Request } from 'express';\nimport { GuildUser, Rank } from '@prisma/client';\nimport { RequiredRank } from 'src/util/decorators/requires-rank.decorator';\nimport { HasRequiredRank } from 'src/util/guards/has-required-rank.guard';\n\n@Controller('/user')\n@ApiBearerAuth()\n@RequiredRank(Rank.MOD)\n@UseGuards(JwtAuthGuard, HasRequiredRank)\nexport class UserController {\n  logger = new Logger(UserController.name);\n\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(EventEmitter2) private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get all users for a guild' })\n  @ApiResponse({\n    status: 200,\n    schema: usersResponseSchema,\n    type: DiscordGuildMember,\n    description: 'Users were successfully fetched',\n  })\n  async getGuildUsers(\n    @Param('guildId') guildId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const members = await guild.members.fetch();\n    this.logger.debug(`Found ${members.size} members in guild ${guildId}`);\n    return members.map((member) =>\n      plainToInstance(DiscordGuildMember, {\n        avatarUrl: member.displayAvatarURL(),\n        guildId: member.guild.id,\n        bot: member.user.bot,\n        userId: member.user.id,\n        communicationDisabledUntil:\n          member?.communicationDisabledUntil?.toJSON() ?? undefined,\n        displayName: member.displayName ?? member.user.globalName,\n        username: member.user.username,\n      }),\n    );\n  }\n\n  @Get('/')\n  @ApiOperation({ summary: 'Get a user for a guild' })\n  @ApiResponse({\n    status: 200,\n    type: DiscordUser,\n    schema: userResponseSchema,\n    description: 'User was successfully fetched',\n  })\n  async getGuildUser(\n    @Req() request: Request & { user: GuildUser },\n  ): Promise {\n    const guild = await this.client.guilds.fetch(request.user.guildId);\n    const member = await guild.members.fetch(request.user.userId);\n    this.logger.log(\n      `Found member ${member.user.username} in guild ${request.user.guildId}`,\n    );\n    return member.user;\n  }\n\n  @Post(':userId/ban')\n  @ApiOperation({ summary: 'Ban a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully banned',\n  })\n  async banUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    await guild.members.ban(userId);\n    this.logger.log(`Banned user ${userId} from guild ${guildId}`);\n    await this.eventEmitter.emitAsync(\n      'user.ban',\n      new UserBanEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n\n  @Post(':userId/kick')\n  @ApiOperation({ summary: 'Kick a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully kicked',\n  })\n  async kickUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    await guild.members.kick(userId);\n    this.logger.log(`Kicked user ${userId} from guild ${guildId}`);\n    await this.eventEmitter.emitAsync(\n      'user.kick',\n      new UserKickEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n\n  @Post(':userId/timeout/:duration')\n  @ApiOperation({ summary: 'Timeout a user from a guild' })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully timed outed',\n  })\n  async timeoutUser(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n    @Param('duration') duration: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    const member = await guild.members.fetch(userId);\n    await member.timeout(parseInt(duration));\n    await member\n      .send(\n        `Du hast einen Timeout bis ${new Date(\n          new Date().getTime() + duration,\n        ).toISOString()}, bei Fragen wende dich an die Mods.`,\n      )\n      .catch(() => {\n        throw new SendDirectMessageToUserException(guildId, userId);\n      });\n    await this.eventEmitter.emitAsync(\n      'user.timeout.created',\n      new UserTimeOutEvent(\n        userId,\n        guildId,\n        'TODO: NOT IMPLEMENTED',\n        new Date(new Date().getTime() + duration).getMilliseconds(),\n      ),\n    );\n    this.logger.log(\n      `Timed out user ${userId} from guild ${guildId} for ${duration}`,\n    );\n  }\n\n  @Post(':userId/purge')\n  @ApiOperation({\n    summary: 'Purge a user from a guild VERY EXPENSIVEEEEEE, USE WITH CAUTION',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User was successfully purged',\n  })\n  async purgeUserFromGuild(\n    @Param('guildId') guildId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const guild = await this.client.guilds.fetch(guildId);\n    this.logger.log(`Purging user ${userId} from guild ${guildId}`);\n    if (guild === undefined) {\n      throw new NotFoundException('Guild not found');\n    }\n    guild.channels.fetch();\n    guild.channels.cache.forEach(async (channel) => {\n      try {\n        if (\n          channel.type === ChannelType.GuildText ||\n          channel.type === ChannelType.PublicThread ||\n          channel.type === ChannelType.PrivateThread\n        ) {\n          this.logger.log(`Purging user ${userId} from channel ${channel.id}`);\n          await cleanTextChannel(\n            channel,\n            () => false,\n            (msg) => msg.author.id === userId,\n            this.logger,\n          );\n          // sleep for 500ms to avoid rate limit\n          await new Promise((resolve) => setTimeout(resolve, 500));\n        }\n      } catch {\n        this.logger.error(\n          `Failed to purge user ${userId} from channel ${channel.id}`,\n        );\n      }\n    });\n    await this.eventEmitter.emitAsync(\n      'user.purge',\n      new UserPurgeEvent(userId, guildId, 'TODO: NOT IMPLEMENTED'),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInfoUiCommand.html":{"url":"classes/UserInfoUiCommand.html","title":"class - UserInfoUiCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInfoUiCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/user-info-ui.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _getMessage\n                            \n                            \n                                    \n                                    Async\n                                onShowInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/user-info-ui.command.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                    Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _getMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getMessage(msgId: string, guildId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/bot/commands/user-info-ui.command.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                msgId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guildId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onShowInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    onShowInfo(interaction: ContextMenuCommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/user-info-ui.command.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        ContextMenuCommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InjectDiscordClient } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ApplicationCommandType,\n  Client,\n  ContextMenuCommandInteraction,\n  EmbedBuilder,\n  Message,\n  userMention,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'Show user info',\n  defaultMemberPermissions: ['ModerateMembers'],\n  type: ApplicationCommandType.User,\n})\nexport class UserInfoUiCommand {\n  constructor(\n    @InjectDiscordClient()\n    private readonly client: Client,\n    @Inject(PrismaService)\n    private prismaService: PrismaService,\n  ) {}\n  @Handler()\n  async onShowInfo(interaction: ContextMenuCommandInteraction) {\n    if (!interaction.isContextMenuCommand()) return;\n    await interaction.deferReply({ ephemeral: true });\n    const guildUser = await this.prismaService.guildUser.findUnique({\n      where: {\n        guildId_userId: {\n          guildId: interaction.guildId,\n          userId: interaction.targetId,\n        },\n      },\n    });\n    if (!guildUser) {\n      return interaction.followUp({\n        content: 'User not found in database.',\n        ephemeral: true,\n      });\n    }\n    const firstMessageId = guildUser.firstMessageId;\n    const message = await this._getMessage(firstMessageId, interaction.guildId);\n    const numMessages = await this.prismaService.messages.count({\n      where: { userId: interaction.targetId, guildId: interaction.guildId },\n    });\n    const numReactions = await this.prismaService.auditLog.count({\n      where: {\n        invokerId: interaction.targetId,\n        guildId: interaction.guildId,\n        action: 'REACTION_ADDED',\n      },\n    });\n\n    const embed = new EmbedBuilder()\n      .setTitle('User Info')\n      .setDescription(`User: ${userMention(interaction.targetId)}`)\n      .addFields([\n        {\n          name: 'Link to introduction message',\n          value: message\n            ? `$[Click here](${message.url})`\n            : 'No message found in the database',\n        },\n        {\n          name: 'Number of messages sent',\n          value: numMessages.toString(),\n        },\n        {\n          name: 'Reactions added',\n          value: numReactions.toString(),\n        },\n      ]);\n    return interaction.followUp({\n      embeds: [embed],\n      ephemeral: true,\n    });\n  }\n  async _getMessage(msgId: string, guildId: string) {\n    if (!msgId) return null;\n    let message: Message = null;\n    await this.client.guilds.fetch(guildId).then(async (guild) => {\n      (await guild.channels.fetch()).forEach(async (channel) => {\n        if (channel.isTextBased()) {\n          try {\n            message = await channel.messages.fetch(msgId);\n          } catch {\n            return;\n          }\n        }\n      });\n    });\n    return message;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserKickEvent.html":{"url":"classes/UserKickEvent.html","title":"class - UserKickEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserKickEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nSelfService \n\nSelfService \n\n\n\nUserModule\n\nUserModule\n\nSelfService  -->\n\nUserModule->SelfService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nUserModule -->\n\nSelfService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The user module, not to be confused the guildUser module,\nis used to manage the bot local user of a discord user.\nSee user.service.ts and self.controller.ts for more info\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            SelfService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SelfController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SelfService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { DiscordModule } from '@discord-nestjs/core';\nimport { SelfController } from './self.controller';\nimport { SelfService } from './self.service';\n\n/**\n * The user module, not to be confused the guildUser module,\n * is used to manage the bot local user of a discord user.\n * See user.service.ts and self.controller.ts for more info\n */\n@Module({\n  imports: [DiscordModule.forFeature()],\n  providers: [PrismaService, SelfService],\n  controllers: [SelfController],\n  exports: [SelfService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPurgeEvent.html":{"url":"classes/UserPurgeEvent.html","title":"class - UserPurgeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPurgeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:92\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:90\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSendDMFailedEvent.html":{"url":"classes/UserSendDMFailedEvent.html","title":"class - UserSendDMFailedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSendDMFailedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                guildId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, error: Error)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:110\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:108\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutDto.html":{"url":"classes/UserTimeOutDto.html","title":"class - UserTimeOutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user-timeout.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                duration\n                            \n                            \n                                    \n                                reason\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@Param({description: 'The duration of the timeout', descriptionLocalizations: undefined, type: undefined, required: true})@IsDateString({}, {message: 'The input must be in format: Xd, Xh, Xm or XdXh or XhXm or XdXm or XdXhXm. Where X is a number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The reason for the timeout', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user to timeout', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-timeout.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Param, ParamType } from '@discord-nestjs/core';\nimport { Transform } from 'class-transformer';\nimport { IsDateString } from 'class-validator';\nimport { User } from 'discord.js';\n\nexport default class UserTimeOutDto {\n  @Param({\n    description: 'The user to timeout',\n    descriptionLocalizations: {\n      'en-US': 'The user to timeout',\n      de: 'Account der gemutet werden soll',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n\n  @Param({\n    description: 'The reason for the timeout',\n    descriptionLocalizations: {\n      'en-US': 'The reason for the timeout',\n      de: 'Grund für den Timeout',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  reason: string;\n\n  // Hacky way to both transform the value and validate it, in one step :D\n  @Transform(({ value }) => {\n    if (\n      !/\\b(\\d+d)(\\d+h)\\b|\\b(\\d+h)(\\d+m)\\b|\\b(\\d+d)(\\d+m)\\b|\\b(\\d+[dhm])\\b|\\b(\\d+d)(\\d+h)(\\d+m)/.test(\n        value.trim(),\n      )\n    )\n      return null;\n    let _days = '0';\n    let _hours = '0';\n    let _minutes = '0';\n    (value as string)\n      .match(\n        /\\b(\\d+d)(\\d+h)\\b|\\b(\\d+h)(\\d+m)\\b|\\b(\\d+d)(\\d+m)\\b|\\b(\\d+[dhm])\\b|\\b(\\d+d)(\\d+h)(\\d+m)/g,\n      )\n      .forEach((match) => {\n        if (match.endsWith('d')) _days = match.replace('d', '');\n        else if (match.endsWith('h')) _hours = match.replace('h', '');\n        else if (match.endsWith('m')) _minutes = match.replace('m', '');\n      });\n    const days = parseInt(_days) || 0;\n    const hours = parseInt(_hours) || 0;\n    const minutes = parseInt(_minutes) || 0;\n    return new Date(\n      Date.now() + ((days * 24 + hours) * 60 + minutes) * 60 * 1000,\n    ).toISOString();\n  })\n  @Param({\n    description: 'The duration of the timeout',\n    descriptionLocalizations: {\n      'en-US': 'The duration of the timeout',\n      de: 'Dauer des Timeouts',\n    },\n    type: ParamType.STRING,\n    required: true,\n  })\n  @IsDateString(\n    {},\n    {\n      message:\n        'The input must be in format: Xd, Xh, Xm or XdXh or XhXm or XdXm or XdXhXm. Where X is a number',\n    },\n  )\n  duration: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutEvent.html":{"url":"classes/UserTimeOutEvent.html","title":"class - UserTimeOutEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string, duration: number)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:37\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserTimeOutFailedEvent.html":{"url":"classes/UserTimeOutFailedEvent.html","title":"class - UserTimeOutFailedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserTimeOutFailedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guild/moderation/events/user.events.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            EventToLog\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                duration\n                            \n                            \n                                error\n                            \n                            \n                                guildId\n                            \n                            \n                                reason\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toFormattedLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string, guildId: string, reason: string, duration: number, error: Error)\n                    \n                \n                        \n                            \n                                Defined in src/guild/moderation/events/user.events.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        guildId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reason\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        duration\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        guildId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/guild/moderation/events/user.events.ts:62\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toFormattedLog\n                        \n                    \n                \n            \n            \n                \ntoFormattedLog(logger: Logger)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guild/moderation/events/user.events.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { EventToLog } from 'src/util/interfaces/event-to-log';\n\nexport class UserBanEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserBanEvent: ${this.userId} banned in guild ${this.guildId}`);\n  }\n}\n\nexport class UserKickEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(`UserKickEvent: ${this.userId} kicked in guild ${this.guildId}`);\n  }\n}\n\nexport class UserTimeOutEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserTimeOutEvent: ${this.userId} timed out in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserTimeOutFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n  duration: number;\n  error: Error;\n\n  constructor(\n    userId: string,\n    guildId: string,\n    reason: string,\n    duration: number,\n    error: Error,\n  ) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n    this.duration = duration;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserTimeOutFailedEvent: ${this.userId} failed to time out in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\nexport class UserPurgeEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  reason: string;\n\n  constructor(userId: string, guildId: string, reason: string) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.reason = reason;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.log(\n      `UserPurgeEvent: ${this.userId} purged in guild ${this.guildId}`,\n    );\n  }\n}\n\nexport class UserSendDMFailedEvent implements EventToLog {\n  userId: string;\n  guildId: string;\n  error: Error;\n\n  constructor(userId: string, guildId: string, error: Error) {\n    this.userId = userId;\n    this.guildId = guildId;\n    this.error = error;\n  }\n\n  toFormattedLog(logger: Logger): void {\n    logger.error(\n      `UserSendDMFailedEvent: ${this.userId} failed to send DM in guild ${this.guildId}, with error ${this.error.message}`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserToUser.html":{"url":"classes/UserToUser.html","title":"class - UserToUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserToUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/dto/user-to-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Choice(CommandToExecute)@Param({description: 'Was möchtest du einer Person geben?', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-to-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Param({description: 'The user you want to give something', descriptionLocalizations: undefined, type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bot/dto/user-to-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Choice, Param, ParamType } from '@discord-nestjs/core';\nimport { ChoiceOptions } from '@discord-nestjs/core/dist/decorators/option/choice/choice-options';\nimport { User } from 'discord.js';\n\nconst CommandToExecute: ChoiceOptions = {\n  'Einer Person einen Kaffee geben': 'coffee',\n  'Einer Person einen Kuchen geben': 'cake',\n  'Einer Person ein Headpat geben': 'headpat',\n  'Eine Person umarmen': 'hug',\n};\nexport class UserToUser {\n  @Param({\n    description: 'The user you want to give something',\n    descriptionLocalizations: {\n      'en-US': 'The user you want to give something',\n      de: 'Person welcher du etwas geben willst',\n    },\n    type: ParamType.USER,\n    required: true,\n  })\n  user: User;\n\n  @Choice(CommandToExecute)\n  @Param({\n    description: 'Was möchtest du einer Person geben?',\n    required: true,\n  })\n  category: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.controller.ts\n            \n            controller\n            AuditLogController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.events.ts\n            \n            injectable\n            AuditEvents\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/auditlog/auditlog.service.ts\n            \n            injectable\n            AuditLogService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auditlog/dto/audit-log-filter.dto.ts\n            \n            class\n            AuditLogFilterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auditlog/dto/log-entry.dto.ts\n            \n            class\n            LogEntryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/guards/refresh-auth.guard.ts\n            \n            injectable\n            RefreshJwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.controller.ts\n            \n            controller\n            JwtAuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.service.ts\n            \n            injectable\n            JwtAuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/jwt/jwt-auth.strategy.ts\n            \n            injectable\n            JwtAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt/refresh-token.strategy.ts\n            \n            injectable\n            RefreshJwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/add-role.command.ts\n            \n            class\n            AddRoleCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/clean-wfp.command.ts\n            \n            class\n            CleanWfpMember\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/community-question.command.ts\n            \n            class\n            CommunityQuestionCommand\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bot/commands/init-guild.command.ts\n            \n            class\n            initGuildCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/mod-anouncement.command.ts\n            \n            class\n            MumVoiceCommandChatInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/commands/mod-anouncement.command.ts\n            \n            class\n            MumVoiceCommandUi\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/ping.command.ts\n            \n            class\n            PingCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/special.command.ts\n            \n            class\n            SpecialCommand\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/bot/commands/ticket-system.command.ts\n            \n            class\n            TicketSystemSetupCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/timeout.command.ts\n            \n            class\n            TimeOutCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/unverify-by-role.conmand.ts\n            \n            class\n            UnverifyByRoleCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/commands/user-info-ui.command.ts\n            \n            class\n            UserInfoUiCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/commands/user-set-first-message-ui.command.ts\n            \n            class\n            SetFirstMessageUICommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BOT_EVENT_HANDLER_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BOT_EVENT_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/decorators/bot-event.decorator.ts\n            \n            variable\n            BotEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/dto/commmunity-question.dto.ts\n            \n            class\n            CommunityQuestionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/dto/community-question.form.dto.ts\n            \n            class\n            CommunityQuestionFormDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/dto/mod-anouncement.dto.ts\n            \n            class\n            ModAnnouncementDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/dto/user-timeout.dto.ts\n            \n            class\n            UserTimeOutDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/bot/dto/user-to-user.dto.ts\n            \n            class\n            UserToUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/bot/dto/user-to-user.dto.ts\n            \n            variable\n            CommandToExecute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/explorers/event.explorer.ts\n            \n            class\n            Explorer\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bot/filters/command-validation.ts\n            \n            class\n            CommandValidationFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/is-modal-interaction.guard.ts\n            \n            guard\n            IsModalInteractionGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/member-is-mod-or-higher.guard.ts\n            \n            guard\n            ReactedMemberIsModOrHigherGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/guards/message-from-user.guard.ts\n            \n            guard\n            MessageFromUserGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bot/guards/message-in-channel.guard.ts\n            \n            variable\n            ChannelIdGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/guards/message-is-dm.guard.ts\n            \n            guard\n            MessageIsDmGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/bot/guards/reaction-emote.guard.ts\n            \n            variable\n            ReactionEmoteGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/bot/guards/reaction-in-channel.guard.ts\n            \n            variable\n            ReactionChannelIdGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n            interface\n            DiscordExecutionContext\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/bot/guards/user-is-unlocked.guard.ts\n            \n            guard\n            IsUserUnlockedGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/bot/interfaces/bot-event.interface.ts\n            \n            interface\n            BotEvent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/events/guild-members/index.ts\n            \n            injectable\n            GuildMemberEvents\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/guild/events/interaction-create/mod-request-menu/index.ts\n            \n            class\n            ModRequestFlow\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/guild/events/message-create/dm-message/index.ts\n            \n            injectable\n            DmMessageHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/events/message-create/guild-message/index.ts\n            \n            injectable\n            GuildMessageHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/dto/auto-delete-channels.dto.ts\n            \n            class\n            GuildAutoDeleteChannelDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/guild-auto-delete-channel.controller.ts\n            \n            controller\n            GuildAutoDeleteChannelController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guild/guild-auto-delete-channel/guild-auto-delete-channel.service.ts\n            \n            injectable\n            GuildAutoDeleteChannelService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-restricted-channel/guild-restricted-channel.controller.ts\n            \n            controller\n            GuildRestrictedChannelController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/guild-restricted-channel/guild-restricted-channel.service.ts\n            \n            injectable\n            GuildRestrictedChannelService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/dto/restricted-channels.dto.ts\n            \n            class\n            RestrictedChannelDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/dto/settings.dto.ts\n            \n            class\n            SettingsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/events/settings-role-id-changed.event.ts\n            \n            class\n            SettingsChanged\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/guild-settings.controller.ts\n            \n            controller\n            GuildSettingsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild-settings/guild-settings.service.ts\n            \n            injectable\n            GuildSettingsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/guild/guild-user/dto/self.dto.ts\n            \n            class\n            SelfDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/guild-user/guild-user.controller.ts\n            \n            controller\n            GuildUserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/guild-user/guild-user.service.ts\n            \n            injectable\n            GuildUserService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/guild/guild.controller.ts\n            \n            controller\n            GuildController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guild/guild.service.ts\n            \n            injectable\n            GuildService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/guild/moderation/channel/channel.controller.ts\n            \n            controller\n            ChannelController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            Channel\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            GuildChannelEditOptions\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/channel.ts\n            \n            class\n            PermissionOverwrite\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/guild-member.ts\n            \n            class\n            DiscordGuildMember\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/role.ts\n            \n            class\n            EditRoleData\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/role.ts\n            \n            class\n            RoleResponse\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/role.ts\n            \n            variable\n            roleResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/role.ts\n            \n            variable\n            rolesResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/dto/user.ts\n            \n            class\n            DiscordUser\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/user.ts\n            \n            variable\n            userResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/guild/moderation/dto/user.ts\n            \n            variable\n            usersResponseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            ChannelCleaned\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            SlowmodeDisabled\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/channel.event.ts\n            \n            class\n            SlowmodeEnabled\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserBanEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserKickEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserPurgeEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserSendDMFailedEvent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserTimeOutEvent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/guild/moderation/events/user.events.ts\n            \n            class\n            UserTimeOutFailedEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/guild/moderation/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/guild/moderation/role/role.controller.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guild/moderation/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                        src/tasks/tasks.service.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/self.controller.ts\n            \n            controller\n            SelfController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/self.dto.ts\n            \n            class\n            Guild\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/self.dto.ts\n            \n            class\n            SelfDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/self.service.ts\n            \n            injectable\n            SelfService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/util/decorators/parameter-not-undefined.ts\n            \n            function\n            DearV8ProtectMeFromParametersWithNoneValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-guild-user.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-guild-user.decorator.ts\n            \n            variable\n            RequestGuildUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-user.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/request-user.decorator.ts\n            \n            variable\n            RequestUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/requires-rank.decorator.ts\n            \n            variable\n            REQUIRED_RANK_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/decorators/requires-rank.decorator.ts\n            \n            variable\n            RequiredRank\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/dto/log.entry.dto.ts\n            \n            class\n            LogEntry\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            variable\n            actions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            variable\n            targetTypes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            type alias\n            Action\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/dto/log.entry.dto.ts\n            \n            type alias\n            TargetType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/util/exception/channel-not-text-based-exception.ts\n            \n            class\n            ChannelNotTextBasedException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/channel-not-text-based-exception.ts\n            \n            class\n            ChannelNotTextBasedExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/guild-does-not-exist-exception.ts\n            \n            class\n            GuildDoesNotExistException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/guild-does-not-exist-exception.ts\n            \n            class\n            GuildDoesNotExistExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/send-direct-message-to-user-exception.ts\n            \n            class\n            SendDirectMessageToUserException\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/util/exception/send-direct-message-to-user-exception.ts\n            \n            class\n            SendDirectMessageToUserExceptionFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/util/functions/channel-utils.ts\n            \n            function\n            cleanTextChannel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/get-attachtment-type.ts\n            \n            function\n            getAttachmentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            modRequestCategorySelect\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            needHelpButton\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            function\n            selectGuildMenu\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            variable\n            modRequestMenuId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/functions/menu-helper.ts\n            \n            variable\n            needHelpButtonId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/functions/plain-to-instance.ts\n            \n            function\n            plainToInstance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/guards/has-required-rank.guard.ts\n            \n            guard\n            HasRequiredRank\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/util/guards/has-required-rank.guard.ts\n            \n            variable\n            InheritedRanks\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/interfaces/event-to-log.ts\n            \n            interface\n            EventToLog\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @discord-nestjs/common : ^5.3.2\n        \n            @discord-nestjs/core : ^5.5.1\n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.5\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.5\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.5\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @prisma/client : ^6.12.0\n        \n            axios : ^1.11.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            discord.js : ^14.18.0\n        \n            jest-mock-extended : ^4.0.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-oauth2 : ^1.7.0\n        \n            rambda : ^10.3.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            type-fest : ^4.41.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            cleanTextChannel   (src/.../channel-utils.ts)\n                        \n                        \n                            DearV8ProtectMeFromParametersWithNoneValue   (src/.../parameter-not-undefined.ts)\n                        \n                        \n                            getAttachmentType   (src/.../get-attachtment-type.ts)\n                        \n                        \n                            modRequestCategorySelect   (src/.../menu-helper.ts)\n                        \n                        \n                            needHelpButton   (src/.../menu-helper.ts)\n                        \n                        \n                            plainToInstance   (src/.../plain-to-instance.ts)\n                        \n                        \n                            selectGuildMenu   (src/.../menu-helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/util/functions/channel-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cleanTextChannel\n                        \n                    \n                \n            \n            \n                \ncleanTextChannel(channel: GuildTextBasedChannel, stopCb, filterCb, logger: Logger)\n                \n            \n\n\n\n\n            \n                \n                        Utility function which deletes messages determined by the filterCb in a given channel until the stopCb returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                        GuildTextBasedChannel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    GuildTextBasedChannel -- the channel to clean\n\n                                            \n                                        \n                                        \n                                                stopCb\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the callback which gets called to check if we should stop deleting messages\n\n                                            \n                                        \n                                        \n                                                filterCb\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the callback used to filter out messages to delete\n\n                                            \n                                        \n                                        \n                                                logger\n                                            \n                                                        Logger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the logger used to log to the apps log\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/util/decorators/parameter-not-undefined.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DearV8ProtectMeFromParametersWithNoneValue\n                        \n                    \n                \n            \n            \n                \nDearV8ProtectMeFromParametersWithNoneValue(target: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ClassDecorator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/util/functions/get-attachtment-type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAttachmentType\n                        \n                    \n                \n            \n            \n                \ngetAttachmentType(contentType: string)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to check which type the contentType is,\nused to check the type of a attachment of a message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                contentType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    string that contains the content type e.g vide/mp4\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AttachmentType\n\n                        \n                            \n                                AttachmentType enum value for the given type\n\n                            \n                \n            \n        \n    \n    src/util/functions/menu-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modRequestCategorySelect\n                        \n                    \n                \n            \n            \n                \nmodRequestCategorySelect(suffix: string)\n                \n            \n\n\n\n\n            \n                \n                        Returns a SelectMenu for the ModRequest functionality\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                suffix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Some string to suffix the the value of each field\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     StringSelectMenuBuilder\n\n                        \n                            \n                                StringSelectMenuBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        needHelpButton\n                        \n                    \n                \n            \n            \n                \nneedHelpButton()\n                \n            \n\n\n\n\n            \n                \n                        Utility function that returns a button builder named \"Hilfe benötigt\"\n\n\n                        \n                            Returns :     ButtonBuilder\n\n                        \n                            \n                                ButtonBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectGuildMenu\n                        \n                    \n                \n            \n            \n                \nselectGuildMenu(guilds, client: Client)\n                \n            \n\n\n\n\n            \n                \n                        Utility function that returns a SelectMenu to choose a guild.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                guilds\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of guildIDs\n\n                                            \n                                        \n                                        \n                                                client\n                                            \n                                                        Client\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Discord Client\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     StringSelectMenuBuilder\n\n                        \n                            \n                                StringSelectMenuBuilder object that can directly be used with discord.js\n\n                            \n                \n            \n        \n    \n    src/util/functions/plain-to-instance.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        plainToInstance\n                        \n                    \n                \n            \n            \n                \nplainToInstance(cls: Constructor, plain: Pick)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to convert a plain object to the given type and return a constructed class\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cls\n                                            \n                                                            Constructor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A class type, must be a constructor\n\n                                            \n                                        \n                                        \n                                                plain\n                                            \n                                                        Pick\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A plain object that can be the cls type\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                the generic T, type of cls\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/initGuildCommand.html":{"url":"classes/initGuildCommand.html","title":"class - initGuildCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  initGuildCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bot/commands/init-guild.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                onInitGuild\n                            \n                            \n                                    \n                                    Async\n                                onInteraction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaServer: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bot/commands/init-guild.command.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaServer\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onInitGuild\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInitGuild(interaction: CommandInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Handler()\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/init-guild.command.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                        CommandInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        onInteraction\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInteraction(interaction: ChannelSelectMenuInteraction | RoleSelectMenuInteraction)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @On('interactionCreate')\n                \n            \n\n                    \n                        \n                            Defined in src/bot/commands/init-guild.command.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                interaction\n                                            \n                                                            ChannelSelectMenuInteraction | RoleSelectMenuInteraction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Command, Handler, InteractionEvent, On } from '@discord-nestjs/core';\nimport { Inject } from '@nestjs/common';\nimport {\n  ActionRowBuilder,\n  ChannelSelectMenuBuilder,\n  ChannelSelectMenuInteraction,\n  ChannelType,\n  CommandInteraction,\n  MessageActionRowComponentBuilder,\n  RoleSelectMenuBuilder,\n  RoleSelectMenuInteraction,\n} from 'discord.js';\nimport { PrismaService } from 'src/prisma.service';\n\n@Command({\n  name: 'setup-bot',\n  description: 'Shows a modal to set/update the bot settings',\n  defaultMemberPermissions: ['ModerateMembers'],\n  dmPermission: false,\n})\nexport class initGuildCommand {\n  constructor(\n    @Inject(PrismaService) private readonly prismaServer: PrismaService,\n  ) {}\n  @Handler()\n  async onInitGuild(@InteractionEvent() interaction: CommandInteraction) {\n    await interaction.deferReply({ ephemeral: true });\n    const settings = await this.prismaServer.settings.findUnique({\n      where: { guildId: interaction.guildId },\n    });\n    const setOpenIntroChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('openIntroChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.openIntroChannelId))\n          .name ?? 'Select the open intro channel',\n      );\n\n    const setIntroChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('IntroChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.introChannelId))\n          .name ?? 'Select the intro channel',\n      );\n    const setMiscChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('miscChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.leaveChannelId))\n          .name ?? 'Select the miscellaneous channel',\n      );\n    const setModChannelId = new ChannelSelectMenuBuilder()\n      .setCustomId('modChannelId-setup')\n      .addChannelTypes([\n        ChannelType.GuildText,\n        ChannelType.PublicThread,\n        ChannelType.PrivateThread,\n      ])\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.channels.fetch(settings.modChannelId)).name ??\n          'Select the mod channel',\n      );\n    const setModRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('modRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.modRoleId)).name ??\n          'Select the mod role',\n      );\n\n    const setAdminRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('adminRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.adminRoleId)).name ??\n          'Select the admin role',\n      );\n\n    const setVerifiedMemberRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('verifiedMemberRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.verifiedMemberRoleId))\n          .name ?? 'Select the verified member role',\n      );\n\n    const setUnverifiedRoleId = new RoleSelectMenuBuilder()\n      .setCustomId('unverifiedMemberRoleId-setup')\n      .setMaxValues(1)\n      .setMinValues(0)\n      .setPlaceholder(\n        (await interaction.guild.roles.fetch(settings.unverifiedMemberRoleId))\n          .name ?? 'Select the unverified member role',\n      );\n\n    const roleRows = [\n      setAdminRoleId,\n      setModRoleId,\n      setUnverifiedRoleId,\n      setVerifiedMemberRoleId,\n    ].map((row) =>\n      new ActionRowBuilder().addComponents(\n        row,\n      ),\n    );\n    const channelRows = [\n      setModChannelId,\n      setIntroChannelId,\n      setOpenIntroChannelId,\n      setMiscChannelId,\n    ].map((row) =>\n      new ActionRowBuilder().addComponents(\n        row,\n      ),\n    );\n\n    Promise.all([\n      interaction.followUp({\n        ephemeral: true,\n        content: 'Configure the role settings below',\n        components: [...roleRows],\n      }),\n      interaction.followUp({\n        ephemeral: true,\n        content: 'Configure the channel settings below',\n        components: [...channelRows],\n      }),\n    ]);\n  }\n\n  @On('interactionCreate')\n  async onInteraction(\n    interaction: ChannelSelectMenuInteraction | RoleSelectMenuInteraction,\n  ) {\n    if (\n      !(\n        interaction.customId != undefined &&\n        interaction.customId.endsWith('-setup') &&\n        interaction.isAnySelectMenu()\n      )\n    )\n      return;\n    await interaction.deferReply({ ephemeral: true });\n    if (interaction.isChannelSelectMenu()) {\n      const guildId = interaction.guildId;\n      const channelId = interaction.values[0];\n      switch (interaction.customId) {\n        case 'openIntroChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { openIntroChannelId: channelId },\n          });\n          break;\n        case 'IntroChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { introChannelId: channelId },\n          });\n          break;\n        case 'miscChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { leaveChannelId: channelId },\n          });\n          break;\n        case 'modChannelId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { modChannelId: channelId },\n          });\n          break;\n      }\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    } else if (interaction.isRoleSelectMenu()) {\n      const guildId = interaction.guildId;\n      const roleId = interaction.values[0];\n      switch (interaction.customId) {\n        case 'modRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { modRoleId: roleId },\n          });\n          break;\n        case 'adminRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { adminRoleId: roleId },\n          });\n          break;\n        case 'verifiedMemberRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { verifiedMemberRoleId: roleId },\n          });\n          break;\n        case 'unverifiedMemberRoleId-setup':\n          await this.prismaServer.settings.update({\n            where: { guildId: guildId },\n            data: { unverifiedMemberRoleId: roleId },\n          });\n          break;\n      }\n      await interaction.followUp({\n        content: 'Done!',\n        ephemeral: true,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nExample :                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\nExample :                        Preamble  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n  The precise terms and conditions for copying, distribution and\nmodification follow.\nExample :                   TERMS AND CONDITIONS\nDefinitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\nSource Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n  The Corresponding Source for a work in source code form is that\nsame work.\n\nBasic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\nConveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\nConveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\nExample :a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\nConveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\nExample :a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\nAdditional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\nExample :a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\nTermination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\nAcceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\nAutomatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\nPatents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\nNo Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\nRemote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\nRevised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\nDisclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nLimitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\nInterpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\nExample :                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\nExample :\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\nhttps://www.gnu.org/licenses/.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuditLogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BotModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildAutoDeleteChannelModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildRestrictedChannelModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildSettingsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GuildUserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        JwtAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ModerationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuditLogModule\n\n\n\ncluster_AuditLogModule_exports\n\n\n\ncluster_AuditLogModule_providers\n\n\n\ncluster_BotModule\n\n\n\ncluster_BotModule_providers\n\n\n\ncluster_GuildAutoDeleteChannelModule\n\n\n\ncluster_GuildAutoDeleteChannelModule_exports\n\n\n\ncluster_GuildAutoDeleteChannelModule_providers\n\n\n\ncluster_GuildModule\n\n\n\ncluster_GuildModule_imports\n\n\n\ncluster_GuildModule_exports\n\n\n\ncluster_GuildModule_providers\n\n\n\ncluster_GuildRestrictedChannelModule\n\n\n\ncluster_GuildRestrictedChannelModule_exports\n\n\n\ncluster_GuildSettingsModule\n\n\n\ncluster_GuildSettingsModule_exports\n\n\n\ncluster_GuildUserModule\n\n\n\ncluster_GuildUserModule_exports\n\n\n\ncluster_JwtAuthModule\n\n\n\ncluster_JwtAuthModule_exports\n\n\n\ncluster_JwtAuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nBotModule\n\nBotModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBotModule->AppModule\n\n\n\n\n\nGuildModule\n\nGuildModule\n\nAppModule -->\n\nGuildModule->AppModule\n\n\n\n\n\nGuildService \n\nGuildService \n\nGuildService  -->\n\nGuildModule->GuildService \n\n\n\n\n\nJwtAuthModule\n\nJwtAuthModule\n\nAppModule -->\n\nJwtAuthModule->AppModule\n\n\n\n\n\nJwtAuthService \n\nJwtAuthService \n\nJwtAuthService  -->\n\nJwtAuthModule->JwtAuthService \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nSelfService \n\nSelfService \n\nSelfService  -->\n\nUserModule->SelfService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nBotModule -->\n\nPrismaService->BotModule\n\n\n\nGuildModule -->\n\nPrismaService->GuildModule\n\n\n\nJwtAuthModule -->\n\nPrismaService->JwtAuthModule\n\n\n\nTasksModule -->\n\nPrismaService->TasksModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nAuditLogModule\n\nAuditLogModule\n\nAuditLogModule -->\n\nPrismaService->AuditLogModule\n\n\n\n\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule\n\nGuildAutoDeleteChannelModule -->\n\nPrismaService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule\n\nGuildRestrictedChannelModule -->\n\nPrismaService->GuildRestrictedChannelModule\n\n\n\n\n\nGuildSettingsModule\n\nGuildSettingsModule\n\nGuildSettingsModule -->\n\nPrismaService->GuildSettingsModule\n\n\n\n\n\nGuildUserModule\n\nGuildUserModule\n\nGuildUserModule -->\n\nPrismaService->GuildUserModule\n\n\n\n\n\nModerationModule\n\nModerationModule\n\nModerationModule -->\n\nPrismaService->ModerationModule\n\n\n\n\n\nAuditLogService \n\nAuditLogService \n\nAuditLogService  -->\n\nAuditLogModule->AuditLogService \n\n\n\nModerationModule -->\n\nAuditLogModule->ModerationModule\n\n\n\n\n\nAuditEvents\n\nAuditEvents\n\nAuditLogModule -->\n\nAuditEvents->AuditLogModule\n\n\n\n\n\nAuditLogService\n\nAuditLogService\n\nAuditLogModule -->\n\nAuditLogService->AuditLogModule\n\n\n\n\n\nGuildRestrictedChannelService\n\nGuildRestrictedChannelService\n\nBotModule -->\n\nGuildRestrictedChannelService->BotModule\n\n\n\nGuildModule -->\n\nGuildRestrictedChannelService->GuildModule\n\n\n\nTasksModule -->\n\nGuildRestrictedChannelService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildRestrictedChannelService->GuildAutoDeleteChannelModule\n\n\n\nGuildRestrictedChannelModule -->\n\nGuildRestrictedChannelService->GuildRestrictedChannelModule\n\n\n\n\n\nGuildService\n\nGuildService\n\nBotModule -->\n\nGuildService->BotModule\n\n\n\nGuildModule -->\n\nGuildService->GuildModule\n\n\n\nTasksModule -->\n\nGuildService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildSettingsService\n\nGuildSettingsService\n\nBotModule -->\n\nGuildSettingsService->BotModule\n\n\n\nTasksModule -->\n\nGuildSettingsService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildSettingsService->GuildAutoDeleteChannelModule\n\n\n\nGuildSettingsModule -->\n\nGuildSettingsService->GuildSettingsModule\n\n\n\nGuildUserModule -->\n\nGuildSettingsService->GuildUserModule\n\n\n\n\n\nGuildAutoDeleteChannelService \n\nGuildAutoDeleteChannelService \n\nGuildModule -->\n\nGuildAutoDeleteChannelModule->GuildModule\n\n\n\nGuildAutoDeleteChannelService  -->\n\nGuildAutoDeleteChannelModule->GuildAutoDeleteChannelService \n\n\n\n\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelService\n\nGuildAutoDeleteChannelModule -->\n\nGuildAutoDeleteChannelService->GuildAutoDeleteChannelModule\n\n\n\n\n\nGuildUserService\n\nGuildUserService\n\nTasksModule -->\n\nGuildUserService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nGuildUserService->GuildAutoDeleteChannelModule\n\n\n\nGuildUserModule -->\n\nGuildUserService->GuildUserModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\nGuildAutoDeleteChannelModule -->\n\nTasksService->GuildAutoDeleteChannelModule\n\n\n\nGuildModule -->\n\nGuildRestrictedChannelModule->GuildModule\n\n\n\n\n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService \n\nGuildRestrictedChannelService  -->\n\nGuildRestrictedChannelModule->GuildRestrictedChannelService \n\n\n\nGuildModule -->\n\nGuildSettingsModule->GuildModule\n\n\n\n\n\nGuildSettingsService \n\nGuildSettingsService \n\nGuildSettingsService  -->\n\nGuildSettingsModule->GuildSettingsService \n\n\n\nGuildModule -->\n\nGuildUserModule->GuildModule\n\n\n\n\n\nGuildUserService \n\nGuildUserService \n\nGuildUserService  -->\n\nGuildUserModule->GuildUserService \n\n\n\nGuildModule -->\n\nModerationModule->GuildModule\n\n\n\n\n\nDmMessageHandler\n\nDmMessageHandler\n\nGuildModule -->\n\nDmMessageHandler->GuildModule\n\n\n\n\n\nGuildMemberEvents\n\nGuildMemberEvents\n\nGuildModule -->\n\nGuildMemberEvents->GuildModule\n\n\n\n\n\nGuildMessageHandler\n\nGuildMessageHandler\n\nGuildModule -->\n\nGuildMessageHandler->GuildModule\n\n\n\n\n\nJwtAuthService\n\nJwtAuthService\n\nJwtAuthModule -->\n\nJwtAuthService->JwtAuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nJwtAuthModule -->\n\nJwtAuthStrategy->JwtAuthModule\n\n\n\n\n\nRefreshJwtStrategy\n\nRefreshJwtStrategy\n\nJwtAuthModule -->\n\nRefreshJwtStrategy->JwtAuthModule\n\n\n\n\n\nSelfService\n\nSelfService\n\nJwtAuthModule -->\n\nSelfService->JwtAuthModule\n\n\n\nUserModule -->\n\nSelfService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    53 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : A discord bot for a community with special needs hence the name Mega-Transformers-Bot. Written in Typescript using Nestjs, discordjs and React. It also features a API that is used by the frontend but can also be used standalone\n        \n            License : AGPL-3.0-only\n        \n            Author : 89q12\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (src/.../log.entry.dto.ts)\n                        \n                        \n                            TargetType   (src/.../log.entry.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/dto/log.entry.dto.ts\n    \n    \n        \n            \n                \n                    \n                    Action\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TargetType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            actions   (src/.../log.entry.dto.ts)\n                        \n                        \n                            BOT_EVENT_HANDLER_NAME   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            BOT_EVENT_KEY   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            BotEvent   (src/.../bot-event.decorator.ts)\n                        \n                        \n                            ChannelIdGuard   (src/.../message-in-channel.guard.ts)\n                        \n                        \n                            CommandToExecute   (src/.../user-to-user.dto.ts)\n                        \n                        \n                            InheritedRanks   (src/.../has-required-rank.guard.ts)\n                        \n                        \n                            logger   (src/.../tasks.service.ts)\n                        \n                        \n                            logger   (src/.../request-guild-user.decorator.ts)\n                        \n                        \n                            logger   (src/.../request-user.decorator.ts)\n                        \n                        \n                            logger   (src/.../role.controller.ts)\n                        \n                        \n                            modRequestMenuId   (src/.../menu-helper.ts)\n                        \n                        \n                            needHelpButtonId   (src/.../menu-helper.ts)\n                        \n                        \n                            ReactionChannelIdGuard   (src/.../reaction-in-channel.guard.ts)\n                        \n                        \n                            ReactionEmoteGuard   (src/.../reaction-emote.guard.ts)\n                        \n                        \n                            RequestGuildUser   (src/.../request-guild-user.decorator.ts)\n                        \n                        \n                            RequestUser   (src/.../request-user.decorator.ts)\n                        \n                        \n                            REQUIRED_RANK_KEY   (src/.../requires-rank.decorator.ts)\n                        \n                        \n                            RequiredRank   (src/.../requires-rank.decorator.ts)\n                        \n                        \n                            roleResponseSchema   (src/.../role.ts)\n                        \n                        \n                            rolesResponseSchema   (src/.../role.ts)\n                        \n                        \n                            targetTypes   (src/.../log.entry.dto.ts)\n                        \n                        \n                            userResponseSchema   (src/.../user.ts)\n                        \n                        \n                            usersResponseSchema   (src/.../user.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/util/dto/log.entry.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'USER_JOINED',\n  'WARN',\n  'ERROR',\n  'USER_LEFT',\n  'USER_BANNED',\n  'USER_UNBANNED',\n  'USER_UPDATED',\n  'GUILD_UPDATED',\n  'INVALID_REQUEST',\n  'INVITE_CREATED',\n  'INVITE_DELETED',\n  'MESSAGE_DELETED',\n  'REACTION_ADDED',\n  'REACTION_REMOVED',\n  'ROLE_CREATED',\n  'ROLE_DELETED',\n  'ROLE_UPDATED',\n  'CHANNEL_CREATED',\n  'CHANNEL_DELETED',\n  'CHANNEL_UPDATED',\n  'WEBHOOKS_UPDATED',\n  'TIMEOUT_EXPIRED',\n  'TIMEOUT',\n  'KICK',\n  'BAN',\n] as const\n                    \n                \n\n            \n                \n                    All possible actions that can occur\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\n  'ERROR',\n  'WARN',\n  'USER',\n  'GUILD',\n  'INVALID_REQUEST',\n  'INVITE',\n  'MESSAGE',\n  'ROLE',\n  'CHANNEL',\n] as const\n                    \n                \n\n            \n                \n                    List of the targets an event can have\n\n                \n            \n\n        \n    \n\n    src/bot/decorators/bot-event.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BOT_EVENT_HANDLER_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__bot_event_handler__'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BOT_EVENT_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__bot_event__'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BotEvent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...event: Array) =>\n  SetMetadata(BOT_EVENT_KEY, event)\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/message-in-channel.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ChannelIdGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (channelId: string) => {\n  class ChannelIdGuardMixin implements CanActivate {\n    async canActivate(context: ExecutionContext) {\n      const message = context.getArgByIndex(0);\n      if (\n        !(message.message instanceof Message) ||\n        !(message.message as Message).inGuild()\n      ) {\n        return false;\n      }\n      return message.channelId === channelId;\n    }\n  }\n\n  const guard = mixin(ChannelIdGuardMixin);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/bot/dto/user-to-user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CommandToExecute\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChoiceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  'Einer Person einen Kaffee geben': 'coffee',\n  'Einer Person einen Kuchen geben': 'cake',\n  'Einer Person ein Headpat geben': 'headpat',\n  'Eine Person umarmen': 'hug',\n}\n                    \n                \n\n\n        \n    \n\n    src/util/guards/has-required-rank.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InheritedRanks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  OWNER: ['ADMIN', 'MOD', 'MEMBER'],\n  ADMIN: ['MOD', 'MEMBER'],\n  MOD: ['MEMBER'],\n  MEMBER: [],\n  NEW: [],\n}\n                    \n                \n\n            \n                \n                    Map of ranks that are inherited by any given rank,\nmeaning their lower ranks e.g MOD has MEMBER.\nBut MEMBER has 0 since its the lowest rank a member can have.\n\n                \n            \n\n        \n    \n\n    src/tasks/tasks.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('TaskService')\n                    \n                \n\n\n        \n    \n\n    src/util/decorators/request-guild-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RequestGuildUser')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequestGuildUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx\n      .switchToHttp()\n      .getRequest();\n    const user = request.user;\n\n    if (!user) {\n      logger.error(`${ctx.getHandler().toString()} has a parameter with\n      annotation RequestGuildUser but is NOT guarded by ${\n        JwtAuthGuard.name\n      } AND the request path ${\n        request.path\n      } is not prefixed by \"/guild/:guildId/\n        Please use ${JwtAuthGuard.name} if you want to access a UserId`);\n      throw new InternalServerErrorException();\n    }\n    return user;\n  },\n)\n                    \n                \n\n            \n                \n                    A param decorator to check whether a GuildUser is set on a request,\nif not the route is not guarded by JWT but should be.\nIf the route is guarded it returns the user\n\n                \n            \n\n        \n    \n\n    src/util/decorators/request-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RequestUser')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequestUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const userId = ctx.switchToHttp().getRequest()\n      .user.userId;\n\n    if (!userId) {\n      logger.error(`${ctx.getHandler().toString()} has a parameter with\n    annotation RequestUser but is NOT guarded by ${JwtAuthGuard.name}.\n      Please use ${JwtAuthGuard.name} if you want to access a UserId`);\n      throw new InternalServerErrorException();\n    }\n    return userId;\n  },\n)\n                    \n                \n\n            \n                \n                    A param decorator to check whether a user is set on a request,\nif not the route is not guarded by JWT but should be.\nIt returns the userID.\n\n                \n            \n\n        \n    \n\n    src/guild/moderation/role/role.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('RoleController')\n                    \n                \n\n\n        \n    \n\n    src/util/functions/menu-helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        modRequestMenuId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'modRequestMenu'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        needHelpButtonId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'createTicket'\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/reaction-in-channel.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReactionChannelIdGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (channelId: string) => {\n  class ChannelIdGuardMixin implements CanActivate {\n    async canActivate(context: ExecutionContext) {\n      const reaction = context.getArgByIndex(0);\n      if (reaction.partial) await reaction.fetch();\n      const message = reaction.message;\n      if (\n        message.message instanceof Message &&\n        !(message.message as Message).inGuild()\n      ) {\n        return false;\n      }\n      return message.channelId === channelId;\n    }\n  }\n\n  const guard = mixin(ChannelIdGuardMixin);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/bot/guards/reaction-emote.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReactionEmoteGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (emotes: string[]) => {\n  class ReactionEmote implements CanActivate {\n    canActivate(context: ExecutionContext): boolean {\n      const reaction = context.getArgByIndex(0);\n      if (\n        reaction instanceof MessageReaction &&\n        emotes.includes((reaction as MessageReaction).emoji.name)\n      ) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  const guard = mixin(ReactionEmote);\n  return guard;\n}\n                    \n                \n\n\n        \n    \n\n    src/util/decorators/requires-rank.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUIRED_RANK_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '__rank__'\n                    \n                \n\n            \n                \n                    The constant used in the RequiredRank decorator to store the rank for a function/object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RequiredRank\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (rank: Rank) =>\n  SetMetadata(REQUIRED_RANK_KEY, rank)\n                    \n                \n\n            \n                \n                    Sets the required rank for a route or controller\n\n                \n            \n\n        \n    \n\n    src/guild/moderation/dto/role.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roleResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  properties: {\n    guild: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    icon: {\n      type: 'string',\n      example: 'https://cdn.discordapp.com/emojis/859111454677139476.webp',\n    },\n    unicodeEmoji: {\n      type: 'string',\n      example: '👑',\n    },\n    id: {\n      type: 'string',\n      example: '123456789012345678',\n    },\n    name: {\n      type: 'string',\n      example: 'Admin',\n    },\n    color: {\n      type: 'number',\n      example: 0,\n    },\n    hoist: {\n      type: 'boolean',\n      example: false,\n    },\n    rawPosition: {\n      type: 'number',\n      example: 0,\n    },\n    permissions: {\n      type: 'string',\n      example: '0',\n    },\n    managed: {\n      type: 'boolean',\n      example: false,\n    },\n    mentionable: {\n      type: 'boolean',\n      example: false,\n    },\n    tags: {\n      type: 'string',\n      example: null,\n    },\n    createdTimestamp: {\n      type: 'number',\n      example: 1600000000000,\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rolesResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'array',\n  items: roleResponseSchema,\n  example: [\n    {\n      guild: '616609333832187924',\n      icon: null,\n      unicodeEmoji: null,\n      id: '616609333832187924',\n      name: '@everyone',\n      color: 0,\n      hoist: false,\n      rawPosition: 0,\n      permissions: '559623534870528',\n      managed: false,\n      mentionable: false,\n      tags: null,\n      createdTimestamp: 1567081521233,\n    },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/guild/moderation/dto/user.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    username: { type: 'string' },\n    discriminator: { type: 'string' },\n    avatarURL: { type: 'string' },\n    displayAvatarURL: { type: 'string' },\n    bannerURL: { type: 'string' },\n    bot: { type: 'boolean' },\n    system: { type: 'boolean' },\n    flags: { type: 'number' },\n    createdTimestamp: { type: 'number' },\n    accentColor: { type: 'number' },\n    hexAccentColor: { type: 'string' },\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usersResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'array',\n  items: userResponseSchema,\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
