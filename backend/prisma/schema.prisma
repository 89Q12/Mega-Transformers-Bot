// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rank {
  NEW
  MEMBER
  MOD
  ADMIN
  OWNER
}

enum LimitType {
  MAX_REACTIONS
  MAX_EMBEDS
  MAX_ATTACHMENTS
}

enum AttachmentType {
  IMAGE
  VIDEO
  AUDIO
  OTHER
}

model User {
  userId   String      @id @unique
  Stats    GuildUser[]
  Messages Messages[]
}

model GuildUser {
  guildId            String
  userId             String
  lastMessageSent    DateTime?        @default(now())
  lastOnline         DateTime         @default(now())
  messageCountBucket Int              @default(30)
  firstMessageId     String           @default("")
  unlocked           Boolean          @default(false)
  deactivated        Boolean          @default(false)
  rank               Rank             @default(NEW)
  user               User             @relation(fields: [userId], references: [userId])
  guild              Guild            @relation(fields: [guildId], references: [id])
  GuildUserLimit     GuildUserLimit[]
  Tickets            Tickets[]

  @@id([guildId, userId])
}

model Messages {
  messageId String          @id @unique
  userId    String
  channelId String
  guildId   String
  createdAt DateTime
  metadata  MessageMetadata @relation(fields: [messageId], references: [messageId])
  user      User            @relation(fields: [userId], references: [userId])
  guild     Guild           @relation(fields: [guildId], references: [id])
}

model RestrictedChannels {
  channelId      String @id @unique
  guildId        String
  requiredPoints Int    @default(0)
  guild          Guild  @relation(fields: [guildId], references: [id])
}

model AutoDeleteChannels {
  channelId    String @id @unique
  guildId      String
  deleteAtCron String @default("0 0 * * *")
  guild        Guild  @relation(fields: [guildId], references: [id])
}

model Settings {
  guildId                String @id @unique
  prefix                 String @default("!")
  welcomeMessageFormat   String @default("Hallo {user}, schÃ¶n, dass du zu uns gefunden hast!\n>{message}")
  openIntroChannelId     String @default("")
  introChannelId         String @default("")
  leaveMessageFormat     String @default("Goodbye {user}!")
  leaveChannelId         String @default("")
  unverifiedMemberRoleId String @default("")
  verifiedMemberRoleId   String @default("")
  modRoleId              String @default("")
  adminRoleId            String @default("")
  modChannelId           String @default("")
  guild                  Guild  @relation(fields: [guildId], references: [id])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  guildId    String
  invokerId  String
  action     String
  reason     String
  createdAt  DateTime @default(now())
  targetId   String
  targetType String
  extraInfo  Json?
  guild      Guild    @relation(fields: [guildId], references: [id])
}

model Limits {
  id             Int              @id @default(autoincrement())
  guildId        String
  limitType      LimitType
  limitValue     Int
  period         Int              @default(86400) // in seconds (1 day = 86400)
  guild          Guild            @relation(fields: [guildId], references: [id])
  GuildUserLimit GuildUserLimit[]
}

model Guild {
  id                 String               @id @unique
  name               String               @default("")
  Settings           Settings?
  AutoDeleteChannels AutoDeleteChannels[]
  RestrictedChannels RestrictedChannels[]
  AuditLog           AuditLog[]
  Limits             Limits[]
  Messages           Messages[]
  GuildUser          GuildUser[]
  initialised        Boolean              @default(false)
  GuildQuestion      GuildQuestion[]
}

model MessageMetadata {
  messageId   String       @id @unique
  length      Int
  reactions   Reaction[]
  attachments Attachment[]
  Messages    Messages?
}

model Reaction {
  id              Int             @id @default(autoincrement())
  messageId       String
  emoji           String
  count           Int
  MessageMetadata MessageMetadata @relation(fields: [messageId], references: [messageId])
}

model Attachment {
  id              Int             @id @default(autoincrement())
  messageId       String
  url             String
  type            AttachmentType
  MessageMetadata MessageMetadata @relation(fields: [messageId], references: [messageId])
}

model GuildUserLimit {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  Limits           Limits    @relation(fields: [limitsId], references: [id])
  limitsId         Int
  GuildUser        GuildUser @relation(fields: [guildUserGuildId, guildUserUserId], references: [guildId, userId])
  guildUserGuildId String
  guildUserUserId  String
}

model GuildQuestion {
  id                  Int                   @id @default(autoincrement())
  guildId             String
  question            String
  answers             Int                   @default(0)
  createdAt           DateTime              @default(now())
  guild               Guild                 @relation(fields: [guildId], references: [id])
  GuildQuestionAnswer GuildQuestionAnswer[]
}

model GuildQuestionAnswer {
  id              Int           @id @default(autoincrement())
  guildQuestion   GuildQuestion @relation(fields: [guildQuestionId], references: [id])
  guildQuestionId Int
  answer          String
  createdAt       DateTime      @default(now())
}

model LockdownRoleBackup {
  guildId String
  userId  String
  roles   Json

  @@id([guildId, userId])
}

model Tickets {
  guildId      String
  userId       String
  closed       Boolean   @default(false)
  ticketId     String    @id
  ticketNumber Int       @default(autoincrement())
  GuildUser    GuildUser @relation(fields: [guildId, userId], references: [guildId, userId])
}
